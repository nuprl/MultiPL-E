name: HumanEval_6_parse_nested_parens
language: julia
results:
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.trim()\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\".\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\"=\")\n    paren_string = paren_string.strip(\"\
    .\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\".\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\"=\")\n    paren_string = paren_string.strip(\"\
    .\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\".\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\"=\")\n    paren_string = paren_string.strip(\"\
    .\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\".\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\"=\")\n    paren_string = paren_string.strip(\"\
    .\")\n    paren_string = paren_string.strip(\",\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3,\
    \ 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\",\\nusing\
    \ Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmpl5aj7vnp.jl:59\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmpl5aj7vnp.jl:59\nin expression starting at /tmp/tmpl5aj7vnp.jl:59\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.strip\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]\nusing Test\n\n\
    @testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\"{}[]{}[]{}[]{}[]{}[]\\\
    nusing Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmprbqnpwf5.jl:39\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmprbqnpwf5.jl:39\nin expression starting at /tmp/tmprbqnpwf5.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_stack = Vector{Int64}()\n    paren_stack = paren_stack + paren_string.count(\"\
    (\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn1ldee7q.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn1ldee7q.jl:1\n\
    in expression starting at /tmp/tmpn1ldee7q.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.strip\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]\nusing Test\n\n\
    @testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\"{}[]{}[]{}[]{}[]{}[]\\\
    nusing Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmpaak3vjli.jl:39\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmpaak3vjli.jl:39\nin expression starting at /tmp/tmpaak3vjli.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_stack = Vector{Int64}()\n    paren_stack = paren_stack + paren_string.count(\"\
    (\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpp3l95yx2.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpp3l95yx2.jl:1\n\
    in expression starting at /tmp/tmpp3l95yx2.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.trim()\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\".\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\"=\")\n    paren_string = paren_string.strip(\"\
    .\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\".\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\"=\")\n    paren_string = paren_string.strip(\"\
    .\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\".\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\"=\")\n    paren_string = paren_string.strip(\"\
    .\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\".\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\"=\")\n    paren_string = paren_string.strip(\"\
    .\")\n    paren_string = paren_string.strip(\",\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3,\
    \ 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\",\\nusing\
    \ Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmpql_yl9qf.jl:59\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmpql_yl9qf.jl:59\nin expression starting at /tmp/tmpql_yl9qf.jl:59\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.trim()\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}\nusing Test\n\n\
    @testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\"{}[]{}[]{}[]{}[]{}\\\
    nusing Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmpbe31uxyt.jl:39\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmpbe31uxyt.jl:39\nin expression starting at /tmp/tmpbe31uxyt.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_stack = Vector{Int64}()\n    paren_stack = paren_stack + paren_string.count(\"\
    (\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9b329hai.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9b329hai.jl:1\n\
    in expression starting at /tmp/tmp9b329hai.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.strip\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]\nusing Test\n\n\
    @testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\"{}[]{}[]{}[]{}[]{}[]\\\
    nusing Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmpa4wrd9np.jl:39\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmpa4wrd9np.jl:39\nin expression starting at /tmp/tmpa4wrd9np.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.trim()\n    paren_groups = paren_string.split(\"\
    \ \")\n    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmproq3o7hw.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmproq3o7hw.jl:1\n\
    in expression starting at /tmp/tmproq3o7hw.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    stack = Vector{Int64}()\n    paren_level = 0\n    paren_levels = Vector{Int64}()\n\
    \    paren_level = 0\n    paren_levels = Vector{Int64}()\n    for paren in paren_string\n\
    \        if paren == '('\n            paren_level += 1\n            paren_levels\
    \ << paren_level\n        elseif paren == ')'\n            paren_level -= 1\n\
    \            paren_levels << paren_level\n        elseif paren == ' '\n      \
    \      paren_levels << paren_level\n        else\n            paren_levels <<\
    \ paren_level\n        end\n    end\n    paren_levels << paren_level\n    paren_levels\
    \ = paren_levels[2:end]\n    paren_levels = paren_levels[2:end]\n    paren_levels\
    \ = paren_levels[2:end]\n    paren_levels = paren_levels[2:end]\n    paren_levels\
    \ = paren_levels[2:end]\n    paren_levels = paren_levels[2:end]\n    paren_levels\
    \ = paren_levels[2:end]\n    paren_levels = paren_levels[2:end]\n    paren_levels\
    \ = paren_levels[2:end]\n    paren_levels = paren_levels[2:end]\n    paren_levels\
    \ = paren_levels[2:end]\n    paren_levels = paren_levels[2:end]\n    paren_levels\
    \ = paren_levels[2:end]\n    paren_levels = paren_levels[2:end]\n    paren_levels\
    \ = paren_levels[2:end]\n    paren_levels = paren_levels[2:end]\n    paren_levels\
    \ = paren_levels[2:end]\n    paren_levels = paren_levels[2:end]\n    paren_levels\
    \ = paren_levels[2:end]\n    paren_levels = paren_levels[2:end]\n    paren_levels\
    \ = paren_levels[2:end]\n    paren_levels = paren_levels[2:end]\n    paren_levels\
    \ = paren_levels[2:end]\n    paren_levels = paren_levels[2:end]\n    paren_levels\
    \ = paren_levels[2:end]\n    paren_levels = paren_levels[2:end]\n    paren_levels\
    \ = paren_levels[2:end]\n    paren_levels = paren_levels[2:end]\n    paren_levels\
    \ = paren_levels[2:end]\n    paren_levels = paren_levels[2:end]\n    paren_levels\
    \ = paren_levels[2:end]\n    paren\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9tvbishh.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9tvbishh.jl:1\n\
    in expression starting at /tmp/tmp9tvbishh.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    stack = Vector{Int64}()\n    paren_count = 0\n    for c in paren_string\n\
    \        if c == '('\n            paren_count += 1\n            push!(stack, paren_count)\n\
    \        elseif c == ')'\n            pop!(stack)\n            if paren_count\
    \ == stack[end]\n                paren_count -= 1\n            end\n        elseif\
    \ c == '('\n            paren_count += 1\n            push!(stack, paren_count)\n\
    \        elseif c == ')'\n            pop!(stack)\n            if paren_count\
    \ == stack[end]\n                paren_count -= 1\n            end\n        else\n\
    \            paren_count += 1\n            push!(stack, paren_count)\n       \
    \ end\n    end\n    return stack\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_sua79zo.jl:35\nin expression starting at\
    \ /tmp/tmp_sua79zo.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.strip\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"()[]{}\")\n    paren_string = paren_string.strip(\"\
    (){}[]\")\n    paren_string = paren_string.strip(\"{}()[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()\")\n    paren_string = paren_string.strip(\"[]{}()\"\
    )\n    paren_string = paren_string.strip(\"[](){}\")\n    paren_string = paren_string.strip(\"\
    ()[]{}()\")\n    paren_string = paren_string.strip(\"(){}[]()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()\")\n    paren_string = paren_string.strip(\"\
    {}()[]()\")\n    paren_string = paren_string.strip(\"[][]{}()\")\n    paren_string\
    \ = paren_string.strip(\"[]{}()()\")\n    paren_string = paren_string.strip(\"\
    ()[][]{}()\")\n    paren_string = paren_string.strip(\"(){}[][]()\")\n    paren_string\
    \ = paren_string.strip(\"{}[][]()()\")\n    paren_string = paren_string.strip(\"\
    {}()[][]()\")\n    paren_string = paren_string.strip(\"[][][]{}()\")\n    paren_string\
    \ = paren_string.strip(\"[]{}()[]()\")\n    paren_string = paren_string.strip(\"\
    ()[][][]{}()\")\n    paren_string = paren_string.strip(\"(){}[][][]()\")\n   \
    \ paren_string = paren_string.strip(\"{}[][][]()()\")\n    paren_string = paren_string.strip(\"\
    {}()[][][]()\")\n    paren_string = paren_string.strip(\"[][][][]{}()\")\n   \
    \ paren_string = paren_string.strip(\"[]{}()[][][]()\")\n    paren_string = paren_string.strip(\"\
    ()[][][][]{}()\")\n    paren_string = paren_string.strip(\"(){}[][][][]()\")\n\
    \    paren_string = paren_string.strip(\"{}[][][][]()()\")\n    paren_string =\
    \ paren_string.strip(\"{}()[][][][]()\")\n    paren_string = paren_string.strip(\"\
    [][][][][]{}()\")\n    paren_string = \nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpginvvwkj.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpginvvwkj.jl:1\n\
    in expression starting at /tmp/tmpginvvwkj.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.trim()\n    paren_array = paren_string.split(\"\
    \ \")\n    paren_array_size = length(paren_array)\n    paren_array_max = maximum(paren_array)\n\
    \    paren_array_min = minimum(paren_array)\n    paren_array_sum = sum(paren_array)\n\
    \    paren_array_mean = mean(paren_array)\n    paren_array_var = var(paren_array)\n\
    \    paren_array_std = std(paren_array)\n    paren_array_sum = sum(paren_array_std)\n\
    \    paren_array_mean = sum(paren_array_std)/length(paren_array_std)\n    paren_array_min\
    \ = min(paren_array_min)\n    paren_array_max = max(paren_array_max)\n    paren_array_sum\
    \ = sum(paren_array_max)\n    paren_array_mean = sum(paren_array_max)/length(paren_array_max)\n\
    \    paren_array_var = var(paren_array_max)\n    paren_array_std = std(paren_array_max)\n\
    \    paren_array_sum = sum(paren_array_min)\n    paren_array_mean = sum(paren_array_min)/length(paren_array_min)\n\
    \    paren_array_var = var(paren_array_min)\n    paren_array_std = std(paren_array_min)\n\
    \    paren_array_sum = sum(paren_array_sum)\n    paren_array_mean = sum(paren_array_sum)/length(paren_array_sum)\n\
    \    paren_array_var = var(paren_array_sum)\n    paren_array_std = std(paren_array_sum)\n\
    \    paren_array_sum = sum(paren_array_mean)\n    paren_array_mean = sum(paren_array_mean)/length(paren_array_mean)\n\
    \    paren_array_var = var(paren_array_mean)\n    paren_array_std = std(paren_array_mean)\n\
    \    paren_array_sum = sum(paren_array_var)\n    paren_array_mean = sum(paren_array_var)/length(paren_array_var)\n\
    \    paren_array_var = var(paren_array_var)\n    paren_array_std = std(paren_array_var)\n\
    \    paren_array_sum = sum(paren_array_std)\n    paren_array_mean = sum(paren_array_std)/length(paren_array_std)\n\
    \    paren_array_var = var(paren_array_std)\n    paren_array_std = std(paren_array_std)\n\
    \    paren_array_sum = sum(paren_array_min)\n    paren_array_mean = sum(paren_array_min)/length(paren_array_min)\n\
    \    paren_array_var = var(paren_array_min)\n    paren_array_std = std(paren_array_min)\n\
    \    paren_array_sum = sum(paren_\nusing Test\n\n@testset begin\n\ncandidate =\
    \ parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6349hlnz.jl:51\nin expression starting at\
    \ /tmp/tmp6349hlnz.jl:51\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.strip\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]\nusing Test\n\n\
    @testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\"{}[]{}[]{}[]{}[]{}[]\\\
    nusing Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmp21ps4ptb.jl:39\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmp21ps4ptb.jl:39\nin expression starting at /tmp/tmp21ps4ptb.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_levels = Vector{Int64}()\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpzimzpzf9.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzimzpzf9.jl:1\n\
    in expression starting at /tmp/tmpzimzpzf9.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.strip\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]()\")\n    paren_string = paren_string.strip(\"{}[]()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()\")\n \
    \   paren_string = paren_string.strip(\"{}[]()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()\")\n   \
    \ paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"{}\n\
    using Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\"{}\\nusing\
    \ Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmpumu5gay5.jl:41\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmpumu5gay5.jl:41\nin expression starting at /tmp/tmpumu5gay5.jl:41\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    stack = Vector{Int64}()\n    paren_level = 0\n    for paren in paren_string\n\
    \        if paren == '('\n            paren_level += 1\n            push!(stack,\
    \ paren_level)\n        elseif paren == ')'\n            paren_level -= 1\n  \
    \          if paren_level == 0\n                push!(stack, paren_level)\n  \
    \          end\n        else\n            push!(stack, paren_level)\n        end\n\
    \    end\n    return stack\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7z50uwyi.jl:26\nin expression starting at\
    \ /tmp/tmp7z50uwyi.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    stack = Vector{Int64}()\n    paren_count = 0\n    paren_level = 0\n  \
    \  for c in paren_string\n        if c == '('\n            paren_count += 1\n\
    \            paren_level += 1\n            push!(stack, paren_count)\n       \
    \ elif c == ')'\n            paren_count -= 1\n            if paren_count <= 0\n\
    \                paren_level -= 1\n                pop!(stack)\n            else\n\
    \                push!(stack, paren_count)\n            end\n        else\n  \
    \          push!(stack, paren_count)\n        end\n    end\n    return stack\n\
    end\n</cell>\n<text>\nPart 2: Parsing a string\nNow that we have implemented the\
    \ parsing function above, let's see how we can use it to parse a string.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"c\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpvsxexck3.jl:17\nin expression starting at /tmp/tmpvsxexck3.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_stack = Vector{Int64}()\n    paren_stack = paren_stack + paren_string.count(\"\
    (\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmptycpuuqs.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptycpuuqs.jl:1\n\
    in expression starting at /tmp/tmptycpuuqs.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.trim()\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    .\")\n    paren_string = paren_string.strip(\"..\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdqg_8t3v.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdqg_8t3v.jl:1\n\
    in expression starting at /tmp/tmpdqg_8t3v.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_array = paren_string.split(\" \")\n    paren_array = [paren_array[i]\
    \ for i in range(length(paren_array)) if paren_array[i]!=\"(\" and paren_array[i]!=')']\n\
    \    paren_array = [paren_array[i] for i in range(length(paren_array)) if paren_array[i]!=\"\
    (\" and paren_array[i]!=')' and paren_array[i]!=\"\\n\"]\n    paren_array = [paren_array[i]\
    \ for i in range(length(paren_array)) if paren_array[i]!=\"(\" and paren_array[i]!=')'\
    \ and paren_array[i]!=\"\\n\" and paren_array[i]!=\"\\t\"]\n    paren_array =\
    \ [paren_array[i] for i in range(length(paren_array)) if paren_array[i]!=\"(\"\
    \ and paren_array[i]!=')' and paren_array[i]!=\"\\n\" and paren_array[i]!=\"\\\
    t\" and paren_array[i]!=\"\\r\"]\n    paren_array = [paren_array[i] for i in range(length(paren_array))\
    \ if paren_array[i]!=\"(\" and paren_array[i]!=')' and paren_array[i]!=\"\\n\"\
    \ and paren_array[i]!=\"\\t\" and paren_array[i]!=\"\\r\" and paren_array[i]!=\"\
    \\b\"]\n    paren_array = [paren_array[i] for i in range(length(paren_array))\
    \ if paren_array[i]!=\"(\" and paren_array[i]!=')' and paren_array[i]!=\"\\n\"\
    \ and paren_array[i]!=\"\\t\" and paren_array[i]!=\"\\r\" and paren_array[i]!=\"\
    \\b\" and paren_array[i]!=\"\\f\"]\n    paren_array = [paren_array[i] for i in\
    \ range(length(paren_array)) if paren_array[i]!=\"(\" and paren_array[i]!=')'\
    \ and paren_array[i]!=\"\\n\" and paren_array[i]!=\"\\t\" and paren_array[i]!=\"\
    \\r\" and paren_array[i]!=\"\\b\" and paren_array[i]!=\"\\f\" and paren_array[i]!=\"\
    \\v\"]\n    paren_array = [paren_array[i] for i in range(length(paren_array))\
    \ if paren_array[i]!=\"(\" and paren_array[i]!=')' and paren_array[i]!=\"\\n\"\
    \ and paren_array[i]!=\"\\t\" and paren_array[i]!=\"\\r\" and paren_array[i]!=\"\
    \\b\" and paren_array[i]!=\"\\f\" and paren_array[i]!=\"\\v\" and paren_array[i]!=\"\
    \\a\"]\n    paren_array = [paren_array[i] for i in range(length(paren_array))\
    \ if paren_array[i]!=\"(\" and paren_array[i]!=')' and paren_array[i]!=\"\\n\"\
    \ and paren_array[i]!=\"\\t\" and paren_array[i]!=\"\\r\" and paren_array[i]!=\"\
    \\b\" and paren_array[i]!=\"\\f\" and \nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmpiwdkgdvm.jl:10\nin expression starting at /tmp/tmpiwdkgdvm.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.strip\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]()\")\n    paren_string = paren_string.strip(\"{}[]()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()\")\n \
    \   paren_string = paren_string.strip(\"{}[]()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()\")\n   \
    \ paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n\
    \    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n \
    \   paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n  \
    \  paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n   \
    \ paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n    paren_string =\
    \ paren_string.\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmp1mz78z2r.jl:8 expected\
    \ \"end\", got \"Test\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1mz78z2r.jl:35\n\
    in expression starting at /tmp/tmp1mz78z2r.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.trim()\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    \ \")\n    paren_string = paren_string.strip(\"\\n\")\n    paren_string = paren_string.strip(\"\
    \\r\")\n    paren_string = paren_string.strip(\"\\t\")\n    paren_string = paren_string.strip(\"\
    \\v\")\n    paren_string = paren_string.strip(\"\\f\")\n    paren_string = paren_string.strip(\"\
    \\a\")\n    paren_string = paren_string.strip(\"\\e\")\n    paren_string = paren_string.strip(\"\
    \\\\n\")\n    paren_string = paren_string.strip(\"\\\\\")\n    paren_string =\
    \ paren_string.strip(\"\\\\t\")\n    paren_string = paren_string.strip(\"\\\\\
    v\")\n    paren_string = paren_string.strip(\"\\\\f\")\n    paren_string = paren_string.strip(\"\
    \\\\a\")\n    paren_string = paren_string.strip(\"\\\\e\")\n    paren_string =\
    \ paren_string.strip(\"\\\\n\")\n    paren_string = paren_string.strip(\"\\\\\"\
    )\n    paren_string = paren_string.strip(\"\\\\t\")\n    paren_string = paren_string.strip(\"\
    \\\\v\")\n    paren_string = paren_string.strip(\"\\\\f\")\n    paren_string =\
    \ paren_string.strip(\"\\\\a\")\n    paren_string = paren_string.strip(\"\\\\\
    e\")\n    paren_string = paren_string.strip(\"\\\\n\")\n    paren_string = paren_string.strip(\"\
    \\\\\")\n    paren_string = paren_string.strip(\"\\\\t\")\n    paren_string =\
    \ paren_string.strip(\"\\\\v\")\n    paren_string = paren_string.strip(\"\\\\\
    f\")\n    paren_string = paren_string.strip(\"\\\\a\")\n    paren_string = paren_string.strip(\"\
    \\\\e\")\n    paren_string = paren_string.strip(\"\\\\n\")\n    paren_string =\
    \ paren_string.strip(\"\\\\\")\n    paren_string = paren_string.strip(\"\\\\t\"\
    )\n    paren_string = paren_string.strip(\"\\\\v\")\n    paren_string = paren_string.strip(\"\
    \\\\f\")\n    paren_string = paren_string.strip(\"\\\\a\")\n    paren_string =\
    \ paren_string.strip(\"\\\\e\")\n    paren_string = paren_string.strip(\"\\\\\
    n\")\n    paren_string = paren_string.strip(\"\\\\\")\n    paren_string = paren_string.\n\
    using Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpegpimiyh.jl:8 expected\
    \ \"end\", got \"Test\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpegpimiyh.jl:51\n\
    in expression starting at /tmp/tmpegpimiyh.jl:51\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_stack = Vector{Int64}()\n    paren_stack = paren_stack + paren_string.count('(')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxbt5qbkk.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxbt5qbkk.jl:1\n\
    in expression starting at /tmp/tmpxbt5qbkk.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.trim()\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\" ()\")\n    paren_string = paren_string.strip(\"\
    ()()\")\n    paren_string = paren_string.strip(\"(())\")\n    paren_string = paren_string.strip(\"\
    (()())\")\n    paren_string = paren_string.strip(\"(())()\")\n    paren_string\
    \ = paren_string.strip(\"(()())()\")\n    paren_string = paren_string.strip(\"\
    (()())()()\")\n    paren_string = paren_string.strip(\"(()())()()()\")\n    paren_string\
    \ = paren_string.strip(\"(()())()()()()\")\n    paren_string = paren_string.strip(\"\
    (()())()()()()()\")\n    paren_string = paren_string.strip(\"(()())()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"(()())()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"(()())()()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    (()())()()()()()()()()()\")\n    paren_string = paren_string.strip(\"(()())()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"(()())()()()()()()()()()()\")\n   \
    \ paren_string = paren_string.strip(\"(()())()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"(()())()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    (()())()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"(()())()()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"(()())()()()()()()()()()()()\")\n \
    \   paren_string = paren_string.strip(\"(()())()()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"(()())()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    (()())()()()()()()()()()()()\")\n    paren_string = paren\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpp7zmeqhr.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpp7zmeqhr.jl:1\n\
    in expression starting at /tmp/tmpp7zmeqhr.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.trim()\n    paren_array = paren_string.split(\"\
    ()\")\n    paren_array_size = length(paren_array)\n    paren_array_max = 0\n \
    \   paren_array_level = 0\n    for paren_array_index in 1:paren_array_size\n \
    \       paren_array_level = paren_array_level + 1\n        if paren_array[paren_array_index]\
    \ == '('\n            if paren_array_level > paren_array_max\n               \
    \ paren_array_max = paren_array_level\n            end\n        elseif paren_array[paren_array_index]\
    \ == ')'\n            if paren_array_level < paren_array_max\n               \
    \ paren_array_max = paren_array_level\n            end\n        end\n    end\n\
    \    paren_array_max = paren_array_max + 1\n    paren_array_level = 0\n    paren_array_output\
    \ = []\n    for paren_array_index in 1:paren_array_size\n        paren_array_level\
    \ = paren_array_level + 1\n        if paren_array[paren_array_index] == '('\n\
    \            if paren_array_level > paren_array_max\n                paren_array_output\
    \ = paren_array_output + [paren_array_level]\n            end\n        elseif\
    \ paren_array[paren_array_index] == ')'\n            if paren_array_level < paren_array_max\n\
    \                paren_array_output = paren_array_output + [paren_array_level]\n\
    \            end\n        end\n    end\n    return paren_array_output\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp89n_nw6v.jl:43\nin expression starting at\
    \ /tmp/tmp89n_nw6v.jl:43\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_stack = Vector{Int64}()\n    paren_stack = paren_stack + paren_string.count('(')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp2x656b2d.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2x656b2d.jl:1\n\
    in expression starting at /tmp/tmp2x656b2d.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_array = paren_string.split(\" \")\n    paren_array_size = length(paren_array)\n\
    \    paren_array_levels = zeros(paren_array_size, 1)\n    for paren_array_level\
    \ in 1:paren_array_size\n        paren_array_levels[paren_array_level] = paren_array_level\n\
    \    end\n    paren_array_levels = paren_array_levels[paren_array_levels .!= 0]\n\
    \    paren_array_levels = paren_array_levels[paren_array_levels .!= paren_array_levels[1]]\n\
    \    paren_array_levels = paren_array_levels[paren_array_levels .!= paren_array_levels[paren_array_size]]\n\
    \    paren_array_levels = paren_array_levels[paren_array_levels .!= paren_array_levels[paren_array_size\
    \ - 1]]\n    paren_array_levels = paren_array_levels[paren_array_levels .!= paren_array_levels[paren_array_size\
    \ - 2]]\n    paren_array_levels = paren_array_levels[paren_array_levels .!= paren_array_levels[paren_array_size\
    \ - 3]]\n    paren_array_levels = paren_array_levels[paren_array_levels .!= paren_array_levels[paren_array_size\
    \ - 4]]\n    paren_array_levels = paren_array_levels[paren_array_levels .!= paren_array_levels[paren_array_size\
    \ - 5]]\n    paren_array_levels = paren_array_levels[paren_array_levels .!= paren_array_levels[paren_array_size\
    \ - 6]]\n    paren_array_levels = paren_array_levels[paren_array_levels .!= paren_array_levels[paren_array_size\
    \ - 7]]\n    paren_array_levels = paren_array_levels[paren_array_levels .!= paren_array_levels[paren_array_size\
    \ - 8]]\n    paren_array_levels = paren_array_levels[paren_array_levels .!= paren_array_levels[paren_array_size\
    \ - 9]]\n    paren_array_levels = paren_array_levels[paren_array_levels .!= paren_array_levels[paren_array_size\
    \ - 10]]\n    paren_array_levels = paren_array_levels[paren_array_levels .!= paren_array_levels[paren_array_size\
    \ - 11]]\n    paren_array_levels = paren_array_levels[paren_array_levels .!= paren_array_levels[paren_array_size\
    \ - 12]]\n    paren_array_levels = paren_array_levels[paren_array_levels .!= paren_array_levels[paren_array_size\
    \ - 13]]\n    paren\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6bu_pdjm.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6bu_pdjm.jl:1\n\
    in expression starting at /tmp/tmp6bu_pdjm.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.trim()\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]()\")\n    paren_string = paren_string.strip(\"{}[]()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()\")\n \
    \   paren_string = paren_string.strip(\"{}[]()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()\")\n \
    \   paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n  \
    \  paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n   \
    \ paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n    paren_string =\
    \ paren_string.strip(\"{}[]()()()()()()()()()()()()()()\")\n    paren_string =\
    \ paren_string.strip(\"{}[]()()()()()()()()()()()()()()\")\n    paren_string =\
    \ paren_string.strip(\"{}[]()()()()()\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\"{}[]()()()()()\\\
    nusing Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmp8qgv56v3.jl:40\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmp8qgv56v3.jl:40\nin expression starting at /tmp/tmp8qgv56v3.jl:40\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_stack = Vector{Int64}()\n    paren_stack = paren_stack + paren_string.count(\"\
    (\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpo6hsyx7r.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpo6hsyx7r.jl:1\n\
    in expression starting at /tmp/tmpo6hsyx7r.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_stack = Vector{Int64}()\n    paren_stack = paren_stack + paren_string.count('(')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9m583vct.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9m583vct.jl:1\n\
    in expression starting at /tmp/tmp9m583vct.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.trim()\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}\nusing Test\n\n\
    @testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\"{}[]{}[]{}[]{}[]{}\\\
    nusing Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmp8maj1uff.jl:39\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmp8maj1uff.jl:39\nin expression starting at /tmp/tmp8maj1uff.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_stack = Vector{Int64}()\n    paren_stack = paren_stack + paren_string.count(\"\
    (\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpzfwgv8us.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzfwgv8us.jl:1\n\
    in expression starting at /tmp/tmpzfwgv8us.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.trim()\n    paren_chars = paren_string.chars\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpsf44t9wu.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsf44t9wu.jl:1\n\
    in expression starting at /tmp/tmpsf44t9wu.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.trim()\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\"=\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\"=\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\"=\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\"=\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3ojg6_sj.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3ojg6_sj.jl:1\n\
    in expression starting at /tmp/tmp3ojg6_sj.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.strip\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n  \
    \  paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n\
    \    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmps6tvtfax.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps6tvtfax.jl:1\n\
    in expression starting at /tmp/tmps6tvtfax.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_stack = Vector{Int64}()\n    paren_stack = paren_stack + paren_string.count(\"\
    (\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpw7qlu8cy.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpw7qlu8cy.jl:1\n\
    in expression starting at /tmp/tmpw7qlu8cy.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_stack = Vector{Int64}()\n    paren_stack = paren_stack + paren_string.count(\"\
    (\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwq9sm1z_.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwq9sm1z_.jl:1\n\
    in expression starting at /tmp/tmpwq9sm1z_.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.strip\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    []\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}[]\")\n    paren_string = paren_string.strip(\"{}[]()\")\n    paren_string =\
    \ paren_string.strip(\"{}[]()()\")\n    paren_string = paren_string.strip(\"{}[]()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()\")\n    paren_string =\
    \ paren_string.strip(\"{}[]()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()\")\n   \
    \ paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3,\
    \ 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\"{}[]()()()()()()()()()()()\\\
    nusing Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmpiryksgs1.jl:39\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmpiryksgs1.jl:39\nin expression starting at /tmp/tmpiryksgs1.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.strip\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]\nusing Test\n\n\
    @testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\"{}[]{}[]{}[]{}[]{}[]\\\
    nusing Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmp80vx75ez.jl:39\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmp80vx75ez.jl:39\nin expression starting at /tmp/tmp80vx75ez.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.strip\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]\nusing Test\n\n\
    @testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\"{}[]{}[]{}[]{}[]{}[]\\\
    nusing Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmpkbdboqkz.jl:39\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmpkbdboqkz.jl:39\nin expression starting at /tmp/tmpkbdboqkz.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = paren_string.split(\" \")\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf1kb59pn.jl:52\nin expression starting at\
    \ /tmp/tmpf1kb59pn.jl:52\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_stack = Vector{Int64}()\n    paren_stack = paren_stack + paren_string.count(\"\
    (\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9mrjpvno.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9mrjpvno.jl:1\n\
    in expression starting at /tmp/tmp9mrjpvno.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_stack = Vector{Int64}()\n    paren_stack = paren_stack + paren_string.count('(')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpddrhpk4o.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpddrhpk4o.jl:1\n\
    in expression starting at /tmp/tmpddrhpk4o.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.strip\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]\nusing Test\n\n\
    @testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\"{}[]{}[]{}[]{}[]{}[]\\\
    nusing Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmpk0yq4dds.jl:39\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmpk0yq4dds.jl:39\nin expression starting at /tmp/tmpk0yq4dds.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.strip\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]\nusing Test\n\n\
    @testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\"{}[]{}[]{}[]{}[]{}[]\\\
    nusing Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmp4pcnuarg.jl:39\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmp4pcnuarg.jl:39\nin expression starting at /tmp/tmp4pcnuarg.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_stack = Vector{Int64}()\n    paren_stack = paren_stack + paren_string.count('(')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpixem7e8z.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpixem7e8z.jl:1\n\
    in expression starting at /tmp/tmpixem7e8z.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    stack = Vector{Int64}()\n    paren_count = 0\n    for c in paren_string\n\
    \        if c == '('\n            paren_count += 1\n            push!(stack, paren_count)\n\
    \        elseif c == ')'\n            pop!(stack)\n            paren_count -=\
    \ 1\n        elseif paren_count > 0\n            paren_count -= 1\n          \
    \  push!(stack, paren_count)\n        end\n    end\n    return stack\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of parentheses in the string.\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0r50mb9x.jl:25\nin expression starting at\
    \ /tmp/tmp0r50mb9x.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.strip\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}{}\")\n    paren_string = paren_string.strip(\"{}{}[]\")\n    paren_string =\
    \ paren_string.strip(\"{}{}{}\")\n    paren_string = paren_string.strip(\"{}{}{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}{}{}{}\")\n    paren_string = paren_string.strip(\"\
    {}{}{}{}[]\")\n    paren_string = paren_string.strip(\"{}{}{}{}{}\")\n    paren_string\
    \ = paren_string.strip(\"{}{}{}{}{}[]\")\n    paren_string = paren_string.strip(\"\
    {}{}{}{}{}{}\")\n    paren_string = paren_string.strip(\"{}{}{}{}{}{}[]\")\n \
    \   paren_string = paren_string.strip(\"{}{}{}{}{}{}{}\")\n    paren_string =\
    \ paren_string.strip(\"{}{}{}{}{}{}[]\")\n    paren_string = paren_string.strip(\"\
    {}{}{}{}{}{}{}{}\")\n    paren_string = paren_string.strip(\"{}{}{}{}{}{}{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}{}{}{}{}{}{}{}{}\")\n    paren_string\
    \ = paren_string.strip(\"{}{}{}{}{}{}{}{}[]\")\n    paren_string = paren_string.strip(\"\
    {}{}{}{}{}{}{}{}{}{}\")\n    paren_string = paren_string.strip(\"{}{}{}{}{}{}{}{}{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}{}{}{}{}{}{}{}{}{}{}\")\n    paren_string\
    \ = paren_string.strip(\"{}{}{}{}{}{}{}{}{}{}[]\")\n    paren_string = paren_string.strip(\"\
    {}{}{}{}{}{}{}{}{}{}{}\")\n    paren_string = paren_string.strip(\"{}{}{}{}{}{}{}{}{}{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}{}{}{}{}{}{}{}{}{}{}{}\")\n    paren_string\
    \ = paren_string.strip(\"{}{}{}{}{}{}{}{}{}{}{}[]\")\n    paren_string = paren_string.strip(\"\
    \nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\"\\nusing\
    \ Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmpdijr5n65.jl:44\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmpdijr5n65.jl:44\nin expression starting at /tmp/tmpdijr5n65.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_stack = Vector{Int64}()\n    paren_stack = paren_string.split(\"\
    \ \") |> collect{|x| x.to_i}\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[1..-1]\n    paren_stack\
    \ = paren_stack[1..-1]\n    paren_stack = paren_stack[\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"|\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphe4kve5p.jl:10\nin expression starting at\
    \ /tmp/tmphe4kve5p.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_stack = Vector{Int64}()\n    paren_stack = paren_stack + paren_string.count(\"\
    (\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp2p6lq88w.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2p6lq88w.jl:1\n\
    in expression starting at /tmp/tmp2p6lq88w.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.strip\n    paren_levels = Vector{Int64}()\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren\nusing Test\n\n@testset begin\n\n\
    candidate = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3,\
    \ 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp5rj79bxh.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5rj79bxh.jl:1\n\
    in expression starting at /tmp/tmp5rj79bxh.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_stack = Vector{Int64}()\n    paren_stack = paren_stack + paren_string.count(\"\
    (\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpnwi49hdw.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpnwi49hdw.jl:1\n\
    in expression starting at /tmp/tmpnwi49hdw.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.strip\n    paren_stack = Vector{Int64}()\n\
    \    paren_stack = paren_stack + paren_string.count('(')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmprif1bcp3.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprif1bcp3.jl:1\n\
    in expression starting at /tmp/tmprif1bcp3.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    stack = Vector{Int64}()\n    paren_count = 0\n    for c in paren_string\n\
    \        if c == '('\n            push!(stack, paren_count)\n            paren_count\
    \ += 1\n        elseif c == ')'\n            pop!(stack)\n            paren_count\
    \ -= 1\n        elseif c == '('\n            push!(stack, paren_count)\n     \
    \       paren_count += 1\n        elseif c == ')'\n            pop!(stack)\n \
    \           paren_count -= 1\n        else\n            push!(stack, paren_count)\n\
    \            paren_count += 1\n        end\n    end\n    return stack\nend\n</cell>\n\
    <text>\nPart 4: Parsing a string\nNow that we have our parsing function we can\
    \ use it to parse strings. We will use it to parse strings in the following format:\n\
    using Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr1io14n9.jl:31\nin expression starting at\
    \ /tmp/tmpr1io14n9.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.trim()\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n  \
    \  paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n\
    \    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp61w9mila.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp61w9mila.jl:1\n\
    in expression starting at /tmp/tmp61w9mila.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_stack = Vector{Int64}()\n    paren_stack = paren_stack + paren_string.count('(')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpfuuyc6vb.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfuuyc6vb.jl:1\n\
    in expression starting at /tmp/tmpfuuyc6vb.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.strip\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"()[]{}\")\n    paren_string = paren_string.strip(\"\
    (){}[]\")\n    paren_string = paren_string.strip(\"{}()[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()\")\n    paren_string = paren_string.strip(\"[]{}()\"\
    )\n    paren_string = paren_string.strip(\"[](){}\")\n    paren_string = paren_string.strip(\"\
    (){}{}\")\n    paren_string = paren_string.strip(\"()[][]{}\")\n    paren_string\
    \ = paren_string.strip(\"[]{}(){}\")\n    paren_string = paren_string.strip(\"\
    []()[]{}\")\n    paren_string = paren_string.strip(\"()[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"(){}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}()[][]\")\n    paren_string = paren_string.strip(\"{}[]()[]\")\n    paren_string\
    \ = paren_string.strip(\"[]{}()[]{}\")\n    paren_string = paren_string.strip(\"\
    []()[]{}[]\")\n    paren_string = paren_string.strip(\"()[][][]{}\")\n    paren_string\
    \ = paren_string.strip(\"(){}[][]{}\")\n    paren_string = paren_string.strip(\"\
    {}()[][][]\")\n    paren_string = paren_string.strip(\"{}[]()[][]\")\n    paren_string\
    \ = paren_string.strip(\"[]{}()[][]{}\")\n    paren_string = paren_string.strip(\"\
    []()[][]{}[]\")\n    paren_string = paren_string.strip(\"()[][][][]{}\")\n   \
    \ paren_string = paren_string.strip(\"(){}[][][]{}\")\n    paren_string = paren_string.strip(\"\
    {}()[][][][]\")\n    paren_string = paren_string.strip(\"{}[]()[][][]\")\n   \
    \ paren_string = paren_string.strip(\"[]{}()[][][]{}\")\n    paren_string = paren_string.strip(\"\
    []()[][][]{}[]\")\n    paren_string = paren_string.strip(\"()[][][][][]{}\")\n\
    \    paren_string = paren_string.strip(\"(){}[]\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3,\
    \ 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\"(){}[]\\\
    nusing Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmp3vka38p_.jl:48\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmp3vka38p_.jl:48\nin expression starting at /tmp/tmp3vka38p_.jl:48\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.trim()\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\".\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\".\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\".\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\".\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\".\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\".\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\".\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\".\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\".\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\".\")\n    paren_string = \nusing\
    \ Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpcdftkkuw.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcdftkkuw.jl:1\n\
    in expression starting at /tmp/tmpcdftkkuw.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_stack = Vector{Int64}()\n    paren_stack = paren_stack + paren_string.count(\"\
    (\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpops8v5a9.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpops8v5a9.jl:1\n\
    in expression starting at /tmp/tmpops8v5a9.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.trim()\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n  \
    \  paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n\
    \    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpnlk3lhrf.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpnlk3lhrf.jl:1\n\
    in expression starting at /tmp/tmpnlk3lhrf.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.trim()\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\" ()\")\n    paren_string = paren_string.strip(\"\
    ()()\")\n    paren_string = paren_string.strip(\"(())\")\n    paren_string = paren_string.strip(\"\
    (()())\")\n    paren_string = paren_string.strip(\"(())()\")\n    paren_string\
    \ = paren_string.strip(\"(()()())\")\n    paren_string = paren_string.strip(\"\
    (()()()())\")\n    paren_string = paren_string.strip(\"(()()()()())\")\n    paren_string\
    \ = paren_string.strip(\"(()()()()()())\")\n    paren_string = paren_string.strip(\"\
    (()()()()()()())\")\n    paren_string = paren_string.strip(\"(()()()()()()()())\"\
    )\n    paren_string = paren_string.strip(\"(()()()()()()()()())\")\n    paren_string\
    \ = paren_string.strip(\"(()()()()()()()()()())\")\n    paren_string = paren_string.strip(\"\
    (()()()()()()()()()()())\")\n    paren_string = paren_string.strip(\"(()()()()()()()()()()()())\"\
    )\n    paren_string = paren_string.strip(\"(()()()()()()()()()()()()())\")\n \
    \   paren_string = paren_string.strip(\"(()()()()()()()()()()()()())\")\n    paren_string\
    \ = paren_string.strip(\"(()()()()()()()()()()()()()())\")\n    paren_string =\
    \ paren_string.strip(\"(()()()()()()()()()()()()()())\")\n    paren_string = paren_string.strip(\"\
    (()()()()()()()()()()()()()())\")\n    paren_string = paren_string.strip(\"(()()()()()()()()()()()()()())\"\
    )\n    paren_string = paren_string.strip(\"(()()()()()()()()()()()()()())\")\n\
    \    paren_string = paren_string.strip(\"(()()()()()()()()()()()()()())\")\n \
    \   paren_string = paren_string.strip(\"(()()()()()()()()()()()()\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\"(()()()()()()()()()()()()\\\
    nusing Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmpn7hg300e.jl:40\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmpn7hg300e.jl:40\nin expression starting at /tmp/tmpn7hg300e.jl:40\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_array = paren_string.split(\" \")\n    paren_array_size = length(paren_array)\n\
    \    paren_array_max = 0\n    paren_array_index = 0\n    paren_array_level = 0\n\
    \    paren_array_nesting = 0\n    for paren_array_index in 1:paren_array_size\n\
    \        if paren_array[paren_array_index] == \")\"\n            paren_array_nesting\
    \ -= 1\n            if paren_array_nesting == 0\n                paren_array_max\
    \ += 1\n                paren_array_level -= 1\n            else\n           \
    \     paren_array_nesting += 1\n        end\n    end\n    return paren_array_max\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_i4cn2mg.jl:27\nin expression starting at\
    \ /tmp/tmp_i4cn2mg.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.strip\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n  \
    \  paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n\
    \    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdvszp8qo.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdvszp8qo.jl:1\n\
    in expression starting at /tmp/tmpdvszp8qo.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.strip\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]\nusing Test\n\n\
    @testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\"{}[]{}[]{}[]{}[]{}[]\\\
    nusing Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmpjvj0uyg3.jl:39\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmpjvj0uyg3.jl:39\nin expression starting at /tmp/tmpjvj0uyg3.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.trim()\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\" \")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3ornpjk8.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3ornpjk8.jl:1\n\
    in expression starting at /tmp/tmp3ornpjk8.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.strip\n    paren_array = paren_string.split(\"\
    \ \")\n    paren_array_size = length(paren_array)\n    paren_array_max = 0\n \
    \   for paren_array_index in 1:paren_array_size\n        paren_array_string =\
    \ paren_array[paren_array_index]\n        if paren_array_string == \"(\"\n   \
    \         paren_array_max += 1\n        elseif paren_array_string == \")\"\n \
    \           paren_array_max -= 1\n        else\n            paren_array_max +=\
    \ parse_nested_parens(paren_array_string)\n        end\n    end\n    return paren_array_max\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzlg0nrot.jl:25\nin expression starting at\
    \ /tmp/tmpzlg0nrot.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.trim()\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n  \
    \  paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n\
    \    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpypc461pl.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpypc461pl.jl:1\n\
    in expression starting at /tmp/tmpypc461pl.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = paren_string.split(\" \") |> String.split(\"(\") |> String.split(\"\
    )\")\n    paren_groups = paren_groups |> Array.sort\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups |> Array.map(x->parse(x.trim()))\n    paren_groups\
    \ = paren_groups |> Array.max\nend\n</code>\n<|/ a dscore=2 |>\n<| a tags=string,julia\
    \ |>\nHere is a solution that uses regular expressions:\n<code>\nusing Test\n\n\
    @testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppyb8k75t.jl:15\nin expression starting at\
    \ /tmp/tmppyb8k75t.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_stack = Vector{Int64}()\n    paren_stack = paren_stack + paren_string.count(\"\
    (\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp5xl0_ckt.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5xl0_ckt.jl:1\n\
    in expression starting at /tmp/tmp5xl0_ckt.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.strip\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]()\")\n    paren_string = paren_string.strip(\"{}[]()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()\")\n \
    \   paren_string = paren_string.strip(\"{}[]()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()\")\n   \
    \ paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n\
    \    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n \
    \   paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n  \
    \  paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n   \
    \ paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n    paren_string =\
    \ paren_string.\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmp17zejbg9.jl:8 expected\
    \ \"end\", got \"Test\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp17zejbg9.jl:35\n\
    in expression starting at /tmp/tmp17zejbg9.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    stack = Vector{Int64}()\n    paren_count = 0\n    paren_level = 0\n  \
    \  for c in paren_string\n        if c == '('\n            paren_count += 1\n\
    \            paren_level += 1\n            push!(stack, paren_count)\n       \
    \ elseif c == ')'\n            paren_count -= 1\n            if paren_count ==\
    \ 0\n                pop!(stack)\n                paren_level -= 1\n         \
    \   else\n                push!(stack, paren_count)\n            end\n       \
    \ else\n            push!(stack, paren_count)\n        end\n    end\n    return\
    \ stack\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3,\
    \ 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkfjmir7_.jl:31\nin expression starting at\
    \ /tmp/tmpkfjmir7_.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.strip\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3_0ndpys.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3_0ndpys.jl:1\n\
    in expression starting at /tmp/tmp3_0ndpys.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.strip\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]()\")\n    paren_string = paren_string.strip(\"{}[]()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()\")\n \
    \   paren_string = paren_string.strip(\"{}[]()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n\
    \    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()()\")\n\
    \    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()()\")\n\
    \    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()()\")\n\
    \    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()()\")\n\
    \    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()()()\"\
    )\n    paren_string = paren\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9bxk6tsc.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9bxk6tsc.jl:1\n\
    in expression starting at /tmp/tmp9bxk6tsc.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_levels::Vector{Int64} = Vector{Int64}()\n    paren_levels::Vector{Int64}\
    \ = []\n    paren_levels::Vector{Int64} = [paren_levels[1]]\n    for paren_group\
    \ in split(paren_string, \" \")\n        if paren_group == \"(\"\n           \
    \ paren_levels::Vector{Int64} = [paren_levels[1] + 1]\n        elseif paren_group\
    \ == \")\"\n            paren_levels::Vector{Int64} = [paren_levels[1]]\n    \
    \    else\n            paren_levels::Vector{Int64} = [paren_levels[1] + 1]\n \
    \       end\n    end\n    return paren_levels\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: multiple type declarations for \"paren_levels\"\
    \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9lrvrd5l.jl:1\nin expression\
    \ starting at /tmp/tmp9lrvrd5l.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_stack = Vector{Int64}()\n    paren_stack = paren_stack + paren_string.count(\"\
    (\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpki0hjb4h.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpki0hjb4h.jl:1\n\
    in expression starting at /tmp/tmpki0hjb4h.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.trim()\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    .\")\n    paren_string = paren_string.strip(\"*\")\n    paren_string = paren_string.strip(\"\
    +\")\n    paren_string = paren_string.strip(\"?\")\n    paren_string = paren_string.strip(\"\
    !\")\n    paren_string = paren_string.strip(\"(\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\"[\")\n    paren_string = paren_string.strip(\"\
    ]\")\n    paren_string = paren_string.strip(\"{\")\n    paren_string = paren_string.strip(\"\
    }\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    .\")\n    paren_string = paren_string.strip(\"*\")\n    paren_string = paren_string.strip(\"\
    +\")\n    paren_string = paren_string.strip(\"?\")\n    paren_string = paren_string.strip(\"\
    !\")\n    paren_string = paren_string.strip(\"(\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\"[\")\n    paren_string = paren_string.strip(\"\
    ]\")\n    paren_string = paren_string.strip(\"{\")\n    paren_string = paren_string.strip(\"\
    }\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    .\")\n    paren_string = paren_string.strip(\"*\")\n    paren_string = paren_string.strip(\"\
    +\")\n    paren_string = paren_string.strip(\"?\")\n    paren_string = paren_string.strip(\"\
    !\")\n    paren_string = paren_string.strip(\"(\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\"[\")\n    paren_string = paren_string.strip(\"\
    ]\")\n    paren_string = paren_string.strip(\"{\")\n\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3,\
    \ 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpcpu_bht8.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcpu_bht8.jl:1\n\
    in expression starting at /tmp/tmpcpu_bht8.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.strip\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n  \
    \  paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n\
    \    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgkq_3rak.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgkq_3rak.jl:1\n\
    in expression starting at /tmp/tmpgkq_3rak.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_stack = Vector{Int64}()\n    paren_stack = paren_stack + paren_string.count('(')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpvqx1lgyd.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvqx1lgyd.jl:1\n\
    in expression starting at /tmp/tmpvqx1lgyd.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.trim()\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpsnolnd_3.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsnolnd_3.jl:1\n\
    in expression starting at /tmp/tmpsnolnd_3.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.strip\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"()[]{}\")\n    paren_string = paren_string.strip(\"\
    (){}[]\")\n    paren_string = paren_string.strip(\"[](){}\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()\")\n    paren_string = paren_string.strip(\"[]{}()\"\
    )\n    paren_string = paren_string.strip(\"()[](){}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}()\")\n    paren_string = paren_string.strip(\"[]()[]{}\")\n    paren_string\
    \ = paren_string.strip(\"(){}{}[]\")\n    paren_string = paren_string.strip(\"\
    {}()[][]\")\n    paren_string = paren_string.strip(\"[]{}(){}\")\n    paren_string\
    \ = paren_string.strip(\"()[]{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[][]()\")\n    paren_string = paren_string.strip(\"[]()[]{}\")\n    paren_string\
    \ = paren_string.strip(\"(){}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}()[][]\")\n    paren_string = paren_string.strip(\"[]{}()[]\")\n    paren_string\
    \ = paren_string.strip(\"()[][]{}\")\n    paren_string = paren_string.strip(\"\
    {}[][][]\")\n    paren_string = paren_string.strip(\"[]()[][]{}\")\n    paren_string\
    \ = paren_string.strip(\"(){}{}{}[]\")\n    paren_string = paren_string.strip(\"\
    {}()[][][]\")\n    paren_string = paren_string.strip(\"[]{}()[][]\")\n    paren_string\
    \ = paren_string.strip(\"()[][][]{}\")\n    paren_string = paren_string.strip(\"\
    {}[][][][]\")\n    paren_string = paren_string.strip(\"[]()[][][]{}\")\n    paren_string\
    \ = paren_string.strip(\"(){}[][][]\")\n    paren_string = paren_string.strip(\"\
    {}()[][][]\")\n    paren_string = paren_string.strip(\"[]{}()[][]\")\n    paren_string\
    \ = paren_string.strip(\"()[][][]{}\")\n    paren_string = paren_string.strip(\"\
    {}\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\"{}\\nusing\
    \ Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmplr0cs8xr.jl:49\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmplr0cs8xr.jl:49\nin expression starting at /tmp/tmplr0cs8xr.jl:49\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.strip\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3,\
    \ 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpw5m3rwlh.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpw5m3rwlh.jl:1\n\
    in expression starting at /tmp/tmpw5m3rwlh.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_stack = Vector{Int64}()\n    paren_stack = paren_stack + paren_string.count(\"\
    (\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmph2m54_wp.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmph2m54_wp.jl:1\n\
    in expression starting at /tmp/tmph2m54_wp.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.strip\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}{}[]\")\n    paren_string = paren_string.strip(\"{}{}{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}{}{}{}[]\")\n    paren_string = paren_string.strip(\"\
    {}{}{}{}{}[]\")\n    paren_string = paren_string.strip(\"{}{}{}{}{}{}[]\")\n \
    \   paren_string = paren_string.strip(\"{}{}{}{}{}{}{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}{}{}{}{}{}{}{}[]\")\n    paren_string = paren_string.strip(\"\
    {}{}{}{}{}{}{}{}{}[]\")\n    paren_string = paren_string.strip(\"{}{}{}{}{}{}{}{}{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}{}{}{}{}{}{}{}{}{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}{}{}{}{}{}{}{}{}{}{}[]\")\n    paren_string = paren_string.strip(\"\
    {}{}{}{}{}{}{}{}{}{}{}{}[]\")\n    paren_string = paren_string.strip(\"{}{}{}{}{}{}{}{}{}{}{}{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}{}{}{}{}{}{}{}{}{}{}{}{}[]\")\n \
    \   paren_string = paren_string.strip(\"{}{}{}{}{}{}{}{}{}{}{}{}{}{}[]\")\n  \
    \  paren_string = paren_string.strip(\"{}{}{}{}{}{}{}{}{}{}{}{}{}{}[]\")\n   \
    \ paren_string = paren_string.strip(\"{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}[]\")\n  \
    \  paren_string = paren_string.strip(\"{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}[]\")\n \
    \   paren_string = paren_string.strip(\"{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}[]\")\n\
    \    paren_string = paren_string.strip(\"{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}{}{}\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3,\
    \ 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\"{}{}{}\\\
    nusing Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmpe9h1ivjt.jl:40\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmpe9h1ivjt.jl:40\nin expression starting at /tmp/tmpe9h1ivjt.jl:40\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.strip\n    paren_stack = Vector{Int64}()\n\
    \    paren_stack = paren_stack + paren_string.count('(')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_bnnajf2.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_bnnajf2.jl:1\n\
    in expression starting at /tmp/tmp_bnnajf2.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.trim()\n    paren_chars = paren_string.chars\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphrt56gwg.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphrt56gwg.jl:1\n\
    in expression starting at /tmp/tmphrt56gwg.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_stack = Vector{Int64}()\n    paren_stack = paren_stack + paren_string.count(\"\
    (\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmposnizjam.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmposnizjam.jl:1\n\
    in expression starting at /tmp/tmposnizjam.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.trim()\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\"=\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\"=\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\"=\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\"=\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpj0ux2wea.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpj0ux2wea.jl:1\n\
    in expression starting at /tmp/tmpj0ux2wea.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.strip\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]\nusing Test\n\n\
    @testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\"{}[]{}[]{}[]{}[]{}[]\\\
    nusing Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmplxoj9k31.jl:39\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmplxoj9k31.jl:39\nin expression starting at /tmp/tmplxoj9k31.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.strip\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]\nusing Test\n\n\
    @testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\"{}[]{}[]{}[]{}[]{}[]\\\
    nusing Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmpc29pwck9.jl:39\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmpc29pwck9.jl:39\nin expression starting at /tmp/tmpc29pwck9.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.strip\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3,\
    \ 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpv679apfa.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpv679apfa.jl:1\n\
    in expression starting at /tmp/tmpv679apfa.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.strip\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}{}[]\")\n    paren_string = paren_string.strip(\"{}{}{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}{}{}{}[]\")\n    paren_string = paren_string.strip(\"\
    {}{}{}{}{}[]\")\n    paren_string = paren_string.strip(\"{}{}{}{}{}{}[]\")\n \
    \   paren_string = paren_string.strip(\"{}{}{}{}{}{}{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}{}{}{}{}{}{}{}[]\")\n    paren_string = paren_string.strip(\"\
    {}{}{}{}{}{}{}{}{}[]\")\n    paren_string = paren_string.strip(\"{}{}{}{}{}{}{}{}{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}{}{}{}{}{}{}{}{}{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}{}{}{}{}{}{}{}{}{}{}[]\")\n    paren_string = paren_string.strip(\"\
    {}{}{}{}{}{}{}{}{}{}{}{}[]\")\n    paren_string = paren_string.strip(\"{}{}{}{}{}{}{}{}{}{}{}{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}{}{}{}{}{}{}{}{}{}{}{}{}[]\")\n \
    \   paren_string = paren_string.strip(\"{}{}{}{}{}{}{}{}{}{}{}{}{}{}[]\")\n  \
    \  paren_string = paren_string.strip(\"{}{}{}{}{}{}{}{}{}{}{}{}{}{}[]\")\n   \
    \ paren_string = paren_string.strip(\"{}{}{}{}{}{}{}{}{}{}{}{}{}{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}{}{}{}{}{}{}{}{}{}{}{}{}{}[]\")\n    paren_string =\
    \ paren_string.strip(\"{}{}{}{}{}{}{}{}{}{}{}{}{}{}[]\")\n    paren_string = paren_string.strip(\"\
    {}{}{}{}{}{}{}{}{}{}{}{}{}{}{}[]\")\n    paren_string = paren_string.strip(\"\
    {}{}{}{}{}{}{}{}{}\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\"{}{}{}{}{}{}{}{}{}\\\
    nusing Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmpkuzdeshg.jl:40\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmpkuzdeshg.jl:40\nin expression starting at /tmp/tmpkuzdeshg.jl:40\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.strip\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]\nusing Test\n\n\
    @testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\"{}[]{}[]{}[]{}[]{}[]\\\
    nusing Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmpykkyqgoy.jl:39\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmpykkyqgoy.jl:39\nin expression starting at /tmp/tmpykkyqgoy.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.strip\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}()[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}()[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}()[]{}[]\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}()[]{}[]{}\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}()[]{}[]{}{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}()[]{}[]{}{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}()[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}()[]{}[]{}[]{}{}\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}()[]{}[]{}[]{}{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}()[]{}[]{}[]{}[]{}{}\")\n    paren_string = paren_string.strip(\"{}[]{}()[]{}[]{}[]{}[]{}{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}()[]{}[]{}[]{}[]{}[]{}\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}()[]{}[]{}[]{}[]{}[]{}{}\")\n  \
    \  paren_string = paren_string.strip(\"{}[]{}()[]{}[]{}[]{}[]{}[]{}{}[]\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}()[]{}[]{}[]{}[]{}[]{}[]{}\")\n\
    \    paren_string = paren_string.strip(\"{}[]{}()[]{}[]{}[]{}[]{}[]{}[]{}\")\n\
    \    paren_string = paren_string.strip(\"{}[]{}()[]{}[]{}[]{}[]{}[]{}[]{}{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}()[]{}[]{}[]{}[]{}[]{}[]{}{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}\nusing Test\n\n@testset begin\n\n\
    candidate = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3,\
    \ 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\"{}\\nusing\
    \ Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmp2_ya1vd0.jl:40\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmp2_ya1vd0.jl:40\nin expression starting at /tmp/tmp2_ya1vd0.jl:40\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    stack = Vector{Int64}()\n    paren_count = 0\n    paren_level = 0\n  \
    \  paren_levels = Vector{Int64}()\n    for c in paren_string\n        if c ==\
    \ '('\n            paren_count += 1\n            paren_levels += 1\n         \
    \   paren_level = 1\n            push!(stack, paren_count)\n        elseif c ==\
    \ ')'\n            paren_count -= 1\n            if paren_count == 0\n       \
    \         paren_level -= 1\n                push!(paren_levels, paren_level)\n\
    \            end\n        else\n            paren_level += 1\n        end\n  \
    \  end\n    return paren_levels\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6l9bv7xs.jl:31\nin expression starting at\
    \ /tmp/tmp6l9bv7xs.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.strip\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"()\")\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"()\")\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"()\")\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"()\")\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"()\")\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"()\")\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"()\")\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"()\")\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"()\")\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"()\")\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"()\")\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"()\")\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"()\")\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"()\")\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"()\")\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"()\")\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"()\")\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"()\")\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"()\")\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3,\
    \ 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpatn5z3mf.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpatn5z3mf.jl:1\n\
    in expression starting at /tmp/tmpatn5z3mf.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_array = paren_string.split(\" \")\n    paren_array = [Int64(x) for\
    \ x in paren_array]\n    paren_array = [x for x in paren_array if x != \"\"]\n\
    \    paren_array = [x for x in paren_array if x != 0]\n    paren_array = [x for\
    \ x in paren_array if x != -1]\n    paren_array = [x for x in paren_array if x\
    \ != -2]\n    paren_array = [x for x in paren_array if x != -3]\n    paren_array\
    \ = [x for x in paren_array if x != -4]\n    paren_array = [x for x in paren_array\
    \ if x != -5]\n    paren_array = [x for x in paren_array if x != -6]\n    paren_array\
    \ = [x for x in paren_array if x != -7]\n    paren_array = [x for x in paren_array\
    \ if x != -8]\n    paren_array = [x for x in paren_array if x != -9]\n    paren_array\
    \ = [x for x in paren_array if x != -10]\n    paren_array = [x for x in paren_array\
    \ if x != -11]\n    paren_array = [x for x in paren_array if x != -12]\n    paren_array\
    \ = [x for x in paren_array if x != -13]\n    paren_array = [x for x in paren_array\
    \ if x != -14]\n    paren_array = [x for x in paren_array if x != -15]\n    paren_array\
    \ = [x for x in paren_array if x != -16]\n    paren_array = [x for x in paren_array\
    \ if x != -17]\n    paren_array = [x for x in paren_array if x != -18]\n    paren_array\
    \ = [x for x in paren_array if x != -19]\n    paren_array = [x for x in paren_array\
    \ if x != -20]\n    paren_array = [x for x in paren_array if x != -21]\n    paren_array\
    \ = [x for x in paren_array if x != -22]\n    paren_array = [x for x in paren_array\
    \ if x != -23]\n    paren_array = [x for x in paren_array if x != -24]\n    paren_array\
    \ = [x for x in paren_array if x != -25]\n    paren_array = [x for x in paren_array\
    \ if x != -26]\n    paren_array = [x for x in paren_array if x != -27]\n    paren_array\
    \ = [x for x in paren_array if x != -28]\n    paren_array = [x for x in paren_array\
    \ if x != -29]\n    paren_array = [x for x in paren_array if x != -30]\n    paren_array\
    \ = [\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp194jx1sf.jl:1\nin expression starting at /tmp/tmp194jx1sf.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.trim()\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}\nusing Test\n\n\
    @testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\"{}[]{}[]{}[]{}[]{}\\\
    nusing Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmp33pfav1k.jl:39\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmp33pfav1k.jl:39\nin expression starting at /tmp/tmp33pfav1k.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    stack = Vector{Int64}()\n    paren_count = 0\n    for paren in paren_string\n\
    \        if paren == '('\n            paren_count += 1\n            push!(stack,\
    \ paren_count)\n        elseif paren == ')'\n            pop!(stack)\n       \
    \     paren_count -= 1\n        elseif paren == ' '\n            paren_count -=\
    \ 1\n        end\n    end\n    return stack\nend\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns the number of characters in the\
    \ string that are not letters.\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppk6fj3hj.jl:24\nin expression starting at\
    \ /tmp/tmppk6fj3hj.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = paren_string.split(\" \")\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmhjgce5s.jl:52\nin expression starting at\
    \ /tmp/tmpmhjgce5s.jl:52\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.trim()\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\"=\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\"=\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\"=\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\"=\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpumwfjrj0.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpumwfjrj0.jl:1\n\
    in expression starting at /tmp/tmpumwfjrj0.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.trim()\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}\nusing Test\n\n\
    @testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\"{}[]{}[]{}[]{}[]{}\\\
    nusing Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmpqu2_odyv.jl:39\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmpqu2_odyv.jl:39\nin expression starting at /tmp/tmpqu2_odyv.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.strip\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]()\")\n    paren_string = paren_string.strip(\"{}[]()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()\")\n \
    \   paren_string = paren_string.strip(\"{}[]()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()\")\n   \
    \ paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n\
    \    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n \
    \   paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n  \
    \  paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n   \
    \ paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n    paren_string =\
    \ paren_string.\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpc_oe_7ac.jl:8 expected\
    \ \"end\", got \"Test\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpc_oe_7ac.jl:35\n\
    in expression starting at /tmp/tmpc_oe_7ac.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_stack = Vector{Int64}()\n    paren_stack = paren_stack + paren_string.count('(')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp85wvskkr.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp85wvskkr.jl:1\n\
    in expression starting at /tmp/tmp85wvskkr.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.trim()\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\"\\n\")\n    paren_string = paren_string.strip(\"\
    \\r\")\n    paren_string = paren_string.strip(\"\\t\")\n    paren_string = paren_string.strip(\"\
    \\t\")\n    paren_string = paren_string.strip(\"\\t\")\n    paren_string = paren_string.strip(\"\
    \\t\")\n    paren_string = paren_string.strip(\"\\t\")\n    paren_string = paren_string.strip(\"\
    \\t\")\n    paren_string = paren_string.strip(\"\\t\")\n    paren_string = paren_string.strip(\"\
    \\t\")\n    paren_string = paren_string.strip(\"\\t\")\n    paren_string = paren_string.strip(\"\
    \\t\")\n    paren_string = paren_string.strip(\"\\t\")\n    paren_string = paren_string.strip(\"\
    \\t\")\n    paren_string = paren_string.strip(\"\\t\")\n    paren_string = paren_string.strip(\"\
    \\t\")\n    paren_string = paren_string.strip(\"\\t\")\n    paren_string = paren_string.strip(\"\
    \\t\")\n    paren_string = paren_string.strip(\"\\t\")\n    paren_string = paren_string.strip(\"\
    \\t\")\n    paren_string = paren_string.strip(\"\\t\")\n    paren_string = paren_string.strip(\"\
    \\t\")\n    paren_string = paren_string.strip(\"\\t\")\n    paren_string = paren_string.strip(\"\
    \\t\")\n    paren_string = paren_string.strip(\"\\t\")\n    paren_string = paren_string.strip(\"\
    \\t\")\n    paren_string = paren_string.strip(\"\\t\")\n    paren_string = paren_string.strip(\"\
    \\t\")\n    paren_string = paren_string.strip(\"\\t\")\n    paren_string = paren_string.strip(\"\
    \\t\")\n    paren_string = paren_string.strip(\"\\t\")\n    paren_string = paren_string.strip(\"\
    \\t\")\n    paren_string = paren_string.strip(\"\\t\")\n    paren_string = paren_string.strip(\"\
    \\t\")\n    paren_string = paren_string.strip(\"\\t\")\n    paren_string = paren_string.strip(\"\
    \\t\")\n    paren_string = paren_string.strip(\"\\t\")\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp4rzcmhj5.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4rzcmhj5.jl:1\n\
    in expression starting at /tmp/tmp4rzcmhj5.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.strip\n    paren_stack = Vector{Int64}()\n\
    \    paren_stack = paren_stack + paren_string.count('(')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxlkbki4h.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxlkbki4h.jl:1\n\
    in expression starting at /tmp/tmpxlkbki4h.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.strip\n    paren_levels = paren_string.count('(')\
    \ - paren_string.count(')')\n    paren_levels = paren_levels + 1 if paren_levels\
    \ == 0 else paren_levels\n    paren_levels = paren_levels - 1 if paren_levels\
    \ == 0 else paren_levels\n    paren_levels = paren_levels + 1 if paren_levels\
    \ == 0 else paren_levels\n    paren_levels = paren_levels - 1 if paren_levels\
    \ == 0 else paren_levels\n    paren_levels = paren_levels + 1 if paren_levels\
    \ == 0 else paren_levels\n    paren_levels = paren_levels - 1 if paren_levels\
    \ == 0 else paren_levels\n    paren_levels = paren_levels + 1 if paren_levels\
    \ == 0 else paren_levels\n    paren_levels = paren_levels - 1 if paren_levels\
    \ == 0 else paren_levels\n    paren_levels = paren_levels + 1 if paren_levels\
    \ == 0 else paren_levels\n    paren_levels = paren_levels - 1 if paren_levels\
    \ == 0 else paren_levels\n    paren_levels = paren_levels + 1 if paren_levels\
    \ == 0 else paren_levels\n    paren_levels = paren_levels - 1 if paren_levels\
    \ == 0 else paren_levels\n    paren_levels = paren_levels + 1 if paren_levels\
    \ == 0 else paren_levels\n    paren_levels = paren_levels - 1 if paren_levels\
    \ == 0 else paren_levels\n    paren_levels = paren_levels + 1 if paren_levels\
    \ == 0 else paren_levels\n    paren_levels = paren_levels - 1 if paren_levels\
    \ == 0 else paren_levels\n    paren_levels = paren_levels + 1 if paren_levels\
    \ == 0 else paren_levels\n    paren_levels = paren_levels - 1 if paren_levels\
    \ == 0 else paren_levels\n    paren_levels = paren_levels + 1 if paren_levels\
    \ == 0 else paren_levels\n    paren_levels = paren_levels - 1 if paren_levels\
    \ == 0 else paren_levels\n    paren_levels = paren_levels + 1 if paren_levels\
    \ == 0 else paren_levels\n    paren_levels = paren_levels - 1 if paren_levels\
    \ == 0 else paren_levels\n    paren_levels = paren_levels + 1 if paren_levels\
    \ == 0 else paren_levels\n    paren_levels = paren_levels - 1 if paren_levels\
    \ == 0 else paren_levels\n    paren_level\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmp30eyk1qn.jl:8 expected\
    \ \"end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp30eyk1qn.jl:11\n\
    in expression starting at /tmp/tmp30eyk1qn.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_stack = Vector{Int64}()\n    paren_stack = paren_stack + paren_string.count('(')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyf_1vhbn.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyf_1vhbn.jl:1\n\
    in expression starting at /tmp/tmpyf_1vhbn.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.strip\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    []\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}[]\")\n    paren_string = paren_string.strip(\"{}{}\")\n    paren_string = paren_string.strip(\"\
    {}{}[]\")\n    paren_string = paren_string.strip(\"{}{}{}\")\n    paren_string\
    \ = paren_string.strip(\"{}{}{}[]\")\n    paren_string = paren_string.strip(\"\
    {}{}{}{}\")\n    paren_string = paren_string.strip(\"{}{}{}{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}{}{}{}{}\")\n    paren_string = paren_string.strip(\"\
    {}{}{}{}{}[]\")\n    paren_string = paren_string.strip(\"{}{}{}{}{}{}\")\n   \
    \ paren_string = paren_string.strip(\"{}{}{}{}{}[]\")\n    paren_string = paren_string.strip(\"\
    {}{}{}{}{}{}\")\n    paren_string = paren_string.strip(\"{}{}{}{}{}[]\")\n   \
    \ paren_string = paren_string.strip(\"{}{}{}{}{}{}{}\")\n    paren_string = paren_string.strip(\"\
    {}{}{}{}{}{}[]\")\n    paren_string = paren_string.strip(\"{}{}{}{}{}{}{}\")\n\
    \    paren_string = paren_string.strip(\"{}{}{}{}{}{}[]\")\n    paren_string =\
    \ paren_string.strip(\"{}{}{}{}{}{}{}{}\")\n    paren_string = paren_string.strip(\"\
    {}{}{}{}{}{}{}[]\")\n    paren_string = paren_string.strip(\"{}{}{}{}{}{}{}{}{}\"\
    )\n    paren_string = paren_string.strip(\"{}{}{}{}{}{}{}{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}{}{}{}{}{}{}{}{}\")\n    paren_string = paren_string.strip(\"\
    {}{}{}{}{}{}{}{}[]\")\n    paren_string = paren_string.strip(\"{}{}{}{}{}{}{}{}{}{}\"\
    )\n    paren_string = paren_string.strip(\"{}{}{}{}{}{}{}{}{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}{}{}{}{}{}{}{}{}{}{}\")\n    \nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6zmf8h9z.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6zmf8h9z.jl:1\n\
    in expression starting at /tmp/tmp6zmf8h9z.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.strip\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]()\")\n    paren_string = paren_string.strip(\"{}[]()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()\")\n \
    \   paren_string = paren_string.strip(\"{}[]()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()\")\n \
    \   paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n  \
    \  paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n   \
    \ paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n    paren_string =\
    \ paren_string.strip(\"{}[]()()()()()()()()()()()()()()\")\n    paren_string =\
    \ paren_string.strip(\"{}[]()()()()()()()()()()()()()()\")\n    paren_string =\
    \ paren_string.strip(\"{}[]()()()()()()\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\"{}[]()()()()()()\\\
    nusing Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmpgufdwggc.jl:40\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmpgufdwggc.jl:40\nin expression starting at /tmp/tmpgufdwggc.jl:40\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.strip\n    paren_chars = paren_string.chars\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp1vui5qi8.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1vui5qi8.jl:1\n\
    in expression starting at /tmp/tmp1vui5qi8.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.strip\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n  \
    \  paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n\
    \    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpd0qpyh8e.jl:8 expected\
    \ \"end\", got \"Test\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpd0qpyh8e.jl:35\n\
    in expression starting at /tmp/tmpd0qpyh8e.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.trim()\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n\
    \    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n\
    \    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\n\
    using Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\\\
    nusing Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmp5flsy5z5.jl:39\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmp5flsy5z5.jl:39\nin expression starting at /tmp/tmp5flsy5z5.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.strip\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    []\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}[]\")\n    paren_string = paren_string.strip(\"{}{}\")\n    paren_string = paren_string.strip(\"\
    {}{}[]\")\n    paren_string = paren_string.strip(\"{}{}{}\")\n    paren_string\
    \ = paren_string.strip(\"{}{}{}[]\")\n    paren_string = paren_string.strip(\"\
    {}{}{}{}\")\n    paren_string = paren_string.strip(\"{}{}{}{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}{}{}{}{}\")\n    paren_string = paren_string.strip(\"\
    {}{}{}{}{}[]\")\n    paren_string = paren_string.strip(\"{}{}{}{}{}{}\")\n   \
    \ paren_string = paren_string.strip(\"{}{}{}{}{}[]\")\n    paren_string = paren_string.strip(\"\
    {}{}{}{}{}{}\")\n    paren_string = paren_string.strip(\"{}{}{}{}{}[]\")\n   \
    \ paren_string = paren_string.strip(\"{}{}{}{}{}{}{}\")\n    paren_string = paren_string.strip(\"\
    {}{}{}{}{}{}[]\")\n    paren_string = paren_string.strip(\"{}{}{}{}{}{}{}\")\n\
    \    paren_string = paren_string.strip(\"{}{}{}{}{}{}[]\")\n    paren_string =\
    \ paren_string.strip(\"{}{}{}{}{}{}{}{}\")\n    paren_string = paren_string.strip(\"\
    {}{}{}{}{}{}{}[]\")\n    paren_string = paren_string.strip(\"{}{}{}{}{}{}{}{}{}\"\
    )\n    paren_string = paren_string.strip(\"{}{}{}{}{}{}{}{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}{}{}{}{}{}{}{}{}\")\n    paren_string = paren_string.strip(\"\
    {}{}{}{}{}{}{}{}[]\")\n    paren_string = paren_string.strip(\"{}{}{}{}{}{}{}{}{}{}\"\
    )\n    paren_string = paren_string.strip(\"{}{}{}{}{}{}{}{}{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}{}{}{}{}{}{}{}{}{}{}\")\n    \nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpllbuf3qx.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpllbuf3qx.jl:1\n\
    in expression starting at /tmp/tmpllbuf3qx.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.trim()\n    paren_chars = paren_string.chars\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\n    paren_chars = paren_chars[2:end]\n\
    \    paren_chars = paren_chars[2:end]\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpbduuzeuf.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbduuzeuf.jl:1\n\
    in expression starting at /tmp/tmpbduuzeuf.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.strip\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]\nusing Test\n\n\
    @testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\"{}[]{}[]{}[]{}[]{}[]\\\
    nusing Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmpsxr8i0vt.jl:39\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmpsxr8i0vt.jl:39\nin expression starting at /tmp/tmpsxr8i0vt.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = paren_string.split(\" \")\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphdegkqpy.jl:52\nin expression starting at\
    \ /tmp/tmphdegkqpy.jl:52\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.trim()\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    .\")\n    paren_string = paren_string.strip(\"..\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphcruacmz.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphcruacmz.jl:1\n\
    in expression starting at /tmp/tmphcruacmz.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.strip\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}{}[]\")\n    paren_string = paren_string.strip(\"{}{}{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}{}{}{}[]\")\n    paren_string = paren_string.strip(\"\
    {}{}{}{}{}[]\")\n    paren_string = paren_string.strip(\"{}{}{}{}{}{}[]\")\n \
    \   paren_string = paren_string.strip(\"{}{}{}{}{}{}{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}{}{}{}{}{}{}{}[]\")\n    paren_string = paren_string.strip(\"\
    {}{}{}{}{}{}{}{}{}[]\")\n    paren_string = paren_string.strip(\"{}{}{}{}{}{}{}{}{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}{}{}{}{}{}{}{}{}{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}{}{}{}{}{}{}{}{}{}{}[]\")\n    paren_string = paren_string.strip(\"\
    {}{}{}{}{}{}{}{}{}{}{}{}[]\")\n    paren_string = paren_string.strip(\"{}{}{}{}{}{}{}{}{}{}{}{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}{}{}{}{}{}{}{}{}{}{}{}{}[]\")\n \
    \   paren_string = paren_string.strip(\"{}{}{}{}{}{}{}{}{}{}{}{}{}{}[]\")\n  \
    \  paren_string = paren_string.strip(\"{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}[]\")\n \
    \   paren_string = paren_string.strip(\"{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}[]\")\n\
    \    paren_string = paren_string.strip(\"{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}[]\")\n\
    \    paren_string = paren_string.strip(\"{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}{}\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3,\
    \ 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\"{}{}\\\
    nusing Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmp7pw8v1bq.jl:40\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmp7pw8v1bq.jl:40\nin expression starting at /tmp/tmp7pw8v1bq.jl:40\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    stack = Vector{Int64}()\n    paren_count = 0\n    for paren in paren_string\n\
    \        if paren == '('\n            paren_count += 1\n            push!(stack,\
    \ paren_count)\n        elseif paren == ')'\n            pop!(stack)\n       \
    \     paren_count -= 1\n        elseif paren == '('\n            push!(stack,\
    \ paren_count)\n        elseif paren == ')'\n            pop!(stack)\n       \
    \     paren_count -= 1\n        else\n            paren_count += 1\n         \
    \   push!(stack, paren_count)\n        end\n    end\n    return stack\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of parentheses in the string.\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1gvvpoe_.jl:30\nin expression starting at\
    \ /tmp/tmp1gvvpoe_.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.strip\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]\nusing Test\n\n\
    @testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\"{}[]{}[]{}[]{}[]{}[]\\\
    nusing Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmp3vwx0sdb.jl:39\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmp3vwx0sdb.jl:39\nin expression starting at /tmp/tmp3vwx0sdb.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.strip\n    paren_levels = Dict{Char,Int64}()\n\
    \    paren_levels[')'] = 0\n    paren_levels['('] = 0\n    paren_levels[']'] =\
    \ 0\n    paren_levels['}'] = 0\n    paren_levels[' '] = 0\n    paren_levels['\\\
    t'] = 0\n    paren_levels['\\n'] = 0\n    paren_levels['\\r'] = 0\n    paren_levels['\
    \ '] = 0\n    paren_levels['\\t'] = 0\n    paren_levels['\\n'] = 0\n    paren_levels['\\\
    r'] = 0\n    paren_levels[' '] = 0\n    paren_levels['\\t'] = 0\n    paren_levels['\\\
    n'] = 0\n    paren_levels['\\r'] = 0\n    paren_levels[' '] = 0\n    paren_levels['\\\
    t'] = 0\n    paren_levels['\\n'] = 0\n    paren_levels['\\r'] = 0\n    paren_levels['\
    \ '] = 0\n    paren_levels['\\t'] = 0\n    paren_levels['\\n'] = 0\n    paren_levels['\\\
    r'] = 0\n    paren_levels[' '] = 0\n    paren_levels['\\t'] = 0\n    paren_levels['\\\
    n'] = 0\n    paren_levels['\\r'] = 0\n    paren_levels[' '] = 0\n    paren_levels['\\\
    t'] = 0\n    paren_levels['\\n'] = 0\n    paren_levels['\\r'] = 0\n    paren_levels['\
    \ '] = 0\n    paren_levels['\\t'] = 0\n    paren_levels['\\n'] = 0\n    paren_levels['\\\
    r'] = 0\n    paren_levels[' '] = 0\n    paren_levels['\\t'] = 0\n    paren_levels['\\\
    n'] = 0\n    paren_levels['\\r'] = 0\n    paren_levels[' '] = 0\n    paren_levels['\\\
    t'] = 0\n    paren_levels['\\n'] = 0\n    paren_levels['\\r'] = 0\n    paren_levels['\
    \ '] = 0\n    paren_levels['\\t'] = 0\n    paren_levels['\\n'] = 0\n    paren_levels['\\\
    r'] = 0\n    paren_levels[' '] = 0\n    paren_levels['\\t'] = 0\n    paren_levels['\\\
    n'] = 0\n    paren_levels['\\r'] = 0\n    paren_levels[' '] = 0\n    paren_levels['\\\
    t'] = 0\n    paren_levels['\\n'] = 0\n    paren_levels['\\r'] = 0\n    paren_levels['\
    \ '] = 0\n    paren_levels['\\t'] = 0\n    paren_levels['\\n'] = 0\n    paren_levels['\\\
    r'] = 0\n    paren_levels[' '] = 0\n    \nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpsgac5i6o.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsgac5i6o.jl:1\n\
    in expression starting at /tmp/tmpsgac5i6o.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.trim()\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\"{}[]{}[]{}[]{}\\\
    nusing Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmpqfrcczit.jl:39\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmpqfrcczit.jl:39\nin expression starting at /tmp/tmpqfrcczit.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.trim()\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\".\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\"=\")\n    paren_string = paren_string.strip(\"\
    .\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\".\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\"=\")\n    paren_string = paren_string.strip(\"\
    .\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\".\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\"=\")\n    paren_string = paren_string.strip(\"\
    .\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\".\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\"=\")\n    paren_string = paren_string.strip(\"\
    .\")\n    paren_string = paren_string.strip(\",\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3,\
    \ 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\",\\nusing\
    \ Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmptl7ygwyo.jl:59\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmptl7ygwyo.jl:59\nin expression starting at /tmp/tmptl7ygwyo.jl:59\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.strip\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]\nusing Test\n\n\
    @testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\"{}[]{}[]{}[]{}[]{}[]\\\
    nusing Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmpk_pzhlwf.jl:39\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmpk_pzhlwf.jl:39\nin expression starting at /tmp/tmpk_pzhlwf.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.strip\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]\nusing Test\n\n\
    @testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\"{}[]{}[]{}[]{}[]{}[]\\\
    nusing Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmpxv8mk4tv.jl:39\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmpxv8mk4tv.jl:39\nin expression starting at /tmp/tmpxv8mk4tv.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = paren_string.split(\" \") |> String.split(\"(\") |> String.split(\"\
    )\")\n    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[\nusing Test\n\n@testset begin\n\ncandidate =\
    \ parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxth88dd0.jl:1\nin expression starting at /tmp/tmpxth88dd0.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.trim()\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\" \")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp4hy26ppo.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4hy26ppo.jl:1\n\
    in expression starting at /tmp/tmp4hy26ppo.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.strip\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}{}\")\n    paren_string = paren_string.strip(\"{}{}[]\")\n    paren_string =\
    \ paren_string.strip(\"{}{}{}\")\n    paren_string = paren_string.strip(\"{}{}{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}{}{}{}\")\n    paren_string = paren_string.strip(\"\
    {}{}{}{}[]\")\n    paren_string = paren_string.strip(\"{}{}{}{}{}\")\n    paren_string\
    \ = paren_string.strip(\"{}{}{}{}{}[]\")\n    paren_string = paren_string.strip(\"\
    {}{}{}{}{}{}\")\n    paren_string = paren_string.strip(\"{}{}{}{}{}{}[]\")\n \
    \   paren_string = paren_string.strip(\"{}{}{}{}{}{}{}\")\n    paren_string =\
    \ paren_string.strip(\"{}{}{}{}{}{}[]\")\n    paren_string = paren_string.strip(\"\
    {}{}{}{}{}{}{}{}\")\n    paren_string = paren_string.strip(\"{}{}{}{}{}{}{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}{}{}{}{}{}{}{}{}\")\n    paren_string\
    \ = paren_string.strip(\"{}{}{}{}{}{}{}{}[]\")\n    paren_string = paren_string.strip(\"\
    {}{}{}{}{}{}{}{}{}{}\")\n    paren_string = paren_string.strip(\"{}{}{}{}{}{}{}{}{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}{}{}{}{}{}{}{}{}{}{}\")\n    paren_string\
    \ = paren_string.strip(\"{}{}{}{}{}{}{}{}{}{}[]\")\n    paren_string = paren_string.strip(\"\
    {}{}{}{}{}{}{}{}{}{}{}\")\n    paren_string = paren_string.strip(\"{}{}{}{}{}{}{}{}{}{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}{}{}{}{}{}{}{}{}{}{}{}\")\n    paren_string\
    \ = paren_string.strip(\"{}{}{}{}{}{}{}{}{}{}{}[]\")\n    paren_string = paren_string.strip(\"\
    \nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\"\\nusing\
    \ Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmphne2jfzt.jl:44\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmphne2jfzt.jl:44\nin expression starting at /tmp/tmphne2jfzt.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.trim()\n    paren_levels = Vector{Int64}()\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = \nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpvq2mdx0i.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvq2mdx0i.jl:1\n\
    in expression starting at /tmp/tmpvq2mdx0i.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.trim()\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}\nusing Test\n\n\
    @testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\"{}[]{}[]{}[]{}[]{}\\\
    nusing Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmpun95nuhk.jl:39\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmpun95nuhk.jl:39\nin expression starting at /tmp/tmpun95nuhk.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.trim()\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}\nusing Test\n\n\
    @testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\"{}[]{}[]{}[]{}[]{}\\\
    nusing Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmpfpccagr9.jl:39\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmpfpccagr9.jl:39\nin expression starting at /tmp/tmpfpccagr9.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_stack = Vector{Int64}()\n    paren_stack = paren_stack + paren_string.count(\"\
    (\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6pxqprj1.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6pxqprj1.jl:1\n\
    in expression starting at /tmp/tmp6pxqprj1.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.strip\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n  \
    \  paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n\
    \    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppjp14mte.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppjp14mte.jl:1\n\
    in expression starting at /tmp/tmppjp14mte.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_stack = Vector{Int64}()\n    paren_stack = paren_stack + paren_string.split(\"\
    \ \") |> collect{|x| x.count(\"(\") - x.count(\")\")}\n    paren_stack = paren_stack\
    \ + paren_string.split(\" \") |> collect{|x| x.count(\"(\")}\n    paren_stack\
    \ = paren_stack + paren_string.split(\" \") |> collect{|x| x.count(\")\")}\n \
    \   paren_stack = paren_stack + paren_string.split(\" \") |> collect{|x| x.count(\"\
    )\")}\n    paren_stack = paren_stack + paren_string.split(\" \") |> collect{|x|\
    \ x.count(\")\")}\n    paren_stack = paren_stack + paren_string.split(\" \") |>\
    \ collect{|x| x.count(\")\")}\n    paren_stack = paren_stack + paren_string.split(\"\
    \ \") |> collect{|x| x.count(\")\")}\n    paren_stack = paren_stack + paren_string.split(\"\
    \ \") |> collect{|x| x.count(\")\")}\n    paren_stack = paren_stack + paren_string.split(\"\
    \ \") |> collect{|x| x.count(\")\")}\n    paren_stack = paren_stack + paren_string.split(\"\
    \ \") |> collect{|x| x.count(\")\")}\n    paren_stack = paren_stack + paren_string.split(\"\
    \ \") |> collect{|x| x.count(\")\")}\n    paren_stack = paren_stack + paren_string.split(\"\
    \ \") |> collect{|x| x.count(\")\")}\n    paren_stack = paren_stack + paren_string.split(\"\
    \ \") |> collect{|x| x.count(\")\")}\n    paren_stack = paren_stack + paren_string.split(\"\
    \ \") |> collect{|x| x.count(\")\")}\n    paren_stack = paren_stack + paren_string.split(\"\
    \ \") |> collect{|x| x.count(\")\")}\n    paren_stack = paren_stack + paren_string.split(\"\
    \ \") |> collect{|x| x.count(\")\")}\n    paren_stack = paren_stack + paren_string.split(\"\
    \ \") |> collect{|x| x.count(\")\")}\n    paren_stack = paren_stack + paren_string.split(\"\
    \ \") |> collect{\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"|\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf4n0ma43.jl:10\nin expression starting at\
    \ /tmp/tmpf4n0ma43.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_stack = Vector{Int64}()\n    paren_stack = paren_stack + paren_string.count('(')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwsl41k53.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwsl41k53.jl:1\n\
    in expression starting at /tmp/tmpwsl41k53.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    stack = Vector{Int64}()\n    paren_count = 0\n    for c in paren_string\n\
    \        if c == '('\n            push!(stack, paren_count)\n            paren_count\
    \ += 1\n        elif c == ')'\n            pop!(stack)\n            paren_count\
    \ -= 1\n        end\n    end\n    stack\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"c\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpqux8orbq.jl:15\nin expression starting at /tmp/tmpqux8orbq.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    stack = Vector{Int64}()\n    paren_count = 0\n    for char in paren_string\n\
    \        if char == '('\n            paren_count += 1\n            push!(stack,\
    \ paren_count)\n        elseif char == ')'\n            pop!(stack)\n        \
    \    paren_count -= 1\n        elseif char == ' '\n            if paren_count\
    \ == 0\n                push!(stack, paren_count)\n            end\n        end\n\
    \    end\n    return stack\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4r6pzvmx.jl:26\nin expression starting at\
    \ /tmp/tmp4r6pzvmx.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.strip\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3,\
    \ 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjkw86fxs.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjkw86fxs.jl:1\n\
    in expression starting at /tmp/tmpjkw86fxs.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_stack = Vector{Int64}()\n    paren_stack = paren_stack + paren_string.count('(')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpl5qmypb3.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpl5qmypb3.jl:1\n\
    in expression starting at /tmp/tmpl5qmypb3.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.strip\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]\nusing Test\n\n\
    @testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\"{}[]{}[]{}[]{}[]{}[]\\\
    nusing Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmp7brakjh6.jl:39\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmp7brakjh6.jl:39\nin expression starting at /tmp/tmp7brakjh6.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.trim()\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    \ \")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\"\\n\")\n    paren_string = paren_string.strip(\"\
    \\r\")\n    paren_string = paren_string.strip(\"\\t\")\n    paren_string = paren_string.strip(\"\
    \\v\")\n    paren_string = paren_string.strip(\"\\a\")\n    paren_string = paren_string.strip(\"\
    \\e\")\n    paren_string = paren_string.strip(\"\\o\")\n    paren_string = paren_string.strip(\"\
    \\000\")\n    paren_string = paren_string.strip(\"\\001\")\n    paren_string =\
    \ paren_string.strip(\"\\002\")\n    paren_string = paren_string.strip(\"\\003\"\
    )\n    paren_string = paren_string.strip(\"\\004\")\n    paren_string = paren_string.strip(\"\
    \\005\")\n    paren_string = paren_string.strip(\"\\006\")\n    paren_string =\
    \ paren_string.strip(\"\\007\")\n    paren_string = paren_string.strip(\"\\010\"\
    )\n    paren_string = paren_string.strip(\"\\011\")\n    paren_string = paren_string.strip(\"\
    \\012\")\n    paren_string = paren_string.strip(\"\\013\")\n    paren_string =\
    \ paren_string.strip(\"\\014\")\n    paren_string = paren_string.strip(\"\\015\"\
    )\n    paren_string = paren_string.strip(\"\\016\")\n    paren_string = paren_string.strip(\"\
    \\017\")\n    paren_string = paren_string.strip(\"\\020\")\n    paren_string =\
    \ paren_string.strip(\"\\021\")\n    paren_string = paren_string.strip(\"\\022\"\
    )\n    paren_string = paren_string.strip(\"\\023\")\n    paren_string = paren_string.strip(\"\
    \\024\")\n    paren_string = paren_string.strip(\"\\025\")\n    paren_string =\
    \ paren_string.strip(\"\\026\")\n    paren_string = paren_string.strip(\"\\027\"\
    )\n    paren_string = paren_string.strip(\"\\030\")\n    paren_string = paren_string.strip(\"\
    \\031\")\n    paren_string = paren_string.strip(\"\\032\")\n    paren_string =\
    \ paren\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t\
    @test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpkzc8chte.jl:21\nin expression starting at /tmp/tmpkzc8chte.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.strip\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]\nusing Test\n\n\
    @testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\"{}[]{}[]{}[]{}[]{}[]\\\
    nusing Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmpzxmouwyg.jl:39\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmpzxmouwyg.jl:39\nin expression starting at /tmp/tmpzxmouwyg.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.trim()\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\".\")\n    paren_string = paren_string.strip(\"\
    ..\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy28d121a.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy28d121a.jl:1\n\
    in expression starting at /tmp/tmpy28d121a.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.trim()\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    []\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\"=\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\"=\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\"=\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\"=\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp83capl23.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp83capl23.jl:1\n\
    in expression starting at /tmp/tmp83capl23.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.trim()\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\" \")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpw2q5iodb.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpw2q5iodb.jl:1\n\
    in expression starting at /tmp/tmpw2q5iodb.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    stack = Vector{Int64}()\n    paren_level = 0\n    paren_levels = Vector{Int64}()\n\
    \    paren_level = 0\n    for c in paren_string\n        if c == '('\n       \
    \     paren_level += 1\n            paren_levels << paren_level\n        elseif\
    \ c == ')'\n            paren_level -= 1\n            paren_levels << paren_level\n\
    \        elseif c == '('\n            paren_level += 1\n            paren_levels\
    \ << paren_level\n        elseif c == ')'\n            paren_level -= 1\n    \
    \        paren_levels << paren_level\n        elseif c == '('\n            paren_level\
    \ += 1\n            paren_levels << paren_level\n        elseif c == ')'\n   \
    \         paren_level -= 1\n            paren_levels << paren_level\n        else\n\
    \            paren_levels << paren_level\n        end\n    end\n    paren_levels\
    \ << paren_level\n    return paren_levels\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7ptgnzy3.jl:39\nin expression starting at\
    \ /tmp/tmp7ptgnzy3.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.strip\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}{}\")\n    paren_string = paren_string.strip(\"{}{}[]\")\n    paren_string =\
    \ paren_string.strip(\"{}{}{}\")\n    paren_string = paren_string.strip(\"{}{}{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}{}{}{}\")\n    paren_string = paren_string.strip(\"\
    {}{}{}{}[]\")\n    paren_string = paren_string.strip(\"{}{}{}{}{}\")\n    paren_string\
    \ = paren_string.strip(\"{}{}{}{}{}[]\")\n    paren_string = paren_string.strip(\"\
    {}{}{}{}{}{}\")\n    paren_string = paren_string.strip(\"{}{}{}{}{}{}[]\")\n \
    \   paren_string = paren_string.strip(\"{}{}{}{}{}{}{}\")\n    paren_string =\
    \ paren_string.strip(\"{}{}{}{}{}{}[]\")\n    paren_string = paren_string.strip(\"\
    {}{}{}{}{}{}{}{}\")\n    paren_string = paren_string.strip(\"{}{}{}{}{}{}{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}{}{}{}{}{}{}{}{}\")\n    paren_string\
    \ = paren_string.strip(\"{}{}{}{}{}{}{}{}[]\")\n    paren_string = paren_string.strip(\"\
    {}{}{}{}{}{}{}{}{}{}\")\n    paren_string = paren_string.strip(\"{}{}{}{}{}{}{}{}{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}{}{}{}{}{}{}{}{}{}{}\")\n    paren_string\
    \ = paren_string.strip(\"{}{}{}{}{}{}{}{}{}{}[]\")\n    paren_string = paren_string.strip(\"\
    {}{}{}{}{}{}{}{}{}{}{}\")\n    paren_string = paren_string.strip(\"{}{}{}{}{}{}{}{}{}{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}{}{}{}{}{}{}{}{}{}{}{}\")\n    paren_string\
    \ = paren_string.strip(\"{}{}{}{}{}{}{}{}{}{}{}[]\")\n    paren_string = paren_string.strip(\"\
    \nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\"\\nusing\
    \ Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmpw2osb_z1.jl:44\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmpw2osb_z1.jl:44\nin expression starting at /tmp/tmpw2osb_z1.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.strip\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}{}\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}{}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}{}[]{}{}\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}{}[]{}{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}{}[]{}{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}{}[]{}{}[]{}{}\")\n    paren_string = paren_string.strip(\"{}[]{}{}[]{}{}[]{}{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}{}[]{}{}[]{}{}[]{}\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}{}[]{}{}[]{}{}[]{}{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}{}[]{}{}[]{}{}[]{}{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}{}[]{}{}[]{}{}[]{}{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}{}[]{}{}[]{}{}[]{}{}[]{}{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}{}[]{}{}[]{}{}[]{}{}[]{}{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}{}[]{}{}[]{}{}[]{}{}[]{}{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}{}[]{}{}[]{}{}[]{}{}[]{}{}[]{}{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}{}[]{}{}[]{}{}[]{}{}[]{}{}[]{}{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}{}[]{}{}[]{}{}[]{}{}[]{}{}[]{}{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}{}[]{}{}[]\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()()) ((()))\
    \ () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\"\
    ) == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\"{}[]{}{}[]{}{}[]\\\
    nusing Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmp25d1_7j5.jl:39\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmp25d1_7j5.jl:39\nin expression starting at /tmp/tmp25d1_7j5.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.strip\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]()\")\n    paren_string = paren_string.strip(\"{}[]()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()\")\n \
    \   paren_string = paren_string.strip(\"{}[]()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n\
    \    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()()\")\n\
    \    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()()()()\"\
    )\n\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyvgs2omu.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyvgs2omu.jl:1\n\
    in expression starting at /tmp/tmpyvgs2omu.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_stack = Vector{Int64}()\n    paren_stack = paren_stack + paren_string.count('(')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_stack = paren_stack + paren_string.count(')')\n    paren_stack = paren_stack\
    \ + paren_string.count(')')\n    paren_stack = paren_stack + paren_string.count(')')\n\
    \    paren_\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmplmy0uc_3.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplmy0uc_3.jl:1\n\
    in expression starting at /tmp/tmplmy0uc_3.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.strip\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]\nusing Test\n\n\
    @testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\"{}[]{}[]{}[]{}[]{}[]\\\
    nusing Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmpqsjkkmdu.jl:39\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmpqsjkkmdu.jl:39\nin expression starting at /tmp/tmpqsjkkmdu.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.strip\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]()\")\n    paren_string = paren_string.strip(\"{}[]()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()\")\n \
    \   paren_string = paren_string.strip(\"{}[]()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()\")\n \
    \   paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n  \
    \  paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n   \
    \ paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n    paren_string =\
    \ paren_string.strip(\"{}[]()()()()()()()()()()()()()()\")\n    paren_string =\
    \ paren_string.strip(\"{}[]()()()()()()()()()()()()()()\")\n    paren_string =\
    \ paren_string.strip(\"{}[]()()()\nusing Test\n\n@testset begin\n\ncandidate =\
    \ parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\"{}[]()()()\\\
    nusing Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmpsh0r_ivi.jl:40\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmpsh0r_ivi.jl:40\nin expression starting at /tmp/tmpsh0r_ivi.jl:40\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.trim()\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    []\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    ,\")\n    paren_string = paren_string.strip(\";\")\n    paren_string = paren_string.strip(\"\
    :\")\n    paren_string = paren_string.strip(\".\")\n    paren_string = paren_string.strip(\"\
    ..\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_70necnd.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_70necnd.jl:1\n\
    in expression starting at /tmp/tmp_70necnd.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.strip\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}{}\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}{}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}{}[]{}{}\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}{}[]{}{}{}\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}{}[]{}{}{}{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}{}[]{}{}{}{}{}\")\n    paren_string = paren_string.strip(\"{}[]{}{}[]{}{}{}{}{}{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}{}[]{}{}{}{}{}{}{}\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}{}[]{}{}{}{}{}{}{}{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}{}[]{}{}{}{}{}{}{}{}{}\")\n    paren_string = paren_string.strip(\"{}[]{}{}[]{}{}{}{}{}{}{}{}{}{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}{}[]{}{}{}{}{}{}{}{}{}{}{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}{}[]{}{}{}{}{}{}{}{}{}{}{}{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}{}[]{}{}{}{}{}{}{}{}{}{}{}{}{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}{}[]{}{}{}{}{}{}{}{}{}{}{}{}{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}{}[]{}{}{}{}{}{}{}{}{}{}{}{}{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}{}[]{}{}{}{}{}{}{}{}{}{}{}{}{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}{}[]{}{}{}{}{}{}{}{}{}\nusing\
    \ Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\"{}[]{}{}[]{}{}{}{}{}{}{}{}{}\\\
    nusing Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmph5v7wc7l.jl:39\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmph5v7wc7l.jl:39\nin expression starting at /tmp/tmph5v7wc7l.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.strip\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}{}\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}{}{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}{}{}{}\")\n    paren_string = paren_string.strip(\"{}[]{}{}{}{}{}\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}{}{}{}{}{}\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}{}{}{}{}{}{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}{}{}{}{}{}{}{}\")\n    paren_string = paren_string.strip(\"{}[]{}{}{}{}{}{}{}{}{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}{}{}{}{}{}{}{}{}{}\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}{}{}{}{}{}{}{}{}{}{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}{}{}{}{}{}{}{}{}{}{}{}\")\n    paren_string = paren_string.strip(\"{}[]{}{}{}{}{}{}{}{}{}{}{}{}{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}{}{}{}{}{}{}{}{}{}{}{}{}{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}{}{}{}{}{}{}{}{}{}{}\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\"{}[]{}{}{}{}{}{}{}{}{}{}{}\\\
    nusing Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmpa3bn37od.jl:39\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmpa3bn37od.jl:39\nin expression starting at /tmp/tmpa3bn37od.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_stack = Vector{Int64}()\n    paren_stack = paren_stack + paren_string.count(\"\
    (\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmj8fq37u.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmj8fq37u.jl:1\n\
    in expression starting at /tmp/tmpmj8fq37u.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.strip\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]\nusing Test\n\n\
    @testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\"{}[]{}[]{}[]{}[]{}[]\\\
    nusing Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmprbywocnq.jl:39\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmprbywocnq.jl:39\nin expression starting at /tmp/tmprbywocnq.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_stack = Vector{Int64}()\n    paren_stack = paren_stack + paren_string.count(\"\
    (\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyyhpv2rc.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyyhpv2rc.jl:1\n\
    in expression starting at /tmp/tmpyyhpv2rc.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = paren_string.split(\" \")\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:end]\n    paren_groups = paren_groups[2:end]\n\
    \    paren_groups = paren_groups[2:\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7cb_y1a2.jl:52\nin expression starting at\
    \ /tmp/tmp7cb_y1a2.jl:52\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.trim()\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}\nusing Test\n\n\
    @testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\"{}[]{}[]{}[]{}[]{}\\\
    nusing Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmp2y5n9hl8.jl:39\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmp2y5n9hl8.jl:39\nin expression starting at /tmp/tmp2y5n9hl8.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.strip\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]\nusing Test\n\n\
    @testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\"{}[]{}[]{}[]{}[]{}[]\\\
    nusing Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmp_r_1az8o.jl:39\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmp_r_1az8o.jl:39\nin expression starting at /tmp/tmp_r_1az8o.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.strip\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]()\")\n    paren_string = paren_string.strip(\"{}[]()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()\")\n \
    \   paren_string = paren_string.strip(\"{}[]()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()\")\n   \
    \ paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n\
    \    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n \
    \   paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n  \
    \  paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n   \
    \ paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n    paren_string =\
    \ paren_string.\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpu1atpfw8.jl:8 expected\
    \ \"end\", got \"Test\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu1atpfw8.jl:35\n\
    in expression starting at /tmp/tmpu1atpfw8.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.strip\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]()\")\n    paren_string = paren_string.strip(\"{}[]()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()\")\n \
    \   paren_string = paren_string.strip(\"{}[]()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()\")\n \
    \   paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n  \
    \  paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n   \
    \ paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n    paren_string =\
    \ paren_string.strip(\"{}[]()()()()()()()()()()()()()()\")\n    paren_string =\
    \ paren_string.strip(\"{}[]()()()()()()()()()()()()()()\")\n    paren_string =\
    \ paren_string.strip(\"{}[]()()()\nusing Test\n\n@testset begin\n\ncandidate =\
    \ parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\"{}[]()()()\\\
    nusing Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmpzjci58e6.jl:40\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmpzjci58e6.jl:40\nin expression starting at /tmp/tmpzjci58e6.jl:40\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_stack = Vector{Int64}()\n    paren_stack = paren_stack + paren_string.count(\"\
    (\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqkhwsh4q.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqkhwsh4q.jl:1\n\
    in expression starting at /tmp/tmpqkhwsh4q.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.strip\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]\nusing Test\n\n\
    @testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\"{}[]{}[]{}[]{}[]{}[]\\\
    nusing Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmpoxpu6fan.jl:39\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmpoxpu6fan.jl:39\nin expression starting at /tmp/tmpoxpu6fan.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.strip\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]()\")\n    paren_string = paren_string.strip(\"{}[]()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()\")\n \
    \   paren_string = paren_string.strip(\"{}[]()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()\")\n   \
    \ paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n\
    \    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n \
    \   paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n  \
    \  paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n   \
    \ paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n    paren_string =\
    \ paren_string.\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmp1tcf3iam.jl:8 expected\
    \ \"end\", got \"Test\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1tcf3iam.jl:35\n\
    in expression starting at /tmp/tmp1tcf3iam.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.strip\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]()\")\n    paren_string = paren_string.strip(\"{}[]()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()\")\n \
    \   paren_string = paren_string.strip(\"{}[]()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()\")\n\
    \    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()()\")\n\
    \    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()()\")\n\
    \    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()()\")\n\
    \    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()()\")\n\
    \    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()()()()()\"\
    )\n    paren_string = paren\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7gc6izy9.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7gc6izy9.jl:1\n\
    in expression starting at /tmp/tmp7gc6izy9.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    stack = Vector{Int64}()\n    paren_count = 0\n    paren_level = 0\n  \
    \  for c in paren_string\n        if c == '('\n            paren_count += 1\n\
    \            paren_level += 1\n            push!(stack, paren_count)\n       \
    \ elseif c == ')'\n            paren_count -= 1\n            if paren_count >\
    \ 0\n                paren_level -= 1\n            else\n                pop!(stack)\n\
    \            end\n        else\n            paren_level = 0\n        end\n   \
    \ end\n    return stack\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1kskbzeu.jl:30\nin expression starting at\
    \ /tmp/tmp1kskbzeu.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.strip\n    paren_levels = Vector{Int64}()\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren_level\n    paren_level = 1\n    paren_levels[paren_level]\
    \ = paren_level\n    paren_level = 1\n    paren_levels[paren_level] = paren_level\n\
    \    paren_level = 1\n    paren_levels[paren_level] = paren_level\n    paren_level\
    \ = 1\n    paren_levels[paren_level] = paren\nusing Test\n\n@testset begin\n\n\
    candidate = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3,\
    \ 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6u__c5jb.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6u__c5jb.jl:1\n\
    in expression starting at /tmp/tmp6u__c5jb.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.strip\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3,\
    \ 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpm81jjw7w.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpm81jjw7w.jl:1\n\
    in expression starting at /tmp/tmpm81jjw7w.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    stack = Vector{Int64}()\n    paren_count = 0\n    for c in paren_string\n\
    \        if c == '('\n            paren_count += 1\n            push!(stack, paren_count)\n\
    \        elseif c == ')'\n            pop!(stack)\n            paren_count -=\
    \ 1\n        elseif paren_count > 0\n            paren_count -= 1\n        end\n\
    \    end\n    return stack\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string representing a mathematical expression and returns the number\
    \ of parentheses needed to be closed to make the expression valid. For example,\
    \ if the input string is \"(1+2)\", the function should return 1. For any other\
    \ input string, it should return 0.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpennt0wzx.jl:24\nin expression starting at\
    \ /tmp/tmpennt0wzx.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_stack = Vector{Int64}()\n    paren_stack = paren_stack + paren_string.count(\"\
    (\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwdnqpk54.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwdnqpk54.jl:1\n\
    in expression starting at /tmp/tmpwdnqpk54.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.strip\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"()[]{}\")\n    paren_string = paren_string.strip(\"\
    (){}[]\")\n    paren_string = paren_string.strip(\"{}[]()\")\n    paren_string\
    \ = paren_string.strip(\"[]{}()\")\n    paren_string = paren_string.strip(\"{}()[]\"\
    )\n    paren_string = paren_string.strip(\"[](){}\")\n    paren_string = paren_string.strip(\"\
    ()[]{}()\")\n    paren_string = paren_string.strip(\"(){}[]()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()\")\n    paren_string = paren_string.strip(\"\
    [](){}()\")\n    paren_string = paren_string.strip(\"()[]{}()()\")\n    paren_string\
    \ = paren_string.strip(\"(){}[]()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()\")\n    paren_string = paren_string.strip(\"[](){}()()\")\n    paren_string\
    \ = paren_string.strip(\"()[]{}()()()\")\n    paren_string = paren_string.strip(\"\
    (){}[]()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()\")\n   \
    \ paren_string = paren_string.strip(\"[](){}()()()\")\n    paren_string = paren_string.strip(\"\
    ()[]{}()()()()\")\n    paren_string = paren_string.strip(\"(){}[]()()()()\")\n\
    \    paren_string = paren_string.strip(\"{}[]()()()()()\")\n    paren_string =\
    \ paren_string.strip(\"[](){}()()()()\")\n    paren_string = paren_string.strip(\"\
    ()[]{}()()()()()\")\n    paren_string = paren_string.strip(\"(){}[]()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"[](){}()()()()()\")\n    paren_string = paren_string.strip(\"\
    ()[]{}()()()()()()\")\n    paren_string = paren_string.strip(\"(){}[]()()()()()()\"\
    )\n    paren_string\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpigkktxvz.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpigkktxvz.jl:1\n\
    in expression starting at /tmp/tmpigkktxvz.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.strip\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]\nusing Test\n\n\
    @testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\"{}[]{}[]{}[]{}[]{}[]\\\
    nusing Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmptxjs9r8z.jl:39\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmptxjs9r8z.jl:39\nin expression starting at /tmp/tmptxjs9r8z.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_stack = Vector{Int64}()\n    paren_stack = paren_stack + paren_string.count(\"\
    (\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpr9pg48tg.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpr9pg48tg.jl:1\n\
    in expression starting at /tmp/tmpr9pg48tg.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.trim()\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    .\")\n    paren_string = paren_string.strip(\"..\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp63q1xs00.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp63q1xs00.jl:1\n\
    in expression starting at /tmp/tmp63q1xs00.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.trim()\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3,\
    \ 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\"{}\\nusing\
    \ Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmpoeul5s24.jl:57\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmpoeul5s24.jl:57\nin expression starting at /tmp/tmpoeul5s24.jl:57\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_stack = Vector{Int64}()\n    paren_stack = paren_stack + paren_string.split(\"\
    \ \") |> Vector.map(parseInt64)\n    paren_stack = paren_stack[1..end]\n    paren_stack\
    \ = paren_stack[1..end-1]\n    paren_stack = paren_stack[1..end-1]\n    paren_stack\
    \ = paren_stack[1..end-1]\n    paren_stack = paren_stack[1..end-1]\n    paren_stack\
    \ = paren_stack[1..end-1]\n    paren_stack = paren_stack[1..end-1]\n    paren_stack\
    \ = paren_stack[1..end-1]\n    paren_stack = paren_stack[1..end-1]\n    paren_stack\
    \ = paren_stack[1..end-1]\n    paren_stack = paren_stack[1..end-1]\n    paren_stack\
    \ = paren_stack[1..end-1]\n    paren_stack = paren_stack[1..end-1]\n    paren_stack\
    \ = paren_stack[1..end-1]\n    paren_stack = paren_stack[1..end-1]\n    paren_stack\
    \ = paren_stack[1..end-1]\n    paren_stack = paren_stack[1..end-1]\n    paren_stack\
    \ = paren_stack[1..end-1]\n    paren_stack = paren_stack[1..end-1]\n    paren_stack\
    \ = paren_stack[1..end-1]\n    paren_stack = paren_stack[1..end-1]\n    paren_stack\
    \ = paren_stack[1..end-1]\n    paren_stack = paren_stack[1..end-1]\n    paren_stack\
    \ = paren_stack[1..end-1]\n    paren_stack = paren_stack[1..end-1]\n    paren_stack\
    \ = paren_stack[1..end-1]\n    paren_stack = paren_stack[1..end-1]\n    paren_stack\
    \ = paren_stack[1..end-1]\n    paren_stack = paren_stack[1..end-1]\n    paren_stack\
    \ = paren_stack[1..end-1]\n    paren_stack = paren_stack[1..end-1]\n    paren_stack\
    \ = paren_stack[1..end-1]\n    paren_stack = paren_stack[1..end-1]\n    paren_stack\
    \ = paren_stack[1..end-1]\n    \nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp1aqvlfrl.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1aqvlfrl.jl:1\n\
    in expression starting at /tmp/tmp1aqvlfrl.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.strip\n    paren_stack = Vector{Int64}()\n\
    \    paren_stack = paren_stack + paren_string.count(\"(\")\n    paren_stack =\
    \ paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren_string.count(\")\")\n    paren_stack\
    \ = paren_stack + paren_string.count(\")\")\n    paren_stack = paren_stack + paren_string.count(\"\
    )\")\n    paren_stack = paren_stack + paren\nusing Test\n\n@testset begin\n\n\
    candidate = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3,\
    \ 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpytdltz3p.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpytdltz3p.jl:1\n\
    in expression starting at /tmp/tmpytdltz3p.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    stack = Vector{Int64}()\n    paren_count = 0\n    for c in paren_string\n\
    \        if c == '('\n            paren_count += 1\n            push!(stack, paren_count)\n\
    \        elseif c == ')'\n            pop!(stack)\n            paren_count -=\
    \ 1\n        elseif paren_count > 0\n            push!(stack, paren_count)\n \
    \       end\n    end\n    return stack\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string as input and returns a string with all the characters\
    \ in alphabetical order.\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5kryf_9c.jl:24\nin expression starting at\
    \ /tmp/tmp5kryf_9c.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    stack = Vector{Int64}()\n    paren_count = 0\n    for char in paren_string\n\
    \        if char == '('\n            paren_count += 1\n            push!(stack,\
    \ paren_count)\n        elseif char == ')'\n            pop!(stack)\n        \
    \    paren_count -= 1\n        elseif char == ' '\n            paren_count +=\
    \ 1\n            push!(stack, paren_count)\n        end\n    end\n    return stack\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes in a string and\
    \ returns the number of words in the string.\nusing Test\n\n@testset begin\n\n\
    candidate = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3,\
    \ 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbnqj4emw.jl:25\nin expression starting at\
    \ /tmp/tmpbnqj4emw.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.strip\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]\nusing Test\n\n\
    @testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\"{}[]{}[]{}[]{}[]{}[]\\\
    nusing Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmp1alrjw60.jl:39\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmp1alrjw60.jl:39\nin expression starting at /tmp/tmp1alrjw60.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.strip\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmprhn6unag.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprhn6unag.jl:1\n\
    in expression starting at /tmp/tmprhn6unag.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_groups = paren_string.split(\" \")\n    paren_groups = [paren_group\
    \ for paren_group in paren_groups if paren_group != \"\"]\n    paren_groups =\
    \ [paren_group for paren_group in paren_groups if paren_group != \"()\"]\n   \
    \ paren_groups = [paren_group for paren_group in paren_groups if paren_group !=\
    \ \"[]\"]\n    paren_groups = [paren_group for paren_group in paren_groups if\
    \ paren_group != \"{}\"]\n    paren_groups = [paren_group for paren_group in paren_groups\
    \ if paren_group != \"{}[]\"]\n    paren_groups = [paren_group for paren_group\
    \ in paren_groups if paren_group != \"{}{}\"]\n    paren_groups = [paren_group\
    \ for paren_group in paren_groups if paren_group != \"{}{}[]\"]\n    paren_groups\
    \ = [paren_group for paren_group in paren_groups if paren_group != \"{}{}{}\"\
    ]\n    paren_groups = [paren_group for paren_group in paren_groups if paren_group\
    \ != \"{}{}{}[]\"]\n    paren_groups = [paren_group for paren_group in paren_groups\
    \ if paren_group != \"{}{}{}{}\"]\n    paren_groups = [paren_group for paren_group\
    \ in paren_groups if paren_group != \"{}{}{}{}[]\"]\n    paren_groups = [paren_group\
    \ for paren_group in paren_groups if paren_group != \"{}{}{}{}{}\"]\n    paren_groups\
    \ = [paren_group for paren_group in paren_groups if paren_group != \"{}{}{}{}{}[]\"\
    ]\n    paren_groups = [paren_group for paren_group in paren_groups if paren_group\
    \ != \"{}{}{}{}{}{}\"]\n    paren_groups = [paren_group for paren_group in paren_groups\
    \ if paren_group != \"{}{}{}{}{}{}[]\"]\n    paren_groups = [paren_group for paren_group\
    \ in paren_groups if paren_group != \"{}{}{}{}{}{}{}\"]\n    paren_groups = [paren_group\
    \ for paren_group in paren_groups if paren_group != \"{}{}{}{}{}{}[]\"]\n    paren_groups\
    \ = [paren_group for paren_group in paren_groups if paren_group != \"{}{}{}{}{}{}{}\"\
    ]\n    paren_groups = [paren_group for paren_group in paren_groups if paren_group\
    \ != \"{}{}{}{}{}{}{}[]\"]\n    paren_group\nusing Test\n\n@testset begin\n\n\
    candidate = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3,\
    \ 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxqcv9zg6.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxqcv9zg6.jl:1\n\
    in expression starting at /tmp/tmpxqcv9zg6.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.strip\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]()\")\n    paren_string = paren_string.strip(\"{}[]()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()\")\n \
    \   paren_string = paren_string.strip(\"{}[]()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()\")\n   \
    \ paren_string = paren_string.strip(\"{}[]()()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\"\\nusing\
    \ Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmp5wjir1km.jl:41\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmp5wjir1km.jl:41\nin expression starting at /tmp/tmp5wjir1km.jl:41\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.trim()\n    paren_levels = paren_string.split(\"\
    )\")\n    paren_levels = paren_levels[2:end]\n    paren_levels = paren_levels[2:end]\n\
    \    paren_levels = paren_levels[2:end]\n    paren_levels = paren_levels[2:end]\n\
    \    paren_levels = paren_levels[2:end]\n    paren_levels = paren_levels[2:end]\n\
    \    paren_levels = paren_levels[2:end]\n    paren_levels = paren_levels[2:end]\n\
    \    paren_levels = paren_levels[2:end]\n    paren_levels = paren_levels[2:end]\n\
    \    paren_levels = paren_levels[2:end]\n    paren_levels = paren_levels[2:end]\n\
    \    paren_levels = paren_levels[2:end]\n    paren_levels = paren_levels[2:end]\n\
    \    paren_levels = paren_levels[2:end]\n    paren_levels = paren_levels[2:end]\n\
    \    paren_levels = paren_levels[2:end]\n    paren_levels = paren_levels[2:end]\n\
    \    paren_levels = paren_levels[2:end]\n    paren_levels = paren_levels[2:end]\n\
    \    paren_levels = paren_levels[2:end]\n    paren_levels = paren_levels[2:end]\n\
    \    paren_levels = paren_levels[2:end]\n    paren_levels = paren_levels[2:end]\n\
    \    paren_levels = paren_levels[2:end]\n    paren_levels = paren_levels[2:end]\n\
    \    paren_levels = paren_levels[2:end]\n    paren_levels = paren_levels[2:end]\n\
    \    paren_levels = paren_levels[2:end]\n    paren_levels = paren_levels[2:end]\n\
    \    paren_levels = paren_levels[2:end]\n    paren_levels = paren_levels[2:end]\n\
    \    paren_levels = paren_levels[2:end]\n    paren_levels = paren_levels[2:end]\n\
    \    paren_levels = paren_levels[2:end]\n    paren_levels = paren_levels[2:end]\n\
    \    paren_levels = paren_levels[2:end]\n    paren_levels = paren_levels[2:end]\n\
    \    paren_levels = paren_levels[2:end]\n    paren_levels = paren_levels[2:end]\n\
    \    paren_levels = paren_levels[2:end]\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpklgk8j4b.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpklgk8j4b.jl:1\n\
    in expression starting at /tmp/tmpklgk8j4b.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.strip\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}()[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}()[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}()[]{}()\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}()[]{}()[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}()[]{}()[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}()[]{}()[]{}()\")\n    paren_string = paren_string.strip(\"{}[]{}()[]{}()[]{}()[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}()[]{}()[]{}()[]{}\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}()[]{}()[]{}()[]{}()\")\n    paren_string = paren_string.strip(\"\
    {}[]{}()[]{}()[]{}()[]{}()[]\")\n    paren_string = paren_string.strip(\"{}[]{}()[]{}()[]{}()[]{}()[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}()[]{}()[]{}()[]{}()[]{}()\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}()[]{}()[]{}()[]{}()[]{}()[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}()[]{}()[]{}()[]{}()[]{}()[]{}()\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}()[]{}()[]{}()[]{}()[]{}()[]{}()[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}()[]{}()[]{}()[]{}()[]{}()[]{}()[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}()[]{}()[]{}()[]{}()[]{}()[]{}()[]{}()\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}()\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3,\
    \ 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\"{}[]{}()\\\
    nusing Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmpncebh86s.jl:39\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmpncebh86s.jl:39\nin expression starting at /tmp/tmpncebh86s.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    stack = Vector{Int64}()\n    paren_count = 0\n    for char in paren_string\n\
    \        if char == '('\n            paren_count += 1\n            push!(stack,\
    \ paren_count)\n        elseif char == ')'\n            pop!(stack)\n        \
    \    if paren_count == stack[end]\n                paren_count -= 1\n        \
    \    else\n                paren_count = stack[end]\n            end\n       \
    \ else\n            paren_count = 0\n        end\n    end\n    return stack\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptzai05_4.jl:28\nin expression starting at\
    \ /tmp/tmptzai05_4.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    stack = Vector{Int64}()\n    paren_count = 0\n    for c in paren_string\n\
    \        if c == '('\n            push!(stack, paren_count)\n            paren_count\
    \ += 1\n        elseif c == ')'\n            pop!(stack)\n            paren_count\
    \ -= 1\n        else\n            paren_count += 1\n        end\n    end\n   \
    \ return stack\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns the number of occurrences of a substring within that string.\n\
    using Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpje3oo8ev.jl:24\nin expression starting at\
    \ /tmp/tmpje3oo8ev.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.strip\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]()\")\n    paren_string = paren_string.strip(\"{}[]()[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()[]()\")\n    paren_string = paren_string.strip(\"\
    {}[]()[]()()\")\n    paren_string = paren_string.strip(\"{}[]()[]()()()\")\n \
    \   paren_string = paren_string.strip(\"{}[]()[]()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()[]()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()[]()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()[]()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()[]()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"{}[]()[]()()()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    {}[]()[]()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"{}[]()[]()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()[]()()()()()()()()()()()\")\n\
    \    paren_string = paren_string.strip(\"{}[]()[]()()()()()()()()()()()()\")\n\
    \    paren_string = paren_string.strip(\"{}[]()[]()()()()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()[]()()()()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()[]()()()()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()[]()()()()()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"{}[]()[]()()()()()()()()()()()()()()\"\
    )\n\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"\
    (()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpka27rtrs.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpka27rtrs.jl:1\n\
    in expression starting at /tmp/tmpka27rtrs.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.strip\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string.strip(\")\")\n    paren_string = paren_string.strip(\"\
    )\")\n    paren_string = paren_string\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\") ==\
    \ [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3, 4])\n\
    \t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpvzzpcbl_.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvzzpcbl_.jl:1\n\
    in expression starting at /tmp/tmpvzzpcbl_.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.trim()\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    .\")\n    paren_string = paren_string.strip(\"..\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0ekjza5v.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0ekjza5v.jl:1\n\
    in expression starting at /tmp/tmp0ekjza5v.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.strip\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]\nusing Test\n\n\
    @testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\"{}[]{}[]{}[]{}[]{}[]\\\
    nusing Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmp_lt6or5z.jl:39\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmp_lt6or5z.jl:39\nin expression starting at /tmp/tmp_lt6or5z.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.trim()\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\" ()\")\n    paren_string = paren_string.strip(\"\
    ()()\")\n    paren_string = paren_string.strip(\"(()\")\n    paren_string = paren_string.strip(\"\
    (())\")\n    paren_string = paren_string.strip(\"(()()\")\n    paren_string =\
    \ paren_string.strip(\"(())()\")\n    paren_string = paren_string.strip(\"(()()()\"\
    )\n    paren_string = paren_string.strip(\"(()()()()\")\n    paren_string = paren_string.strip(\"\
    (()()()()()\")\n    paren_string = paren_string.strip(\"(()()()()()()\")\n   \
    \ paren_string = paren_string.strip(\"(()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    (()()()()()()()()\")\n    paren_string = paren_string.strip(\"(()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"(()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"(()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    (()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"(()()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"(()()()()()()()()()()()()\")\n    paren_string\
    \ = paren_string.strip(\"(()()()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"\
    (()()()()()()()()()()()()()()\")\n    paren_string = paren_string.strip(\"(()()()()()()()()()()()()()()\"\
    )\n    paren_string = paren_string.strip(\"(()()()()()()()()()()()()()()\")\n\
    \    paren_string = paren_string.strip(\"(()()()()()()()()()()()()()()()\")\n\
    \    paren_string = paren_string.strip(\"(()()()()()()()()()()()()()()()\")\n\
    \    paren_string = paren_string.strip(\"(()()()()()\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((())) (((())))\") == [1, 2, 3,\
    \ 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\"(()()()()()\\\
    nusing Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmpk_xu64bo.jl:41\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmpk_xu64bo.jl:41\nin expression starting at /tmp/tmpk_xu64bo.jl:41\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.strip\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]\nusing Test\n\n\
    @testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\"{}[]{}[]{}[]{}[]{}[]\\\
    nusing Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmpn_xk7d7j.jl:39\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmpn_xk7d7j.jl:39\nin expression starting at /tmp/tmpn_xk7d7j.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    stack = Vector{Int64}()\n    paren_count = 0\n    for c in paren_string\n\
    \        if c == '('\n            push!(stack, paren_count)\n            paren_count\
    \ += 1\n        elseif c == ')'\n            pop!(stack)\n            paren_count\
    \ -= 1\n        elseif c == '('\n            push!(stack, paren_count)\n     \
    \       paren_count += 1\n        elseif c == ')'\n            pop!(stack)\n \
    \           paren_count -= 1\n        else\n            paren_count += 1\n   \
    \     end\n    end\n    return stack\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes in a string and returns the number of parentheses in the\
    \ string.\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\t\
    @test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu_hh759y.jl:30\nin expression starting at\
    \ /tmp/tmpu_hh759y.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.trim()\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\",\")\n    paren_string = paren_string.strip(\"\
    ;\")\n    paren_string = paren_string.strip(\":\")\n    paren_string = paren_string.strip(\"\
    =\")\n    paren_string = paren_string.strip(\".\")\n    paren_string = paren_string.strip(\"\
    ..\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren_string = paren_string.strip(\"...\")\n    paren_string = paren_string.strip(\"\
    ...\")\n    paren\nusing Test\n\n@testset begin\n\ncandidate = parse_nested_parens;\n\
    \t@test(candidate(\"(()()) ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"\
    () (()) ((())) (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\"\
    ) == [4])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp8lmh4bq_.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8lmh4bq_.jl:1\n\
    in expression starting at /tmp/tmp8lmh4bq_.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n    For each of the group, output\
    \ the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64}\
    \ \n    paren_string = paren_string.strip\n    paren_string = paren_string.strip(\"\
    ()\")\n    paren_string = paren_string.strip(\"[]\")\n    paren_string = paren_string.strip(\"\
    {}\")\n    paren_string = paren_string.strip(\"{}[]\")\n    paren_string = paren_string.strip(\"\
    {}[]{}\")\n    paren_string = paren_string.strip(\"{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}\")\n \
    \   paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string\
    \ = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}\")\n    paren_string = paren_string.strip(\"\
    {}[]{}[]{}[]{}[]{}[]{}[]{}[]\")\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]{}[]\"\
    )\n    paren_string = paren_string.strip(\"{}[]{}[]{}[]{}[]{}[]\nusing Test\n\n\
    @testset begin\n\ncandidate = parse_nested_parens;\n\t@test(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2, 3, 1, 3])\n\t@test(candidate(\"() (()) ((()))\
    \ (((())))\") == [1, 2, 3, 4])\n\t@test(candidate(\"(()(())((())))\") == [4])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"\"{}[]{}[]{}[]{}[]{}[]\\\
    nusing Test\\n\\n@testset begin\\n\\ncandidate = parse_nested_parens;\\n\\t@test(candidate(\"\
    (()()) (\" at /tmp/tmpg2jtdst6.jl:39\nStacktrace:\n [1] top-level scope\n   @\
    \ /tmp/tmpg2jtdst6.jl:39\nin expression starting at /tmp/tmpg2jtdst6.jl:39\n"
  exit_code: 1
  status: SyntaxError
