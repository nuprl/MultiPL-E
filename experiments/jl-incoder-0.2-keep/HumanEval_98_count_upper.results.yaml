name: HumanEval_98_count_upper
language: julia
results:
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ i in 0..(length(s)-2) do\n        if s[i] == 'A' or s[i] == 'a' or s[i] == 'E'\
    \ or s[i] == 'e' or s[i] == 'I' or s[i] == 'i' or s[i] == 'O' or s[i] == 'o' or\
    \ s[i] == 'U' or s[i] == 'u'\n            count_upper = count_upper + 1\n    \
    \    end\n    end\n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n\
    \    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg')\
    \ returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"\
    abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\")\
    \ == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpbspmtdfq.jl:11\nin expression starting at /tmp/tmpbspmtdfq.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ i in 0..(length(s)-2) do\n        if s[i] == 'A' && s[i+1] == 'B' && s[i+2]\
    \ == 'C' then\n            count_upper = count_upper + 1\n        elseif s[i]\
    \ == 'a' && s[i+1] == 'b' && s[i+2] == 'c' then\n            count_upper = count_upper\
    \ + 1\n        elseif s[i] == 'd' && s[i+1] == 'b' && s[i+2] == 'e' then\n   \
    \         count_upper = count_upper + 1\n        elseif s[i] == 'D' && s[i+1]\
    \ == 'B' && s[i+2] == 'E' then\n            count_upper = count_upper + 1\n  \
    \      elseif s[i] == 'd' && s[i+1] == 'b' && s[i+2] == 'e' then\n           \
    \ count_upper = count_upper + 1\n        elseif s[i] == 'e' && s[i+1] == 'b' &&\
    \ s[i+2] == 'd' then\n            count_upper = count_upper + 1\n        elseif\
    \ s[i] == 'E' && s[i+1] == 'B' && s[i+2] == 'D' then\n            count_upper\
    \ = count_upper + 1\n        elseif s[i] == 'e' && s[i+1] == 'b' && s[i+2] ==\
    \ 'd' then\n            count_upper = count_upper + 1\n        elseif s[i] ==\
    \ 'f' && s[i+1] == 'b' && s[i+2] == 'e' then\n            count_upper = count_upper\
    \ + 1\n        elseif s[i] == 'F' && s[i+1] == 'B' && s[i+2] == 'E' then\n   \
    \         count_upper = count_upper + 1\n        elseif s[i] == 'f' && s[i+1]\
    \ == 'b' && s[i+2] == 'e' then\n            count_upper = count_upper + 1\n  \
    \      elseif s[i] == 'g' && s[i+1] == 'b' && s[i+2] == 'e' then\n           \
    \ count_upper = count_upper + 1\n        elseif s[i] == 'G' && s[i+1] == 'B' &&\
    \ s[i+2] == 'E' then\n            count_upper = count_upper + 1\n        elseif\
    \ s[i] == 'g' && s[i+1] == 'b' && s[i+2] == 'e' then\n            count_upper\
    \ = count_upper + 1\n        elseif s[i] == 'h' && s[i+1] == 'b' && s[i+2] ==\
    \ 'e' then\n            count_upper = count_upper + 1\n        elseif s[i] ==\
    \ 'H' && s[i+1] == 'B' && s[i+2] == 'E' then\n            count_upper = count_upper\
    \ + 1\n        elseif s[i] == 'h' && s[i+1] == 'b' && s[i+2] == 'e' then\n   \
    \         count_upper = count_upper + 1\n        elseif s[i] == 'i' && s[i+1]\
    \ == 'b' && s[i+2] == 'e' then\n            count_upper = count_upper + 1\n  \
    \      elseif s[i] == 'I' && s[i+1] == 'B' && s[i\nusing Test\n\n@testset begin\n\
    \ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"\
    abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\")\
    \ == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpv00ilmfr.jl:11\nin expression starting at /tmp/tmpv00ilmfr.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n        end\n \
    \   end\n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the number of uppercase vowels in each word of a\
    \ string.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcvdy81gs.jl:18\nin expression starting at\
    \ /tmp/tmpcvdy81gs.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n        end\n \
    \   end\n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns the number of vowels found in\
    \ it.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyr82xbin.jl:18\nin expression starting at\
    \ /tmp/tmpyr82xbin.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    \n    count = 0\n    for\
    \ c in s\n        if isupper(c)\n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.3>\ncount_upper(\"aBCdEf\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number of uppercase\
    \ letters in a string.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpabs2apqq.jl:19\nin expression starting at\
    \ /tmp/tmpabs2apqq.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count = 0\n    for c in\
    \ s\n        if isupper(c)\n            count += 1\n            \n    return count\n\
    </cell>\n<code language=julia-1.5>\ncount_upper(\"aBCdEf\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"abcdefg\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"dBBE\"\
    )\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ the number of vowels found in it.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\"\
    ) == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t\
    @test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0vnmdqf3.jl:16\nin expression starting at\
    \ /tmp/tmp0vnmdqf3.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n        end\n \
    \   end\n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a string and returns the number of vowels found in\
    \ it.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4zmhb2hy.jl:18\nin expression starting at\
    \ /tmp/tmp4zmhb2hy.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            \n\
    \    return count_upper\nend\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpldrgymnp.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpldrgymnp.jl:1\n\
    in expression starting at /tmp/tmpldrgymnp.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count = 0\n    for c in\
    \ s\n        if isupper(c)\n            count += 1\n            \n    return count\n\
    </cell>\n<code language=julia-1.5>\ncount_upper(\"aBCdEf\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string and returns the number of vowels\
    \ \nin each word in the string.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppc0fsogc.jl:16\nin expression starting at\
    \ /tmp/tmppc0fsogc.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    \n    count_upper = Int64(0)\n\
    \    \n    for i in 1:length(s) do\n        if s[i] == 'A' || s[i] == 'a' then\n\
    \            count_upper = count_upper + 1\n        end\n    end\n    \n    return\
    \ count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"aBCdEf\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise: Write\
    \ a function that counts the number of uppercase vowels in a string. \nThe function\
    \ should take a string as input, and return the number of uppercase vowels.\n\
    using Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr_gi6wbs.jl:21\nin expression starting at\
    \ /tmp/tmpr_gi6wbs.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    \n    count = 0\n    for\
    \ c in s\n        if isupper(c)\n            count += 1\n            \n    return\
    \ count\n</cell>\n<code language=julia-1.4>\ncount_upper(\"aBCdEf\")\n</cell>\n\
    <code language=julia-1.4>\ncount_upper(\"abcdefg\")\n</cell>\n<code language=julia-1.4>\n\
    count_upper(\"dBBE\")\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of uppercase letters in a string.\nusing Test\n\n@testset begin\n\
    \ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"\
    abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\")\
    \ == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnh07wy2s.jl:17\nin expression starting at\
    \ /tmp/tmpnh07wy2s.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if c == 'A'\n            count_upper += 1\n        elseif c\
    \ == 'a'\n            count_upper += 1\n        elseif c == 'E'\n            count_upper\
    \ += 1\n        elseif c == 'e'\n            count_upper += 1\n        elseif\
    \ c == 'I'\n            count_upper += 1\n        elseif c == 'i'\n          \
    \  count_upper += 1\n        elseif c == 'O'\n            count_upper += 1\n \
    \       elseif c == 'o'\n            count_upper += 1\n        elseif c == 'U'\n\
    \            count_upper += 1\n        elseif c == 'u'\n            count_upper\
    \ += 1\n        elseif c == 'Y'\n            count_upper += 1\n        elseif\
    \ c == 'y'\n            count_upper += 1\n        elseif c == 'Y'\n          \
    \  count_upper += 1\n        elseif c == 'y'\n            count_upper += 1\n \
    \       elseif c == 'Y'\n            count_upper += 1\n        elseif c == 'y'\n\
    \            count_upper += 1\n        elseif c == 'Y'\n            count_upper\
    \ += 1\n        elseif c == 'y'\n            count_upper += 1\n        elseif\
    \ c == 'Y'\n            count_upper += 1\n        elseif c == 'y'\n          \
    \  count_upper += 1\n        elseif c == 'Y'\n            count_upper += 1\n \
    \       elseif c == 'y'\n            count_upper += 1\n        elseif c == 'Y'\n\
    \            count_upper += 1\n        elseif c == 'y'\n            count_upper\
    \ += 1\n        elseif c == 'Y'\n            count_upper += 1\n        elseif\
    \ c == 'y'\n            count_upper += 1\n        elseif c == 'Y'\n          \
    \  count_upper += 1\n        elseif c == 'y'\n            count_upper += 1\n \
    \       elseif c == 'Y'\n            count_upper += 1\n        elseif c == 'y'\n\
    \            count_upper += 1\n        elseif c == 'Y'\n            count_upper\
    \ += 1\n        elseif c == 'y'\n            count_upper += 1\n        elseif\
    \ c == 'Y'\n            count_upper += 1\n        elseif c == 'y'\n          \
    \  count_upper += 1\n        elseif c == 'Y'\n            count_upper += 1\n \
    \       elseif c == 'y'\n            count_upper += 1\n        elseif c == 'Y'\n\
    \            count_upper += 1\n        elseif c == 'y'\n            count_upper\
    \ += 1\n        elseif c == 'Y'\n            count_upper += 1\n        elseif\
    \ c == 'y'\n            count_upper += 1\n        elseif c == 'Y'\n          \
    \  count_upper += 1\n        elseif c == 'y'\n            count_upper += 1\n \
    \       elseif c == 'Y'\n            count_upper += 1\n        elseif c == 'y'\n\
    \            count_\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmlp3k37v.jl:1\nin expression starting at /tmp/tmpmlp3k37v.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    \n    count_upper = 0\n\
    \    for c in s\n        if isupper(c)\n            count_upper += 1\n       \
    \     \n    return count_upper\nend\n</cell>\n<code language=julia-1.3>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<code language=julia-1.3>\ncount_upper(\"abcdefg\")\n</cell>\n\
    <code language=julia-1.3>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a string and returns the number of vowels \nin the\
    \ string. \nFor example count_vowels(\"aBCdEf\") returns 3.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"\
    abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\")\
    \ == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3umwcdyh.jl:18\nin expression starting at\
    \ /tmp/tmp3umwcdyh.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper(s,0)\nend\n\
    </cell>\n<code language=julia-1.4>\ncount_upper(\"aBCdEf\")\n</cell>\n<code language=julia-1.4>\n\
    count_upper(\"abcdefg\")\n</cell>\n<code language=julia-1.4>\ncount_upper(\"dBBE\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number of uppercase\
    \ vowels in a string. \nThe function should take a string as an argument and return\
    \ the number of uppercase vowels.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\"\
    ) == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t\
    @test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpue97fcce.jl:12\nin expression starting at\
    \ /tmp/tmpue97fcce.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            \n\
    \    return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns the number of vowels found in\
    \ that string.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpulaw3uq9.jl:17\nin expression starting at\
    \ /tmp/tmpulaw3uq9.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    \n    count_upper = 0\n\
    \    for c in s\n        if isupper(c)\n            count_upper += 1\n       \
    \ end\n    end\n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\n\
    @time count_upper(\"aBCdEf\")\n</cell>\n<code language=julia-1.5>\n@time count_upper(\"\
    abcdefg\")\n</cell>\n<code language=julia-1.5>\n@time count_upper(\"dBBE\")\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of uppercase\
    \ vowels in a string.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi6ktriqz.jl:19\nin expression starting at\
    \ /tmp/tmpi6ktriqz.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            if\
    \ count_upper % 2 == 0\n                count_upper -= 1\n    return count_upper\n\
    end\n</cell>\n<code language=julia-1.4>\ncount_upper(\"aBCdEf\")\n</cell>\n<code\
    \ language=julia-1.4>\ncount_upper(\"abcdefg\")\n</cell>\n<code language=julia-1.4>\n\
    count_upper(\"dBBE\")\n</cell>\n<text>\nExercise\nWrite a function that returns\
    \ the number of uppercase vowels in a string.\nusing Test\n\n@testset begin\n\n\
    candidate = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"\
    abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\")\
    \ == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_cuvx7yl.jl:18\nin expression starting at\
    \ /tmp/tmp_cuvx7yl.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n        end\n \
    \   end\n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and\
    \ returns the number of vowels found in that string.\nusing Test\n\n@testset begin\n\
    \ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"\
    abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\")\
    \ == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp82fv2psy.jl:18\nin expression starting at\
    \ /tmp/tmp82fv2psy.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = Int64(0)\n\
    \    for x in s\n        if x \u2209 ['A'..'Z']\n            count_upper += 1\n\
    \        end\n    end\n    return count_upper\nend\n</cell>\n<code language=julia-1.3>\n\
    count_upper(\"aBCdEf\")\n</cell>\n<code language=julia-1.3>\ncount_upper(\"abcdefg\"\
    )\n</cell>\n<code language=julia-1.3>\ncount_upper(\"dBBE\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of vowels\
    \ found in it.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpph9amorf.jl:18\nin expression starting at\
    \ /tmp/tmpph9amorf.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper(s,0)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpnmlnfo1f.jl:17\\n  Test threw\
    \ exception\\n  Expression: candidate(\"aBCdEf\") == 1\\n  MethodError: no method\
    \ matching count_upper(::String, ::Int64)\\n  Closest candidates are:\\n    count_upper(::String)\
    \ at /tmp/tmpnmlnfo1f.jl:9\\n  Stacktrace:\\n   [1] count_upper(s::String)\\n\
    \     @ Main /tmp/tmpnmlnfo1f.jl:10\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpnmlnfo1f.jl:17 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpnmlnfo1f.jl:16\\ntest set:\
    \ Error During Test at /tmp/tmpnmlnfo1f.jl:18\\n  Test threw exception\\n  Expression:\
    \ candidate(\"abcdefg\") == 0\\n  MethodError: no method matching count_upper(::String,\
    \ ::Int64)\\n  Closest candidates are:\\n    count_upper(::String) at /tmp/tmpnmlnfo1f.jl:9\\\
    n  Stacktrace:\\n   [1] count_upper(s::String)\\n     @ Main /tmp/tmpnmlnfo1f.jl:10\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpnmlnfo1f.jl:18 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpnmlnfo1f.jl:16\\ntest set:\
    \ Error During Test at /tmp/tmpnmlnfo1f.jl:19\\n  Test threw exception\\n  Expression:\
    \ candidate(\"dBBE\") == 0\\n  MethodError: no method matching count_upper(::String,\
    \ ::Int64)\\n  Closest candidates are:\\n    count_upper(::String) at /tmp/tmpnmlnfo1f.jl:9\\\
    n  Stacktrace:\\n   [1] count_upper(s::String)\\n     @ Main /tmp/tmpnmlnfo1f.jl:10\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpnmlnfo1f.jl:19 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n        else\n\
    \            count_upper\n    end\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the number of uppercase letters in a string.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\"\
    ) == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") ==\
    \ 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2gada1tp.jl:18\nin expression starting at\
    \ /tmp/tmp2gada1tp.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = sum(map(is_upper,\
    \ s))\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"aBCdEf\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"dBBE\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string and returns the number of vowels found in it.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"\
    abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\")\
    \ == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1uo2qzx7.jl:12\nin expression starting at\
    \ /tmp/tmp1uo2qzx7.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            if\
    \ count_upper % 2 == 0\n                count_upper -= 1\n    return count_upper\n\
    end\n</cell>\n<code language=julia-1.5>\ncount_upper(\"aBCdEf\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"dBBE\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string and returns the number of vowels found in it.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"\
    abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\")\
    \ == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi59q1pmq.jl:18\nin expression starting at\
    \ /tmp/tmpi59q1pmq.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n        end\n \
    \   end\n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of uppercase vowels in each word of a\
    \ string.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt173znfm.jl:18\nin expression starting at\
    \ /tmp/tmpt173znfm.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            if\
    \ count_upper % 2 == 0\n                count_upper -= 1\n    return count_upper\n\
    end\n</cell>\n<code language=julia-1.4>\ncount_upper(\"aBCdEf\")\n</cell>\n<code\
    \ language=julia-1.4>\ncount_upper(\"abcdefg\")\n</cell>\n<code language=julia-1.4>\n\
    count_upper(\"dBBE\")\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of uppercase vowels in a string.\nusing Test\n\n@testset begin\n\n\
    candidate = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"\
    abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\")\
    \ == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp91j160ep.jl:18\nin expression starting at\
    \ /tmp/tmp91j160ep.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = if even?\
    \ s then 0 else 1\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"aBCdEf\"\
    )\n</cell>\n<text>\nExercise 3\nWrite a function that counts the number of uppercase\
    \ vowels in a string.\nThe function should take a string as an argument and return\
    \ the number of uppercase vowels.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\"\
    ) == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t\
    @test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space required before \"?\" operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1tzchm06.jl:10\nin expression starting at\
    \ /tmp/tmp1tzchm06.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count = 0\n    for c in\
    \ s\n        if isupper(c)\n            count += 1\n            \n    return count\n\
    end\n</cell>\n<code language=julia-1.5>\ncount_upper(\"aBCdEf\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"dBBE\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns the number of vowels contained in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") ==\
    \ 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\
    \t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzbwzh661.jl:17\nin expression starting at\
    \ /tmp/tmpzbwzh661.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            \n\
    \    return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a string and returns the number of vowels found in\
    \ it.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppyfn5k7u.jl:17\nin expression starting at\
    \ /tmp/tmppyfn5k7u.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count = 0\n    for c in\
    \ s\n        if isupper(c)\n            count += 1\n    return count\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\"\
    ) == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") ==\
    \ 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpcpooppi9.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcpooppi9.jl:1\n\
    in expression starting at /tmp/tmpcpooppi9.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            \n\
    \    return count_upper\nend\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpa0i3g39t.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpa0i3g39t.jl:1\n\
    in expression starting at /tmp/tmpa0i3g39t.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n        end\n \
    \   end\n    return count_upper\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\"\
    ) == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t\
    @test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp8b669789.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"aBCdEf\") == 1\n  UndefVarError: isupper not defined\n\
    \  Stacktrace:\n   [1] count_upper(s::String)\n     @ Main /tmp/tmp8b669789.jl:12\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8b669789.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8b669789.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp8b669789.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdefg\") == 0\n  UndefVarError: isupper not defined\n  Stacktrace:\n\
    \   [1] count_upper(s::String)\n     @ Main /tmp/tmp8b669789.jl:12\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8b669789.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8b669789.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp8b669789.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"dBBE\") == 0\n  UndefVarError: isupper not defined\n  Stacktrace:\n\
    \   [1] count_upper(s::String)\n     @ Main /tmp/tmp8b669789.jl:12\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8b669789.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8b669789.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp8b669789.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"B\") == 0\n  UndefVarError: isupper not defined\n  Stacktrace:\n\
    \   [1] count_upper(s::String)\n     @ Main /tmp/tmp8b669789.jl:12\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.j"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8b669789.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            if\
    \ count_upper % 2 == 0\n                count_upper -= 1\n    return count_upper\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuj7yhj1j.jl:1\nin expression starting at /tmp/tmpuj7yhj1j.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ i in 0..length(s)\n        if s[i] == 'A' || s[i] == 'a' || s[i] == 'E' || s[i]\
    \ == 'e' || s[i] == 'I' || s[i] == 'i' || s[i] == 'O' || s[i] == 'o' || s[i] ==\
    \ 'U' || s[i] == 'u'\n            count_upper = count_upper + 1\n        end\n\
    \    end\n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns the number of vowels contained\
    \ in the string. \nThe vowels are \"a\", \"e\", \"i\", \"o\", and \"u\". \nThe\
    \ function should ignore all other characters.\nFor example, count_vowels(\"aBCdEf\"\
    ) returns 3.\nHint: Use a for loop to iterate over the string.\nusing Test\n\n\
    @testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\
    \t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"\
    B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t\
    @test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj7uzczdl.jl:18\nin expression starting at\
    \ /tmp/tmpj7uzczdl.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    \n    count = 0\n    for\
    \ c in s\n        if isupper(c)\n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"aBCdEf\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that counts the number of uppercase vowels in a string.\nusing Test\n\
    \n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") ==\
    \ 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\
    \t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz04tk2c6.jl:19\nin expression starting at\
    \ /tmp/tmpz04tk2c6.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            \n\
    \    return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns the number of vowels \nin the\
    \ string.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7th5r27z.jl:17\nin expression starting at\
    \ /tmp/tmp7th5r27z.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    \n    count = 0\n    for\
    \ c in s\n        if isupper(c)\n            count += 1\n            \n    return\
    \ count\n</cell>\n<code language=julia-1.5>\ncount_upper(\"aBCdEf\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"dBBE\")\n</cell>\n<text>\nExercise\nWrite a function that counts\
    \ the number of uppercase vowels in a string s.\nusing Test\n\n@testset begin\n\
    \ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"\
    abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\")\
    \ == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoo2rfau6.jl:17\nin expression starting at\
    \ /tmp/tmpoo2rfau6.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    \n    count = 0\n    for\
    \ c in s\n        if isupper(c)\n            count += 1\n            \n    return\
    \ count\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"aBCdEf\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of uppercase letters\
    \ in a string.\nFor example, count_upper(\"aBCdEf\") returns 3.\nusing Test\n\n\
    @testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\
    \t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"\
    B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t\
    @test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4szcusva.jl:18\nin expression starting at\
    \ /tmp/tmp4szcusva.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            \n\
    \    return count_upper\nend\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpc774_sun.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpc774_sun.jl:1\n\
    in expression starting at /tmp/tmpc774_sun.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count = 0\n    for c in\
    \ s\n        if isupper(c)\n            count += 1\n            \n    return count\n\
    end\n</cell>\n<code language=julia-1.5>\ncount_upper(\"aBCdEf\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"dBBE\")\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of uppercase vowels in a string.\nusing Test\n\n@testset begin\n\n\
    candidate = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"\
    abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\")\
    \ == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe_6_uth5.jl:17\nin expression starting at\
    \ /tmp/tmpe_6_uth5.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    \n    count_upper = 0\n\
    \    \n    for c in s\n        if isupper(c)\n            count_upper += 1\n \
    \           \n            if count_upper % 2 == 0\n                return count_upper\n\
    \            \n        end\n    end\n    \n    return count_upper\nend\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"aBCdEf\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"abcdefg\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"dBBE\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of vowels found in it.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\"\
    ) == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t\
    @test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc9h4hqu1.jl:25\nin expression starting at\
    \ /tmp/tmpc9h4hqu1.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            \n\
    \    return count_upper\nend\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpxkh0wf3h.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxkh0wf3h.jl:1\n\
    in expression starting at /tmp/tmpxkh0wf3h.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    \n    count_upper = zeros(Int,\
    \ length(s))\n    for (i,c) in enumerate(s)\n        if isupper(c)\n         \
    \   count_upper[i] = count_upper[i] + 1\n        end\n    end\n    return count_upper\n\
    end\n</cell>\n<code language=julia-1.5>\ncount_upper(\"aBCdEf\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"dBBE\")\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of uppercase vowels in each word of a string.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"\
    abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\")\
    \ == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp005ibk4_.jl:19\nin expression starting at\
    \ /tmp/tmp005ibk4_.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            \n\
    \    return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a string and returns the number of uppercase vowels\
    \ in each word in the string.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0cd1rda4.jl:17\nin expression starting at\
    \ /tmp/tmp0cd1rda4.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if c == 'A' or c == 'E' or c == 'I' or c == 'O' or c == 'U'\n\
    \            count_upper += 1\n        end\n    end\n    return count_upper\n\
    end\n</cell>\n<code language=julia-1.4>\ncount_upper(\"aBCdEf\")\n</cell>\n<code\
    \ language=julia-1.4>\ncount_upper(\"abcdefg\")\n</cell>\n<code language=julia-1.4>\n\
    count_upper(\"dBBE\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns the number of vowels \nin the string. \nThe function should\
    \ ignore all non-vowel characters. \nThe function should ignore uppercase letters.\n\
    The function should ignore lowercase letters.\nThe function should ignore non-alphabetic\
    \ characters.\nThe function should ignore non-alphabetic characters in quotes.\n\
    The function should ignore non-alphabetic characters in brackets.\nThe function\
    \ should ignore non-alphabetic characters in braces.\nThe function should ignore\
    \ non-alphabetic characters in parentheses.\nThe function should ignore non-alphabetic\
    \ characters in square brackets.\nThe function should ignore non-alphabetic characters\
    \ in curly braces.\nThe function should ignore non-alphabetic characters in parentheses.\n\
    The function should ignore non-alphabetic characters in square brackets.\nThe\
    \ function should ignore non-alphabetic characters in curly braces.\nThe function\
    \ should ignore non-alphabetic characters in parentheses.\nThe function should\
    \ ignore non-alphabetic characters in square brackets.\nThe function should ignore\
    \ non-alphabetic characters in curly braces.\nThe function should ignore non-alphabetic\
    \ characters in parentheses.\nThe function should ignore non-alphabetic characters\
    \ in square brackets.\nThe function should ignore non-alphabetic characters in\
    \ curly braces.\nThe function should ignore non-alphabetic characters in parentheses.\n\
    The function should ignore non-alphabetic characters in square brackets.\nThe\
    \ function should ignore non-alphabetic characters in curly braces.\nThe function\
    \ should ignore non-alphabetic characters in parentheses.\nThe function should\
    \ ignore non-alphabetic characters in square brackets.\nThe function should ignore\
    \ non-alphabetic characters in curly braces.\nThe function should ignore non-alphabetic\
    \ characters in parentheses.\nThe function should ignore non-alphabetic characters\
    \ in square brackets.\nThe function should ignore non-alphabetic characters in\
    \ curly braces.\nThe function should ignore non-alphabetic characters in parentheses.\n\
    The \nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"c\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpn4d7kg1v.jl:12\nin expression starting at /tmp/tmpn4d7kg1v.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n        end\n \
    \   end\n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the number of uppercase letters in a string.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\"\
    ) == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") ==\
    \ 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk9z4hh3a.jl:18\nin expression starting at\
    \ /tmp/tmpk9z4hh3a.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n        end\n \
    \   end\n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns the number of vowels present\
    \ in the string.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t\
    @test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"\
    dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6smjbv06.jl:18\nin expression starting at\
    \ /tmp/tmp6smjbv06.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            if\
    \ count_upper % 2 == 0\n                count_upper -= 1\n    return count_upper\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2vnth9hz.jl:1\nin expression starting at /tmp/tmp2vnth9hz.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ i in 0 .. length(s)-1 do\n        if s[i] == 'A' || s[i] == 'a' then\n     \
    \       count_upper += 1\n        elseif s[i] == 'B' || s[i] == 'b' then\n   \
    \         count_upper += 1\n        elseif s[i] == 'C' || s[i] == 'c' then\n \
    \           count_upper += 1\n        elseif s[i] == 'D' || s[i] == 'd' then\n\
    \            count_upper += 1\n        elseif s[i] == 'E' || s[i] == 'e' then\n\
    \            count_upper += 1\n        elseif s[i] == 'F' || s[i] == 'f' then\n\
    \            count_upper += 1\n        elseif s[i] == 'G' || s[i] == 'g' then\n\
    \            count_upper += 1\n        elseif s[i] == 'H' || s[i] == 'h' then\n\
    \            count_upper += 1\n        elseif s[i] == 'I' || s[i] == 'i' then\n\
    \            count_upper += 1\n        elseif s[i] == 'J' || s[i] == 'j' then\n\
    \            count_upper += 1\n        elseif s[i] == 'K' || s[i] == 'k' then\n\
    \            count_upper += 1\n        elseif s[i] == 'L' || s[i] == 'l' then\n\
    \            count_upper += 1\n        elseif s[i] == 'M' || s[i] == 'm' then\n\
    \            count_upper += 1\n        elseif s[i] == 'N' || s[i] == 'n' then\n\
    \            count_upper += 1\n        elseif s[i] == 'O' || s[i] == 'o' then\n\
    \            count_upper += 1\n        elseif s[i] == 'P' || s[i] == 'p' then\n\
    \            count_upper += 1\n        elseif s[i] == 'Q' || s[i] == 'q' then\n\
    \            count_upper += 1\n        elseif s[i] == 'R' || s[i] == 'r' then\n\
    \            count_upper += 1\n        elseif s[i] == 'S' || s[i] == 's' then\n\
    \            count_upper += 1\n        elseif s[i] == 'T' || s[i] == 't' then\n\
    \            count_upper += 1\n        elseif s[i] == 'U' || s[i] == 'u' then\n\
    \            count_upper += 1\n        elseif s[i] == 'V' || s[i] == 'v' then\n\
    \            count_upper += 1\n        elseif s[i] == 'W' || s[i] == 'w' then\n\
    \            count_upper += 1\n        elseif s[i] == 'X' || s[i] == 'x' then\n\
    \            count_upper += 1\n        elseif s[i] == 'Y' || s[i] == 'y' then\n\
    \            count_upper += 1\n        elseif s[i] == 'Z' || s[i] == 'z' then\n\
    \            count_upper += 1\n        end\n    end\n    return count_upper\n\
    end\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Given a string s, count the\
    \ number of uppercase vowels in odd indices.\n    \n    For example:\n    count_upper('aBCdEf')\
    \ returns 3\n    count_upper('abcdefg') returns \nusing Test\n\n@testset begin\n\
    \ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"\
    abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\")\
    \ == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5fp7tmzf.jl:11\nin expression starting at /tmp/tmp5fp7tmzf.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count = 0\n    for c in\
    \ s\n        if isupper(c)\n            count += 1\n            \n    return count\n\
    </cell>\n<code language=julia-1.5>\ncount_upper(\"aBCdEf\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of uppercase letters in a\
    \ string.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3110s31f.jl:16\nin expression starting at\
    \ /tmp/tmp3110s31f.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if c == 'A' or c == 'E' or c == 'I' or c == 'O' or c == 'U'\n\
    \            count_upper += 1\n        end\n    end\n    return count_upper\n\
    end\n</cell>\n<code language=julia-1.5>\ncount_upper(\"aBCdEf\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"dBBE\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns the number of vowels \nin the string. \nFor example count_vowels(\"\
    aBCdEf\") returns 3.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"c\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpjvqe_l18.jl:12\nin expression starting at /tmp/tmpjvqe_l18.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    \n    count = 0\n    for\
    \ c in s\n        if isupper(c)\n            count += 1\n            \n    return\
    \ count\nend\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpcf7gflhc.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcf7gflhc.jl:1\n\
    in expression starting at /tmp/tmpcf7gflhc.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    \n    count = 0\n    for\
    \ c in s\n        if isupper(c)\n            count += 1\n            \n    return\
    \ count\n</cell>\n<code language=julia-1.4>\ncount_upper(\"aBCdEf\")\n</cell>\n\
    <code language=julia-1.4>\ncount_upper(\"abcdefg\")\n</cell>\n<code language=julia-1.4>\n\
    count_upper(\"dBBE\")\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of uppercase vowels in a string.\nusing Test\n\n@testset begin\n\n\
    candidate = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"\
    abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\")\
    \ == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt8dqn0a1.jl:17\nin expression starting at\
    \ /tmp/tmpt8dqn0a1.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    \n    count_upper = 0\n\
    \    \n    for i in 0..(length(s)-2) do\n        if s[i] == 'A' or s[i] == 'a'\
    \ then\n            count_upper = count_upper + 1\n        elseif s[i] == 'B'\
    \ or s[i] == 'b' then\n            count_upper = count_upper + 1\n        elseif\
    \ s[i] == 'C' or s[i] == 'c' then\n            count_upper = count_upper + 1\n\
    \        elseif s[i] == 'D' or s[i] == 'd' then\n            count_upper = count_upper\
    \ + 1\n        elseif s[i] == 'E' or s[i] == 'e' then\n            count_upper\
    \ = count_upper + 1\n        elseif s[i] == 'F' or s[i] == 'f' then\n        \
    \    count_upper = count_upper + 1\n        elseif s[i] == 'G' or s[i] == 'g'\
    \ then\n            count_upper = count_upper + 1\n        elseif s[i] == 'H'\
    \ or s[i] == 'h' then\n            count_upper = count_upper + 1\n        elseif\
    \ s[i] == 'I' or s[i] == 'i' then\n            count_upper = count_upper + 1\n\
    \        elseif s[i] == 'J' or s[i] == 'j' then\n            count_upper = count_upper\
    \ + 1\n        elseif s[i] == 'K' or s[i] == 'k' then\n            count_upper\
    \ = count_upper + 1\n        elseif s[i] == 'L' or s[i] == 'l' then\n        \
    \    count_upper = count_upper + 1\n        elseif s[i] == 'M' or s[i] == 'm'\
    \ then\n            count_upper = count_upper + 1\n        elseif s[i] == 'N'\
    \ or s[i] == 'n' then\n            count_upper = count_upper + 1\n        elseif\
    \ s[i] == 'O' or s[i] == 'o' then\n            count_upper = count_upper + 1\n\
    \        elseif s[i] == 'P' or s[i] == 'p' then\n            count_upper = count_upper\
    \ + 1\n        elseif s[i] == 'Q' or s[i] == 'q' then\n            count_upper\
    \ = count_upper + 1\n        elseif s[i] == 'R' or s[i] == 'r' then\n        \
    \    count_upper = count_upper + 1\n        elseif s[i] == 'S' or s[i] == 's'\
    \ then\n            count_upper = count_upper + 1\n        elseif s[i] == 'T'\
    \ or s[i] == 't' then\n            count_upper = count_upper + 1\n        elseif\
    \ s[i] == 'U' or s[i] == 'u' then\n            count_upper = count_upper + 1\n\
    \        elseif s[i] == 'V' or s[i] == 'v' then\n            count_upper = count_upper\
    \ + 1\n        elseif s[i] == 'W' or s[i] == 'w' then\n            count_upper\
    \ = count_upper + 1\n        elseif s[i] == 'X' or s[i] == 'x' then\n        \
    \    count_upper = count_upper + 1\n        elseif s[i] == 'Y' or s[i] == 'y'\
    \ then\n            count_upper\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpb3j8ue8e.jl:13\nin expression starting at /tmp/tmpb3j8ue8e.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ i in 0..(length(s)-2) do\n        if s[i] == 'A' && s[i+1] == 'B' && s[i+2]\
    \ == 'C' then\n            count_upper = count_upper + 1\n        end\n    end\n\
    \    return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a string and returns the number of vowels (a, e, i,\
    \ o, u) in that string.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8ci0w9qw.jl:11\nin expression starting at /tmp/tmp8ci0w9qw.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count = 0\n    for c in\
    \ s\n        if isupper(c)\n            count += 1\n        end\n    end\n   \
    \ return count\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"aBCdEf\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the number of uppercase vowels in a string.\nusing Test\n\
    \n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") ==\
    \ 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\
    \t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzctiqn2c.jl:18\nin expression starting at\
    \ /tmp/tmpzctiqn2c.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U'\n\
    \            count_upper += 1\n        end\n    end\n    return count_upper\n\
    end\n</cell>\n<code language=julia-1.5>\ncount_upper(\"aBCdEf\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"dBBE\")\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of uppercase vowels in a string.\nWrite a function that returns the\
    \ number of uppercase vowels in a string and counts the number of uppercase vowels\
    \ in even indices.\nWrite a function that returns the number of uppercase vowels\
    \ in a string and counts the number of uppercase vowels in even indices and returns\
    \ the sum.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjktloi8r.jl:18\nin expression starting at\
    \ /tmp/tmpjktloi8r.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ i in 0..(length(s) - 1)\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I'\
    \ || s[i] == 'O' || s[i] == 'U'\n            count_upper += 1\n        end\n \
    \   end\n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a string and returns the number of vowels contained\
    \ in the string.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t\
    @test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"\
    dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplmut3dup.jl:18\nin expression starting at\
    \ /tmp/tmplmut3dup.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count = 0\n    for c in\
    \ s\n        if isupper(c)\n            count += 1\n            \n    return count\n\
    </cell>\n<code language=julia-1.5>\ncount_upper(\"aBCdEf\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of uppercase letters in a\
    \ string.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptu0_w8qg.jl:16\nin expression starting at\
    \ /tmp/tmptu0_w8qg.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            \n\
    \    return count_upper\nend\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpzwzjpqj8.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzwzjpqj8.jl:1\n\
    in expression starting at /tmp/tmpzwzjpqj8.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count = 0\n    for c in\
    \ s\n        if isupper(c)\n            count += 1\n    return count\nend\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"aBCdEf\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"abcdefg\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"dBBE\"\
    )\n</cell>\n<text>\nExercise: Write a function that returns the number of uppercase\
    \ letters in a string.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp21601qyc.jl:16\nin expression starting at\
    \ /tmp/tmp21601qyc.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            \n\
    \    return count_upper\nend\n</cell>\n<code language=julia-1.4>\n# Test count_upper\n\
    @test count_upper(\"aBCdEf\") == 1\n@test count_upper(\"abcdefg\") == 0 \n@test\
    \ count_upper(\"dBBE\") == 0 \n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the number of uppercase vowels in each word of a string.\nusing Test\n\
    \n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") ==\
    \ 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\
    \t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1v6fojrz.jl:17\nin expression starting at\
    \ /tmp/tmp1v6fojrz.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count = 0\n    for c in\
    \ s\n        if isupper(c)\n            count += 1\n            \n    return count\n\
    </cell>\n<code language=julia-1.5>\ncount_upper(\"aBCdEf\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"abcdefg\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"dBBE\"\
    )\n</cell>\n<text>\nExercise: Write a function that counts the number of uppercase\
    \ vowels in each word of a string.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\"\
    ) == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t\
    @test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp36om68r8.jl:16\nin expression starting at\
    \ /tmp/tmp36om68r8.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            \n\
    \    return count_upper\nend\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpvgt71z42.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvgt71z42.jl:1\n\
    in expression starting at /tmp/tmpvgt71z42.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n        end\n \
    \   end\n    return count_upper\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\"\
    ) == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t\
    @test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpie3rjncz.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"aBCdEf\") == 1\n  UndefVarError: isupper not defined\n\
    \  Stacktrace:\n   [1] count_upper(s::String)\n     @ Main /tmp/tmpie3rjncz.jl:12\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpie3rjncz.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpie3rjncz.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpie3rjncz.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdefg\") == 0\n  UndefVarError: isupper not defined\n  Stacktrace:\n\
    \   [1] count_upper(s::String)\n     @ Main /tmp/tmpie3rjncz.jl:12\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpie3rjncz.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpie3rjncz.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpie3rjncz.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"dBBE\") == 0\n  UndefVarError: isupper not defined\n  Stacktrace:\n\
    \   [1] count_upper(s::String)\n     @ Main /tmp/tmpie3rjncz.jl:12\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpie3rjncz.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpie3rjncz.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpie3rjncz.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"B\") == 0\n  UndefVarError: isupper not defined\n  Stacktrace:\n\
    \   [1] count_upper(s::String)\n     @ Main /tmp/tmpie3rjncz.jl:12\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.j"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpie3rjncz.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    \n    count_upper = 0\n\
    \    \n    for i in 0..(length(s)-2) do \n        if s[i] == 'A' && s[i+1] ==\
    \ 'B' && s[i+2] == 'C' \n            count_upper += 1 \n        else if s[i] ==\
    \ 'a' && s[i+1] == 'b' && s[i+2] == 'c' \n            count_upper += 1 \n    \
    \    else if s[i] == 'd' && s[i+1] == 'b' && s[i+2] == 'e' \n            count_upper\
    \ += 1 \n        else if s[i] == 'D' && s[i+1] == 'B' && s[i+2] == 'E' \n    \
    \        count_upper += 1 \n        else if s[i] == 'd' && s[i+1] == 'b' && s[i+2]\
    \ == 'e' \n            count_upper += 1 \n        else if s[i] == 'e' && s[i+1]\
    \ == 'f' && s[i+2] == 'g' \n            count_upper += 1 \n        else if s[i]\
    \ == 'e' && s[i+1] == 'f' && s[i+2] == 'g' \n            count_upper += 1 \n \
    \       else if s[i] == 'e' && s[i+1] == 'f' && s[i+2] == 'g' \n            count_upper\
    \ += 1 \n        else if s[i] == 'e' && s[i+1] == 'f' && s[i+2] == 'g' \n    \
    \        count_upper += 1 \n        else if s[i] == 'e' && s[i+1] == 'f' && s[i+2]\
    \ == 'g' \n            count_upper += 1 \n        else if s[i] == 'e' && s[i+1]\
    \ == 'f' && s[i+2] == 'g' \n            count_upper += 1 \n        else if s[i]\
    \ == 'e' && s[i+1] == 'f' && s[i+2] == 'g' \n            count_upper += 1 \n \
    \       else if s[i] == 'e' && s[i+1] == 'f' && s[i+2] == 'g' \n            count_upper\
    \ += 1 \n        else if s[i] == 'e' && s[i+1] == 'f' && s[i+2] == 'g' \n    \
    \        count_upper += 1 \n        else if s[i] == 'e' && s[i+1] == 'f' && s[i+2]\
    \ == 'g' \n            count_upper += 1 \n        else if s[i] == 'e' && s[i+1]\
    \ == 'f' && s[i+2] == 'g' \n            count_upper += 1 \n        else if s[i]\
    \ == 'e' && s[i+1] == 'f' && s[i+2] == 'g' \n            count_upper += 1 \n \
    \       else if s[i] == 'e' && s[i+1] == 'f' && s[i+2] == 'g' \n            count_upper\
    \ += 1 \n        else if s[i] == 'e' && s[i+1] == 'f' && s[i+2] == 'g' \n    \
    \        count_upper += 1 \n        else if s[i] == 'e' && s[i+1] == 'f' && s[i+2]\
    \ == 'g' \n            count_upper += 1 \n        else if s[i] == 'e' && s[i+1]\
    \ == 'f' && s[i+2]\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmplm56tkhm.jl:13\nin expression starting at /tmp/tmplm56tkhm.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if c == 'A' || c == 'a' || c == 'E' || c == 'e' || c == 'I'\
    \ || c == 'i' || c == 'O' || c == 'o' || c == 'U' || c == 'u'\n            count_upper\
    \ += 1\n        end\n    end\n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"aBCdEf\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of uppercase vowels in a\
    \ string.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7sj9dk17.jl:18\nin expression starting at\
    \ /tmp/tmp7sj9dk17.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count = 0\n    for c in\
    \ s\n        if isupper(c)\n            count += 1\n    return count\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\"\
    ) == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") ==\
    \ 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpu6zxmd5s.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu6zxmd5s.jl:1\n\
    in expression starting at /tmp/tmpu6zxmd5s.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n        else\n\
    \            count_upper = 0\n    end\n    return count_upper\nend\n</cell>\n\
    <code language=julia-1.4>\ncount_upper(\"aBCdEf\")\n</cell>\n<code language=julia-1.4>\n\
    count_upper(\"abcdefg\")\n</cell>\n<code language=julia-1.4>\ncount_upper(\"dBBE\"\
    )\n</cell>\n<text>\nExercise\nWrite a function that returns the number of uppercase\
    \ vowels in a string. \nWrite a function that returns the number of uppercase\
    \ vowels in an array. \nWrite a function that returns the number of uppercase\
    \ vowels in a string.\nWrite a function that returns the number of uppercase vowels\
    \ in an array.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpobaaj7hg.jl:19\nin expression starting at\
    \ /tmp/tmpobaaj7hg.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n        end\n \
    \   end\n    return count_upper\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\"\
    ) == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t\
    @test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp0z1mtk_r.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"aBCdEf\") == 1\n  UndefVarError: isupper not defined\n\
    \  Stacktrace:\n   [1] count_upper(s::String)\n     @ Main /tmp/tmp0z1mtk_r.jl:12\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0z1mtk_r.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0z1mtk_r.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp0z1mtk_r.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdefg\") == 0\n  UndefVarError: isupper not defined\n  Stacktrace:\n\
    \   [1] count_upper(s::String)\n     @ Main /tmp/tmp0z1mtk_r.jl:12\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0z1mtk_r.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0z1mtk_r.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp0z1mtk_r.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"dBBE\") == 0\n  UndefVarError: isupper not defined\n  Stacktrace:\n\
    \   [1] count_upper(s::String)\n     @ Main /tmp/tmp0z1mtk_r.jl:12\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0z1mtk_r.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0z1mtk_r.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp0z1mtk_r.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"B\") == 0\n  UndefVarError: isupper not defined\n  Stacktrace:\n\
    \   [1] count_upper(s::String)\n     @ Main /tmp/tmp0z1mtk_r.jl:12\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.j"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0z1mtk_r.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    \n    count = 0\n    for\
    \ c in s\n        if isupper(c)\n            count += 1\n            \n    return\
    \ count\n</cell>\n<code language=julia-1.5>\ncount_upper(\"aBCdEf\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"dBBE\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string and returns the number of vowels found in that string.\nusing Test\n\
    \n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") ==\
    \ 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\
    \t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcjfpyae4.jl:17\nin expression starting at\
    \ /tmp/tmpcjfpyae4.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n        end\n \
    \   end\n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a string and returns the number of vowels found in\
    \ it.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwctjyj1w.jl:18\nin expression starting at\
    \ /tmp/tmpwctjyj1w.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    \n    count_upper = 0\n\
    \    for c in s\n        if isupper(c)\n            count_upper += 1\n       \
    \ end\n    end\n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"aBCdEf\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of vowels\
    \ found in it.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaichmojk.jl:19\nin expression starting at\
    \ /tmp/tmpaichmojk.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n        end\n \
    \   end\n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of uppercase vowels in a string.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\"\
    ) == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") ==\
    \ 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpggu8s4fu.jl:18\nin expression starting at\
    \ /tmp/tmpggu8s4fu.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = if even?\
    \ index then 1 else 0 end\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<text>\nExercise 3\nWrite a function that counts the number\
    \ of uppercase vowels in a string.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\"\
    ) == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t\
    @test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space required before \"?\" operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe_qdnx9q.jl:10\nin expression starting at\
    \ /tmp/tmpe_qdnx9q.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = sum [ count_upper(s[i:i+2])\
    \ | i <- [0..length(s)] ]\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise: Write\
    \ a function that returns the number of uppercase vowels in a string.\nusing Test\n\
    \n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") ==\
    \ 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\
    \t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \"[\" not allowed in \"sum [\" at\
    \ /tmp/tmpe92kbkrt.jl:10\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpe92kbkrt.jl:10\n\
    in expression starting at /tmp/tmpe92kbkrt.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = Int64(0)\n\
    \    for x in s\n        if x \u2209 ['A'..'Z']\n            count_upper += 1\n\
    \        else\n            if x \u2208 ['A'..'Z']\n                if x \u2208\
    \ ['A'..'Z']\n                    count_upper += 1\n                else\n   \
    \                 if x \u2208 ['A'..'Z']\n                        if x \u2208\
    \ ['A'..'Z']\n                            count_upper += 1\n                 \
    \       else\n                            if x \u2208 ['A'..'Z']\n           \
    \                     if x \u2208 ['A'..'Z']\n                               \
    \     count_upper += 1\n                                else\n               \
    \                     if x \u2208 ['A'..'Z']\n                               \
    \         if x \u2208 ['A'..'Z']\n                                           \
    \ count_upper += 1\n                                        else\n           \
    \                                 if x \u2208 ['A'..'Z']\n                   \
    \                             if x \u2208 ['A'..'Z']\n                       \
    \                             count_upper += 1\n                             \
    \                   else\n                                                   \
    \ count_upper += 0\n                            else\n                       \
    \         count_upper += 0\n                    else\n                       \
    \ count_upper += 0\n            else\n                count_upper += 0\n    return\
    \ count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"aBCdEf\"\
    )\n</cell>\n<text>\nExercise 4\nWrite a function that counts the number of uppercase\
    \ vowels in a string. \nWrite a function that counts the number of uppercase vowels\
    \ in even indices in a string.\nWrite a function that counts the number of uppercase\
    \ vowels in odd indices in a string.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\"\
    ) == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t\
    @test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpbqi895rt.jl:32 expected \"\
    end\", got \"else\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbqi895rt.jl:36\n\
    in expression starting at /tmp/tmpbqi895rt.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count = 0\n    for c in\
    \ s\n        if isupper(c)\n            count += 1\n    return count\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"aBCdEf\")\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and returns the number of vowels found\
    \ in that string.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t\
    @test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"\
    dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_rvzj8v9.jl:15\nin expression starting at\
    \ /tmp/tmp_rvzj8v9.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ i in 0..(length(s)-2) do\n        if s[i] == 'A' and s[i+1] == 'B' and s[i+2]\
    \ == 'C' then\n            count_upper += 1\n        end\n    end\n    return\
    \ count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"aBCdEf\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the number of uppercase vowels in a string. \nFor example,\
    \ count_upper(\"aBCdEf\") returns 1.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\"\
    ) == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t\
    @test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpwrv9azkt.jl:11\nin expression starting at /tmp/tmpwrv9azkt.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n        else\n\
    \            count_upper\n    end\nend\n</cell>\n<code language=julia-1.4>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns the number of characters in the string that are uppercase letters.\n\
    using Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmm2e1dfj.jl:18\nin expression starting at\
    \ /tmp/tmpmm2e1dfj.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ i in 0 .. s.length-1\n        if s[i] == 'A' || s[i] == 'a' || s[i] == 'E' ||\
    \ s[i] == 'e' || s[i] == 'I' || s[i] == 'i' || s[i] == 'O' || s[i] == 'o' || s[i]\
    \ == 'U' || s[i] == 'u'\n            count_upper += 1\n        end\n    end\n\
    \    return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a string and returns the number of vowels ('a', 'e',\
    \ 'i', 'o', and 'u') in it.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp09m55d_j.jl:18\nin expression starting at\
    \ /tmp/tmp09m55d_j.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    \n    count = 0\n    for\
    \ c in s\n        if isupper(c)\n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"aBCdEf\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the number of uppercase vowels in a string.\nusing Test\n\
    \n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") ==\
    \ 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\
    \t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmgyxz9us.jl:19\nin expression starting at\
    \ /tmp/tmpmgyxz9us.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            \n\
    \    return count_upper\nend\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpngk1zojs.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpngk1zojs.jl:1\n\
    in expression starting at /tmp/tmpngk1zojs.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n        end\n \
    \   end\n    return count_upper\nend\n</cell>\n<code language=julia-1.4>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of uppercase vowels in a string.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\"\
    ) == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t\
    @test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphlphdybg.jl:18\nin expression starting at\
    \ /tmp/tmphlphdybg.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    \n    count_upper = 0\n\
    \    \n    for c in s\n        if isupper(c)\n            count_upper += 1\n \
    \           \n    return count_upper\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\"\
    ) == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t\
    @test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmps7uwvq2q.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps7uwvq2q.jl:1\n\
    in expression starting at /tmp/tmps7uwvq2q.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count = 0\n    for c in\
    \ s\n        if isupper(c)\n            count += 1\n    return count\nend\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"aBCdEf\")\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the number of uppercase vowels in a string.\
    \ \nFor example, count_upper(\"aBCdEf\") returns 1.\nusing Test\n\n@testset begin\n\
    \ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"\
    abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\")\
    \ == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppl2uu66a.jl:16\nin expression starting at\
    \ /tmp/tmppl2uu66a.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count = 0\n    for c in\
    \ s\n        if isupper(c)\n            count += 1\n            \n    return count\n\
    </cell>\n<code language=julia-1.5>\ncount_upper(\"aBCdEf\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"abcdefg\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"dBBE\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of vowels found in it.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\"\
    ) == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t\
    @test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqbe1d8rs.jl:16\nin expression starting at\
    \ /tmp/tmpqbe1d8rs.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            \n\
    \    return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a string and returns the number of uppercase letters\
    \ in the string.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t\
    @test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"\
    dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4y188u9w.jl:17\nin expression starting at\
    \ /tmp/tmp4y188u9w.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n        end\n \
    \   end\n    return count_upper\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\"\
    ) == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t\
    @test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp7igi4r9o.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"aBCdEf\") == 1\n  UndefVarError: isupper not defined\n\
    \  Stacktrace:\n   [1] count_upper(s::String)\n     @ Main /tmp/tmp7igi4r9o.jl:12\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7igi4r9o.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7igi4r9o.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp7igi4r9o.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdefg\") == 0\n  UndefVarError: isupper not defined\n  Stacktrace:\n\
    \   [1] count_upper(s::String)\n     @ Main /tmp/tmp7igi4r9o.jl:12\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7igi4r9o.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7igi4r9o.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp7igi4r9o.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"dBBE\") == 0\n  UndefVarError: isupper not defined\n  Stacktrace:\n\
    \   [1] count_upper(s::String)\n     @ Main /tmp/tmp7igi4r9o.jl:12\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7igi4r9o.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7igi4r9o.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp7igi4r9o.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"B\") == 0\n  UndefVarError: isupper not defined\n  Stacktrace:\n\
    \   [1] count_upper(s::String)\n     @ Main /tmp/tmp7igi4r9o.jl:12\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.j"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7igi4r9o.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count = 0\n    for c in\
    \ s\n        if isupper(c)\n            count += 1\n    return count\n</cell>\n\
    <code language=julia-1.3>\ncount_upper(\"aBCdEf\")\n</cell>\n<code language=julia-1.3>\n\
    count_upper(\"abcdefg\")\n</cell>\n<code language=julia-1.3>\ncount_upper(\"dBBE\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number of uppercase\
    \ vowels in a string.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp5n8rxf9.jl:15\nin expression starting at\
    \ /tmp/tmpp5n8rxf9.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = if even?\
    \ index then 1 else 0 end\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of uppercase vowels in a string. \nFor\
    \ example, count_upper(\"aBCdEf\") returns 1.\nusing Test\n\n@testset begin\n\n\
    candidate = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"\
    abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\")\
    \ == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space required before \"?\" operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpplsf9jgh.jl:10\nin expression starting at\
    \ /tmp/tmpplsf9jgh.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = if even?\
    \ s then 0 else 1\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"aBCdEf\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the number of uppercase vowels in a string.\nusing Test\n\
    \n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") ==\
    \ 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\
    \t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space required before \"?\" operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy0j1e06h.jl:10\nin expression starting at\
    \ /tmp/tmpy0j1e06h.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            \n\
    \    return count_upper\nend\n</cell>\n<code language=julia-1.4>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<code language=julia-1.4>\ncount_upper(\"abcdefg\")\n</cell>\n\
    <code language=julia-1.4>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a string and returns the number of uppercase letters.\n\
    using Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbbz10ezy.jl:17\nin expression starting at\
    \ /tmp/tmpbbz10ezy.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = Int64(0)\n\
    \    for c in s\n        if isupper(c)\n            count_upper += 1 \n      \
    \      \n    return count_upper\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\"\
    ) == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t\
    @test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpvp6rn8gc.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvp6rn8gc.jl:1\n\
    in expression starting at /tmp/tmpvp6rn8gc.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n        end\n \
    \   end\n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a string and returns the number of uppercase vowels\
    \ in each word in the string.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj514_gek.jl:18\nin expression starting at\
    \ /tmp/tmpj514_gek.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U'\n\
    \            count_upper += 1\n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"aBCdEf\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of times a substring appears\
    \ in a string.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg58ptb35.jl:16\nin expression starting at\
    \ /tmp/tmpg58ptb35.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            \n\
    \    return count_upper\nend\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmp8b7ie7fw.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8b7ie7fw.jl:1\n\
    in expression starting at /tmp/tmp8b7ie7fw.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            \n\
    \    return count_upper\nend\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpp2b9j7el.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpp2b9j7el.jl:1\n\
    in expression starting at /tmp/tmpp2b9j7el.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            \n\
    \    return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that counts the number of uppercase vowels in a string.\nWrite\
    \ a function that counts the number of uppercase vowels in a string and returns\
    \ the number of vowels.\nWrite a function that counts the number of uppercase\
    \ vowels in a string and returns the number of vowels.\nWrite a function that\
    \ counts the number of uppercase vowels in a string and returns the number of\
    \ vowels.\nWrite a function that counts the number of uppercase vowels in a string\
    \ and returns the number of vowels.\nWrite a function that counts the number of\
    \ uppercase vowels in a string and returns the number of vowels.\nWrite a function\
    \ that counts the number of uppercase vowels in a string and returns the number\
    \ of vowels.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3_0d4piv.jl:17\nin expression starting at\
    \ /tmp/tmp3_0d4piv.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    \n    count_upper = sum(map(is_upper,\
    \ s))\n    \nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"aBCdEf\")\n\
    </cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"dBBE\")\n</cell>\n<text>\nExercise\nWrite a function that takes\
    \ a string and returns the number of vowels found in that string.\nusing Test\n\
    \n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") ==\
    \ 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\
    \t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmx7oxnus.jl:14\nin expression starting at\
    \ /tmp/tmpmx7oxnus.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count = 0\n    for c in\
    \ s\n        if isupper(c)\n            count += 1\n            \n    return count\n\
    end\n</cell>\n<code language=julia-1.0>\ncount_upper(\"aBCdEf\")\n</cell>\n<code\
    \ language=julia-1.0>\ncount_upper(\"abcdefg\")\n</cell>\n<code language=julia-1.0>\n\
    count_upper(\"dBBE\")\n</cell>\n<text>\nExercise\nWrite a function that counts\
    \ the number of uppercase vowels in a string.\nusing Test\n\n@testset begin\n\n\
    candidate = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"\
    abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\")\
    \ == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkjwjf751.jl:17\nin expression starting at\
    \ /tmp/tmpkjwjf751.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = Int64(0)\n\
    \    for c in s\n        if isupper(c)\n            count_upper += 1\n       \
    \     \n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a string and returns the number of vowels contained\
    \ in the string.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t\
    @test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"\
    dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_kp33u26.jl:17\nin expression starting at\
    \ /tmp/tmp_kp33u26.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            \n\
    \    return count_upper\nend\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpw8umoi4y.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpw8umoi4y.jl:1\n\
    in expression starting at /tmp/tmpw8umoi4y.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count = 0\n    for c in\
    \ s\n        if isupper(c)\n            count += 1\n            \n    return count\n\
    </cell>\n<code language=julia-1.3>\ncount_upper(\"aBCdEf\")\n</cell>\n<code language=julia-1.3>\n\
    count_upper(\"abcdefg\")\n</cell>\n<code language=julia-1.3>\ncount_upper(\"dBBE\"\
    )\n</cell>\n<text>\nExercise: Write a function that returns the number of uppercase\
    \ vowels in a string.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkujr5l85.jl:16\nin expression starting at\
    \ /tmp/tmpkujr5l85.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count = 0\n    for c in\
    \ s\n        if isupper(c)\n            count += 1\n        end\n    end\n   \
    \ return count\nend\n</cell>\n<code language=julia-1.3>\ncount_upper(\"aBCdEf\"\
    )\n</cell>\n<code language=julia-1.3>\ncount_upper(\"abcdefg\")\n</cell>\n<code\
    \ language=julia-1.3>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a string and returns the number of characters in the string\
    \ that are not uppercase letters.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\"\
    ) == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t\
    @test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7lcyu25_.jl:18\nin expression starting at\
    \ /tmp/tmp7lcyu25_.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count = 0\n    for c in\
    \ s\n        if isupper(c)\n            count += 1\n    return count\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\"\
    ) == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") ==\
    \ 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmp5xzwoemh.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5xzwoemh.jl:1\n\
    in expression starting at /tmp/tmp5xzwoemh.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    \n    count_upper = 0\n\
    \    for c in s\n        if isupper(c)\n            count_upper += 1\n       \
    \ end\n    end\n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\n\
    # Test your function\n@test count_upper(\"aBCdEf\") == 1\n@test count_upper(\"\
    abcdefg\") == 0 \n@test count_upper(\"dBBE\") == 0 \n</cell>\n<text>\nFinally\
    \ we write a function that computes the Levenshtein distance between two strings.\
    \ Given two strings s and t, compute the minimum number of edits required to transform\
    \ s into t.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpawcgtihd.jl:19\nin expression starting at\
    \ /tmp/tmpawcgtihd.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            \n\
    \    return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a string and returns the number of uppercase vowels\
    \ in it.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpconkqx12.jl:17\nin expression starting at\
    \ /tmp/tmpconkqx12.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count = 0\n    for c in\
    \ s\n        if isupper(c)\n            count += 1\n            \n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmp7tko34cn.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7tko34cn.jl:1\n\
    in expression starting at /tmp/tmp7tko34cn.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            \n\
    \    return count_upper\nend\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpno8w3kge.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpno8w3kge.jl:1\n\
    in expression starting at /tmp/tmpno8w3kge.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            \n\
    \    return count_upper\nend\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmp8jyhkqv_.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8jyhkqv_.jl:1\n\
    in expression starting at /tmp/tmp8jyhkqv_.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count = 0\n    for c in\
    \ s\n        if isupper(c)\n            count += 1\n            \n    return count\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpd4v8xj5m.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpd4v8xj5m.jl:1\n\
    in expression starting at /tmp/tmpd4v8xj5m.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count = 0\n    for c in\
    \ s\n        if isupper(c)\n            count += 1\n            \n    return count\n\
    </cell>\n<code language=julia-1.5>\ncount_upper(\"aBCdEf\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"abcdefg\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"dBBE\"\
    )\n</cell>\n<text>\nExercise 3\nWrite a function that counts the number of uppercase\
    \ vowels in a string.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk1_4ojs9.jl:16\nin expression starting at\
    \ /tmp/tmpk1_4ojs9.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            \n\
    \    return count_upper\nend\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmp3pu7_8pi.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3pu7_8pi.jl:1\n\
    in expression starting at /tmp/tmp3pu7_8pi.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    \n    count_upper = 0\n\
    \    for c in s\n        if isupper(c)\n            count_upper += 1\n       \
    \     \n    return count_upper\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\"\
    ) == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t\
    @test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpoqcwzwqc.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoqcwzwqc.jl:1\n\
    in expression starting at /tmp/tmpoqcwzwqc.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    \n    count = 0\n    for\
    \ c in s\n        if isupper(c)\n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"aBCdEf\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a string and returns the number of vowels present in the\
    \ string.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe60jz5bb.jl:19\nin expression starting at\
    \ /tmp/tmpe60jz5bb.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper(s,0)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpy1fvekhg.jl:17\n  Test threw exception\n\
    \  Expression: candidate(\"aBCdEf\") == 1\n  MethodError: no method matching count_upper(::String,\
    \ ::Int64)\n  Closest candidates are:\n    count_upper(::String) at /tmp/tmpy1fvekhg.jl:9\n\
    \  Stacktrace:\n   [1] count_upper(s::String)\n     @ Main /tmp/tmpy1fvekhg.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy1fvekhg.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy1fvekhg.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpy1fvekhg.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdefg\") == 0\n  MethodError: no method matching count_upper(::String,\
    \ ::Int64)\n  Closest candidates are:\n    count_upper(::String) at /tmp/tmpy1fvekhg.jl:9\n\
    \  Stacktrace:\n   [1] count_upper(s::String)\n     @ Main /tmp/tmpy1fvekhg.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy1fvekhg.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy1fvekhg.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpy1fvekhg.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"dBBE\") == 0\n  MethodError: no method matching count_upper(::String,\
    \ ::Int64)\n  Closest candidates are:\n    count_upper(::String) at /tmp/tmpy1fvekhg.jl:9\n\
    \  Stacktrace:\n   [1] count_upper(s::String)\n     @ Main /tmp/tmpy1fvekhg.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy1fvekhg.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy1fvekhg.jl:16\ntest set:"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy1fvekhg.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            \n\
    \    return count_upper\nend\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmphj0psdia.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphj0psdia.jl:1\n\
    in expression starting at /tmp/tmphj0psdia.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n        end\n \
    \   end\n    return count_upper\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\"\
    ) == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t\
    @test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpvve9cs90.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"aBCdEf\") == 1\n  UndefVarError: isupper not defined\n\
    \  Stacktrace:\n   [1] count_upper(s::String)\n     @ Main /tmp/tmpvve9cs90.jl:12\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvve9cs90.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvve9cs90.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpvve9cs90.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdefg\") == 0\n  UndefVarError: isupper not defined\n  Stacktrace:\n\
    \   [1] count_upper(s::String)\n     @ Main /tmp/tmpvve9cs90.jl:12\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvve9cs90.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvve9cs90.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpvve9cs90.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"dBBE\") == 0\n  UndefVarError: isupper not defined\n  Stacktrace:\n\
    \   [1] count_upper(s::String)\n     @ Main /tmp/tmpvve9cs90.jl:12\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvve9cs90.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvve9cs90.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpvve9cs90.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"B\") == 0\n  UndefVarError: isupper not defined\n  Stacktrace:\n\
    \   [1] count_upper(s::String)\n     @ Main /tmp/tmpvve9cs90.jl:12\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.j"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvve9cs90.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            \n\
    \    return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<text>\nExercise 3\nWrite a function that returns the number\
    \ of uppercase vowels in a string.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\"\
    ) == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t\
    @test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu472eisu.jl:17\nin expression starting at\
    \ /tmp/tmpu472eisu.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count = 0\n    for c in\
    \ s\n        if isupper(c)\n            count += 1\n    return count\nend\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"aBCdEf\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"abcdefg\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"dBBE\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of vowels \nin the string.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\"\
    ) == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t\
    @test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmxh5ykwh.jl:16\nin expression starting at\
    \ /tmp/tmpmxh5ykwh.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count = 0\n    for c in\
    \ s\n        if isupper(c)\n            count += 1\n    return count\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\"\
    ) == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") ==\
    \ 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpoql9oghl.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoql9oghl.jl:1\n\
    in expression starting at /tmp/tmpoql9oghl.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n        end\n \
    \   end\n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a string and returns the number of vowels found in\
    \ it.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd1w6ot5f.jl:18\nin expression starting at\
    \ /tmp/tmpd1w6ot5f.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count = 0\n    for c in\
    \ s\n        if isupper(c)\n            count += 1\n        end\n    end\n   \
    \ return count\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"aBCdEf\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of vowels contained in\
    \ the string.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplxutqn5d.jl:18\nin expression starting at\
    \ /tmp/tmplxutqn5d.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    \n    count_upper = 0\n\
    \    for c in s\n        if isupper(c)\n            count_upper += 1\n       \
    \ end\n    end\n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"aBCdEf\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of uppercase vowels in s.\n\
    using Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3mp63sc9.jl:19\nin expression starting at\
    \ /tmp/tmp3mp63sc9.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    \n    count_upper = 0\n\
    \    for c in s\n        if isupper(c)\n            count_upper += 1\n       \
    \ end\n    end\n    return count_upper\nend\nusing Test\n\n@testset begin\n\n\
    candidate = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"\
    abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\")\
    \ == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpsoxu1pvk.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"aBCdEf\") == 1\n  UndefVarError: isupper not defined\n\
    \  Stacktrace:\n   [1] count_upper(s::String)\n     @ Main /tmp/tmpsoxu1pvk.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsoxu1pvk.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsoxu1pvk.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpsoxu1pvk.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdefg\") == 0\n  UndefVarError: isupper not defined\n  Stacktrace:\n\
    \   [1] count_upper(s::String)\n     @ Main /tmp/tmpsoxu1pvk.jl:13\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsoxu1pvk.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsoxu1pvk.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpsoxu1pvk.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"dBBE\") == 0\n  UndefVarError: isupper not defined\n  Stacktrace:\n\
    \   [1] count_upper(s::String)\n     @ Main /tmp/tmpsoxu1pvk.jl:13\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsoxu1pvk.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsoxu1pvk.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpsoxu1pvk.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"B\") == 0\n  UndefVarError: isupper not defined\n  Stacktrace:\n\
    \   [1] count_upper(s::String)\n     @ Main /tmp/tmpsoxu1pvk.jl:13\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.j"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsoxu1pvk.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count = 0\n    for c in\
    \ s\n        if isupper(c)\n            count += 1\n            \n    return count\n\
    end\n</cell>\n<code language=julia-1.4>\ncount_upper(\"aBCdEf\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of uppercase vowels in a\
    \ string.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp14y_gjm2.jl:17\nin expression starting at\
    \ /tmp/tmp14y_gjm2.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            \n\
    \    return count_upper\nend\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmp4o2jthtn.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4o2jthtn.jl:1\n\
    in expression starting at /tmp/tmp4o2jthtn.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            if\
    \ count_upper % 2 == 0\n                return count_upper\n        end\n    end\n\
    \    return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns the number of uppercase vowels\
    \ in each word in the string.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxxbzk5dz.jl:20\nin expression starting at\
    \ /tmp/tmpxxbzk5dz.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n        end\n \
    \   end\n    return count_upper\nend\n</cell>\n<code language=julia-1.0>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of uppercase vowels in a string.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\"\
    ) == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t\
    @test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgruo7c1a.jl:18\nin expression starting at\
    \ /tmp/tmpgruo7c1a.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    \n    count = 0\n    for\
    \ c in s\n        if isupper(c)\n            count += 1\n            \n    return\
    \ count\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"aBCdEf\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"dBBE\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string and returns the number of vowels found in that string.\nusing Test\n\
    \n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") ==\
    \ 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\
    \t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1rhpuaoy.jl:18\nin expression starting at\
    \ /tmp/tmp1rhpuaoy.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ i in 0..(length(s)-2) do \n        if s[i] == 'A' || s[i] == 'a' || s[i] ==\
    \ 'E' || s[i] == 'e' || s[i] == 'I' || s[i] == 'i' || s[i] == 'O' || s[i] == 'o'\
    \ || s[i] == 'U' || s[i] == 'u' \n        then count_upper = count_upper + 1\n\
    \        else if s[i] == 'B' || s[i] == 'b' || s[i] == 'C' || s[i] == 'c' || s[i]\
    \ == 'D' || s[i] == 'd' || s[i] == 'F' || s[i] == 'f' || s[i] == 'G' || s[i] ==\
    \ 'g' \n        then count_upper = count_upper + 1\n        else if s[i] == 'H'\
    \ || s[i] == 'h' || s[i] == 'J' || s[i] == 'j' || s[i] == 'K' || s[i] == 'k' ||\
    \ s[i] == 'L' || s[i] == 'l' || s[i] == 'M' || s[i] == 'm' || s[i] == 'N' || s[i]\
    \ == 'n' || s[i] == 'P' || s[i] == 'p' || s[i] == 'Q' || s[i] == 'q' || s[i] ==\
    \ 'R' || s[i] == 'r' || s[i] == 'S' || s[i] == 's' || s[i] == 'T' || s[i] == 't'\
    \ || s[i] == 'V' || s[i] == 'v' || s[i] == 'W' || s[i] == 'w' || s[i] == 'X' ||\
    \ s[i] == 'x' || s[i] == 'Y' || s[i] == 'y' || s[i] == 'Z' || s[i] == 'z' \n \
    \       then count_upper = count_upper + 1\n        else if s[i] == 'a' || s[i]\
    \ == 'A' || s[i] == 'e' || s[i] == 'E' || s[i] == 'i' || s[i] == 'I' || s[i] ==\
    \ 'o' || s[i] == 'O' || s[i] == 'u' || s[i] == 'U' \n        then count_upper\
    \ = count_upper + 1\n        else if s[i] == 'b' || s[i] == 'B' || s[i] == 'c'\
    \ || s[i] == 'C' || s[i] == 'd' || s[i] == 'D' || s[i] == 'f' || s[i] == 'F' ||\
    \ s[i] == 'g' || s[i] == 'G' || s[i] == 'h' || s[i] == 'H' || s[i] == 'j' || s[i]\
    \ == 'J' || s[i] == 'k' || s[i] == 'K' || s[i] == 'l' || s[i] == 'L' || s[i] ==\
    \ 'm' || s[i] == 'M' || s[i] == 'n' || s[i] == 'N' || s[i] == 'p' || s[i] == 'P'\
    \ || s[i] == 'q' || s[i] == 'Q' || s[i] == 'r' || s[i] == 'R' || s[i] == 's' ||\
    \ s[i] == 'S' || s[i] == 't' || s[i] == 'T' || s[i] == 'v' || s[i] == 'V' || s[i]\
    \ == 'w' || s[i] == 'W' || s[i] == 'x' || s[i] == 'X' || s[i] == 'y' || s[i] ==\
    \ 'Y' || s[i] == 'z' || s[i] == 'Z' \n        then count_upper = count_upper +\
    \ 1\n        else if s[i] == 'd' || s[i] == 'D' || s[i] == 'e' || s[i] == 'E'\
    \ || s[i] == 'i' || \nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpsoxkqe_5.jl:11\nin expression starting at /tmp/tmpsoxkqe_5.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            \n\
    \    return count_upper\nend\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpuza_rxrn.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpuza_rxrn.jl:1\n\
    in expression starting at /tmp/tmpuza_rxrn.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = sum(map(is_upper,\
    \ s))\nend\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpnsq6fl4c.jl:17\n  Test threw exception\n\
    \  Expression: candidate(\"aBCdEf\") == 1\n  UndefVarError: is_upper not defined\n\
    \  Stacktrace:\n   [1] count_upper(s::String)\n     @ Main /tmp/tmpnsq6fl4c.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnsq6fl4c.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnsq6fl4c.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnsq6fl4c.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdefg\") == 0\n  UndefVarError: is_upper not defined\n  Stacktrace:\n\
    \   [1] count_upper(s::String)\n     @ Main /tmp/tmpnsq6fl4c.jl:10\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnsq6fl4c.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnsq6fl4c.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnsq6fl4c.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"dBBE\") == 0\n  UndefVarError: is_upper not defined\n  Stacktrace:\n\
    \   [1] count_upper(s::String)\n     @ Main /tmp/tmpnsq6fl4c.jl:10\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnsq6fl4c.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnsq6fl4c.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpnsq6fl4c.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"B\") == 0\n  UndefVarError: is_upper not defined\n  Stacktrace:\n\
    \   [1] count_upper(s::String)\n     @ Main /tmp/tmpnsq6fl4c.jl:10\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Te"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnsq6fl4c.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    \n    count = 0\n    for\
    \ i in 0..(length(s) - 1)\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I'\
    \ || s[i] == 'O' || s[i] == 'U'\n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"aBCdEf\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of vowels contained in\
    \ the string.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqqirw6_8.jl:19\nin expression starting at\
    \ /tmp/tmpqqirw6_8.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    \n    count = 0\n    for\
    \ c in s\n        if isupper(c)\n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.4>\ncount_upper(\"aBCdEf\"\
    )\n</cell>\n<code language=julia-1.4>\ncount_upper(\"abcdefg\")\n</cell>\n<code\
    \ language=julia-1.4>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the number of uppercase vowels in a string.\nusing Test\n\
    \n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") ==\
    \ 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\
    \t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpea4ojc8z.jl:19\nin expression starting at\
    \ /tmp/tmpea4ojc8z.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            \n\
    \    return count_upper\nend\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmplt31baxw.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplt31baxw.jl:1\n\
    in expression starting at /tmp/tmplt31baxw.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    \n    count_upper = 0\n\
    \    \n    for i in 0 .. s.length-1\n        if s[i] == 'A' or s[i] == 'a' or\
    \ s[i] == 'E' or s[i] == 'e' or s[i] == 'I' or s[i] == 'i' or s[i] == 'O' or s[i]\
    \ == 'o' or s[i] == 'U' or s[i] == 'u'\n            count_upper += 1\n       \
    \ end\n    end\n    \n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"aBCdEf\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of uppercase vowels in a\
    \ string.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"s\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp38s3bf6k.jl:14\nin expression starting at /tmp/tmp38s3bf6k.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            \n\
    \    return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns the number of vowels found in\
    \ it.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_nfm7_xt.jl:17\nin expression starting at\
    \ /tmp/tmp_nfm7_xt.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            if\
    \ count_upper % 2 == 0\n                count_upper -= 1\n    return count_upper\n\
    end\n</cell>\n<code language=julia-1.3>\ncount_upper(\"aBCdEf\")\n</cell>\n<code\
    \ language=julia-1.3>\ncount_upper(\"abcdefg\")\n</cell>\n<code language=julia-1.3>\n\
    count_upper(\"dBBE\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string and returns the number of vowels found in it.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"\
    abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\")\
    \ == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy7xm0ysf.jl:18\nin expression starting at\
    \ /tmp/tmpy7xm0ysf.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = Int64(0)\n\
    \    for c in s\n        if isupper(c)\n            if c % 2 == 0\n          \
    \      count_upper += 1\n            end\n        end\n    end\n    return count_upper\n\
    end\n</cell>\n<code language=julia-1.3>\ncount_upper(\"aBCdEf\")\n</cell>\n<code\
    \ language=julia-1.3>\ncount_upper(\"abcdefg\")\n</cell>\n<code language=julia-1.3>\n\
    count_upper(\"dBBE\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns the number of vowels (a, e, i, o, u) in that string.\n\
    using Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqgvj0nsf.jl:20\nin expression starting at\
    \ /tmp/tmpqgvj0nsf.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    \n    count = 0\n    for\
    \ c in s\n        if isupper(c)\n            count += 1\n            \n    return\
    \ count\n</cell>\n<code language=julia-1.5>\ncount_upper(\"aBCdEf\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"dBBE\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns the number of vowels found in that string.\nusing Test\n\
    \n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") ==\
    \ 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\
    \t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp84orj1hw.jl:17\nin expression starting at\
    \ /tmp/tmp84orj1hw.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            \n\
    \    return count_upper\nend\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpjfud54_l.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjfud54_l.jl:1\n\
    in expression starting at /tmp/tmpjfud54_l.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            \n\
    \    return count_upper\nend\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpr2nik9g1.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpr2nik9g1.jl:1\n\
    in expression starting at /tmp/tmpr2nik9g1.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    \n    count_upper = 0\n\
    \    for c in s\n        if c == 'A' || c == 'E' || c == 'I' || c == 'O' || c\
    \ == 'U'\n            count_upper += 1\n        end\n    end\n    return count_upper\n\
    end\n</cell>\n<code language=julia-1.5>\ncount_upper(\"aBCdEf\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"dBBE\")\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of uppercase vowels in each word of a string.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"\
    abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\")\
    \ == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfxb55ydw.jl:19\nin expression starting at\
    \ /tmp/tmpfxb55ydw.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            \n\
    \    return count_upper\nend\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmp5sr5fvow.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5sr5fvow.jl:1\n\
    in expression starting at /tmp/tmp5sr5fvow.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = sum(map(count_upper,\
    \ splits(s)))\nend\n</cell>\n<code language=julia-1.0>\ncount_upper(\"aBCdEf\"\
    )\n</cell>\n<code language=julia-1.0>\ncount_upper(\"abcdefg\")\n</cell>\n<code\
    \ language=julia-1.0>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the number of uppercase vowels in a string.\nusing Test\n\
    \n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") ==\
    \ 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\
    \t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpat1tgx9z.jl:12\nin expression starting at\
    \ /tmp/tmpat1tgx9z.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n        end\n \
    \   end\n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\n@time\
    \ count_upper(\"aBCdEf\")\n</cell>\n<code language=julia-1.5>\n@time count_upper(\"\
    abcdefg\")\n</cell>\n<code language=julia-1.5>\n@time count_upper(\"dBBE\")\n\
    </cell>\n<text>\nExercise\nWrite a function that returns the number of uppercase\
    \ vowels in a string.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf__qgvdq.jl:18\nin expression starting at\
    \ /tmp/tmpf__qgvdq.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count = 0\n    for c in\
    \ s\n        if isupper(c)\n            count += 1\n            \n    return count\n\
    </cell>\n<code language=julia-1.5>\ncount_upper(\"aBCdEf\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"abcdefg\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"dBBE\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of vowels \nin the string. \nFor example count_vowels(\"aBCdEf\"\
    ) returns 3.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7sdp2zlz.jl:16\nin expression starting at\
    \ /tmp/tmp7sdp2zlz.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    \n    count = 0\n    for\
    \ c in s\n        if isupper(c)\n            count += 1\n            \n    return\
    \ count\n</cell>\n<code language=julia-1.5>\ncount_upper(\"aBCdEf\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"dBBE\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string and returns the number of vowels \nin each word in the string.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\"\
    ) == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") ==\
    \ 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj68f6h1r.jl:17\nin expression starting at\
    \ /tmp/tmpj68f6h1r.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            \n\
    \    return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise: Write\
    \ a function that counts the number of uppercase vowels in a string.\nHint: Use\
    \ count_upper\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprdm9im7z.jl:17\nin expression starting at\
    \ /tmp/tmprdm9im7z.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count = 0\n    for c in\
    \ s\n        if isupper(c)\n            count += 1\n        end\n    end\n   \
    \ return count\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"aBCdEf\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the number of uppercase vowels in a string.\nusing Test\n\
    \n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") ==\
    \ 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\
    \t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplsigogjm.jl:18\nin expression starting at\
    \ /tmp/tmplsigogjm.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            \n\
    \    return count_upper\nend\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpu599ufu4.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu599ufu4.jl:1\n\
    in expression starting at /tmp/tmpu599ufu4.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            if\
    \ count_upper % 2 == 0\n                count_upper -= 1\n    return count_upper\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprihq40a2.jl:1\nin expression starting at /tmp/tmprihq40a2.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            \n\
    \    return count_upper\nend\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpi3fueep_.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpi3fueep_.jl:1\n\
    in expression starting at /tmp/tmpi3fueep_.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            \n\
    \    return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns the number of vowels found in\
    \ it.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr_yzjmu_.jl:17\nin expression starting at\
    \ /tmp/tmpr_yzjmu_.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = sum((i==2)\
    \ for i in eachindex(s))\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<text>\nExercise 2\nWrite a function that counts the number\
    \ of uppercase vowels in a string.\nFor example, count_upper(\"aBCdEf\") returns\
    \ 3.\nWrite a function that counts the number of uppercase vowels in a string\
    \ and returns the string with the vowels removed.\nFor example, count_upper(\"\
    aBCdEf\") returns \"BCdf\".\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmqr55h8e.jl:12\nin expression starting at\
    \ /tmp/tmpmqr55h8e.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U'\n\
    \            count_upper += 1\n    return count_upper\nend\n</cell>\n<code language=julia-1.0>\n\
    count_upper(\"aBCdEf\")\n</cell>\n<code language=julia-1.0>\ncount_upper(\"abcdefg\"\
    )\n</cell>\n<code language=julia-1.0>\ncount_upper(\"dBBE\")\n</cell>\n<text>\n\
    Exercise: Write a function that takes a string and returns the number of uppercase\
    \ vowels in each word in the string.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\"\
    ) == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t\
    @test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxkhx_9he.jl:16\nin expression starting at\
    \ /tmp/tmpxkhx_9he.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n        end\n \
    \   end\n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise: Write\
    \ a function that takes a string and returns the number of uppercase vowels in\
    \ each of the string's words.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyeznqbt8.jl:18\nin expression starting at\
    \ /tmp/tmpyeznqbt8.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n        end\n \
    \   end\n    return count_upper\nend\n</cell>\n<code language=julia-1.0>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<code language=julia-1.0>\ncount_upper(\"abcdefg\")\n</cell>\n\
    <code language=julia-1.0>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of uppercase letters in a string.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\"\
    ) == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") ==\
    \ 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfb7agff4.jl:18\nin expression starting at\
    \ /tmp/tmpfb7agff4.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n        end\n \
    \   end\n    return count_upper\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\"\
    ) == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t\
    @test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp61pirowk.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"aBCdEf\") == 1\n  UndefVarError: isupper not defined\n\
    \  Stacktrace:\n   [1] count_upper(s::String)\n     @ Main /tmp/tmp61pirowk.jl:12\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp61pirowk.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp61pirowk.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp61pirowk.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdefg\") == 0\n  UndefVarError: isupper not defined\n  Stacktrace:\n\
    \   [1] count_upper(s::String)\n     @ Main /tmp/tmp61pirowk.jl:12\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp61pirowk.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp61pirowk.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp61pirowk.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"dBBE\") == 0\n  UndefVarError: isupper not defined\n  Stacktrace:\n\
    \   [1] count_upper(s::String)\n     @ Main /tmp/tmp61pirowk.jl:12\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp61pirowk.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp61pirowk.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp61pirowk.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"B\") == 0\n  UndefVarError: isupper not defined\n  Stacktrace:\n\
    \   [1] count_upper(s::String)\n     @ Main /tmp/tmp61pirowk.jl:12\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.j"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp61pirowk.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n        end\n \
    \   end\n    return count_upper\nend\n</cell>\n<code language=julia-1.0>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<code language=julia-1.0>\ncount_upper(\"abcdefg\")\n</cell>\n\
    <code language=julia-1.0>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns the number of uppercase vowels\
    \ in each word in the string.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp27tsw5uc.jl:18\nin expression starting at\
    \ /tmp/tmp27tsw5uc.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    \n    count = 0\n    for\
    \ c in s\n        if isupper(c)\n            count += 1\n        end\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"aBCdEf\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of vowels contained in\
    \ the string.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4vu9oj70.jl:19\nin expression starting at\
    \ /tmp/tmp4vu9oj70.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    \n    count_upper = 0\n\
    \    for c in s\n        if isupper(c)\n            count_upper += 1\n       \
    \     if count_upper % 2 == 0\n                count_upper -= 1\n    return count_upper\n\
    end\n</cell>\n<code language=julia-1.5>\ncount_upper(\"aBCdEf\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"dBBE\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns the number of uppercase vowels in each word in the string.\n\
    using Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp50ukw5fx.jl:19\nin expression starting at\
    \ /tmp/tmp50ukw5fx.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    \n    count_upper = 0\n\
    \    for c in s\n        if isupper(c)\n            count_upper += 1\n       \
    \     if count_upper % 2 == 0\n                return count_upper\n        end\n\
    \    end\n    return 0\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns the number of uppercase vowels in each word in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") ==\
    \ 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\
    \t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv5ypvic3.jl:21\nin expression starting at\
    \ /tmp/tmpv5ypvic3.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n        end\n \
    \   end\n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the number of uppercase vowels in a string.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\"\
    ) == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") ==\
    \ 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmponfkwamv.jl:18\nin expression starting at\
    \ /tmp/tmponfkwamv.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count = 0\n    for c in\
    \ s\n        if isupper(c)\n            count += 1\n            \n    return count\n\
    </cell>\n<code language=julia-1.4>\ncount_upper(\"aBCdEf\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of uppercase\
    \ letters in the string.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp51bdld4n.jl:16\nin expression starting at\
    \ /tmp/tmp51bdld4n.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            \n\
    \    return count_upper\nend\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpsogvskpa.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsogvskpa.jl:1\n\
    in expression starting at /tmp/tmpsogvskpa.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            \n\
    \    return count_upper\nend\n</cell>\n<code language=julia-1.0>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<code language=julia-1.0>\ncount_upper(\"abcdefg\")\n</cell>\n\
    <code language=julia-1.0>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a string and returns the number of vowels \nin the\
    \ string. \nFor example, count_vowels(\"aBCdEf\") returns 3.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"\
    abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\")\
    \ == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptztkkgyf.jl:17\nin expression starting at\
    \ /tmp/tmptztkkgyf.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            \n\
    \    return count_upper\nend\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpwl358gqf.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwl358gqf.jl:1\n\
    in expression starting at /tmp/tmpwl358gqf.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = Int64(0)\n\
    \    for c in s\n        if isupper(c)\n            if c % 2 == 0\n          \
    \      count_upper += 1\n        end\n    end\n    return count_upper\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\"\
    ) == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") ==\
    \ 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpz3ejd2ks.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpz3ejd2ks.jl:1\n\
    in expression starting at /tmp/tmpz3ejd2ks.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    \n    count_upper = 0\n\
    \    for c in s\n        if isupper(c)\n            count_upper += 1\n       \
    \ end\n    end\n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"aBCdEf\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of vowels\
    \ contained in the string.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprbn587a4.jl:19\nin expression starting at\
    \ /tmp/tmprbn587a4.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n        end\n \
    \   end\n    return count_upper\nend\n</cell>\n<code language=julia-1.3>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<code language=julia-1.3>\ncount_upper(\"abcdefg\")\n</cell>\n\
    <code language=julia-1.3>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that counts the number of vowels in a string.\nusing Test\n\n\
    @testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\
    \t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"\
    B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t\
    @test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa3kqu4r1.jl:18\nin expression starting at\
    \ /tmp/tmpa3kqu4r1.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            \n\
    \    return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the number of uppercase vowels in a string.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\"\
    ) == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") ==\
    \ 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn_hy95ei.jl:17\nin expression starting at\
    \ /tmp/tmpn_hy95ei.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            \n\
    \    return count_upper\nend\n</cell>\n<code language=julia-1.4>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<code language=julia-1.4>\ncount_upper(\"abcdefg\")\n</cell>\n\
    <code language=julia-1.4>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a string and returns the number of vowels contained\
    \ in the string.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t\
    @test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"\
    dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqe16cgr9.jl:17\nin expression starting at\
    \ /tmp/tmpqe16cgr9.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count = 0\n    for c in\
    \ s\n        if isupper(c)\n            count += 1\n            \n    return count\n\
    end\n</cell>\n<code language=julia-1.5>\ncount_upper(\"aBCdEf\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"dBBE\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns the number of vowels found in that string.\nusing Test\n\
    \n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") ==\
    \ 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\
    \t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyx3gw97y.jl:17\nin expression starting at\
    \ /tmp/tmpyx3gw97y.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    \n    count_upper = 0\n\
    \    \n    for i in 0..(length(s)-2) do\n        if s[i] == 'A' || s[i] == 'a'\
    \ then\n            count_upper = count_upper + 1\n        elseif s[i] == 'B'\
    \ || s[i] == 'b' then\n            count_upper = count_upper + 1\n        elseif\
    \ s[i] == 'C' || s[i] == 'c' then\n            count_upper = count_upper + 1\n\
    \        elseif s[i] == 'D' || s[i] == 'd' then\n            count_upper = count_upper\
    \ + 1\n        elseif s[i] == 'E' || s[i] == 'e' then\n            count_upper\
    \ = count_upper + 1\n        elseif s[i] == 'F' || s[i] == 'f' then\n        \
    \    count_upper = count_upper + 1\n        elseif s[i] == 'G' || s[i] == 'g'\
    \ then\n            count_upper = count_upper + 1\n        elseif s[i] == 'H'\
    \ || s[i] == 'h' then\n            count_upper = count_upper + 1\n        elseif\
    \ s[i] == 'I' || s[i] == 'i' then\n            count_upper = count_upper + 1\n\
    \        elseif s[i] == 'J' || s[i] == 'j' then\n            count_upper = count_upper\
    \ + 1\n        elseif s[i] == 'K' || s[i] == 'k' then\n            count_upper\
    \ = count_upper + 1\n        elseif s[i] == 'L' || s[i] == 'l' then\n        \
    \    count_upper = count_upper + 1\n        elseif s[i] == 'M' || s[i] == 'm'\
    \ then\n            count_upper = count_upper + 1\n        elseif s[i] == 'N'\
    \ || s[i] == 'n' then\n            count_upper = count_upper + 1\n        elseif\
    \ s[i] == 'O' || s[i] == 'o' then\n            count_upper = count_upper + 1\n\
    \        elseif s[i] == 'P' || s[i] == 'p' then\n            count_upper = count_upper\
    \ + 1\n        elseif s[i] == 'Q' || s[i] == 'q' then\n            count_upper\
    \ = count_upper + 1\n        elseif s[i] == 'R' || s[i] == 'r' then\n        \
    \    count_upper = count_upper + 1\n        elseif s[i] == 'S' || s[i] == 's'\
    \ then\n            count_upper = count_upper + 1\n        elseif s[i] == 'T'\
    \ || s[i] == 't' then\n            count_upper = count_upper + 1\n        elseif\
    \ s[i] == 'U' || s[i] == 'u' then\n            count_upper = count_upper + 1\n\
    \        elseif s[i] == 'V' || s[i] == 'v' then\n            count_upper = count_upper\
    \ + 1\n        elseif s[i] == 'W' || s[i] == 'w' then\n            count_upper\
    \ = count_upper + 1\n        elseif s[i] == 'X' || s[i] == 'x' then\n        \
    \    count_upper = count_upper + 1\n        elseif s[i] == 'Y' || s[i] == 'y'\
    \ then\n            count_upper\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpirrkl0nu.jl:13\nin expression starting at /tmp/tmpirrkl0nu.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count = 0\n    for c in\
    \ s\n        if isupper(c)\n            count += 1\n    return count\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\"\
    ) == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") ==\
    \ 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpafo_0m8_.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpafo_0m8_.jl:1\n\
    in expression starting at /tmp/tmpafo_0m8_.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            \n\
    \    return count_upper\nend\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmp4vflq_v0.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4vflq_v0.jl:1\n\
    in expression starting at /tmp/tmp4vflq_v0.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n        end\n \
    \   end\n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and\
    \ returns the number of vowels in each word in the string.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"\
    abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\")\
    \ == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3mwqmypl.jl:18\nin expression starting at\
    \ /tmp/tmp3mwqmypl.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ i in 0..(length(s)-2) \n        if s[i] == 'A' && s[i+1] == 'B' && s[i+2] ==\
    \ 'C' \n            count_upper += 1 \n        else if s[i] == 'a' && s[i+1] ==\
    \ 'b' && s[i+2] == 'c' \n            count_upper += 1 \n        else if s[i] ==\
    \ 'd' && s[i+1] == 'b' && s[i+2] == 'e' \n            count_upper += 1 \n    \
    \    else if s[i] == 'D' && s[i+1] == 'B' && s[i+2] == 'E' \n            count_upper\
    \ += 1 \n        else if s[i] == 'd' && s[i+1] == 'b' && s[i+2] == 'e' \n    \
    \        count_upper += 1 \n        else if s[i] == 'D' && s[i+1] == 'B' && s[i+2]\
    \ == 'E' \n            count_upper += 1 \n        else if s[i] == 'd' && s[i+1]\
    \ == 'b' && s[i+2] == 'e' \n            count_upper += 1 \n        else if s[i]\
    \ == 'D' && s[i+1] == 'B' && s[i+2] == 'E' \n            count_upper += 1 \n \
    \       else if s[i] == 'd' && s[i+1] == 'b' && s[i+2] == 'e' \n            count_upper\
    \ += 1 \n        else if s[i] == 'D' && s[i+1] == 'B' && s[i+2] == 'E' \n    \
    \        count_upper += 1 \n        else if s[i] == 'd' && s[i+1] == 'b' && s[i+2]\
    \ == 'e' \n            count_upper += 1 \n        else if s[i] == 'D' && s[i+1]\
    \ == 'B' && s[i+2] == 'E' \n            count_upper += 1 \n        else if s[i]\
    \ == 'd' && s[i+1] == 'b' && s[i+2] == 'e' \n            count_upper += 1 \n \
    \       else if s[i] == 'D' && s[i+1] == 'B' && s[i+2] == 'E' \n            count_upper\
    \ += 1 \n        else if s[i] == 'd' && s[i+1] == 'b' && s[i+2] == 'e' \n    \
    \        count_upper += 1 \n        else if s[i] == 'D' && s[i+1] == 'B' && s[i+2]\
    \ == 'E' \n            count_upper += 1 \n        else if s[i] == 'd' && s[i+1]\
    \ == 'b' && s[i+2] == 'e' \n            count_upper += 1 \n        else if s[i]\
    \ == 'D' && s[i+1] == 'B' && s[i+2] == 'E' \n            count_upper += 1 \n \
    \       else if s[i] == 'd' && s[i+1] == 'b' && s[i+2] == 'e' \n            count_upper\
    \ += 1 \n        else if s[i] == 'D' && s[i+1] == 'B' && s[i+2] == 'E' \n    \
    \        count_upper += 1 \n        else if s[i] == 'd' && s[i+1] == 'b' && s[i+2]\
    \ == 'e' \n            \nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp99h8qve7.jl:14\nin expression starting at\
    \ /tmp/tmp99h8qve7.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            \n\
    \    return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that counts the number of uppercase vowels in a string. \nWrite\
    \ a function that counts the number of uppercase vowels in a string and returns\
    \ the number of uppercase vowels.\nWrite a function that counts the number of\
    \ uppercase vowels in a string and returns the number of uppercase vowels.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\"\
    ) == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") ==\
    \ 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl8u6p83e.jl:17\nin expression starting at\
    \ /tmp/tmpl8u6p83e.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ i in 0..length(s) {\n        if isupper(s[i])\n            count_upper += 1\n\
    \            if count_upper % 2 == 0\n                count_upper -= 1\n    return\
    \ count_upper\nend\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \"{\" not allowed in \"length(s)\
    \ {\" at /tmp/tmp84sost2y.jl:11\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp84sost2y.jl:11\n\
    in expression starting at /tmp/tmp84sost2y.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            \n\
    \    return count_upper\nend\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpz2abng9j.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpz2abng9j.jl:1\n\
    in expression starting at /tmp/tmpz2abng9j.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count = 0\n    for c in\
    \ s\n        if isupper(c)\n            count += 1\n            \n    return count\n\
    </cell>\n<code language=julia-1.5>\ncount_upper(\"aBCdEf\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"abcdefg\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"dBBE\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that counts the number of uppercase\
    \ vowels in a string. \nGiven a string, return the number of uppercase vowels.\n\
    using Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp69hrnaev.jl:16\nin expression starting at\
    \ /tmp/tmp69hrnaev.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            \n\
    \    return count_upper\nend\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpmqddblk9.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmqddblk9.jl:1\n\
    in expression starting at /tmp/tmpmqddblk9.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            if\
    \ count_upper % 2 == 0\n                count_upper -= 1\n    return count_upper\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptgak7wdy.jl:1\nin expression starting at /tmp/tmptgak7wdy.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            \n\
    \    return count_upper\nend\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpgppkc5re.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgppkc5re.jl:1\n\
    in expression starting at /tmp/tmpgppkc5re.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            \n\
    \    return count_upper\nend\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpdhn2hds5.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdhn2hds5.jl:1\n\
    in expression starting at /tmp/tmpdhn2hds5.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            \n\
    \    return count_upper\nend\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\
    \t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t\
    @test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"\
    U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"EEEE\") == 2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpo2nkv6k9.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpo2nkv6k9.jl:1\n\
    in expression starting at /tmp/tmpo2nkv6k9.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = sum(map(count_upper,\
    \ s))\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"aBCdEf\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"dBBE\")\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of uppercase vowels in a string.\nusing Test\n\n@testset begin\n\n\
    candidate = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"\
    abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\")\
    \ == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9dv_paj7.jl:12\nin expression starting at\
    \ /tmp/tmp9dv_paj7.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count = 0\n    for c in\
    \ s\n        if isupper(c)\n            count += 1\n            \n    return count\n\
    </cell>\n<code language=julia-1.5>\ncount_upper(\"aBCdEf\")\n</cell>\n<code language=julia-1.5>\n\
    count_upper(\"abcdefg\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"dBBE\"\
    )\n</cell>\n<text>\nExercise\nWrite a function that counts the number of uppercase\
    \ vowels in a string. \nWrite a function that counts the number of uppercase vowels\
    \ in a string and returns the number of vowels counted in the even indices. \n\
    Write a function that counts the number of uppercase vowels in a string and returns\
    \ the number of vowels counted in the odd indices. \nWrite a function that counts\
    \ the number of uppercase vowels in a string and returns the number of vowels\
    \ counted in the even indices and the number of vowels counted in the odd indices.\n\
    using Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsbl77ee9.jl:16\nin expression starting at\
    \ /tmp/tmpsbl77ee9.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    \n    count_upper = 0\n\
    \    for i in 0..length(s):\n        if s[i] == 'A' or s[i] == 'a' or s[i] ==\
    \ 'E' or s[i] == 'e' or s[i] == 'I' or s[i] == 'i' or s[i] == 'O' or s[i] == 'o'\
    \ or s[i] == 'U' or s[i] == 'u':\n            count_upper += 1\n    return count_upper\n\
    end\n</cell>\n<code language=julia-1.0>\ncount_upper(\"aBCdEf\")\n</cell>\n<code\
    \ language=julia-1.0>\ncount_upper(\"abcdefg\")\n</cell>\n<code language=julia-1.0>\n\
    count_upper(\"dBBE\")\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of uppercase vowels in a string.\nusing Test\n\n@testset begin\n\n\
    candidate = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"\
    abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\")\
    \ == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: newline not allowed after \":\" used for quoting\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmp4yx4d259.jl:13\nin expression\
    \ starting at /tmp/tmp4yx4d259.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ i in 0..(length(s) - 1)\n        if s[i] == 'A' || s[i] == 'E' || s[i] == 'I'\
    \ || s[i] == 'O' || s[i] == 'U'\n            count_upper += 1\n        end\n \
    \   end\n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of uppercase vowels in a string.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\"\
    ) == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") ==\
    \ 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplfyr0z0g.jl:18\nin expression starting at\
    \ /tmp/tmplfyr0z0g.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n        end\n \
    \   end\n    return count_upper\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\"\
    ) == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t\
    @test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp7q86mxf4.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"aBCdEf\") == 1\n  UndefVarError: isupper not defined\n\
    \  Stacktrace:\n   [1] count_upper(s::String)\n     @ Main /tmp/tmp7q86mxf4.jl:12\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7q86mxf4.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7q86mxf4.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp7q86mxf4.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"abcdefg\") == 0\n  UndefVarError: isupper not defined\n  Stacktrace:\n\
    \   [1] count_upper(s::String)\n     @ Main /tmp/tmp7q86mxf4.jl:12\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7q86mxf4.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7q86mxf4.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp7q86mxf4.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"dBBE\") == 0\n  UndefVarError: isupper not defined\n  Stacktrace:\n\
    \   [1] count_upper(s::String)\n     @ Main /tmp/tmp7q86mxf4.jl:12\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7q86mxf4.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7q86mxf4.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp7q86mxf4.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"B\") == 0\n  UndefVarError: isupper not defined\n  Stacktrace:\n\
    \   [1] count_upper(s::String)\n     @ Main /tmp/tmp7q86mxf4.jl:12\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.j"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7q86mxf4.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            \n\
    \    return count_upper\nend\n</cell>\n<code language=julia-1.3>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<code language=julia-1.3>\ncount_upper(\"abcdefg\")\n</cell>\n\
    <code language=julia-1.3>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns the number of vowels found in\
    \ it.\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4t_uqi85.jl:17\nin expression starting at\
    \ /tmp/tmp4t_uqi85.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            \n\
    \    return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of uppercase vowels in a string. \nFor\
    \ example, count_upper(\"aBCdEf\") returns 1.\nusing Test\n\n@testset begin\n\n\
    candidate = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"\
    abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\")\
    \ == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprz5mjncv.jl:17\nin expression starting at\
    \ /tmp/tmprz5mjncv.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count = 0\n    for c in\
    \ s\n        if isupper(c)\n            count += 1\n    return count\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\"\
    ) == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") ==\
    \ 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpgrfauel8.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgrfauel8.jl:1\n\
    in expression starting at /tmp/tmpgrfauel8.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            \n\
    \    return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of uppercase letters in a string.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"aBCdEf\"\
    ) == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\") ==\
    \ 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl2a4vto4.jl:17\nin expression starting at\
    \ /tmp/tmpl2a4vto4.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n            \n\
    \    return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a string and returns the number of vowels \nin each\
    \ of the string's characters. \nFor example count_vowels(\"aBCdEf\") should return\
    \ [1, 3, 1]\nusing Test\n\n@testset begin\n\ncandidate = count_upper;\n\t@test(candidate(\"\
    aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\") == 0)\n\t@test(candidate(\"dBBE\"\
    ) == 0)\n\t@test(candidate(\"B\") == 0)\n\t@test(candidate(\"U\") == 1)\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdo4f5g6q.jl:17\nin expression starting at\
    \ /tmp/tmpdo4f5g6q.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string s, count the number of uppercase vowels in\
    \ even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n\
    \    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n   \
    \ \"\"\"\nfunction count_upper(s::String)::Int64 \n    count_upper = 0\n    for\
    \ c in s\n        if isupper(c)\n            count_upper += 1\n        end\n \
    \   end\n    return count_upper\nend\n</cell>\n<code language=julia-1.5>\ncount_upper(\"\
    aBCdEf\")\n</cell>\n<code language=julia-1.5>\ncount_upper(\"abcdefg\")\n</cell>\n\
    <code language=julia-1.5>\ncount_upper(\"dBBE\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of uppercase vowels in s.\nFor example,\
    \ count_upper(\"aBCdEf\") returns 1.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = count_upper;\n\t@test(candidate(\"aBCdEf\") == 1)\n\t@test(candidate(\"abcdefg\"\
    ) == 0)\n\t@test(candidate(\"dBBE\") == 0)\n\t@test(candidate(\"B\") == 0)\n\t\
    @test(candidate(\"U\") == 1)\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    EEEE\") == 2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl9y4s1hj.jl:18\nin expression starting at\
    \ /tmp/tmpl9y4s1hj.jl:18\n"
  exit_code: 1
  status: SyntaxError
