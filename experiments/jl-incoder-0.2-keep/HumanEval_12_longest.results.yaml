name: HumanEval_12_longest
language: julia
results:
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0 \n        error(\"Empty list\") \n    else \n        max_length = maximum([length(s)\
    \ for s in strings]) \n        for s in strings \n            if length(s) ==\
    \ max_length \n                return s \n            end \n        end \n   \
    \ end \nend \n</cell>\n<text>\nExercise 2\nWrite a function that returns the longest\
    \ string in a list of strings. Return None in case the list is empty.\nusing Test\n\
    \n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdcjr8q3o.jl:22\nin expression starting at\
    \ /tmp/tmpdcjr8q3o.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0\n        error(\"Input is empty\")\n    end\n    max_length = maximum([length(s)\
    \ for s in strings])\n    longest_string = nothing\n    for s in strings\n   \
    \     if length(s) == max_length\n            if longest_string == nothing\n \
    \               longest_string = s\n            else\n                if length(longest_string)\
    \ > length(s)\n                    longest_string = s\n                end\n \
    \           end\n        else\n            if longest_string == nothing\n    \
    \            longest_string = s\n            else\n                if length(longest_string)\
    \ < length(s)\n                    longest_string = s\n                end\n \
    \           end\n        end\n    end\n    return longest_string\nend\n</cell>\n\
    <text>\nExercise 4\nWrite a function that takes a string and returns the number\
    \ of times it appears in the string.\n    >>> count_occurrences(\"\")\n    0\n\
    \    >>> count_occurrences(\"a\")\n    1\n    >>> count_occurrences(\"ab\")\n\
    \    2\n    >>> count_occurrences(\"aba\")\n    3\n    >>> count_occurrences(\"\
    aba\")\n    3\n    >>> count_occurrences(\"aba\")\n    3\n    >>> count_occurrences(\"\
    aba\")\n    3\n    >>> count_occurrences(\"aba\")\n    3\n    >>> count_occurrences(\"\
    aba\")\n    3\n    >>> count_occurrences(\"aba\")\n    3\n    >>> count_occurrences(\"\
    aba\")\n    3\n    >>> count_occurrences(\"aba\")\n    3\n    >>> count_occurrences(\"\
    aba\")\n    3\n    >>> count_occurrences(\"aba\")\n    3\n    >>> count_occurrences(\"\
    aba\")\n    3\n    >>> count_occurrences(\"aba\")\n    3\n    >>> count_occurrences(\"\
    aba\")\n    3\n    >>> count_occurrences(\"aba\")\n    3\n    >>> count_occurrences(\"\
    aba\")\n    3\n    >>> count_occurrences(\"aba\")\n    3\n    >>> count_occurrences(\"\
    aba\")\n    3\n    >>> count_occurrences(\"aba\")\n    3\n    >>> count_occurrences(\"\
    aba\")\n    3\n    >>> count_occurrences(\"aba\")\n    3\n    >>> count_occurrences(\"\
    aba\")\n    3\n    >>> count_occurrences(\"aba\")\n    3\n    >>> count_occurrences(\"\
    aba\")\n    3\n    >>> count_occurrences(\"aba\")\n    3\n    >>> count_occurrences(\"\
    aba\")\n    3\n    >>> count_occurrences(\"aba\")\n    3\n    >>> count_occurrences(\"\
    aba\")\n    3\n    >>> count_occurrences(\"aba\")\n    3\n    >>> count_occurrences(\"\
    aba\")\n    3\n    >>> count_\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\
    \t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"x\", \"\
    y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"www\",\
    \ \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpegohj3mt.jl:37\nin expression starting at\
    \ /tmp/tmpegohj3mt.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = Nothing\n    for s in strings\n        if longest == Nothing || length(longest)\
    \ > length(s)\n            longest = s\n        end\n    end\n    longest\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the longest string\
    \ in a list of strings.\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\
    \t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"x\", \"\
    y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"www\",\
    \ \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc6r_ryqv.jl:19\nin expression starting at\
    \ /tmp/tmpc6r_ryqv.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = strings[end]\n    for string in strings\n        if string.len > longest.len\n\
    \            longest = string\n        end\n    end\n    longest\nend\n</cell>\n\
    <code language=julia-1.3>\nlongest([\"a\", \"bb\", \"ccc\"])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the longest string in a list of strings.\
    \ If the list is empty, return None.\n    >>> longest([])\n    >>> longest([\"\
    a\", \"bb\", \"ccc\"])\n    'ccc'\nusing Test\n\n@testset begin\n\ncandidate =\
    \ longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpii1a61vw.jl:19\nin expression starting at\
    \ /tmp/tmpii1a61vw.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0 \n        return None \n    else \n        return max(strings, key=length)\
    \ \nend\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\"])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector of strings and\
    \ returns a vector of strings where each string in the original vector is replaced\
    \ by the string with the longest common prefix. For example, if the input vector\
    \ is [\"a\", \"bb\", \"ccc\"], then the output vector should be [\"a\", \"a\"\
    , \"a\"].\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7q7790em.jl:16\nin expression starting at\
    \ /tmp/tmp7q7790em.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0 \n        return None \n    else \n        return max(strings, key=length)\
    \ \nend\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\"])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the longest string\
    \ in a list of strings. Use this function to find the longest string in our dataset.\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphe39ktd6.jl:16\nin expression starting at\
    \ /tmp/tmphe39ktd6.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = strings[end-1]\n    for s in strings[2:end]\n        if length(longest) <\
    \ length(s)\n            longest = s\n        end\n    end\n    longest\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of strings and\
    \ returns a vector of the lengths of the strings in descending order.\nusing Test\n\
    \n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsj69y3xw.jl:19\nin expression starting at\
    \ /tmp/tmpsj69y3xw.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = strings[1]\n    for s in strings[2:end]\n        if length(longest) < length(s)\n\
    \            longest = s\n        end\n    end\n    return longest\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp7hysezsd.jl:24\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([])) == nothing\n  BoundsError: attempt\
    \ to access 0-element Vector{String} at index [1]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] longest(strings::Vector{String})\n  \
    \   @ Main /tmp/tmp7hysezsd.jl:11\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp7hysezsd.jl:24 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp7hysezsd.jl:23\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    2      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7hysezsd.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0 \n        error(\"Input list is empty\") \n    else \n        longest =\
    \ strings[length(strings)-1] \n        for i in length(strings)-1 \n         \
    \   if strings[i] != longest \n                longest = strings[i] \n       \
    \     end \n        end \n        return longest \n    end \nend \n</cell>\n<text>\n\
    Exercise 2: Write a function that takes a string and returns the number of occurrences\
    \ of the character 'a' in that string.\n    >>> count_a(\"abba\")\n    2\n   \
    \ >>> count_a(\"abbaa\")\n    1\n    >>> count_a(\"abbaaa\")\n    0\n    >>> count_a(\"\
    abbaaaa\")\n    1\n    >>> count_a(\"abbaaaaa\")\n    1\n    >>> count_a(\"abbaaaaaa\"\
    )\n    1\n    >>> count_a(\"abbaaaaaaa\")\n    0\n    >>> count_a(\"abbaaaaaaaa\"\
    )\n    0\n    >>> count_a(\"abbaaaaaaaab\")\n    1\n    >>> count_a(\"abbaaaaaaaabb\"\
    )\n    1\n    >>> count_a(\"abbaaaaaaaabbb\")\n    1\n    >>> count_a(\"abbaaaaaaaabbbb\"\
    )\n    0\n    >>> count_a(\"abbaaaaaaaabbbbb\")\n    0\n    >>> count_a(\"abbaaaaaaaabbbbba\"\
    )\n    1\n    >>> count_a(\"abbaaaaaaaabbbbbaa\")\n    1\n    >>> count_a(\"abbaaaaaaaabbbbbaaa\"\
    )\n    1\n    >>> count_a(\"abbaaaaaaaabbbbbaaaa\")\n    1\n    >>> count_a(\"\
    abbaaaaaaaabbbbbaaaaa\")\n    1\n    >>> count_a(\"abbaaaaaaaabbbbbaaaaaa\")\n\
    \    1\n    >>> count_a(\"abbaaaaaaaabbbbbaaaaaaa\")\n    1\n    >>> count_a(\"\
    abbaaaaaaaabbbbbaaaaaaaa\")\n    1\n    >>> count_a(\"abbaaaaaaaabbbbbaaaaaaaab\"\
    )\n    1\n    >>> count_a(\"abbaaaaaaaabbbbbaaaaaaaabb\")\n    1\n    >>> count_a(\"\
    abbaaaaaaaabbbbbaaaaaaaabbb\")\n    1\n    >>> count_a(\"abbaaaaaaaabbbbbaaaaaaaabbbb\"\
    )\n    1\n    >>> count_a(\"abbaaaaaaaabbbbbaaaaaaaabbbbb\")\n    1\n    >>> count_a(\"\
    abbaaaaaaaabbbbbaaaaaaaabbbbba\")\n    1\n    >>> count_a(\"abbaaaaaaaabbbb\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdx932blk.jl:23\nin expression starting at\
    \ /tmp/tmpdx932blk.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = Nothing\n    for s in strings\n        if longest == Nothing || length(longest)\
    \ < length(s)\n            longest = s\n        end\n    end\n    return longest\n\
    end\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work if you have multiple\
    \ strings of the same length. Try it with `longest([\"aa\", \"bb\", \"ccc\"])`\n\
    <|/ c |>\n<| c |>\nThanks for pointing that out. I've fixed the code accordingly.\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp444x3yf1.jl:19\nin expression starting at\
    \ /tmp/tmp444x3yf1.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = strings[lengths(strings)==maximum(lengths(strings))]\n    if isempty(longest)\n\
    \        error(\"No string in list has same length\")\n    end\n    return longest\n\
    end\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\nI came up with this solution:\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgd86h5r2.jl:17\nin expression starting at\
    \ /tmp/tmpgd86h5r2.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0 return None \n    max_length = length(strings)\n    longest_string = strings[max_length]\n\
    \    for s in strings[2:end]\n        if length(s) < max_length\n            max_length\
    \ = length(s)\n            longest_string = s\n        end\n    end\n    return\
    \ longest_string\nend\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t\
    @test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"x\", \"\
    y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"www\",\
    \ \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpq8j122_d.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpq8j122_d.jl:1\n\
    in expression starting at /tmp/tmpq8j122_d.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = None \n    for s in strings \n        if longest == None \n            longest\
    \ = s \n        else if length(longest) < length(s) \n            longest = s\
    \ \n        else \n            longest = None \n    end\n    return longest \n\
    end\n</cell>\n<code language=julia-1.3>\nlongest([\"a\", \"bb\", \"ccc\"])\n</cell>\n\
    <code language=julia-1.3>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\"])\n</cell>\n\
    <code language=julia-1.3>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\"\
    ])\n</cell>\n<code language=julia-1.3>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\"\
    , \"eeeee\", \"ffff\"])\n</cell>\n<code language=julia-1.3>\nlongest([\"a\", \"\
    bb\", \"ccc\", \"dddd\", \"eeeee\", \"ffff\", \"ggggg\"])\n</cell>\n<code language=julia-1.3>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\", \"ffff\", \"ggggg\", \"\
    hhhhh\"])\n</cell>\n<code language=julia-1.3>\nlongest([\"a\", \"bb\", \"ccc\"\
    , \"dddd\", \"eeeee\", \"ffff\", \"ggggg\", \"hhhhh\", \"iiiii\"])\n</cell>\n\
    <code language=julia-1.3>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\"\
    , \"ffff\", \"ggggg\", \"hhhhh\", \"iiiii\", \"jjjjj\"])\n</cell>\n<code language=julia-1.3>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\", \"ffff\", \"ggggg\", \"\
    hhhhh\", \"iiiii\", \"jjjjj\", \"kkkkk\"])\n</cell>\n<code language=julia-1.3>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\", \"ffff\", \"ggggg\", \"\
    hhhhh\", \"iiiii\", \"jjjjj\", \"kkkkk\", \"lllll\"])\n</cell>\n<code language=julia-1.3>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\", \"ffff\", \"ggggg\", \"\
    hhhhh\", \"iiiii\", \"jjjjj\", \"kkkkk\", \"lllll\", \"mmmmm\"])\n</cell>\n<code\
    \ language=julia-1.3>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\", \"\
    ffff\", \"ggggg\", \"hhhhh\", \"iiiii\", \"jjjjj\", \"kkkkk\", \"lllll\", \"mmmmm\"\
    , \"nnnnn\"])\n</cell>\n<code language=julia-1.3>\nlongest([\"a\", \"bb\", \"\
    ccc\", \"dddd\", \"eeeee\", \"ffff\", \"ggggg\", \"hhhhh\", \"ii\nusing Test\n\
    \n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjbre09rz.jl:15\nin expression starting at\
    \ /tmp/tmpjbre09rz.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0 \n        error(\"Input list cannot be empty\")\n    end\n    max_length\
    \ = length(strings)\n    longest_string = strings[max_length]\n    for string\
    \ in strings\n        if length(string) == max_length\n            longest_string\
    \ = string\n        else\n            break\n        end\n    end\n    return\
    \ longest_string\nend\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"\
    bb\", \"ccc\"])\n</cell>\n<text>\nExercise\nWrite a function that returns the\
    \ longest string in a list of strings. If the input list is empty, return an empty\
    \ string. \nWrite a function that returns the longest string in a list of strings.\
    \ If the input list is empty, return an empty string. \nWrite a function that\
    \ returns the longest string in a list of strings. If the input list is empty,\
    \ return an empty string. \nWrite a function that returns the longest string in\
    \ a list of strings. If the input list is empty, return an empty string. \nWrite\
    \ a function that returns the longest string in a list of strings. If the input\
    \ list is empty, return an empty string. \nWrite a function that returns the longest\
    \ string in a list of strings. If the input list is empty, return an empty string.\
    \ \nWrite a function that returns the longest string in a list of strings. If\
    \ the input list is empty, return an empty string. \nWrite a function that returns\
    \ the longest string in a list of strings. If the input list is empty, return\
    \ an empty string. \nWrite a function that returns the longest string in a list\
    \ of strings. If the input list is empty, return an empty string. \nWrite a function\
    \ that returns the longest string in a list of strings. If the input list is empty,\
    \ return an empty string. \nWrite a function that returns the longest string in\
    \ a list of strings. If the input list is empty, return an empty string. \nWrite\
    \ a function that returns the longest string in a list of strings. If the input\
    \ list is empty, return an empty string. \nWrite a function that returns the longest\
    \ string in a list of strings. If the input list is empty, return an empty string.\
    \ \nWrite a function that returns the longest string in a list of strings. If\
    \ the input list is empty, return an empty string. \nWrite a function that returns\
    \ the longest string in a list of strings. If the input list is empty, return\
    \ an empty string. \nWrite a function that returns the longest string in a list\
    \ of strings. If the input list is empty, return an empty string. \nWrite a function\
    \ that returns the longest string in a list of strings. If the input list is empty,\
    \ return an empty string. \nWrite a function that returns the longest string in\
    \ a list of strings. If the input list is empty, return an empty string. \nWrite\
    \ a function that returns the longest string in a list of strings. If the input\
    \ list is empty, return an empty string. \nWrite a function that returns the longest\
    \ string in a list of strings. If the input list is empty, return an empty string.\
    \ \nWrite a function that returns the longest string in a list of strings. If\
    \ the input list is empty, return an empty string. \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4_1q1xmj.jl:25\nin expression starting at\
    \ /tmp/tmp4_1q1xmj.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = strings[1]\n    for s in strings[2:end]\n        if length(longest) < length(s)\
    \ \n            longest = s\n        end\n    end\n    return longest\nend\n</cell>\n\
    <text>\nExercise 9\nWrite a function that takes a vector of strings and returns\
    \ a vector of booleans indicating whether each string is a palindrome or not.\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbsqa1e3p.jl:19\nin expression starting at\
    \ /tmp/tmpbsqa1e3p.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0 \n        return None \n    else \n        longest_len = length(strings)\
    \ \n        longest_str = strings[longest_len] \n        for str in strings[2:]\
    \ \n            if length(str) == longest_len \n                longest_str =\
    \ str \n            end \n        end \n        return longest_str \n    end \n\
    end \n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\"])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector of strings and\
    \ returns the longest string in that vector. Return nothing in case the vector\
    \ is empty.\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    'ccc'\nusing Test\n\
    \n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7khkg5ez.jl:16\nin expression\
    \ starting at /tmp/tmp7khkg5ez.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = Nothing\n    for s in strings\n        if longest == Nothing || length(longest)\
    \ > length(s) \n            longest = s\n        end\n    end\n    return longest\n\
    end\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\nI like using reduce for this\
    \ kind of thing:\n<code>\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\
    \t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"x\", \"\
    y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"www\",\
    \ \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9qbxsl3b.jl:19\nin expression starting at\
    \ /tmp/tmp9qbxsl3b.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = Nothing\n    for s in strings\n        if longest == Nothing || length(longest)\
    \ < length(s)\n            longest = s\n        end\n    end\n    longest\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector of strings and\
    \ returns a vector of the same length with all strings replaced by '?'\n    >>>\
    \ replace_all(['hello', 'world'])\n    ['hello', 'world']\n    >>> replace_all(['hello',\
    \ 'world', 'hello'])\n    ['hello', 'world', '?']\n    >>> replace_all(['hello',\
    \ 'world', 'hello', 'world'])\n    ['hello', 'world', '?', '?']\n    >>> replace_all(['hello',\
    \ 'world', 'hello', 'world', 'hello'])\n    ['hello', 'world', '?', '?', '?']\n\
    \    >>> replace_all([])\n    []\n    >>> replace_all(['hello', 'world', 'hello',\
    \ 'world', 'hello', 'world'])\n    ['hello', 'world', '?', '?', '?', '?']\n  \
    \  \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgoldfm3i.jl:19\nin expression starting at\
    \ /tmp/tmpgoldfm3i.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = strings[end-1]\n    for s in strings[2:end]\n        if length(longest) <\
    \ length(s)\n            longest = s\n        end\n    end\n    return longest\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpr22c1p3j.jl:24\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([])) == nothing\n  BoundsError: attempt\
    \ to access 0-element Vector{String} at index [-1]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] longest(strings::Vector{String})\n  \
    \   @ Main /tmp/tmpr22c1p3j.jl:11\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpr22c1p3j.jl:24 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpr22c1p3j.jl:23\ntest set:\
    \ Test Failed at /tmp/tmpr22c1p3j.jl:25\n  Expression: candidate([\"x\", \"y\"\
    , \"z\"]) == \"x\"\n   Evaluated: \"y\" == \"x\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr22c1p3j.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr22c1p3j.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpr22c1p3j.jl:26\n  Expression: candidate([\"x\", \"yyy\", \"\
    zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\"\n   Evaluated: \"kkkk\" == \"\
    zzzz\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr22c1p3j.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr22c1p3j.jl:23\nTest Summary:\
    \ | Fail  Error  Total\ntest set      |    2      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr22c1p3j.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0 \n        return None \n    else \n        return max(strings, key=length)\
    \ \nend\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\"])\n\
    </cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the longest string\
    \ in a list of strings.\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\
    \t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"x\", \"\
    y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"www\",\
    \ \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo4zv0wfg.jl:16\nin expression starting at\
    \ /tmp/tmpo4zv0wfg.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = strings[end]\n    for s in strings[2:end]\n        if length(longest) > length(s)\n\
    \            longest = s\n        end\n    end\n    return longest\nend\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nusing Test\n\n@testset begin\n\n\
    candidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxebpk_5v.jl:19\nin expression starting at\
    \ /tmp/tmpxebpk_5v.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = strings[end-1]\n    for s in strings[2:end]\n        if length(longest) <\
    \ length(s)\n            longest = s\n        end\n    end\n    return longest\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpeewdpkx8.jl:24\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([])) == nothing\n  BoundsError: attempt\
    \ to access 0-element Vector{String} at index [-1]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] longest(strings::Vector{String})\n  \
    \   @ Main /tmp/tmpeewdpkx8.jl:11\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpeewdpkx8.jl:24 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpeewdpkx8.jl:23\ntest set:\
    \ Test Failed at /tmp/tmpeewdpkx8.jl:25\n  Expression: candidate([\"x\", \"y\"\
    , \"z\"]) == \"x\"\n   Evaluated: \"y\" == \"x\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpeewdpkx8.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpeewdpkx8.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpeewdpkx8.jl:26\n  Expression: candidate([\"x\", \"yyy\", \"\
    zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\"\n   Evaluated: \"kkkk\" == \"\
    zzzz\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpeewdpkx8.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpeewdpkx8.jl:23\nTest Summary:\
    \ | Fail  Error  Total\ntest set      |    2      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpeewdpkx8.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = Nothing\n    for s in strings\n        if longest == Nothing || length(longest)\
    \ > length(s)\n            longest = s\n        end\n    end\n    return longest\n\
    end\n</code>\n<|/ a |>\n<| a tags=julia |>\nA simple solution is to use findfirst:\n\
    <code>\njulia> findfirst(x -> length(x) > 1, [\"a\", \"b\", \"c\"])\n\"a\"\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=2 |>\nI like to use filter for this:\n<code>\n\
    julia> filter(x -> length(x) > 1, [\"a\", \"b\", \"c\"])\n3-element Array{String,1}:\n\
    \ \"a\"\n \"b\"\n \"c\"\n</code>\n<|/ a tags=julia |>\n<| a dscore=1 |>\nI like\
    \ to use filter for this:\n<code>\njulia> filter(x -> length(x) > 1, [\"a\", \"\
    b\", \"c\"])\n3-element Array{String,1}:\n \"a\"\n \"b\"\n \"c\"\n</code>\n<|/\
    \ a tags=julia |>\n<| a tags=julia |>\nI like to use filter for this:\n<code>\n\
    julia> filter(x -> length(x) > 1, [\"a\", \"b\", \"c\"])\n3-element Array{String,1}:\n\
    \ \"a\"\n \"b\"\n \"c\"\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\nI like\
    \ to use filter for this:\n<code>\njulia> filter(x -> length(x) > 1, [\"a\", \"\
    b\", \"c\"])\n3-element Array{String,1}:\n \"a\"\n \"b\"\n \"c\"\n</code>\n<|/\
    \ a tags=julia |>\n<| a tags=julia |>\nI like to use filter for this:\n<code>\n\
    julia> filter(x -> length(x) > 1, [\"a\", \"b\", \"c\"])\n3-element Array{String,1}:\n\
    \ \"a\"\n \"b\"\n \"c\"\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>\n\
    julia> filter(x -> length(x) > 1, [\"a\", \"b\", \"c\"])\n3-element Array{String,1}:\n\
    \ \"a\"\n \"b\"\n \"c\"\n</code>\n<|/ a tags=julia |>\n<| a dscore=0 |>\n<code>\n\
    julia> filter(x -> length(x) > 1, [\"a\", \"b\", \"c\"])\n3-element Array{String,1}:\n\
    \ \"a\"\n \"b\"\n \"c\"\n</code>\n<|/ a tags=julia |>\n<| a tags=julia \nusing\
    \ Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt6wbodc9.jl:19\nin expression starting at\
    \ /tmp/tmpt6wbodc9.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = Nothing\n    for s in strings\n        if longest == Nothing || length(longest)\
    \ > length(s)\n            longest = s\n        end\n    end\n    longest\nend\n\
    </cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\"])\n</cell>\n\
    <code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"ddd\"])\n</cell>\n\
    <code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"ddd\", \"eee\"])\n\
    </cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"ddd\",\
    \ \"eee\", \"fff\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\"\
    , \"ccc\", \"ddd\", \"eee\", \"fff\", \"ggg\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"ddd\", \"eee\", \"fff\", \"ggg\", \"hhh\"])\n\
    </cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"ddd\",\
    \ \"eee\", \"fff\", \"ggg\", \"hhh\", \"iii\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"ddd\", \"eee\", \"fff\", \"ggg\", \"hhh\",\
    \ \"iii\", \"jjj\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\"\
    , \"ccc\", \"ddd\", \"eee\", \"fff\", \"ggg\", \"hhh\", \"iii\", \"jjj\", \"kkk\"\
    ])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"ddd\"\
    , \"eee\", \"fff\", \"ggg\", \"hhh\", \"iii\", \"jjj\", \"kkk\", \"lll\"])\n</cell>\n\
    <code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"ddd\", \"eee\",\
    \ \"fff\", \"ggg\", \"hhh\", \"iii\", \"jjj\", \"kkk\", \"lll\", \"mmm\"])\n</cell>\n\
    <code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"ddd\", \"eee\",\
    \ \"fff\", \"ggg\", \"hhh\", \"iii\", \"jjj\", \"kkk\", \"lll\", \"mmm\", \"nnn\"\
    ])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"ddd\"\
    , \"eee\", \"fff\", \"ggg\", \"hhh\", \"iii\", \"jjj\", \"kkk\", \"lll\", \"mmm\"\
    , \"nnn\", \"ooo\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\"\
    , \"ccc\", \"ddd\", \"eee\", \"fff\", \"ggg\", \"hh\nusing Test\n\n@testset begin\n\
    \ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t\
    @test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph6tk00uz.jl:19\nin expression starting at\
    \ /tmp/tmph6tk00uz.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0 \n        error(\"Input list is empty\")\n    end\n    max_length = length(strings)\n\
    \    longest_string = strings[max_length]\n    for string in strings\n       \
    \ if length(string) == max_length\n            longest_string = string\n     \
    \   else\n            break\n        end\n    end\n    return longest_string\n\
    end\n</code>\n<|/ a tags=julia,string |>\n<| a tags=julia,string |>\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcg19lhly.jl:25\nin expression starting at\
    \ /tmp/tmpcg19lhly.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = strings[end-1]\n    for s in strings[2:end]\n        if length(longest) <\
    \ length(s) \n            longest = s\n        end\n    end\n    return longest\n\
    end\n</code>\n<|/ a tags=julia |>\n<| a tags=julia |>\n<code>\nusing Test\n\n\
    @testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcb2na7cf.jl:19\nin expression starting at\
    \ /tmp/tmpcb2na7cf.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0 \n        error(\"Input list is empty\") \n    else \n        longest =\
    \ strings[length(strings)-1] \n        for string in strings \n            if\
    \ string.length > longest.length \n                longest = string \n       \
    \ endfor \n        return longest \nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmprs0f274_.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprs0f274_.jl:1\n\
    in expression starting at /tmp/tmprs0f274_.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = Nothing\n    for s in strings\n        if longest == Nothing || length(longest)\
    \ < length(s)\n            longest = s\n        end\n    end\n    return longest\n\
    end\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\"\
    ])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\"\
    , \"eeeeee\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"\
    ccc\", \"dddd\", \"eeeeee\", \"ffff\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeeeee\", \"ffff\", \"gggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2o6js4tz.jl:19\nin expression starting at\
    \ /tmp/tmp2o6js4tz.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = Nothing\n    for s in strings\n        if longest == Nothing || length(longest)\
    \ > length(s) \n            longest = s\n        end\n    end\n    return longest\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpn14vk1ip.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(Vector{String}([])) == nothing\\n  MethodError:\
    \ Cannot `convert` an object of type Type{Nothing} to an object of type String\\\
    n  Closest candidates are:\\n    convert(::Type{String}, !Matched::String) at\
    \ /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] convert(#unused#::Type{Union{Nothing, String}},\
    \ x::Type)\\n     @ Base ./some.jl:36\\n   [2] longest(strings::Vector{String})\\\
    n     @ Main /tmp/tmpn14vk1ip.jl:17\\n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpn14vk1ip.jl:24 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpn14vk1ip.jl:23\\ntest set:\
    \ Test Failed at /tmp/tmpn14vk1ip.jl:26\\n  Expression: candidate([\"x\", \"yyy\"\
    , \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\"\\n   Evaluated: \"x\" ==\
    \ \"zzzz\"\\nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmpn14vk1ip.jl:26 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmpn14vk1ip.jl:23\\nTest Summary:\
    \ | Pass  Fail  Error  Total\\ntest set      |    1     1      1      3\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = Nothing\n    for s in strings\n        if longest == Nothing || length(longest)\
    \ < length(s)\n            longest = s\n        end\n    end\n    return longest\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpzmy016_2.jl:24\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([])) == nothing\n  MethodError: Cannot\
    \ `convert` an object of type Type{Nothing} to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] convert(#unused#::Type{Union{Nothing, String}},\
    \ x::Type)\n     @ Base ./some.jl:36\n   [2] longest(strings::Vector{String})\n\
    \     @ Main /tmp/tmpzmy016_2.jl:17\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpzmy016_2.jl:24 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpzmy016_2.jl:23\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    2      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzmy016_2.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = strings[lengths(strings)==maximum(lengths(strings))]\n    if isempty(longest)\n\
    \        error(\"No string in list has same length\")\n    end\n    return longest\n\
    end\n</cell>\n<text>\nExercise 5\nWrite a function that takes a string and returns\
    \ a string with the first letter capitalized.\nusing Test\n\n@testset begin\n\n\
    candidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeqa3qqt7.jl:17\nin expression starting at\
    \ /tmp/tmpeqa3qqt7.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = strings[1]\n    for s in strings[2:end]\n        if length(longest) < length(s)\n\
    \            longest = s\n        end\n    end\n    return longest\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp7bnptb8b.jl:24\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([])) == nothing\n  BoundsError: attempt\
    \ to access 0-element Vector{String} at index [1]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] longest(strings::Vector{String})\n  \
    \   @ Main /tmp/tmp7bnptb8b.jl:11\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp7bnptb8b.jl:24 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp7bnptb8b.jl:23\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    2      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7bnptb8b.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = strings[end-1]\n    for s in strings[2:end]\n        if length(longest) <\
    \ length(s) \n            longest = s\n        end\n    end\n    return longest\n\
    end\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t\
    @test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpin5444gq.jl:19\nin expression starting at\
    \ /tmp/tmpin5444gq.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0\n        error(\"Input list is empty\")\n    end\n    max_length = maximum(strings)\n\
    \    max_length == length(strings) ? return strings[end] : longest(filter(x ->\
    \ length(x) == max_length, strings))\nend\n</code>\n<|/ a tags=string,julia,list\
    \ |>\n<| c |>\nThis does not provide an answer to the question. To critique or\
    \ request clarification from an author, leave a comment below their post. - [From\
    \ Review](/review/low-quality-posts/26817498)\n<|/ c |>\n<| c |>\nI believe it\
    \ does answer the question. `longest` returns the longest string in the input\
    \ list. `longest([\"a\", \"bb\", \"ccc\"])` returns `\"ccc\"`\n<|/ c |>\n<| c\
    \ |>\nThe question was \"How to find the longest string in a list?\" not \"How\
    \ to find the longest string in a string?\" The answer is the same.\n<|/ c |>\n\
    <| c |>\nThe question was \"How to find the longest string in a list?\" not \"\
    How to find the longest string in a string?\" The answer is the same.\n<|/ c |>\n\
    <| c |>\nThe question was \"How to find the longest string in a list?\" not \"\
    How to find the longest string in a string?\" The answer is the same.\n<|/ c |>\n\
    <| a dscore=2 |>\nThe shortest way is to use maximum:\n<code>\njulia> maximum([1,2,3])\n\
    3\n</code>\n<|/ a tags=string,julia,list |>\n<| a dscore=2 |>\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: colon expected in \"?\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq08jyqbe.jl:16\nin expression starting at\
    \ /tmp/tmpq08jyqbe.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = None \n    for s in strings \n        if longest == None or length(longest)\
    \ > length(s) \n            longest = s \n        end\n    end\n    return longest\n\
    end\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\"\
    ])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\"\
    , \"eeee\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\"\
    , \"dddd\", \"eeee\", \"ffff\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"\
    ffff\", \"gggg\", \"hhhh\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\"\
    ])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\"\
    , \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"\
    ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\"\
    , \"iiii\", \"jjjj\", \"kkkk\", \"llll\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\"\
    , \"iiii\", \"jjjj\", \"kkkk\", \"llll\", \"mmmm\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\"\
    , \"iiii\", \"jjjj\", \"kkkk\", \"llll\", \"mmmm\", \"nnnn\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"\
    ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\", \"llll\", \"mmmm\",\
    \ \"nnnn\", \"ooo\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"\
    bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"\
    jjjj\", \"kkkk\", \"llll\", \"mmmm\", \"nnnn\", \"ooo\", \"pppp\"])\n</cell>\n\
    <code language=julia-\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t\
    @test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"x\", \"\
    y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"www\",\
    \ \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"length\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7qt32dm1.jl:13\nin expression starting at /tmp/tmp7qt32dm1.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0 \n        error(\"Input list is empty\") \n    else \n        longest =\
    \ length(strings) \n        for s in strings \n            if length(s) > longest\
    \ \n                longest = length(s) \n            end \n        end \n   \
    \     return longest == 1 ? strings[1] : nothing\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\"])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector of strings and returns a vector of booleans\
    \ indicating whether each string starts with \"a\".\nusing Test\n\n@testset begin\n\
    \ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t\
    @test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk06qc2cs.jl:23\nin expression starting at\
    \ /tmp/tmpk06qc2cs.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = strings[end]\n    for s in strings[2:end]\n        if length(longest) > length(s)\n\
    \            longest = s\n        end\n    end\n    return longest\nend\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nusing Test\n\n@testset begin\n\n\
    candidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqh7pdfsh.jl:19\nin expression starting at\
    \ /tmp/tmpqh7pdfsh.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0 \n        error(\"Empty input list\")\n    end\n    max_length = maximum([length(s)\
    \ for s in strings])\n    longest_string = nothing\n    for s in strings \n  \
    \      if length(s) == max_length \n            longest_string = s\n        end\n\
    \    end\n    return longest_string\nend\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\"])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of strings and returns a vector of strings with the first\
    \ letter of each string capitalized.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprb7kl_7w.jl:23\nin expression starting at\
    \ /tmp/tmprb7kl_7w.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = strings[lengths(strings)==maximum(lengths(strings))]\n    if isempty(longest)\n\
    \        return nothing\n    else\n        return longest[1]\n    end\nend\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=2 |>\nI like using filter for these kinds of things:\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqgm8twsl.jl:18\nin expression starting at\
    \ /tmp/tmpqgm8twsl.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0 return None \n    longest_string <- strings[1] \n    for string in strings[2:length(strings)]\
    \ \n        if length(longest_string) < length(string) \n            longest_string\
    \ <- string \n        end \n    end \n    return longest_string \nend \nusing\
    \ Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmph2sa2siq.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmph2sa2siq.jl:1\n\
    in expression starting at /tmp/tmph2sa2siq.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0 return None \n    else return strings[length(strings)-1]\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector of strings and returns\
    \ the longest string in that vector. Return None in case the vector is empty.\n\
    >>> longest(['a', 'b', 'c'])\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\
    \t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"x\", \"\
    y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"www\",\
    \ \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl6ffgeod.jl:14\nin expression starting at\
    \ /tmp/tmpl6ffgeod.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0 \n        return None \n    else \n        return max(strings, key=length)\
    \ \nend\n</cell>\n<text>\nExercise 4\nWrite a function that takes a vector of\
    \ strings and returns a vector of strings where each string is the concatenation\
    \ of all the strings in the original vector. For example, if the input vector\
    \ is [\"a\", \"b\", \"c\"], the output vector should be [\"a\", \"ab\", \"abc\"\
    ]. Write a function that takes two vectors of strings and returns a vector of\
    \ strings where each string is the concatenation of all the strings in the original\
    \ vectors. For example, if the input vectors are [\"a\", \"b\", \"c\"] and [\"\
    d\", \"e\", \"f\"], the output vector should be [\"ad\", \"ade\", \"adb\", \"\
    adc\", \"ade\", \"adf\", \"bde\", \"bdf\", \"bde\", \"bdf\", \"cd\", \"cde\",\
    \ \"cdf\", \"cde\", \"cdf\", \"def\"]. Write a function that takes three vectors\
    \ of strings and returns a vector of strings where each string is the concatenation\
    \ of all the strings in the original vectors. For example, if the input vectors\
    \ are [\"a\", \"b\", \"c\"] and [\"d\", \"e\", \"f\"], the output vector should\
    \ be [\"ad\", \"ade\", \"adb\", \"adc\", \"ade\", \"adf\", \"bde\", \"bdf\", \"\
    bde\", \"bdf\", \"cd\", \"cde\", \"cdf\", \"cde\", \"cdf\", \"def\"]. Write a\
    \ function that takes four vectors of strings and returns a vector of strings\
    \ where each string is the concatenation of all the strings in the original vectors.\
    \ For example, if the input vectors are [\"a\", \"b\", \"c\"] and [\"d\", \"e\"\
    , \"f\"], the output vector should be [\"ad\", \"ade\", \"adb\", \"adc\", \"ade\"\
    , \"adf\", \"bde\", \"bdf\", \"bde\", \"bdf\", \"cd\", \"cde\", \"cdf\", \"cde\"\
    , \"cdf\", \"def\"]. Write a function that takes five vectors of strings and returns\
    \ a vector of strings where each string is the concatenation of all the strings\
    \ in the original vectors. For example, if the input vectors are [\"a\", \"b\"\
    , \"c\"] and [\"d\", \"e\", \"f\"], the output vector should be [\"ad\", \"ade\"\
    , \"adb\", \"adc\", \"ade\", \"adf\", \"bde\", \"bdf\", \"bde\", \"bdf\", \"cd\"\
    , \"cde\", \"cdf\", \"cde\", \"cdf\", \"def\"]. Write a function that takes six\
    \ vectors of strings and returns a vector of strings where each string is the\
    \ concatenation of all the strings in the original vectors. For example, if the\
    \ input vectors are [\"a\", \"b\", \"c\"] and [\"d\", \"e\", \"f\"], the output\
    \ vector should be [\"ad\", \"ade\", \"adb\", \"adc\", \"ade\", \"adf\", \"bde\"\
    , \"bdf\", \"bde\", \"bdf\", \"cd\", \"cde\", \"cdf\", \"cde\", \"cdf\", \"def\"\
    ]. Write a function that takes seven \nusing Test\n\n@testset begin\n\ncandidate\
    \ = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpubsqmk_c.jl:16\nin expression starting at\
    \ /tmp/tmpubsqmk_c.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)==0\
    \ \n        return None \n    else \n        return maximum(strings) \nend\n</cell>\n\
    <code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\"])\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the longest string in an array of strings. Return None\
    \ in case the input list is empty.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprp2ovjxm.jl:16\nin expression starting at\
    \ /tmp/tmprp2ovjxm.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = Nothing\n    for s in strings\n        if longest == Nothing || length(longest)\
    \ < length(s)\n            longest = s\n        end\n    end\n    return longest\n\
    end\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of strings and returns\
    \ a vector of strings with the longest strings removed.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvbrabpod.jl:19\nin expression starting at\
    \ /tmp/tmpvbrabpod.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = strings[lengths(strings)==maximum(lengths(strings))]\n    if isempty(longest)\n\
    \        error(\"No string in list has same length\")\n    end\n    return longest\n\
    end\n</code>\n<|/ a tags=julia |>\n<| a dscore=2 |>\nI like using filter for this:\n\
    <code>\njulia> function longest(L)\n           return filter(x -> length(x)==maximum(length(x)),\
    \ L)\n       end\nlongest (generic function with 1 method)\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp482m3be9.jl:17\nin expression starting at\
    \ /tmp/tmp482m3be9.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = strings[end-1]\n    for s in strings[2:end]\n        if length(longest) <\
    \ length(s)\n            longest = s\n        end\n    end\n    return longest\n\
    end\n</code>\n<|/ a tags=julia |>\n<| a tags=julia |>\nA simple and efficient\
    \ solution:\n<code>\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t\
    @test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"x\", \"\
    y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"www\",\
    \ \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm79dd928.jl:19\nin expression starting at\
    \ /tmp/tmpm79dd928.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = strings[end]\n    for s in strings[2:end]\n        if length(longest) < length(s)\
    \ \n            longest = s\n        end\n    end\n    return longest\nend\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>\nusing Test\n\n@testset begin\n\n\
    candidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnzdw03nj.jl:19\nin expression starting at\
    \ /tmp/tmpnzdw03nj.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0\n        error(\"Input list is empty\")\n    end\n    max_length = length(strings)\n\
    \    longest_string = strings[max_length]\n    for string in strings\n       \
    \ if length(string) == max_length\n            longest_string = string\n     \
    \   else\n            break\n        end\n    end\n    return longest_string\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector of strings\
    \ and returns a vector of strings with the same length. \nThe function should\
    \ return nothing in case the input vector is empty.\nThe function should return\
    \ nothing in case the input vector is empty.\nThe function should return nothing\
    \ in case the input vector is empty.\nThe function should return nothing in case\
    \ the input vector is empty.\nThe function should return nothing in case the input\
    \ vector is empty.\nThe function should return nothing in case the input vector\
    \ is empty.\nThe function should return nothing in case the input vector is empty.\n\
    The function should return nothing in case the input vector is empty.\nThe function\
    \ should return nothing in case the input vector is empty.\nThe function should\
    \ return nothing in case the input vector is empty.\nThe function should return\
    \ nothing in case the input vector is empty.\nThe function should return nothing\
    \ in case the input vector is empty.\nThe function should return nothing in case\
    \ the input vector is empty.\nThe function should return nothing in case the input\
    \ vector is empty.\nThe function should return nothing in case the input vector\
    \ is empty.\nThe function should return nothing in case the input vector is empty.\n\
    The function should return nothing in case the input vector is empty.\nThe function\
    \ should return nothing in case the input vector is empty.\nThe function should\
    \ return nothing in case the input vector is empty.\nThe function should return\
    \ nothing in case the input vector is empty.\nThe function should return nothing\
    \ in case the input vector is empty.\nThe function should return nothing in case\
    \ the input vector is empty.\nThe function should return nothing in case the input\
    \ vector is empty.\nThe function should return nothing in case the input vector\
    \ is empty.\nThe function should return nothing in case the input vector is empty.\n\
    The function should return nothing in case the input vector is empty.\nThe function\
    \ should return nothing in case the input vector is empty.\nThe function should\
    \ return nothing in case the input vector is empty.\nThe function should return\
    \ nothing in case the input vector is empty.\nThe function should return nothing\
    \ in case the input vector is empty.\nThe function should return nothing in case\
    \ the input vector is empty.\nThe function should return nothing in case the input\
    \ vector is empty.\nThe function should return nothing in case the input vector\
    \ is empty.\nThe function should return nothing in case the input vector is empty.\n\
    The function should return nothing in case the input vector is empty.\nThe function\
    \ should return nothing in case the input vector is empty.\nThe function should\
    \ return nothing in case the input vector is empty.\nThe function should return\
    \ nothing in case the input vector is empty.\nThe function should return nothing\
    \ in case \nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpomp6_h1t.jl:25\nin expression starting at\
    \ /tmp/tmpomp6_h1t.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0\n        error(\"Input list is empty\")\n    end\n    max_length = maximum([length(string)\
    \ for string in strings])\n    longest_string = nothing\n    for string in strings\n\
    \        if length(string) == max_length\n            longest_string = string\n\
    \        else\n            break\n        end\n    end\n    if longest_string\
    \ == nothing\n        error(\"All strings have the same length\")\n    end\n \
    \   return longest_string\nend\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia |>\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbigz0n67.jl:28\nin expression starting at\
    \ /tmp/tmpbigz0n67.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0 \n        error(\"Input list is empty\") \n    else \n        longest =\
    \ strings[length(strings)-1] \n        for s in strings \n            if length(s)\
    \ == length(longest) \n                longest = s \n            end \n      \
    \  end \n        return longest \n    end \nend \n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"\
    ffff\", \"gggg\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\"\
    , \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"\
    ffff\", \"gggg\", \"hhhh\", \"iiii\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\"\
    , \"jjjj\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\"\
    , \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\"\
    ])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\"\
    , \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\", \"llll\"\
    ])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\"\
    , \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\", \"llll\"\
    , \"mmmm\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\"\
    , \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\"\
    , \"llll\", \"mmmm\", \"nnnn\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\"\
    , \"jjjj\", \"kkkk\", \"llll\", \"mmmm\", \"nnnn\", \"oooo\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"\
    ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpux64k6or.jl:23\nin expression starting at\
    \ /tmp/tmpux64k6or.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0 \n        return None \n    else \n        return max(strings) \nend \n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp987loj60.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp987loj60.jl:1\n\
    in expression starting at /tmp/tmp987loj60.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = Nothing\n    for s in strings\n        if longest == Nothing || length(longest)\
    \ < length(s)\n            longest = s\n        end\n    end\n    return longest\n\
    end\n</code>\n<|/ a |>\n<| a tags=julia,string |>\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnc0ohyqi.jl:19\nin expression starting at\
    \ /tmp/tmpnc0ohyqi.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = strings[end-1]\n    for s in strings[2:end]\n        if length(longest) <\
    \ length(s) \n            longest = s\n        end\n    end\n    return longest\n\
    end\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work if you have multiple\
    \ strings of the same length. Try `longest(['a', 'bb', 'ccc'])`\n<|/ c |>\n<|\
    \ c |>\nI didn't see that requirement in the question. I've updated the answer\
    \ to handle that case.\n<|/ c |>\n<| a dscore=2 |>\nI came up with this solution:\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzb3zbmh9.jl:19\nin expression starting at\
    \ /tmp/tmpzb3zbmh9.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = strings[end]\n    for s in strings[2:end]\n        if length(longest) > length(s)\
    \ \n            longest = s\n        end\n    end\n    return longest\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpj2hnzchi.jl:24\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([])) == nothing\n  BoundsError: attempt\
    \ to access 0-element Vector{String} at index [0]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] longest(strings::Vector{String})\n  \
    \   @ Main /tmp/tmpj2hnzchi.jl:11\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpj2hnzchi.jl:24 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpj2hnzchi.jl:23\ntest set:\
    \ Test Failed at /tmp/tmpj2hnzchi.jl:25\n  Expression: candidate([\"x\", \"y\"\
    , \"z\"]) == \"x\"\n   Evaluated: \"z\" == \"x\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj2hnzchi.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj2hnzchi.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpj2hnzchi.jl:26\n  Expression: candidate([\"x\", \"yyy\", \"\
    zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\"\n   Evaluated: \"abc\" == \"\
    zzzz\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj2hnzchi.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj2hnzchi.jl:23\nTest Summary:\
    \ | Fail  Error  Total\ntest set      |    2      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj2hnzchi.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0 \n        return None \n    else \n        return maximum(strings) \nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector of strings and\
    \ returns the longest string in that vector. Return None if the vector is empty.\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyzsd8asa.jl:16\nin expression starting at\
    \ /tmp/tmpyzsd8asa.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = strings[end]\n    for s in strings[2:end]\n        if length(longest) < length(s)\n\
    \            longest = s\n        end\n    end\n    return longest\nend\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nusing Test\n\n@testset begin\n\n\
    candidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0awdkqox.jl:19\nin expression starting at\
    \ /tmp/tmp0awdkqox.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = Nothing\n    for s in strings\n        if longest == Nothing || length(longest)\
    \ < length(s)\n            longest = s\n        end\n    end\n    return longest\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpb3z7p87y.jl:24\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([])) == nothing\n  MethodError: Cannot\
    \ `convert` an object of type Type{Nothing} to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] convert(#unused#::Type{Union{Nothing, String}},\
    \ x::Type)\n     @ Base ./some.jl:36\n   [2] longest(strings::Vector{String})\n\
    \     @ Main /tmp/tmpb3z7p87y.jl:17\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpb3z7p87y.jl:24 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpb3z7p87y.jl:23\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    2      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb3z7p87y.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = None \n    for s in strings \n        if longest == None or length(longest)\
    \ < length(s) \n            longest = s \n        end\n    end\n    return longest\n\
    end\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\"])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector of strings and returns\
    \ a vector of strings of the same length with all strings replaced by \"*\". \n\
    \    >>> replaceall([\"a\", \"bb\", \"ccc\"])\n    [\"*\", \"*\", \"*\"]\n   \
    \ >>> replaceall([\"a\", \"bb\", \"ccc\", \"ddd\"])\n    [\"*\", \"*\", \"*\"\
    , \"*\"]\n    >>> replaceall([\"a\", \"bb\", \"ccc\", \"ddd\", \"eee\"])\n   \
    \ [\"*\", \"*\", \"*\", \"*\", \"*\"]\n    >>> replaceall([\"a\", \"bb\", \"ccc\"\
    , \"ddd\", \"eee\", \"fff\"])\n    [\"*\", \"*\", \"*\", \"*\", \"*\", \"*\"]\n\
    \    >>> replaceall([\"a\", \"bb\", \"ccc\", \"ddd\", \"eee\", \"fff\", \"ggg\"\
    ])\n    [\"*\", \"*\", \"*\", \"*\", \"*\", \"*\", \"*\"]\n    >>> replaceall([\"\
    a\", \"bb\", \"ccc\", \"ddd\", \"eee\", \"fff\", \"ggg\", \"hhh\"])\n    [\"*\"\
    , \"*\", \"*\", \"*\", \"*\", \"*\", \"*\", \"*\"]\n    >>> replaceall([\"a\"\
    , \"bb\", \"ccc\", \"ddd\", \"eee\", \"fff\", \"ggg\", \"hhh\", \"iii\"])\n  \
    \  [\"*\", \"*\", \"*\", \"*\", \"*\", \"*\", \"*\", \"*\", \"*\"]\n    >>> replaceall([\"\
    a\", \"bb\", \"ccc\", \"ddd\", \"eee\", \"fff\", \"ggg\", \"hhh\", \"iii\", \"\
    jjj\"])\n    [\"*\", \"*\", \"*\", \"*\", \"*\", \"*\", \"*\", \"*\", \"*\"]\n\
    \    >>> replaceall([\"a\", \"bb\", \"ccc\", \"ddd\", \"eee\", \"fff\", \"ggg\"\
    , \"hhh\", \"iii\", \"jjj\", \"kkk\"])\n    [\"*\", \"*\", \"*\", \"*\", \"*\"\
    , \"*\", \"*\", \"*\", \"*\", \"*\"]\n    >>> replaceall([\"a\", \"bb\", \"ccc\"\
    , \"ddd\", \"eee\", \"fff\", \"ggg\", \"hhh\", \"iii\", \"jjj\", \"kkk\", \"lll\"\
    ])\n    [\"*\", \"*\", \"*\", \"*\", \"*\", \"*\", \"*\", \"*\", \"*\", \"*\"\
    ]\n    >>> replaceall([\"a\", \"bb\", \"ccc\", \"ddd\", \"eee\", \"fff\", \"ggg\"\
    , \"hhh\", \"iii\", \"jjj\", \"kkk\", \"lll\", \"mmm\"])\n    [\"*\", \"*\", \"\
    *\", \"\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"length\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpk7gyvxk8.jl:13\nin expression starting at /tmp/tmpk7gyvxk8.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0 \n        error(\"Input is empty\") \n    else \n        longest = strings[length(strings)-1]\
    \ \n        for s in strings[2:end] \n            if length(longest) < length(s)\
    \ \n                longest = s \n            end \n        end \n        return\
    \ longest \n    end \nend \n</cell>\n<text>\nExercise 7\nWrite a function that\
    \ takes a vector of strings and returns the number of unique words in the vector.\
    \ \nThe function should ignore case and punctuation. \nThe function should ignore\
    \ empty strings. \nThe function should ignore punctuation at the end of a word.\
    \ \nThe function should ignore punctuation at the beginning of a word. \nThe function\
    \ should ignore words that are only one character long. \nThe function should\
    \ ignore words that are only one character long. \nThe function should ignore\
    \ words that are only one character long. \nThe function should ignore words that\
    \ are only one character long. \nThe function should ignore words that are only\
    \ one character long. \nThe function should ignore words that are only one character\
    \ long. \nThe function should ignore words that are only one character long. \n\
    The function should ignore words that are only one character long. \nThe function\
    \ should ignore words that are only one character long. \nThe function should\
    \ ignore words that are only one character long. \nThe function should ignore\
    \ words that are only one character long. \nThe function should ignore words that\
    \ are only one character long. \nThe function should ignore words that are only\
    \ one character long. \nThe function should ignore words that are only one character\
    \ long. \nThe function should ignore words that are only one character long. \n\
    The function should ignore words that are only one character long. \nThe function\
    \ should ignore words that are only one character long. \nThe function should\
    \ ignore words that are only one character long. \nThe function should ignore\
    \ words that are only one character long. \nThe function should ignore words that\
    \ are only one character long. \nThe function should ignore words that are only\
    \ one character long. \nThe function should ignore words that are only one character\
    \ long. \nThe function should ignore words that are only one character long. \n\
    The function should ignore words that are only one character long. \nThe function\
    \ should ignore words that are only one character long. \nThe function should\
    \ ignore words that are only one character long. \nThe function should ignore\
    \ words that are only one character long. \nThe function should ignore words that\
    \ are only one character long. \nThe function should ignore words that are only\
    \ one character long. \nThe function should ignore words that are only one character\
    \ long. \nThe function should ignore words that are only one character long. \n\
    The function should ignore words that are only one character long. \nThe function\
    \ should ignore words that are only one character long. \nThe function should\
    \ ignore words that are only one character long. \nThe function should ignore\
    \ words that are only one character long. \nusing Test\n\n@testset begin\n\ncandidate\
    \ = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0zmgugtv.jl:23\nin expression starting at\
    \ /tmp/tmp0zmgugtv.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0 return None \n    longest := strings[1]\n    for s in strings[2:] \n  \
    \      if length(s) > length(longest) \n            longest := s\n    return longest\
    \ \nend \nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxmqg8757.jl:13\nin expression\
    \ starting at /tmp/tmpxmqg8757.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = strings[end-1]\n    for s in strings[2:end]\n        if length(s)>length(longest)\n\
    \            longest = s\n        end\n    end\n    longest\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmptjsq_38e.jl:24\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([])) == nothing\n  BoundsError: attempt\
    \ to access 0-element Vector{String} at index [-1]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] longest(strings::Vector{String})\n  \
    \   @ Main /tmp/tmptjsq_38e.jl:11\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmptjsq_38e.jl:24 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmptjsq_38e.jl:23\ntest set:\
    \ Test Failed at /tmp/tmptjsq_38e.jl:25\n  Expression: candidate([\"x\", \"y\"\
    , \"z\"]) == \"x\"\n   Evaluated: \"y\" == \"x\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptjsq_38e.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptjsq_38e.jl:23\ntest set: Test\
    \ Failed at /tmp/tmptjsq_38e.jl:26\n  Expression: candidate([\"x\", \"yyy\", \"\
    zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\"\n   Evaluated: \"kkkk\" == \"\
    zzzz\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptjsq_38e.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptjsq_38e.jl:23\nTest Summary:\
    \ | Fail  Error  Total\ntest set      |    2      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptjsq_38e.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = Nothing\n    for s in strings\n        if longest == Nothing || length(longest)\
    \ < length(s)\n            longest = s\n        end\n    end\n    return longest\n\
    end\n</cell>\n<text>\nExercise 9: Write a function that takes a vector of strings\
    \ and returns the longest string in that vector. Return the first string in case\
    \ of multiple strings of the same length.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpga75vbtl.jl:19\nin expression starting at\
    \ /tmp/tmpga75vbtl.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = Nothing\n    for s in strings\n        if longest == Nothing || length(longest)\
    \ > length(s)\n            longest = s\n        end\n    end\n    return longest\n\
    end\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\"])\n</cell>\n\
    <code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\"])\n</cell>\n\
    <code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\"\
    ])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\"\
    , \"eeeee\", \"fffff\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\",\
    \ \"bb\", \"ccc\", \"dddd\", \"eeeee\", \"fffff\", \"ggggg\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\", \"\
    fffff\", \"ggggg\", \"hhhhh\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\", \"fffff\", \"ggggg\", \"hhhhh\", \"\
    iiiii\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\"\
    , \"dddd\", \"eeeee\", \"fffff\", \"ggggg\", \"hhhhh\", \"iiiii\", \"jjjjj\"])\n\
    </cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\"\
    , \"eeeee\", \"fffff\", \"ggggg\", \"hhhhh\", \"iiiii\", \"jjjjj\", \"kkkkk\"\
    ])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\"\
    , \"eeeee\", \"fffff\", \"ggggg\", \"hhhhh\", \"iiiii\", \"jjjjj\", \"kkkkk\"\
    , \"lllll\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"\
    ccc\", \"dddd\", \"eeeee\", \"fffff\", \"ggggg\", \"hhhhh\", \"iiiii\", \"jjjjj\"\
    , \"kkkkk\", \"lllll\", \"mmmmm\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\", \"fffff\", \"ggggg\", \"hhhhh\", \"\
    iiiii\", \"jjjjj\", \"kkkkk\", \"lllll\", \"mmmmm\", \"nnnnn\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\", \"\
    fffff\", \"ggggg\", \"hhhhh\", \"iiii\nusing Test\n\n@testset begin\n\ncandidate\
    \ = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps53_938u.jl:19\nin expression starting at\
    \ /tmp/tmps53_938u.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0 \n        error(\"Input is empty\")\n    end\n    max_length = maximum([length(s)\
    \ for s in strings])\n    longest_strings = [s for s in strings if length(s) ==\
    \ max_length]\n    if length(longest_strings) == 0 \n        error(\"All strings\
    \ are of the same length\")\n    end\n    return longest_strings[end]\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of strings and returns\
    \ a vector of booleans indicating whether each string is a palindrome or not.\
    \ \nThe function should return an error if the input vector is empty.\nusing Test\n\
    \n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiuf1wh9z.jl:21\nin expression starting at\
    \ /tmp/tmpiuf1wh9z.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0 \n        return None \n    else \n        return max(strings) \nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy_t4uv42.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy_t4uv42.jl:1\n\
    in expression starting at /tmp/tmpy_t4uv42.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0\n        error(\"Input list is empty\")\n    end\n    max_length = maximum(strings,\
    \ lengths)\n    max_length = if max_length == length(strings)\n        max_length\n\
    \    else\n        max_length\n    end\n    max_length = if max_length == length(strings)\n\
    \        max_length\n    else\n        max_length\n    end\n    if max_length\
    \ == length(strings)\n        max_length\n    else\n        max_length\n    end\n\
    end\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis does not work if you have multiple\
    \ strings of the same length. For example, `longest([\"a\", \"bb\", \"ccc\"])`\
    \ returns `\"a\"`.\n<|/ c |>\n<| c |>\nI fixed the bug, thanks for pointing it\
    \ out. Also I added a more efficient solution that doesn't require the lengths\
    \ array.\n<|/ c |>\n<| c |>\nI added a more efficient solution that doesn't require\
    \ the lengths array.\n<|/ c |>\n<| a dscore=2 |>\nA simple and efficient solution\
    \ is to use mapslices.\n<code>\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\
    \t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"x\", \"\
    y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"www\",\
    \ \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuj_hwu8y.jl:31\nin expression starting at\
    \ /tmp/tmpuj_hwu8y.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0 return None \n    longest := strings[1]\n    for s in strings[2:end] \n\
    \        if length(s) > length(longest) \n            longest := s\n        end\n\
    \    end\n    return longest\nend\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n\
    The most efficient way is to use an accumulator:\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwtepml71.jl:20\nin expression starting at\
    \ /tmp/tmpwtepml71.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = Nothing\n    for s in strings\n        if longest == Nothing || length(longest)\
    \ < length(s)\n            longest = s\n        end\n    end\n    return longest\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp8pkcjmz3.jl:24\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([])) == nothing\n  MethodError: Cannot\
    \ `convert` an object of type Type{Nothing} to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] convert(#unused#::Type{Union{Nothing, String}},\
    \ x::Type)\n     @ Base ./some.jl:36\n   [2] longest(strings::Vector{String})\n\
    \     @ Main /tmp/tmp8pkcjmz3.jl:17\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp8pkcjmz3.jl:24 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp8pkcjmz3.jl:23\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    2      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8pkcjmz3.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0 \n        return None \n    else \n        return max(strings) \nend\n\
    </cell>\n<text>\nExercise: Write a function that returns the longest string in\
    \ a list of strings. Use longest() from above.\nusing Test\n\n@testset begin\n\
    \ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t\
    @test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvat4wl0v.jl:16\nin expression starting at\
    \ /tmp/tmpvat4wl0v.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = strings[end]\n    for s in strings[2:end]\n        if length(longest) > length(s)\
    \ \n            longest = s\n        end\n    end\n    longest\nend\n</cell>\n\
    <text>\nExercise 4\nWrite a function that takes a vector of strings and returns\
    \ a vector of strings where each string in the input vector is repeated a number\
    \ of times equal to the number of strings in the input vector. For example, if\
    \ the input vector is [\"a\", \"b\", \"c\"], the output vector should be [\"a\"\
    , \"a\", \"a\", \"b\", \"b\", \"b\", \"c\", \"c\"].\nusing Test\n\n@testset begin\n\
    \ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t\
    @test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd14smg_l.jl:19\nin expression starting at\
    \ /tmp/tmpd14smg_l.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = None \n    for s in strings \n        if longest == None or length(longest)\
    \ < length(s) \n            longest = s\n        end\n    end\n    return longest\n\
    end\n</cell>\n<text>\nExercise 7\nWrite a function that takes a vector of strings\
    \ and returns a vector of strings with the first letter of each string capitalized.\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"length\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpfpzk1bby.jl:13\nin expression starting at /tmp/tmpfpzk1bby.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = None \n    for s in strings \n        if longest == None \n            longest\
    \ = s \n        else if length(longest) < length(s) \n            longest = s\
    \ \n        else \n            longest = None \n    return longest \nend \nusing\
    \ Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsosygamv.jl:15\nin expression starting at\
    \ /tmp/tmpsosygamv.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = strings[end-1]\n    for s in strings[2:end]\n        if length(s)>length(longest)\n\
    \            longest = s\n        end\n    end\n    longest\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector of strings and returns a vector\
    \ of strings with the first letter of each string capitalized.\nusing Test\n\n\
    @testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp77co2h6v.jl:19\nin expression starting at\
    \ /tmp/tmp77co2h6v.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = Nothing\n    for s in strings\n        if longest == Nothing || length(longest)\
    \ > length(s)\n            longest = s\n        end\n    end\n    return longest\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpz84aik11.jl:24\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([])) == nothing\n  MethodError: Cannot\
    \ `convert` an object of type Type{Nothing} to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] convert(#unused#::Type{Union{Nothing, String}},\
    \ x::Type)\n     @ Base ./some.jl:36\n   [2] longest(strings::Vector{String})\n\
    \     @ Main /tmp/tmpz84aik11.jl:17\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpz84aik11.jl:24 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpz84aik11.jl:23\ntest set:\
    \ Test Failed at /tmp/tmpz84aik11.jl:26\n  Expression: candidate([\"x\", \"yyy\"\
    , \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\"\n   Evaluated: \"x\" == \"\
    zzzz\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz84aik11.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz84aik11.jl:23\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz84aik11.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = strings[end-1]\n    for s in strings[2:end]\n        if length(longest) >\
    \ length(s) \n            longest = s\n        end\n    end\n    longest\nend\n\
    </cell>\n<code language=julia-1.4>\nlongest([\"a\", \"bb\", \"ccc\"])\n</cell>\n\
    <code language=julia-1.4>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\"])\n</cell>\n\
    <code language=julia-1.4>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\"\
    ])\n</cell>\n<code language=julia-1.4>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\"\
    , \"eeee\", \"ffff\"])\n</cell>\n<code language=julia-1.4>\nlongest([\"a\", \"\
    bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\"])\n</cell>\n<code language=julia-1.4>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\"\
    ])\n</cell>\n<code language=julia-1.4>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\"\
    , \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\"])\n</cell>\n<code language=julia-1.4>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\"\
    , \"iiii\", \"jjjj\"])\n</cell>\n<code language=julia-1.4>\nlongest([\"a\", \"\
    bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"\
    jjjj\", \"kkkk\"])\n</cell>\n<code language=julia-1.4>\nlongest([\"a\", \"bb\"\
    , \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\"\
    , \"kkkk\", \"llll\"])\n</cell>\n<code language=julia-1.4>\nlongest([\"a\", \"\
    bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"\
    jjjj\", \"kkkk\", \"llll\", \"mmmm\"])\n</cell>\n<code language=julia-1.4>\nlongest([\"\
    a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\"\
    , \"jjjj\", \"kkkk\", \"llll\", \"mmmm\", \"nnnn\"])\n</cell>\n<code language=julia-1.4>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\"\
    , \"iiii\", \"jjjj\", \"kkkk\", \"llll\", \"mmmm\", \"nnnn\", \"oooo\"])\n</cell>\n\
    <code language=julia-1.4>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\"\
    , \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\", \"llll\nusing Test\n\
    \n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnbexo42y.jl:19\nin expression starting at\
    \ /tmp/tmpnbexo42y.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = strings[1]\n    for s in strings[2:end]\n        if length(s) > length(longest)\n\
    \            longest = s\n        end\n    end\n    longest\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector of strings and returns a vector\
    \ of the same length with all strings replaced by '?'\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5t8zbb01.jl:19\nin expression starting at\
    \ /tmp/tmp5t8zbb01.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = Nothing\n    for s in strings\n        if longest == Nothing || length(longest)\
    \ > length(s)\n            longest = s\n        end\n    end\n    return longest\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpp8ifpxmm.jl:24\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([])) == nothing\n  MethodError: Cannot\
    \ `convert` an object of type Type{Nothing} to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] convert(#unused#::Type{Union{Nothing, String}},\
    \ x::Type)\n     @ Base ./some.jl:36\n   [2] longest(strings::Vector{String})\n\
    \     @ Main /tmp/tmpp8ifpxmm.jl:17\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpp8ifpxmm.jl:24 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpp8ifpxmm.jl:23\ntest set:\
    \ Test Failed at /tmp/tmpp8ifpxmm.jl:26\n  Expression: candidate([\"x\", \"yyy\"\
    , \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\"\n   Evaluated: \"x\" == \"\
    zzzz\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp8ifpxmm.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp8ifpxmm.jl:23\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp8ifpxmm.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = strings[end-1]\n    for s in strings[2:end]\n        if length(longest) <\
    \ length(s) \n            longest = s\n        end\n    end\n    return longest\n\
    end\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia,string |>\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3hpygtjf.jl:19\nin expression starting at\
    \ /tmp/tmp3hpygtjf.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = Nothing\n    for s in strings\n        if longest == Nothing || length(longest)\
    \ > length(s)\n            longest = s\n        end\n    end\n    return longest\n\
    end\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\"])\n</cell>\n\
    <code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\"])\n</cell>\n\
    <code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\"\
    ])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\"\
    , \"eeee\", \"ffff\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"\
    bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\"\
    ])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\"\
    , \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\"\
    , \"iiii\", \"jjjj\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"\
    bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"\
    jjjj\", \"kkkk\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\"\
    , \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\"\
    , \"kkkk\", \"llll\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"\
    bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"\
    jjjj\", \"kkkk\", \"llll\", \"mmmm\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\"\
    , \"jjjj\", \"kkkk\", \"llll\", \"mmmm\", \"nnnn\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\"\
    , \"iiii\", \"jjjj\", \"kkkk\", \"llll\", \"mmmm\", \"nnnn\", \"oooo\"])\n</cell>\n\
    <code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\"\
    , \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\", \"ll\nusing Test\n\
    \n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptf0bg0v8.jl:19\nin expression starting at\
    \ /tmp/tmptf0bg0v8.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0\n        error(\"Empty list\")\n    end\n    max_length = length(strings)\n\
    \    longest_string = strings[max_length]\n    for s in strings[2:end]\n     \
    \   if length(s) == max_length\n            longest_string = s\n        else\n\
    \            break\n        end\n    end\n    return longest_string\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp1fevm3hc.jl:30\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([])) == nothing\n  Empty list\n  Stacktrace:\n\
    \   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] longest(strings::Vector{String})\n\
    \     @ Main /tmp/tmp1fevm3hc.jl:12\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp1fevm3hc.jl:30 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp1fevm3hc.jl:29\ntest set:\
    \ Test Failed at /tmp/tmp1fevm3hc.jl:31\n  Expression: candidate([\"x\", \"y\"\
    , \"z\"]) == \"x\"\n   Evaluated: \"z\" == \"x\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1fevm3hc.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1fevm3hc.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp1fevm3hc.jl:32\n  Expression: candidate([\"x\", \"yyy\", \"\
    zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\"\n   Evaluated: \"abc\" == \"\
    zzzz\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1fevm3hc.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1fevm3hc.jl:29\nTest Summary:\
    \ | Fail  Error  Total\ntest set      |    2      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1fevm3hc.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0 \n        return None \n    else \n        longest_string <- strings[length(strings)-1]\
    \ \n        for string in strings \n            if length(longest_string) < length(string)\
    \ \n                longest_string <- string \n        longest_string \nend \n\
    </cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\"])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector of strings and returns\
    \ a vector of the same length with all strings replaced by \"*\". \n    >>> replace_by_stars([\"\
    a\", \"bb\", \"ccc\"])\n    [\"a\", \"bb\", \"ccc\"]\n    >>> replace_by_stars([\"\
    a\", \"bb\", \"ccc\", \"ddd\"])\n    [\"a\", \"bb\", \"ccc\", \"ddd\"]\n    >>>\
    \ replace_by_stars([])\n    []\n    >>> replace_by_stars([\"a\", \"bb\", \"ccc\"\
    , \"ddd\"])\n    [\"a\", \"bb\", \"ccc\", \"ddd\"]\n    >>> replace_by_stars([\"\
    a\", \"bb\", \"ccc\", \"ddd\", \"eee\"])\n    [\"a\", \"bb\", \"ccc\", \"ddd\"\
    , \"eee\"]\n    >>> replace_by_stars([\"a\", \"bb\", \"ccc\", \"ddd\", \"eee\"\
    , \"fff\"])\n    [\"a\", \"bb\", \"ccc\", \"ddd\", \"eee\", \"fff\"]\n    >>>\
    \ replace_by_stars([\"a\", \"bb\", \"ccc\", \"ddd\", \"eee\", \"fff\", \"ggg\"\
    ])\n    [\"a\", \"bb\", \"ccc\", \"ddd\", \"eee\", \"fff\", \"ggg\"]\n    >>>\
    \ replace_by_stars([\"a\", \"bb\", \"ccc\", \"ddd\", \"eee\", \"fff\", \"ggg\"\
    , \"hhh\"])\n    [\"a\", \"bb\", \"ccc\", \"ddd\", \"eee\", \"fff\", \"ggg\",\
    \ \"hhh\"]\n    >>> replace_by_stars([\"a\", \"bb\", \"ccc\", \"ddd\", \"eee\"\
    , \"fff\", \"ggg\", \"hhh\", \"iii\"])\n    [\"a\", \"bb\", \"ccc\", \"ddd\",\
    \ \"eee\", \"fff\", \"ggg\", \"hhh\", \"iii\"]\n    >>> replace_by_stars([\"a\"\
    , \"bb\", \"ccc\", \"ddd\", \"eee\", \"fff\", \"ggg\", \"hhh\", \"iii\", \"jjj\"\
    ])\n    [\"a\", \"bb\", \"ccc\", \"ddd\", \"eee\", \"fff\", \"ggg\", \"hhh\",\
    \ \"iii\", \"jjj\"]\n    >>> replace_by_stars([\"a\", \"bb\", \"ccc\", \"ddd\"\
    , \"eee\", \"fff\", \"ggg\", \"hhh\", \"iii\", \"jjj\", \"kkk\"])\n    [\"a\"\
    , \"bb\", \"ccc\", \"ddd\", \"eee\", \"fff\", \"ggg\", \"hhh\", \"iii\", \"jjj\"\
    , \"kkk\"]\n    >>> replace_by_stars([\"a\", \"bb\", \"ccc\", \"ddd\", \"ee\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7w9r05bx.jl:20\nin expression starting at\
    \ /tmp/tmp7w9r05bx.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0 return None \n    longest := strings[1]\n    for s in strings[2:end] \n\
    \        if length(s) > length(longest) \n            longest := s \n    return\
    \ longest \nend\n</code>\n<|/ a tags=julia,string |>\n<| c |>\nThis doesn't work\
    \ if you have multiple strings of the same length. Try `longest([\"a\", \"bb\"\
    , \"ccc\"])`.\n<|/ c |>\n<| c |>\nThanks for pointing that out. I've updated the\
    \ answer to account for that case.\n<|/ c |>\n<| a |>\n<code>\nusing Test\n\n\
    @testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9gbvyi5s.jl:18\nin expression starting at\
    \ /tmp/tmp9gbvyi5s.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0 \n        return None \n    else \n        longest_str = strings[length(strings)-1]\
    \ \n        for str in strings \n            if length(str) == length(longest_str)\
    \ \n                longest_str = str \n            end \n        end \n     \
    \   return longest_str \n    end \nend \n</cell>\n<code language=julia-1.0>\n\
    longest([\"a\", \"bb\", \"ccc\"])\n</cell>\n<code language=julia-1.0>\nlongest([\"\
    a\", \"bb\", \"ccc\", \"dddd\"])\n</cell>\n<code language=julia-1.0>\nlongest([\"\
    a\", \"bb\", \"ccc\", \"dddd\", \"eeee\"])\n</cell>\n<code language=julia-1.0>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\"])\n</cell>\n<code\
    \ language=julia-1.0>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"\
    ffff\", \"gggg\"])\n</cell>\n<code language=julia-1.0>\nlongest([\"a\", \"bb\"\
    , \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\"])\n</cell>\n<code\
    \ language=julia-1.0>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"\
    ffff\", \"gggg\", \"hhhh\", \"iiii\"])\n</cell>\n<code language=julia-1.0>\nlongest([\"\
    a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\"\
    , \"jjjj\"])\n</cell>\n<code language=julia-1.0>\nlongest([\"a\", \"bb\", \"ccc\"\
    , \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\"\
    ])\n</cell>\n<code language=julia-1.0>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\"\
    , \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\", \"llll\"\
    ])\n</cell>\n<code language=julia-1.0>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\"\
    , \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\", \"llll\"\
    , \"mmmm\"])\n</cell>\n<code language=julia-1.0>\nlongest([\"a\", \"bb\", \"ccc\"\
    , \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\"\
    , \"llll\", \"mmmm\", \"nnnn\"])\n</cell>\n<code language=julia-1.0>\nlongest([\"\
    a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\"\
    , \"jjjj\", \"kkkk\", \"llll\", \"mmmm\", \"nnnn\", \"oooo\"])\n</cell>\n<code\
    \ language=julia-1.0>\nlongest([\"a\", \"bb\", \"\nusing Test\n\n@testset begin\n\
    \ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t\
    @test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp05lcfvww.jl:23\nin expression starting at\
    \ /tmp/tmp05lcfvww.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = strings[end]\n    for s in strings[2:end]\n        if length(longest) < length(s)\n\
    \            longest = s\n        end\n    end\n    return longest\nend\n</code>\n\
    <|/ a tags=julia |>\n<| c |>\nThanks for your answer. Your code works but it is\
    \ slower than the one I posted in the question. Do you know why that is?\n<|/\
    \ c |>\n<| c |>\nI added a benchmark test in my answer. Your code is slower than\
    \ mine because you call `length` on every iteration. My code only calls length\
    \ once.\n<|/ c |>\n<| c |>\nI added a benchmark test in my answer. Your code is\
    \ slower than mine because you call `length` on every iteration. My code only\
    \ calls length once.\n<|/ c |>\n<| c |>\nThanks for your answer. Your code works\
    \ but it is slower than the one I posted in the question. Do you know why that\
    \ is?\n<|/ c |>\n<| c |>\nI added a benchmark test in my answer. Your code is\
    \ slower than mine because you call `length` on every iteration. My code only\
    \ calls length once.\n<|/ c |>\n<| a |>\nI wrote a benchmark test to compare the\
    \ performance of different solutions. I used the code from my question. Here are\
    \ the results for my machine:\n<code>\njulia> longest([\"a\", \"b\", \"c\", \"\
    d\"])\n\"a\"\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1mffi9wr.jl:19\nin expression starting at\
    \ /tmp/tmp1mffi9wr.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = Nothing\n    for s in strings\n        if longest == Nothing || length(longest)\
    \ > length(s)\n            longest = s\n        end\n    end\n    return longest\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpzv3j1j05.jl:24\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([])) == nothing\n  MethodError: Cannot\
    \ `convert` an object of type Type{Nothing} to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] convert(#unused#::Type{Union{Nothing, String}},\
    \ x::Type)\n     @ Base ./some.jl:36\n   [2] longest(strings::Vector{String})\n\
    \     @ Main /tmp/tmpzv3j1j05.jl:17\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpzv3j1j05.jl:24 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpzv3j1j05.jl:23\ntest set:\
    \ Test Failed at /tmp/tmpzv3j1j05.jl:26\n  Expression: candidate([\"x\", \"yyy\"\
    , \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\"\n   Evaluated: \"x\" == \"\
    zzzz\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzv3j1j05.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzv3j1j05.jl:23\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzv3j1j05.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0 return None \n    max_length = length(strings)\n    longest_string = strings[max_length]\n\
    \    for s in strings[2:end]\n        if length(s) > max_length \n           \
    \ max_length = length(s)\n            longest_string = s\n        end\n    end\n\
    \    return longest_string\nend\n</code>\n<|/ a tags=julia,string |>\n<| a dscore=1\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz4y7bh8m.jl:22\nin expression starting at\
    \ /tmp/tmpz4y7bh8m.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = strings[1]\n    for s in strings[2:end]\n        if length(longest) > length(s)\n\
    \            longest = s\n        end\n    end\n    return longest\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpp5_u6fk0.jl:24\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([])) == nothing\n  BoundsError: attempt\
    \ to access 0-element Vector{String} at index [1]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] longest(strings::Vector{String})\n  \
    \   @ Main /tmp/tmpp5_u6fk0.jl:11\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpp5_u6fk0.jl:24 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpp5_u6fk0.jl:23\ntest set:\
    \ Test Failed at /tmp/tmpp5_u6fk0.jl:26\n  Expression: candidate([\"x\", \"yyy\"\
    , \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\"\n   Evaluated: \"x\" == \"\
    zzzz\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp5_u6fk0.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp5_u6fk0.jl:23\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp5_u6fk0.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = strings[end]\n    for s in strings[2:end]\n        if length(longest) > length(s)\n\
    \            longest = s\n        end\n    end\n    longest\nend\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\", \"fffff\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\", \"\
    fffff\", \"ggggg\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\"\
    , \"ccc\", \"dddd\", \"eeeee\", \"fffff\", \"ggggg\", \"hhhhh\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\", \"\
    fffff\", \"ggggg\", \"hhhhh\", \"iiiii\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\", \"fffff\", \"ggggg\", \"\
    hhhhh\", \"iiiii\", \"jjjjj\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\", \"fffff\", \"ggggg\", \"hhhhh\", \"\
    iiiii\", \"jjjjj\", \"kkkkk\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\", \"fffff\", \"ggggg\", \"hhhhh\", \"\
    iiiii\", \"jjjjj\", \"kkkkk\", \"lllll\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\", \"fffff\", \"ggggg\", \"\
    hhhhh\", \"iiiii\", \"jjjjj\", \"kkkkk\", \"lllll\", \"mmmmm\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\", \"\
    fffff\", \"ggggg\", \"hhhhh\", \"iiiii\", \"jjjjj\", \"kkkkk\", \"lllll\", \"\
    mmmmm\", \"nnnnn\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\"\
    , \"ccc\", \"dddd\", \"eeeee\", \"fffff\", \"ggggg\", \"hhhhh\", \"iiiii\", \"\
    \nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpau7cstk3.jl:19\nin expression starting at\
    \ /tmp/tmpau7cstk3.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = Nothing\n    for s in strings\n        if longest == Nothing || length(longest)\
    \ > length(s)\n            longest = s\n        end\n    end\n    return longest\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpahjmwqs7.jl:24\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([])) == nothing\n  MethodError: Cannot\
    \ `convert` an object of type Type{Nothing} to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] convert(#unused#::Type{Union{Nothing, String}},\
    \ x::Type)\n     @ Base ./some.jl:36\n   [2] longest(strings::Vector{String})\n\
    \     @ Main /tmp/tmpahjmwqs7.jl:17\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpahjmwqs7.jl:24 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpahjmwqs7.jl:23\ntest set:\
    \ Test Failed at /tmp/tmpahjmwqs7.jl:26\n  Expression: candidate([\"x\", \"yyy\"\
    , \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\"\n   Evaluated: \"x\" == \"\
    zzzz\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpahjmwqs7.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpahjmwqs7.jl:23\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpahjmwqs7.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = Nothing\n    for s in strings\n        if longest == Nothing || length(longest)\
    \ > length(s)\n            longest = s\n        end\n    end\n    return longest\n\
    end\n</code>\n<|/ a tags=julia,string |>\n<| a |>\nA simple and efficient solution\
    \ is to use findfirst:\n<code>\njulia> findfirst(x -> length(x) > 1, [\"a\", \"\
    bb\", \"ccc\"])\n\"ccc\"\n</code>\n<|/ a tags=julia,string dscore=2 |>\n<| a dscore=2\
    \ |>\n<code>\njulia> longest(filter(x -> length(x) > 1, [\"a\", \"bb\", \"ccc\"\
    ]))\n\"ccc\"\n</code>\n<|/ a tags=julia,string |>\n<| a dscore=1 |>\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplfvt9xve.jl:19\nin expression starting at\
    \ /tmp/tmplfvt9xve.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = Nothing\n    for s in strings\n        if longest == Nothing || length(longest)\
    \ > length(s) \n            longest = s\n        end\n    end\n    return longest\n\
    end\n</code>\n<|/ a tags=julia,string |>\n<| c |>\nI like this solution, but I\
    \ wonder if it can be done without looping over the strings. I wonder if there\
    \ is a way to do this in one line without looping over the strings. I wonder if\
    \ there is a way to do this in one line without looping over the strings. I wonder\
    \ if there is a way to do this in one line without looping over the strings. I\
    \ wonder if there is a way to do this in one line without looping over the strings.\
    \ I wonder if there is a way to do this in one line without looping over the strings.\
    \ I wonder if there is a way to do this in one line without looping over the strings.\
    \ I wonder if there is a way to do this in one line without looping over the strings.\
    \ I wonder if there is a way to do this in one line without looping over the strings.\
    \ I wonder if there is a way to do this in one line without looping over the strings.\
    \ I wonder if there is a way to do this in one line without looping over the strings.\
    \ I wonder if there is a way to do this in one line without looping over the strings.\
    \ I wonder if there is a way to do this in one line without looping over the strings.\
    \ I wonder if there is a way to do this in one line without looping over the strings.\
    \ I wonder if there is a way to do this in one line without looping over the strings.\
    \ I wonder if there is a way to do this in one line without looping over the strings.\
    \ I wonder if there is a way to do this in one line without looping over the strings.\
    \ I wonder if there is a way to do this in one line without looping over the strings.\
    \ I wonder if there is a way to do this in one line without looping over the strings.\
    \ I wonder if there is a way to do this in one line without looping over the strings.\
    \ I wonder if there is a way to do this in one line without looping over the strings.\
    \ I wonder if there is a way to do this in one line without looping over the strings.\
    \ I wonder if there is a way to do this in one line without looping over the strings.\
    \ I wonder if there is a way to do this in one line without looping over the strings.\
    \ I wonder if there is a way to do this in one line without looping over the strings.\
    \ I wonder if there is a way to do this in one line without looping over the strings.\
    \ I wonder if there is a way to do this in one line without looping over the strings.\
    \ I wonder if there is a way to do this in one line without looping over the strings.\
    \ I wonder if there is a way to do this in one line without \nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp85tlaa0s.jl:19\nin expression starting at\
    \ /tmp/tmp85tlaa0s.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0\n        error(\"empty list\")\n    end\n    max_length = maximum([length(s)\
    \ for s in strings])\n    longest_string = nothing\n    for s in strings\n   \
    \     if length(s) < max_length\n            longest_string = s\n        else\n\
    \            break\n        end\n    end\n    if longest_string == nothing\n \
    \       error(\"no strings of length $max_length\")\n    end\n    return longest_string\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmprq_k8vf0.jl:33\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([])) == nothing\n  empty list\n  Stacktrace:\n\
    \   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] longest(strings::Vector{String})\n\
    \     @ Main /tmp/tmprq_k8vf0.jl:12\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmprq_k8vf0.jl:33 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmprq_k8vf0.jl:32\ntest set:\
    \ Error During Test at /tmp/tmprq_k8vf0.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([\"x\", \"y\", \"z\"]) == \"x\"\n  no strings of length 1\n  Stacktrace:\n\
    \   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] longest(strings::Vector{String})\n\
    \     @ Main /tmp/tmprq_k8vf0.jl:24\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmprq_k8vf0.jl:34 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmprq_k8vf0.jl:32\ntest set:\
    \ Test Failed at /tmp/tmprq_k8vf0.jl:35\n  Expression: candidate([\"x\", \"yyy\"\
    , \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\"\n   Evaluated: \"yyy\" ==\
    \ \"zzzz\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprq_k8vf0.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprq_k8vf0.jl:32\nTest Summary:\
    \ | Fail  Error  Total\ntest set      |    1      2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 1 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprq_k8vf0.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = strings[lengths(strings)==maximum(lengths(strings))]\n    if isempty(longest)\n\
    \        error(\"No strings found\")\n    end\n    return longest\nend\n</code>\n\
    <|/ a tags=julia |>\n<| c |>\nThis doesn't work if you have multiple strings of\
    \ the same length. For example, `longest([\"a\", \"b\", \"c\", \"a\"])` returns\
    \ `\"a\"` instead of `\"b\"`.\n<|/ c |>\n<| c |>\nThanks for pointing that out.\
    \ I fixed the code accordingly.\n<|/ c |>\n<| a dscore=1 |>\nI came up with this\
    \ solution:\n<code>\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t\
    @test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"x\", \"\
    y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"www\",\
    \ \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu6msa7ra.jl:17\nin expression starting at\
    \ /tmp/tmpu6msa7ra.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0 \n        error(\"Input list is empty\") \n    else \n        longest =\
    \ length(strings)\n        for s in strings \n            if length(s) > longest\
    \ \n                longest = length(s) \n            end \n        end \n   \
    \     longest\n    end \nend \n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"bb\", \"ccc\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"\
    bb\", \"ccc\", \"dddd\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\"\
    , \"bb\", \"ccc\", \"dddd\", \"eeee\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"\
    ffff\", \"gggg\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\"\
    , \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"\
    ffff\", \"gggg\", \"hhhh\", \"iiii\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\"\
    , \"jjjj\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\"\
    , \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\"\
    ])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\"\
    , \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\", \"llll\"\
    ])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\"\
    , \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\", \"llll\"\
    , \"mmmm\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\"\
    , \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\"\
    , \"llll\", \"mmmm\", \"nnnn\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\"\
    , \"jjjj\", \"kkkk\", \"llll\", \"mmmm\", \"nnnn\", \"ooo\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"\
    ffff\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4qf76_tm.jl:23\nin expression starting at\
    \ /tmp/tmp4qf76_tm.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = strings[end-1]\n    for s in strings[2:end]\n        if length(longest) >\
    \ length(s) \n            longest = s\n        end\n    end\n    longest\nend\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=string,julia |>\n<code>\nusing Test\n\n\
    @testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy593j2wp.jl:19\nin expression starting at\
    \ /tmp/tmpy593j2wp.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0 \n        return None \n    else \n        return maximum(strings) \nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgy3ozqki.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgy3ozqki.jl:1\n\
    in expression starting at /tmp/tmpgy3ozqki.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = strings[1]\n    for s in strings[2:end]\n        if length(longest) > length(s)\
    \ \n            longest = s\n        end\n    end\n    return longest\nend\n</code>\n\
    <|/ a tags=julia |>\n<| c |>\nThis doesn't work if you have multiple strings of\
    \ the same length. For example, `longest([\"a\", \"bb\", \"ccc\", \"ddd\"])` returns\
    \ `ddd` instead of `ccc`.\n<|/ c |>\n<| c |>\nThanks for pointing that out. I've\
    \ fixed the code accordingly.\n<|/ c |>\n<| a dscore=2 |>\nThe shortest solution\
    \ that I came up with is:\n<code>\nusing Test\n\n@testset begin\n\ncandidate =\
    \ longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaln2rwph.jl:19\nin expression starting at\
    \ /tmp/tmpaln2rwph.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0\n        return nothing\n    ends_with_null = ends_with(strings, \"\")\n\
    \    if ends_with_null\n        return strings[ends_with_null][1]\n    ends_with_space\
    \ = ends_with(strings, \" \")\n    if ends_with_space\n        return strings[ends_with_space][1]\n\
    \    ends_with_period = ends_with(strings, \".\")\n    if ends_with_period\n \
    \       return strings[ends_with_period][1]\n    ends_with_dash = ends_with(strings,\
    \ \"-\")\n    if ends_with_dash\n        return strings[ends_with_dash][1]\n \
    \   ends_with_underscore = ends_with(strings, \"_\")\n    if ends_with_underscore\n\
    \        return strings[ends_with_underscore][1]\n    ends_with_colon = ends_with(strings,\
    \ \":\")\n    if ends_with_colon\n        return strings[ends_with_colon][1]\n\
    \    ends_with_semicolon = ends_with(strings, \";\")\n    if ends_with_semicolon\n\
    \        return strings[ends_with_semicolon][1]\n    ends_with_comma = ends_with(strings,\
    \ \",\")\n    if ends_with_comma\n        return strings[ends_with_comma][1]\n\
    \    ends_with_colon = ends_with(strings, \":\")\n    if ends_with_colon\n   \
    \     return strings[ends_with_colon][1]\n    ends_with_equal = ends_with(strings,\
    \ \"=\")\n    if ends_with_equal\n        return strings[ends_with_equal][1]\n\
    \    ends_with_open_bracket = ends_with(strings, \"(\")\n    if ends_with_open_bracket\n\
    \        return strings[ends_with_open_bracket][1]\n    ends_with_close_bracket\
    \ = ends_with(strings, \")\")\n    if ends_with_close_bracket\n        return\
    \ strings[ends_with_close_bracket][1]\n    ends_with_open_square_bracket = ends_with(strings,\
    \ \"[\")\n    if ends_with_open_square_bracket\n        return strings[ends_with_open_square_bracket][1]\n\
    \    ends_with_close_square_bracket = ends_with(strings, \"]\")\n    if ends_with_close_square_bracket\n\
    \        return strings[ends_with_close_square_bracket][1]\n    ends_with_open_brace\
    \ = ends_with(strings, \"{\")\n    if ends_with_open_brace\n        return strings[ends_with_open_brace][1]\n\
    \    ends_with_close_brace = ends_with(strings, \"}\")\n    if ends_with_close_brace\n\
    \        return strings[ends_with_close_brace][1]\n    ends_with_open_bracket\
    \ = ends_with(strings, \"(\")\n    if ends_with_open_bracket\n        return strings[ends_with_open_bracket][1]\n\
    \    ends_with_close_bracket = ends_with(strings, \")\")\n    if end\nusing Test\n\
    \n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2lky7w_l.jl:65\nin expression starting at /tmp/tmp2lky7w_l.jl:65\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0 return None \n    else return strings[length(strings)-1] \nend\n</cell>\n\
    <code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"ddd\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"ddd\", \"eee\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"ddd\", \"eee\", \"fff\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"ddd\", \"eee\", \"fff\", \"ggg\"])\n</cell>\n\
    <code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"ddd\", \"eee\",\
    \ \"fff\", \"ggg\", \"hhh\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"bb\", \"ccc\", \"ddd\", \"eee\", \"fff\", \"ggg\", \"hhh\", \"iii\"])\n\
    </cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"ddd\",\
    \ \"eee\", \"fff\", \"ggg\", \"hhh\", \"iii\", \"jjj\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"ddd\", \"eee\", \"fff\", \"ggg\", \"hhh\",\
    \ \"iii\", \"jjj\", \"kkk\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"bb\", \"ccc\", \"ddd\", \"eee\", \"fff\", \"ggg\", \"hhh\", \"iii\", \"\
    jjj\", \"kkk\", \"lll\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\"\
    , \"bb\", \"ccc\", \"ddd\", \"eee\", \"fff\", \"ggg\", \"hhh\", \"iii\", \"jjj\"\
    , \"kkk\", \"lll\", \"mmm\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"bb\", \"ccc\", \"ddd\", \"eee\", \"fff\", \"ggg\", \"hhh\", \"iii\", \"\
    jjj\", \"kkk\", \"lll\", \"mmm\", \"nnn\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"ddd\", \"eee\", \"fff\", \"ggg\", \"hhh\",\
    \ \"iii\", \"jjj\", \"kkk\", \"lll\", \"mmm\", \"nnn\", \"ooo\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"ddd\", \"eee\", \"fff\"\
    , \"ggg\", \"hhh\", \"iii\", \"jjj\", \"kkk\", \"lll\", \"mmm\nusing Test\n\n\
    @testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpakwjeaza.jl:14\nin expression starting at\
    \ /tmp/tmpakwjeaza.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0 \n        return None \n    else \n        return max(strings, key=length)\
    \ \nend\n</cell>\n<code language=julia-1.4>\nlongest([\"a\", \"bb\", \"ccc\"])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of times\
    \ a substring appears in a given string.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp32m_cvyk.jl:16\nin expression starting at\
    \ /tmp/tmp32m_cvyk.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = Nothing\n    for s in strings\n        if longest == Nothing || length(longest)\
    \ > length(s)\n            longest = s\n        end\n    end\n    longest\nend\n\
    </cell>\n<text>\nExercise 9: longest\nWrite a function that takes a list of strings\
    \ and returns the longest string in the list.\nWrite a function that takes a list\
    \ of strings and returns the shortest string in the list.\nWrite a function that\
    \ takes a list of strings and returns the string with the smallest alphabetical\
    \ order.\nWrite a function that takes a list of strings and returns the string\
    \ with the largest alphabetical order.\nWrite a function that takes a list of\
    \ strings and returns the string with the smallest alphabetical order and largest\
    \ alphabetical order.\nWrite a function that takes a list of strings and returns\
    \ the string with the smallest alphabetical order and shortest alphabetical order.\n\
    Write a function that takes a list of strings and returns the string with the\
    \ largest alphabetical order and shortest alphabetical order.\nWrite a function\
    \ that takes a list of strings and returns the string with the smallest alphabetical\
    \ order and largest alphabetical order and shortest alphabetical order.\nWrite\
    \ a function that takes a list of strings and returns the string with the smallest\
    \ alphabetical order and largest alphabetical order and shortest alphabetical\
    \ order and shortest alphabetical order.\nWrite a function that takes a list of\
    \ strings and returns the string with the smallest alphabetical order and largest\
    \ alphabetical order and shortest alphabetical order and shortest alphabetical\
    \ order and shortest alphabetical order.\nWrite a function that takes a list of\
    \ strings and returns the string with the smallest alphabetical order and largest\
    \ alphabetical order and shortest alphabetical order and shortest alphabetical\
    \ order and shortest alphabetical order and shortest alphabetical order.\nWrite\
    \ a function that takes a list of strings and returns the string with the smallest\
    \ alphabetical order and largest alphabetical order and shortest alphabetical\
    \ order and shortest alphabetical order and shortest alphabetical order and shortest\
    \ alphabetical order and shortest alphabetical order.\nWrite a function that takes\
    \ a list of strings and returns the string with the smallest alphabetical order\
    \ and largest alphabetical order and shortest alphabetical order and shortest\
    \ alphabetical order and shortest alphabetical order and shortest alphabetical\
    \ order and shortest alphabetical order and shortest alphabetical order.\nWrite\
    \ a function that takes a list of strings and returns the string with the smallest\
    \ alphabetical order and largest alphabetical order and shortest alphabetical\
    \ order and shortest alphabetical order and shortest alphabetical order and shortest\
    \ alphabetical order and shortest alphabetical order \nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcfa_064q.jl:19\nin expression starting at\
    \ /tmp/tmpcfa_064q.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = strings[1]\n    for s in strings[2:end]\n        if length(longest) < length(s)\n\
    \            longest = s\n        end\n    end\n    return longest\nend\n</cell>\n\
    <code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\"])\n</cell>\n<text>\n\
    Exercise: Write a function that takes a vector of strings and returns a vector\
    \ of booleans indicating whether each string is a palindrome. For example, [\"\
    a\", \"bb\", \"ccc\"] should return [true, false, true].\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9ewgvw8d.jl:19\nin expression starting at\
    \ /tmp/tmp9ewgvw8d.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = strings[end]\n    for s in strings[2:end]\n        if length(longest) < length(s)\
    \ \n            longest = s\n        end\n    end\n    return longest\nend\n</cell>\n\
    <code language=julia-1.4>\nlongest([\"a\", \"bb\", \"ccc\"])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of strings and returns a vector\
    \ of booleans indicating whether each string is a palindrome or not. For example,\
    \ [\"abba\", \"aba\", \"abba\"] should return [true, false, true].\nusing Test\n\
    \n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbc0e7ki6.jl:19\nin expression starting at\
    \ /tmp/tmpbc0e7ki6.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = strings[end-1]\n    for s in strings[2:end]\n        if length(longest) <\
    \ length(s)\n            longest = s\n        end\n    end\n    longest\nend\n\
    </code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work if there are multiple strings\
    \ of the same length. Try it with `longest([\"a\", \"bb\", \"ccc\", \"ddd\"])`.\n\
    <|/ c |>\n<| c |>\nYes, I missed that case. Thanks for pointing it out. I've updated\
    \ the answer.\n<|/ c |>\n<| a tags=julia,string |>\nA simple solution using max.\n\
    <code>\njulia> longest(L) = max(L, length=>length for L in L)\nlongest (generic\
    \ function with 1 method)\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\
    \t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"x\", \"\
    y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"www\",\
    \ \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc3xullll.jl:19\nin expression starting at\
    \ /tmp/tmpc3xullll.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = strings[end-1]\n    for s in strings[2:end]\n        if length(longest) <\
    \ length(s) \n            longest = s\n        end\n    end\n    return longest\n\
    end\n</code>\n<|/ a |>\n<| a dscore=1 |>\n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t\
    @test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprmqq_5hy.jl:19\nin expression starting at\
    \ /tmp/tmprmqq_5hy.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0 \n        return None \n    else \n        return max(strings) \nend\n\
    </cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector of strings\
    \ and returns a vector of integers representing the number of times each string\
    \ appears in the vector. \nFor example, for the input [\"a\", \"bb\", \"ccc\"\
    , \"dddd\"] you should return the vector [1, 1, 2, 1]. \nWrite a function that\
    \ takes a vector of strings and returns a vector of booleans indicating whether\
    \ each string appears in the vector. \nFor example, for the input [\"a\", \"bb\"\
    , \"ccc\", \"dddd\"] you should return the vector [true, true, false, true].\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpor6wjo02.jl:16\nin expression starting at\
    \ /tmp/tmpor6wjo02.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = strings[1]\n    for s in strings[2:end]\n        if length(longest) > length(s)\
    \ \n            longest = s\n        end\n    end\n    return longest\nend\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=julia |>\nI wanted to add another answer that uses\
    \ filter and reduce:\n<code>\nreduce(x -> length(x) > length(y) ? x : y, filter(x\
    \ -> length(x) > length(y), strings))\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd0m547fj.jl:19\nin expression starting at\
    \ /tmp/tmpd0m547fj.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = strings[1]\n    for s in strings[2:end]\n        if length(longest) < length(s)\n\
    \            longest = s\n        end\n    end\n    return longest\nend\n</code>\n\
    <|/ a tags=julia,string |>\n<| a tags=julia,string |>\n<code>\nusing Test\n\n\
    @testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1bofz4k2.jl:19\nin expression starting at\
    \ /tmp/tmp1bofz4k2.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0 \n        return None \n    else \n        return maximum(strings) \nend\n\
    </cell>\n<text>\nExercise 4\nWrite a function that returns the longest string\
    \ in a list of strings. Use longest() from above.\nusing Test\n\n@testset begin\n\
    \ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t\
    @test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv33lhuo0.jl:16\nin expression starting at\
    \ /tmp/tmpv33lhuo0.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = strings[1]\n    for s in strings[2:end]\n        if length(longest) > length(s)\n\
    \            longest = s\n        end\n    end\n    return longest\nend\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\nusing Test\n\n@testset begin\n\n\
    candidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1ibexvqt.jl:19\nin expression starting at\
    \ /tmp/tmp1ibexvqt.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = Nothing\n    for s in strings\n        if longest == Nothing || length(longest)\
    \ > length(s)\n            longest = s\n        end\n    end\n    return longest\n\
    end\n</code>\n<|/ a dscore=3 |>\n<| c |>\nI like this solution. Just a small comment:\
    \ I believe that `longest = Nothing` should be `longest = nothing`. Otherwise\
    \ you will be assigning `nothing` to `longest` instead of `nothing`. `nothing`\
    \ is an `Int64` which is not `nothing`.\n<|/ c |>\n<| c |>\nThanks, I fixed the\
    \ typo.\n<|/ c |>\n<| a dscore=3 |>\nThe answer by is great, but I thought I'd\
    \ add an alternative that doesn't require a package:\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeamokan_.jl:19\nin expression starting at\
    \ /tmp/tmpeamokan_.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0\n        return nothing\n    \n    longest_string = strings[1]\n    for\
    \ string in strings[2:end]\n        if string.len > longest_string.len\n     \
    \       longest_string = string\n        end\n    end\n    return longest_string\n\
    end\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of strings and returns\
    \ a vector of strings with the first letter of each string capitalized.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6kcsbmgu.jl:22\nin expression starting at\
    \ /tmp/tmp6kcsbmgu.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = strings[end-1]\n    for s in strings[2:end]\n        if length(longest) <\
    \ length(s) \n            longest = s\n        end\n    end\n    return longest\n\
    end\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia |>\nI like using reduce:\n<code>\n\
    reduce(max, strings)\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\njulia>\
    \ reduce(max, strings)\n\"ccc\"\n</code>\n<|/ a tags=julia |>\n<| a |>\n<code>\n\
    julia> reduce(max, strings)\n\"ccc\"\n</code>\n<|/ a dscore=2 tags=julia |>\n\
    <| a tags=julia |>\n<code>\njulia> reduce(max, strings)\n\"ccc\"\n</code>\n<|/\
    \ a dscore=2 |>\n<| a tags=julia |>\n<code>\njulia> reduce(max, strings)\n\"ccc\"\
    \n</code>\n<|/ a dscore=2 |>\n<| a tags=julia |>\n<code>\njulia> reduce(max, strings)\n\
    \"ccc\"\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia |>\n<code>\njulia> reduce(max,\
    \ strings)\n\"ccc\"\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia |>\n<code>\n\
    julia> reduce(max, strings)\n\"ccc\"\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\njulia> reduce(max, strings)\n\"ccc\"\n</code>\n<|/ a tags=julia\
    \ |>\n<| a dscore=1 |>\n<code>\njulia> reduce(max, strings)\n\"ccc\"\n</code>\n\
    <|/ a tags=julia |>\n<| a dscore=1 |>\n<code>\njulia> reduce(max, strings)\n\"\
    ccc\"\n</code>\n<|/ a tags=julia |>\n<| a tags=julia |>\n<code>\njulia> reduce(max,\
    \ strings)\n\"ccc\"\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia |>\n<code>\n\
    julia> reduce(max, strings)\n\"ccc\"\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\njulia> reduce(max, strings)\n\"ccc\"\n</code>\n<|/ a tags=julia\
    \ |>\n<| a dscore=1 \nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t\
    @test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"x\", \"\
    y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"www\",\
    \ \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp17dts934.jl:19\nin expression starting at\
    \ /tmp/tmp17dts934.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = Nothing\n    for s in strings\n        if longest == Nothing || length(longest)\
    \ > length(s)\n            longest = s\n        end\n    end\n    return longest\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp7fvirnd1.jl:24\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([])) == nothing\n  MethodError: Cannot\
    \ `convert` an object of type Type{Nothing} to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] convert(#unused#::Type{Union{Nothing, String}},\
    \ x::Type)\n     @ Base ./some.jl:36\n   [2] longest(strings::Vector{String})\n\
    \     @ Main /tmp/tmp7fvirnd1.jl:17\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp7fvirnd1.jl:24 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp7fvirnd1.jl:23\ntest set:\
    \ Test Failed at /tmp/tmp7fvirnd1.jl:26\n  Expression: candidate([\"x\", \"yyy\"\
    , \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\"\n   Evaluated: \"x\" == \"\
    zzzz\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7fvirnd1.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7fvirnd1.jl:23\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7fvirnd1.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = Nothing\n    for s in strings\n        if longest == Nothing || length(longest)\
    \ > length(s)\n            longest = s\n        end\n    end\n    return longest\n\
    end\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia,string |>\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdh7hvqwe.jl:19\nin expression starting at\
    \ /tmp/tmpdh7hvqwe.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0 \n        return None \n    else \n        return maximum(strings) \nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of times it occurs in the string. \nWrite a function that takes a\
    \ string and returns the number of times it occurs in the string. \nWrite a function\
    \ that takes a string and returns the number of times it occurs in the string.\
    \ \nWrite a function that takes a string and returns the number of times it occurs\
    \ in the string. \nWrite a function that takes a string and returns the number\
    \ of times it occurs in the string. \nWrite a function that takes a string and\
    \ returns the number of times it occurs in the string. \nWrite a function that\
    \ takes a string and returns the number of times it occurs in the string. \nWrite\
    \ a function that takes a string and returns the number of times it occurs in\
    \ the string. \nWrite a function that takes a string and returns the number of\
    \ times it occurs in the string. \nWrite a function that takes a string and returns\
    \ the number of times it occurs in the string. \nWrite a function that takes a\
    \ string and returns the number of times it occurs in the string. \nWrite a function\
    \ that takes a string and returns the number of times it occurs in the string.\
    \ \nWrite a function that takes a string and returns the number of times it occurs\
    \ in the string. \nWrite a function that takes a string and returns the number\
    \ of times it occurs in the string. \nWrite a function that takes a string and\
    \ returns the number of times it occurs in the string. \nWrite a function that\
    \ takes a string and returns the number of times it occurs in the string. \nWrite\
    \ a function that takes a string and returns the number of times it occurs in\
    \ the string. \nWrite a function that takes a string and returns the number of\
    \ times it occurs in the string. \nWrite a function that takes a string and returns\
    \ the number of times it occurs in the string. \nWrite a function that takes a\
    \ string and returns the number of times it occurs in the string. \nWrite a function\
    \ that takes a string and returns the number of times it occurs in the string.\
    \ \nWrite a function that takes a string and returns the number of times it occurs\
    \ in the string. \nWrite a function that takes a string and returns the number\
    \ of times it occurs in the string. \nWrite a function that takes a string and\
    \ returns the number of times it occurs in the string. \nWrite a function that\
    \ takes a string and returns the number of times it occurs in the string. \nWrite\
    \ a function that takes a string and returns the number of times it occurs in\
    \ the string. \nWrite a function that takes a string and returns the number of\
    \ times it occurs in the string. \nWrite a function that takes a string and returns\
    \ the number of times it occurs in the string. \nWrite a function that takes a\
    \ string and returns the number of times it occurs in the string. \nWrite a function\
    \ that takes a string and returns the number of times it occurs in the string.\
    \ \nWrite a function that takes a string and returns the number of times it occurs\
    \ in the string. \nWrite a function that takes a string and returns the number\
    \ of times it occurs in the string. \nWrite a function that \nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpce0lp_no.jl:16\nin expression starting at\
    \ /tmp/tmpce0lp_no.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = strings[end-1]\n    for s in strings[2:end]\n        if length(longest) <\
    \ length(s)\n            longest = s\n        end\n    end\n    return longest\n\
    end\n</code>\n<|/ a tags=julia |>\n<| a dscore=1 |>\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpndacejlx.jl:19\nin expression starting at\
    \ /tmp/tmpndacejlx.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = None \n    for s in strings \n        if longest == None \n            longest\
    \ = s \n        else \n            if length(longest) > length(s) \n         \
    \       longest = s \n            end \n    end \n    return longest \nend \n\
    </code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work for me. `longest` returns\
    \ `nothing` instead of `String`\n<|/ c |>\n<| c |>\nI tested it and it works fine\
    \ for me. Can you post the code you used?\n<|/ c |>\n<| c |>\nI used the code\
    \ from your answer, but added `longest = nothing` before `longest = s` inside\
    \ the `if` statement. Maybe that is the problem?\n<|/ c |>\n<| c |>\nYes, that\
    \ is the problem. `longest = nothing` should be before `longest = s`\n<|/ c |>\n\
    <| a dscore=2 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\
    \t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"x\", \"\
    y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"www\",\
    \ \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy4ddhbdo.jl:22\nin expression starting at\
    \ /tmp/tmpy4ddhbdo.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = Nothing\n    for s in strings\n        if longest == Nothing || length(longest)\
    \ > length(s)\n            longest = s\n        end\n    end\n    return longest\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp4gn2rlbf.jl:24\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([])) == nothing\n  MethodError: Cannot\
    \ `convert` an object of type Type{Nothing} to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] convert(#unused#::Type{Union{Nothing, String}},\
    \ x::Type)\n     @ Base ./some.jl:36\n   [2] longest(strings::Vector{String})\n\
    \     @ Main /tmp/tmp4gn2rlbf.jl:17\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp4gn2rlbf.jl:24 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp4gn2rlbf.jl:23\ntest set:\
    \ Test Failed at /tmp/tmp4gn2rlbf.jl:26\n  Expression: candidate([\"x\", \"yyy\"\
    , \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\"\n   Evaluated: \"x\" == \"\
    zzzz\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4gn2rlbf.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4gn2rlbf.jl:23\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4gn2rlbf.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)==0\
    \ return None \n    else return max(strings) \nend\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that takes a vector of strings and returns a vector of strings\
    \ with the first letter of each string capitalized.\nusing Test\n\n@testset begin\n\
    \ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t\
    @test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphtl71dic.jl:14\nin expression starting at\
    \ /tmp/tmphtl71dic.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = strings[end]\n    for s in strings[2:end]\n        if length(longest) < length(s)\
    \ \n            longest = s\n        end\n    end\n    return longest\nend\n</cell>\n\
    <code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"\
    ffff\", \"gggg\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\"\
    , \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"\
    ffff\", \"gggg\", \"hhhh\", \"iiii\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\"\
    , \"jjjj\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\"\
    , \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\"\
    ])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\"\
    , \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\", \"llll\"\
    ])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\"\
    , \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\", \"llll\"\
    , \"mmmm\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\"\
    , \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\"\
    , \"llll\", \"mmmm\", \"nnnn\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\"\
    , \"jjjj\", \"kkkk\", \"llll\", \"mmmm\", \"nnnn\", \"oooo\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"\
    ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\", \"llll\", \"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3b238p_u.jl:19\nin expression starting at\
    \ /tmp/tmp3b238p_u.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0 return None \n    max_length = length(strings) \n    longest_string = strings[max_length]\
    \ \n    for s in strings[2:] \n        if length(s) < max_length \n          \
    \  max_length = length(s) \n            longest_string = s \n        end \n  \
    \  end \n    return longest_string \nend \n</code>\n<|/ a dscore=1 |>\n<| a |>\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzsj4zolk.jl:14\nin expression\
    \ starting at /tmp/tmpzsj4zolk.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = strings[end-1]\n    for s in strings[2:end]\n        if length(longest) <\
    \ length(s) \n            longest = s\n        end\n    end\n    return longest\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpp38eai4j.jl:24\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([])) == nothing\n  BoundsError: attempt\
    \ to access 0-element Vector{String} at index [-1]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] longest(strings::Vector{String})\n  \
    \   @ Main /tmp/tmpp38eai4j.jl:11\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpp38eai4j.jl:24 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpp38eai4j.jl:23\ntest set:\
    \ Test Failed at /tmp/tmpp38eai4j.jl:25\n  Expression: candidate([\"x\", \"y\"\
    , \"z\"]) == \"x\"\n   Evaluated: \"y\" == \"x\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp38eai4j.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp38eai4j.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpp38eai4j.jl:26\n  Expression: candidate([\"x\", \"yyy\", \"\
    zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\"\n   Evaluated: \"kkkk\" == \"\
    zzzz\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp38eai4j.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp38eai4j.jl:23\nTest Summary:\
    \ | Fail  Error  Total\ntest set      |    2      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp38eai4j.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0\n        error(\"Input list is empty\")\n    end\n    max_length = length(strings)\n\
    \    longest_string = strings[max_length]\n    for string in strings\n       \
    \ if length(string) == max_length\n            longest_string = string\n     \
    \   end\n    end\n    return longest_string\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t\
    @test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpm7krtuc8.jl:28\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([])) == nothing\n  Input list is empty\n\
    \  Stacktrace:\n   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] longest(strings::Vector{String})\n\
    \     @ Main /tmp/tmpm7krtuc8.jl:12\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpm7krtuc8.jl:28 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpm7krtuc8.jl:27\ntest set:\
    \ Test Failed at /tmp/tmpm7krtuc8.jl:29\n  Expression: candidate([\"x\", \"y\"\
    , \"z\"]) == \"x\"\n   Evaluated: \"z\" == \"x\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm7krtuc8.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm7krtuc8.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpm7krtuc8.jl:30\n  Expression: candidate([\"x\", \"yyy\", \"\
    zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\"\n   Evaluated: \"abc\" == \"\
    zzzz\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm7krtuc8.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm7krtuc8.jl:27\nTest Summary:\
    \ | Fail  Error  Total\ntest set      |    2      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpm7krtuc8.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = Nothing\n    for s in strings\n        if longest == Nothing || length(longest)\
    \ > length(s)\n            longest = s\n        end\n    end\n    return longest\n\
    end\n</code>\n<|/ a tags=julia,string |>\n<| a dscore=0 |>\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppf_g4u97.jl:19\nin expression starting at\
    \ /tmp/tmppf_g4u97.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = strings[end-1]\n    for s in strings[2:end]\n        if length(s)>length(longest)\n\
    \            longest = s\n        end\n    end\n    longest\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpsll8nwp4.jl:24\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([])) == nothing\n  BoundsError: attempt\
    \ to access 0-element Vector{String} at index [-1]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] longest(strings::Vector{String})\n  \
    \   @ Main /tmp/tmpsll8nwp4.jl:11\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpsll8nwp4.jl:24 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpsll8nwp4.jl:23\ntest set:\
    \ Test Failed at /tmp/tmpsll8nwp4.jl:25\n  Expression: candidate([\"x\", \"y\"\
    , \"z\"]) == \"x\"\n   Evaluated: \"y\" == \"x\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsll8nwp4.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsll8nwp4.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpsll8nwp4.jl:26\n  Expression: candidate([\"x\", \"yyy\", \"\
    zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\"\n   Evaluated: \"kkkk\" == \"\
    zzzz\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsll8nwp4.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsll8nwp4.jl:23\nTest Summary:\
    \ | Fail  Error  Total\ntest set      |    2      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsll8nwp4.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0\n        error(\"Empty list\")\n    end\n    max_length = maximum([length(s)\
    \ for s in strings])\n    longest_string = nothing\n    for s in strings\n   \
    \     if length(s) <= max_length\n            if longest_string == nothing\n \
    \               longest_string = s\n            else\n                if length(s)\
    \ == max_length\n                    longest_string = longest([longest_string,\
    \ s])\n                else\n                    longest_string = longest([longest_string,\
    \ s])\n                end\n            end\n        end\n    end\n    return\
    \ longest_string\nend\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"\
    bb\", \"ccc\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"\
    ccc\", \"dddd\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\"\
    , \"ccc\", \"dddd\", \"eeee\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\"])\n</cell>\n\
    <code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\"\
    , \"ffff\", \"gggg\", \"hhhh\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\"\
    ])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\"\
    , \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"\
    ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\"\
    , \"iiii\", \"jjjj\", \"kkkk\", \"llll\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\"\
    , \"iiii\", \"jjjj\", \"kkkk\", \"llll\", \"mmmm\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\"\
    , \"iiii\", \"jjjj\", \"kkkk\", \"llll\", \"mmmm\", \"nnnn\"])\n</cell>\n<code\
    \ language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"\
    \nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfikrl_av.jl:31\nin expression starting at\
    \ /tmp/tmpfikrl_av.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0 \n        error(\"Input list is empty\") \n    else \n        longest =\
    \ strings[length(strings)-1] \n        for string in strings \n            if\
    \ length(string) > length(longest) \n                longest = string \n     \
    \   endfor \n        return longest \n    end\n</code>\n<|/ a tags=julia,string\
    \ |>\n<| a dscore=2 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\
    \t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"x\", \"\
    y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"www\",\
    \ \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo9w4gutl.jl:21\nin expression starting at\
    \ /tmp/tmpo9w4gutl.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = strings[end]\n    for s in strings[2:end]\n        if length(longest) > length(s)\n\
    \            longest = s\n        end\n    end\n    return longest\nend\n</code>\n\
    <|/ a dscore=1 |>\n<| a |>\nI like to use this solution:\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3d5745lo.jl:19\nin expression starting at\
    \ /tmp/tmp3d5745lo.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = strings[1]\n    for s in strings[2:end]\n        if length(longest) > length(s)\
    \ \n            longest = s\n        end\n    end\n    return longest\nend\n</code>\n\
    <|/ a tags=julia,string |>\n<| c |>\nThis does not answer the question. OP wants\
    \ to find the longest string in the list of strings. Your code returns the first\
    \ string in the list that is the longest.\n<|/ c |>\n<| c |>\nI see what you mean.\
    \ I've edited my answer to reflect this.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8oo25yij.jl:19\nin expression starting at\
    \ /tmp/tmp8oo25yij.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = strings[end-1]\n    for s in strings[2:end]\n        if length(s)>length(longest)\n\
    \            longest = s\n        end\n    end\n    longest\nend\n</code>\n<|/\
    \ a tags=julia |>\n<| a dscore=2 |>\nThe shortest answer I have found is:\n<code>\n\
    longest(collect(strings))\n</code>\n<|/ a tags=julia |>\n<| a dscore=2 |>\n<code>\n\
    longest(collect(strings))\n</code>\n<|/ a tags=julia |>\n<| a dscore=2 |>\n<code>\n\
    longest(collect(strings))\n</code>\n<|/ a tags=julia |>\n<| a tags=julia |>\n\
    <code>\nlongest(collect(strings))\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia\
    \ |>\n<code>\nlongest(collect(strings))\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia\
    \ |>\n<code>\nlongest(collect(strings))\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia\
    \ |>\n<code>\nlongest(collect(strings))\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia\
    \ |>\n<code>\nlongest(collect(strings))\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia\
    \ |>\n<code>\nlongest(collect(strings))\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\nlongest(collect(strings))\n</code>\n<|/ a tags=julia |>\n<| a dscore=1\
    \ |>\n<code>\nlongest(collect(strings))\n</code>\n<|/ a tags=julia |>\n<| a tags=julia\
    \ |>\n<code>\nlongest(collect(strings))\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia\
    \ |>\n<code>\nlongest(collect(strings))\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia\
    \ |>\n<code>\nlongest(collect(strings))\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\nlongest(collect(strings))\n</code>\n<|/ a tags=julia |>\n<| a tags=julia\
    \ |>\n<code>\nlongest(collect(strings))\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia\
    \ |>\n<code>\nlongest(collect(strings))\n</code>\n<|/ a dscore=1 \nusing Test\n\
    \n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpobyl0n3c.jl:19\nin expression starting at\
    \ /tmp/tmpobyl0n3c.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)==0\
    \ return None \n    else return strings[length(strings)-1] \nend\nusing Test\n\
    \n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppub9uo7g.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppub9uo7g.jl:1\n\
    in expression starting at /tmp/tmppub9uo7g.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0 return None \n    max_length = length(strings) \n    longest_string = strings[max_length]\
    \ \n    for string in strings \n        if length(string) == max_length \n   \
    \         longest_string = string \n            break \n    else \n        return\
    \ longest_string \nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a vector of strings and returns a vector of strings with the words reversed.\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl4c_k7se.jl:21\nin expression starting at\
    \ /tmp/tmpl4c_k7se.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0\n        return nothing\n    max_length = length(strings)\n    longest_string\
    \ = strings[max_length]\n    for string in strings\n        if length(string)\
    \ == max_length\n            return longest_string\n        end\n    end\n   \
    \ return nothing\nend\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t\
    @test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"x\", \"\
    y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"www\",\
    \ \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpq7f9vla5.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpq7f9vla5.jl:1\n\
    in expression starting at /tmp/tmpq7f9vla5.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = None \n    for s in strings \n        if longest == None or length(longest)\
    \ < length(s) \n            longest = s \n        end\n    end\n    return longest\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector of strings\
    \ and returns a vector of strings where each string in the original vector is\
    \ replaced by the string with the longest length. For example, if the input vector\
    \ is [\"a\", \"bb\", \"ccc\"], the output vector should be [\"a\", \"bb\", \"\
    ccc\"].\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"length\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpbnk8siw6.jl:13\nin expression starting at /tmp/tmpbnk8siw6.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = Nothing\n    for s in strings\n        if longest == Nothing || length(longest)\
    \ < length(s)\n            longest = s\n        end\n    end\n    return longest\n\
    end\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThanks for your answer. I'm sorry I\
    \ didn't mention that I wanted to avoid using any external packages. I edited\
    \ my question to reflect this.\n<|/ c |>\n<| c |>\nI edited my answer to include\
    \ a solution that does not use any external packages.\n<|/ c |>\n<| c |>\nThanks\
    \ for your answer. I edited my question to reflect this. I wanted to avoid using\
    \ any external packages.\n<|/ c |>\n<| c |>\nI edited my answer to include a solution\
    \ that does not use any external packages.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp9s0x8if.jl:19\nin expression starting at\
    \ /tmp/tmpp9s0x8if.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0\n        error(\"empty list\")\n    end\n    max_length = maximum([length(string)\
    \ for string in strings])\n    longest_string = nothing\n    for string in strings\n\
    \        if length(string) == max_length\n            if longest_string == nothing\n\
    \                longest_string = string\n            else\n                if\
    \ length(string) > length(longest_string)\n                    longest_string\
    \ = string\n                end\n            end\n        else\n            if\
    \ longest_string != nothing\n                longest_string = nothing\n      \
    \      end\n        end\n    end\n    return longest_string\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp3did0yy0.jl:38\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([])) == nothing\n  empty list\n  Stacktrace:\n\
    \   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] longest(strings::Vector{String})\n\
    \     @ Main /tmp/tmp3did0yy0.jl:12\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp3did0yy0.jl:38 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp3did0yy0.jl:37\ntest set:\
    \ Test Failed at /tmp/tmp3did0yy0.jl:40\n  Expression: candidate([\"x\", \"yyy\"\
    , \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\"\n   Evaluated: nothing ==\
    \ \"zzzz\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3did0yy0.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3did0yy0.jl:37\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3did0yy0.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = Nothing\n    for s in strings\n        if longest == Nothing || length(longest)\
    \ > length(s) \n            longest = s\n        end\n    end\n    return longest\n\
    end\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy49w4zev.jl:19\nin expression starting at\
    \ /tmp/tmpy49w4zev.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = strings[end-1]\n    for s in strings[2:end]\n        if length(longest) <\
    \ length(s)\n            longest = s\n        end\n    end\n    longest\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector of strings and\
    \ returns a vector of booleans indicating whether each string is a palindrome\
    \ or not. For example, if the input vector is [\"abba\", \"aba\", \"abc\", \"\
    abba\"] then the output should be [true, false, false, true].\nusing Test\n\n\
    @testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoxes_o45.jl:19\nin expression starting at\
    \ /tmp/tmpoxes_o45.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)==0\
    \ return None \n    else return strings[length(strings)-1]\nend\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that takes a vector of strings and returns a vector\
    \ of the same length with all strings replaced by '?'.\n    >>> replace_by_question(['a',\
    \ 'b', 'c'])\n    ['?', '?', '?']\nusing Test\n\n@testset begin\n\ncandidate =\
    \ longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp573xfdv9.jl:14\nin expression starting at\
    \ /tmp/tmp573xfdv9.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0\n        error(\"Input list is empty\")\n    end\n    max_length = length(strings)\n\
    \    max_length = max_length > 1 ? max_length : 1\n    max_length = max_length\
    \ < Inf ? max_length : Inf\n    max_length = max_length == Inf ? 1 : max_length\n\
    \    max_length = max_length == 0 ? Inf : max_length\n    max_length = max_length\
    \ == 1 ? 0 : max_length\n    max_length = max_length % 2 == 0 ? max_length : max_length\
    \ - 1\n    max_length = max_length == 0 ? Inf : max_length\n    max_length = max_length\
    \ == 1 ? 0 : max_length\n    max_length = max_length % 2 == 0 ? max_length : max_length\
    \ - 1\n    max_length = max_length == 0 ? Inf : max_length\n    max_length = max_length\
    \ == 1 ? 0 : max_length\n    max_length = max_length % 2 == 0 ? max_length : max_length\
    \ - 1\n    max_length = max_length == 0 ? Inf : max_length\n    max_length = max_length\
    \ == 1 ? 0 : max_length\n    max_length = max_length % 2 == 0 ? max_length : max_length\
    \ - 1\n    max_length = max_length == 0 ? Inf : max_length\n    max_length = max_length\
    \ == 1 ? 0 : max_length\n    max_length = max_length % 2 == 0 ? max_length : max_length\
    \ - 1\n    max_length = max_length == 0 ? Inf : max_length\n    max_length = max_length\
    \ == 1 ? 0 : max_length\n    max_length = max_length % 2 == 0 ? max_length : max_length\
    \ - 1\n    max_length = max_length == 0 ? Inf : max_length\n    max_length = max_length\
    \ == 1 ? 0 : max_length\n    max_length = max_length % 2 == 0 ? max_length : max_length\
    \ - 1\n    max_length = max_length == 0 ? Inf : max_length\n    max_length = max_length\
    \ == 1 ? 0 : max_length\n    max_length = max_length % 2 == 0 ? max_length : max_length\
    \ - 1\n    max_length = max_length == 0 ? Inf : max_length\n    max_length = max_length\
    \ == 1 ? 0 : max_length\n    max_length = max_length % 2 == 0 ? max_length : max_length\
    \ - 1\n    max_length = max_length == 0 ? Inf : max_length\n    max_length = max_length\
    \ == 1 ? 0 : max_length\n    max_length = max_length % 2 == 0 ? max_length : max_length\
    \ - 1\n    max_length = max_length == 0 ? Inf : max_length\n    max_length = max_length\
    \ == 1 ? 0 : max_length\n    max_length = max_length % 2 == 0 ? max_length : max_length\
    \ - 1\n    max_length = max_length == 0 ? Inf : max_length\n    max_length = max_length\
    \ == 1 ? 0 : max_length\n    max_length = max_length % 2 == 0 ? max_length : max_length\
    \ - 1\n    max_length = max_length == 0 ? Inf : max_length\n    max_length = max_length\
    \ == 1 ? 0 : max_length\n    max_length = max_length % 2 == 0 ? max_length : max_length\
    \ - 1\n    max_length = max_length == 0 ? Inf : max_length\n    max_length = max_length\
    \ == 1 ? 0 : max_length\n    max_length = max_length % 2 == 0 ? max_length : max_length\
    \ - 1\n    max_length = max_length == 0 ? Inf : \nusing Test\n\n@testset begin\n\
    \ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t\
    @test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmdtpyuke.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmdtpyuke.jl:1\n\
    in expression starting at /tmp/tmpmdtpyuke.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = strings[end-1]\n    for s in strings[2:end]\n        if length(longest) <\
    \ length(s) \n            longest = s\n        end\n    end\n    return longest\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp295i0ohz.jl:24\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([])) == nothing\n  BoundsError: attempt\
    \ to access 0-element Vector{String} at index [-1]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] longest(strings::Vector{String})\n  \
    \   @ Main /tmp/tmp295i0ohz.jl:11\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp295i0ohz.jl:24 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp295i0ohz.jl:23\ntest set:\
    \ Test Failed at /tmp/tmp295i0ohz.jl:25\n  Expression: candidate([\"x\", \"y\"\
    , \"z\"]) == \"x\"\n   Evaluated: \"y\" == \"x\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp295i0ohz.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp295i0ohz.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp295i0ohz.jl:26\n  Expression: candidate([\"x\", \"yyy\", \"\
    zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\"\n   Evaluated: \"kkkk\" == \"\
    zzzz\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp295i0ohz.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp295i0ohz.jl:23\nTest Summary:\
    \ | Fail  Error  Total\ntest set      |    2      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp295i0ohz.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = Nothing\n    for s in strings\n        if longest == Nothing || length(longest)\
    \ > length(s) \n            longest = s\n        end\n    end\n    return longest\n\
    end\n</code>\n<|/ a tags=julia,string |>\n<| a dscore=2 |>\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_c0cmuzf.jl:19\nin expression starting at\
    \ /tmp/tmp_c0cmuzf.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = strings[end].len()\n    for s in strings[2:end]\n        if s.len()>longest\n\
    \            longest = s.len()\n        end\n    end\n    longest\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector of strings and returns\
    \ a vector of integers representing the number of times each string appears in\
    \ the vector.\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvrnowm9h.jl:19\nin expression starting at\
    \ /tmp/tmpvrnowm9h.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0 \n        return None \n    else \n        max_length = length(strings)\
    \ \n        longest = strings[max_length] \n        for i in 2:length(longest)\
    \ \n            if length(strings[i]) > max_length \n                max_length\
    \ = length(strings[i]) \n                longest = strings[i] \n            end\
    \ \n        end \n        return longest \nend \n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\"])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ which returns the longest string in an array of strings.\nWrite a function which\
    \ returns the longest string in an array of strings. Return None in case the input\
    \ list is empty.\nWrite a function which returns the longest string in an array\
    \ of strings. Return None in case the input list is empty.\nWrite a function which\
    \ returns the longest string in an array of strings. Return None in case the input\
    \ list is empty.\nWrite a function which returns the longest string in an array\
    \ of strings. Return None in case the input list is empty.\nWrite a function which\
    \ returns the longest string in an array of strings. Return None in case the input\
    \ list is empty.\nWrite a function which returns the longest string in an array\
    \ of strings. Return None in case the input list is empty.\nWrite a function which\
    \ returns the longest string in an array of strings. Return None in case the input\
    \ list is empty.\nWrite a function which returns the longest string in an array\
    \ of strings. Return None in case the input list is empty.\nWrite a function which\
    \ returns the longest string in an array of strings. Return None in case the input\
    \ list is empty.\nWrite a function which returns the longest string in an array\
    \ of strings. Return None in case the input list is empty.\nWrite a function which\
    \ returns the longest string in an array of strings. Return None in case the input\
    \ list is empty.\nWrite a function which returns the longest string in an array\
    \ of strings. Return None in case the input list is empty.\nWrite a function which\
    \ returns the longest string in an array of strings. Return None in case the input\
    \ list is empty.\nWrite a function which returns the longest string in an array\
    \ of strings. Return None in case the input list is empty.\nWrite a function which\
    \ returns the longest string in an array of strings. Return None in case the input\
    \ list is empty.\nWrite a function which returns the longest string in an array\
    \ of strings. Return None in case the input list is empty.\nWrite a function which\
    \ returns the longest string in an array of strings. Return None in case the input\
    \ list is empty.\nWrite a function which returns the longest string in an array\
    \ of strings. Return None in case the input list is empty.\nWrite a function which\
    \ returns the longest string in an array of strings. Return None in case the input\
    \ list is empty.\nWrite a function which returns the longest string in an array\
    \ of strings. Return None in case the input list is empty.\nWrite a function which\
    \ returns the longest string in an array of strings. Return None in case the input\
    \ list is empty.\nWrite a function which returns the longest string in an array\
    \ of strings. Return None in case the input list is empty.\nWrite a function which\
    \ returns the longest string in an array of \nusing Test\n\n@testset begin\n\n\
    candidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8cmusrmt.jl:24\nin expression starting at\
    \ /tmp/tmp8cmusrmt.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0\n        error(\"Input list is empty\")\n    end\n    max_length = length(strings)\n\
    \    longest_string = strings[max_length]\n    for string in strings\n       \
    \ if length(string) == max_length\n            return string\n        end\n  \
    \  end\n    return longest_string\nend\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"bb\", \"ccc\", \"dddd\"])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of strings and returns a vector of booleans indicating whether\n\
    each string starts with \"a\".\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\
    \t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"x\", \"\
    y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"www\",\
    \ \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqus_efyd.jl:23\nin expression starting at\
    \ /tmp/tmpqus_efyd.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0 \n        return None \n    else \n        return max(strings, key=length)\
    \ \nend\n</cell>\n<text>\nExercise 2\nWrite a function that returns the longest\
    \ string in a list of strings. Return None in case the list is empty.\nusing Test\n\
    \n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8vp71pch.jl:16\nin expression starting at\
    \ /tmp/tmp8vp71pch.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0\n        error(\"Input list is empty.\")\n    end\n    max_length = length(strings)\n\
    \    longest_string = strings[max_length]\n    for s in strings[2:end]\n     \
    \   if length(s) < max_length\n            max_length = length(s)\n          \
    \  longest_string = s\n        end\n    end\n    return longest_string\nend\n\
    </cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\"])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector of strings and returns\
    \ a vector of the lengths of the strings in that vector. \nThe function should\
    \ return an error if the input vector is empty.\nThe function should return an\
    \ error if the input vector has more than one element.\nThe function should return\
    \ an error if the input vector has more than one element and the first element\
    \ is not an integer.\nThe function should return an error if the input vector\
    \ has more than one element and the first element is an integer and the second\
    \ element is not an integer.\nThe function should return an error if the input\
    \ vector has more than one element and the first element is an integer and the\
    \ second element is an integer.\nThe function should return an error if the input\
    \ vector has more than one element and the first element is an integer and the\
    \ second element is an integer and the third element is not an integer.\nThe function\
    \ should return an error if the input vector has more than one element and the\
    \ first element is an integer and the second element is an integer and the third\
    \ element is an integer.\nThe function should return an error if the input vector\
    \ has more than one element and the first element is an integer and the second\
    \ element is an integer and the third element is an integer and the fourth element\
    \ is not an integer.\nThe function should return an error if the input vector\
    \ has more than one element and the first element is an integer and the second\
    \ element is an integer and the third element is an integer and the fourth element\
    \ is an integer.\nThe function should return an error if the input vector has\
    \ more than one element and the first element is an integer and the second element\
    \ is an integer and the third element is an integer and the fourth element is\
    \ an integer and the fifth element is not an integer.\nThe function should return\
    \ an error if the input vector has more than one element and the first element\
    \ is an integer and the second element is an integer and the third element is\
    \ an integer and the fourth element is an integer and the fifth element is an\
    \ integer.\nThe function should return an error if the input vector has more than\
    \ one element and the first element is an integer and the second element is an\
    \ integer and the third element is an integer and the fourth element is an integer\
    \ and the fifth element is an integer and the sixth element is not an integer.\n\
    The function should return an error if the input vector has more than one element\
    \ and the first element is an integer and the second element is an integer and\
    \ the third element is an integer and the fourth element is an integer and the\
    \ fifth element is an integer and the sixth element is an integer.\nThe function\
    \ should return an error if the input vector has more than one element and the\
    \ first element is an integer and the second element is an \nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0cdeh8e3.jl:24\nin expression starting at\
    \ /tmp/tmp0cdeh8e3.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0 return None \n    else return strings[length(strings)] \nend\n</cell>\n\
    <text>\nExercise 4\nWrite a function that takes a vector of strings and returns\
    \ a vector of strings with the first letter of each string capitalized.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxgw2ylut.jl:14\nin expression starting at\
    \ /tmp/tmpxgw2ylut.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = Nothing\n    for s in strings\n        if longest == Nothing || length(longest)\
    \ > length(s) \n            longest = s\n        end\n    end\n    return longest\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpmbh4em9s.jl:24\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([])) == nothing\n  MethodError: Cannot\
    \ `convert` an object of type Type{Nothing} to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] convert(#unused#::Type{Union{Nothing, String}},\
    \ x::Type)\n     @ Base ./some.jl:36\n   [2] longest(strings::Vector{String})\n\
    \     @ Main /tmp/tmpmbh4em9s.jl:17\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpmbh4em9s.jl:24 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpmbh4em9s.jl:23\ntest set:\
    \ Test Failed at /tmp/tmpmbh4em9s.jl:26\n  Expression: candidate([\"x\", \"yyy\"\
    , \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\"\n   Evaluated: \"x\" == \"\
    zzzz\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmbh4em9s.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmbh4em9s.jl:23\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmbh4em9s.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = strings[end-1]\n    for s in strings[2:end]\n        if length(s)>length(longest)\n\
    \            longest = s\n        end\n    end\n    longest\nend\n</code>\n<|/\
    \ a dscore=2 |>\n<| a |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate =\
    \ longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwgcsep9i.jl:19\nin expression starting at\
    \ /tmp/tmpwgcsep9i.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = strings[end]\n    for s in strings[2:end]\n        if length(longest) < length(s)\n\
    \            longest = s\n        end\n    end\n    return longest\nend\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nI like this solution, but I wonder if it can be made\
    \ more efficient.\n<|/ c |>\n<| c |>\nI added a more efficient solution\n<|/ c\
    \ |>\n<| c |>\nI added a more efficient solution\n<|/ c |>\n<| a tags=julia |>\n\
    Here is a solution that uses no loops and is quite efficient:\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpknmnqaq6.jl:19\nin expression starting at\
    \ /tmp/tmpknmnqaq6.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0 \n        return None \n    else \n        return max(strings, key=length)\
    \ \nend\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7wfq4cjs.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7wfq4cjs.jl:1\n\
    in expression starting at /tmp/tmp7wfq4cjs.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = Nothing\n    for s in strings\n        if longest == Nothing || length(longest)\
    \ > length(s)\n            longest = s\n        end\n    end\n    return longest\n\
    end\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI like this solution. One thing I noticed\
    \ is that it only works if you have a list of strings. If you have a list of vectors,\
    \ it won't work. Also, I think it would be better to use a `for` loop instead\
    \ of a `foreach` loop. `foreach` doesn't return anything, so you can't use it\
    \ to return the longest string.\n<|/ c |>\n<| c |>\nI agree with you, `foreach`\
    \ doesn't return anything. I've edited my answer to reflect your comments.\n<|/\
    \ c |>\n<| c |>\nI like the `for` loop solution. I've edited my answer to reflect\
    \ your comments.\n<|/ c |>\n<| a dscore=2 |>\nA simple solution:\n<code>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3mdd79d6.jl:19\nin expression starting at\
    \ /tmp/tmp3mdd79d6.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0 return None \n    else return strings[length(strings)-1]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpujfclcr6.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpujfclcr6.jl:1\n\
    in expression starting at /tmp/tmpujfclcr6.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0\n        error(\"Input list is empty\")\n    end\n    max_length = length(strings)\n\
    \    longest_string = strings[max_length]\n    for s in strings[2:end]\n     \
    \   if length(s) == max_length\n            longest_string = s\n        else\n\
    \            break\n        end\n    end\n    return longest_string\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpvwblujfx.jl:30\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([])) == nothing\n  Input list is empty\n\
    \  Stacktrace:\n   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] longest(strings::Vector{String})\n\
    \     @ Main /tmp/tmpvwblujfx.jl:12\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpvwblujfx.jl:30 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpvwblujfx.jl:29\ntest set:\
    \ Test Failed at /tmp/tmpvwblujfx.jl:31\n  Expression: candidate([\"x\", \"y\"\
    , \"z\"]) == \"x\"\n   Evaluated: \"z\" == \"x\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvwblujfx.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvwblujfx.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpvwblujfx.jl:32\n  Expression: candidate([\"x\", \"yyy\", \"\
    zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\"\n   Evaluated: \"abc\" == \"\
    zzzz\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvwblujfx.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvwblujfx.jl:29\nTest Summary:\
    \ | Fail  Error  Total\ntest set      |    2      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvwblujfx.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0 \n        return None \n    else \n        longest_string = strings[length(strings)-1]\
    \ \n        for s in strings \n            if length(s) == length(longest_string)\
    \ \n                longest_string = s \n            end \n        end \n    \
    \    return longest_string \n    end \nend \n</cell>\n<text>\nExercise 4\nWrite\
    \ a function that takes a vector of strings and returns a vector of strings with\
    \ the same length. \nThe function should return None in case the vector is empty.\n\
    The function should return the same vector in case the vector has only one element.\n\
    The function should return the longest string in the vector in case there are\
    \ multiple strings of the same length.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu2z6m2c5.jl:23\nin expression starting at\
    \ /tmp/tmpu2z6m2c5.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0\n        error(\"Input list is empty\")\n    end\n    max_length = maximum(strings)\n\
    \    max_length_str = strings[findfirst(isequal(max_length))]\n    if max_length_str\
    \ == max_length\n        max_length_str = strings[findfirst(isequal(max_length))]\n\
    \    end\n    return max_length_str\nend\n</cell>\n<code language=julia-1.3>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\"])\n</cell>\n<code language=julia-1.3>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\"])\n</cell>\n<code language=julia-1.3>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\"])\n</cell>\n<code\
    \ language=julia-1.3>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"\
    ffff\", \"gggg\"])\n</cell>\n<code language=julia-1.3>\nlongest([\"a\", \"bb\"\
    , \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\"])\n</cell>\n<code\
    \ language=julia-1.3>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"\
    ffff\", \"gggg\", \"hhhh\", \"iiii\"])\n</cell>\n<code language=julia-1.3>\nlongest([\"\
    a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\"\
    , \"jjjj\"])\n</cell>\n<code language=julia-1.3>\nlongest([\"a\", \"bb\", \"ccc\"\
    , \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\"\
    ])\n</cell>\n<code language=julia-1.3>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\"\
    , \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\", \"llll\"\
    ])\n</cell>\n<code language=julia-1.3>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\"\
    , \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\", \"llll\"\
    , \"mmmm\"])\n</cell>\n<code language=julia-1.3>\nlongest([\"a\", \"bb\", \"ccc\"\
    , \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\"\
    , \"llll\", \"mmmm\", \"nnnn\"])\n</cell>\n<code language=julia-1.3>\nlongest([\"\
    a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\"\
    , \"jjjj\", \"kkkk\", \"llll\", \"mmmm\", \"nnnn\", \"oooo\"])\n</cell>\n<code\
    \ language=julia-1.3>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"\
    ffff\", \"gggg\", \"hhhh\", \"\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\
    \t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"x\", \"\
    y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"www\",\
    \ \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_o9t4rwq.jl:21\nin expression starting at\
    \ /tmp/tmp_o9t4rwq.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0 \n        return None \n    else \n        return maximum(strings) \nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector of strings and\
    \ returns a vector of the lengths of the strings. \nThe function should return\
    \ an empty vector in case the vector is empty.\nThe function should return the\
    \ same vector in case the vector is not empty.\nThe function should return the\
    \ same vector in case the vector is empty.\nThe function should return the same\
    \ vector in case the vector is empty.\nThe function should return the same vector\
    \ in case the vector is empty.\nThe function should return the same vector in\
    \ case the vector is empty.\nThe function should return the same vector in case\
    \ the vector is empty.\nThe function should return the same vector in case the\
    \ vector is empty.\nThe function should return the same vector in case the vector\
    \ is empty.\nThe function should return the same vector in case the vector is\
    \ empty.\nThe function should return the same vector in case the vector is empty.\n\
    The function should return the same vector in case the vector is empty.\nThe function\
    \ should return the same vector in case the vector is empty.\nThe function should\
    \ return the same vector in case the vector is empty.\nThe function should return\
    \ the same vector in case the vector is empty.\nThe function should return the\
    \ same vector in case the vector is empty.\nThe function should return the same\
    \ vector in case the vector is empty.\nThe function should return the same vector\
    \ in case the vector is empty.\nThe function should return the same vector in\
    \ case the vector is empty.\nThe function should return the same vector in case\
    \ the vector is empty.\nThe function should return the same vector in case the\
    \ vector is empty.\nThe function should return the same vector in case the vector\
    \ is empty.\nThe function should return the same vector in case the vector is\
    \ empty.\nThe function should return the same vector in case the vector is empty.\n\
    The function should return the same vector in case the vector is empty.\nThe function\
    \ should return the same vector in case the vector is empty.\nThe function should\
    \ return the same vector in case the vector is empty.\nThe function should return\
    \ the same vector in case the vector is empty.\nThe function should return the\
    \ same vector in case the vector is empty.\nThe function should return the same\
    \ vector in case the vector is empty.\nThe function should return the same vector\
    \ in case the vector is empty.\nThe function should return the same vector in\
    \ case the vector is empty.\nThe function should return the same vector in case\
    \ the vector is empty.\nThe function should return the same vector in case the\
    \ vector is empty.\nThe function should return the same vector in case the vector\
    \ is empty.\nThe function should return the same vector in case the vector is\
    \ empty.\nThe function should return the same vector in case the vector is empty.\n\
    The function should return the same vector in case the vector is empty.\nThe function\
    \ should return the same vector in case the vector is empty.\n\nusing Test\n\n\
    @testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptxa8tosk.jl:16\nin expression starting at\
    \ /tmp/tmptxa8tosk.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0\n        error(\"Input is empty\")\n    end\n    max_length = maximum(strings)\n\
    \    for i in strings\n        if length(i) == max_length\n            return\
    \ i\n        end\n    end\n    return nothing\nend\n</code>\n<|/ a |>\n<| c |>\n\
    This doesn't seem to work. `longest([\"a\", \"bb\", \"ccc\"])` returns `nothing`\
    \ instead of `\"ccc\"`.\n<|/ c |>\n<| c |>\nYes, it does. I tested it before posting\
    \ it. I just edited my answer to fix the bug. Thanks for pointing it out.\n<|/\
    \ c |>\n<| c |>\nI tested it again and it works. I edited my answer to fix the\
    \ bug. Thanks for pointing it out.\n<|/ c |>\n<| c |>\nI tested it again and it\
    \ works. I edited my answer to fix the bug. Thanks for pointing it out.\n<|/ c\
    \ |>\n<| c |>\nI tested it again and it works. I edited my answer to fix the bug.\
    \ Thanks for pointing it out.\n<|/ c |>\n<| a |>\nThe most efficient way is to\
    \ use mapcat:\n<code>\nlongest(mapcat(x->[x], [\"a\", \"bb\", \"ccc\"]))\n</code>\n\
    <|/ a dscore=1 tags=julia |>\n<| c |>\nThis doesn't seem to work. `longest([\"\
    a\", \"bb\", \"ccc\"])` returns `nothing` instead of `\"ccc\"`.\n<|/ c |>\n<|\
    \ c |>\nIt does work. `longest([\"a\", \"bb\", \"ccc\"])` returns `\"ccc\"`\n\
    <|/ c |>\n<| c |>\nI tested it again and it works. I edited my answer to fix the\
    \ bug. Thanks for pointing it out.\n<|/ c |>\n<| a dscore=1 |>\n<code>\nlongest(collect([\"\
    a\", \"bb\", \"ccc\"]))\n</code>\n<|/ a tags=julia |>\n<| c |>\nThis doesn't seem\
    \ to work. `longest(collect([\"a\", \"bb\", \"ccc\"]))` returns `nothing` instead\
    \ of `\"ccc\"`.\n<|/ c |>\n<| c |>\nI tested it again and it works. I edited my\
    \ answer to fix the bug. Thanks for pointing it out.\n<|/ c |>\n<| a |>\n<code>\n\
    longest(collect([\"a\", \"bb\", \"ccc\"]))\n</code>\n<|/ a dscore=1 tags=julia\
    \ |>\n<| c |>\nThis \nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t\
    @test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"x\", \"\
    y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"www\",\
    \ \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm10k48jl.jl:22\nin expression starting at\
    \ /tmp/tmpm10k48jl.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0 \n        return None \n    else \n        return max(strings, key=length)\
    \ \nend\n</cell>\n<text>\nExercise\nWrite a function that returns the longest\
    \ string in a list of strings. Write a function that returns the longest string\
    \ in a list of strings. Write a function that returns the longest string in a\
    \ list of strings. Write a function that returns the longest string in a list\
    \ of strings. Write a function that returns the longest string in a list of strings.\
    \ Write a function that returns the longest string in a list of strings. Write\
    \ a function that returns the longest string in a list of strings. Write a function\
    \ that returns the longest string in a list of strings. Write a function that\
    \ returns the longest string in a list of strings. Write a function that returns\
    \ the longest string in a list of strings. Write a function that returns the longest\
    \ string in a list of strings. Write a function that returns the longest string\
    \ in a list of strings. Write a function that returns the longest string in a\
    \ list of strings. Write a function that returns the longest string in a list\
    \ of strings. Write a function that returns the longest string in a list of strings.\
    \ Write a function that returns the longest string in a list of strings. Write\
    \ a function that returns the longest string in a list of strings. Write a function\
    \ that returns the longest string in a list of strings. Write a function that\
    \ returns the longest string in a list of strings. Write a function that returns\
    \ the longest string in a list of strings. Write a function that returns the longest\
    \ string in a list of strings. Write a function that returns the longest string\
    \ in a list of strings. Write a function that returns the longest string in a\
    \ list of strings. Write a function that returns the longest string in a list\
    \ of strings. Write a function that returns the longest string in a list of strings.\
    \ Write a function that returns the longest string in a list of strings. Write\
    \ a function that returns the longest string in a list of strings. Write a function\
    \ that returns the longest string in a list of strings. Write a function that\
    \ returns the longest string in a list of strings. Write a function that returns\
    \ the longest string in a list of strings. Write a function that returns the longest\
    \ string in a list of strings. Write a function that returns the longest string\
    \ in a list of strings. Write a function that returns the longest string in a\
    \ list of strings. Write a function that returns the longest string in a list\
    \ of strings. Write a function that returns the longest string in a list of strings.\
    \ Write a function that returns the longest string in a list of strings. Write\
    \ a function that returns the longest string in a list of strings. Write a function\
    \ that returns the longest string in a list of strings. Write a function that\
    \ returns the longest string in a list of strings. Write a function that returns\
    \ the longest string in a list of strings. Write a function that returns the longest\
    \ string in a list of strings. Write a function that returns the longest string\
    \ in a list of strings. Write a function that returns the longest string in a\
    \ list of strings. Write a function that returns the longest string in a list\
    \ of \nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl6t932zk.jl:16\nin expression starting at\
    \ /tmp/tmpl6t932zk.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = strings[1]\n    for s in strings[2:end]\n        if length(longest) > length(s)\n\
    \            longest = s\n        end\n    end\n    return longest\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmplkyozz7b.jl:24\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([])) == nothing\n  BoundsError: attempt\
    \ to access 0-element Vector{String} at index [1]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] longest(strings::Vector{String})\n  \
    \   @ Main /tmp/tmplkyozz7b.jl:11\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmplkyozz7b.jl:24 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmplkyozz7b.jl:23\ntest set:\
    \ Test Failed at /tmp/tmplkyozz7b.jl:26\n  Expression: candidate([\"x\", \"yyy\"\
    , \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\"\n   Evaluated: \"x\" == \"\
    zzzz\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplkyozz7b.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplkyozz7b.jl:23\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplkyozz7b.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)==0\
    \ return None \n    else return strings[length(strings)-1] \nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the longest string in a list of strings.\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6jte2b63.jl:14\nin expression starting at\
    \ /tmp/tmp6jte2b63.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0 \n        return None \n    else \n        return max(strings, key=length)\
    \ \nend \nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpuf3vqeo6.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpuf3vqeo6.jl:1\n\
    in expression starting at /tmp/tmpuf3vqeo6.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0 return None \n    else return strings[length(strings)-1]\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of characters in it.\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\
    \t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"x\", \"\
    y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"www\",\
    \ \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpry3hcjiy.jl:14\nin expression starting at\
    \ /tmp/tmpry3hcjiy.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = Nothing\n    for s in strings\n        if longest == Nothing || length(longest)\
    \ > length(s) \n            longest = s\n        end\n    end\n    return longest\n\
    end\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\"\
    ])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector of strings\
    \ and returns the longest string in that vector. \nWrite a function that takes\
    \ a vector of strings and returns the shortest string in that vector. \nWrite\
    \ a function that takes a vector of strings and returns the average string in\
    \ that vector. \nWrite a function that takes a vector of strings and returns the\
    \ median string in that vector. \nWrite a function that takes a vector of strings\
    \ and returns the mode string in that vector. \nWrite a function that takes a\
    \ vector of strings and returns the number of strings in that vector. \nWrite\
    \ a function that takes a vector of strings and returns the number of strings\
    \ that are not empty in that vector. \nWrite a function that takes a vector of\
    \ strings and returns the number of strings that are not empty and are the same\
    \ length as another string in that vector. \nWrite a function that takes a vector\
    \ of strings and returns the number of strings that are not empty and are the\
    \ same length as another string in that vector. \nWrite a function that takes\
    \ a vector of strings and returns the number of strings that are not empty and\
    \ are the same length as another string in that vector. \nWrite a function that\
    \ takes a vector of strings and returns the number of strings that are not empty\
    \ and are the same length as another string in that vector. \nWrite a function\
    \ that takes a vector of strings and returns the number of strings that are not\
    \ empty and are the same length as another string in that vector. \nWrite a function\
    \ that takes a vector of strings and returns the number of strings that are not\
    \ empty and are the same length as another string in that vector. \nWrite a function\
    \ that takes a vector of strings and returns the number of strings that are not\
    \ empty and are the same length as another string in that vector. \nWrite a function\
    \ that takes a vector of strings and returns the number of strings that are not\
    \ empty and are the same length as another string in that vector. \nWrite a function\
    \ that takes a vector of strings and returns the number of strings that are not\
    \ empty and are the same length as another string in that vector. \nWrite a function\
    \ that takes a vector of strings and returns the number of strings that are not\
    \ empty and are the same length as another string in that vector. \nWrite a function\
    \ that takes a vector of strings and returns the number of strings that are not\
    \ empty and are the same length as another string in that vector. \nWrite a function\
    \ that takes a vector of strings and returns the number of strings that are not\
    \ empty and are the same length as another string in that vector. \nWrite a function\
    \ that takes a vector of strings and returns the number of strings that are not\
    \ empty and are the same length as another string in that vector. \nWrite a function\
    \ that takes a vector of strings and returns the number of string\nusing Test\n\
    \n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpad1z3xv0.jl:19\nin expression starting at\
    \ /tmp/tmpad1z3xv0.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = Nothing\n    for s in strings\n        if longest == Nothing || length(longest)\
    \ > length(s) \n            longest = s\n        end\n    end\n    return longest\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpox4whpv0.jl:24\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([])) == nothing\n  MethodError: Cannot\
    \ `convert` an object of type Type{Nothing} to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] convert(#unused#::Type{Union{Nothing, String}},\
    \ x::Type)\n     @ Base ./some.jl:36\n   [2] longest(strings::Vector{String})\n\
    \     @ Main /tmp/tmpox4whpv0.jl:17\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpox4whpv0.jl:24 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpox4whpv0.jl:23\ntest set:\
    \ Test Failed at /tmp/tmpox4whpv0.jl:26\n  Expression: candidate([\"x\", \"yyy\"\
    , \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\"\n   Evaluated: \"x\" == \"\
    zzzz\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpox4whpv0.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpox4whpv0.jl:23\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpox4whpv0.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0 return None \n    else return strings[length(strings)-1]\nend\n</cell>\n\
    <code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of strings and returns\
    \ a vector of strings with the same length as the input. \nIf the input vector\
    \ is empty, return an empty vector.\nIf the input vector has only one element,\
    \ return that element.\nIf the input vector has more than one element, return\
    \ the first element of the vector.\nIf the input vector has more than two elements,\
    \ return the first two elements of the vector.\nIf the input vector has more than\
    \ three elements, return the first three elements of the vector.\nIf the input\
    \ vector has more than four elements, return the first four elements of the vector.\n\
    If the input vector has more than five elements, return the first five elements\
    \ of the vector.\nIf the input vector has more than six elements, return the first\
    \ six elements of the vector.\nIf the input vector has more than seven elements,\
    \ return the first seven elements of the vector.\nIf the input vector has more\
    \ than eight elements, return the first eight elements of the vector.\nIf the\
    \ input vector has more than nine elements, return the first nine elements of\
    \ the vector.\nIf the input vector has more than ten elements, return the first\
    \ ten elements of the vector.\nIf the input vector has more than eleven elements,\
    \ return the first eleven elements of the vector.\nIf the input vector has more\
    \ than twelve elements, return the first twelve elements of the vector.\nIf the\
    \ input vector has more than thirteen elements, return the first thirteen elements\
    \ of the vector.\nIf the input vector has more than fourteen elements, return\
    \ the first fourteen elements of the vector.\nIf the input vector has more than\
    \ fifteen elements, return the first fifteen elements of the vector.\nIf the input\
    \ vector has more than sixteen elements, return the first sixteen elements of\
    \ the vector.\nIf the input vector has more than seventeen elements, return the\
    \ first seventeen elements of the vector.\nIf the input vector has more than eighteen\
    \ elements, return the first eighteen elements of the vector.\nIf the input vector\
    \ has more than nineteen elements, return the first nineteen elements of the vector.\n\
    If the input vector has more than twenty elements, return the first twenty elements\
    \ of the vector.\nIf the input vector has more than twenty elements, return the\
    \ first twenty elements of the vector.\nIf the input vector has more than twenty\
    \ elements, return the first twenty elements of the vector.\nIf the input vector\
    \ has more than twenty elements, return the first twenty elements of the vector.\n\
    If the input vector has more than twenty elements, return the first twenty elements\
    \ of the vector.\nIf the input vector has more than twenty elements, return the\
    \ first twenty elements of the vector.\nIf the input \nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4abt3m7a.jl:14\nin expression starting at\
    \ /tmp/tmp4abt3m7a.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0\n        error(\"Input list is empty\")\n    end\n    max_length = length(strings)\n\
    \    max_length_str = strings[max_length]\n    for s in strings[2:end]\n     \
    \   if length(s) < max_length\n            max_length = length(s)\n          \
    \  max_length_str = s\n        end\n    end\n    return max_length_str\nend\n\
    </cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\"\
    ])\n</cell>\n<text>\nExercise 3\nWrite a function that returns the number of elements\
    \ in the input list that satisfy a given predicate.\nusing Test\n\n@testset begin\n\
    \ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t\
    @test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqpviwdyb.jl:24\nin expression starting at\
    \ /tmp/tmpqpviwdyb.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0 \n        return None \n    else \n        return max(strings, key=length)\
    \ \nend\n</cell>\n<code language=julia-1.1>\nlongest([\"a\", \"bb\", \"ccc\"])\n\
    </cell>\n<code language=julia-1.1>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\"\
    ])\n</cell>\n<code language=julia-1.1>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\"\
    , \"eeeee\"])\n</cell>\n<code language=julia-1.1>\nlongest([\"a\", \"bb\", \"\
    ccc\", \"dddd\", \"eeeee\", \"fffff\"])\n</cell>\n<code language=julia-1.1>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\", \"fffff\", \"ggggg\"])\n\
    </cell>\n<code language=julia-1.1>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\"\
    , \"eeeee\", \"fffff\", \"ggggg\", \"hhhhh\"])\n</cell>\n<code language=julia-1.1>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\", \"fffff\", \"ggggg\", \"\
    hhhhh\", \"iiiii\"])\n</cell>\n<code language=julia-1.1>\nlongest([\"a\", \"bb\"\
    , \"ccc\", \"dddd\", \"eeeee\", \"fffff\", \"ggggg\", \"hhhhh\", \"iiiii\", \"\
    jjjjj\"])\n</cell>\n<code language=julia-1.1>\nlongest([\"a\", \"bb\", \"ccc\"\
    , \"dddd\", \"eeeee\", \"fffff\", \"ggggg\", \"hhhhh\", \"iiiii\", \"jjjjj\",\
    \ \"kkkkk\"])\n</cell>\n<code language=julia-1.1>\nlongest([\"a\", \"bb\", \"\
    ccc\", \"dddd\", \"eeeee\", \"fffff\", \"ggggg\", \"hhhhh\", \"iiiii\", \"jjjjj\"\
    , \"kkkkk\", \"lllll\"])\n</cell>\n<code language=julia-1.1>\nlongest([\"a\",\
    \ \"bb\", \"ccc\", \"dddd\", \"eeeee\", \"fffff\", \"ggggg\", \"hhhhh\", \"iiiii\"\
    , \"jjjjj\", \"kkkkk\", \"lllll\", \"mmmmm\"])\n</cell>\n<code language=julia-1.1>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\", \"fffff\", \"ggggg\", \"\
    hhhhh\", \"iiiii\", \"jjjjj\", \"kkkkk\", \"lllll\", \"mmmmm\", \"nnnnn\"])\n\
    </cell>\n<code language=julia-1.1>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\"\
    , \"eeeee\", \"fffff\", \"ggggg\", \"hhhhh\", \"iiiii\", \"jjjjj\", \"kkkkk\"\
    , \"lllll\", \"mmmm\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t\
    @test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"x\", \"\
    y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"www\",\
    \ \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp68l85vpj.jl:16\nin expression starting at\
    \ /tmp/tmp68l85vpj.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = Nothing\n    for s in strings\n        if longest == Nothing || length(longest)\
    \ < length(s)\n            longest = s\n        end\n    end\n    return longest\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpux_swfzk.jl:24\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([])) == nothing\n  MethodError: Cannot\
    \ `convert` an object of type Type{Nothing} to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] convert(#unused#::Type{Union{Nothing, String}},\
    \ x::Type)\n     @ Base ./some.jl:36\n   [2] longest(strings::Vector{String})\n\
    \     @ Main /tmp/tmpux_swfzk.jl:17\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpux_swfzk.jl:24 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpux_swfzk.jl:23\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    2      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpux_swfzk.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = strings[end-1]\n    for s in strings[2:end]\n        if length(longest) <\
    \ length(s) \n            longest = s\n        end\n    end\n    return longest\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpdk2wtfxo.jl:24\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([])) == nothing\n  BoundsError: attempt\
    \ to access 0-element Vector{String} at index [-1]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] longest(strings::Vector{String})\n  \
    \   @ Main /tmp/tmpdk2wtfxo.jl:11\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpdk2wtfxo.jl:24 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpdk2wtfxo.jl:23\ntest set:\
    \ Test Failed at /tmp/tmpdk2wtfxo.jl:25\n  Expression: candidate([\"x\", \"y\"\
    , \"z\"]) == \"x\"\n   Evaluated: \"y\" == \"x\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdk2wtfxo.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdk2wtfxo.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpdk2wtfxo.jl:26\n  Expression: candidate([\"x\", \"yyy\", \"\
    zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\"\n   Evaluated: \"kkkk\" == \"\
    zzzz\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdk2wtfxo.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdk2wtfxo.jl:23\nTest Summary:\
    \ | Fail  Error  Total\ntest set      |    2      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdk2wtfxo.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = strings[lengths(strings)==maximum(lengths(strings))]\n    if isempty(longest)\n\
    \        error(\"No string in list has same length\")\n    end\n    return longest\n\
    end\n</code>\n<|/ a tags=julia |>\n<| c |>\n`longest = strings[lengths(strings)==maximum(lengths(strings))]`\
    \ can be simplified to `longest = strings[lengths(strings)==maximum(lengths(strings))[1]]`\n\
    <|/ c |>\n<| c |>\nThanks for the suggestion. I've edited my answer to include\
    \ your suggestion.\n<|/ c |>\n<| a tags=julia |>\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpktr1e98l.jl:17\nin expression starting at\
    \ /tmp/tmpktr1e98l.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0 \n        return None \n    else \n        max_length = length(strings)\n\
    \        longest_string = strings[max_length]\n        for s in strings[2:end]\n\
    \            if length(s) == max_length\n                longest_string = s\n\
    \            else\n                break\n        end\n        return longest_string\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"\
    ccc\"])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the longest\
    \ substring of a given string.\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\
    \t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"x\", \"\
    y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"www\",\
    \ \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7sdj9b7i.jl:25\nin expression starting at\
    \ /tmp/tmp7sdj9b7i.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = strings[end]\n    for s in strings[2:end]\n        if length(s) > length(longest)\n\
    \            longest = s\n        end\n    end\n    longest\nend\n</code>\n<|/\
    \ a tags=julia,string |>\n<| a dscore=1 |>\n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t\
    @test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpivy7zu4l.jl:19\nin expression starting at\
    \ /tmp/tmpivy7zu4l.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0 \n        error(\"Input list is empty\") \n    else \n        longest =\
    \ strings[length(strings)-1] \n        for s in strings \n            if length(s)\
    \ > length(longest) \n                longest = s \n        return longest \n\
    end \nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpu4e94rxm.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu4e94rxm.jl:1\n\
    in expression starting at /tmp/tmpu4e94rxm.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = strings[1]\n    for string in strings[2:end]\n        if string.length() >\
    \ longest.length()\n            longest = string\n        end\n    end\n    longest\n\
    end\n</cell>\n<text>\nExercise: Write a function that takes a vector of strings\
    \ and returns the longest string in that vector. Return nothing if the vector\
    \ is empty.\nHint: Use the function longest.\nusing Test\n\n@testset begin\n\n\
    candidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_gwvug8l.jl:19\nin expression starting at\
    \ /tmp/tmp_gwvug8l.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0 \n        return None \n    else \n        max_length = length(strings)\
    \ \n        longest_string = strings[max_length] \n        for string in strings\
    \ \n            if length(string) == max_length \n                longest_string\
    \ = string \n            end \n        end \n        return longest_string \n\
    \    end \nend \n</cell>\n<code language=julia-1.1>\nlongest([\"a\", \"bb\", \"\
    ccc\", \"dddd\"])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the longest substring of a given string. For example, the longest substring\
    \ of the string \"abcabcbb\" would be \"abc\", while the longest substring of\
    \ the string \"bbbbb\" would be \"b\".\nusing Test\n\n@testset begin\n\ncandidate\
    \ = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe3ntjtyi.jl:24\nin expression starting at\
    \ /tmp/tmpe3ntjtyi.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = strings[1]\n    for s in strings[2:end]\n        if length(longest) > length(s)\
    \ \n            longest = s\n        end\n    end\n    return longest\nend\n</cell>\n\
    <code language=julia-1.4>\nlongest([\"a\", \"bb\", \"ccc\"])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the longest string in a list of strings.\
    \ If the list is empty, return an empty string. \nWrite a function that returns\
    \ the longest string in a list of strings. If the list is empty, return an empty\
    \ string. \nWrite a function that returns the longest string in a list of strings.\
    \ If the list is empty, return an empty string. \nWrite a function that returns\
    \ the longest string in a list of strings. If the list is empty, return an empty\
    \ string. \nWrite a function that returns the longest string in a list of strings.\
    \ If the list is empty, return an empty string. \nWrite a function that returns\
    \ the longest string in a list of strings. If the list is empty, return an empty\
    \ string. \nWrite a function that returns the longest string in a list of strings.\
    \ If the list is empty, return an empty string. \nWrite a function that returns\
    \ the longest string in a list of strings. If the list is empty, return an empty\
    \ string. \nWrite a function that returns the longest string in a list of strings.\
    \ If the list is empty, return an empty string. \nWrite a function that returns\
    \ the longest string in a list of strings. If the list is empty, return an empty\
    \ string. \nWrite a function that returns the longest string in a list of strings.\
    \ If the list is empty, return an empty string. \nWrite a function that returns\
    \ the longest string in a list of strings. If the list is empty, return an empty\
    \ string. \nWrite a function that returns the longest string in a list of strings.\
    \ If the list is empty, return an empty string. \nWrite a function that returns\
    \ the longest string in a list of strings. If the list is empty, return an empty\
    \ string. \nWrite a function that returns the longest string in a list of strings.\
    \ If the list is empty, return an empty string. \nWrite a function that returns\
    \ the longest string in a list of strings. If the list is empty, return an empty\
    \ string. \nWrite a function that returns the longest string in a list of strings.\
    \ If the list is empty, return an empty string. \nWrite a function that returns\
    \ the longest string in a list of strings. If the list is empty, return an empty\
    \ string. \nWrite a function that returns the longest string in a list of strings.\
    \ If the list is empty, return an empty string. \nWrite a function that returns\
    \ the longest string in a list of strings. If the list is empty, return an empty\
    \ string. \nWrite a function that returns the longest string in a list of strings.\
    \ If the list is empty, return an empty string. \nWrite a function that returns\
    \ the longest string in a list of strings. If the list is empty, return an empty\
    \ string. \nWrite a function that returns the longest string in a list of strings.\
    \ If the list is empty, return an empty string. \nWrite a function that returns\
    \ the longest string in a list of strings. If the \nusing Test\n\n@testset begin\n\
    \ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t\
    @test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj60q7ysu.jl:19\nin expression starting at\
    \ /tmp/tmpj60q7ysu.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = Nothing\n    for s in strings\n        if longest == Nothing || length(longest)\
    \ < length(s)\n            longest = s\n        end\n    end\n    return longest\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp77i0n_1l.jl:24\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([])) == nothing\n  MethodError: Cannot\
    \ `convert` an object of type Type{Nothing} to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] convert(#unused#::Type{Union{Nothing, String}},\
    \ x::Type)\n     @ Base ./some.jl:36\n   [2] longest(strings::Vector{String})\n\
    \     @ Main /tmp/tmp77i0n_1l.jl:17\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp77i0n_1l.jl:24 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp77i0n_1l.jl:23\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    2      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp77i0n_1l.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = strings[end-1]\n    for s in strings[2:end]\n        if length(longest) <\
    \ length(s) \n            longest = s\n        end\n    end\n    longest\nend\n\
    </code>\n<|/ a tags=julia,string |>\n<| a tags=julia,string |>\n<code>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpueq9m0l2.jl:19\nin expression starting at\
    \ /tmp/tmpueq9m0l2.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = strings[end].len()\n    for s in strings[2:end]\n        if s.len()>longest\n\
    \            longest = s.len()\n        end\n    end\n    longest\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector of strings and returns\
    \ the longest string in that vector. Return None if the vector is empty.\n>>>\
    \ longest(['a', 'b', 'c'])\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\
    \t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"x\", \"\
    y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"www\",\
    \ \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk5gp_14k.jl:19\nin expression starting at\
    \ /tmp/tmpk5gp_14k.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = strings[end-1]\n    for s in strings[2:end]\n        if length(longest) <\
    \ length(s) \n            longest = s\n        end\n    end\n    return longest\n\
    end\n</code>\n<|/ a |>\n<| a tags=julia |>\n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t\
    @test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa1kd2l6f.jl:19\nin expression starting at\
    \ /tmp/tmpa1kd2l6f.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = strings[end]\n    for s in strings[2:end]\n        if length(s) > length(longest)\n\
    \            longest = s\n        end\n    end\n    return longest\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpjkctl10c.jl:24\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([])) == nothing\n  BoundsError: attempt\
    \ to access 0-element Vector{String} at index [0]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] longest(strings::Vector{String})\n  \
    \   @ Main /tmp/tmpjkctl10c.jl:11\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpjkctl10c.jl:24 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpjkctl10c.jl:23\ntest set:\
    \ Test Failed at /tmp/tmpjkctl10c.jl:25\n  Expression: candidate([\"x\", \"y\"\
    , \"z\"]) == \"x\"\n   Evaluated: \"z\" == \"x\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjkctl10c.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjkctl10c.jl:23\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjkctl10c.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0 \n        return None \n    else \n        return max(strings) \nend\n\
    </cell>\n<text>\nExercise: Write a function that returns the longest string in\
    \ a list of strings. Use this function to find the longest string in our list\
    \ of strings.\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdfqstz0t.jl:16\nin expression starting at\
    \ /tmp/tmpdfqstz0t.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = strings[1]\n    for s in strings[2:end]\n        if length(longest) > length(s)\
    \ \n            longest = s\n        end\n    end\n    return longest\nend\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nusing Test\n\n@testset begin\n\n\
    candidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpst26hbhl.jl:19\nin expression starting at\
    \ /tmp/tmpst26hbhl.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = Nothing\n    for s in strings\n        if longest == Nothing || length(longest)\
    \ > length(s) \n            longest = s\n        end\n    end\n    return longest\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpyukvnilz.jl:24\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([])) == nothing\n  MethodError: Cannot\
    \ `convert` an object of type Type{Nothing} to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] convert(#unused#::Type{Union{Nothing, String}},\
    \ x::Type)\n     @ Base ./some.jl:36\n   [2] longest(strings::Vector{String})\n\
    \     @ Main /tmp/tmpyukvnilz.jl:17\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpyukvnilz.jl:24 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpyukvnilz.jl:23\ntest set:\
    \ Test Failed at /tmp/tmpyukvnilz.jl:26\n  Expression: candidate([\"x\", \"yyy\"\
    , \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\"\n   Evaluated: \"x\" == \"\
    zzzz\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyukvnilz.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyukvnilz.jl:23\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyukvnilz.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = strings[end]\n    for s in strings[2:end]\n        if length(longest) < length(s)\n\
    \            longest = s\n        end\n    end\n    return longest\nend\n</cell>\n\
    <text>\nExercise 4\nWrite a function that returns the longest string in a list\
    \ of strings.\nWrite a function that returns the longest string in a list of lists\
    \ of strings.\nWrite a function that returns the longest string in a list of lists\
    \ of lists of strings.\nWrite a function that returns the longest string in a\
    \ list of lists of lists of lists of strings.\nusing Test\n\n@testset begin\n\n\
    candidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp84xqnb90.jl:19\nin expression starting at\
    \ /tmp/tmp84xqnb90.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0 \n        return None \n    else \n        return max(strings, key=length)\
    \ \nend\n</cell>\n<text>\nExercise 4\nWrite a function that returns the longest\
    \ string in a list of strings. Return None in case the list is empty.\nusing Test\n\
    \n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphka77b30.jl:16\nin expression starting at\
    \ /tmp/tmphka77b30.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = strings[end]\n    for s in strings[2:end]\n        if length(s) > length(longest)\n\
    \            longest = s\n        end\n    end\n    return longest\nend\n</code>\n\
    <|/ a tags=julia |>\n<| c |>\nThanks for your answer. Could you please explain\
    \ how it works?\n<|/ c |>\n<| c |>\nI added some explanation. Hope it helps.\n\
    <|/ c |>\n<| c |>\nThanks for your answer. Could you please explain how it works?\n\
    <|/ c |>\n<| c |>\nI added some explanation. Hope it helps.\n<|/ c |>\n<| a dscore=2\
    \ |>\nI wrote a package called longest-string that does this for you:\n<code>\n\
    julia> using longest-string\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\
    \t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"x\", \"\
    y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"www\",\
    \ \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg6w7asl_.jl:19\nin expression starting at\
    \ /tmp/tmpg6w7asl_.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = strings[end-1]\n    for s in strings[2:end]\n        if length(s) > length(longest)\n\
    \            longest = s\n        end\n    end\n    longest\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpam522gc6.jl:24\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([])) == nothing\n  BoundsError: attempt\
    \ to access 0-element Vector{String} at index [-1]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] longest(strings::Vector{String})\n  \
    \   @ Main /tmp/tmpam522gc6.jl:11\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpam522gc6.jl:24 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpam522gc6.jl:23\ntest set:\
    \ Test Failed at /tmp/tmpam522gc6.jl:25\n  Expression: candidate([\"x\", \"y\"\
    , \"z\"]) == \"x\"\n   Evaluated: \"y\" == \"x\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpam522gc6.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpam522gc6.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpam522gc6.jl:26\n  Expression: candidate([\"x\", \"yyy\", \"\
    zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\"\n   Evaluated: \"kkkk\" == \"\
    zzzz\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpam522gc6.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpam522gc6.jl:23\nTest Summary:\
    \ | Fail  Error  Total\ntest set      |    2      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpam522gc6.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = strings[end-1]\n    for string in strings[2:end]\n        if string.length()\
    \ > longest.length()\n            longest = string\n        end\n    end\n   \
    \ longest\nend\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpi9fizvlf.jl:24\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([])) == nothing\n  BoundsError: attempt\
    \ to access 0-element Vector{String} at index [-1]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] longest(strings::Vector{String})\n  \
    \   @ Main /tmp/tmpi9fizvlf.jl:11\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpi9fizvlf.jl:24 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpi9fizvlf.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpi9fizvlf.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([\"x\", \"y\", \"z\"]) == \"x\"\n  type String has no field length\n\
    \  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] longest(strings::Vector{String})\n\
    \     @ Main /tmp/tmpi9fizvlf.jl:13\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpi9fizvlf.jl:25 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpi9fizvlf.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpi9fizvlf.jl:26\n  Test threw exception\n  Expression:\
    \ candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\"\
    \n  type String has no field length\n  Stacktrace:\n   [1] getproperty\n     @\
    \ ./Base.jl:42 [inlined]\n   [2] longest(strings::Vector{String})\n     @ Main\
    \ /tmp/tmpi9fizvlf.jl:13\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpi9fizvlf.jl:26 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpi9fizvlf.jl:23\nTest Summary:\
    \ | Error  Total\ntest set      |     3    "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi9fizvlf.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0 \n        error(\"Input list is empty\")\n    end\n    max_length = maximum([length(s)\
    \ for s in strings])\n    longest_string = nothing\n    for s in strings \n  \
    \      if length(s) == max_length \n            longest_string = s\n        end\n\
    \    end\n    if longest_string == nothing \n        error(\"All strings have\
    \ the same length\")\n    end\n    return longest_string\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp1q52wqj7.jl:31\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([])) == nothing\n  Input list is empty\n\
    \  Stacktrace:\n   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] longest(strings::Vector{String})\n\
    \     @ Main /tmp/tmp1q52wqj7.jl:12\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp1q52wqj7.jl:31 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp1q52wqj7.jl:30\ntest set:\
    \ Test Failed at /tmp/tmp1q52wqj7.jl:32\n  Expression: candidate([\"x\", \"y\"\
    , \"z\"]) == \"x\"\n   Evaluated: \"z\" == \"x\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1q52wqj7.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1q52wqj7.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp1q52wqj7.jl:33\n  Expression: candidate([\"x\", \"yyy\", \"\
    zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\"\n   Evaluated: \"kkkk\" == \"\
    zzzz\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1q52wqj7.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1q52wqj7.jl:30\nTest Summary:\
    \ | Fail  Error  Total\ntest set      |    2      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1q52wqj7.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0\n        error(\"Input list is empty\")\n    end\n    max_length = 0\n\
    \    for string in strings\n        if length(string) > max_length\n         \
    \   max_length = length(string)\n        end\n    end\n    if max_length > 0\n\
    \        longest_string = strings[max_length]\n        for string in strings\n\
    \            if length(string) == max_length\n                if string != longest_string\n\
    \                    longest_string = string\n                end\n          \
    \  end\n        end\n        return longest_string\n    else\n        return nothing\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp22w3426e.jl:39\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([])) == nothing\n  Input list is empty\n\
    \  Stacktrace:\n   [1] error(s::String)\n     @ Base ./error.jl:33\n   [2] longest(strings::Vector{String})\n\
    \     @ Main /tmp/tmp22w3426e.jl:12\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp22w3426e.jl:39 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp22w3426e.jl:38\ntest set:\
    \ Test Failed at /tmp/tmp22w3426e.jl:40\n  Expression: candidate([\"x\", \"y\"\
    , \"z\"]) == \"x\"\n   Evaluated: \"z\" == \"x\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp22w3426e.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp22w3426e.jl:38\ntest set: Test\
    \ Failed at /tmp/tmp22w3426e.jl:41\n  Expression: candidate([\"x\", \"yyy\", \"\
    zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\"\n   Evaluated: \"kkkk\" == \"\
    zzzz\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp22w3426e.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp22w3426e.jl:38\nTest Summary:\
    \ | Fail  Error  Total\ntest set      |    2      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp22w3426e.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0\n        error(\"Input list is empty\")\n    end\n    max_length = length(strings)\n\
    \    longest_string = strings[max_length]\n    for s in strings[2:end]\n     \
    \   if length(s) == max_length\n            longest_string = s\n        else\n\
    \            break\n        end\n    end\n    return longest_string\nend\n</cell>\n\
    <code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\"])\n</cell>\n\
    <code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\"\
    ])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\"\
    , \"eeee\", \"ffff\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"\
    bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\"\
    ])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\"\
    , \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\"\
    , \"iiii\", \"jjjj\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"\
    bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"\
    jjjj\", \"kkkk\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\"\
    , \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\"\
    , \"kkkk\", \"llll\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"\
    bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"\
    jjjj\", \"kkkk\", \"llll\", \"mmmm\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\"\
    , \"jjjj\", \"kkkk\", \"llll\", \"mmmm\", \"nnnn\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\"\
    , \"iiii\", \"jjjj\", \"kkkk\", \"llll\", \"mmmm\", \"nnnn\", \"oooo\"])\n</cell>\n\
    <code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\"\
    , \"ffff\", \"gggg\", \"hhhh\", \"iiii\nusing Test\n\n@testset begin\n\ncandidate\
    \ = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwx8t8gie.jl:25\nin expression starting at\
    \ /tmp/tmpwx8t8gie.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = Nothing\n    for s in strings\n        if longest == Nothing || length(longest)\
    \ > length(s)\n            longest = s\n        end\n    end\n    return longest\n\
    end\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\nI like using map for this:\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsthclbdz.jl:19\nin expression starting at\
    \ /tmp/tmpsthclbdz.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0 return None \n    max_length = length(strings)\n    max_length = max_length\
    \ > 1 ? max_length : 1\n    longest = strings[max_length]\n    for s in strings[2:end]\n\
    \        if length(s) < max_length \n            max_length = length(s)\n    \
    \        longest = s\n        end\n    end\n    return longest\nend\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nusing Test\n\n@testset begin\n\n\
    candidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_qnjmrco.jl:23\nin expression starting at\
    \ /tmp/tmp_qnjmrco.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = strings[end-1]\n    for s in strings[2:end]\n        if length(s)>length(longest)\n\
    \            longest = s\n        end\n    end\n    longest\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpzah4nnx_.jl:24\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([])) == nothing\n  BoundsError: attempt\
    \ to access 0-element Vector{String} at index [-1]\n  Stacktrace:\n   [1] getindex\n\
    \     @ ./array.jl:861 [inlined]\n   [2] longest(strings::Vector{String})\n  \
    \   @ Main /tmp/tmpzah4nnx_.jl:11\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpzah4nnx_.jl:24 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpzah4nnx_.jl:23\ntest set:\
    \ Test Failed at /tmp/tmpzah4nnx_.jl:25\n  Expression: candidate([\"x\", \"y\"\
    , \"z\"]) == \"x\"\n   Evaluated: \"y\" == \"x\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzah4nnx_.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzah4nnx_.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpzah4nnx_.jl:26\n  Expression: candidate([\"x\", \"yyy\", \"\
    zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\"\n   Evaluated: \"kkkk\" == \"\
    zzzz\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzah4nnx_.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzah4nnx_.jl:23\nTest Summary:\
    \ | Fail  Error  Total\ntest set      |    2      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzah4nnx_.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0 return None \n    max_length = length(strings)\n    longest_string = strings[max_length]\n\
    \    for string in strings\n        if length(string) == max_length\n        \
    \    return longest_string\n        end\n    end\n    return longest_string\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpt__xij4b.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpt__xij4b.jl:1\n\
    in expression starting at /tmp/tmpt__xij4b.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    longest\
    \ = strings[lengths(strings)==maximum(lengths(strings))]\n    if isempty(longest)\n\
    \        error(\"No strings contain same length\")\n    end\n    return longest\n\
    end\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\"])\n</cell>\n\
    <code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\"])\n</cell>\n\
    <code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\"\
    ])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\"\
    , \"eeee\", \"ffff\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"\
    bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\"\
    ])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\"\
    , \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\"\
    , \"iiii\", \"jjjj\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"\
    bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"\
    jjjj\", \"kkkk\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"bb\"\
    , \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\"\
    , \"kkkk\", \"llll\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"a\", \"\
    bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"\
    jjjj\", \"kkkk\", \"llll\", \"mmmm\"])\n</cell>\n<code language=julia-1.5>\nlongest([\"\
    a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\"\
    , \"jjjj\", \"kkkk\", \"llll\", \"mmmm\", \"nnnn\"])\n</cell>\n<code language=julia-1.5>\n\
    longest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\"\
    , \"iiii\", \"jjjj\", \"kkkk\", \"llll\", \"mmmm\", \"nnnn\", \"ooo\"])\n</cell>\n\
    <code language=julia-1.5>\nlongest([\"a\", \"bb\", \"ccc\", \"dddd\", \"eeee\"\
    , \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\", \"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfrcjcx01.jl:17\nin expression starting at\
    \ /tmp/tmpfrcjcx01.jl:17\n"
  exit_code: 1
  status: SyntaxError
