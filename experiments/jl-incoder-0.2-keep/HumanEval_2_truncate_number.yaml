name: HumanEval_2_truncate_number
language: julia
prompt: "\"\"\" Given a positive floating point number, it can be decomposed into\n\
  \    and integer part (largest integer smaller than given number) and decimals\n\
  \    (leftover part always smaller than 1).\n\n    Return the decimal part of the\
  \ number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\nfunction truncate_number(number::Float64)::Float64\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = truncate_number;\n\t@test(candidate(3.5)\
  \ == 0.5)\n\t@test(candidate(1.25) == 0.25)\n\t@test(candidate(123.0) == 0.0)\n\
  end\n"
completions: ["    \n    truncate_number = truncate_number(number)\n    \n    if truncate_number\
    \ == number\n        truncate_number = number\n    end\n    \n    return truncate_number\n\
    end\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code\
    \ language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    trun", "    \n    truncate_number = number % 1\n    \n    return truncate_number\n\
    end\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code\
    \ language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(", " \
    \   truncate_number = trunc(number)\nend\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<text>\nNow let's see how we can use these functions\
    \ to solve the problem of finding the largest prime factor of a given number.",
  "    truncate_number = number % 1\n    return truncate_number\nend", "    truncate_number\
    \ = trunc(number)\n    return truncate_number\nend\n</cell>\n<code language=julia-1.5>\n\
    # Test the function\ntruncate_number(3.5)\n</cell>\n<text>\nThe function truncate_number\
    \ has now been defined. Let's test it on a few examples:", "    \n    number =\
    \ round(number)\n    \n    if number < 1:\n        return number\n    \n    decimals\
    \ = math.floor(math.log(number, 10))\n    \n    if number % 1 == 0.0:\n      \
    \  return number / 10 ** decimals\n    \n    return number / 10 ** decimals +\
    \ 1\nend\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n\
    <code language=julia-1.5>\ntruncate_number(3.6)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.7)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.8)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.9)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(4.0)\n</cell>\n<code language=julia-1.5>\ntruncate_number(4.1)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(4.2)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(4.3)\n</cell>\n<code language=julia-1.5>\ntruncate_number(4.4)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(4.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(4.6)\n</cell>\n<code language=julia-1.5>\ntruncate_number(4.7)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(4.8)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(4.9)\n</cell>\n<code language=julia-1.5>\ntruncate_number(5.0)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(5.1)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(5.2)\n</cell>\n<code language=julia-1.5>\ntruncate_number(5.3)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(5.4)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(5.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(5.6)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(5.7)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(5.8)\n</cell>\n<code language=julia-1.5>\ntruncate_number(5.9)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(6.0)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(6.1)\n</cell>\n<code language=julia-1.5>\ntruncate_number(6.2)\n\
    </cell>\n<code language=julia-", "    truncate_number = trunc(number)\nend\n</cell>\n\
    <code language=julia-1.5>", "    truncate_number = round(number)\n    return truncate_number\n\
    end\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<text>\n\
    Now let's try it out on some examples:", "    truncate_number = floor(number)\n\
    \    truncate_number = truncate_number - truncate_number % 1\n    return truncate_number\n\
    end\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of digits in a given number.",
  "    truncate_number = round(number)\n    return truncate_number\nend", "    truncate_number\
    \ = trunc(number)\n    return truncate_number\nend\n</cell>\n<code language=julia-1.5>",
  "    truncate_number = truncate_number(number)\nend", "    \n    truncate_number\
    \ = number % 1\n    \n    return truncate_number\nend\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(", "    truncate_number = number % 1\n    return truncate_number\n\
    end\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<text>\n\
    The function truncate_number above is now ready to be used in our next exercise.",
  "    truncate_number = trunc(number)\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<text>\nNow let's write\
    \ a function which can convert a number from one base to another.", "    \n  \
    \  number = round(number)\n    \n    if number < 1:\n        return number\n \
    \   \n    decimals = math.floor(math.log(number, 10))\n    \n    if decimals ==\
    \ 0:\n        return number\n    \n    decimals = decimals + 1\n    \n    number\
    \ = number - math.pow(10, -decimals)\n    \n    return number\n</code>\n<|/ a\
    \ tags=julia,rounding |>\n<| a dscore=2 |>\nThe accepted answer does not work\
    \ for negative numbers. Here is a version that does:\n<code>", "    \n    truncate_number\
    \ = truncate_number(number)\n    \n    if truncate_number == 0.0\n        \n \
    \       return 0.0\n    \n    truncate_number = truncate_number - truncate_number\
    \ % 1\n    \n    return truncate_number\nend", "    \"\"\"\n    Truncate a floating\
    \ point number to the nearest integer.", "    truncate_number = trunc(number)\n\
    \    return truncate_number\nend\n</cell>\n<code language=julia-1.5>", "    truncate_number\
    \ = truncate_number(number)\nend\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<text>\nNow let's see how we can use our truncate function to round a\
    \ number to the nearest multiple of $10$:", "    truncate_number = round(number)\n\
    \    return truncate_number\nend\n</cell>\n<code language=julia-1.5>\n# Test the\
    \ function\ntruncate_number(3.5)\n</cell>\n<text>\nNow let's create a function\
    \ that can convert a number from one base to another.", "    truncate_number =\
    \ number % 1\n    return truncate_number\nend\n</cell>\n<code language=julia-1.5>",
  "    truncate_number = number % 1\n    return truncate_number\nend\n</cell>\n<code\
    \ language=julia-1.5>\n# Test the function\ntruncate_number(3.5)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that converts a number from one base to another.",
  "    truncate_number = number % 1\n    return truncate_number\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    truncate_number = number % 1\n    return truncate_number\n\
    end\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code\
    \ language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </", "    \n    truncate_number = number % 1\n    return truncate_number\nend\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.6)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.7)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.8)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.9)\n</cell>\n<code language=julia-1.5>\ntruncate_number(4.0)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(4.1)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(4.2)\n</cell>\n<code language=julia-1.5>\ntruncate_number(4.3)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(4.4)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(4.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(4.6)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(4.7)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(4.8)\n</cell>\n<code language=julia-1.5>\ntruncate_number(4.9)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(5.0)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(5.1)\n</cell>\n<code language=julia-1.5>\ntruncate_number(5.2)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(5.3)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(5.4)\n</cell>\n<code language=julia-1.5>\ntruncate_number(5.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(5.6)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(5.7)\n</cell>\n<code language=julia-1.5>\ntruncate_number(5.8)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(5.9)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(6.0)\n</cell>\n<code language=julia-1.5>\ntruncate_number(6.1)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(6.2)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(6.3)\n</cell>\n<code language=julia-1.5>\ntruncate_number(6.4)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(6.5)", "    truncate_number\
    \ = trunc(number)\n    return truncate_number\nend\n</cell>\n<code language=julia-1.5>\n\
    # Test the function\ntruncate_number(3.5)\n</cell>\n<text>\nThe function truncate_number\
    \ above is equivalent to the Julia function trunc\n(which truncates floating point\
    \ numbers to integers).", "    truncate_number = number % 1\n    return truncate_number\n\
    end\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code\
    \ language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </", "    \n    truncate_number = number % 1\n    \n    if truncate_number < 0.5\n\
    \        truncate_number = truncate_number + 1.0\n    end\n    \n    return truncate_number\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number of\
    \ digits in an integer.", "    truncate_number = number % 1\n    return truncate_number\n\
    end", "    truncate_number = number % 1\n    return truncate_number\nend", " \
    \   \n    number = round(number)\n    \n    if number % 1 == 0.0:\n        return\
    \ number\n    else:\n        return number - number % 1\nend\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<text>\nThe function truncate_number above is called\
    \ in the following cells.", "    \n    truncate_number = number % 1\n    \n  \
    \  return truncate_number\nend", "    truncate_number = trunc(number)\n    return\
    \ truncate_number\nend", "    truncate_number = number % 1\n    return truncate_number\n\
    end\n</cell>\n<code language=julia-1.1>\n# Tests\n@test truncate_number(3.5) ==\
    \ 0.5\n@test truncate_number(3.6) == 0.6\n@test truncate_number(3.7) == 0.7\n\
    @test truncate_number(3.8) == 0.8\n@test truncate_number(3.9) == 0.9\n@test truncate_number(3.10)\
    \ == 1.0\n@test truncate_number(3.11) == 1.1\n@test truncate_number(3.12) == 1.2\n\
    @test truncate_number(3.13) == 1.3\n@test truncate_number(3.14) == 1.4\n@test\
    \ truncate_number(3.15) == 1.5\n@test truncate_number(3.16) == 1.6\n@test truncate_number(3.17)\
    \ == 1.7\n@test truncate_number(3.18) == 1.8\n@test truncate_number(3.19) == 1.9\n\
    @test truncate_number(3.20) == 2.0\n@test truncate_number(3.21) == 2.1\n@test\
    \ truncate_number(3.22) == 2.2\n@test truncate_number(3.23) == 2.3\n@test truncate_number(3.24)\
    \ == 2.4\n@test truncate_number(3.25) == 2.5\n@test truncate_number(3.26) == 2.6\n\
    @test truncate_number(3.27) == 2.7\n@test truncate_number(3.28) == 2.8\n@test\
    \ truncate_number(3.29) == 2.9\n@test truncate_number(3.30) == 3.0\n@test truncate_number(3.31)\
    \ == 3.1\n@test truncate_number(3.32) == 3.2\n@test truncate_number(3.33) == 3.3\n\
    @test truncate_number(3.34) == 3.4\n@test truncate_number(3.35) == 3.5\n@test\
    \ truncate_number(3.36) == 3.6\n@test truncate_number(3.37) == 3.7\n@test truncate_number(3.38)\
    \ == 3.8\n@test truncate_number(3.39) == 3.9\n@test truncate_number(3.40) == 4.0\n\
    @test truncate_number(3.41) == 4.1\n@test truncate_number(3.42) == 4.2\n@test\
    \ truncate_number(3.43) == 4.3\n@test truncate_number(3.44) == 4.4\n@test truncate_number(3.45)\
    \ == 4.5\n@test truncate_number(3.46) == 4.6\n@test truncate_number(3.47) == 4.7\n\
    @test truncate_number(3.48) == 4.8\n@test truncate_number(3.49) == 4.9\n@test\
    \ truncate_number(3.50) == 5.0\n@test trun", "    \n    truncate_number = number\n\
    \    \n    truncate_number = truncate_number % 1\n    \n    if truncate_number\
    \ < 0.5\n        truncate_number = truncate_number * 2\n    end\n    \n    return\
    \ truncate_number\nend\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.4)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.6)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.7)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.8)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.9)\n</cell>\n<code language=julia-1.5>\ntruncate_number(4.0)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(4.1)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(4.2)\n</cell>\n<code language=julia-1.5>\ntruncate_number(4.3)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(4.4)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(4.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(4.6)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(4.7)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(4.8)\n</cell>\n<code language=julia-1.5>\ntruncate_number(4.9)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(5.0)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(5.1)\n</cell>\n<code language=julia-1.5>\ntruncate_number(5.2)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(5.3)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(5.4)\n</cell>\n<code language=julia-1.5>\ntruncate_number(5.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(5.6)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(5.7)\n</cell>\n<code language=julia-1.5>\ntruncate_number(5.8)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(5.9)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(6.0)\n</cell>\n<code language=julia-1.5>\ntruncate_number(6.1)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(6.", "    truncate_number\
    \ = trunc(number)\n    return truncate_number\nend", "    \n    truncate_number\
    \ = number % 1\n    \n    return truncate_number\nend", "    \n    truncate_number\
    \ = number % 1\n    \n    return truncate_number\nend\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of digits in an integer. \nFor example, truncate_number(1000) should\
    \ return 3.", "    \n    if number < 1.0\n        return number\n    \n    digits\
    \ = floor(log10(number))\n    decimals = digits-int(digits)\n    \n    number\
    \ = round(number*10^decimals)/10^decimals\n    \n    return number\nend\n</cell>\n\
    <code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.4)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.6)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.8)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.9)\n</cell>\n<code language=julia-1.5>\ntruncate_number(4.0)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(4.1)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(4.2)\n</cell>\n<code language=julia-1.5>\ntruncate_number(4.3)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(4.4)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(4.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(4.6)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(4.7)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(4.8)\n</cell>\n<code language=julia-1.5>\ntruncate_number(4.9)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(5.0)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(5.1)\n</cell>\n<code language=julia-1.5>\ntruncate_number(5.2)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(5.3)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(5.4)\n</cell>\n<code language=julia-1.5>\ntruncate_number(5.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(5.6)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(5.7)\n</cell>\n<code language=julia-1.5>\ntruncate_number(5.8)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(5.9)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(6.0)\n</cell>\n<code language=julia-1.5>\ntruncate_number(6.1)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(6.2)\n</cell>\n<code language=julia-1.5>\n",
  "    truncate_number = trunc(number)\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\n# TEST truncate number (5b)\n@test truncate_number(3.4)\
    \ == trunc(3.4)\n</cell>\n<text>\nExercise 4\nWrite a function that returns the\
    \ floor of a number. \nFor negative numbers, floor rounds downwards. For positive\
    \ numbers, floor rounds upwards.", "    \n    truncate_number = number % 1\n \
    \   \n    return truncate_number\n</code>\n<|/ a |>\n<| a |>\n<code>", "    truncate_number\
    \ = truncate_number(number)\n    truncate_number = truncate_number - truncate_number\
    \ % 1\n    return truncate_number\nend\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a positive floating point\
    \ number as input and returns the number rounded to a specified number of decimal\
    \ places.", "    \n    number = round(number)\n    \n    if number < 1:\n    \
    \    return number\n    \n    decimals = math.floor(math.log(number, 10))\n  \
    \  \n    if number % 1 == 0 and decimals > 1:\n        decimals -= 1\n    \n \
    \   return number / 10 ** decimals\nend\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of digits of an integer.", "    truncate_number = number % 1\n  \
    \  return truncate_number\nend\n</cell>\n<code language=julia-1.5>", "    truncate_number\
    \ = trunc(number)\n    return truncate_number\nend", "    truncate_number = trunc(number)\n\
    \    return truncate_number\nend", "    \n    digits = floor(log10(number))\n\
    \    decimals = number - truncate_number(number)\n    \n    if digits == 0\n \
    \       digits = 1\n    \n    return truncate_number(decimals) / pow(10.0, digits)\n\
    end\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a positive floating point number as input\
    \ and returns the decimal part as a floating point number.", "    truncate_number\
    \ = trunc(number)\nend", "    truncate_number = trunc(number)\nend\n</cell>\n\
    <code language=julia-1.3>\ntruncate_number(3.5)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of digits of an integer.", "    \n  \
    \  truncate_number = number % 1\n    return truncate_number\nend", "    truncate_number\
    \ = trunc(number)\n    return truncate_number\nend", "    truncate_number = number\
    \ % 1\n    return truncate_number\nend\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of digits\
    \ in an integer. For example, truncate_number(1000) should return 3.", "    truncate_number\
    \ = trunc(number)\n    return truncate_number\nend", "    truncate_number = trunc(number)\n\
    \    return truncate_number\nend\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<text>\nThe function truncate_number above is very similar to trunc (which\
    \ truncates a number to the nearest integer), but we also want to truncate decimal\
    \ numbers to the nearest integer. For example, truncate_number(3.5) should return\
    \ 3.5, but truncate_number(3.49) should return 3.", "    \n    truncate_number\
    \ = number % 1\n    \n    return truncate_number\nend\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.6)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.7)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.8)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.9)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(4.0)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(4.1)\n</cell>\n<code language=julia-1.5>\ntruncate_number(4.2)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(4.3)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(4.4)\n</cell>\n<code language=julia-1.5>\ntruncate_number(4.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(4.6)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(4.7)\n</cell>\n<code language=julia-1.5>\ntruncate_number(4.8)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(4.9)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(5.0)\n</cell>\n<code language=julia-1.5>\ntruncate_number(5.1)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(5.2)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(5.3)\n</cell>\n<code language=julia-1.5>\ntruncate_number(5.4)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(5.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(5.6)\n</cell>\n<code language=julia-1.5>\ntruncate_number(5.7)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(5.8)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(5.9)\n</cell>\n<code language=julia-1.5>\ntruncate_number(6.0)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(6.1)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(6.2)\n</cell>\n<code language=julia-1.5>\ntruncate_number(6.3)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(6.4)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(", "    \n    truncate_number = number % 1\n    \n    return truncate_number\n\
    end\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a positive floating point number as input\
    \ and returns the absolute value of that number.", "    \n    truncate_number\
    \ = number % 1\n    \n    return truncate_number\n</code>\n<|/ a tags=julia,floating-point,truncate\
    \ |>\n<| a tags=julia,floating-point,truncate |>\nThe easiest way is to use floor:\n\
    <code>\njulia> floor(1.5)\n1", "    truncate_number = truncate_number(number)\n\
    \    return truncate_number\nend\n</cell>\n<code language=julia-1.5>", "    truncate_number\
    \ = number % 1\n    return truncate_number\nend\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<text>\nThe function truncate_number above returns\
    \ the decimal part of the number.", "    truncate_number = truncate_number(number)\n\
    \    return truncate_number\nend", "    \n    digits = math.floor(math.log(number,\
    \ 10))\n    decimals = math.modf(number * 10^digits)[1]\n    \n    return number\
    \ / 10^digits * 10^decimals\nend\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<text>\nExercise\nWrite a function that returns the number of digits\
    \ in an integer. For example, truncate_number(1000) should return 3.", "    \n\
    \    truncate_number = number % 1\n    \n    return truncate_number\n</code>\n\
    <|/ a tags=julia |>\n<| a dscore=1 |>\nThe truncate function works in Julia 1.0\
    \ and 1.1 but not in Julia 1.2. \n<code>\njulia> truncate(3.5)\nERROR: MethodError:\
    \ no method matching truncate(::Float64)\nClosest candidates are:\n  truncate(::AbstractFloat)\
    \ at float.jl:425\n  truncate(::AbstractFloat, ::Int64) at float.jl:425\n  ...\n\
    Stacktrace:\n [1] top-level scope at none:0\n</code>\nThe truncate function was\
    \ introduced in Julia 1.2 but was later removed in Julia 1.0. \nThe truncate function\
    \ was introduced in Julia 1.2 but was later removed in Julia 1.0. \nThe truncate\
    \ function was introduced in Julia 1.2 but was later removed in Julia 1.0. \n\
    The truncate function was introduced in Julia 1.2 but was later removed in Julia\
    \ 1.0. \nThe truncate function was introduced in Julia 1.2 but was later removed\
    \ in Julia 1.0. \nThe truncate function was introduced in Julia 1.2 but was later\
    \ removed in Julia 1.0. \nThe truncate function was introduced in Julia 1.2 but\
    \ was later removed in Julia 1.0. \nThe truncate function was introduced in Julia\
    \ 1.2 but was later removed in Julia 1.0. \nThe truncate function was introduced\
    \ in Julia 1.2 but was later removed in Julia 1.0. \nThe truncate function was\
    \ introduced in Julia 1.2 but was later removed in Julia 1.0. \nThe truncate function\
    \ was introduced in Julia 1.2 but was later removed in Julia 1.0. \nThe truncate\
    \ function was introduced in Julia 1.2 but was later removed in Julia 1.0. \n\
    The truncate function was introduced in Julia 1.2 but was later removed in Julia\
    \ 1.0. \nThe truncate function was introduced in Julia 1.2 but was later removed\
    \ in Julia 1.0. \nThe truncate function was introduced in Julia 1.2 but was later\
    \ removed in Julia 1.0. \nThe truncate function was introduced in Julia 1.2 but\
    \ was later removed in Julia 1.0. \nThe truncate function was introduced in Julia\
    \ 1.2 but was later removed in Julia 1.0. \nThe truncate function was introduced\
    \ in Julia 1.2 but was later removed in Julia 1.0. \nThe truncate ", "    truncate_number\
    \ = trunc(number)\n    return truncate_number\nend\n</cell>\n<code language=julia-1.5>",
  "    truncate_number = number % 1\n    return truncate_number\nend\n</cell>\n<code\
    \ language=julia-1.4>\n# Test the truncate function\ntruncate_number(3.5)\n</cell>\n\
    <text>\nNow let's write a function that converts a decimal number to its binary\
    \ representation.", "    truncate_number = truncate_number(number)\n    return\
    \ truncate_number\nend", "    truncate_number = trunc(number)\n    return truncate_number\n\
    end", "    truncate_number = number % 1\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\n# Test the truncation function\ntruncate_number(3.5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that converts a number from one\
    \ base to another. \nFor example convert from decimal to hexadecimal.", "    \n\
    \    truncate_number = trunc(number)\n    \n    return truncate_number\nend\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.6)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(", "    truncate_number =\
    \ truncate_number(number)\n    truncate_number = truncate_number - truncate_number\
    \ % 1\n    return truncate_number\nend\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<text>\nNow let's try it out on some random numbers:", "    \n    truncate_number\
    \ = number % 1\n    \n    return truncate_number\nend", "    truncate_number =\
    \ round(number)\nend\n</cell>\n<code language=julia-1.5>", "    truncate_number\
    \ = trunc(number)\n    return truncate_number\nend", "    truncate_number = number\
    \ % 1\n    return truncate_number\nend", "    truncate_number = truncate_number(number)\n\
    end\n</cell>\n<code language=julia-1.5>", "    truncate_number = truncate_number(number)\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    truncate_number = truncate_number(number)\n\
    \    \n    return truncate_number\nend\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_", "    truncate_number\
    \ = trunc(number)\n    return truncate_number\nend\n</cell>\n<code language=julia-1.5>\n\
    # Test the function\ntruncate_number(3.5)\n</cell>\n<text>\nNow let's write a\
    \ function that will calculate the mean of a given vector:", "    truncate_number\
    \ = number % 1\n    return truncate_number\nend\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<text>\nThe function truncate_number above is now\
    \ a Julia function, and can be called from Julia code just as we did with truncate_number_from_string\
    \ above:", "    truncate_number = trunc(number)\n    return truncate_number\n\
    end", "    \n    truncate_number = number % 1\n    \n    return truncate_number\n\
    end\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<text>\n\
    Now let's write a function that will compute the mean of a given vector of numbers.",
  "    \"\"\"\n    Truncate a floating point number to the nearest integer.", "  \
    \  \n    if number < 0\n        error(\"Truncating negative numbers not supported\"\
    )\n    end\n    \n    digits = floor(log10(abs(number)))\n    \n    if digits\
    \ < 0\n        error(\"Truncating negative numbers not supported\")\n    end\n\
    \    \n    digits = max(digits, 0)\n    \n    digits = min(digits, 10)\n    \n\
    \    digits = digits - digits(number)\n    \n    digits = digits + digits(number)\n\
    \    \n    return number / 10^digits\nend\n</cell>\n<text>\nThe function truncate_number\
    \ takes the number as an argument and returns the truncated number.", "    \n\
    \    truncate_number = truncate_number(number)\n    \n    return truncate_number\n\
    </code>\n<|/ a tags=julia,truncate |>\n<| a tags=julia,truncate |>\nThe accepted\
    \ answer does not work for negative numbers. Here is a version that does:\n<code>",
  "    truncate_number = trunc(number)\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>", "    truncate_number = number % 1\n    return truncate_number\n\
    end\n</cell>\n<code language=julia-1.5>", "    truncate_number = truncate_number(number)\n\
    \    return truncate_number\nend\n</cell>\n<code language=julia-1.5>", "    truncate_number\
    \ = trunc(number)\n    return truncate_number\nend", "    \n    truncate_number\
    \ = truncate_number(number)\n    \n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\n# export", "    truncate_number = floor(number)\n \
    \   truncate_number = truncate_number - truncate_number % 1\n    return truncate_number\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    truncate_number = number\
    \ % 1\n    \n    return truncate_number\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\ndef truncate_number(number::Float64)::Float64 \n    \n    truncate_number\
    \ = number % 1\n    \n    return truncate_number\n</code>\n<|/ a tags=julia |>\n\
    <| c |>\nWhile this code may answer the question, providing additional context\
    \ regarding why and/or how this code answers the question improves its long-term\
    \ value.\n<|/ c |>\n<| a tags=julia |>\n<code>", "    truncate_number = floor(number)\n\
    \    truncate_number = truncate_number - truncate_number % 1\n    return truncate_number\n\
    end\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<text>\n\
    Now let's see how we can use our truncate_number function to truncate our data\
    \ set. We'll start by creating a truncated data set and then we'll use our truncate_number\
    \ function to truncate our data set.", "    \n    truncate_number = truncate_number(number)\n\
    \    \n    if truncate_number == number\n        truncate_number\n    else\n \
    \       truncate_number - truncate_number(number)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-", "    truncate_number =\
    \ floor(number)\n    return truncate_number\nend\n</cell>\n<code language=julia-1.5>\n\
    # Test the function\ntruncate_number(3.5)\n</cell>\n<text>\nThe function truncate_number\
    \ has two outputs: truncate_number itself and truncate_number. \nThe first output\
    \ is the truncated number and the second output is the truncated number rounded\
    \ to the nearest integer.", "    truncate_number = trunc(number)\n    return truncate_number\n\
    end\n</cell>\n<code language=julia-1.5>", "    truncate_number = number % 1\n\
    \    return truncate_number\nend\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<text>\nThe function truncate_number above is equivalent to the following\
    \ Python code:", "    truncate_number = trunc(number)\n    return truncate_number\n\
    end", "    truncate_number = number % 1\n    return truncate_number\nend", " \
    \   truncate_number = trunc(number)\nend", "    truncate_number = truncate_number(number)\n\
    \    return truncate_number\nend", "    truncate_number = round(number)\nend\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.4)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.6)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.7)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.8)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.9)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.1)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.2)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.3)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.4)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.6)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.7)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.8)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.9)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.1)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.2)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.3)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.4)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.6)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.7)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.8)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.9)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.1)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.2)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.3)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.4)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.6)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.7)\n</cell>\n<code language=julia-",
  "    \"\"\"\n    Truncate a floating point number to the nearest integer.", "  \
    \  \n    if number < 1.0\n        return number\n    \n    digits = floor(log10(number))\n\
    \    \n    if digits < 0\n        return number\n    \n    digits = digits - 1\n\
    \    \n    number = round(number * 10^digits)\n    \n    return number\nend\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=juli",
  "    truncate_number = truncate_number(number)\n    \n    return truncate_number\n\
    end", "    truncate_number = truncate_number(number)\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    if number == 0.0:\n        return 0.0\n    \n    digits = math.floor(math.log(number,\
    \ 10))\n    decimals = number % 1.0\n    \n    if decimals < 1.0:\n        return\
    \ number - decimals\n    else:\n        return number - digits + 1.0\nend\n</cell>\n\
    <code language=julia-1.4>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.4>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.4>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.4>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.4>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.4>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.4>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.4>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.4>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.4>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.4>\n\
    trun", "    \n    truncate_number = number % 1\n    \n    return truncate_number\n\
    end\n</cell>\n<code language=julia-1.5>\n# Test the function\ntruncate_number(3.5)\n\
    </cell>\n<text>\nNow let's write a function that takes a vector of numbers and\
    \ returns the sum of the numbers in the vector. Make sure to handle edge cases\
    \ (empty vector, numbers summing to zero, etc.)", "    truncate_number = truncate_number(number)\n\
    \    return truncate_number\nend", "    truncate_number = trunc(number)\n    return\
    \ truncate_number\nend\n</cell>\n<code language=julia-1.5>\n# Test the function\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n# Test the function\
    \ with negative numbers\ntruncate_number(-3.5)\n</cell>\n<code language=julia-1.5>\n\
    # Test the function with zero\ntruncate_number(0.0)\n</cell>\n<code language=julia-1.5>\n\
    # Test the function with negative zero\ntruncate_number(-0.0)\n</cell>\n<code\
    \ language=julia-1.5>\n# Test the function with NaN\ntruncate_number(NaN)\n</cell>\n\
    <code language=julia-1.5>\n# Test the function with Inf\ntruncate_number(Inf)\n\
    </cell>\n<code language=julia-1.5>\n# Test the function with Inf\ntruncate_number(-Inf)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of digits\
    \ in an integer.", "    truncate_number = number % 1\n    return truncate_number\n\
    end\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<text>\n\
    Exercise\nWrite a function that takes a positive floating point number as input\
    \ and returns the integer part and the decimal part separately. Test your function\
    \ by calling it with the value 3.5.", "    truncate_number = truncate_number(number)\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    truncate_number = number\
    \ % 1\n    \n    return truncate_number\nend\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<text>\nThe function truncate_number above returns\
    \ the decimal part of the number. Let's see how it works:", "    truncate_number\
    \ = trunc(number)\n    return truncate_number\nend\n</cell>\n<code language=julia-1.5>\n\
    # Test the function\ntruncate_number(3.5)\n</cell>\n<text>\nNow let's write a\
    \ function which can convert a number from one base to another. We'll use our\
    \ truncate_number function to truncate the decimal part of a number and then use\
    \ convert() to convert it to a different base.", "    \"\"\"\n    Truncate a floating\
    \ point number to the nearest integer.", "    truncate_number = number % 1\n \
    \   return truncate_number\nend\n</cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a positive floating point\
    \ number as input and returns the absolute value of that number.", "    \n   \
    \ truncate_number = truncate_number(number)\n    \n    return truncate_number\n\
    end\n</cell>\n<code language=julia-1.5>", "    truncate_number = number % 1\n\
    \    return truncate_number\nend\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of digits\
    \ of an integer.", "    truncate_number = trunc(number)\nend\n</cell>\n<code language=julia-1.5>",
  "    \"\"\"\n    Truncate a floating point number to the nearest integer.", "  \
    \  truncate_number = truncate_number(number)\n    return truncate_number\nend",
  "    truncate_number = number % 1\n    return truncate_number\nend", "    truncate_number\
    \ = number % 1\n    return truncate_number\nend", "    truncate_number = truncate_number(number)\n\
    end\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code\
    \ language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=", "    truncate_number = trunc(number)\n    return truncate_number\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    truncate_number = number\
    \ % 1\n    \n    return truncate_number\nend\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<text>\nExercise\nWrite a function that returns\
    \ the number of decimal places needed to represent a given floating point number.",
  "    truncate_number = trunc(number)\nend\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<text>\nExercise: Write a function that takes a\
    \ floating point number as input and returns the decimal part as a floating point\
    \ number.", "    truncate_number = number % 1\n    return truncate_number\nend\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.6)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.4)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.0)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.1)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.2)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.3)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.4)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.6)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.4)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.0)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.1)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.2)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.3)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.4)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.6)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.4)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.0)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.1)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.2)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.3)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.4)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.6)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.4)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.0)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.1)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.2)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.3)\n</", "    truncate_number\
    \ = floor(number)\n    truncate_number = truncate_number - truncate_number % 1\n\
    \    return truncate_number\nend\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.6)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.7)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.8)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.9)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(4.0)\n</cell>\n<code language=julia-1.5>\ntruncate_number(4.1)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(4.2)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(4.3)\n</cell>\n<code language=julia-1.5>\ntruncate_number(4.4)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(4.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(4.6)\n</cell>\n<code language=julia-1.5>\ntruncate_number(4.7)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(4.8)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(4.9)\n</cell>\n<code language=julia-1.5>\ntruncate_number(5.0)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(5.1)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(5.2)\n</cell>\n<code language=julia-1.5>\ntruncate_number(5.3)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(5.4)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(5.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(5.6)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(5.7)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(5.8)\n</cell>\n<code language=julia-1.5>\ntruncate_number(5.9)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(6.0)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(6.1)\n</cell>\n<code language=julia-1.5>\ntruncate_number(6.2)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(6.3)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(6.4)\n</cell>\n", "    \n    truncate_number = number % 1\n  \
    \  \n    return truncate_number\nend\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.6)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(", " \
    \   \n    truncate_number = number % 1\n    \n    if truncate_number < 0.5\n \
    \       truncate_number = truncate_number + 1.0\n    end\n    \n    return truncate_number\n\
    end\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of digits in an integer.\
    \ For example, truncate_number(1000) should return 3.", "    truncate_number =\
    \ number % 1\n    return truncate_number\nend\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a positive floating point number and returns the number of decimal places it\
    \ is composed of. For example, truncate_number(3.5) should return 2.", "    truncate_number\
    \ = trunc(number)\n    return truncate_number\nend", "    truncate_number = truncate_number(number)\n\
    end", "    truncate_number = trunc(number)\n    return truncate_number\nend\n\
    </cell>\n<code language=julia-1.1>", "    truncate_number = truncate_number(number)\n\
    \    return truncate_number\nend", "    \n    truncate_number = number % 1\n \
    \   \n    return truncate_number\nend\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.4)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.6)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.8)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.9)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.6)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.8)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.9)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.6)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.8)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.9)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.6)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.8)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.9)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.6)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.8)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.9)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.6)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.8)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.9)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.6)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.8)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.9)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(", " \
    \   truncate_number = trunc(number)\n    return truncate_number\nend", "    \n\
    \    truncate_number = number % 1\n    \n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a positive floating point number as input and returns\
    \ the decimal part as a Float64 number.", "    truncate_number = number % 1\n\
    \    return truncate_number\nend\n</cell>\n<code language=julia-1.5>", "    \n\
    \    truncate_number = number % 1\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.6)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.7)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.8)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.9)\n</cell>\n<code language=julia-1.5>\ntruncate_number(4)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(4.1)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(4.2)\n</cell>\n<code language=julia-1.5>\ntruncate_number(4.3)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(4.4)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(4.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(4.6)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(4.7)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(4.8)\n</cell>\n<code language=julia-1.5>\ntruncate_number(4.9)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(5.1)\n</cell>\n<code language=julia-1.5>\ntruncate_number(5.2)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(5.3)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(5.4)\n</cell>\n<code language=julia-1.5>\ntruncate_number(5.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(5.6)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(5.7)\n</cell>\n<code language=julia-1.5>\ntruncate_number(5.8)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(5.9)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(6)\n</cell>\n<code language=julia-1.5>\ntruncate_number(6.1)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(6.2)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(6.3)\n</cell>\n<code language=julia-1.5>\ntruncate_number(6.4)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(6.5)\n</cell", "    \"\"\"\
    \n    Truncate a floating point number to a decimal number.", "    truncate_number\
    \ = trunc(number)\n    return truncate_number\nend", "    truncate_number = number\
    \ % 1\n    return truncate_number\nend\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<text>\nNow let's write a function that will compute the mean of a given\
    \ vector of numbers.", "    truncate_number = trunc(number)\n    return truncate_number\n\
    end\n</cell>\n<code language=julia-1.5>\n# export", "    truncate_number = truncate_number(number)\n\
    \    return truncate_number\nend", "    truncate_number = number % 1\n    return\
    \ truncate_number\nend", "    truncate_number = trunc(number)\n    return truncate_number\n\
    end", "    truncate_number = trunc(number)\n    return truncate_number\nend",
  "    \"\"\"\n    Truncate a floating point number to its decimal part.", "    truncate_number\
    \ = trunc(number)\n    return truncate_number\nend", "    truncate_number = truncate_number(number)\n\
    \    return truncate_number\nend\n</cell>\n<code language=julia-1.5>\n# export",
  "    \n    truncate_number = trunc(number)\n    \n    return truncate_number\nend\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(", "    \n    truncate_number\
    \ = number % 1\n    \n    if truncate_number < 0.5\n        truncate_number =\
    \ truncate_number + 1.0\n    end\n    \n    return truncate_number\nend\n</cell>\n\
    <text>\nThe function truncate_number above is called from the function truncate_number\
    \ below. Let's see how it works.", "    truncate_number = truncate_number(number)\n\
    end\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a positive floating point number as input\
    \ and returns the integer part and decimal part separately.", "    truncate_number\
    \ = trunc(number)\n    return truncate_number\nend\n</cell>\n<code language=julia-1.5>",
  "    truncate_number = number % 1\n    return truncate_number\nend\n</cell>\n<text>\n\
    Now let's test our truncate function by applying it to a few different numbers:",
  "    truncate_number = number % 1\n    return truncate_number\nend", "    truncate_number\
    \ = number % 1\n    return truncate_number\nend\n</cell>\n<code language=julia-1.5>",
  "    truncate_number = floor(number)\n    truncate_number = truncate_number - truncate_number\
    \ * truncate_number\n    return truncate_number\nend\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<text>\nThe function truncate_number above is called\
    \ with one argument, number::Float64. Julia will automatically infer the type\
    \ of the argument from the function definition. Julia will also infer the type\
    \ of the return value from the function definition. Julia will also infer the\
    \ type of the function from the function definition. Julia will also infer the\
    \ type of the function from the function definition. Julia will also infer the\
    \ type of the function from the function definition. Julia will also infer the\
    \ type of the function from the function definition. Julia will also infer the\
    \ type of the function from the function definition. Julia will also infer the\
    \ type of the function from the function definition. Julia will also infer the\
    \ type of the function from the function definition. Julia will also infer the\
    \ type of the function from the function definition. Julia will also infer the\
    \ type of the function from the function definition. Julia will also infer the\
    \ type of the function from the function definition. Julia will also infer the\
    \ type of the function from the function definition. Julia will also infer the\
    \ type of the function from the function definition. Julia will also infer the\
    \ type of the function from the function definition. Julia will also infer the\
    \ type of the function from the function definition. Julia will also infer the\
    \ type of the function from the function definition. Julia will also infer the\
    \ type of the function from the function definition. Julia will also infer the\
    \ type of the function from the function definition. Julia will also infer the\
    \ type of the function from the function definition. Julia will also infer the\
    \ type of the function from the function definition. Julia will also infer the\
    \ type of the function from the function definition. Julia will also infer the\
    \ type of the function from the function definition. Julia will also infer the\
    \ type of the function from the function definition. Julia will also infer the\
    \ type of the function from the function definition. Julia will also infer the\
    \ type of the function from the function definition. Julia will also infer the\
    \ type of the function from the function definition. Julia will also infer the\
    \ type of the function from the function definition. Julia will also infer the\
    \ type of the function from the function definition. Julia will also infer the\
    \ type of the function from the function definition. Julia will also infer the\
    \ type of the function from the function definition. Julia will also infer the\
    \ type of the function from the function definition. Julia will also infer the\
    \ type of the function from the function definition. Julia will also infer the\
    \ type of the function from the function definition. Julia will also infer the\
    \ type of the function from the function definition. Julia will also infer the\
    \ type of the function from the function definition. Julia will also infer the\
    \ type of the function from the function ", "    \n    truncate_number = truncate_number(number)\n\
    \    \n    if truncate_number == number\n        \n        return number\n   \
    \ \n    truncate_number = truncate_number - truncate_number % 1\n    \n    return\
    \ truncate_number\nend\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.6)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.8)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.9)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.6)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.8)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.9)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.6)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.8)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.9)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.6)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.8)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.9)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.6)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.8)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.9)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.6)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.8)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.9)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.6)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.8)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.9)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.", "    truncate_number\
    \ = trunc(number)\nend\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<text>\nNow let's try it out on some random numbers:", "    \"\"\"\n\
    \    Given a positive floating point number, it can be decomposed into\n    and\
    \ integer part (largest integer smaller than given number) and decimals\n    (leftover\
    \ part always smaller than 1).", "    \n    truncate_number = number % 1\n   \
    \ \n    return truncate_number\nend\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(", " \
    \   truncate_number = number % 1\n    return truncate_number\nend", "    truncate_number\
    \ = truncate_number(number)\n    return truncate_number\nend", "    truncate_number\
    \ = trunc(number)\nend\n</cell>\n<code language=julia-1.5>", "    truncate_number\
    \ = trunc(number)\n    return truncate_number\nend\n</cell>\n<code language=julia-1.5>",
  "    truncate_number = number % 1\n    return truncate_number\nend\n</cell>\n<code\
    \ language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</", "    truncate_number\
    \ = number % 1\n    return truncate_number\nend\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of digits of a given number. \nFor example truncate_number(3.141592653589793)\
    \ should return 3.", "    \n    digits = floor(log10(number))\n    decimals =\
    \ number - truncate_number(number)\n    \n    if digits > decimals:\n        return\
    \ truncate_number(number / 10.0)\n    \n    return number\n</code>\n<|/ a |>\n\
    <| a tags=julia,floating-point |>\nI wrote a package for Julia that does this\
    \ for you:\nhttps://github.com/jrm/FloatTruncate\n<code>\njulia> using FloatTruncate",
  "    truncate_number = round(number)\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<text>\nNow let's use\
    \ our truncate_number function to truncate our data frame to only include data\
    \ points with an actual value greater than or equal to our cutoff.", "    truncate_number\
    \ = number % 1\n    return truncate_number\nend", "    truncate_number = number\
    \ % 1\n    return truncate_number\nend", "    truncate_number = trunc(number)\n\
    \    return truncate_number\nend", "    truncate_number = number % 1\n    return\
    \ truncate_number\nend", "    truncate_number = number % 1\n    return truncate_number\n\
    end\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<text>\n\
    Exercise\nWrite a function that returns the first n prime numbers. \nHint: Use\
    \ a for loop and a prime number generator", "    \n    number = round(number,\
    \ digits=digits)\n    \n    if number % 1 == 0.0:\n        return number\n   \
    \ else:\n        return number - math.floor(number)\nend\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<text>\nThe function truncate_number above is called\
    \ in the following way:", "    truncate_number = trunc(number)\n    return truncate_number\n\
    end\n</cell>\n<code language=julia-1.5>", "    truncate_number = trunc(number)\n\
    \    return truncate_number\nend", "    \n    number = round(number)\n    \n \
    \   if number < 1:\n        return number\n    \n    decimal = number % 1\n  \
    \  \n    if number < 10:\n        return number\n    \n    number = number / 10\n\
    \    \n    if number < 10:\n        return number\n    \n    number = number /\
    \ 10\n    \n    if number < 10:\n        return number\n    \n    number = number\
    \ / 10\n    \n    if number < 10:\n        return number\n    \n    number = number\
    \ / 10\n    \n    if number < 10:\n        return number\n    \n    number = number\
    \ / 10\n    \n    if number < 10:\n        return number\n    \n    number = number\
    \ / 10\n    \n    if number < 10:\n        return number\n    \n    number = number\
    \ / 10\n    \n    if number < 10:\n        return number\n    \n    number = number\
    \ / 10\n    \n    if number < 10:\n        return number\n    \n    number = number\
    \ / 10\n    \n    if number < 10:\n        return number\n    \n    number = number\
    \ / 10\n    \n    if number < 10:\n        return number\n    \n    number = number\
    \ / 10\n    \n    if number < 10:\n        return number\n    \n    number = number\
    \ / 10\n    \n    if number < 10:\n        return number\n    \n    number = number\
    \ / 10\n    \n    if number < 10:\n        return number\n    \n    number = number\
    \ / 10\n    \n    if number < 10:\n        return number\n    \n    number = number\
    \ / 10\n    \n    if number < 10:\n        return number\n    \n    number = number\
    \ / 10\n    \n    if number < 10:\n        return number\n    \n    number = number\
    \ / 10\n    \n    if number < 10:\n        return number\n    \n    number = number\
    \ / 10\n    \n    if number < 10:\n        return number\n    \n    number = number\
    \ / 10\n    \n    if number < 10:\n        return number\n    \n    number = number\
    \ / 10\n    \n    if number < 10:\n        return number\n    \n    number = number\
    \ / 10\n    \n    if number < 10:\n        return number\n    \n    number = number\
    \ / 10\n    \n    if number < 10:\n        return number\n    \n    number = number\
    \ / 10\n    \n    if number < 10:\n        return number\n    \n    number = number\
    \ / 10\n    \n    if number < 10:\n        return number\n    \n    number = number\
    \ / 10\n    \n    if number < 10:\n        return number\n    \n    number = number\
    \ / 10\n    \n    if number < 10:\n        return number\n    \n    number = number\
    \ / 10\n", "    \n    truncate_number = number % 1\n    \n    return truncate_number\n\
    </code>\n<|/ a tags=julia,floating-point |>\n<| c |>\nThis doesn't work if you\
    \ have a negative number like `-3.5`.\n<|/ c |>\n<| c |>\nI added a version that\
    \ works with negative numbers. Thanks for pointing that out.\n<|/ c |>\n<| a dscore=4\
    \ |>\nThe most straightforward way is to use round:\n<code>\njulia> round(3.5)\n\
    3\n</code>\n<|/ a tags=julia,floating-point |>\n<| a tags=julia,floating-point\
    \ |>\nThe easiest way is to use round:\n<code>\njulia> round(3.5)\n3\n</code>\n\
    <|/ a dscore=4 |>\n<| a |>\nThe easiest way is to use round:\n<code>\njulia> round(3.5)\n\
    3\n</code>\n<|/ a tags=julia,floating-point dscore=4 |>\n<| a dscore=3 |>\nThe\
    \ easiest way is to use round:\n<code>\njulia> round(3.5)\n3\n</code>\n<|/ a tags=julia,floating-point\
    \ |>\n<| a tags=julia,floating-point |>\nThe easiest way is to use round:\n<code>\n\
    julia> round(3.5)\n3\n</code>\n<|/ a dscore=3 |>\n<| a dscore=3 |>\nThe easiest\
    \ way is to use round:\n<code>\njulia> round(3.5)\n3\n</code>\n<|/ a tags=julia,floating-point\
    \ |>\n<| a tags=julia,floating-point |>\nThe easiest way is to use round:\n<code>\n\
    julia> round(3.5)\n3\n</code>\n<|/ a dscore=3 |>\n<| a dscore=3 |>\nThe easiest\
    \ way is to use round:\n<code>\njulia> round(3.5)\n3\n</code>\n<|/ a tags=julia,floating-point\
    \ |>\n<| a dscore=3 |>\nThe easiest way is to use round:\n<code>\njulia> round(3.5)\n\
    3\n</code>\n<|/ a tags=julia,floating-point |>\n<| a dscore=3 |>\nThe easiest\
    \ way is to use round:\n<code>\njulia> round(3.5)\n3\n</code>\n<|/ a tags=julia,floating-point\
    \ |>\n<| a tags=julia,floating-point |>\nThe easiest way is to use round:\n<code>\n\
    julia> round(3.5)\n3\n</code>\n<|/", "    \n    truncate_number = number % 1\n\
    \    return truncate_number\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\nI wrote\
    \ a function that will return the decimal part of a number. \n<code>", "    truncate_number\
    \ = trunc(number)\n    return truncate_number\nend", "    \n    truncate_number\
    \ = number % 1\n    \n    return truncate_number\nend\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<text>\nNow let's write a function that will compute\
    \ the mean of a given vector of numbers.", "    truncate_number = number % 1\n\
    \    return truncate_number\nend\n</cell>\n<code language=julia-1.5>\n# Test the\
    \ function\ntruncate_number(3.5)\n</cell>\n<text>\nNow let's write a function\
    \ that can convert a number from one base to another.", "    truncate_number =\
    \ number % 1\n    return truncate_number\nend\n</cell>\n<code language=julia-1.5>\n\
    # Test the function\ntruncate_number(3.5)\n</cell>\n<text>\nNow let's write a\
    \ function that takes a vector of numbers and returns the sum of the numbers in\
    \ the vector. Make sure to handle edge cases (like empty vectors or vectors with\
    \ only one element).", "    truncate_number = number % 1\n    return truncate_number\n\
    end\n</cell>\n<code language=julia-1.3>\ntruncate_number(3.5)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of digits of an integer.",
  "    truncate_number = number % 1\n    return truncate_number\nend\n</cell>\n<code\
    \ language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<text>\nNow let's implement\
    \ the function truncate_number_with_precision!:", "    \n    truncate_number =\
    \ number % 1\n    return truncate_number\nend\n</cell>\n<code language=julia-1.4>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.4>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.4>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.4>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.4>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.4>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.4>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.4>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.4>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.4>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.4>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.4>\n\
    truncate_number(3.5)", "    \"\"\"\n    Truncate a floating point number to the\
    \ nearest integer.", "    truncate_number = trunc(number)\n    return truncate_number\n\
    end", "    truncate_number = truncate_number(number)\nend\n</cell>\n<code language=julia-1.5>",
  "    truncate_number = number % 1\n    return truncate_number\nend\n</cell>\n<code\
    \ language=julia-1.5>\n# Test the function\ntruncate_number(3.5)\n</cell>\n<text>\n\
    Now let's write a function that can convert a number to a string with two decimal\
    \ places.", "    \n    truncate_number = number % 1\n    return truncate_number\n\
    end\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code\
    \ language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)",
  "    truncate_number = trunc(number)\n    return truncate_number\nend\n</cell>\n\
    <code language=julia-1.5>", "    truncate_number = round(number)\n    return truncate_number\n\
    end\n</cell>\n<code language=julia-1.1>", "    truncate_number = number % 1\n\
    \    return truncate_number\nend\n</cell>\n<code language=julia-1.5>\n# Test the\
    \ function\ntruncate_number(3.5)\n</cell>\n<text>\nThe function truncate_number\
    \ above returns the decimal part of a positive floating point number. Let's see\
    \ how it works on a negative number.", "    truncate_number = number % 1\n   \
    \ return truncate_number\nend\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<text>\nExercise: Write a function that takes a positive floating point\
    \ number and returns its integer part.", "    \n    number = round(number)\n \
    \   \n    if number < 1:\n        return number\n    \n    decimals = math.floor(math.log(number,\
    \ 10))\n    \n    return number / 10 ** decimals\nend\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.5)\n</cell>\n<text>\nNow let's implement a function that will\
    \ compute the mean of a given vector of numbers.", "    truncate_number = number\
    \ % 1\n    return truncate_number\nend\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.6)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.4)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.6)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.4)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.6)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.4)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.6)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.4)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.6)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.4)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.6)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.4)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.6)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.4)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.6)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.4)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.6)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.4)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </cell>\n<code language=julia-1.5>\ntruncate_number(3.6)\n</cell>\n<code language=julia-1.5>\n\
    truncate_number(3.4)\n</cell>\n<code language=julia-1.5>\ntruncate_number(3.5)\n\
    </"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
