name: HumanEval_112_reverse_delete
language: julia
results:
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    if s[0]!=c[0] then return (reverse_delete(s[1:], c[1:]),\
    \ true)\n    return (reverse_delete(s[1:], c[1:]), true)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"\
    ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\"\
    , false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t\
    @test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\"\
    , \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpckx7atcr.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpckx7atcr.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    return (reverse_delete(s[1:], c[1:]), true)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpjchr504r.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpjchr504r.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 || length(c)==0 \n   \
    \     return (s,false)\n    else if length(s)==1 \n        return (s,true)\n \
    \   else if length(c)==1 \n        return (s,true)\n    else if s[0]==c[0] \n\
    \        return (reverse_delete(s[1:],c[1:]),true)\n    else \n        return\
    \ (s,false)\nend\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\
    \t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpa69i0iuj.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpa69i0iuj.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    else return (reverse_delete(s, c[1:]), true)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpt8p0i11l.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpt8p0i11l.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 || length(c)==0 \n   \
    \     return ('',false)\n    end\n    if length(s)==1 \n        return (c,true)\n\
    \    end\n    if length(c)==1 \n        return (reverse_delete(s[1..end-1], c[1:end-1]),true)\n\
    \    end\n    if s[end-1]==c[0] \n        return (reverse_delete(s[1..end-1],\
    \ c[1:end-1]),true)\n    end\n    if s[end-1]!=c[0] \n        return (reverse_delete(s[1..end-1],\
    \ c[1:end-1]),false)\n    end\n    return (reverse_delete(s[1..end-1], c[1:end-1]),true)\n\
    end\n\"\"\"\n    We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n    then check if the\
    \ result string is palindrome.\n    A string is called palindrome if it reads\
    \ the same backward as forward.\n    You should return a tuple containing the\
    \ result string and True/False for the check.\n    Example\n    For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c =\
    \ \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c =\
    \ \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") ==\
    \ (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\
    \t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"\
    dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"\
    vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") ==\
    \ (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid character literal\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp8wzn2sxc.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8wzn2sxc.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    else return (reverse_delete(s, c[1:]), true)\nend\n\"\"\"\
    \n    We are given two strings s and c, you have to delete all the characters\
    \ in s that are equal to any character in c\n    then check if the result string\
    \ is palindrome.\n    A string is called palindrome if it reads the same backward\
    \ as forward.\n    You should return a tuple containing the result string and\
    \ True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the\
    \ result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\
    \t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmplso92zp_.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmplso92zp_.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 || length(c)==0\n    \
    \    return ('',false)\n    end\n    \n    if length(s)==1\n        return (c,true)\n\
    \    end\n    \n    if length(c)==1\n        return (reverse_delete(s[1..end-1],\
    \ c[1:end-1]),true)\n    end\n    \n    if s[end]==c[1]\n        return (reverse_delete(s[1..end-1],\
    \ c[2:end]),true)\n    end\n    \n    if s[end]!=c[1]\n        return (reverse_delete(s[1..end-1],\
    \ c[2:end]),false)\n    end\n    \n    return (reverse_delete(s[1..end-1], c[2:end]),false)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid character literal\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpmj4chh14.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmj4chh14.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],c[1:]),\
    \ false)\n    else return (reverse_delete(s[1:],c), true)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"\
    ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\"\
    , false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t\
    @test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\"\
    , \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp_xfn82n9.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp_xfn82n9.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t\
    @test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp1bz7h0lt.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp1bz7h0lt.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp1bz7h0lt.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    if s[0]!=c[0] then return (reverse_delete(s[1:], c[1:]),\
    \ true)\n    return (reverse_delete(s[1:], c[1:]), true)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"\
    ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\"\
    , false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t\
    @test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\"\
    , \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpv2by2nmk.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpv2by2nmk.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    else return (reverse_delete(s, c[1:]), true)\nend\n\"\"\"\
    \n    We are given two strings s and c, you have to delete all the characters\
    \ in s that are equal to any character in c\n    then check if the result string\
    \ is palindrome.\n    A string is called palindrome if it reads the same backward\
    \ as forward.\n    You should return a tuple containing the result string and\
    \ True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the\
    \ result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\
    \t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp6xbybgz5.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp6xbybgz5.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    else return (reverse_delete(s, c[1:]), true)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpj3bae6km.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpj3bae6km.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],c[1:]),\
    \ false)\n    else return (reverse_delete(s[1:],c), true)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"\
    ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\"\
    , false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t\
    @test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\"\
    , \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpx6cees3s.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpx6cees3s.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    \n    \n    if length(s)==0 \n       \
    \ return (s,false)\n    end\n    \n    if length(c)==0 \n        return (s,true)\n\
    \    end\n    \n    if length(s)==1 \n        return (s,c==s[0])\n    end\n  \
    \  \n    if length(c)==1 \n        return (s,c==s[1])\n    end\n    \n    if c[1]==s[0]\n\
    \        return (reverse_delete(s[1:end-1], c[2:end]),c==c[1])\n    end\n    \n\
    \    if c[2]==s[1]\n        return (reverse_delete(s[1:end-1], c[1:end-2]),c==c[2])\n\
    \    end\n    \n    if c[1]==s[1]\n        return (reverse_delete(s[1:end-1],\
    \ c[2:end]),c==c[1])\n    end\n    \n    if c[2]==s[2]\n        return (reverse_delete(s[1:end-1],\
    \ c[1:end-2]),c==c[2])\n    end\n    \n    if c[1]==s[2]\n        return (reverse_delete(s[1:end-1],\
    \ c[2:end]),c==c[1])\n    end\n    \n    if c[2]==s[3]\n        return (reverse_delete(s[1:end-1],\
    \ c[1:end-2]),c==c[2])\n    end\n    \n    if c[1]==s[3]\n        return (reverse_delete(s[1:end-1],\
    \ c[2:end]),c==c[1])\n    end\n    \n    if c[2]==s[end]\n        return (reverse_delete(s[1:end-1],\
    \ c[1:end-2]),c==c[2])\n    end\n    \n    if c[1]==s[end]\n        return (reverse_delete(s[1:end-1],\
    \ c[2:end]),c==c[1])\n    end\n    \n    if c[2]==s[end]\n        return (reverse_delete(s[1:end-1],\
    \ c[1:end-2]),c==c[2])\n    end\n    \n    if c[1]==s[end]\n        return (reverse_delete(s[1:end-1],\
    \ c[2:end]),c==c[1])\n    end\n    \n    if c[2]==s[end]\n        return (reverse_delete(s[1:end-1],\
    \ c[1:end-2]),c==c[2])\n    end\n    \n    if c[1]==s[end]\n        return (reverse_delete(s[1:end-1],\
    \ c[2:end]),c==c[1])\n    end\n    \n    if c[2]==s[end]\n        return (reverse_delete(s[1:end-1],\
    \ c[1:end-2]),c==c[2])\n    end\n    \n    if c[1]==s[end]\n        return (reverse_delete(s[1:end-1],\
    \ c[2:end]),c==c[1])\n    end\n    \n    if c[2]==s[end]\n        return (reverse_delete(s[1:end-1],\
    \ c[1:end-2]),c==c[2])\n    end\n    \n    if c[1]==s[end]\n        return (reverse_delete(s[1:end-1]\n\
    using Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmd6skum2.jl:96\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmd6skum2.jl:96\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    \n    if length(s)==0 then return (s,\
    \ false)\n    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return\
    \ (reverse_delete(s[1:], c[1:]), false)\n    if s[0]!=c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), true)\n    return (reverse_delete(s[1:], c[1:]), true)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\",\
    \ \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\"\
    , false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t\
    @test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\"\
    , \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpyke9spco.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpyke9spco.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    return (reverse_delete(s[1:], c[1:]), true)\nend\n\"\"\"\
    \n    We are given two strings s and c, you have to delete all the characters\
    \ in s that are equal to any character in c\n    then check if the result string\
    \ is palindrome.\n    A string is called palindrome if it reads the same backward\
    \ as forward.\n    You should return a tuple containing the result string and\
    \ True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the\
    \ result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\
    \t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpf5wybevl.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpf5wybevl.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    else return (reverse_delete(s, c[1:]), true)\nend\n\"\"\"\
    \n    We are given two strings s and c, you have to delete all the characters\
    \ in s that are equal to any character in c\n    then check if the result string\
    \ is palindrome.\n    A string is called palindrome if it reads the same backward\
    \ as forward.\n    You should return a tuple containing the result string and\
    \ True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the\
    \ result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\
    \t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp4ydt5uwh.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp4ydt5uwh.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],c[1:]),\
    \ false)\n    else return (reverse_delete(s[1:],c), true)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"\
    ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\"\
    , false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t\
    @test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\"\
    , \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpug4_6aw0.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpug4_6aw0.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    \n    \n    if length(s)==0 || length(c)==0\n\
    \        return (s,false)\n    end\n    \n    if length(s)==1\n        return\
    \ (s,true)\n    end\n    \n    if length(c)==1\n        return (s,true)\n    end\n\
    \    \n    if s[end-1]==c[1]\n        return (reverse_delete(s[2:end],c[2:end]),true)\n\
    \    end\n    \n    if s[end-1]!=c[1]\n        return (s,false)\n    end\n   \
    \ \n    if s[end-1]==c[1]\n        return (reverse_delete(s[2:end],c[2:end]),true)\n\
    \    end\n    \n    if s[end-1]!=c[1]\n        return (s,false)\n    end\n   \
    \ \n    if s[end-1]==c[1]\n        return (reverse_delete(s[2:end],c[2:end]),true)\n\
    \    end\n    \n    if s[end-1]!=c[1]\n        return (s,false)\n    end\n   \
    \ \n    if s[end-1]==c[1]\n        return (reverse_delete(s[2:end],c[2:end]),true)\n\
    \    end\n    \n    if s[end-1]!=c[1]\n        return (s,false)\n    end\n   \
    \ \n    if s[end-1]==c[1]\n        return (reverse_delete(s[2:end],c[2:end]),true)\n\
    \    end\n    \n    if s[end-1]!=c[1]\n        return (s,false)\n    end\n   \
    \ \n    if s[end-1]==c[1]\n        return (reverse_delete(s[2:end],c[2:end]),true)\n\
    \    end\n    \n    if s[end-1]!=c[1]\n        return (s,false)\n    end\n   \
    \ \n    if s[end-1]==c[1]\n        return (reverse_delete(s[2:end],c[2:end]),true)\n\
    \    end\n    \n    if s[end-1]!=c[1]\n        return (s,false)\n    end\n   \
    \ \n    if s[end-1]==c[1]\n        return (reverse_delete(s[2:end],c[2:end]),true)\n\
    \    end\n    \n    if s[end-1]!=c[1]\n        return (s,false)\n    end\n   \
    \ \n    if s[end-1]==c[1]\n        return (reverse_delete(s[2:end],c[2:end]),true)\n\
    \    end\n    \n    if s[end-1]!=c[1]\n        return (s,false)\n    end\n   \
    \ \n    if s[end-1]==c[1]\n        return (reverse_delete(s[2:end],c[2:end]),true)\n\
    \    end\n    \n    if s[end-1]!=c[1]\n        return (s,false)\n    end\n   \
    \ \n    if s[end-1]==c[1]\n        return (reverse_delete(s[2:end],c[2:end]),true)\n\
    \    end\n    \n    if s[end-1]!=\nusing Test\n\n@testset begin\n\ncandidate =\
    \ reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\
    \t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgytvuk2f.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgytvuk2f.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    return (reverse_delete(s[1:], c[1:]), true)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpqiykxtao.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpqiykxtao.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],c[1:]),\
    \ false)\n    else return (reverse_delete(s[1:],c), true)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"\
    ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\"\
    , false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t\
    @test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\"\
    , \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmph4f14j6x.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmph4f14j6x.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],c[1:]),\
    \ false)\n    else return (reverse_delete(s[1:],c), true)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"\
    ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\"\
    , false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t\
    @test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\"\
    , \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpci3747b7.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpci3747b7.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    else return (reverse_delete(s, c[1:]), true)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpuwvt7ngi.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpuwvt7ngi.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    \n    if length(s)==0 or length(c)==0\
    \ \n        return (s,false)\n    end\n    \n    if length(s)==1 \n        return\
    \ (s,false)\n    end\n    \n    if length(c)==1 \n        return (s,true)\n  \
    \  end\n    \n    if s[end-1]==c[0] \n        return (reverse_delete(s[1:end-1],\
    \ c[1:end-1]),true)\n    end\n    \n    if s[end-1]!=c[0] \n        return (reverse_delete(s[1:end-1],\
    \ c[1:end-1]),false)\n    end\n    \n    return (reverse_delete(s[1:end-1], c[1:end-1]),true)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"length\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpd0_acl8x.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpd0_acl8x.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],c[1:]),\
    \ false)\n    return (reverse_delete(s[1:],c), true)\nend\n\"\"\"\n    We are\
    \ given two strings s and c, you have to delete all the characters in s that are\
    \ equal to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and True/False for\
    \ the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should\
    \ be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n\
    \    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpbnqman2l.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpbnqman2l.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    return (reverse_delete(s, c[1:]), true)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\",\
    \ \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\"\
    , false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t\
    @test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\"\
    , \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpdoriy445.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpdoriy445.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    return (reverse_delete(s[1:], c), true)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\",\
    \ \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\"\
    , false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t\
    @test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\"\
    , \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpobozen5c.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpobozen5c.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],c[1:]),\
    \ false)\n    else return (reverse_delete(s[1:],c), true)\nend\n\"\"\"\n    We\
    \ are given two strings s and c, you have to delete all the characters in s that\
    \ are equal to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and True/False for\
    \ the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should\
    \ be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n\
    \    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpph9unkej.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpph9unkej.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    return (reverse_delete(s[1:], c[1:]), true)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmps3ureg5c.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmps3ureg5c.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    if s[0]!=c[0] then return (reverse_delete(s[1:], c[1:]),\
    \ true)\n    return (reverse_delete(s[1:], c[1:]), true)\nend\n\"\"\"\n    We\
    \ are given two strings s and c, you have to delete all the characters in s that\
    \ are equal to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and True/False for\
    \ the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should\
    \ be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n\
    \    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp6f666n45.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp6f666n45.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],c[1:]),\
    \ false)\n    else return (reverse_delete(s[1:],c[1:]), true)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\",\
    \ \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\"\
    , false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t\
    @test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\"\
    , \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpgnkel6un.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpgnkel6un.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    if s[0]!=c[0] then return (reverse_delete(s[1:], c[1:]),\
    \ true)\n    return (reverse_delete(s[1:], c[1:]), true)\nend\n\"\"\"\n    We\
    \ are given two strings s and c, you have to delete all the characters in s that\
    \ are equal to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and True/False for\
    \ the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should\
    \ be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n\
    \    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp_q5pwj5p.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp_q5pwj5p.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    else return (reverse_delete(s, c[1:]), true)\nend\n\"\"\"\
    \n    We are given two strings s and c, you have to delete all the characters\
    \ in s that are equal to any character in c\n    then check if the result string\
    \ is palindrome.\n    A string is called palindrome if it reads the same backward\
    \ as forward.\n    You should return a tuple containing the result string and\
    \ True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the\
    \ result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\
    \t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpt_uktbgt.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpt_uktbgt.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],c[1:]),\
    \ false)\n    return (reverse_delete(s[1:],c), true)\nend\n\"\"\"\n    We are\
    \ given two strings s and c, you have to delete all the characters in s that are\
    \ equal to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and True/False for\
    \ the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should\
    \ be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n\
    \    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp781d4cp5.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp781d4cp5.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    \n    if length(s)==0 \n        return\
    \ (s,False) \n    else \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n\nusing Test\n\n@testset begin\n\
    \ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\"\
    , false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmp95avijqj.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp95avijqj.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp95avijqj.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 || length(c)==0 \n   \
    \     return ('',False) \n    else \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \nusing Test\n\n@testset\
    \ begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") ==\
    \ (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\
    \t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"\
    dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"\
    vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") ==\
    \ (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid character literal\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpiorr4dtl.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpiorr4dtl.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],c[1:]),\
    \ false)\n    else return (reverse_delete(s[1:],c), true)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"\
    ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\"\
    , false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t\
    @test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\"\
    , \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpk6cedvcv.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpk6cedvcv.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    return (reverse_delete(s[1:], c[1:]), true)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpv7bdm7fk.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpv7bdm7fk.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],c[1:]),\
    \ false)\n    if s[0]!=c[0] then return (reverse_delete(s[1:],c[1:]), true)\n\
    \    return (reverse_delete(s[1:],c[1:]), true)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\"\
    , false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp86k843wh.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp86k843wh.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    return (reverse_delete(s[1:], c[1:]), true)\nend\n\"\"\"\
    \n    We are given two strings s and c, you have to delete all the characters\
    \ in s that are equal to any character in c\n    then check if the result string\
    \ is palindrome.\n    A string is called palindrome if it reads the same backward\
    \ as forward.\n    You should return a tuple containing the result string and\
    \ True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the\
    \ result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\
    \t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpf66c27ur.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpf66c27ur.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t\
    @test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpin5kzjqm.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpin5kzjqm.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpin5kzjqm.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    if s[0]!=c[0] then return (reverse_delete(s[1:], c[1:]),\
    \ true)\n    return (reverse_delete(s[1:], c[1:]), true)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"\
    ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\"\
    , false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t\
    @test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\"\
    , \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpfb2q_o3p.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpfb2q_o3p.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    return (reverse_delete(s[1:], c[1:]), true)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpzzx2le3f.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpzzx2le3f.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 || length(c)==0\n    \
    \    return (s,false)\n    end\n    if length(s)==1\n        return (s,true)\n\
    \    end\n    if length(c)==1\n        return (s,true)\n    end\n    if s[end-1]==c[1]\n\
    \        return (reverse_delete(s[1:end-1], c[2:end]),true)\n    end\n    if s[end-1]!=c[1]\n\
    \        return (s,false)\n    end\n    return (reverse_delete(s[1:end-1], c[2:end]),false)\n\
    end\n\"\"\"\n    We are given two strings s and c, you have to delete all the\
    \ characters in s that are equal to any character in c\n    then check if the\
    \ result string is palindrome.\n    A string is called palindrome if it reads\
    \ the same backward as forward.\n    You should return a tuple containing the\
    \ result string and True/False for the check.\n    Example\n    For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c =\
    \ \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c =\
    \ \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") ==\
    \ (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\
    \t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"\
    dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"\
    vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") ==\
    \ (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String) at ./error.jl:42\n [2] top-level\
    \ scope at /tmp/tmp1oi1skim.jl:29\n [3] include(::Module, ::String) at ./Base.jl:377\n\
    \ [4] exec_options(::Base.JLOptions) at ./client.jl:288\n [5] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmp1oi1skim.jl:29\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    \n    if length(s)==0 \n        return\
    \ (s,False) \n    else if length(c)==0 \n        return (s,True) \n    else \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \nusing Test\n\n@testset begin\n\n\
    candidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\"\
    , false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpu26efb8x.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpu26efb8x.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    if s[0]!=c[0] then return (reverse_delete(s[1:], c[1:]),\
    \ true)\n    return (reverse_delete(s[1:], c[1:]), true)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"\
    ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\"\
    , false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t\
    @test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\"\
    , \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmps79xak07.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmps79xak07.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    if s[0]!=c[0] then return (reverse_delete(s[1:], c[1:]),\
    \ true)\n    return (reverse_delete(s[1:], c[1:]), true)\nend\n\"\"\"\n    We\
    \ are given two strings s and c, you have to delete all the characters in s that\
    \ are equal to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and True/False for\
    \ the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should\
    \ be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n\
    \    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpjpe34239.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpjpe34239.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    \n    if length(s)==0 then return (s,\
    \ false)\n    if length(c)==0 then return (s, true)\n    if length(s)==1 then\
    \ return (s, true)\n    if length(c)==1 then return (s, false)\n    if s[0]==c[0]\
    \ then return (reverse_delete(s[1:], c[1:]), true)\n    if s[0]!=c[0] then return\
    \ (reverse_delete(s[1:], c[1:]), false)\n    return (reverse_delete(s[1:], c[1:]),\
    \ false)\nend\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t\
    @test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpf75wg6c_.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpf75wg6c_.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    \n    if length(s)==0 then return (s,\
    \ false)\n    if length(c)==0 then return (s, true)\n    \n    if s[0]==c[0] then\
    \ return (reverse_delete(s[1:], c[1:]), false)\n    \n    if s[0]!=c[0] then return\
    \ (reverse_delete(s[1:], c[1:]), true)\n    \n    return (reverse_delete(s[1:],\
    \ c[1:]), true)\nend\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\
    \t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpl5avxtt6.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpl5avxtt6.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    \n    if length(s)==0 || length(c)==0\n\
    \        return (s,false)\n    end\n    \n    \n    if length(s)==1\n        return\
    \ (s,true)\n    end\n    \n    \n    if length(c)==1\n        return (s,true)\n\
    \    end\n    \n    \n    if s[end-1]==c[0]\n        return (reverse_delete(s[end-1:end],c[1:end-1]),true)\n\
    \    end\n    \n    \n    if s[end-1]!=c[0]\n        return (s,false)\n    end\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\
    \n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\",\
    \ \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\"\
    , false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t\
    @test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\"\
    , \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpzwzoeui9.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpzwzoeui9.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpzwzoeui9.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    if s[0]!=c[0] then return (reverse_delete(s[1:], c[1:]),\
    \ true)\n    return (reverse_delete(s[1:], c[1:]), true)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"\
    ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\"\
    , false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t\
    @test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\"\
    , \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpf6fe5vfz.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpf6fe5vfz.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    if s[0]!=c[0] then return (reverse_delete(s[1:], c[1:]),\
    \ true)\n    return (reverse_delete(s[1:], c[1:]), true)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"\
    ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\"\
    , false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t\
    @test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\"\
    , \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpr172ycfq.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpr172ycfq.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    if s[0]!=c[0] then return (reverse_delete(s[1:], c[1:]),\
    \ true)\n    return (reverse_delete(s[1:], c[1:]), true)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"\
    ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\"\
    , false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t\
    @test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\"\
    , \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpqwkz29nb.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpqwkz29nb.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],c[1:]),\
    \ false)\n    else return (reverse_delete(s[1:],c), true)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"\
    ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\"\
    , false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t\
    @test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\"\
    , \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmplloghha3.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmplloghha3.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    if s[0]!=c[0] then return (reverse_delete(s[1:], c[1:]),\
    \ true)\n    return (reverse_delete(s[1:], c[1:]), true)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"\
    ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\"\
    , false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t\
    @test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\"\
    , \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpangrhoss.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpangrhoss.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],c[1:]),\
    \ false)\n    if s[0]!=c[0] then return (reverse_delete(s[1:],c[1:]), true)\n\
    \    return (reverse_delete(s[1:],c[1:]), true)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\"\
    , false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp7vdiw4no.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp7vdiw4no.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],c[1:]),\
    \ false)\n    return (reverse_delete(s[1:],c), true)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") ==\
    \ (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\
    \t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"\
    dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"\
    vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") ==\
    \ (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpvlkbbho_.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpvlkbbho_.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 || length(c)==0 \n   \
    \     return ('',false)\n    end\n    if length(s)==1 \n        return (c,true)\n\
    \    end\n    if length(c)==1 \n        return (reverse_delete(s[1..end-1],c),true)\n\
    \    end\n    if s[end-1]==c\n        return (reverse_delete(s[1..end-1],c),true)\n\
    \    end\n    if s[end-1]!=c\n        return (reverse_delete(s[1..end-1],c),false)\n\
    \    end\n    return (reverse_delete(s[1..end-1],c),true)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"\
    ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\"\
    , false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t\
    @test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\"\
    , \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid character literal\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpl66wg30o.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpl66wg30o.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    else return (reverse_delete(s, c[1:]), true)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpby7y0xt0.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpby7y0xt0.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    \n    if length(s)==0 then return (s,\
    \ false)\n    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return\
    \ (reverse_delete(s[1:], c[1:]), false)\n    return (reverse_delete(s[1:], c[1:]),\
    \ true)\nend\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t\
    @test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpck3uu4r3.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpck3uu4r3.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    \n    if length(s)==0 then return (s,\
    \ false)\n    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return\
    \ (reverse_delete(s[1:],c[1:]), false)\n    else return (reverse_delete(s[1:],c),\
    \ true)\nend\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t\
    @test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpccg99ch5.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpccg99ch5.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    else return (reverse_delete(s, c[1:]), true)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpyyzw9c1r.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpyyzw9c1r.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],c[1:]),\
    \ false)\n    return (reverse_delete(s[1:],c), true)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") ==\
    \ (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\
    \t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"\
    dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"\
    vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") ==\
    \ (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpeahxtgtq.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpeahxtgtq.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 || length(c)==0 \n   \
    \     return ('',false)\n    end\n    \n    if s[0]==c[0] \n        return (reverse_delete(s[1:],c[1:]),true)\n\
    \    end\n    \n    if s[0]!=c[0] \n        return (reverse_delete(s[1:],c[1:]),false)\n\
    \    end\n    \n    return (reverse_delete(s[1:],c[1:]),true)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\",\
    \ \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\"\
    , false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t\
    @test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\"\
    , \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid character literal\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpdlgnq6a8.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdlgnq6a8.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    if s[0]!=c[0] then return (reverse_delete(s[1:], c[1:]),\
    \ true)\n    return (reverse_delete(s[1:], c[1:]), true)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"\
    ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\"\
    , false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t\
    @test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\"\
    , \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpxuo8zyt0.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpxuo8zyt0.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if length(s)==1 then return (s,\
    \ true)\n    if length(c)==1 then return (s, false)\n    if s[0]==c[0] then return\
    \ (reverse_delete(s[1:], c[1:]), false)\n    if s[0]!=c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), true)\n    return (reverse_delete(s[1:], c[1:]), true)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\",\
    \ \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\"\
    , false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t\
    @test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\"\
    , \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmplrqcvlqz.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmplrqcvlqz.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    else return (reverse_delete(s, c[1:]), true)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp_az8czve.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp_az8czve.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    else return (reverse_delete(s, c[1:]), true)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmphh9o1db3.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmphh9o1db3.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    \n    if length(s)==0 || length(c)==0\n\
    \        return (s,false)\n    end\n    \n    if length(s)==1\n        return\
    \ (s,true)\n    end\n    \n    if length(c)==1\n        return (s,true)\n    end\n\
    \    \n    if s[end-1]==c[0]\n        return (reverse_delete(s[1:end-1], c[1:end-1]),true)\n\
    \    end\n    \n    if s[end-1]!=c[0]\n        return (s,false)\n    end\n   \
    \ \n    return (s,true)\nend\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\
    \t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpy8dreht3.jl:40\n  Test threw exception\n\
    \  Expression: candidate(\"abcde\", \"ae\") == (\"bcd\", false)\n  BoundsError:\
    \ attempt to access String\n    at index [0]\n  Stacktrace:\n   [1] checkbounds\
    \ at ./strings/basic.jl:194 [inlined]\n   [2] codeunit at ./strings/string.jl:89\
    \ [inlined]\n   [3] getindex at ./strings/string.jl:210 [inlined]\n   [4] reverse_delete(::String,\
    \ ::String) at /tmp/tmpy8dreht3.jl:25\n   [5] top-level scope at /tmp/tmpy8dreht3.jl:40\n\
    \   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpy8dreht3.jl:39\n  \ntest set: Test Failed at\
    \ /tmp/tmpy8dreht3.jl:41\n  Expression: candidate(\"abcdef\", \"b\") == (\"acdef\"\
    , false)\n   Evaluated: (\"abcdef\", true) == (\"acdef\", false)\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpy8dreht3.jl:41\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpy8dreht3.jl:39\ntest set: Error During Test at\
    \ /tmp/tmpy8dreht3.jl:42\n  Test threw exception\n  Expression: candidate(\"abcdedcba\"\
    , \"ab\") == (\"cdedc\", true)\n  BoundsError: attempt to access String\n    at\
    \ index [0]\n  Stacktrace:\n   [1] checkbounds at ./strings/basic.jl:194 [inlined]\n\
    \   [2] codeunit at ./strings/string.jl:89 [inlined]\n   [3] getindex at ./strings/string.jl:210\
    \ [inlined]\n   [4] reverse_delete(::String, ::String) at /tmp/tmpy8dreht3.jl:25\n\
    \   [5] top-level scope at /tmp/tmpy8dreht3.jl:42\n   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpy8dreht3.jl:39\n  \ntest set: Test Failed at\
    \ /tmp/tmpy8dreht3.jl:43\n  Expression: candidate(\"dwik\", \"w\") == (\"dik\"\
    , false)\n   Evaluated: (\"dwik\", true) == (\"dik\", false)\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpy8dreht3.jl:43\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpy8dreht3.jl:39\ntest set: Test Failed at /tmp/tmpy8dreht3.jl:44\n\
    \  Expression: candidate(\"a\", \"a\") == (\"\", true)\n   Evaluated: (\"a\",\
    \ true) == (\"\", true)\nStacktrace:\n [1] top-level scope at /tmp/tmpy8dreht3.jl:44\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpy8dreht3.jl:39\ntest set: Test Failed at /tmp/tmpy8dreht3.jl:45\n\
    \  Expression: candidate(\"abcdedcba\", \"\") == (\"abcdedcba\", true)\n   Evaluated:\
    \ (\"abcdedcba\", false) == (\"abcdedcba\", true)\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpy8dreht3.jl:45\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpy8dreht3.jl:39\ntest set: Test Failed at /tmp/tmpy8dreht3.jl:47\n\
    \  Expression: candidate(\"vabba\", \"v\") == (\"abba\", true)\n   Evaluated:\
    \ (\"vabba\", true) == (\"abba\", true)\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpy8dreht3.jl:47\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpy8dreht3.jl:39\ntest set: Error During Test at\
    \ /tmp/tmpy8dreht3.jl:48\n  Test threw exception\n  Expression: candidate(\"mamma\"\
    , \"mia\") == (\"\", true)\n  BoundsError: attempt to access String\n    at index\
    \ [0]\n  Stacktrace:\n   [1] checkbounds at ./strings/basic.jl:194 [inlined]\n\
    \   [2] codeunit at ./strings/string.jl:89 [inlined]\n   [3] getindex at ./strings/string.jl:210\
    \ [inlined]\n   [4] reverse_delete(::String, ::String) at /tmp/tmpy8dreht3.jl:25\n\
    \   [5] top-level scope at /tmp/tmpy8dreht3.jl:48\n   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpy8dreht3.jl:39\n  \nTest Summary: | Pass  Fail\
    \  Error  Total\ntest set      |    1     5      3      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy8dreht3.jl:37\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    \n    \n    if length(s)==0 then return\
    \ (s, false)\n    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then\
    \ return (reverse_delete(s[1:],c[1:]), false)\n    if s[0]!=c[0] then return (reverse_delete(s[1:],c[1:]),\
    \ true)\n    return (reverse_delete(s[1:],c[1:]), true)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") ==\
    \ (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\
    \t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"\
    dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"\
    vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") ==\
    \ (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmparx90wr3.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmparx90wr3.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    else return (reverse_delete(s, c[1:]), true)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp7g7r_fo0.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp7g7r_fo0.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 || length(c)==0\n    \
    \    return (s,false)\n    end\n    if length(s)==1\n        return (s,true)\n\
    \    end\n    if length(c)==1\n        return (reverse_delete(s[1..end-1], c[1:end-1]),true)\n\
    \    end\n    if s[end]==c[1]\n        return (reverse_delete(s[1..end-1], c[2:end]),true)\n\
    \    end\n    if s[end]==c[2]\n        return (reverse_delete(s[1..end-1], c[3:end]),true)\n\
    \    end\n    if s[end]==c[3]\n        return (reverse_delete(s[1..end-1], c[4:end]),true)\n\
    \    end\n    if s[end]==c[4]\n        return (reverse_delete(s[1..end-1], c[5:end]),true)\n\
    \    end\n    if s[end]==c[5]\n        return (reverse_delete(s[1..end-1], c[6:end]),true)\n\
    \    end\n    if s[end]==c[6]\n        return (reverse_delete(s[1..end-1], c[7:end]),true)\n\
    \    end\n    if s[end]==c[7]\n        return (reverse_delete(s[1..end-1], c[8:end]),true)\n\
    \    end\n    if s[end]==c[8]\n        return (reverse_delete(s[1..end-1], c[9:end]),true)\n\
    \    end\n    if s[end]==c[9]\n        return (reverse_delete(s[1..end-1], c[10:end]),true)\n\
    \    end\n    if s[end]==c[10]\n        return (reverse_delete(s[1..end-1], c[11:end]),true)\n\
    \    end\n    if s[end]==c[11]\n        return (reverse_delete(s[1..end-1], c[12..end]),true)\n\
    \    end\n    if s[end]==c[12]\n        return (reverse_delete(s[1..end-1], c[13..end]),true)\n\
    \    end\n    if s[end]==c[13]\n        return (reverse_delete(s[1..end-1], c[14..end]),true)\n\
    \    end\n    if s[end]==c[14]\n        return (reverse_delete(s[1..end-1], c[15..end]),true)\n\
    \    end\n    if s[end]==c[15]\n        return (reverse_delete(s[1..end-1], c[16..end]),true)\n\
    \    end\n    if s[end]==c[16]\n        return (reverse_delete(s[1..end-1], c[17..end]),true)\n\
    \    end\n    if s[end]==c[17]\n        return (reverse_delete(s[1..end-1], c[18..end]),true)\n\
    \    end\n    if s[\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\
    \t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxcitdtls.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxcitdtls.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), true)\n    return (reverse_delete(s[1:], c[1:]), false)\nend\n\"\"\"\
    \n    We are given two strings s and c, you have to delete all the characters\
    \ in s that are equal to any character in c\n    then check if the result string\
    \ is palindrome.\n    A string is called palindrome if it reads the same backward\
    \ as forward.\n    You should return a tuple containing the result string and\
    \ True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the\
    \ result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\
    \t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp800abgfl.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp800abgfl.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    \n    if length(s)==0 then return (s,\
    \ false)\n    if length(c)==0 then return (s, true)\n    \n    if s[0]==c[0] then\
    \ return (reverse_delete(s[1:], c[1:]), false)\n    \n    else return (reverse_delete(s[1:],\
    \ c[1:]), true)\nend\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\
    \t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpgycftxzj.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpgycftxzj.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    return (reverse_delete(s[1:], c[1:]), true)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp3_07ubrl.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp3_07ubrl.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],c[1:]),\
    \ false)\n    if s[0]!=c[0] then return (reverse_delete(s[1:],c[1:]), true)\n\
    \    return (reverse_delete(s[1:],c[1:]), true)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\"\
    , false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpudkn4b2n.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpudkn4b2n.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],c[1:]),\
    \ false)\n    return (reverse_delete(s[1:],c), true)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") ==\
    \ (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\
    \t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"\
    dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"\
    vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") ==\
    \ (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp1sjj1pbv.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp1sjj1pbv.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],c[1:]),\
    \ false)\n    else return (reverse_delete(s[1:],c[1:]), true)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\",\
    \ \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\"\
    , false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t\
    @test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\"\
    , \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp6ptadh0k.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp6ptadh0k.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    \n    if length(s)==0 then return (s,\
    \ false)\n    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return\
    \ (reverse_delete(s[1:],c[1:]), false)\n    return (reverse_delete(s[1:],c[1:]),\
    \ true)\nend\n\"\"\"\n    We are given two strings s and c, you have to delete\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"\
    ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\"\
    , false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t\
    @test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\"\
    , \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpwi7emrkf.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpwi7emrkf.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    return (reverse_delete(s[1:], c[1:]), true)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpwlyc_5xa.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpwlyc_5xa.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    return (reverse_delete(s[1:], c[1:]), true)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpk51lavdu.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpk51lavdu.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    else return (reverse_delete(s[1:], c[1:]), true)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpinhqy5vb.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpinhqy5vb.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    else return (reverse_delete(s, c[1:]), true)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp83nb1x7s.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp83nb1x7s.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    \n    \n    if length(s)==0 \n       \
    \ return (s,False) \n    \n    if length(c)==0 \n        return (s,True) \n  \
    \  \n    if length(s)==length(c) \n        return (s,True) \n    \n    if s[0]==c[0]\
    \ \n        return (reverse_delete(s[1:],c[1:]),True) \n    \n    if s[0]!=c[0]\
    \ \n        return (reverse_delete(s[1:],c[1:]),False) \n    \n    return (reverse_delete(s[1:],c[1:]),False)\
    \ \n    \nend\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t\
    @test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmpuw3z7eek.jl:24\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpuw3z7eek.jl:24\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if length(s)==1 then return (s,\
    \ true)\n    if length(c)==1 then return (s, false)\n    if s[0]==c[0] then return\
    \ (reverse_delete(s[1:], c[1:]), false)\n    if s[0]!=c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), true)\n    return (reverse_delete(s[1:], c[1:]), true)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\",\
    \ \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\"\
    , false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t\
    @test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\"\
    , \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmplg6cxkq3.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmplg6cxkq3.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 || length(c)==0 \n   \
    \     return ('',false)\n    end\n    if length(s) <= length(c) \n        return\
    \ ('',false)\n    end\n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nusing Test\n\n@testset\
    \ begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") ==\
    \ (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\
    \t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"\
    dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"\
    vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") ==\
    \ (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid character literal\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpbo903l1n.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbo903l1n.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    if s[0]!=c[0] then return (reverse_delete(s[1:], c[1:]),\
    \ true)\n    return (reverse_delete(s[1:], c[1:]), true)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"\
    ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\"\
    , false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t\
    @test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\"\
    , \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpscdflcth.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpscdflcth.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    else return (reverse_delete(s, c[1:]), true)\nend\n\"\"\"\
    \n    We are given two strings s and c, you have to delete all the characters\
    \ in s that are equal to any character in c\n    then check if the result string\
    \ is palindrome.\n    A string is called palindrome if it reads the same backward\
    \ as forward.\n    You should return a tuple containing the result string and\
    \ True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the\
    \ result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\
    \t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpfl5fnjqd.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpfl5fnjqd.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if length(s)==1 then return (s,\
    \ true)\n    if length(c)==1 then return (s, false)\n    if s[0]==c[0] then return\
    \ (reverse_delete(s[1:], c[1:]), false)\n    if s[0]!=c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), true)\n    return (reverse_delete(s[1:], c[1:]), true)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\",\
    \ \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\"\
    , false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t\
    @test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\"\
    , \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpyb4l1e4p.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpyb4l1e4p.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    \n    if length(s)==0 then return (s,\
    \ false)\n    if length(c)==0 then return (s, true)\n    \n    if s[0]==c[0] then\
    \ return (reverse_delete(s[1:], c[1:]), false)\n    \n    else return (reverse_delete(s[1:],\
    \ c[1:]), true)\nend\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\
    \t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp0hk8g7hd.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp0hk8g7hd.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    return (reverse_delete(s[1:], c[1:]), true)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpqdss6fqe.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpqdss6fqe.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 || length(c)==0 \n   \
    \     return ('',false)\n    end\n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\
    \t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid character literal\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpmr5e0a22.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmr5e0a22.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],c[1:]),\
    \ false)\n    if s[0]!=c[0] then return (reverse_delete(s[1:],c[1:]), true)\n\
    \    return (reverse_delete(s[1:],c[1:]), true)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\"\
    , false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp4v0qodpu.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp4v0qodpu.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    if s[0]!=c[0] then return (reverse_delete(s[1:], c[1:]),\
    \ true)\n    return (reverse_delete(s[1:], c[1:]), true)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"\
    ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\"\
    , false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t\
    @test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\"\
    , \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpe0kso_w1.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpe0kso_w1.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    \n    if length(s)==0 || length(c)==0\n\
    \        return (s,True)\n    end\n    \n    if length(s)==1\n        return (s,c==s[end])\n\
    \    end\n    \n    if length(c)==1\n        return (s,c==s[end])\n    end\n \
    \   \n    if s[end]==c\n        return (reverse_delete(s[1:end-1],c),True)\n \
    \   end\n    \n    if s[end]!=c\n        return (s,False)\n    end\n    \n   \
    \ if c==s[end]\n        return (reverse_delete(s[1:end-1],c),True)\n    end\n\
    \    \n    return (reverse_delete(s[1:end-1],c),False)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") ==\
    \ (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\
    \t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"\
    dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"\
    vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") ==\
    \ (\"\", true))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpu87lclaw.jl:44\n  Test threw exception\n\
    \  Expression: candidate(\"abcde\", \"ae\") == (\"bcd\", false)\n  UndefVarError:\
    \ False not defined\n  Stacktrace:\n   [1] reverse_delete(::String, ::String)\
    \ at /tmp/tmpu87lclaw.jl:30\n   [2] top-level scope at /tmp/tmpu87lclaw.jl:44\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpu87lclaw.jl:43\n  \ntest set: Test Failed at\
    \ /tmp/tmpu87lclaw.jl:45\n  Expression: candidate(\"abcdef\", \"b\") == (\"acdef\"\
    , false)\n   Evaluated: (\"abcdef\", false) == (\"acdef\", false)\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpu87lclaw.jl:45\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpu87lclaw.jl:43\ntest set: Error During Test at\
    \ /tmp/tmpu87lclaw.jl:46\n  Test threw exception\n  Expression: candidate(\"abcdedcba\"\
    , \"ab\") == (\"cdedc\", true)\n  UndefVarError: False not defined\n  Stacktrace:\n\
    \   [1] reverse_delete(::String, ::String) at /tmp/tmpu87lclaw.jl:30\n   [2] top-level\
    \ scope at /tmp/tmpu87lclaw.jl:46\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpu87lclaw.jl:43\n  \ntest set: Test Failed at\
    \ /tmp/tmpu87lclaw.jl:47\n  Expression: candidate(\"dwik\", \"w\") == (\"dik\"\
    , false)\n   Evaluated: (\"dwik\", false) == (\"dik\", false)\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpu87lclaw.jl:47\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpu87lclaw.jl:43\ntest set: Test Failed at /tmp/tmpu87lclaw.jl:48\n\
    \  Expression: candidate(\"a\", \"a\") == (\"\", true)\n   Evaluated: (\"a\",\
    \ false) == (\"\", true)\nStacktrace:\n [1] top-level scope at /tmp/tmpu87lclaw.jl:48\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpu87lclaw.jl:43\ntest set: Error During Test at\
    \ /tmp/tmpu87lclaw.jl:49\n  Test threw exception\n  Expression: candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true)\n  UndefVarError: True not defined\n  Stacktrace:\n\
    \   [1] reverse_delete(::String, ::String) at /tmp/tmpu87lclaw.jl:14\n   [2] top-level\
    \ scope at /tmp/tmpu87lclaw.jl:49\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpu87lclaw.jl:43\n  \ntest set: Test Failed at\
    \ /tmp/tmpu87lclaw.jl:50\n  Expression: candidate(\"abcdedcba\", \"v\") == (\"\
    abcdedcba\", true)\n   Evaluated: (\"abcdedcba\", false) == (\"abcdedcba\", true)\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpu87lclaw.jl:50\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpu87lclaw.jl:43\ntest set: Test Failed at /tmp/tmpu87lclaw.jl:51\n\
    \  Expression: candidate(\"vabba\", \"v\") == (\"abba\", true)\n   Evaluated:\
    \ (\"vabba\", false) == (\"abba\", true)\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpu87lclaw.jl:51\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpu87lclaw.jl:43\ntest set: Error During Test at\
    \ /tmp/tmpu87lclaw.jl:52\n  Test threw exception\n  Expression: candidate(\"mamma\"\
    , \"mia\") == (\"\", true)\n  UndefVarError: False not defined\n  Stacktrace:\n\
    \   [1] reverse_delete(::String, ::String) at /tmp/tmpu87lclaw.jl:30\n   [2] top-level\
    \ scope at /tmp/tmpu87lclaw.jl:52\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpu87lclaw.jl:43\n  \nTest Summary: | Fail  Error\
    \  Total\ntest set      |    5      4      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu87lclaw.jl:41\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    \n    if length(s)==0 \n        return\
    \ (s,false)\n    \n    if length(c)==0 \n        return (s,true)\n    \n    if\
    \ s[0]==c[0] \n        return (reverse_delete(s[1:],c[1:]),true)\n    \n    if\
    \ s[0]!=c[0] \n        return (s,false)\n    \n    return (reverse_delete(s[1:],c[1:]),false)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmp083hshx0.jl:20\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp083hshx0.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],c[1:]),\
    \ false)\n    if s[0]!=c[0] then return (reverse_delete(s[1:],c[1:]), true)\n\
    \    return (reverse_delete(s[1:],c[1:]), true)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\"\
    , false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpksmqs24e.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpksmqs24e.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    return (reverse_delete(s[1:], c), true)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\",\
    \ \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\"\
    , false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t\
    @test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\"\
    , \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpilhcof73.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpilhcof73.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    \n    if length(s)==0 or length(c)==0\n\
    \        return (s,false)\n    end\n    \n    \n    \n    if length(s)==1\n  \
    \      return (s,true)\n    end\n    \n    \n    \n    if length(c)==1\n     \
    \   return (s,false)\n    end\n    \n    \n    \n    if s[end-1]==c[0]\n     \
    \   return (reverse_delete(s[end-1:end],c[1:end-1]),true)\n    end\n    \n   \
    \ \n    \n    if s[end-1]!=c[0]\n        return (reverse_delete(s[end-1:end],c[1:end-1]),false)\n\
    \    end\n    \n    \n    \n    if s[end-1]==c[0]\n        return (reverse_delete(s[end-1:end],c[1:end-1]),true)\n\
    \    end\n    \n    \n    \n    if s[end-1]!=c[0]\n        return (reverse_delete(s[end-1:end],c[1:end-1]),false)\n\
    \    end\n    \n    \n    \n    if s[end-1]==c[0]\n        return (reverse_delete(s[end-1:end],c[1:end-1]),true)\n\
    \    end\n    \n    \n    \n    if s[end-1]!=c[0]\n        return (reverse_delete(s[end-1:end],c[1:end-1]),false)\n\
    \    end\n    \n    \n    \n    if s[end-1]==c[0]\n        return (reverse_delete(s[end-1:end],c[1:end-1]),true)\n\
    \    end\n    \n    \n    \n    if s[end-1]!=c[0]\n        return (reverse_delete(s[end-1:end],c[1:end-1]),false)\n\
    \    end\n    \n    \n    \n    if s[end-1]==c[0]\n        return (reverse_delete(s[end-1:end],c[1:end-1]),true)\n\
    \    end\n    \n    \n    \n    if s[end-1]!=c[0]\n        return (reverse_delete(s[end-1:end],c[1:end-1]),false)\n\
    \    end\n    \n    \n    \n    if s[end-1]==c[0]\n        return (reverse_delete(s[end-1:end],c[1:end-1]),true)\n\
    \    end\n    \n    \n    \n    if s[end-1]!=c[0]\n        return (reverse_delete(s[end-1:end],c[1:end-1]),false)\n\
    \    end\n    \n    \n    \n    if s[end-1]==c[0]\n        return (reverse_delete(s[end-1:end],c[1:end-1]),true)\n\
    \    end\n    \n    \n    \n    if s[end-1]!=c[0]\n        return (reverse_delete(s[end-1:end],c[1:end-1]),false)\n\
    \    end\n    \nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t\
    @test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"length\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpy1jfcs4e.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpy1jfcs4e.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    if s[0]!=c[0] then return (reverse_delete(s[1:], c[1:]),\
    \ true)\n    return (reverse_delete(s[1:], c[1:]), true)\nend\n\"\"\"\n    We\
    \ are given two strings s and c, you have to delete all the characters in s that\
    \ are equal to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and True/False for\
    \ the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should\
    \ be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n\
    \    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpik72a71g.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpik72a71g.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    \n    if length(s)==0 || length(c)==0\n\
    \        return (s,false)\n    end\n    \n    \n    \n    if length(s)==1\n  \
    \      return (s,true)\n    end\n    \n    \n    if length(c)==1\n        return\
    \ (s,false)\n    end\n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing\
    \ Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpz5508wfv.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpz5508wfv.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpz5508wfv.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],c[1:]),\
    \ false)\n    if s[0]!=c[0] then return (reverse_delete(s[1:],c[1:]), true)\n\
    \    return (reverse_delete(s[1:],c[1:]), true)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\"\
    , false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmprx3a48qs.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmprx3a48qs.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    else return (reverse_delete(s, c[1:]), true)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpmpal3yws.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpmpal3yws.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],c[1:]),\
    \ false)\n    else return (reverse_delete(s[1:],c), true)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"\
    ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\"\
    , false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t\
    @test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\"\
    , \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpjk0fku_q.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpjk0fku_q.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    if s[0]!=c[0] then return (reverse_delete(s[1:], c[1:]),\
    \ true)\n    return (reverse_delete(s[1:], c[1:]), true)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"\
    ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\"\
    , false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t\
    @test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\"\
    , \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmptd00c_59.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmptd00c_59.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    \n    \n    if length(s)==0 then return\
    \ (s, false)\n    if length(c)==0 then return (s, true)\n    if length(s)==1 then\
    \ return (s, true)\n    if length(c)==1 then return (s, false)\n    \n    if s[0]==c[0]\
    \ then return (reverse_delete(s[1:], c[1:]), false)\n    \n    if s[0]!=c[0] then\
    \ return (reverse_delete(s[1:], c[1:]), true)\n    \n    return (reverse_delete(s[1:],\
    \ c[1:]), true)\nend\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\
    \t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpdvtnz2g0.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpdvtnz2g0.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 || length(c)==0 \n   \
    \     return ('',false)\n    else if length(s)==1 \n        return (c,true)\n\
    \    else if length(c)==1 \n        return (s,true)\n    else\n        \n    \
    \    \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \nusing Test\n\n@testset begin\n\ncandidate\
    \ = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\
    \t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid character literal\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpije7t6gf.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpije7t6gf.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    \n    if length(s)==0 \n        return\
    \ (s,False) \n    else if length(c)==0 \n        return (s,True) \n    else \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \nusing Test\n\n@testset begin\n\n\
    candidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\"\
    , false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3mdu4zwa.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3mdu4zwa.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    if s[0]!=c[0] then return (reverse_delete(s[1:], c[1:]),\
    \ true)\n    return (reverse_delete(s[1:], c[1:]), true)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"\
    ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\"\
    , false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t\
    @test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\"\
    , \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpxdgc04tc.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpxdgc04tc.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    if s[0]!=c[0] then return (reverse_delete(s[1:], c[1:]),\
    \ true)\n    return (reverse_delete(s[1:], c[1:]), true)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"\
    ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\"\
    , false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t\
    @test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\"\
    , \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpcdlhvcj0.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpcdlhvcj0.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    return (reverse_delete(s[1:], c), true)\nend\n\"\"\"\n \
    \   We are given two strings s and c, you have to delete all the characters in\
    \ s that are equal to any character in c\n    then check if the result string\
    \ is palindrome.\n    A string is called palindrome if it reads the same backward\
    \ as forward.\n    You should return a tuple containing the result string and\
    \ True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the\
    \ result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\
    \t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpis5pgd93.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpis5pgd93.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    \n    if length(s)==0 \n        return\
    \ (s,False) \n    else if length(c)==0 \n        return (s,True) \n    else \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \nusing Test\n\n@testset begin\n\n\
    candidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\"\
    , false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxr8dhs80.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxr8dhs80.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    \n    \n    if length(s)==0 then return\
    \ (s, false)\n    if length(c)==0 then return (s, true)\n    if length(s)==1 then\
    \ return (s, true)\n    if length(c)==1 then return (s, false)\n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"\
    ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\"\
    , false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t\
    @test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\"\
    , \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp2v1z4250.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp2v1z4250.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],c[1:]),\
    \ false)\n    return (reverse_delete(s[1:],c), true)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") ==\
    \ (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\
    \t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"\
    dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"\
    vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") ==\
    \ (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp94q88a9x.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp94q88a9x.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    if s[0]!=c[0] then return (reverse_delete(s[1:], c[1:]),\
    \ true)\n    return (reverse_delete(s[1:], c[1:]), true)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"\
    ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\"\
    , false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t\
    @test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\"\
    , \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp9v1nz7z7.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp9v1nz7z7.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    \n    if length(s)==0 then return (s,\
    \ false)\n    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return\
    \ (reverse_delete(s[1:], c[1:]), false)\n    else return (reverse_delete(s, c[1:]),\
    \ true)\nend\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t\
    @test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp8kim7jj9.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp8kim7jj9.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    if s[0]!=c[0] then return (reverse_delete(s[1:], c[1:]),\
    \ true)\n    return (reverse_delete(s[1:], c[1:]), true)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"\
    ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\"\
    , false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t\
    @test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\"\
    , \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpjoou0ly2.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpjoou0ly2.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    else return (reverse_delete(s, c[1:]), true)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp3dw2wqpb.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp3dw2wqpb.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    if s[0]!=c[0] then return (reverse_delete(s[1:], c[1:]),\
    \ true)\n    return (reverse_delete(s[1:], c[1:]), true)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"\
    ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\"\
    , false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t\
    @test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\"\
    , \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmptaqskdjf.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmptaqskdjf.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    return (reverse_delete(s[1:], c[1:]), true)\nend\n\"\"\"\
    \n    We are given two strings s and c, you have to delete all the characters\
    \ in s that are equal to any character in c\n    then check if the result string\
    \ is palindrome.\n    A string is called palindrome if it reads the same backward\
    \ as forward.\n    You should return a tuple containing the result string and\
    \ True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the\
    \ result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\
    \t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp13kyoad8.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp13kyoad8.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    return (reverse_delete(s, c[1:]), true)\nend\n\"\"\"\n \
    \   We are given two strings s and c, you have to delete all the characters in\
    \ s that are equal to any character in c\n    then check if the result string\
    \ is palindrome.\n    A string is called palindrome if it reads the same backward\
    \ as forward.\n    You should return a tuple containing the result string and\
    \ True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the\
    \ result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\
    \t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpgadj3kgn.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpgadj3kgn.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    else return (reverse_delete(s[1:], c), true)\nend\n\"\"\"\
    \n    We are given two strings s and c, you have to delete all the characters\
    \ in s that are equal to any character in c\n    then check if the result string\
    \ is palindrome.\n    A string is called palindrome if it reads the same backward\
    \ as forward.\n    You should return a tuple containing the result string and\
    \ True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the\
    \ result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\
    \t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpkvqz5kwf.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpkvqz5kwf.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    return (reverse_delete(s, c[1:]), true)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\",\
    \ \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\"\
    , false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t\
    @test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\"\
    , \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp_p09jmjc.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp_p09jmjc.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    return (reverse_delete(s[1:], c[1:]), true)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpd9k1f40l.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpd9k1f40l.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if length(s)==1 then return (s,\
    \ true)\n    if length(c)==1 then return (s, false)\n    if s[0]==c[0] then return\
    \ (reverse_delete(s[1:], c[1:]), true)\n    if s[0]!=c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    return (reverse_delete(s[1:], c[1:]), reverse_delete(s,\
    \ c[1:]))\nend\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t\
    @test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpzpuhhbsv.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpzpuhhbsv.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    if s[0]!=c[0] then return (reverse_delete(s[1:], c[1:]),\
    \ true)\n    return (reverse_delete(s[1:], c[1:]), true)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"\
    ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\"\
    , false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t\
    @test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\"\
    , \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpycjzu_hn.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpycjzu_hn.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 || length(c)==0 \n   \
    \     return ('',false)\n    end\n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\
    \t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid character literal\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmph50xt3ae.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmph50xt3ae.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    if s[0]!=c[0] then return (reverse_delete(s[1:], c[1:]),\
    \ true)\n    return (reverse_delete(s[1:], c[1:]), true)\nend\n\"\"\"\n    We\
    \ are given two strings s and c, you have to delete all the characters in s that\
    \ are equal to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and True/False for\
    \ the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should\
    \ be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n\
    \    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpvgcvucim.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpvgcvucim.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    else return (reverse_delete(s, c[1:]), true)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpsmx0phw_.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpsmx0phw_.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    \n    if length(s)==0 \n        return\
    \ (s,false)\n    end\n    \n    if length(c)==0 \n        return (s,true)\n  \
    \  end\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nusing Test\n\n@testset\
    \ begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") ==\
    \ (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\
    \t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"\
    dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"\
    vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") ==\
    \ (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyj1xchbv.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpyj1xchbv.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpyj1xchbv.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    else return (reverse_delete(s, c[1:]), true)\nend\n\"\"\"\
    \n    We are given two strings s and c, you have to delete all the characters\
    \ in s that are equal to any character in c\n    then check if the result string\
    \ is palindrome.\n    A string is called palindrome if it reads the same backward\
    \ as forward.\n    You should return a tuple containing the result string and\
    \ True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the\
    \ result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\
    \t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmplb4jwzuh.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmplb4jwzuh.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    \n    \n    \n    if length(s) <= 1\n\
    \        return (s,True)\n    end\n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\
    \t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpt3f_itn5.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpt3f_itn5.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpt3f_itn5.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), true)\n    else return (reverse_delete(s, c[1:]), false)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp5dedg7co.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp5dedg7co.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 || length(c)==0\n    \
    \    return (s,false)\n    end\n    \n    \n    if length(s)==1\n        return\
    \ (s,true)\n    end\n    \n    if length(c)==1\n        return (s,false)\n   \
    \ end\n    \n    if s[end-1]==c[0]\n        return (reverse_delete(s[end-2],c[end-1]),true)\n\
    \    end\n    \n    if s[end-1]!=c[0]\n        return (reverse_delete(s[end-2],c[end-1]),false)\n\
    \    end\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    using Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpf06be49j.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpf06be49j.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpf06be49j.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    return (reverse_delete(s[1:], c[1:]), true)\nend\n\"\"\"\
    \n    We are given two strings s and c, you have to delete all the characters\
    \ in s that are equal to any character in c\n    then check if the result string\
    \ is palindrome.\n    A string is called palindrome if it reads the same backward\
    \ as forward.\n    You should return a tuple containing the result string and\
    \ True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the\
    \ result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\
    \t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp6h8k1i2e.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp6h8k1i2e.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    return (reverse_delete(s[1:], c[1:]), true)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpppdb_na1.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpppdb_na1.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    return (reverse_delete(s[1:], c[1:]), true)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpya0z4or0.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpya0z4or0.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],c[1:]),\
    \ false)\n    if s[0]!=c[0] then return (reverse_delete(s[1:],c[1:]), true)\n\
    \    return (reverse_delete(s[1:],c[1:]), true)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\"\
    , false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpz5rjx6wz.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpz5rjx6wz.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    return (reverse_delete(s[1:], c[1:]), true)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpuf3fbtk5.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpuf3fbtk5.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    return (reverse_delete(s[1:], c), true)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\",\
    \ \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\"\
    , false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t\
    @test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\"\
    , \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpb5p72gq1.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpb5p72gq1.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    \n    if length(s)==0 then return (s,\
    \ false)\n    if length(c)==0 then return (s, true)\n    \n    if s[0]==c[0] then\
    \ return (reverse_delete(s[1:], c[1:]), false)\n    \n    if s[0]!=c[0] then return\
    \ (reverse_delete(s[1:], c[1:]), true)\n    \n    return (reverse_delete(s[1:],\
    \ c[1:]), true)\nend\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\
    \t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpc0zzkpx8.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpc0zzkpx8.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    else return (reverse_delete(s, c[1:]), true)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpibfo4g_f.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpibfo4g_f.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    if s[0]!=c[0] then return (reverse_delete(s[1:], c[1:]),\
    \ true)\n    return (reverse_delete(s[1:], c[1:]), true)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"\
    ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\"\
    , false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t\
    @test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\"\
    , \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpudtmix7t.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpudtmix7t.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],c[1:]),\
    \ false)\n    else return (reverse_delete(s[1:],c[1:]), true)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\",\
    \ \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\"\
    , false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t\
    @test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\"\
    , \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpbeu7zgd6.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpbeu7zgd6.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t\
    @test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6m7d57vf.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp6m7d57vf.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp6m7d57vf.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],c[1:]),\
    \ false)\n    if s[0]!=c[0] then return (reverse_delete(s[1:],c[1:]), true)\n\
    \    return (reverse_delete(s[1:],c[1:]), true)\nend\n\"\"\"\n    We are given\
    \ two strings s and c, you have to delete all the characters in s that are equal\
    \ to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and True/False for\
    \ the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should\
    \ be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n\
    \    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpupikwpae.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpupikwpae.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    \n    if length(s)==0 \n        return\
    \ (s,False) \n    else \n        \n        if length(c)==0 \n            return\
    \ (s,True) \n        else \n            \n            \n            \n       \
    \     \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t\
    @test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpa4o6_iv1.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpa4o6_iv1.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpa4o6_iv1.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    return (reverse_delete(s[1:], c[1:]), true)\nend\n\"\"\"\
    \n    We are given two strings s and c, you have to delete all the characters\
    \ in s that are equal to any character in c\n    then check if the result string\
    \ is palindrome.\n    A string is called palindrome if it reads the same backward\
    \ as forward.\n    You should return a tuple containing the result string and\
    \ True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the\
    \ result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\
    \t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpzefghw8b.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpzefghw8b.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    return (reverse_delete(s[1:], c[1:]), true)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp8m9thqaq.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp8m9thqaq.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    else return (reverse_delete(s, c[1:]), true)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpt58vllb6.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpt58vllb6.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 || length(c)==0\n    \
    \    return ('',false)\n    end\n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\
    \t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid character literal\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmphbmsv6_o.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphbmsv6_o.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],c[1:]),\
    \ false)\n    return (reverse_delete(s[1:],c), true)\nend\n\"\"\"\n    We are\
    \ given two strings s and c, you have to delete all the characters in s that are\
    \ equal to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and True/False for\
    \ the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should\
    \ be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n\
    \    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp9z9lfzpu.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp9z9lfzpu.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    if s[0]!=c[0] then return (reverse_delete(s[1:], c[1:]),\
    \ true)\n    return (reverse_delete(s[1:], c[1:]), true)\nend\n\"\"\"\n    We\
    \ are given two strings s and c, you have to delete all the characters in s that\
    \ are equal to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and True/False for\
    \ the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should\
    \ be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n\
    \    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpn2i6n1l6.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpn2i6n1l6.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    if s[0]!=c[0] then return (reverse_delete(s[1:], c[1:]),\
    \ true)\n    return (reverse_delete(s[1:], c[1:]), true)\nend\n\"\"\"\n    We\
    \ are given two strings s and c, you have to delete all the characters in s that\
    \ are equal to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and True/False for\
    \ the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should\
    \ be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n\
    \    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp90p9eohc.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp90p9eohc.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    if s[0]!=c[0] then return (reverse_delete(s[1:], c[1:]),\
    \ true)\n    return (reverse_delete(s[1:], c[1:]), true)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"\
    ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\"\
    , false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t\
    @test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\"\
    , \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpurnpm4_i.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpurnpm4_i.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), true)\n    return (reverse_delete(s[1:], c), false)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\",\
    \ \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\"\
    , false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t\
    @test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\"\
    , \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpel39o39e.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpel39o39e.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    \n    if length(s)==0 || length(c)==0\n\
    \        return (s,True)\n    end\n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\
    \t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0ixulc0i.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp0ixulc0i.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp0ixulc0i.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],c[1:]),\
    \ false)\n    else return (reverse_delete(s[1:],c), true)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"\
    ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\"\
    , false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t\
    @test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\"\
    , \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp1dg26lwe.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp1dg26lwe.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    if s[0]!=c[0] then return (reverse_delete(s[1:], c[1:]),\
    \ true)\n    return (reverse_delete(s[1:], c[1:]), true)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"\
    ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\"\
    , false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t\
    @test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\"\
    , \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp5bzijy0w.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp5bzijy0w.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    return (reverse_delete(s[1:], c[1:]), true)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpfelju30f.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpfelju30f.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), true)\n    return (reverse_delete(s[1:], c[1:]), false)\nend\n\"\"\"\
    \n    We are given two strings s and c, you have to delete all the characters\
    \ in s that are equal to any character in c\n    then check if the result string\
    \ is palindrome.\n    A string is called palindrome if it reads the same backward\
    \ as forward.\n    You should return a tuple containing the result string and\
    \ True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the\
    \ result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\
    \t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpwncc227e.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpwncc227e.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 || length(c)==0 \n   \
    \     return ('',False) \n    else \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \nusing Test\n\n@testset\
    \ begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") ==\
    \ (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\
    \t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"\
    dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"\
    vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") ==\
    \ (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid character literal\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpcefplfuj.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpcefplfuj.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    return (reverse_delete(s, c[1:]), true)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\",\
    \ \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\"\
    , false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t\
    @test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\"\
    , \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp32weqdv8.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp32weqdv8.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    \n    if length(s)==0 || length(c)==0\n\
    \        return (s,True)\n    end\n    \n    if length(s) mod length(c)==0\n \
    \       \n        if length(s)==length(c)\n            return (s,True)\n     \
    \   else\n            return (s,False)\n        end\n    end\n    \n    if length(s)\
    \ mod length(c)==1\n        \n        if s[length(s)]==c[length(c)]\n        \
    \    return (reverse_delete(s[2:end],c),True)\n        else\n            return\
    \ (reverse_delete(s[2:end],c),False)\n        end\n    end\n    \n    if length(s)\
    \ mod length(c)==2\n        \n        if s[length(s)]==c[length(s)]\n        \
    \    return (reverse_delete(s[2:end],c),True)\n        else\n            return\
    \ (reverse_delete(s[2:end],c),False)\n        end\n    end\n    \n    if length(s)\
    \ mod length(c)==3\n        \n        if s[length(s)]==c[length(s)]\n        \
    \    return (reverse_delete(s[2:end],c),True)\n        else\n            return\
    \ (reverse_delete(s[2:end],c),False)\n        end\n    end\n    \n    if length(s)\
    \ mod length(c)==4\n        \n        if s[length(s)]==c[length(s)]\n        \
    \    return (reverse_delete(s[2:end],c),True)\n        else\n            return\
    \ (reverse_delete(s[2:end],c),False)\n        end\n    end\n    \n    if length(s)\
    \ mod length(c)==5\n        \n        if s[length(s)]==c[length(s)]\n        \
    \    return (reverse_delete(s[2:end],c),True)\n        else\n            return\
    \ (reverse_delete(s[2:end],c),False)\n        end\n    end\n    \n    if length(s)\
    \ mod length(c)==6\n        \n        if s[length(s)]==c[length(s)]\n        \
    \    return (reverse_delete(s[2:end],c),True)\n        else\n            return\
    \ (reverse_delete(s[2:end],c),False)\n        end\n    end\n    \n    if length(s)\
    \ mod length(c)==7\n        \n        if s[length(s)]==c[length(s)]\n        \
    \    return (reverse_delete(s[2:end],c),True)\n        else\n            return\
    \ (reverse_delete(s[2:end],c),False)\n        end\n    end\n    \n    if length(s)\
    \ mod length(c)==8\n        \n        if s[length(s)]==c[length(s)]\n        \
    \    return (reverse_delete(s[2:end],c),True)\n        else\n            return\
    \ (reverse_delete(s[2:end],c),False)\n        end\n    end\n    \n    if length(s)\
    \ mod length(c)==9\n        \n        if s[length(s)]==c[length(s)]\n        \
    \    return (reverse_delete(\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\
    \t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"length\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp45022b5z.jl:17\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp45022b5z.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    return (reverse_delete(s[1:], c[1:]), true)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpzrmcdr5h.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpzrmcdr5h.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 || length(c)==0\n    \
    \    return (\"False\",False)\n    end\n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\n\
    candidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\"\
    , false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpo_1x9qr6.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpo_1x9qr6.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpo_1x9qr6.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    else return (reverse_delete(s[1:], c), true)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmprbrshzd7.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmprbrshzd7.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    return (reverse_delete(s[1:], c[1:]), true)\nend\n\"\"\"\
    \n    We are given two strings s and c, you have to delete all the characters\
    \ in s that are equal to any character in c\n    then check if the result string\
    \ is palindrome.\n    A string is called palindrome if it reads the same backward\
    \ as forward.\n    You should return a tuple containing the result string and\
    \ True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the\
    \ result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result\
    \ should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result\
    \ should be ('cdedc',True)\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\
    \t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"\
    abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\"\
    ) == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"\
    abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"\
    abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpsefpfd99.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpsefpfd99.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    else return (reverse_delete(s, c[1:]), true)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpkq7vygmc.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpkq7vygmc.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    else return (reverse_delete(s, c[1:]), true)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp446t3agx.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp446t3agx.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    \n    if length(s)==0 then return (s,\
    \ false)\n    if length(c)==0 then return (s, true)\n    if length(s)==1 then\
    \ return (s, true)\n    if length(c)==1 then return (s, false)\n    \n    if s[0]==c[0]\
    \ then return (reverse_delete(s[1:], c[1:]), false)\n    if s[0]!=c[0] then return\
    \ (reverse_delete(s[1:], c[1:]), true)\n    \n    return (reverse_delete(s[1:],\
    \ c[1:]), true)\nend\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\
    \t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpfh_n0e4e.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpfh_n0e4e.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    else return (reverse_delete(s[1:], c), true)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp7hjski1o.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp7hjski1o.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    if s[0]!=c[0] then return (reverse_delete(s[1:], c[1:]),\
    \ true)\n    return (reverse_delete(s[1:], c[1:]), true)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"\
    ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\"\
    , false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t\
    @test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\"\
    , \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp4e2imgqc.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp4e2imgqc.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    return (reverse_delete(s[1:], c), true)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\",\
    \ \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\"\
    , false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t\
    @test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\"\
    , \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp7mqtyefz.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp7mqtyefz.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],c[1:]),\
    \ false)\n    return (reverse_delete(s[1:],c), true)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") ==\
    \ (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\
    \t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"\
    dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"\
    vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") ==\
    \ (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp9jx2_7s5.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp9jx2_7s5.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],c[1:]),\
    \ false)\n    return (reverse_delete(s[1:],c), true)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") ==\
    \ (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\
    \t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"\
    dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"\
    vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") ==\
    \ (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp1trpm64s.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp1trpm64s.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    if s[0]!=c[0] then return (reverse_delete(s[1:], c[1:]),\
    \ true)\n    return (reverse_delete(s[1:], c[1:]), true)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"\
    ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\"\
    , false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t\
    @test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\"\
    , \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp9tdm0uaq.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp9tdm0uaq.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    return (reverse_delete(s[1:], c[1:]), true)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp4ella4fm.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp4ella4fm.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    if s[0]!=c[0] then return (reverse_delete(s[1:], c[1:]),\
    \ true)\n    return (reverse_delete(s[1:], c[1:]), true)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"\
    ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\"\
    , false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t\
    @test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\"\
    , \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpsbqy6v5u.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpsbqy6v5u.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    \n    if length(s)==0 || length(c)==0\n\
    \        return (s,false)\n    end\n    \n    if length(s)==1\n        return\
    \ (s,true)\n    end\n    \n    if length(c)==1\n        return (s,false)\n   \
    \ end\n    \n    if s[end-1]==c[1]\n        return (reverse_delete(s[1:end-1],\
    \ c[2:end]),true)\n    end\n    \n    if s[end-1]!=c[1]\n        return (s,false)\n\
    \    end\n    \n    return (reverse_delete(s[1:end-1], c[2:end]),false)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpphnuvs2w.jl:40\n  Expression: candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false)\n   Evaluated: (\"abcde\", false) == (\"\
    bcd\", false)\nStacktrace:\n [1] top-level scope at /tmp/tmpphnuvs2w.jl:40\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpphnuvs2w.jl:39\ntest set: Test Failed at /tmp/tmpphnuvs2w.jl:41\n\
    \  Expression: candidate(\"abcdef\", \"b\") == (\"acdef\", false)\n   Evaluated:\
    \ (\"abcdef\", false) == (\"acdef\", false)\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpphnuvs2w.jl:41\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpphnuvs2w.jl:39\ntest set: Test Failed at /tmp/tmpphnuvs2w.jl:42\n\
    \  Expression: candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true)\n   Evaluated:\
    \ (\"abcdedcba\", false) == (\"cdedc\", true)\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpphnuvs2w.jl:42\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpphnuvs2w.jl:39\ntest set: Test Failed at /tmp/tmpphnuvs2w.jl:43\n\
    \  Expression: candidate(\"dwik\", \"w\") == (\"dik\", false)\n   Evaluated: (\"\
    dwik\", false) == (\"dik\", false)\nStacktrace:\n [1] top-level scope at /tmp/tmpphnuvs2w.jl:43\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpphnuvs2w.jl:39\ntest set: Test Failed at /tmp/tmpphnuvs2w.jl:44\n\
    \  Expression: candidate(\"a\", \"a\") == (\"\", true)\n   Evaluated: (\"a\",\
    \ true) == (\"\", true)\nStacktrace:\n [1] top-level scope at /tmp/tmpphnuvs2w.jl:44\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpphnuvs2w.jl:39\ntest set: Test Failed at /tmp/tmpphnuvs2w.jl:45\n\
    \  Expression: candidate(\"abcdedcba\", \"\") == (\"abcdedcba\", true)\n   Evaluated:\
    \ (\"abcdedcba\", false) == (\"abcdedcba\", true)\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpphnuvs2w.jl:45\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpphnuvs2w.jl:39\ntest set: Test Failed at /tmp/tmpphnuvs2w.jl:46\n\
    \  Expression: candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true)\n   Evaluated:\
    \ (\"abcdedcba\", false) == (\"abcdedcba\", true)\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpphnuvs2w.jl:46\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpphnuvs2w.jl:39\ntest set: Test Failed at /tmp/tmpphnuvs2w.jl:47\n\
    \  Expression: candidate(\"vabba\", \"v\") == (\"abba\", true)\n   Evaluated:\
    \ (\"vabba\", false) == (\"abba\", true)\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpphnuvs2w.jl:47\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpphnuvs2w.jl:39\ntest set: Error During Test at\
    \ /tmp/tmpphnuvs2w.jl:48\n  Test threw exception\n  Expression: candidate(\"mamma\"\
    , \"mia\") == (\"\", true)\n  MethodError: Cannot `convert` an object of type\
    \ Tuple{String,Bool} to an object of type String\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:209\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:210\n\
    \    convert(::Type{T}, !Matched::T) where T at essentials.jl:171\n  Stacktrace:\n\
    \   [1] convert(::Type{Tuple{String,Bool}}, ::Tuple{Tuple{String,Bool},Bool})\
    \ at ./essentials.jl:310\n   [2] reverse_delete(::String, ::String) at /tmp/tmpphnuvs2w.jl:26\n\
    \   [3] top-level scope at /tmp/tmpphnuvs2w.jl:48\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpphnuvs2w.jl:39\n  \nTest Summary: | Fail  Error\
    \  Total\ntest set      |    8      1      9\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 8 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpphnuvs2w.jl:37\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    \n    \n    if length(s)==0 || length(c)==0\n\
    \        return (s,false)\n    end\n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\
    \t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp24_tr5_8.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp24_tr5_8.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp24_tr5_8.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],c[1:]),\
    \ false)\n    return (reverse_delete(s[1:],c), true)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") ==\
    \ (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\
    \t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"\
    dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"\
    vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") ==\
    \ (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpovyo6uzq.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpovyo6uzq.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],c[1:]),\
    \ false)\n    else return (reverse_delete(s[1:],c[1:]), true)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\",\
    \ \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\"\
    , false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t\
    @test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\"\
    , \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpd5vy8jsh.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpd5vy8jsh.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 || length(c)==0 \n   \
    \     return ('',False) \n    else \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \nusing Test\n\n@testset\
    \ begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") ==\
    \ (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\
    \t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"\
    dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"\
    vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") ==\
    \ (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid character literal\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpa3420m7f.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpa3420m7f.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if length(s)==1 then return (s,\
    \ true)\n    if length(c)==1 then return (s, false)\n    if s[0]==c[0] then return\
    \ (reverse_delete(s[1:], c[1:]), true)\n    if s[0]!=c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    return (reverse_delete(s[1:], c[1:]), false)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpa5c8rbyl.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpa5c8rbyl.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    else return (reverse_delete(s, c[1:]), true)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp3q3sfjzu.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp3q3sfjzu.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    if s[0]!=c[0] then return (reverse_delete(s[1:], c[1:]),\
    \ true)\n    return (reverse_delete(s[1:], c[1:]), true)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"\
    ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\"\
    , false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t\
    @test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\"\
    , \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp_kkwgrp7.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp_kkwgrp7.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    return (reverse_delete(s[1:], c[1:]), true)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpt7l9pif3.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpt7l9pif3.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    if s[0]!=c[0] then return (reverse_delete(s[1:], c[1:]),\
    \ true)\n    return (reverse_delete(s[1:], c[1:]), true)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"\
    ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\"\
    , false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t\
    @test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\"\
    , \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmplqn6_9ui.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmplqn6_9ui.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    else return (reverse_delete(s, c[1:]), true)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp5vd9cx3e.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp5vd9cx3e.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    return (reverse_delete(s[1:], c[1:]), true)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpxlz3xet2.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpxlz3xet2.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    return (reverse_delete(s[1:], c[1:]), true)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp687mqsdp.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp687mqsdp.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 || length(c)==0 \n   \
    \     return (s,False) \n    else \n        \n        \n        \n        \n \
    \       \n        \n        \n        \n        \n        \n        \n       \
    \ \n        \n        \n        \n        \n        \n        \n        \n   \
    \     \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") ==\
    \ (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\
    \t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"\
    dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"\
    vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") ==\
    \ (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpuq1wi317.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpuq1wi317.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpuq1wi317.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    \n    if length(s)==0 then return (s,\
    \ false)\n    if length(c)==0 then return (s, true)\n    \n    if s[0]==c[0] then\
    \ return (reverse_delete(s[1:], c[1:]), false)\n    \n    if s[0]!=c[0] then return\
    \ (reverse_delete(s[1:], c[1:]), true)\n    \n    return (reverse_delete(s[1:],\
    \ c[1:]), true)\nend\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\
    \t@test(candidate(\"abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"\
    abcdef\", \"b\") == (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\"\
    ) == (\"cdedc\", true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\
    \t@test(candidate(\"a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\"\
    , \"\") == (\"abcdedcba\", true))\n\t@test(candidate(\"abcdedcba\", \"v\") ==\
    \ (\"abcdedcba\", true))\n\t@test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\
    \t@test(candidate(\"mamma\", \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpw49sq9d1.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpw49sq9d1.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    return (reverse_delete(s, c[1:]), true)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\",\
    \ \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\"\
    , false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t\
    @test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\"\
    , \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp2zatkuxc.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp2zatkuxc.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    if s[0]!=c[0] then return (reverse_delete(s[1:], c[1:]),\
    \ true)\n    return (reverse_delete(s[1:], c[1:]), true)\nend\n\"\"\"\n    We\
    \ are given two strings s and c, you have to delete all the characters in s that\
    \ are equal to any character in c\n    then check if the result string is palindrome.\n\
    \    A string is called palindrome if it reads the same backward as forward.\n\
    \    You should return a tuple containing the result string and True/False for\
    \ the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should\
    \ be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n\
    \    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpn8799wqq.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpn8799wqq.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    if s[0]!=c[0] then return (reverse_delete(s[1:], c[1:]),\
    \ true)\n    return (reverse_delete(s[1:], c[1:]), true)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"\
    ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\"\
    , false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t\
    @test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\"\
    , \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp3m39483m.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp3m39483m.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    \n    \n    if length(s)==0 \n       \
    \ return (s,false)\n    \n    if length(c)==0 \n        return (s,true)\n    \n\
    \    if length(s)==1 \n        return (s,c==s[0])\n    \n    if length(c)==1 \n\
    \        return (s,c==s[0])\n    \n    if s[0]==c[0] \n        return (reverse_delete(s[1:],c[1:]),c==s[0])\n\
    \    \n    if s[0]!=c[0] \n        return (reverse_delete(s[1:],c[1:]),false)\n\
    \    \n    return (reverse_delete(s[1:],c[1:]),c==s[0])\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\", \"ae\") ==\
    \ (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\", false))\n\
    \t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t@test(candidate(\"\
    dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\", \"a\") == (\"\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t@test(candidate(\"\
    vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\", \"mia\") ==\
    \ (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmp00zz0fyh.jl:27\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp00zz0fyh.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 then return (s, false)\n\
    \    if length(c)==0 then return (s, true)\n    if s[0]==c[0] then return (reverse_delete(s[1:],\
    \ c[1:]), false)\n    else return (reverse_delete(s, c[1:]), true)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"\
    abcde\", \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") ==\
    \ (\"acdef\", false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\"\
    , true))\n\t@test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"\
    a\", \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpbpbxoddz.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpbpbxoddz.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Task\n    We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n    then check\
    \ if the result string is palindrome.\n    A string is called palindrome if it\
    \ reads the same backward as forward.\n    You should return a tuple containing\
    \ the result string and True/False for the check.\n    Example\n    For s = \"\
    abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\"\
    , c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\",\
    \ c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\nfunction reverse_delete(s::String,\
    \ c::String)::Tuple{String, Bool} \n    if length(s)==0 || length(c)==0\n    \
    \    return (\"\",false)\n    end\n    \n    if s[0]==c[0]\n        return (s[1:],true)\n\
    \    end\n    \n    if s[0]!=c[0]\n        return (s[1:],false)\n    end\n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\
    \n@testset begin\n\ncandidate = reverse_delete;\n\t@test(candidate(\"abcde\",\
    \ \"ae\") == (\"bcd\", false))\n\t@test(candidate(\"abcdef\", \"b\") == (\"acdef\"\
    , false))\n\t@test(candidate(\"abcdedcba\", \"ab\") == (\"cdedc\", true))\n\t\
    @test(candidate(\"dwik\", \"w\") == (\"dik\", false))\n\t@test(candidate(\"a\"\
    , \"a\") == (\"\", true))\n\t@test(candidate(\"abcdedcba\", \"\") == (\"abcdedcba\"\
    , true))\n\t@test(candidate(\"abcdedcba\", \"v\") == (\"abcdedcba\", true))\n\t\
    @test(candidate(\"vabba\", \"v\") == (\"abba\", true))\n\t@test(candidate(\"mamma\"\
    , \"mia\") == (\"\", true))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmpg6wndmpv.jl:17\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpg6wndmpv.jl:17\n"
  exit_code: 1
  status: Exception
