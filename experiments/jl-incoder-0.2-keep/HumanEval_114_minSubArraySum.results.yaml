name: HumanEval_114_minSubArraySum
language: julia
results:
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    \n    for\
    \ n in nums\n        sum += n\n    end\n    \n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise\nWrite a function that\
    \ takes an array of integers and returns the sum of the squares of the integers\
    \ in the array.\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvl25t6yq.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvl25t6yq.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    sum = 0\n    for x in nums\n\
    \        sum += x\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nExercise 3\nWrite a function that returns the number\
    \ of times each unique element appears in an array.\nusing Test\n\n@testset begin\n\
    \ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t\
    @test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10])\
    \ == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\t@test(candidate([0,\
    \ 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3, 10, -5]) == -6)\n\t\
    @test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10, 11,\
    \ 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\t\
    @test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7mhn2v39.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7mhn2v39.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    for x in\
    \ nums\n        sum += x\n    end\n    return sum\nend\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that returns the sum of the squares of the numbers in a\
    \ given vector.\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpeuxwu1nk.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpeuxwu1nk.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    \n    for\
    \ n in nums\n        sum += n\n    end\n    \n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpe01tx6oz.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpe01tx6oz.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    for x in\
    \ nums\n        sum += x\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum\
    \ of the squares of the numbers in an array.\nusing Test\n\n@testset begin\n\n\
    candidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkn7izwo2.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpkn7izwo2.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    \n    for\
    \ n in nums\n        sum += n\n    end\n    \n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp604f4q53.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp604f4q53.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0c9_llpx.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp0c9_llpx.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp0c9_llpx.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    \n    for\
    \ num in nums\n        sum += num\n    end\n    \n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nProblem\
    \ 3\nGiven an array of integers nums, find the maximum sum of any non-empty sub-array\n\
    \    of nums.\n    Example\n    maxSubArraySum([2, 3, 4, 1, 2, 4]) == 6\n    maxSubArraySum([-1,\
    \ -2, -3]) == -3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpm3tz4nz8.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpm3tz4nz8.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    for n in\
    \ nums\n        sum += n\n    end\n    return sum\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the number of times a given value appears in\
    \ an array.\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpm9gwq_t9.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpm9gwq_t9.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    \n    for\
    \ num in nums\n        sum += num\n    end\n    \n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of times a given value appears in\
    \ a given array.\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnmedokox.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpnmedokox.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    \n    for\
    \ x in nums\n        sum += x\n    end\n    \n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the number of positive integers less than or equal to n.\nusing Test\n\
    \n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_x6jknww.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_x6jknww.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    sum = 0\n    for x in nums\n\
    \        sum += x\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the number of times a given value appears in an\
    \ array.\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpm_tq8c3_.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpm_tq8c3_.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    sum::Int64 = 0\n    \n    for\
    \ n in nums\n        sum += n\n    end\n    \n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of times a given element appears\
    \ in an array.\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t\
    @test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpi80zx26l.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpi80zx26l.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    for x in\
    \ nums\n        sum += x\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.4>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.4>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nProblem 7\nGiven an array of integers nums, find\
    \ the maximum sum of any non-empty sub-array\n    of nums.\n    Example\n    maxSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 5\n    maxSubArraySum([-1, -2, -3]) == 6\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvk2dffpy.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvk2dffpy.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    \n    for\
    \ x in nums\n        sum += x\n    end\n    \n    return sum\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of positive integers less\
    \ than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp35bq8843.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp35bq8843.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    \n    for\
    \ n in nums\n        sum += n\n    end\n    \n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpp7l0zcoq.jl:23\n  Expression: candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n   Evaluated: 16 == 1\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpp7l0zcoq.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpp7l0zcoq.jl:22\ntest set: Test Failed at /tmp/tmpp7l0zcoq.jl:27\n\
    \  Expression: candidate([0, 10, 20, 1000000]) == 0\n   Evaluated: 1000030 ==\
    \ 0\nStacktrace:\n [1] top-level scope at /tmp/tmpp7l0zcoq.jl:27\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpp7l0zcoq.jl:22\ntest set: Test Failed at /tmp/tmpp7l0zcoq.jl:28\n\
    \  Expression: candidate([-1, -2, -3, 10, -5]) == -6\n   Evaluated: -1 == -6\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpp7l0zcoq.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpp7l0zcoq.jl:22\ntest set: Test Failed at /tmp/tmpp7l0zcoq.jl:29\n\
    \  Expression: candidate([100, -1, -2, -3, 10, -5]) == -6\n   Evaluated: 99 ==\
    \ -6\nStacktrace:\n [1] top-level scope at /tmp/tmpp7l0zcoq.jl:29\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpp7l0zcoq.jl:22\ntest set: Test Failed at /tmp/tmpp7l0zcoq.jl:30\n\
    \  Expression: candidate([10, 11, 13, 8, 3, 4]) == 3\n   Evaluated: 49 == 3\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpp7l0zcoq.jl:30\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpp7l0zcoq.jl:22\ntest set: Test Failed at /tmp/tmpp7l0zcoq.jl:31\n\
    \  Expression: candidate([100, -33, 32, -1, 0, -2]) == -33\n   Evaluated: 96 ==\
    \ -33\nStacktrace:\n [1] top-level scope at /tmp/tmpp7l0zcoq.jl:31\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpp7l0zcoq.jl:22\ntest set: Test Failed at /tmp/tmpp7l0zcoq.jl:34\n\
    \  Expression: candidate([1, -1]) == -1\n   Evaluated: 0 == -1\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpp7l0zcoq.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpp7l0zcoq.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     7     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp7l0zcoq.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    sum = 0\n    for n in nums\n\
    \        sum += n\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9s1hu0rv.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9s1hu0rv.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    \n    for\
    \ n in nums\n        sum += n\n    end\n    \n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the number of integers in the array that are\
    \ less than the given value.\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmpcl023t.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmpcl023t.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    \n    for\
    \ n in nums\n        sum += n\n    end\n    \n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpycak5qlk.jl:23\n  Expression: candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n   Evaluated: 16 == 1\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpycak5qlk.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpycak5qlk.jl:22\ntest set: Test Failed at /tmp/tmpycak5qlk.jl:27\n\
    \  Expression: candidate([0, 10, 20, 1000000]) == 0\n   Evaluated: 1000030 ==\
    \ 0\nStacktrace:\n [1] top-level scope at /tmp/tmpycak5qlk.jl:27\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpycak5qlk.jl:22\ntest set: Test Failed at /tmp/tmpycak5qlk.jl:28\n\
    \  Expression: candidate([-1, -2, -3, 10, -5]) == -6\n   Evaluated: -1 == -6\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpycak5qlk.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpycak5qlk.jl:22\ntest set: Test Failed at /tmp/tmpycak5qlk.jl:29\n\
    \  Expression: candidate([100, -1, -2, -3, 10, -5]) == -6\n   Evaluated: 99 ==\
    \ -6\nStacktrace:\n [1] top-level scope at /tmp/tmpycak5qlk.jl:29\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpycak5qlk.jl:22\ntest set: Test Failed at /tmp/tmpycak5qlk.jl:30\n\
    \  Expression: candidate([10, 11, 13, 8, 3, 4]) == 3\n   Evaluated: 49 == 3\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpycak5qlk.jl:30\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpycak5qlk.jl:22\ntest set: Test Failed at /tmp/tmpycak5qlk.jl:31\n\
    \  Expression: candidate([100, -33, 32, -1, 0, -2]) == -33\n   Evaluated: 96 ==\
    \ -33\nStacktrace:\n [1] top-level scope at /tmp/tmpycak5qlk.jl:31\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpycak5qlk.jl:22\ntest set: Test Failed at /tmp/tmpycak5qlk.jl:34\n\
    \  Expression: candidate([1, -1]) == -1\n   Evaluated: 0 == -1\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpycak5qlk.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpycak5qlk.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     7     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpycak5qlk.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    sum = 0\n    for x in nums\n\
    \        sum += x\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nExercise\nWrite a function that takes in an array\
    \ of integers and returns the number of elements that are less than or equal to\
    \ zero.\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpapk7kxg1.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpapk7kxg1.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    \n    for\
    \ n in nums\n        sum += n\n    end\n    \n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([-1, -2, -3])\n</cell>\n<text>\nProblem 7\nGiven an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n\
    \    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3])\
    \ == -6\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpilqro7p5.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpilqro7p5.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    sum = 0\n    for x in nums\n\
    \        sum += x\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp748pyxlz.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp748pyxlz.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    \n    for\
    \ n in nums\n        sum += n\n    end\n    \n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the sum of the numbers in the array nums.\nExample\nsumOfArray([1, 2,\
    \ 3]) == 6\nsumOfArray([-1, -2, -3]) == 6\nsumOfArray([-1, -2, -3, -4, -5]) ==\
    \ 10\nsumOfArray([-1, -2, -3, -4, -5, -6, -7, -8, -9]) == 21\nsumOfArray([-1,\
    \ -2, -3, -4, -5, -6, -7, -8, -9, -10, -10, -10, -10, -10, -10, -10, -10, -10,\
    \ -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10,\
    \ -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10,\
    \ -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10,\
    \ -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10,\
    \ -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10,\
    \ -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10,\
    \ -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10,\
    \ -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10,\
    \ -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10,\
    \ -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10,\
    \ -10, -10, -10, -10, -10, -10, \nusing Test\n\n@testset begin\n\ncandidate =\
    \ minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6ibtztfq.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6ibtztfq.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    \n    for\
    \ n in nums\n        sum += n\n    end\n    \n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpq11tqm95.jl:23\n  Expression: candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n   Evaluated: 16 == 1\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpq11tqm95.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpq11tqm95.jl:22\ntest set: Test Failed at /tmp/tmpq11tqm95.jl:27\n\
    \  Expression: candidate([0, 10, 20, 1000000]) == 0\n   Evaluated: 1000030 ==\
    \ 0\nStacktrace:\n [1] top-level scope at /tmp/tmpq11tqm95.jl:27\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpq11tqm95.jl:22\ntest set: Test Failed at /tmp/tmpq11tqm95.jl:28\n\
    \  Expression: candidate([-1, -2, -3, 10, -5]) == -6\n   Evaluated: -1 == -6\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpq11tqm95.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpq11tqm95.jl:22\ntest set: Test Failed at /tmp/tmpq11tqm95.jl:29\n\
    \  Expression: candidate([100, -1, -2, -3, 10, -5]) == -6\n   Evaluated: 99 ==\
    \ -6\nStacktrace:\n [1] top-level scope at /tmp/tmpq11tqm95.jl:29\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpq11tqm95.jl:22\ntest set: Test Failed at /tmp/tmpq11tqm95.jl:30\n\
    \  Expression: candidate([10, 11, 13, 8, 3, 4]) == 3\n   Evaluated: 49 == 3\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpq11tqm95.jl:30\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpq11tqm95.jl:22\ntest set: Test Failed at /tmp/tmpq11tqm95.jl:31\n\
    \  Expression: candidate([100, -33, 32, -1, 0, -2]) == -33\n   Evaluated: 96 ==\
    \ -33\nStacktrace:\n [1] top-level scope at /tmp/tmpq11tqm95.jl:31\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpq11tqm95.jl:22\ntest set: Test Failed at /tmp/tmpq11tqm95.jl:34\n\
    \  Expression: candidate([1, -1]) == -1\n   Evaluated: 0 == -1\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpq11tqm95.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpq11tqm95.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     7     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq11tqm95.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum::Int64 = 0\n    \n\
    \    for num in nums\n        \n        if num > 0\n            \n           \
    \ sum += num\n            \n        else\n            \n            sum -= num\n\
    \            \n        end\n        \n    end\n    \n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of positive integers less than or\
    \ equal to n.\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t\
    @test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4nkjhbrv.jl:28\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4nkjhbrv.jl:28\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp2nlsx427.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp2nlsx427.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp2nlsx427.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    sum::Int64 = nums.reduce(_\
    \ + _)\n    \n    for num in nums\n        sum += num\n    end\n    \n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2,\
    \ 4])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number of\
    \ times a given element appears in a given array.\nusing Test\n\n@testset begin\n\
    \ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t\
    @test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10])\
    \ == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\t@test(candidate([0,\
    \ 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3, 10, -5]) == -6)\n\t\
    @test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10, 11,\
    \ 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\t\
    @test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: all-underscore identifier used as rvalue around\
    \ /tmp/tmpmsqbk_uj.jl:9\nStacktrace:\n [1] top-level scope at /tmp/tmpmsqbk_uj.jl:1\n\
    \ [2] include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpmsqbk_uj.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    for x in\
    \ nums\n        sum += x\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nProblem 7\nGiven an array of integers nums, find\
    \ the maximum sum of any non-empty sub-array\n    of nums.\n    Example\n    maxSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 6\n    maxSubArraySum([-1, -2, -3]) == -3\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9aaylnx4.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9aaylnx4.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    sum = 0\n    for i in nums\n\
    \        sum += i\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.0>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.0>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nProblem 7: Find the sum of all the numbers in the\
    \ array nums.\nExample\nsumArray([-1, -2, -3]) == -6\nusing Test\n\n@testset begin\n\
    \ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t\
    @test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10])\
    \ == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\t@test(candidate([0,\
    \ 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3, 10, -5]) == -6)\n\t\
    @test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10, 11,\
    \ 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\t\
    @test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8t7a20jh.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8t7a20jh.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    sum = 0\n    for x in nums\n\
    \        sum += x\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.0>\n\
    using Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppjll61wz.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppjll61wz.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    \n    for\
    \ num in nums\n        sum += num\n    end\n    \n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of positive integers less than or\
    \ equal to n.\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t\
    @test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1ilcq8g8.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1ilcq8g8.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    sum::Int64 = 0\n    for i in\
    \ nums\n        sum += i\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkjqe2z7r.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpkjqe2z7r.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    sum = 0\n    for x in nums\n\
    \        sum += x\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the number of positive integers less than or equal to n.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5qccvy0r.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5qccvy0r.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    \n    for\
    \ n in nums\n        sum += n\n    end\n    \n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the number of positive integers in an array.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4])\
    \ == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3,\
    \ 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp688jyh4x.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp688jyh4x.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    \n    for\
    \ num in nums\n        sum += num\n    end\n    \n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpm0p_z424.jl:23\n  Expression: candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n   Evaluated: 16 == 1\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpm0p_z424.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpm0p_z424.jl:22\ntest set: Test Failed at /tmp/tmpm0p_z424.jl:27\n\
    \  Expression: candidate([0, 10, 20, 1000000]) == 0\n   Evaluated: 1000030 ==\
    \ 0\nStacktrace:\n [1] top-level scope at /tmp/tmpm0p_z424.jl:27\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpm0p_z424.jl:22\ntest set: Test Failed at /tmp/tmpm0p_z424.jl:28\n\
    \  Expression: candidate([-1, -2, -3, 10, -5]) == -6\n   Evaluated: -1 == -6\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpm0p_z424.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpm0p_z424.jl:22\ntest set: Test Failed at /tmp/tmpm0p_z424.jl:29\n\
    \  Expression: candidate([100, -1, -2, -3, 10, -5]) == -6\n   Evaluated: 99 ==\
    \ -6\nStacktrace:\n [1] top-level scope at /tmp/tmpm0p_z424.jl:29\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpm0p_z424.jl:22\ntest set: Test Failed at /tmp/tmpm0p_z424.jl:30\n\
    \  Expression: candidate([10, 11, 13, 8, 3, 4]) == 3\n   Evaluated: 49 == 3\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpm0p_z424.jl:30\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpm0p_z424.jl:22\ntest set: Test Failed at /tmp/tmpm0p_z424.jl:31\n\
    \  Expression: candidate([100, -33, 32, -1, 0, -2]) == -33\n   Evaluated: 96 ==\
    \ -33\nStacktrace:\n [1] top-level scope at /tmp/tmpm0p_z424.jl:31\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpm0p_z424.jl:22\ntest set: Test Failed at /tmp/tmpm0p_z424.jl:34\n\
    \  Expression: candidate([1, -1]) == -1\n   Evaluated: 0 == -1\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpm0p_z424.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpm0p_z424.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     7     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpm0p_z424.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    for n in\
    \ nums\n        sum += n\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of times each element appears in an array. \nExample\ncountElements([1, 1, 2,\
    \ 3, 4, 4, 5]) == [1, 1, 2, 3, 4, 4, 5]\ncountElements([1, 1, 2, 3, 4, 4, 5])\
    \ == [1, 1, 2, 3, 4, 4, 5]\ncountElements([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2,\
    \ 3, 4, 4, 5]\ncountElements([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 3, 4, 4, 5]\n\
    countElements([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 3, 4, 4, 5]\ncountElements([1,\
    \ 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 3, 4, 4, 5]\ncountElements([1, 1, 2, 3, 4, 4,\
    \ 5]) == [1, 1, 2, 3, 4, 4, 5]\ncountElements([1, 1, 2, 3, 4, 4, 5]) == [1, 1,\
    \ 2, 3, 4, 4, 5]\ncountElements([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 3, 4, 4, 5]\n\
    countElements([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 3, 4, 4, 5]\ncountElements([1,\
    \ 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 3, 4, 4, 5]\ncountElements([1, 1, 2, 3, 4, 4,\
    \ 5]) == [1, 1, 2, 3, 4, 4, 5]\ncountElements([1, 1, 2, 3, 4, 4, 5]) == [1, 1,\
    \ 2, 3, 4, 4, 5]\ncountElements([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 3, 4, 4, 5]\n\
    countElements([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 3, 4, 4, 5]\ncountElements([1,\
    \ 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 3, 4, 4, 5]\ncountElements([1, 1, 2, 3, 4, 4,\
    \ 5]) == [1, 1, 2, 3, 4, 4, 5]\ncountElements([1, 1, 2, 3, 4, 4, 5]) == [1, 1,\
    \ 2, 3, 4, 4, 5]\ncountElements([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 3, 4, 4, 5]\n\
    countElements([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 3, 4, 4, 5]\ncountElements([1,\
    \ 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 3, 4, 4, 5]\ncountElements([1, 1, 2, 3, 4, 4,\
    \ 5]) == [1, 1, 2, 3, 4, 4, 5]\ncountElements([1, 1, 2, 3, 4, 4, 5]) == [1, 1,\
    \ 2, 3, 4, 4, 5]\ncountElements([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 3, 4, 4, 5]\n\
    countElements([1, 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 3, 4, 4, 5]\ncountElements([1,\
    \ 1, 2, 3, 4, 4, 5]) == [1, 1, 2, 3, 4, 4, 5]\ncountElements([1, 1, 2, 3, 4, 4,\
    \ 5]\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8i80mbsx.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8i80mbsx.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    for x in\
    \ nums\n        sum += x\n    end\n    return sum\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes an array of integers and returns the number of\
    \ elements that are less than the given value.\nusing Test\n\n@testset begin\n\
    \ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t\
    @test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10])\
    \ == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\t@test(candidate([0,\
    \ 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3, 10, -5]) == -6)\n\t\
    @test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10, 11,\
    \ 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\t\
    @test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphyqrhxih.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphyqrhxih.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum::Int64 = 0\n    \n\
    \    for num in nums\n        sum += num\n    end\n    \n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nProblem\
    \ 7\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1slj42xm.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1slj42xm.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    \n    for\
    \ n in nums\n        sum += n\n    end\n    \n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the number of times each unique element appears in an array.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpy_dl1fp4.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpy_dl1fp4.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    \n    for\
    \ x in nums\n        sum += x\n    end\n    \n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9sj42il0.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9sj42il0.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    \n    for\
    \ n in nums\n        sum += n\n    end\n    \n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the number of times each element appears in an array.\nusing Test\n\n\
    @testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3fas0ip_.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3fas0ip_.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    \n    for\
    \ n in nums\n        sum += n\n    end\n    \n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([-1, -2, -3])\n</cell>\n<text>\nProblem 4\nWrite a function that\
    \ returns the number of times a given element appears in an array.\nusing Test\n\
    \n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpg0pppztt.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpg0pppztt.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    \n    for\
    \ x in nums\n        sum += x\n    end\n    \n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsblss8ho.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpsblss8ho.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    \n    for\
    \ n in nums\n        sum += n\n    end\n    \n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the number of times a given value appears in an array. For example,\
    \ the number of times 3 appears in [3, 3, 3, 3] is 3.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4])\
    \ == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3,\
    \ 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3q2y4sni.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3q2y4sni.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    \n    for\
    \ num in nums\n        sum += num\n    end\n    \n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nProblem\
    \ 7\nWrite a function that returns the number of prime numbers less than or equal\
    \ to n.\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0imb34ht.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp0imb34ht.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    \n    for\
    \ num in nums\n        sum += num\n    end\n    \n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the number of elements in a vector that are\
    \ less than a given value.\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnwl0wttn.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpnwl0wttn.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    for x in\
    \ nums\n        sum += x\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of positive integers less than or equal to n.\nusing Test\n\n@testset begin\n\
    \ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t\
    @test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10])\
    \ == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\t@test(candidate([0,\
    \ 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3, 10, -5]) == -6)\n\t\
    @test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10, 11,\
    \ 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\t\
    @test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjrgciihu.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpjrgciihu.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    \n    for\
    \ n in nums\n        sum += n\n    end\n    \n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbrndp7gx.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbrndp7gx.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    \n    for\
    \ n in nums\n        sum += n\n    end\n    \n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([-1, -2, -3])\n</cell>\n<text>\nProblem 7\nGiven an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n\
    \    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3])\
    \ == -6\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2dp78ozz.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2dp78ozz.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    \n    for\
    \ x in nums\n        sum += x\n    end\n    \n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmsgpt84g.jl:23\n  Expression: candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n   Evaluated: 16 == 1\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpmsgpt84g.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmsgpt84g.jl:22\ntest set: Test Failed at /tmp/tmpmsgpt84g.jl:27\n\
    \  Expression: candidate([0, 10, 20, 1000000]) == 0\n   Evaluated: 1000030 ==\
    \ 0\nStacktrace:\n [1] top-level scope at /tmp/tmpmsgpt84g.jl:27\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmsgpt84g.jl:22\ntest set: Test Failed at /tmp/tmpmsgpt84g.jl:28\n\
    \  Expression: candidate([-1, -2, -3, 10, -5]) == -6\n   Evaluated: -1 == -6\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpmsgpt84g.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmsgpt84g.jl:22\ntest set: Test Failed at /tmp/tmpmsgpt84g.jl:29\n\
    \  Expression: candidate([100, -1, -2, -3, 10, -5]) == -6\n   Evaluated: 99 ==\
    \ -6\nStacktrace:\n [1] top-level scope at /tmp/tmpmsgpt84g.jl:29\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmsgpt84g.jl:22\ntest set: Test Failed at /tmp/tmpmsgpt84g.jl:30\n\
    \  Expression: candidate([10, 11, 13, 8, 3, 4]) == 3\n   Evaluated: 49 == 3\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpmsgpt84g.jl:30\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmsgpt84g.jl:22\ntest set: Test Failed at /tmp/tmpmsgpt84g.jl:31\n\
    \  Expression: candidate([100, -33, 32, -1, 0, -2]) == -33\n   Evaluated: 96 ==\
    \ -33\nStacktrace:\n [1] top-level scope at /tmp/tmpmsgpt84g.jl:31\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmsgpt84g.jl:22\ntest set: Test Failed at /tmp/tmpmsgpt84g.jl:34\n\
    \  Expression: candidate([1, -1]) == -1\n   Evaluated: 0 == -1\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmsgpt84g.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmsgpt84g.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     7     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmsgpt84g.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    \n    for\
    \ n in nums\n        sum += n\n    end\n    \n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([-1, -2, -3])\n</cell>\n<text>\nProblem 7\nWrite a function that\
    \ returns the number of times a given value appears in an array.\nusing Test\n\
    \n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnjihvl3a.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpnjihvl3a.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    for n in\
    \ nums\n        sum += n\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of positive integers less than or equal to n. \nExample\npositives(5) == 3\n\
    positives(10) == 5\npositives(0) == 0\npositives(-1) == 1\npositives(-2) == 0\n\
    positives(-3) == 0\npositives(-4) == 0\npositives(-5) == 0\npositives(-6) == 0\n\
    positives(-7) == 0\npositives(-8) == 0\npositives(-9) == 0\npositives(-10) ==\
    \ 0\npositives(-11) == 0\npositives(-12) == 0\npositives(-13) == 0\npositives(-14)\
    \ == 0\npositives(-15) == 0\npositives(-16) == 0\npositives(-17) == 0\npositives(-18)\
    \ == 0\npositives(-19) == 0\npositives(-20) == 0\npositives(-21) == 0\npositives(-22)\
    \ == 0\npositives(-23) == 0\npositives(-24) == 0\npositives(-25) == 0\npositives(-26)\
    \ == 0\npositives(-27) == 0\npositives(-28) == 0\npositives(-29) == 0\npositives(-30)\
    \ == 0\npositives(-31) == 0\npositives(-32) == 0\npositives(-33) == 0\npositives(-34)\
    \ == 0\npositives(-35) == 0\npositives(-36) == 0\npositives(-37) == 0\npositives(-38)\
    \ == 0\npositives(-39) == 0\npositives(-40) == 0\npositives(-41) == 0\npositives(-42)\
    \ == 0\npositives(-43) == 0\npositives(-44) == 0\npositives(-45) == 0\npositives(-46)\
    \ == 0\npositives(-47) == 0\npositives(-48) == 0\npositives(-49) == 0\npositives(-50)\
    \ == 0\npositives(-51) == 0\npositives(-52) == 0\npositives(-53) == 0\npositives(-54)\
    \ == 0\npositives(-55) == 0\npositives(-56) == 0\npositives(-57) == 0\npositives(-58)\
    \ == 0\npositives(-59) == 0\npositives(-60) == 0\npositives(-61) == 0\npositives(-62)\
    \ == 0\npositives(-63) == 0\npositives(-64) == 0\npositives(-65) == 0\npositives(-66)\
    \ == 0\npositives(-67) == 0\npositives(-68) == 0\npositives(-69) == 0\npositives(-70)\
    \ == 0\npositives(-71) == 0\npositives(-\nusing Test\n\n@testset begin\n\ncandidate\
    \ = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpc1gy6__i.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpc1gy6__i.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp86cjpwsk.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp86cjpwsk.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp86cjpwsk.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    \n    for\
    \ n in nums\n        sum += n\n    end\n    \n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the number of times a given value appears in an array.\nusing Test\n\
    \n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpz04jc4cf.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpz04jc4cf.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    \n    for\
    \ n in nums\n        sum += n\n    end\n    \n    return sum\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of times a given value appears\
    \ in an array.\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t\
    @test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmvxyfbjd.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmvxyfbjd.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    sum = 0\n    for n in nums\n\
    \        sum += n\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpu5eqr680.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpu5eqr680.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    sum = 0\n    for x in nums\n\
    \        sum += x\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of positive integers less than or equal to n.\nusing Test\n\n@testset begin\n\
    \ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t\
    @test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10])\
    \ == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\t@test(candidate([0,\
    \ 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3, 10, -5]) == -6)\n\t\
    @test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10, 11,\
    \ 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\t\
    @test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp33dxe1no.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp33dxe1no.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    sum = 0\n    for n in nums\n\
    \        sum += n\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of positive integers less than or equal to n.\nusing Test\n\n@testset begin\n\
    \ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t\
    @test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10])\
    \ == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\t@test(candidate([0,\
    \ 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3, 10, -5]) == -6)\n\t\
    @test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10, 11,\
    \ 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\t\
    @test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp63ud7mmx.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp63ud7mmx.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    sum = 0\n    for num in nums\n\
    \        sum += num\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpg4rjzo0t.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpg4rjzo0t.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    \n    for\
    \ n in nums\n        sum += n\n    end\n    \n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([-1, -2, -3])\n</cell>\n<text>\nProblem 7\nGiven an array of integers\
    \ nums, find the maximum sum of any non-empty sub-array\n    of nums.\n    Example\n\
    \    maxSubArraySum([2, 3, 4, 1, 2, 4]) == 6\n    maxSubArraySum([-1, -2, -3])\
    \ == -3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwrm2st2r.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpwrm2st2r.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    \n    for\
    \ x in nums\n        \n        if sum < x\n            \n            sum = x\n\
    \            \n        end\n    end\n    \n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([-1, -2, -3])\n</cell>\n<text>\nProblem 7: Find the minimum number\
    \ in a given array of integers\nGiven an array of integers nums, find the minimum\
    \ number in the array.\nExample\nmin([2, 3, 4, 1, 2, 4]) == 4\nmin([-1, -2, -3])\
    \ == -3\nmin([-100, -10, -1, 0, 1, 10, 100]) == -1\nmin([-100, -10, -1, 0, 1,\
    \ 10, 100]) == -1\nmin([-100, -10, -1, 0, 1, 10, 100]) == -1\nmin([-100, -10,\
    \ -1, 0, 1, 10, 100]) == -1\nmin([-100, -10, -1, 0, 1, 10, 100]) == -1\nmin([-100,\
    \ -10, -1, 0, 1, 10, 100]) == -1\nmin([-100, -10, -1, 0, 1, 10, 100]) == -1\n\
    min([-100, -10, -1, 0, 1, 10, 100]) == -1\nmin([-100, -10, -1, 0, 1, 10, 100])\
    \ == -1\nmin([-100, -10, -1, 0, 1, 10, 100]) == -1\nmin([-100, -10, -1, 0, 1,\
    \ 10, 100]) == -1\nmin([-100, -10, -1, 0, 1, 10, 100]) == -1\nmin([-100, -10,\
    \ -1, 0, 1, 10, 100]) == -1\nmin([-100, -10, -1, 0, 1, 10, 100]) == -1\nmin([-100,\
    \ -10, -1, 0, 1, 10, 100]) == -1\nmin([-100, -10, -1, 0, 1, 10, 100]) == -1\n\
    min([-100, -10, -1, 0, 1, 10, 100]) == -1\nmin([-100, -10, -1, 0, 1, 10, 100])\
    \ == -1\nmin([-100, -10, -1, 0, 1, 10, 100]) == -1\nmin([-100, -10, -1, 0, 1,\
    \ 10, 100]) == -1\nmin([-100, -10, -1, 0, 1, 10, 100]) == -1\nmin([-100, -10,\
    \ -1, 0, 1, 10, 100]) == -1\nmin([-100, -10, -1, 0, 1, 10, 100]) == -1\nmin([-100,\
    \ -10, -1, 0, 1, 10, 100]) == -1\nmin([-100, -10, -1, 0, 1, 10, 100]) == -1\n\
    min([-100, -10, -1, 0, 1, 10, 100]) == -1\nmin([-100, -10, -1, 0, 1, 10, 100])\
    \ == -1\nmin([-100, -\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpeeg5skf1.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpeeg5skf1.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    \n    for\
    \ num in nums\n        sum += num\n    end\n    \n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of times a given value appears\
    \ in an array.\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t\
    @test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpc39e4i_2.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpc39e4i_2.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    sum = 0\n    for x in nums\n\
    \        sum += x\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of times a given value appears in an array.\nusing Test\n\n@testset begin\n\n\
    candidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpl8t0m2y9.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpl8t0m2y9.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    \n    for\
    \ n in nums\n        sum += n\n    end\n    \n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the number of times a given number appears in an array.\nusing Test\n\
    \n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpubeilp40.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpubeilp40.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    sum::Int64 = 0\n    for i in\
    \ nums\n        sum += i\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of times each unique element appears in an array. For example, if the input\
    \ array is [1, 1, 2, 3], the function should return [1, 1, 2, 3] as its output.\n\
    using Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkbkvvkfh.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpkbkvvkfh.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    sum = 0\n    for n in nums\n\
    \        sum += n\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t\
    @test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10])\
    \ == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\t@test(candidate([0,\
    \ 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3, 10, -5]) == -6)\n\t\
    @test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10, 11,\
    \ 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\t\
    @test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp81wg8pmi.jl:20\n  Expression: candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n   Evaluated: 16 == 1\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmp81wg8pmi.jl:20\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp81wg8pmi.jl:19\ntest set: Test Failed at /tmp/tmp81wg8pmi.jl:24\n\
    \  Expression: candidate([0, 10, 20, 1000000]) == 0\n   Evaluated: 1000030 ==\
    \ 0\nStacktrace:\n [1] top-level scope at /tmp/tmp81wg8pmi.jl:24\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp81wg8pmi.jl:19\ntest set: Test Failed at /tmp/tmp81wg8pmi.jl:25\n\
    \  Expression: candidate([-1, -2, -3, 10, -5]) == -6\n   Evaluated: -1 == -6\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp81wg8pmi.jl:25\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp81wg8pmi.jl:19\ntest set: Test Failed at /tmp/tmp81wg8pmi.jl:26\n\
    \  Expression: candidate([100, -1, -2, -3, 10, -5]) == -6\n   Evaluated: 99 ==\
    \ -6\nStacktrace:\n [1] top-level scope at /tmp/tmp81wg8pmi.jl:26\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp81wg8pmi.jl:19\ntest set: Test Failed at /tmp/tmp81wg8pmi.jl:27\n\
    \  Expression: candidate([10, 11, 13, 8, 3, 4]) == 3\n   Evaluated: 49 == 3\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp81wg8pmi.jl:27\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp81wg8pmi.jl:19\ntest set: Test Failed at /tmp/tmp81wg8pmi.jl:28\n\
    \  Expression: candidate([100, -33, 32, -1, 0, -2]) == -33\n   Evaluated: 96 ==\
    \ -33\nStacktrace:\n [1] top-level scope at /tmp/tmp81wg8pmi.jl:28\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp81wg8pmi.jl:19\ntest set: Test Failed at /tmp/tmp81wg8pmi.jl:31\n\
    \  Expression: candidate([1, -1]) == -1\n   Evaluated: 0 == -1\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp81wg8pmi.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp81wg8pmi.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     7     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp81wg8pmi.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    for x in\
    \ nums\n        sum += x\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4])\
    \ == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3,\
    \ 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfbi0cxtu.jl:21\n  Expression: candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n   Evaluated: 16 == 1\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpfbi0cxtu.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfbi0cxtu.jl:20\ntest set: Test Failed at /tmp/tmpfbi0cxtu.jl:25\n\
    \  Expression: candidate([0, 10, 20, 1000000]) == 0\n   Evaluated: 1000030 ==\
    \ 0\nStacktrace:\n [1] top-level scope at /tmp/tmpfbi0cxtu.jl:25\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfbi0cxtu.jl:20\ntest set: Test Failed at /tmp/tmpfbi0cxtu.jl:26\n\
    \  Expression: candidate([-1, -2, -3, 10, -5]) == -6\n   Evaluated: -1 == -6\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpfbi0cxtu.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfbi0cxtu.jl:20\ntest set: Test Failed at /tmp/tmpfbi0cxtu.jl:27\n\
    \  Expression: candidate([100, -1, -2, -3, 10, -5]) == -6\n   Evaluated: 99 ==\
    \ -6\nStacktrace:\n [1] top-level scope at /tmp/tmpfbi0cxtu.jl:27\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfbi0cxtu.jl:20\ntest set: Test Failed at /tmp/tmpfbi0cxtu.jl:28\n\
    \  Expression: candidate([10, 11, 13, 8, 3, 4]) == 3\n   Evaluated: 49 == 3\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpfbi0cxtu.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfbi0cxtu.jl:20\ntest set: Test Failed at /tmp/tmpfbi0cxtu.jl:29\n\
    \  Expression: candidate([100, -33, 32, -1, 0, -2]) == -33\n   Evaluated: 96 ==\
    \ -33\nStacktrace:\n [1] top-level scope at /tmp/tmpfbi0cxtu.jl:29\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfbi0cxtu.jl:20\ntest set: Test Failed at /tmp/tmpfbi0cxtu.jl:32\n\
    \  Expression: candidate([1, -1]) == -1\n   Evaluated: 0 == -1\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfbi0cxtu.jl:32\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfbi0cxtu.jl:20\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     7     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfbi0cxtu.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    sum = 0\n    for n in nums\n\
    \        sum += n\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum\
    \ of the squares of the numbers in an array.\nusing Test\n\n@testset begin\n\n\
    candidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcnbtv_wd.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpcnbtv_wd.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    sum = 0\n    for n in nums\n\
    \        sum += n\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of times a given number appears in an\
    \ array.\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxexskv5p.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxexskv5p.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    sum = 0\n    for x in nums\n\
    \        sum += x\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3m0tr2w4.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3m0tr2w4.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    sum::Int64 = 0\n    for n in\
    \ nums\n        sum += n\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4])\
    \ == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3,\
    \ 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxzznluy5.jl:20\n  Expression: candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n   Evaluated: 16 == 1\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpxzznluy5.jl:20\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxzznluy5.jl:19\ntest set: Test Failed at /tmp/tmpxzznluy5.jl:24\n\
    \  Expression: candidate([0, 10, 20, 1000000]) == 0\n   Evaluated: 1000030 ==\
    \ 0\nStacktrace:\n [1] top-level scope at /tmp/tmpxzznluy5.jl:24\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxzznluy5.jl:19\ntest set: Test Failed at /tmp/tmpxzznluy5.jl:25\n\
    \  Expression: candidate([-1, -2, -3, 10, -5]) == -6\n   Evaluated: -1 == -6\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpxzznluy5.jl:25\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxzznluy5.jl:19\ntest set: Test Failed at /tmp/tmpxzznluy5.jl:26\n\
    \  Expression: candidate([100, -1, -2, -3, 10, -5]) == -6\n   Evaluated: 99 ==\
    \ -6\nStacktrace:\n [1] top-level scope at /tmp/tmpxzznluy5.jl:26\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxzznluy5.jl:19\ntest set: Test Failed at /tmp/tmpxzznluy5.jl:27\n\
    \  Expression: candidate([10, 11, 13, 8, 3, 4]) == 3\n   Evaluated: 49 == 3\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpxzznluy5.jl:27\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxzznluy5.jl:19\ntest set: Test Failed at /tmp/tmpxzznluy5.jl:28\n\
    \  Expression: candidate([100, -33, 32, -1, 0, -2]) == -33\n   Evaluated: 96 ==\
    \ -33\nStacktrace:\n [1] top-level scope at /tmp/tmpxzznluy5.jl:28\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxzznluy5.jl:19\ntest set: Test Failed at /tmp/tmpxzznluy5.jl:31\n\
    \  Expression: candidate([1, -1]) == -1\n   Evaluated: 0 == -1\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxzznluy5.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxzznluy5.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     7     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxzznluy5.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    for x in\
    \ nums\n        sum += x\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nExercise 3\nWrite a function that returns the number\
    \ of times a given element appears in an array.\nusing Test\n\n@testset begin\n\
    \ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t\
    @test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10])\
    \ == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\t@test(candidate([0,\
    \ 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3, 10, -5]) == -6)\n\t\
    @test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10, 11,\
    \ 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\t\
    @test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpz6m57xv_.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpz6m57xv_.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    \n    for\
    \ n in nums\n        sum += n\n    end\n    \n    return sum\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes an array of integers and returns the sum\
    \ of the squares of the numbers.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_80a3yt2.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_80a3yt2.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    \n    for\
    \ x in nums\n        sum += x\n    end\n    \n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the number of times each element appears in an array. For example, if\
    \ the input array is [1, 1, 2, 3], the function should return [1, 1, 2, 3] as\
    \ its output. Your function should work for any type of array (including vectors\
    \ and matrices).\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpw8jwu39h.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpw8jwu39h.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    sum = 0\n    for x in nums\n\
    \        sum += x\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.0>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.0>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of positive integers less than or equal to n.\nusing Test\n\n@testset begin\n\
    \ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t\
    @test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10])\
    \ == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\t@test(candidate([0,\
    \ 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3, 10, -5]) == -6)\n\t\
    @test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10, 11,\
    \ 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\t\
    @test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwzb1iqgr.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpwzb1iqgr.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    sum = 0\n    for x in nums\n\
    \        sum += x\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.0>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.0>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nProblem 7\nWrite a function that returns the number\
    \ of times the number 'x' appears in the array 'nums'.\nExample\ncountNums([1,\
    \ 2, 3, 1, 2, 3]) == 3\ncountNums([1, 2, 3, 1, 2, 3, 1]) == 1\ncountNums([1, 4,\
    \ 3, 1, 2, 3, 1]) == 2\ncountNums([1, 4, 3, 1, 2, 3, 1]) == 3\ncountNums([1, 4,\
    \ 3, 1, 2, 3, 1]) == 3\ncountNums([1, 4, 3, 1, 2, 3, 1]) == 3\ncountNums([1, 4,\
    \ 3, 1, 2, 3, 1]) == 3\ncountNums([1, 4, 3, 1, 2, 3, 1]) == 3\ncountNums([1, 4,\
    \ 3, 1, 2, 3, 1]) == 3\ncountNums([1, 4, 3, 1, 2, 3, 1]) == 3\ncountNums([1, 4,\
    \ 3, 1, 2, 3, 1]) == 3\ncountNums([1, 4, 3, 1, 2, 3, 1]) == 3\ncountNums([1, 4,\
    \ 3, 1, 2, 3, 1]) == 3\ncountNums([1, 4, 3, 1, 2, 3, 1]) == 3\ncountNums([1, 4,\
    \ 3, 1, 2, 3, 1]) == 3\ncountNums([1, 4, 3, 1, 2, 3, 1]) == 3\ncountNums([1, 4,\
    \ 3, 1, 2, 3, 1]) == 3\ncountNums([1, 4, 3, 1, 2, 3, 1]) == 3\ncountNums([1, 4,\
    \ 3, 1, 2, 3, 1]) == 3\ncountNums([1, 4, 3, 1, 2, 3, 1]) == 3\ncountNums([1, 4,\
    \ 3, 1, 2, 3, 1]) == 3\ncountNums([1, 4, 3, 1, 2, 3, 1]) == 3\ncountNums([1, 4,\
    \ 3, 1, 2, 3, 1]) == 3\ncountNums([1, 4, 3, 1, 2, 3, 1]) == 3\ncountNums([1, 4,\
    \ 3, 1, 2, 3, 1]) == 3\ncountNums([1, 4, 3, 1, 2, 3, 1]) == 3\ncountNums([1, 4,\
    \ 3, 1, 2, 3, 1]) == 3\ncountNums([1, 4, 3, 1, 2, 3, 1]) == 3\ncountNums([1, 4,\
    \ 3, 1, 2, 3, 1]) == 3\ncountNums([1, 4, 3, 1, 2, 3, 1]) == 3\ncountNums([1, 4,\
    \ 3, 1, 2, 3, 1]) == 3\ncountNums([1, 4, 3, 1, 2, 3, 1]) == 3\ncountNums([1, 4,\
    \ 3, 1, 2, 3, 1]) == 3\ncountNums([1, 4, 3, 1, 2, 3, 1]) == 3\ncountNums([1, 4,\
    \ 3, 1, 2, 3, 1]) == 3\ncountNums([1, 4, 3, 1, 2, 3, \nusing Test\n\n@testset\
    \ begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4])\
    \ == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3,\
    \ 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpobx4hets.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpobx4hets.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    for x in\
    \ nums\n        sum += x\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of times each element appears in an array. For example, given [1, 1, 2, 2],\
    \ your function should return [1, 1, 2, 2]. Your function should return an empty\
    \ array if there are no elements in the array.\nusing Test\n\n@testset begin\n\
    \ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t\
    @test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10])\
    \ == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\t@test(candidate([0,\
    \ 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3, 10, -5]) == -6)\n\t\
    @test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10, 11,\
    \ 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\t\
    @test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp13r8rlbp.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp13r8rlbp.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    \n    for\
    \ n in nums\n        sum += n\n    end\n    \n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<text>\nProblem\
    \ 7\nWrite a function that returns the number of times a given element appears\
    \ in an array.\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t\
    @test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp00gzkvmg.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp00gzkvmg.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    \n    for\
    \ num in nums\n        sum += num\n    end\n    \n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpax9wa8xj.jl:23\n  Expression: candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n   Evaluated: 16 == 1\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpax9wa8xj.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpax9wa8xj.jl:22\ntest set: Test Failed at /tmp/tmpax9wa8xj.jl:27\n\
    \  Expression: candidate([0, 10, 20, 1000000]) == 0\n   Evaluated: 1000030 ==\
    \ 0\nStacktrace:\n [1] top-level scope at /tmp/tmpax9wa8xj.jl:27\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpax9wa8xj.jl:22\ntest set: Test Failed at /tmp/tmpax9wa8xj.jl:28\n\
    \  Expression: candidate([-1, -2, -3, 10, -5]) == -6\n   Evaluated: -1 == -6\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpax9wa8xj.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpax9wa8xj.jl:22\ntest set: Test Failed at /tmp/tmpax9wa8xj.jl:29\n\
    \  Expression: candidate([100, -1, -2, -3, 10, -5]) == -6\n   Evaluated: 99 ==\
    \ -6\nStacktrace:\n [1] top-level scope at /tmp/tmpax9wa8xj.jl:29\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpax9wa8xj.jl:22\ntest set: Test Failed at /tmp/tmpax9wa8xj.jl:30\n\
    \  Expression: candidate([10, 11, 13, 8, 3, 4]) == 3\n   Evaluated: 49 == 3\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpax9wa8xj.jl:30\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpax9wa8xj.jl:22\ntest set: Test Failed at /tmp/tmpax9wa8xj.jl:31\n\
    \  Expression: candidate([100, -33, 32, -1, 0, -2]) == -33\n   Evaluated: 96 ==\
    \ -33\nStacktrace:\n [1] top-level scope at /tmp/tmpax9wa8xj.jl:31\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpax9wa8xj.jl:22\ntest set: Test Failed at /tmp/tmpax9wa8xj.jl:34\n\
    \  Expression: candidate([1, -1]) == -1\n   Evaluated: 0 == -1\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpax9wa8xj.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpax9wa8xj.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     7     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpax9wa8xj.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    \n    for\
    \ num in nums\n        sum += num\n    end\n    \n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of positive integers less than or\
    \ equal to n. \nExample\npositiveCount(5) == 3\npositiveCount(10) == 4\npositiveCount(0)\
    \ == 0\npositiveCount(-1) == 0\npositiveCount(-10) == 0\npositiveCount(-101) ==\
    \ 0\npositiveCount(-102) == 0\npositiveCount(-103) == 0\npositiveCount(-104) ==\
    \ 0\npositiveCount(-105) == 0\npositiveCount(-106) == 0\npositiveCount(-107) ==\
    \ 0\npositiveCount(-108) == 0\npositiveCount(-109) == 0\npositiveCount(-110) ==\
    \ 0\npositiveCount(-111) == 0\npositiveCount(-112) == 0\npositiveCount(-113) ==\
    \ 0\npositiveCount(-114) == 0\npositiveCount(-115) == 0\npositiveCount(-116) ==\
    \ 0\npositiveCount(-117) == 0\npositiveCount(-118) == 0\npositiveCount(-119) ==\
    \ 0\npositiveCount(-120) == 0\npositiveCount(-121) == 0\npositiveCount(-122) ==\
    \ 0\npositiveCount(-123) == 0\npositiveCount(-124) == 0\npositiveCount(-125) ==\
    \ 0\npositiveCount(-126) == 0\npositiveCount(-127) == 0\npositiveCount(-128) ==\
    \ 0\npositiveCount(-129) == 0\npositiveCount(-130) == 0\npositiveCount(-131) ==\
    \ 0\npositiveCount(-132) == 0\npositiveCount(-133) == 0\npositiveCount(-134) ==\
    \ 0\npositiveCount(-135) == 0\npositiveCount(-136) == 0\npositiveCount(-137) ==\
    \ 0\npositiveCount(-138) == 0\npositiveCount(-139) == 0\npositiveCount(-140) ==\
    \ 0\npositiveCount(-141) == 0\npositiveCount(-142) == 0\npositiveCount(-143) ==\
    \ 0\npositiveCount(-144) == 0\npositiveCount(-145) == 0\npositiveCount(-146) ==\
    \ 0\npositiveCount(-147) == 0\npositiveCount(-148) == 0\npositiveCount(-149) ==\
    \ 0\npositiveCount(-150) == 0\npositiveCount(-151) == 0\npositiveCount(-152) ==\
    \ 0\npositiveCount(-153) == 0\npositiveCount(-154) == 0\npositiveCount(-155) ==\
    \ 0\npositiveCount(-156) == 0\npositiveCount(-157) == 0\npositiveCount(-158) ==\
    \ 0\npositiveCount(-159) == 0\npositiveCount(-160) == 0\npositiveCount(-161) ==\
    \ 0\npositiveCount(-162) == 0\npositiveCount(-163) == 0\npositiveCount(-164) ==\
    \ 0\npositiveCount(-165) == 0\npositiveCount(\nusing Test\n\n@testset begin\n\n\
    candidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsze9fg9h.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpsze9fg9h.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    sum::Int64 = 0\n    for i in\
    \ nums\n        sum += i\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nProblem 7\nusing Test\n\n@testset begin\n\ncandidate\
    \ = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_r64aom9.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_r64aom9.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    \n    for\
    \ n in nums\n        sum += n\n    end\n    \n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6r0vtiql.jl:23\n  Expression: candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n   Evaluated: 16 == 1\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmp6r0vtiql.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6r0vtiql.jl:22\ntest set: Test Failed at /tmp/tmp6r0vtiql.jl:27\n\
    \  Expression: candidate([0, 10, 20, 1000000]) == 0\n   Evaluated: 1000030 ==\
    \ 0\nStacktrace:\n [1] top-level scope at /tmp/tmp6r0vtiql.jl:27\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6r0vtiql.jl:22\ntest set: Test Failed at /tmp/tmp6r0vtiql.jl:28\n\
    \  Expression: candidate([-1, -2, -3, 10, -5]) == -6\n   Evaluated: -1 == -6\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp6r0vtiql.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6r0vtiql.jl:22\ntest set: Test Failed at /tmp/tmp6r0vtiql.jl:29\n\
    \  Expression: candidate([100, -1, -2, -3, 10, -5]) == -6\n   Evaluated: 99 ==\
    \ -6\nStacktrace:\n [1] top-level scope at /tmp/tmp6r0vtiql.jl:29\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6r0vtiql.jl:22\ntest set: Test Failed at /tmp/tmp6r0vtiql.jl:30\n\
    \  Expression: candidate([10, 11, 13, 8, 3, 4]) == 3\n   Evaluated: 49 == 3\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp6r0vtiql.jl:30\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6r0vtiql.jl:22\ntest set: Test Failed at /tmp/tmp6r0vtiql.jl:31\n\
    \  Expression: candidate([100, -33, 32, -1, 0, -2]) == -33\n   Evaluated: 96 ==\
    \ -33\nStacktrace:\n [1] top-level scope at /tmp/tmp6r0vtiql.jl:31\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6r0vtiql.jl:22\ntest set: Test Failed at /tmp/tmp6r0vtiql.jl:34\n\
    \  Expression: candidate([1, -1]) == -1\n   Evaluated: 0 == -1\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6r0vtiql.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6r0vtiql.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     7     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6r0vtiql.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    sum = 0\n    for n in nums\n\
    \        sum += n\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t\
    @test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10])\
    \ == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\t@test(candidate([0,\
    \ 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3, 10, -5]) == -6)\n\t\
    @test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10, 11,\
    \ 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\t\
    @test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp09a1w06x.jl:20\n  Expression: candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n   Evaluated: 16 == 1\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmp09a1w06x.jl:20\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp09a1w06x.jl:19\ntest set: Test Failed at /tmp/tmp09a1w06x.jl:24\n\
    \  Expression: candidate([0, 10, 20, 1000000]) == 0\n   Evaluated: 1000030 ==\
    \ 0\nStacktrace:\n [1] top-level scope at /tmp/tmp09a1w06x.jl:24\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp09a1w06x.jl:19\ntest set: Test Failed at /tmp/tmp09a1w06x.jl:25\n\
    \  Expression: candidate([-1, -2, -3, 10, -5]) == -6\n   Evaluated: -1 == -6\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp09a1w06x.jl:25\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp09a1w06x.jl:19\ntest set: Test Failed at /tmp/tmp09a1w06x.jl:26\n\
    \  Expression: candidate([100, -1, -2, -3, 10, -5]) == -6\n   Evaluated: 99 ==\
    \ -6\nStacktrace:\n [1] top-level scope at /tmp/tmp09a1w06x.jl:26\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp09a1w06x.jl:19\ntest set: Test Failed at /tmp/tmp09a1w06x.jl:27\n\
    \  Expression: candidate([10, 11, 13, 8, 3, 4]) == 3\n   Evaluated: 49 == 3\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp09a1w06x.jl:27\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp09a1w06x.jl:19\ntest set: Test Failed at /tmp/tmp09a1w06x.jl:28\n\
    \  Expression: candidate([100, -33, 32, -1, 0, -2]) == -33\n   Evaluated: 96 ==\
    \ -33\nStacktrace:\n [1] top-level scope at /tmp/tmp09a1w06x.jl:28\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp09a1w06x.jl:19\ntest set: Test Failed at /tmp/tmp09a1w06x.jl:31\n\
    \  Expression: candidate([1, -1]) == -1\n   Evaluated: 0 == -1\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp09a1w06x.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp09a1w06x.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     7     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp09a1w06x.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    \n    for\
    \ n in nums\n        sum += n\n    end\n    \n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpz3_mb7a7.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpz3_mb7a7.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    \n    for\
    \ n in nums\n        sum += n\n    end\n    \n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the number of positive integers less than or equal to n.\nusing Test\n\
    \n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpr0qxr1ww.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpr0qxr1ww.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    \n    for\
    \ num in nums\n        sum += num\n    end\n    \n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nProblem\
    \ 4\nGiven an array of integers nums, find the minimum sum of any non-empty sub-array\n\
    \    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1,\
    \ -2, -3]) == -6\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdiy_21a4.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdiy_21a4.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    \n    for\
    \ num in nums\n        sum += num\n    end\n    \n    return sum\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the minimum sum of any non-empty\
    \ sub-array of nums.\nExample\nminSubArraySum([2, 3, 4, 1, 2, 4]) == 1\nminSubArraySum([-1,\
    \ -2, -3]) == -6\nHint: Use a for loop to iterate through the array.\nusing Test\n\
    \n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsxagjrfl.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpsxagjrfl.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    for n in\
    \ nums\n        sum += n\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpck52nx55.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpck52nx55.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    \n    for\
    \ n in nums\n        sum += n\n    end\n    \n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the number of times a given value appears in an array.\nusing Test\n\
    \n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpt__rizvf.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpt__rizvf.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    \n    for\
    \ n in nums\n        sum += n\n    end\n    \n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmps36ofc21.jl:23\n  Expression: candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n   Evaluated: 16 == 1\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmps36ofc21.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmps36ofc21.jl:22\ntest set: Test Failed at /tmp/tmps36ofc21.jl:27\n\
    \  Expression: candidate([0, 10, 20, 1000000]) == 0\n   Evaluated: 1000030 ==\
    \ 0\nStacktrace:\n [1] top-level scope at /tmp/tmps36ofc21.jl:27\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmps36ofc21.jl:22\ntest set: Test Failed at /tmp/tmps36ofc21.jl:28\n\
    \  Expression: candidate([-1, -2, -3, 10, -5]) == -6\n   Evaluated: -1 == -6\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmps36ofc21.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmps36ofc21.jl:22\ntest set: Test Failed at /tmp/tmps36ofc21.jl:29\n\
    \  Expression: candidate([100, -1, -2, -3, 10, -5]) == -6\n   Evaluated: 99 ==\
    \ -6\nStacktrace:\n [1] top-level scope at /tmp/tmps36ofc21.jl:29\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmps36ofc21.jl:22\ntest set: Test Failed at /tmp/tmps36ofc21.jl:30\n\
    \  Expression: candidate([10, 11, 13, 8, 3, 4]) == 3\n   Evaluated: 49 == 3\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmps36ofc21.jl:30\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmps36ofc21.jl:22\ntest set: Test Failed at /tmp/tmps36ofc21.jl:31\n\
    \  Expression: candidate([100, -33, 32, -1, 0, -2]) == -33\n   Evaluated: 96 ==\
    \ -33\nStacktrace:\n [1] top-level scope at /tmp/tmps36ofc21.jl:31\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmps36ofc21.jl:22\ntest set: Test Failed at /tmp/tmps36ofc21.jl:34\n\
    \  Expression: candidate([1, -1]) == -1\n   Evaluated: 0 == -1\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmps36ofc21.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmps36ofc21.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     7     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps36ofc21.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    \n    for\
    \ x in nums\n        sum += x\n    end\n    \n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<text>\nProblem\
    \ 7\nWrite a Julia function minSubArraySum(nums::Vector{Int64})::Int64 which returns\
    \ the minimum sum of any non-empty sub-array of nums.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4])\
    \ == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3,\
    \ 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpklau_bj2.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpklau_bj2.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    \n    for\
    \ n in nums\n        sum += n\n    end\n    \n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([-1, -2, -3])\n</cell>\n<text>\nProblem 7\nusing Test\n\n@testset\
    \ begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4])\
    \ == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3,\
    \ 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpr_9xd56v.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpr_9xd56v.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    sum = 0\n    for i in nums\n\
    \        sum += i\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the number of positive integers less than or equal\
    \ to a given integer n.\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp55szpw1c.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp55szpw1c.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    sum = 0\n    for n in nums\n\
    \        sum += n\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.0>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.0>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of times the number n appears in the array nums.\nusing Test\n\n@testset begin\n\
    \ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t\
    @test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10])\
    \ == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\t@test(candidate([0,\
    \ 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3, 10, -5]) == -6)\n\t\
    @test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10, 11,\
    \ 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\t\
    @test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5wpkqezb.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5wpkqezb.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    for n in\
    \ nums\n        sum += n\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nProblem 4\nGiven an array of integers nums, find\
    \ the maximum sum of any non-empty sub-array\n    of nums.\n    Example\n    maxSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 6\n    maxSubArraySum([-1, -2, -3]) == -3\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5v_w8bu0.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5v_w8bu0.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    \n    for\
    \ x in nums\n        sum += x\n    end\n    \n    return sum\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of positive integers less\
    \ than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpd1q0uvfb.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpd1q0uvfb.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    \n    for\
    \ n in nums\n        sum += n\n    end\n    \n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<text>\nProblem\
    \ 7\nWrite a function that returns the number of times a given element appears\
    \ in an array.\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t\
    @test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8rxplypk.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8rxplypk.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    sum = 0\n    for x in nums\n\
    \        sum += x\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t\
    @test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10])\
    \ == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\t@test(candidate([0,\
    \ 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3, 10, -5]) == -6)\n\t\
    @test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10, 11,\
    \ 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\t\
    @test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8qy9y2zk.jl:20\n  Expression: candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n   Evaluated: 16 == 1\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmp8qy9y2zk.jl:20\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8qy9y2zk.jl:19\ntest set: Test Failed at /tmp/tmp8qy9y2zk.jl:24\n\
    \  Expression: candidate([0, 10, 20, 1000000]) == 0\n   Evaluated: 1000030 ==\
    \ 0\nStacktrace:\n [1] top-level scope at /tmp/tmp8qy9y2zk.jl:24\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8qy9y2zk.jl:19\ntest set: Test Failed at /tmp/tmp8qy9y2zk.jl:25\n\
    \  Expression: candidate([-1, -2, -3, 10, -5]) == -6\n   Evaluated: -1 == -6\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp8qy9y2zk.jl:25\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8qy9y2zk.jl:19\ntest set: Test Failed at /tmp/tmp8qy9y2zk.jl:26\n\
    \  Expression: candidate([100, -1, -2, -3, 10, -5]) == -6\n   Evaluated: 99 ==\
    \ -6\nStacktrace:\n [1] top-level scope at /tmp/tmp8qy9y2zk.jl:26\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8qy9y2zk.jl:19\ntest set: Test Failed at /tmp/tmp8qy9y2zk.jl:27\n\
    \  Expression: candidate([10, 11, 13, 8, 3, 4]) == 3\n   Evaluated: 49 == 3\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp8qy9y2zk.jl:27\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8qy9y2zk.jl:19\ntest set: Test Failed at /tmp/tmp8qy9y2zk.jl:28\n\
    \  Expression: candidate([100, -33, 32, -1, 0, -2]) == -33\n   Evaluated: 96 ==\
    \ -33\nStacktrace:\n [1] top-level scope at /tmp/tmp8qy9y2zk.jl:28\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8qy9y2zk.jl:19\ntest set: Test Failed at /tmp/tmp8qy9y2zk.jl:31\n\
    \  Expression: candidate([1, -1]) == -1\n   Evaluated: 0 == -1\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8qy9y2zk.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8qy9y2zk.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     7     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8qy9y2zk.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    sum = 0\n    for n in nums\n\
    \        sum += n\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpyfpt7w92.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpyfpt7w92.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    sum = 0\n    for x in nums\n\
    \        sum += x\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t\
    @test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10])\
    \ == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\t@test(candidate([0,\
    \ 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3, 10, -5]) == -6)\n\t\
    @test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10, 11,\
    \ 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\t\
    @test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp70tlrxtb.jl:20\n  Expression: candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n   Evaluated: 16 == 1\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmp70tlrxtb.jl:20\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp70tlrxtb.jl:19\ntest set: Test Failed at /tmp/tmp70tlrxtb.jl:24\n\
    \  Expression: candidate([0, 10, 20, 1000000]) == 0\n   Evaluated: 1000030 ==\
    \ 0\nStacktrace:\n [1] top-level scope at /tmp/tmp70tlrxtb.jl:24\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp70tlrxtb.jl:19\ntest set: Test Failed at /tmp/tmp70tlrxtb.jl:25\n\
    \  Expression: candidate([-1, -2, -3, 10, -5]) == -6\n   Evaluated: -1 == -6\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp70tlrxtb.jl:25\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp70tlrxtb.jl:19\ntest set: Test Failed at /tmp/tmp70tlrxtb.jl:26\n\
    \  Expression: candidate([100, -1, -2, -3, 10, -5]) == -6\n   Evaluated: 99 ==\
    \ -6\nStacktrace:\n [1] top-level scope at /tmp/tmp70tlrxtb.jl:26\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp70tlrxtb.jl:19\ntest set: Test Failed at /tmp/tmp70tlrxtb.jl:27\n\
    \  Expression: candidate([10, 11, 13, 8, 3, 4]) == 3\n   Evaluated: 49 == 3\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp70tlrxtb.jl:27\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp70tlrxtb.jl:19\ntest set: Test Failed at /tmp/tmp70tlrxtb.jl:28\n\
    \  Expression: candidate([100, -33, 32, -1, 0, -2]) == -33\n   Evaluated: 96 ==\
    \ -33\nStacktrace:\n [1] top-level scope at /tmp/tmp70tlrxtb.jl:28\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp70tlrxtb.jl:19\ntest set: Test Failed at /tmp/tmp70tlrxtb.jl:31\n\
    \  Expression: candidate([1, -1]) == -1\n   Evaluated: 0 == -1\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp70tlrxtb.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp70tlrxtb.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     7     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp70tlrxtb.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    \n    for\
    \ num in nums\n        sum += num\n    end\n    \n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the minimum number in an array of integers\
    \ nums.\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9sz1w5ja.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9sz1w5ja.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    sum = 0\n    for num in nums\n\
    \        sum += num\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpuaf5k5cp.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpuaf5k5cp.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    sum = 0\n    \n    for num\
    \ in nums\n        sum += num\n    end\n    \n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([-1, -2, -3])\n</cell>\n<text>\nProblem 7\nWrite a function that\
    \ returns the number of times the given element appears in the given array.\n\
    using Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkok__utr.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpkok__utr.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    \n    for\
    \ n in nums\n        sum += n\n    end\n    \n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([-1, -2, -3])\n</cell>\n<text>\nProblem 7\nGiven an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n\
    \    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3])\
    \ == -6\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpw6sea9se.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpw6sea9se.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    for x in\
    \ nums\n        sum += x\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nExercise 3\nWrite a function that returns the number\
    \ of times a given element appears in an array.\nusing Test\n\n@testset begin\n\
    \ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t\
    @test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10])\
    \ == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\t@test(candidate([0,\
    \ 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3, 10, -5]) == -6)\n\t\
    @test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10, 11,\
    \ 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\t\
    @test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9v5d_8nz.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9v5d_8nz.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    \n    for\
    \ n in nums\n        sum += n\n    end\n    \n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5qr95obr.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5qr95obr.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    sum = 0\n    for x in nums\n\
    \        sum += x\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6m2_dwqw.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6m2_dwqw.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    \n    for\
    \ num in nums\n        \n        if num > 0\n            \n            sum +=\
    \ num\n            \n        else\n            \n            sum -= num\n    \
    \        \n        end\n        \n    end\n    \n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nProblem\
    \ 7\nWrite a function that returns the number of positive integers less than or\
    \ equal to n that are divisible by k.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpf5lkwunm.jl:28\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpf5lkwunm.jl:28\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    \n    for\
    \ n in nums\n        sum += n\n    end\n    \n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the sum of the squares of the numbers in nums.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4])\
    \ == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3,\
    \ 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp55m1xncc.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp55m1xncc.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    \n    for\
    \ n in nums\n        sum += n\n    end\n    \n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqlbsp7rc.jl:23\n  Expression: candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n   Evaluated: 16 == 1\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpqlbsp7rc.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpqlbsp7rc.jl:22\ntest set: Test Failed at /tmp/tmpqlbsp7rc.jl:27\n\
    \  Expression: candidate([0, 10, 20, 1000000]) == 0\n   Evaluated: 1000030 ==\
    \ 0\nStacktrace:\n [1] top-level scope at /tmp/tmpqlbsp7rc.jl:27\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpqlbsp7rc.jl:22\ntest set: Test Failed at /tmp/tmpqlbsp7rc.jl:28\n\
    \  Expression: candidate([-1, -2, -3, 10, -5]) == -6\n   Evaluated: -1 == -6\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpqlbsp7rc.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpqlbsp7rc.jl:22\ntest set: Test Failed at /tmp/tmpqlbsp7rc.jl:29\n\
    \  Expression: candidate([100, -1, -2, -3, 10, -5]) == -6\n   Evaluated: 99 ==\
    \ -6\nStacktrace:\n [1] top-level scope at /tmp/tmpqlbsp7rc.jl:29\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpqlbsp7rc.jl:22\ntest set: Test Failed at /tmp/tmpqlbsp7rc.jl:30\n\
    \  Expression: candidate([10, 11, 13, 8, 3, 4]) == 3\n   Evaluated: 49 == 3\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpqlbsp7rc.jl:30\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpqlbsp7rc.jl:22\ntest set: Test Failed at /tmp/tmpqlbsp7rc.jl:31\n\
    \  Expression: candidate([100, -33, 32, -1, 0, -2]) == -33\n   Evaluated: 96 ==\
    \ -33\nStacktrace:\n [1] top-level scope at /tmp/tmpqlbsp7rc.jl:31\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpqlbsp7rc.jl:22\ntest set: Test Failed at /tmp/tmpqlbsp7rc.jl:34\n\
    \  Expression: candidate([1, -1]) == -1\n   Evaluated: 0 == -1\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqlbsp7rc.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpqlbsp7rc.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     7     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqlbsp7rc.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    \n    for\
    \ n in nums\n        sum += n\n    end\n    \n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([-1, -2, -3])\n</cell>\n<text>\nProblem 7\nWrite a function that\
    \ returns the number of times a given value appears in an array.\nusing Test\n\
    \n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgwkbospj.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgwkbospj.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    sum = 0\n    for num in nums\n\
    \        sum += num\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nExercise 3\nWrite a function that returns the number\
    \ of times each element appears in an array.\nusing Test\n\n@testset begin\n\n\
    candidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbsjv80l3.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbsjv80l3.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    \n    for\
    \ n in nums\n        sum += n\n    end\n    \n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the number of positive integers less than or equal to n.\nusing Test\n\
    \n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9fbk_lb3.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9fbk_lb3.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    for x in\
    \ nums\n        sum += x\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpp07_0qvn.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpp07_0qvn.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    \n    for\
    \ x in nums\n        sum += x\n    end\n    \n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([-1, -2, -3])\n</cell>\n<text>\nProblem 7\nWrite a Julia function\
    \ called maxSubArraySum(nums::Vector{Int64})::Int64 which returns the maximum\
    \ sum of any non-empty sub-array of nums.\nExample\nmaxSubArraySum([2, 3, 4, 1,\
    \ 2, 4]) == 9\nmaxSubArraySum([-1, -2, -3]) == -6\nmaxSubArraySum([-10, -9, -8,\
    \ -7, -6, -5, -4, -3, -2, -1]) == -60\nmaxSubArraySum([-10, -9, -8, -7, -6, -5,\
    \ -4, -3, -2, -1, 0]) == -60\nmaxSubArraySum([-10, -9, -8, -7, -6, -5, -4, -3,\
    \ -2, -1, 0, 1]) == -60\nmaxSubArraySum([-10, -9, -8, -7, -6, -5, -4, -3, -2,\
    \ -1, 0, 1, 2, 3, 4]) == -60\nmaxSubArraySum([-10, -9, -8, -7, -6, -5, -4, -3,\
    \ -2, -1, 0, 1, 2, 3, 4, 5]) == -60\nmaxSubArraySum([-10, -9, -8, -7, -6, -5,\
    \ -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6]) == -60\nmaxSubArraySum([-10, -9, -8, -7,\
    \ -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7]) == -60\nmaxSubArraySum([-10,\
    \ -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8]) == -60\nmaxSubArraySum([-10,\
    \ -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == -60\n\
    maxSubArraySum([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10]) == -60\nmaxSubArraySum([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1,\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == -60\nmaxSubArraySum([-10, -9, -8,\
    \ -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == -60\n\
    maxSubArraySum([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12, 13]) == -60\nmaxSubArray\nusing Test\n\n@testset begin\n\
    \ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t\
    @test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10])\
    \ == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\t@test(candidate([0,\
    \ 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3, 10, -5]) == -6)\n\t\
    @test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10, 11,\
    \ 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\t\
    @test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqhn1tk73.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqhn1tk73.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    \n    for\
    \ x in nums\n        sum += x\n    end\n    \n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([-1, -2, -3])\n</cell>\n<text>\nProblem 3\nGiven an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n\
    \    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3])\
    \ == -6\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphk42hq1t.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphk42hq1t.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    \n    for\
    \ n in nums\n        sum += n\n    end\n    \n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([-1, -2, -3])\n</cell>\n<text>\nProblem 3\nGiven an array of integers\
    \ nums, find the maximum sum of any non-empty sub-array\n    of nums.\n    Example\n\
    \    maxSubArraySum([2, 3, 4, 1, 2, 4]) == 6\n    maxSubArraySum([-1, -2, -3])\
    \ == -3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmdagi_wz.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmdagi_wz.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    \n    for\
    \ n in nums\n        sum += n\n    end\n    \n    return sum\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of elements in a given array\
    \ that satisfy a given condition. For example, given an array nums = [1, 2, 3,\
    \ 4], return 2 because there are 2 elements in the array that satisfy the condition\
    \ num > 2.\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsn_g0yjn.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpsn_g0yjn.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    \n    for\
    \ n in nums\n        sum += n\n    end\n    \n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the number of times a given number appears in an array. For example,\
    \ given [1, 1, 2, 3], return 2.\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpw_dtpoks.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpw_dtpoks.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    \n    for\
    \ n in nums\n        sum += n\n    end\n    \n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmwjkzj67.jl:23\n  Expression: candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n   Evaluated: 16 == 1\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpmwjkzj67.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmwjkzj67.jl:22\ntest set: Test Failed at /tmp/tmpmwjkzj67.jl:27\n\
    \  Expression: candidate([0, 10, 20, 1000000]) == 0\n   Evaluated: 1000030 ==\
    \ 0\nStacktrace:\n [1] top-level scope at /tmp/tmpmwjkzj67.jl:27\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmwjkzj67.jl:22\ntest set: Test Failed at /tmp/tmpmwjkzj67.jl:28\n\
    \  Expression: candidate([-1, -2, -3, 10, -5]) == -6\n   Evaluated: -1 == -6\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpmwjkzj67.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmwjkzj67.jl:22\ntest set: Test Failed at /tmp/tmpmwjkzj67.jl:29\n\
    \  Expression: candidate([100, -1, -2, -3, 10, -5]) == -6\n   Evaluated: 99 ==\
    \ -6\nStacktrace:\n [1] top-level scope at /tmp/tmpmwjkzj67.jl:29\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmwjkzj67.jl:22\ntest set: Test Failed at /tmp/tmpmwjkzj67.jl:30\n\
    \  Expression: candidate([10, 11, 13, 8, 3, 4]) == 3\n   Evaluated: 49 == 3\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpmwjkzj67.jl:30\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmwjkzj67.jl:22\ntest set: Test Failed at /tmp/tmpmwjkzj67.jl:31\n\
    \  Expression: candidate([100, -33, 32, -1, 0, -2]) == -33\n   Evaluated: 96 ==\
    \ -33\nStacktrace:\n [1] top-level scope at /tmp/tmpmwjkzj67.jl:31\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmwjkzj67.jl:22\ntest set: Test Failed at /tmp/tmpmwjkzj67.jl:34\n\
    \  Expression: candidate([1, -1]) == -1\n   Evaluated: 0 == -1\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmwjkzj67.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmwjkzj67.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     7     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmwjkzj67.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    \n    for\
    \ n in nums\n        sum += n\n    end\n    \n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([-1, -2, -3])\n</cell>\n<text>\nProblem 7: Find the minimum number\
    \ in an array that does not occur in another array\nGiven two arrays, A and B,\
    \ find the minimum number in A that does not occur in B. \nExample\nA = [1, 2,\
    \ 3, 1] B = [1, 2, 3] -> 1\nA = [1, 2, 3, 1] B = [1, 3, 2] -> 3\nA = [1, 2, 3,\
    \ 1] B = [1, 3, 5] -> 3\nA = [1, 2, 3, 1] B = [1, 3, 6] -> 3\nA = [1, 2, 3, 1]\
    \ B = [1, 3, 7] -> 3\nA = [1, 2, 3, 1] B = [1, 3, 8] -> 3\nA = [1, 2, 3, 1] B\
    \ = [1, 3, 9] -> 3\nA = [1, 2, 3, 1] B = [1, 3, 10] -> 3\nA = [1, 2, 3, 1] B =\
    \ [1, 3, 11] -> 3\nA = [1, 2, 3, 1] B = [1, 3, 12] -> 3\nA = [1, 2, 3, 1] B =\
    \ [1, 3, 13] -> 3\nA = [1, 2, 3, 1] B = [1, 3, 14] -> 3\nA = [1, 2, 3, 1] B =\
    \ [1, 3, 15] -> 3\nA = [1, 2, 3, 1] B = [1, 3, 16] -> 3\nA = [1, 2, 3, 1] B =\
    \ [1, 3, 17] -> 3\nA = [1, 2, 3, 1] B = [1, 3, 18] -> 3\nA = [1, 2, 3, 1] B =\
    \ [1, 3, 19] -> 3\nA = [1, 2, 3, 1] B = [1, 3, 20] -> 3\nA = [1, 2, 3, 1] B =\
    \ [1, 3, 21] -> 3\nA = [1, 2, 3, 1] B = [1, 3, 22] -> 3\nA = [1, 2, 3, 1] B =\
    \ [1, 3, 23] -> 3\nA = [1, 2, 3, 1] B = [1, 3, 24] -> 3\nA = [1, 2, 3, 1] B =\
    \ [1, 3, 25] -> 3\nA = [1, 2, 3, 1] B = [1, 3, 26] -> 3\nA = [1, 2, 3, 1] B =\
    \ [1, 3, 27] -> 3\nA = [1, 2, 3, 1] B = [1, 3, 28] -> 3\nA = [1, 2, 3, 1] B =\
    \ [1, 3, 29] -> 3\nA = [1, 2, 3, 1] B = [1, 3, 30] -> 3\nA = [1, 2, 3, 1] B =\
    \ [1, 3, 31] -> 3\nA = [\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzbpmw4x4.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzbpmw4x4.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    \n    for\
    \ num in nums\n        sum += num\n    end\n    \n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nProblem\
    \ 7\nGiven an array of integers nums, find the maximum sum of any non-empty sub-array\n\
    \    of nums.\n    Example\n    maxSubArraySum([2, 3, 4, 1, 2, 4]) == 6\n    maxSubArraySum([-1,\
    \ -2, -3]) == -3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzoxoknuo.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzoxoknuo.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    \n    for\
    \ n in nums\n        sum += n\n    end\n    \n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([-1, -2, -3])\n</cell>\n<text>\nProblem 7\nGiven an array of integers\
    \ nums, find the minimum number of moves to make all numbers equal, where a move\
    \ is incrementing a number by 1 or decrementing a number by 1.\nusing Test\n\n\
    @testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3w6j958g.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3w6j958g.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    \n    for\
    \ num in nums\n        sum += num\n    end\n    \n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcanv_kro.jl:23\n  Expression: candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n   Evaluated: 16 == 1\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpcanv_kro.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcanv_kro.jl:22\ntest set: Test Failed at /tmp/tmpcanv_kro.jl:27\n\
    \  Expression: candidate([0, 10, 20, 1000000]) == 0\n   Evaluated: 1000030 ==\
    \ 0\nStacktrace:\n [1] top-level scope at /tmp/tmpcanv_kro.jl:27\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcanv_kro.jl:22\ntest set: Test Failed at /tmp/tmpcanv_kro.jl:28\n\
    \  Expression: candidate([-1, -2, -3, 10, -5]) == -6\n   Evaluated: -1 == -6\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpcanv_kro.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcanv_kro.jl:22\ntest set: Test Failed at /tmp/tmpcanv_kro.jl:29\n\
    \  Expression: candidate([100, -1, -2, -3, 10, -5]) == -6\n   Evaluated: 99 ==\
    \ -6\nStacktrace:\n [1] top-level scope at /tmp/tmpcanv_kro.jl:29\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcanv_kro.jl:22\ntest set: Test Failed at /tmp/tmpcanv_kro.jl:30\n\
    \  Expression: candidate([10, 11, 13, 8, 3, 4]) == 3\n   Evaluated: 49 == 3\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpcanv_kro.jl:30\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcanv_kro.jl:22\ntest set: Test Failed at /tmp/tmpcanv_kro.jl:31\n\
    \  Expression: candidate([100, -33, 32, -1, 0, -2]) == -33\n   Evaluated: 96 ==\
    \ -33\nStacktrace:\n [1] top-level scope at /tmp/tmpcanv_kro.jl:31\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcanv_kro.jl:22\ntest set: Test Failed at /tmp/tmpcanv_kro.jl:34\n\
    \  Expression: candidate([1, -1]) == -1\n   Evaluated: 0 == -1\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcanv_kro.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcanv_kro.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     7     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcanv_kro.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    \n    for\
    \ n in nums\n        sum += n\n    end\n    \n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([-1, -2, -3])\n</cell>\n<text>\nProblem 7\nWrite a function that\
    \ returns the number of positive integers less than or equal to n.\nusing Test\n\
    \n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpv3ldyt4k.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpv3ldyt4k.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    sum = 0\n    for i in nums\n\
    \        sum += i\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.0>\n\
    using Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7zufkmr8.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7zufkmr8.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    sum = 0\n    for num in nums\n\
    \        sum += num\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp98so33bs.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp98so33bs.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    sum = 0\n    for x in nums\n\
    \        sum += x\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nProblem 7: Find all subsets of a given set\nGiven\
    \ a set of distinct integers, find all subsets (without duplicates) of that set.\n\
    Example\nsubsets([1, 2, 3]) == [[1, 2, 3], [1, 2], [1], [3], [2, 3]]\nsubsets([1,\
    \ 2]) == [[1, 2], [1], [2]]\nsubsets([1]) == [[1], [2]]\nsubsets([]) == []\n\"\
    \"\"\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpyqvevj4d.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpyqvevj4d.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    \n    for\
    \ num in nums\n        sum += num\n    end\n    \n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nProblem\
    \ 7: Find the minimum number of coins needed to make up change for amount change.\n\
    Input: change = amount of change in cents, coins = [1, 2, 5, 10, 20, 50, 100,\
    \ 200]\nOutput: minimum number of coins needed to make up change\nExample\nchange\
    \ = 100, coins = [1, 2, 5, 10, 20, 50, 100, 200]\nOutput: 5\nExplanation: One\
    \ way to make up change is by making 1 dollar and 5 cents, which is worth 1 dollar\
    \ and 5 cents.\nAnother way to make up change is by making 1 dollar and 20 cents,\
    \ which is worth 1 dollar and 20 cents.\nAnother way to make up change is by making\
    \ 1 dollar and 10 cents, which is worth 1 dollar and 10 cents.\nAnother way to\
    \ make up change is by making 1 dollar and 5 cents, which is worth 1 dollar and\
    \ 5 cents.\nAnother way to make up change is by making 1 dollar and 2 cents, which\
    \ is worth 1 dollar and 2 cents.\nAnother way to make up change is by making 1\
    \ dollar and 1 cent, which is worth 1 dollar and 1 cent.\nAnother way to make\
    \ up change is by making 1 dollar and 0 cents, which is worth 0 dollars.\nAnother\
    \ way to make up change is by making 0 dollars and 1 cent, which is worth 0 dollars\
    \ and 1 cent.\nAnother way to make up change is by making 0 dollars and 2 cents,\
    \ which is worth 0 dollars and 2 cents.\nAnother way to make up change is by making\
    \ 0 dollars and 5 cents, which is worth 0 dollars and 5 cents.\nAnother way to\
    \ make up change is by making 0 dollars and 10 cents, which is worth 0 dollars\
    \ and 10 cents.\nAnother way to make up change is by making 0 dollars and 20 cents,\
    \ which is worth 0 dollars and 20 cents.\nAnother way to make up change is by\
    \ making 0 dollars and 50 cents, which is worth 0 dollars and 50 cents.\nAnother\
    \ way to make up change is by making 0 dollars and 100 cents, which is worth 0\
    \ dollars and 100 cents.\nAnother way to make up change is by \nusing Test\n\n\
    @testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_b11_ryw.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_b11_ryw.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    sum = 0\n    for num in nums\n\
    \        sum += num\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nProblem 4\nGiven an array of integers nums, find\
    \ the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9sakgoza.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9sakgoza.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    sum = 0\n    for n in nums\n\
    \        sum += n\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzs03v7sz.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzs03v7sz.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    \n    for\
    \ num in nums\n        sum += num\n    end\n    \n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nProblem\
    \ 7: Find the minimum number of coins required to make up an amount\nGiven an\
    \ integer amount, find the minimum number of coins required to make up that amount.\
    \ \nThe coins are dollar bills and quarters.\nExample\nFor amount = 10, the minimum\
    \ number of coins is 3.\nFor amount = 25, the minimum number of coins is 3.\n\
    For amount = 50, the minimum number of coins is 3.\nFor amount = 100, the minimum\
    \ number of coins is 3.\nFor amount = 200, the minimum number of coins is 2.\n\
    For amount = 300, the minimum number of coins is 2.\nFor amount = 1000, the minimum\
    \ number of coins is 2.\nFor amount = 10000, the minimum number of coins is 1.\n\
    For amount = 100000, the minimum number of coins is 1.\nFor amount = 1000000,\
    \ the minimum number of coins is 1.\nFor amount = 10000000, the minimum number\
    \ of coins is 0.\nFor amount = 100000000, the minimum number of coins is 0.\n\
    For amount = 1000000000, the minimum number of coins is 0.\nFor amount = 10000000000,\
    \ the minimum number of coins is 0.\nFor amount = 100000000000, the minimum number\
    \ of coins is 0.\nFor amount = 1000000000000, the minimum number of coins is 0.\n\
    For amount = 10000000000000, the minimum number of coins is 0.\nFor amount = 100000000000000,\
    \ the minimum number of coins is 0.\nFor amount = 1000000000000000, the minimum\
    \ number of coins is 0.\nFor amount = 10000000000000000, the minimum number of\
    \ coins is 0.\nFor amount = 100000000000000000, the minimum number of coins is\
    \ 0.\nFor amount = 1000000000000000000, the minimum number of coins is 0.\nFor\
    \ amount = 10000000000000000000, the minimum number of coins is 0.\nFor amount\
    \ = 100000000000000000000, the minimum number of coins is 0.\nFor amount = 1000000000000000000000,\
    \ the minimum number of coins is 0.\nFor amount = 10000000000000000000000, the\
    \ minimum number of coins is 0.\nFor amount = 100000000000000000000000, the minimum\
    \ number of coins is 0.\nFor amount = 1000000000000000000000000, the minimum number\
    \ of coins is 0.\nFor amount = 10000000000000000000000000, the minimum number\
    \ of coins is 0.\nFor amount = 100000000000000000000000000, the minimum number\
    \ of coins is 0.\nFor amount = 1000000000000000000000000000, the minimum number\
    \ of coins is 0.\nFor amount = 10000000000000000000000000000, the minimum number\
    \ of coins is 0.\nFor amount = 100000000000000000000000000000, the minimum number\
    \ of coins is 0.\nFor amount = 1000000000000000000000000000000, the minimum number\
    \ of coins is 0.\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxml97foo.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxml97foo.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    \n    for\
    \ n in nums\n        sum += n\n    end\n    \n    return sum\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that finds the maximum sum of any non-empty sub-array\
    \ of nums.\nExample\nmaxSubArraySum([2, 3, 4, 1, 2, 4]) == 6\nmaxSubArraySum([-1,\
    \ -2, -3]) == -3\nmaxSubArraySum([-4, -5, -6, -7, -8]) == -8\nmaxSubArraySum([-9,\
    \ -10, -11, -12, -13]) == -13\nmaxSubArraySum([-14, -15, -16, -17, -18]) == -18\n\
    maxSubArraySum([-19, 20, 21, 22, 23]) == 23\nmaxSubArraySum([-24, 25, 26, 27,\
    \ 28]) == 28\nmaxSubArraySum([-29, 30, 31, 32, 33]) == 33\nmaxSubArraySum([-34,\
    \ 35, 36, 37, 38]) == 38\nmaxSubArraySum([-39, 40, 41, 42, 43]) == 43\nmaxSubArraySum([-44,\
    \ 45, 46, 47, 48]) == 48\nmaxSubArraySum([-49, 50, 51, 52, 53]) == 53\nmaxSubArraySum([-54,\
    \ 55, 56, 57, 58]) == 58\nmaxSubArraySum([-59, 60, 61, 62, 63]) == 63\nmaxSubArraySum([-64,\
    \ 65, 66, 67, 68]) == 68\nmaxSubArraySum([-69, 70, 71, 72, 73]) == 73\nmaxSubArraySum([-74,\
    \ 75, 76, 77, 78]) == 78\nmaxSubArraySum([-79, 80, 81, 82, 83]) == 83\nmaxSubArraySum([-84,\
    \ 85, 86, 87, 88]) == 88\nmaxSubArraySum([-89, 90, 91, 92, 93]) == 93\nmaxSubArraySum([-94,\
    \ 95, 96, 97, 98]) == 98\nmaxSubArraySum([-99, 100, 101, 102, 103]) == 103\nmaxSubArraySum([-104,\
    \ 105, 106, 107, 108]) == 108\nmaxSubArraySum([-109, 110, 111, 112, 113]) == 113\n\
    maxSubArraySum([-116, 117, 118, 119, 120]) == 120\nmaxSubArraySum([-121, 122,\
    \ 123, 124, 125]) == 125\nmaxSubArraySum([-126, 127, 128, 129, 130]) == 130\n\
    maxSubArraySum([-132, 133, 134, 135, 136\nusing Test\n\n@testset begin\n\ncandidate\
    \ = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsg11g4ai.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpsg11g4ai.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    \n    for\
    \ n in nums\n        sum += n\n    end\n    \n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([-1, -2, -3])\n</cell>\n<text>\nProblem 4\nGiven a binary tree,\
    \ find the lowest common ancestor (LCA) of two given nodes in the tree.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdo8hoeh4.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdo8hoeh4.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    sum = 0\n    for x in nums\n\
    \        sum += x\n    end\n    return sum\nend\n</cell>\n<text>\nProblem 3\n\
    Write a function that returns the number of times a given number appears in an\
    \ array.\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp70r4as9i.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp70r4as9i.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    \n    for\
    \ n in nums\n        sum += n\n    end\n    \n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the number of times each element appears in the input array.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplpcirai9.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplpcirai9.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum::Int64 = 0\n    \n\
    \    for num in nums\n        sum += num\n    end\n    \n    return sum\nend\n\
    </cell>\n<text>\nProblem 4\nWrite a function that returns the sum of the squares\
    \ of the numbers in a given vector.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpl2wwbc4u.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpl2wwbc4u.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum::Int64 = 0\n    \n\
    \    for n in nums\n        sum += n\n    end\n    \n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nProblem\
    \ 7\nWrite a Julia function minSubArraySum(nums::Vector{Int64})::Int64 which returns\
    \ the minimum sum of any non-empty sub-array of nums.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4])\
    \ == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3,\
    \ 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_pj6e4eg.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_pj6e4eg.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    sum = 0\n    for x in nums\n\
    \        sum += x\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of positive integers less than or equal to n.\nusing Test\n\n@testset begin\n\
    \ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t\
    @test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10])\
    \ == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\t@test(candidate([0,\
    \ 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3, 10, -5]) == -6)\n\t\
    @test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10, 11,\
    \ 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\t\
    @test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfhwr1sbo.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfhwr1sbo.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    sum = 0\n    for x in nums\n\
    \        sum += x\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t\
    @test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10])\
    \ == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\t@test(candidate([0,\
    \ 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3, 10, -5]) == -6)\n\t\
    @test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10, 11,\
    \ 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\t\
    @test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9x7lalj3.jl:20\n  Expression: candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n   Evaluated: 16 == 1\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmp9x7lalj3.jl:20\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9x7lalj3.jl:19\ntest set: Test Failed at /tmp/tmp9x7lalj3.jl:24\n\
    \  Expression: candidate([0, 10, 20, 1000000]) == 0\n   Evaluated: 1000030 ==\
    \ 0\nStacktrace:\n [1] top-level scope at /tmp/tmp9x7lalj3.jl:24\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9x7lalj3.jl:19\ntest set: Test Failed at /tmp/tmp9x7lalj3.jl:25\n\
    \  Expression: candidate([-1, -2, -3, 10, -5]) == -6\n   Evaluated: -1 == -6\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp9x7lalj3.jl:25\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9x7lalj3.jl:19\ntest set: Test Failed at /tmp/tmp9x7lalj3.jl:26\n\
    \  Expression: candidate([100, -1, -2, -3, 10, -5]) == -6\n   Evaluated: 99 ==\
    \ -6\nStacktrace:\n [1] top-level scope at /tmp/tmp9x7lalj3.jl:26\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9x7lalj3.jl:19\ntest set: Test Failed at /tmp/tmp9x7lalj3.jl:27\n\
    \  Expression: candidate([10, 11, 13, 8, 3, 4]) == 3\n   Evaluated: 49 == 3\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp9x7lalj3.jl:27\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9x7lalj3.jl:19\ntest set: Test Failed at /tmp/tmp9x7lalj3.jl:28\n\
    \  Expression: candidate([100, -33, 32, -1, 0, -2]) == -33\n   Evaluated: 96 ==\
    \ -33\nStacktrace:\n [1] top-level scope at /tmp/tmp9x7lalj3.jl:28\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9x7lalj3.jl:19\ntest set: Test Failed at /tmp/tmp9x7lalj3.jl:31\n\
    \  Expression: candidate([1, -1]) == -1\n   Evaluated: 0 == -1\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9x7lalj3.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9x7lalj3.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     7     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9x7lalj3.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    for n in\
    \ nums\n        sum += n\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the number of times a given value appears in an array.\nusing Test\n\
    \n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmph8x9tfk4.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmph8x9tfk4.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    sum = 0\n    for num in nums\n\
    \        sum += num\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t\
    @test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10])\
    \ == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\t@test(candidate([0,\
    \ 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3, 10, -5]) == -6)\n\t\
    @test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10, 11,\
    \ 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\t\
    @test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpo4l17m27.jl:20\n  Expression: candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n   Evaluated: 16 == 1\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpo4l17m27.jl:20\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpo4l17m27.jl:19\ntest set: Test Failed at /tmp/tmpo4l17m27.jl:24\n\
    \  Expression: candidate([0, 10, 20, 1000000]) == 0\n   Evaluated: 1000030 ==\
    \ 0\nStacktrace:\n [1] top-level scope at /tmp/tmpo4l17m27.jl:24\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpo4l17m27.jl:19\ntest set: Test Failed at /tmp/tmpo4l17m27.jl:25\n\
    \  Expression: candidate([-1, -2, -3, 10, -5]) == -6\n   Evaluated: -1 == -6\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpo4l17m27.jl:25\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpo4l17m27.jl:19\ntest set: Test Failed at /tmp/tmpo4l17m27.jl:26\n\
    \  Expression: candidate([100, -1, -2, -3, 10, -5]) == -6\n   Evaluated: 99 ==\
    \ -6\nStacktrace:\n [1] top-level scope at /tmp/tmpo4l17m27.jl:26\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpo4l17m27.jl:19\ntest set: Test Failed at /tmp/tmpo4l17m27.jl:27\n\
    \  Expression: candidate([10, 11, 13, 8, 3, 4]) == 3\n   Evaluated: 49 == 3\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpo4l17m27.jl:27\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpo4l17m27.jl:19\ntest set: Test Failed at /tmp/tmpo4l17m27.jl:28\n\
    \  Expression: candidate([100, -33, 32, -1, 0, -2]) == -33\n   Evaluated: 96 ==\
    \ -33\nStacktrace:\n [1] top-level scope at /tmp/tmpo4l17m27.jl:28\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpo4l17m27.jl:19\ntest set: Test Failed at /tmp/tmpo4l17m27.jl:31\n\
    \  Expression: candidate([1, -1]) == -1\n   Evaluated: 0 == -1\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpo4l17m27.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpo4l17m27.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     7     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo4l17m27.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    sum = 0\n    for x in nums\n\
    \        sum += x\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp74wddnkx.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp74wddnkx.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    sum = 0\n    for n in nums\n\
    \        sum += n\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.0>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.0>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nExercise 3\nWrite a function that returns the number\
    \ of times a given value appears in an array.\nusing Test\n\n@testset begin\n\n\
    candidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpg0j5mp8e.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpg0j5mp8e.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    \n    for\
    \ n in nums\n        sum += n\n    end\n    \n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([-1, -2, -3])\n</cell>\n<text>\nProblem 7: Find the maximum sum\
    \ of any non-empty sub-array of nums.\nExample\nmaxSubArraySum([2, 3, 4, 1, 2,\
    \ 4]) == 7\nmaxSubArraySum([-1, -2, -3]) == -3\nmaxSubArraySum([-100, -10, -5])\
    \ == -10\nmaxSubArraySum([-100, -10, -5, -20, -5]) == -10\nmaxSubArraySum([-100,\
    \ -10, -5, -20, -5, -10, -5]) == -10\nmaxSubArraySum([-100, -10, -5, -20, -5,\
    \ -10, -5, -20, -5]) == -10\nmaxSubArraySum([-100, -10, -5, -20, -5, -10, -5,\
    \ -20, -5, -10, -5]) == -10\nmaxSubArraySum([-100, -10, -5, -20, -5, -10, -5,\
    \ -20, -5, -10, -5, -20, -5]) == -10\nmaxSubArraySum([-100, -10, -5, -20, -5,\
    \ -10, -5, -20, -5, -10, -5, -20, -5, -10, -5]) == -10\nmaxSubArraySum([-100,\
    \ -10, -5, -20, -5, -10, -5, -20, -5, -10, -5, -20, -5, -10, -5, -20, -5]) ==\
    \ -10\nmaxSubArraySum([-100, -10, -5, -20, -5, -10, -5, -20, -5, -10, -5, -20,\
    \ -5, -10, -5, -20, -5, -10, -5]) == -10\nmaxSubArraySum([-100, -10, -5, -20,\
    \ -5, -10, -5, -20, -5, -10, -5, -20, -5, -10, -5, -20, -5, -10, -5, -20, -5])\
    \ == -10\nmaxSubArraySum([-100, -10, -5, -20, -5, -10, -5, -20, -5, -10, -5, -20,\
    \ -5, -10, -5, -20, -5, -10, -5, -20, -5, -10, -5]) == -10\nmaxSubArraySum([-100,\
    \ -10, -5, -20, -5, -10, -5, -20, -5, -10, -5, \nusing Test\n\n@testset begin\n\
    \ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t\
    @test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10])\
    \ == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\t@test(candidate([0,\
    \ 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3, 10, -5]) == -6)\n\t\
    @test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10, 11,\
    \ 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\t\
    @test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphs1bbwt8.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphs1bbwt8.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp66qtwsth.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp66qtwsth.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp66qtwsth.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    \n    for\
    \ n in nums\n        sum += n\n    end\n    \n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7z6xgzwn.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7z6xgzwn.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    \n    for\
    \ n in nums\n        sum += n\n    end\n    \n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7k4h961s.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7k4h961s.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    \n    for\
    \ n in nums\n        sum += n\n    end\n    \n    return sum\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes an array of integers and returns the number\
    \ of elements that are less than the given value.\nusing Test\n\n@testset begin\n\
    \ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t\
    @test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10])\
    \ == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\t@test(candidate([0,\
    \ 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3, 10, -5]) == -6)\n\t\
    @test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10, 11,\
    \ 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\t\
    @test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzp1wkd8v.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzp1wkd8v.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    \n    for\
    \ n in nums\n        sum += n\n    end\n    \n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([-1, -2, -3])\n</cell>\n<text>\nProblem 4\nGiven an array of integers\
    \ nums, find the maximum sum of any non-empty sub-array\n    of nums.\n    Example\n\
    \    maxSubArraySum([2, 3, 4, 1, 2, 4]) == 6\n    maxSubArraySum([-1, -2, -3])\
    \ == -3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpn1msk144.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpn1msk144.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    \n    for\
    \ x in nums\n        sum += x\n    end\n    \n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the number of positive integers less than or equal to n.\nusing Test\n\
    \n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprq1ovg7m.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprq1ovg7m.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    \n    for\
    \ n in nums\n        sum += n\n    end\n    \n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the minimum sum of any non-empty sub-array of nums.\nExample\nminSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 1\nminSubArraySum([-1, -2, -3]) == -6\nHint: Use a for loop\
    \ to iterate through the array and sum each element.\nusing Test\n\n@testset begin\n\
    \ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t\
    @test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10])\
    \ == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\t@test(candidate([0,\
    \ 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3, 10, -5]) == -6)\n\t\
    @test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10, 11,\
    \ 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\t\
    @test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmtao99ee.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmtao99ee.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    for n in\
    \ nums\n        sum += n\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of times a given value appears in an array. For example, the number of times\
    \ 2 appears in [1,2,2,3,3,3] would be 3.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1elzky71.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1elzky71.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    \n    for\
    \ n in nums\n        sum += n\n    end\n    \n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the number of times a given number appears in an array.\nusing Test\n\
    \n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpy853kjq2.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpy853kjq2.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    \n    for\
    \ n in nums\n        sum += n\n    end\n    \n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp74aoiy9i.jl:23\n  Expression: candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n   Evaluated: 16 == 1\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmp74aoiy9i.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp74aoiy9i.jl:22\ntest set: Test Failed at /tmp/tmp74aoiy9i.jl:27\n\
    \  Expression: candidate([0, 10, 20, 1000000]) == 0\n   Evaluated: 1000030 ==\
    \ 0\nStacktrace:\n [1] top-level scope at /tmp/tmp74aoiy9i.jl:27\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp74aoiy9i.jl:22\ntest set: Test Failed at /tmp/tmp74aoiy9i.jl:28\n\
    \  Expression: candidate([-1, -2, -3, 10, -5]) == -6\n   Evaluated: -1 == -6\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp74aoiy9i.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp74aoiy9i.jl:22\ntest set: Test Failed at /tmp/tmp74aoiy9i.jl:29\n\
    \  Expression: candidate([100, -1, -2, -3, 10, -5]) == -6\n   Evaluated: 99 ==\
    \ -6\nStacktrace:\n [1] top-level scope at /tmp/tmp74aoiy9i.jl:29\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp74aoiy9i.jl:22\ntest set: Test Failed at /tmp/tmp74aoiy9i.jl:30\n\
    \  Expression: candidate([10, 11, 13, 8, 3, 4]) == 3\n   Evaluated: 49 == 3\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp74aoiy9i.jl:30\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp74aoiy9i.jl:22\ntest set: Test Failed at /tmp/tmp74aoiy9i.jl:31\n\
    \  Expression: candidate([100, -33, 32, -1, 0, -2]) == -33\n   Evaluated: 96 ==\
    \ -33\nStacktrace:\n [1] top-level scope at /tmp/tmp74aoiy9i.jl:31\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp74aoiy9i.jl:22\ntest set: Test Failed at /tmp/tmp74aoiy9i.jl:34\n\
    \  Expression: candidate([1, -1]) == -1\n   Evaluated: 0 == -1\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp74aoiy9i.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp74aoiy9i.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     7     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp74aoiy9i.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    sum = 0\n    for n in nums\n\
    \        sum += n\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0xn4ahv9.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp0xn4ahv9.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    \n    for\
    \ x in nums\n        sum += x\n    end\n    \n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpro_pla8m.jl:23\n  Expression: candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n   Evaluated: 16 == 1\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpro_pla8m.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpro_pla8m.jl:22\ntest set: Test Failed at /tmp/tmpro_pla8m.jl:27\n\
    \  Expression: candidate([0, 10, 20, 1000000]) == 0\n   Evaluated: 1000030 ==\
    \ 0\nStacktrace:\n [1] top-level scope at /tmp/tmpro_pla8m.jl:27\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpro_pla8m.jl:22\ntest set: Test Failed at /tmp/tmpro_pla8m.jl:28\n\
    \  Expression: candidate([-1, -2, -3, 10, -5]) == -6\n   Evaluated: -1 == -6\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpro_pla8m.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpro_pla8m.jl:22\ntest set: Test Failed at /tmp/tmpro_pla8m.jl:29\n\
    \  Expression: candidate([100, -1, -2, -3, 10, -5]) == -6\n   Evaluated: 99 ==\
    \ -6\nStacktrace:\n [1] top-level scope at /tmp/tmpro_pla8m.jl:29\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpro_pla8m.jl:22\ntest set: Test Failed at /tmp/tmpro_pla8m.jl:30\n\
    \  Expression: candidate([10, 11, 13, 8, 3, 4]) == 3\n   Evaluated: 49 == 3\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpro_pla8m.jl:30\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpro_pla8m.jl:22\ntest set: Test Failed at /tmp/tmpro_pla8m.jl:31\n\
    \  Expression: candidate([100, -33, 32, -1, 0, -2]) == -33\n   Evaluated: 96 ==\
    \ -33\nStacktrace:\n [1] top-level scope at /tmp/tmpro_pla8m.jl:31\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpro_pla8m.jl:22\ntest set: Test Failed at /tmp/tmpro_pla8m.jl:34\n\
    \  Expression: candidate([1, -1]) == -1\n   Evaluated: 0 == -1\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpro_pla8m.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpro_pla8m.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     7     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpro_pla8m.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    sum = 0\n    for x in nums\n\
    \        sum += x\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwbrrfusz.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpwbrrfusz.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    \n    for\
    \ n in nums\n        sum += n\n    end\n    \n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the minimum number in an array that is a multiple of a given number.\
    \ For example, if the array is [4, 6, 8, 10, 12, 14, 16, 18, 20], and the given\
    \ number is 3, then the function should return 6.\nusing Test\n\n@testset begin\n\
    \ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t\
    @test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10])\
    \ == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\t@test(candidate([0,\
    \ 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3, 10, -5]) == -6)\n\t\
    @test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10, 11,\
    \ 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\t\
    @test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppjlluhps.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppjlluhps.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    sum = 0\n    for n in nums\n\
    \        sum += n\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of positive integers less than or equal\
    \ to n.\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0q7ru1fx.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp0q7ru1fx.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    sum = 0\n    for num in nums\n\
    \        sum += num\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the sum of the squares of the numbers in nums.\nusing Test\n\n\
    @testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgreyfrlg.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgreyfrlg.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    sum = 0\n    for x in nums\n\
    \        sum += x\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxqu11hzi.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxqu11hzi.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    \n    for\
    \ num in nums\n        sum += num\n    end\n    \n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of positive integers less than or\
    \ equal to n.\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t\
    @test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpeyx62jkz.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpeyx62jkz.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    \n    for\
    \ n in nums\n        sum += n\n    end\n    \n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3yunl5gt.jl:23\n  Expression: candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n   Evaluated: 16 == 1\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmp3yunl5gt.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3yunl5gt.jl:22\ntest set: Test Failed at /tmp/tmp3yunl5gt.jl:27\n\
    \  Expression: candidate([0, 10, 20, 1000000]) == 0\n   Evaluated: 1000030 ==\
    \ 0\nStacktrace:\n [1] top-level scope at /tmp/tmp3yunl5gt.jl:27\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3yunl5gt.jl:22\ntest set: Test Failed at /tmp/tmp3yunl5gt.jl:28\n\
    \  Expression: candidate([-1, -2, -3, 10, -5]) == -6\n   Evaluated: -1 == -6\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp3yunl5gt.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3yunl5gt.jl:22\ntest set: Test Failed at /tmp/tmp3yunl5gt.jl:29\n\
    \  Expression: candidate([100, -1, -2, -3, 10, -5]) == -6\n   Evaluated: 99 ==\
    \ -6\nStacktrace:\n [1] top-level scope at /tmp/tmp3yunl5gt.jl:29\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3yunl5gt.jl:22\ntest set: Test Failed at /tmp/tmp3yunl5gt.jl:30\n\
    \  Expression: candidate([10, 11, 13, 8, 3, 4]) == 3\n   Evaluated: 49 == 3\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp3yunl5gt.jl:30\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3yunl5gt.jl:22\ntest set: Test Failed at /tmp/tmp3yunl5gt.jl:31\n\
    \  Expression: candidate([100, -33, 32, -1, 0, -2]) == -33\n   Evaluated: 96 ==\
    \ -33\nStacktrace:\n [1] top-level scope at /tmp/tmp3yunl5gt.jl:31\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3yunl5gt.jl:22\ntest set: Test Failed at /tmp/tmp3yunl5gt.jl:34\n\
    \  Expression: candidate([1, -1]) == -1\n   Evaluated: 0 == -1\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3yunl5gt.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3yunl5gt.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     7     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3yunl5gt.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    for n in\
    \ nums\n        sum += n\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.0>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.0>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nProblem 3\nGiven an array of integers nums, find\
    \ the maximum sum of any non-empty sub-array\n    of nums.\n    Example\n    maxSubArraySum([2,\
    \ 3, 4, 1, 2, 4]) == 6\n    maxSubArraySum([-1, -2, -3]) == -3\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpg7__hgx_.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpg7__hgx_.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum::Int64 = nums.reduce(+,\
    \ 0)\n    \n    for num in nums\n        if num > sum\n            sum = num\n\
    \        end\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.4>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.4>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of times each element appears in an array. For example,\nusing Test\n\n@testset\
    \ begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4])\
    \ == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3,\
    \ 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpoo9ml8jf.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpoo9ml8jf.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    for x in\
    \ nums\n        sum += x\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.0>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.0>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nProblem 7: Find all subsets of a set\nGiven a set\
    \ S, find all subsets of S (including itself).\nusing Test\n\n@testset begin\n\
    \ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t\
    @test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10])\
    \ == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\t@test(candidate([0,\
    \ 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3, 10, -5]) == -6)\n\t\
    @test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10, 11,\
    \ 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\t\
    @test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4kkexfjo.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4kkexfjo.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    sum = 0\n    for n in nums\n\
    \        sum += n\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of times a given number appears in an array.\nusing Test\n\n@testset begin\n\
    \ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t\
    @test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10])\
    \ == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\t@test(candidate([0,\
    \ 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3, 10, -5]) == -6)\n\t\
    @test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10, 11,\
    \ 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\t\
    @test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprkpzs7c3.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprkpzs7c3.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    sum = 0\n    for x in nums\n\
    \        sum += x\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.4>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.4>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of times each element appears in an array.\nusing Test\n\n@testset begin\n\n\
    candidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp03uwbmra.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp03uwbmra.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum::Int64 = 0\n    \n\
    \    for num in nums\n        sum += num\n    end\n    \n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of times a given value appears in\
    \ an array.\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4byvbd37.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4byvbd37.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    sum = 0\n    for x in nums\n\
    \        sum += x\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t\
    @test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10])\
    \ == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\t@test(candidate([0,\
    \ 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3, 10, -5]) == -6)\n\t\
    @test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10, 11,\
    \ 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\t\
    @test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpc18nygjr.jl:20\n  Expression: candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n   Evaluated: 16 == 1\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpc18nygjr.jl:20\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpc18nygjr.jl:19\ntest set: Test Failed at /tmp/tmpc18nygjr.jl:24\n\
    \  Expression: candidate([0, 10, 20, 1000000]) == 0\n   Evaluated: 1000030 ==\
    \ 0\nStacktrace:\n [1] top-level scope at /tmp/tmpc18nygjr.jl:24\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpc18nygjr.jl:19\ntest set: Test Failed at /tmp/tmpc18nygjr.jl:25\n\
    \  Expression: candidate([-1, -2, -3, 10, -5]) == -6\n   Evaluated: -1 == -6\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpc18nygjr.jl:25\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpc18nygjr.jl:19\ntest set: Test Failed at /tmp/tmpc18nygjr.jl:26\n\
    \  Expression: candidate([100, -1, -2, -3, 10, -5]) == -6\n   Evaluated: 99 ==\
    \ -6\nStacktrace:\n [1] top-level scope at /tmp/tmpc18nygjr.jl:26\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpc18nygjr.jl:19\ntest set: Test Failed at /tmp/tmpc18nygjr.jl:27\n\
    \  Expression: candidate([10, 11, 13, 8, 3, 4]) == 3\n   Evaluated: 49 == 3\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpc18nygjr.jl:27\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpc18nygjr.jl:19\ntest set: Test Failed at /tmp/tmpc18nygjr.jl:28\n\
    \  Expression: candidate([100, -33, 32, -1, 0, -2]) == -33\n   Evaluated: 96 ==\
    \ -33\nStacktrace:\n [1] top-level scope at /tmp/tmpc18nygjr.jl:28\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpc18nygjr.jl:19\ntest set: Test Failed at /tmp/tmpc18nygjr.jl:31\n\
    \  Expression: candidate([1, -1]) == -1\n   Evaluated: 0 == -1\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpc18nygjr.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpc18nygjr.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     7     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc18nygjr.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    \n    for\
    \ x in nums\n        sum += x\n    end\n    \n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([-1, -2, -3])\n</cell>\n<text>\nProblem 7\nGiven an array of integers\
    \ nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n\
    \    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3])\
    \ == -6\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpz83bjjcf.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpz83bjjcf.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum::Int64 = 0\n    \n\
    \    for n in nums\n        sum += n\n    end\n    \n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of elements in a vector that are\
    \ less than a given value.\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpc0uu8nya.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpc0uu8nya.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum::Int64 = 0\n    \n\
    \    for n in nums\n        sum += n\n    end\n    \n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the number of positive integers less than or\
    \ equal to n. \nExample\npositives(10) = 3\npositives(-10) = 1\npositives(0) =\
    \ 0\npositives(1) = 1\npositives(2) = 2\npositives(3) = 3\npositives(4) = 4\n\
    positives(5) = 5\npositives(6) = 6\npositives(7) = 7\npositives(8) = 8\npositives(9)\
    \ = 9\npositives(10) = 10\npositives(11) = 1\npositives(12) = 2\npositives(13)\
    \ = 3\npositives(14) = 4\npositives(15) = 5\npositives(16) = 6\npositives(17)\
    \ = 7\npositives(18) = 8\npositives(19) = 9\npositives(20) = 10\npositives(21)\
    \ = 1\npositives(22) = 2\npositives(23) = 3\npositives(24) = 4\npositives(25)\
    \ = 5\npositives(26) = 6\npositives(27) = 7\npositives(28) = 8\npositives(29)\
    \ = 9\npositives(30) = 10\npositives(31) = 1\npositives(32) = 2\npositives(33)\
    \ = 3\npositives(34) = 4\npositives(35) = 5\npositives(36) = 6\npositives(37)\
    \ = 7\npositives(38) = 8\npositives(39) = 9\npositives(40) = 10\npositives(41)\
    \ = 1\npositives(42) = 2\npositives(43) = 3\npositives(44) = 4\npositives(45)\
    \ = 5\npositives(46) = 6\npositives(47) = 7\npositives(48) = 8\npositives(49)\
    \ = 9\npositives(50) = 10\npositives(51) = 1\npositives(52) = 2\npositives(53)\
    \ = 3\npositives(54) = 4\npositives(55) = 5\npositives(56) = 6\npositives(57)\
    \ = 7\npositives(58) = 8\npositives(59) = 9\npositives(60) = 10\npositives(61)\
    \ = 1\npositives(62) = 2\npositives(63) = 3\npositives(64) = 4\npositives(65)\
    \ = 5\npositives(66) = 6\npositives(67) = 7\npositives(68) = 8\npositives(69)\
    \ = 9\npositives(70) = 10\npositives(71) = 1\npositives(72) = 2\nusing Test\n\n\
    @testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpo6qjkp0u.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpo6qjkp0u.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    \n    for\
    \ n in nums\n        sum += n\n    end\n    \n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([-1, -2, -3])\n</cell>\n<text>\nProblem 7: Find the maximum product\
    \ of any non-empty sub-array of nums.\nExample\nmaxSubArrayProduct(nums) == 24\n\
    maxSubArrayProduct([]) == -1\nmaxSubArrayProduct([-10, -20, -30, -40, -50, -60])\
    \ == 60\nmaxSubArrayProduct([-10, -20, -30, -40, -50, -60, -70, -80, -90]) ==\
    \ -240\nmaxSubArrayProduct([-10, -20, -30, -40, -50, -60, -70, -80, -90, -100])\
    \ == -2400\nmaxSubArrayProduct([-10, -20, -30, -40, -50, -60, -70, -80, -90, -100,\
    \ -101]) == -24000\nmaxSubArrayProduct([-10, -20, -30, -40, -50, -60, -70, -80,\
    \ -90, -100, -101, -102]) == -240000\nmaxSubArrayProduct([-10, -20, -30, -40,\
    \ -50, -60, -70, -80, -90, -100, -101, -102, -103]) == -2400000\nmaxSubArrayProduct([-10,\
    \ -20, -30, -40, -50, -60, -70, -80, -90, -100, -101, -102, -103, -104]) == -24000000\n\
    maxSubArrayProduct([-10, -20, -30, -40, -50, -60, -70, -80, -90, -100, -101, -102,\
    \ -103, -104, -105]) == -240000000\nmaxSubArrayProduct([-10, -20, -30, -40, -50,\
    \ -60, -70, -80, -90, -100, -101, -102, -103, -104, -105, -106]) == -2400000000\n\
    maxSubArrayProduct([-10, -20, -30, -40, -50, -60, -70, -80, -90, -100, -101, -102,\
    \ -103, -104, -105, -106, -107]) == -24000000000\nmaxSubArrayProduct([-10, -20,\
    \ -30, -40, -50, -60, -70, -80, -90, -100, -101, -102, -103, -104, -105, -106,\
    \ -107, -108]) == -240000000000\nmaxSubArrayProduct([-10, -20, -30, -40, -5\n\
    using Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgyl6u7eg.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgyl6u7eg.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    for x in\
    \ nums\n        sum += x\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4])\
    \ == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3,\
    \ 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2o9_nkb0.jl:21\n  Expression: candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n   Evaluated: 16 == 1\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmp2o9_nkb0.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2o9_nkb0.jl:20\ntest set: Test Failed at /tmp/tmp2o9_nkb0.jl:25\n\
    \  Expression: candidate([0, 10, 20, 1000000]) == 0\n   Evaluated: 1000030 ==\
    \ 0\nStacktrace:\n [1] top-level scope at /tmp/tmp2o9_nkb0.jl:25\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2o9_nkb0.jl:20\ntest set: Test Failed at /tmp/tmp2o9_nkb0.jl:26\n\
    \  Expression: candidate([-1, -2, -3, 10, -5]) == -6\n   Evaluated: -1 == -6\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp2o9_nkb0.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2o9_nkb0.jl:20\ntest set: Test Failed at /tmp/tmp2o9_nkb0.jl:27\n\
    \  Expression: candidate([100, -1, -2, -3, 10, -5]) == -6\n   Evaluated: 99 ==\
    \ -6\nStacktrace:\n [1] top-level scope at /tmp/tmp2o9_nkb0.jl:27\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2o9_nkb0.jl:20\ntest set: Test Failed at /tmp/tmp2o9_nkb0.jl:28\n\
    \  Expression: candidate([10, 11, 13, 8, 3, 4]) == 3\n   Evaluated: 49 == 3\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp2o9_nkb0.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2o9_nkb0.jl:20\ntest set: Test Failed at /tmp/tmp2o9_nkb0.jl:29\n\
    \  Expression: candidate([100, -33, 32, -1, 0, -2]) == -33\n   Evaluated: 96 ==\
    \ -33\nStacktrace:\n [1] top-level scope at /tmp/tmp2o9_nkb0.jl:29\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2o9_nkb0.jl:20\ntest set: Test Failed at /tmp/tmp2o9_nkb0.jl:32\n\
    \  Expression: candidate([1, -1]) == -1\n   Evaluated: 0 == -1\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2o9_nkb0.jl:32\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2o9_nkb0.jl:20\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     7     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2o9_nkb0.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    \n    for\
    \ num in nums\n        sum += num\n    end\n    \n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<text>\n\
    Problem 4\nGiven an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4])\
    \ == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3,\
    \ 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpx991no32.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpx991no32.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    for n in\
    \ nums\n        sum += n\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nProblem 7: Find the sum of all the numbers in the\
    \ array nums except the number at index i.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpl6zgbgxy.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpl6zgbgxy.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    \n    for\
    \ num in nums\n        sum += num\n    end\n    \n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise\n\
    Write a function that returns the minimum sum of any non-empty sub-array of nums.\n\
    using Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqpueg2m6.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqpueg2m6.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    \n    for\
    \ n in nums\n        sum += n\n    end\n    \n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the number of times a given value appears in an array.\nusing Test\n\
    \n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4hfq9qzg.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4hfq9qzg.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    \n    for\
    \ num in nums\n        sum += num\n    end\n    \n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nProblem\
    \ 7\nGiven an array of integers nums, find the minimum sum of any non-empty sub-array\n\
    \    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1,\
    \ -2, -3]) == -6\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0s606nyw.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp0s606nyw.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    sum = 0\n    for n in nums\n\
    \        sum += n\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3_vls9hr.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3_vls9hr.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    \n    for\
    \ num in nums\n        sum += num\n    end\n    \n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nProblem\
    \ 8\nGiven an array of integers nums, find the minimum sum of any non-empty sub-array\n\
    \    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1,\
    \ -2, -3]) == -6\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjs47lmvm.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpjs47lmvm.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum::Int64 = 0\n    \n\
    \    for num in nums\n        sum += num\n    end\n    \n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the number of times a given\
    \ element appears in an array.\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpi1j0o1wt.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpi1j0o1wt.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    sum = 0\n    \n    for n in\
    \ nums\n        sum += n\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum\
    \ of the squares of the numbers in an array.\nusing Test\n\n@testset begin\n\n\
    candidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphbh2wqti.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphbh2wqti.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    sum::Int64 = 0\n    for num\
    \ in nums\n        sum += num\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of times a given element appears in an array.\nusing Test\n\n@testset begin\n\
    \ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t\
    @test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10])\
    \ == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\t@test(candidate([0,\
    \ 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3, 10, -5]) == -6)\n\t\
    @test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10, 11,\
    \ 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\t\
    @test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3o0abemf.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3o0abemf.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    \n    for\
    \ n in nums\n        sum += n\n    end\n    \n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpz4z4og84.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpz4z4og84.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    for num\
    \ in nums\n        sum += num\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4])\
    \ == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3,\
    \ 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpv7nknif_.jl:21\n  Expression: candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n   Evaluated: 16 == 1\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpv7nknif_.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpv7nknif_.jl:20\ntest set: Test Failed at /tmp/tmpv7nknif_.jl:25\n\
    \  Expression: candidate([0, 10, 20, 1000000]) == 0\n   Evaluated: 1000030 ==\
    \ 0\nStacktrace:\n [1] top-level scope at /tmp/tmpv7nknif_.jl:25\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpv7nknif_.jl:20\ntest set: Test Failed at /tmp/tmpv7nknif_.jl:26\n\
    \  Expression: candidate([-1, -2, -3, 10, -5]) == -6\n   Evaluated: -1 == -6\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpv7nknif_.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpv7nknif_.jl:20\ntest set: Test Failed at /tmp/tmpv7nknif_.jl:27\n\
    \  Expression: candidate([100, -1, -2, -3, 10, -5]) == -6\n   Evaluated: 99 ==\
    \ -6\nStacktrace:\n [1] top-level scope at /tmp/tmpv7nknif_.jl:27\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpv7nknif_.jl:20\ntest set: Test Failed at /tmp/tmpv7nknif_.jl:28\n\
    \  Expression: candidate([10, 11, 13, 8, 3, 4]) == 3\n   Evaluated: 49 == 3\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpv7nknif_.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpv7nknif_.jl:20\ntest set: Test Failed at /tmp/tmpv7nknif_.jl:29\n\
    \  Expression: candidate([100, -33, 32, -1, 0, -2]) == -33\n   Evaluated: 96 ==\
    \ -33\nStacktrace:\n [1] top-level scope at /tmp/tmpv7nknif_.jl:29\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpv7nknif_.jl:20\ntest set: Test Failed at /tmp/tmpv7nknif_.jl:32\n\
    \  Expression: candidate([1, -1]) == -1\n   Evaluated: 0 == -1\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpv7nknif_.jl:32\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpv7nknif_.jl:20\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     7     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpv7nknif_.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    \n    for\
    \ num in nums\n        sum += num\n    end\n    \n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nProblem\
    \ 7: Find the sum of all numbers from 1 to N\nWrite a function that returns the\
    \ sum of all numbers from 1 to N.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkq06csgu.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpkq06csgu.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    \n    for\
    \ n in nums\n        sum += n\n    end\n    \n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the number of positive integers less than or equal to n.\nusing Test\n\
    \n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmparxe9u08.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmparxe9u08.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    for n in\
    \ nums\n        sum += n\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of positive integers less than or equal to n.\nusing Test\n\n@testset begin\n\
    \ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t\
    @test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10])\
    \ == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\t@test(candidate([0,\
    \ 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3, 10, -5]) == -6)\n\t\
    @test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10, 11,\
    \ 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\t\
    @test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwq81k1eq.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpwq81k1eq.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    \n    for\
    \ num in nums\n        sum += num\n    end\n    \n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of positive integers less than or\
    \ equal to n.\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t\
    @test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp285ibqoo.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp285ibqoo.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    for x in\
    \ nums\n        sum += x\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of times the given value appears in an array.\nusing Test\n\n@testset begin\n\
    \ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t\
    @test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10])\
    \ == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\t@test(candidate([0,\
    \ 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3, 10, -5]) == -6)\n\t\
    @test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10, 11,\
    \ 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\t\
    @test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9uy2a1fp.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9uy2a1fp.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    sum = 0\n    for i in nums\n\
    \        sum += i\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of times a given value appears in an\
    \ array.\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5gkk7az8.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5gkk7az8.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    sum = 0\n    for n in nums\n\
    \        sum += n\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the number of times a given value appears in an\
    \ array.\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgrhc4hmv.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgrhc4hmv.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    sum = 0\n    for num in nums\n\
    \        sum += num\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of times a given number appears in an\
    \ array. For example, given the array [1, 1, 2, 3], the function should return\
    \ 3.\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpia1b6l14.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpia1b6l14.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    sum = 0\n    for x in nums\n\
    \        sum += x\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of elements in a vector that are greater than a given value.\nusing Test\n\n\
    @testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp11ca31qq.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp11ca31qq.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    \n    for\
    \ num in nums\n        sum += num\n    end\n    \n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nProblem\
    \ 7\nGiven an array of integers nums, find the maximum sum of any non-empty sub-array\n\
    \    of nums.\n    Example\n    maxSubArraySum([2, 3, 4, 1, 2, 4]) == 5\n    maxSubArraySum([-1,\
    \ -2, -3]) == 3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp21udrtjp.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp21udrtjp.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum = 0\n    \n    for\
    \ num in nums\n        sum += num\n    end\n    \n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<code\
    \ language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\nProblem\
    \ 7\nGiven an array of integers nums, find the maximum sum of any non-empty sub-array\n\
    \    of nums.\n    Example\n    maxSubArraySum([2, 3, 4, 1, 2, 4]) == 6\n    maxSubArraySum([-1,\
    \ -2, -3]) == -3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpl079k1us.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpl079k1us.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    \n    sum::Int64 = nums.reduce(_\
    \ + _)\n    \n    for x in nums\n        sum += x\n    end\n    \n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n\
    </cell>\n<code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\n\
    Problem 7\nGiven a binary search tree and a key, find the node in the BST that\
    \ has the\nlargest value when searching in the subtree rooted at that node. You\
    \ may assume\nthe BST is balanced.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: all-underscore identifier used as rvalue around\
    \ /tmp/tmpm_mroary.jl:10\nStacktrace:\n [1] top-level scope at /tmp/tmpm_mroary.jl:1\n\
    \ [2] include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpm_mroary.jl:1\n"
  exit_code: 1
  status: Exception
