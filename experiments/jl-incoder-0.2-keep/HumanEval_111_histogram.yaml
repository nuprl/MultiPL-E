name: HumanEval_111_histogram
language: julia
prompt: "\"\"\"Given a string representing a space separated lowercase letters, return\
  \ a dictionary\n    of the letter with the most repetition and containing the corresponding\
  \ count.\n    If several letters have the same occurrence, return all of them.\n\
  \    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a\
  \ b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n\
  \    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n\
  function histogram(test::String)::Dict{String, Int64}> \n"
tests: "using Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
  a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") ==\
  \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\"\
  \ => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r\
  \ t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b\
  \ b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1,\
  \ \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
  a\") == Dict(\"a\" => 1))\nend\n"
completions: ["    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    letters = sort(letters)\n    for letter in letters\n        histogram[letter]\
    \ = get(histogram, letter, 0) + 1\n    return histogram\nend", "    histogram\
    \ = Dict{String, Int64}()\n    letters = split(test)\n    for letter in letters\n\
    \        histogram[letter] = get(histogram, letter, 0) + 1\n    return histogram\n\
    end", "    histogram = Dict{String, Int64}()\n    letters = split(test)\n    for\
    \ letter in letters\n        histogram[letter] = histogram[letter] + 1 if histogram[letter]\
    \ > 0 else 1\n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a ", "    histogram = Dict{String,\
    \ Int64}()\n    letters = split(test)\n    for letter in letters\n        histogram[letter]\
    \ = histogram[letter] + 1 if histogram[letter] >= 1 else 1\n    end\n    return\
    \ histogram\nend\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n", "    histo = Dict{String,\
    \ Int64}()\n    \n    for c in test\n        histo[c] = histo[c] + 1\n    end\n\
    \    \n    return histo\nend\n</cell>\n<code language=julia-1.5>\nhistogram(\"\
    a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"", "    histogram = Dict{String, Int64}()\n\
    \    letters = split(test)\n    for letter in letters\n        histogram[letter]\
    \ = histogram[letter] + 1 if histogram[letter] > 0 else 1\n    return histogram\n\
    end\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>", "    histogram\
    \ = Dict{String, Int64}()\n    letters = split(test)\n    for letter in letters\n\
    \        histogram[letter] = histogram[letter] + 1 if histogram[letter] > 0 else\
    \ 1\n    return histogram\nend\n</cell>\n<code language=julia-1.5>\nhistogram(\"\
    a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>",
  "    histogram = Dict{String, Int64}()\n    letters = split(test)\n    for letter\
    \ in letters\n        histogram[letter] = get(histogram, letter, 0) + 1\n    end\n\
    \    return histogram\nend\n</cell>\n<code language=julia-1.5>\nhistogram('a b\
    \ c')\n</cell>\n<code language=julia-1.5>\nhistogram('a b b a')\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram('a b c a b')\n</cell>\n<code language=julia-1.5>\n\
    histogram('b b b b a')\n</cell>\n<code language=julia-1.5>\nhistogram('')\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of words in the string.", "    counts = Dict{String, Int64}()\n    for letter\
    \ in split(test)\n        counts[letter] = get(counts, letter, 0) + 1\n    return\
    \ counts\nend", "    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = get(histogram, letter,\
    \ 0) + 1\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"\")\n</cell>\n<text>\nExercise\nWrite a function that takes a string\
    \ and returns the number of times each letter appears in the string.", "    histo\
    \ = Dict{String, Int64}()\n    letters = split(test)\n    for letter in letters\n\
    \        histo[letter] = get(histo, letter, 0) + 1\n    return histo\nend", " \
    \   histogram = Dict{String, Int64}()\n    letters = split(test)\n    for letter\
    \ in letters\n        histogram[letter] = histogram[letter] + 1 if histogram[letter]\
    \ >= 1 else 1\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.0>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.0>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of characters in the string that are not spaces.", " \
    \   histogram = Dict{String, Int64}()\n    letters = split(test)\n    for letter\
    \ in letters\n        histogram[letter] = get(histogram, letter, 0) + 1\n    end\n\
    \    return histogram\nend\n</cell>\n<code language=julia-1.5>\nhistogram(\"a\
    \ b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\")\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of words in the string.\nThe function should ignore all punctuation\
    \ and only count the letters a-z.\nThe function should ignore all numbers and\
    \ only count the letters a-z.\nThe function should ignore all special characters\
    \ and only count the letters a-z.\nThe function should ignore all whitespace and\
    \ only count the letters a-z.\nThe function should ignore all uppercase and only\
    \ count the letters a-z.\nThe function should ignore all lowercase and only count\
    \ the letters a-z.\nThe function should ignore all characters that are not letters\
    \ or whitespace.\nThe function should ignore all characters that are not letters\
    \ or whitespace.\nThe function should ignore all characters that are not letters\
    \ or whitespace.\nThe function should ignore all characters that are not letters\
    \ or whitespace.\nThe function should ignore all characters that are not letters\
    \ or whitespace.\nThe function should ignore all characters that are not letters\
    \ or whitespace.\nThe function should ignore all characters that are not letters\
    \ or whitespace.\nThe function should ignore all characters that are not letters\
    \ or whitespace.\nThe function should ignore all characters that are not letters\
    \ or whitespace.\nThe function should ignore all characters that are not letters\
    \ or whitespace.\nThe function should ignore all characters that are not letters\
    \ or whitespace.\nThe function should ignore all characters that are not letters\
    \ or whitespace.\nThe function should ignore all characters that are not letters\
    \ or whitespace.\nThe function should ignore all characters that are not letters\
    \ or whitespace.\nThe function should ignore all characters that are not letters\
    \ or whitespace.\nThe function should ignore all characters that are not letters\
    \ or whitespace.\nThe function should ignore all characters that are not letters\
    \ or whitespace.\nThe function should ignore all characters that are not letters\
    \ or whitespace.\nThe function should ignore all characters that are not letters\
    \ or whitespace.\nThe function should ignore all characters that are not letters\
    \ or whitespace.\nThe function should ignore all characters that are not letters\
    \ or whitespace", "    histogram = Dict{String, Int64}()\n    for letter in split(test)\n\
    \        histogram[letter] = histogram[letter] + 1 if histogram[letter] > 0 else\
    \ 1\n    return histogram\nend\n</cell>\n<code language=julia-1.5>\nhistogram(\"\
    a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b\
    \ c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b ", "    histogram = Dict{String,\
    \ Int64}()\n    letters = split(test)\n    for letter in letters\n        histogram[letter]\
    \ = get(histogram, letter, 0) + 1\n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string\
    \ and returns the number of characters in the string that are\nnot in the alphabet\
    \ (a to z).", "    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        if histogram[letter] == 0\n            histogram[letter]\
    \ = 1\n        else\n            histogram[letter] += 1\n        end\n    end\n\
    \    return histogram\nend\n</cell>\n<code language=julia-1.5>\nhistogram(\"a\
    \ b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\")\n\
    </cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b ", "    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        if histogram[letter] == 0\n            histogram[letter]\
    \ = 1\n        else\n            histogram[letter] += 1\n        end\n    end\n\
    \    return histogram\nend\n</cell>\n<code language=julia-1.0>\nhistogram(\"a\
    \ b c\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"a b b a\")\n</cell>\n\
    <code language=julia-1.0>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.0>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.0>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.0>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.0>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.0>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"b ", "    histogram\
    \ = Dict{String, Int64}()\n    letters = split(test)\n    for letter in letters\n\
    \        if histogram[letter] == 0\n            histogram[letter] = 1\n      \
    \  else\n            histogram[letter] += 1\n        end\n    end\n    return\
    \ histogram\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string\
    \ and returns the number of characters in the string that are not spaces.", " \
    \   histogram = Dict{String, Int64}()\n    letters = split(test)\n    for letter\
    \ in letters\n        histogram[letter] = histogram[letter] + 1 if histogram[letter]\
    \ > 0 else 1\n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n\
    </cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n\
    <code language=julia-", "    histogram = Dict{String, Int64}()\n    letters =\
    \ split(test)\n    for letter in letters\n        histogram[letter] = histogram[letter]\
    \ + 1 if histogram[letter] > 0 else 1\n    return histogram\nend\n</cell>\n<code\
    \ language=julia-1.3>\nhistogram(\"a b c\")\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"a b b a\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"a b c\
    \ a b\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.3>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c ", "    histogram\
    \ = Dict{String, Int64}()\n    letters = split(test)\n    for letter in letters\n\
    \        if histogram[letter] == 0\n            histogram[letter] = 1\n      \
    \  else\n            histogram[letter] += 1\n        end\n    end\n    return\
    \ histogram\nend\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c ", "    histogram = Dict{String, Int64}()\n    letters = split(test)\n \
    \   for letter in letters\n        histogram[letter] = histogram[letter] + 1 if\
    \ histogram[letter] > 0 else 1\n    end\n    return histogram\nend\n</cell>\n\
    <code language=julia-1.5>\nhistogram('a b c')\n</cell>\n<code language=julia-1.5>\n\
    histogram('a b b a')\n</cell>\n<code language=julia-1.5>\nhistogram('a b c a b')\n\
    </cell>\n<code language=julia-1.5>\nhistogram('b b b b a')\n</cell>\n<code language=julia-1.5>\n\
    histogram('')\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of characters in that string that are not letters.",
  "    counts = Dict{String, Int64}()\n    for c in split(test)\n        counts[c]\
    \ = get(counts, c, 0) + 1\n    \n    maximum = max(counts.values)\n    \n    counts\
    \ = counts[maximum .> 0]\n    \n    return counts\nend", "    histogram = Dict{String,\
    \ Int64}()\n    letters = split(test)\n    for letter in letters\n        histogram[letter]\
    \ = histogram[letter] + 1 if histogram[letter] > 0 else 1\n    end\n    return\
    \ histogram\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of occurrences of each letter in the string.", "    histogram\
    \ = Dict{String, Int64}()\n    letters = split(test)\n    for letter in letters\n\
    \        if histogram[letter] == 0\n            histogram[letter] = 1\n      \
    \  else\n            histogram[letter] += 1\n        end\n    end\n    return\
    \ histogram\nend\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b ", "    histogram = Dict{String, Int64}()\n    letters = split(test)\n   \
    \ letters = sort(letters)\n    letters = unique(letters)\n    for letter in letters\n\
    \        histogram[letter] = length(letters)\n    end\n    return histogram\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of letters in the string that occur more than once.", "    histo\
    \ = Dict{String, Int64}()\n    for c in test\n        if histo[c] == 0\n     \
    \       histo[c] = 1\n        else\n            histo[c] += 1\n        end\n \
    \   end\n    return histo\nend\n</cell>\n<code language=julia-1.5>\nhistogram(\"\
    a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b\
    \ c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b\
    \ c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b\
    \ c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b\
    \ c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b\
    \ c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b\
    \ c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=", "    counts = Dict{String, Int64}()\n    for c in split(test)\n\
    \        counts[c] = get(counts, c, 0) + 1\n    \n    maximum = max(counts.values)\n\
    \    \n    counts = Dict{String, Int64}()\n    for c in split(test)\n        counts[c]\
    \ = get(counts, c, 0) + 1\n    \n    minimum = min(counts.values)\n    \n    counts\
    \ = Dict{String, Int64}()\n    for c in split(test)\n        counts[c] = get(counts,\
    \ c, 0) + 1\n    \n    histogram = Dict{String, Int64}()\n    for c in split(test)\n\
    \        histogram[c] = counts[c]\n    \n    return histogram\nend", "    histogram\
    \ = Dict{String, Int64}()\n    letters = split(test)\n    for letter in letters\n\
    \        histogram[letter] = get(histogram, letter, 0) + 1\n    end\n    return\
    \ histogram\nend\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n", "    histogram\
    \ = Dict{String, Int64}()\n    letters = split(test)\n    for letter in letters\n\
    \        histogram[letter] = histogram[letter] ? histogram[letter] + 1 : 1\n \
    \   end\n    return histogram\nend\n</cell>\n<code language=julia-1.5>\nhistogram(\"\
    a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\")\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of characters in the string that are\nnot in the alphabet (including\
    \ spaces). \nExample: histogram(\"a b c a b\") == {'a': 2, 'b': 2}", "    histogram\
    \ = Dict{String, Int64}()\n    letters = split(test)\n    for letter in letters\n\
    \        histogram[letter] = histogram[letter] + 1 if histogram[letter] > 0 else\
    \ 1\n    return histogram\nend", "    histogram = Dict{String, Int64}()\n    letters\
    \ = split(test)\n    for letter in letters\n        histogram[letter] = histogram[letter]\
    \ ? histogram[letter] + 1 : 1\n    end\n    histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of words in the string.\nThe function should ignore all\
    \ punctuation and only count the letters a-z.\nThe function should ignore all\
    \ numbers and only count the letters a-z.\nThe function should ignore all special\
    \ characters and only count the letters a-z.\nThe function should ignore all non-alphabetic\
    \ characters and only count the letters a-z.\nThe function should ignore all whitespace\
    \ and only count the letters a-z.\nThe function should ignore all empty strings\
    \ and only count the letters a-z.\nThe function should ignore all non-alphabetic\
    \ characters and only count the letters a-z.\nThe function should ignore all whitespace\
    \ and only count the letters a-z.\nThe function should ignore all empty strings\
    \ and only count the letters a-z.\nThe function should ignore all non-alphabetic\
    \ characters and only count the letters a-z.\nThe function should ignore all whitespace\
    \ and only count the letters a-z.\nThe function should ignore all empty strings\
    \ and only count the letters a-z.\nThe function should ignore all non-alphabetic\
    \ characters and only count the letters a-z.\nThe function should ignore all whitespace\
    \ and only count the letters a-z.\nThe function should ignore all empty strings\
    \ and only count the letters a-z.\nThe function should ignore all non-alphabetic\
    \ characters and only count the letters a-z.\nThe function should ignore all whitespace\
    \ and only count the letters a-z.\nThe function should ignore all empty strings\
    \ and only count the letters a-z.\nThe function should ignore all non-alphabetic\
    \ characters and only count the letters a-z.\nThe function should ignore all whitespace\
    \ and only count the letters a-z.\nThe function should ignore all empty strings\
    \ and only count the letters a-z.\nThe function should ignore all non-alphabetic\
    \ characters and only count the letter", "    histogram = Dict{String, Int64}()\n\
    \    letters = split(test)\n    for letter in letters\n        histogram[letter]\
    \ = get(histogram, letter, 0) + 1\n    end\n    return histogram\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of characters in the string that are not letters.", "    histogram = Dict{String,\
    \ Int64}()\n    letters = split(test)\n    for letter in letters\n        histogram[letter]\
    \ = histogram[letter] + 1 if histogram[letter] > 0 else 1\n    end\n    return\
    \ histogram\nend\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</", "    histogram = Dict{String,\
    \ Int64}()\n    for letter in split(test)\n        histogram[letter] = histogram[letter]\
    \ ? histogram[letter] + 1 : 1\n    end\n    return histogram\nend\n</cell>\n<code\
    \ language=julia-1.3>\nhistogram(\"a b c\")\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"a b b a\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"a b c\
    \ a b\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.3>\nhistogram(\"a\")\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"a b\
    \ c a b\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.3>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"a b\
    \ c a b\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.3>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"a b\
    \ c a b\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.3>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"a b\
    \ c a b\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.3>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"a b\
    \ c a b\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.3>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.3>\n", "    histogram\
    \ = Dict{String, Int64}()\n    letters = split(test)\n    for letter in letters\n\
    \        histogram[letter] = histogram[letter] + 1 if histogram[letter] > 0 else\
    \ 1\n    return histogram\nend\n</cell>\n<code language=julia-1.4>\nhistogram(\"\
    a b c\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"a b b a\")\n</cell>\n\
    <code language=julia-1.4>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"\")\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string as input and\
    \ returns the number of characters in the string that are not letters.", "   \
    \ histogram = Dict{String, Int64}()\n    for letter in split(test)\n        if\
    \ histogram[letter] == 0\n            histogram[letter] = 1\n        else\n  \
    \          histogram[letter] += 1\n        end\n    end\n    return histogram\n\
    end\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"a b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b\
    \ c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b\
    \ c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b b ", "    histogram = Dict{String,\
    \ Int64}()\n    letters = split(test)\n    letters = sort(letters)\n    for letter\
    \ in letters\n        if histogram[letter] == 0\n            histogram[letter]\
    \ = 1\n        else\n            histogram[letter] += 1\n        end\n    end\n\
    \    return histogram\nend\n</cell>\n<code language=julia-1.5>\nhistogram('a b\
    \ c')\n</cell>\n<code language=julia-1.5>\nhistogram('a b b a')\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram('a b c a b')\n</cell>\n<code language=julia-1.5>\n\
    histogram('b b b b a')\n</cell>\n<code language=julia-1.5>\nhistogram('')\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of times each letter appears in the string.\nWrite a second function that takes\
    \ a string and returns the letter with the most repetition.\nWrite a third function\
    \ that takes a string and returns the letter with the most repetition and the\
    \ number of repetitions.", "    histogram = Dict{String, Int64}()\n    for c in\
    \ test\n        histogram[c] = get(histogram, c, 0) + 1\n    return histogram\n\
    end\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of characters\
    \ in the string that are not letters.", "    histogram = Dict{String, Int64}()\n\
    \    letters = split(test)\n    for letter in letters\n        if histogram[letter]\
    \ == 0\n            histogram[letter] = 1\n        else\n            histogram[letter]\
    \ += 1\n        end\n    end\n    return histogram\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of words in the\
    \ string.\nThe function should ignore all non-word characters (spaces, punctuation,\
    \ etc.).\nThe function should ignore all empty strings.\nThe function should ignore\
    \ all strings consisting of only one word.\nThe function should ignore all strings\
    \ consisting of only one word and one space.\nThe function should ignore all strings\
    \ consisting of only one word and one space and one punctuation mark.\nThe function\
    \ should ignore all strings consisting of only one word and one space and one\
    \ punctuation mark and one number.\nThe function should ignore all strings consisting\
    \ of only one word and one space and one punctuation mark and one number and one\
    \ letter.\nThe function should ignore all strings consisting of only one word\
    \ and one space and one punctuation mark and one number and one letter and one\
    \ space.\nThe function should ignore all strings consisting of only one word and\
    \ one space and one punctuation mark and one number and one letter and one space\
    \ and one punctuation mark.\nThe function should ignore all strings consisting\
    \ of only one word and one space and one punctuation mark and one number and one\
    \ letter and one space and one punctuation mark and one number.\nThe function\
    \ should ignore all strings consisting of only one word and one space and one\
    \ punctuation mark and one number and one letter and one space and one punctuation\
    \ mark and one number and one letter.\nThe function should ignore all strings\
    \ consisting of only one word and one space and one punctuation mark and one number\
    \ and one letter and one space and one punctuation mark and one number and one\
    \ letter and one space.\nThe function should ignore all strings consisting of\
    \ only one word and one space and one punctuation mark and one number and one\
    \ letter and one space and one punctuation mark and one number and one letter\
    \ and one space and one punctuation mark.\nThe function should ignore all strings\
    \ consisting of only one word and one space and one punctuation mark and one number\
    \ and one letter and one space and one punctuation mark and one number and one\
    \ letter and one space and one punctuation mark and one number.\nThe function\
    \ should ignore all strings consisting of only one word and one space and one\
    \ punctuation mark and one number and one letter and one space and one punctuation\
    \ mark and one number and one letter and one space and one punctuation mark and\
    \ one number and one letter.\nThe function should ignore all strings consisting\
    \ of only one word and one space and one punctuation mark and one number and ",
  "    histogram = Dict{String, Int64}()\n    letters = split(test)\n    for letter\
    \ in letters\n        histogram[letter] = get(histogram, letter, 0) + 1\n    end\n\
    \    return histogram\nend\n</cell>\n<code language=julia-1.5>\nhistogram(\"a\
    \ b c a b\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of characters in the string that are not spaces.", " \
    \   histogram = Dict{String, Int64}()\n    letters = split(test)\n    for letter\
    \ in letters\n        histogram[letter] = histogram[letter] + 1 if histogram[letter]\
    \ >= 1 else 1\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.0>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.0>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a ", "    histogram = Dict{String, Int64}()\n\
    \    for letter in split(test)\n        histogram[letter] = histogram[letter]\
    \ + 1 if histogram[letter] > 0 else 1\n    end\n    return histogram\nend\n</cell>\n\
    <code language=julia-1.3>\nhistogram('a b c')\n</cell>\n<code language=julia-1.3>\n\
    histogram('a b b a')\n</cell>\n<code language=julia-1.3>\nhistogram('a b c a b')\n\
    </cell>\n<code language=julia-1.3>\nhistogram('b b b b a')\n</cell>\n<code language=julia-1.3>\n\
    histogram('')\n</cell>\n<text>\nExercise\nWrite a function that takes a string\
    \ and returns the number of characters in the string that are not spaces.", " \
    \   histogram = Dict{String, Int64}()\n    letters = split(test)\n    for letter\
    \ in letters\n        histogram[letter] = histogram[letter] + 1 if histogram[letter]\
    \ > 0 else 1\n    end\n    return histogram\nend\n</cell>\n<text>\nExercise 10\n\
    Write a function that takes a string and returns the number of words in the string.",
  "    histogram = Dict{String, Int64}()\n    for letter in split(test)\n        histogram[letter]\
    \ = histogram[letter] + 1 if histogram[letter] >= 1 else 1\n    histogram\nend\n\
    </cell>\n<code language=julia-1.3>\nhistogram('a b c')\n</cell>\n<code language=julia-1.3>\n\
    histogram('a b b a')\n</cell>\n<code language=julia-1.3>\nhistogram('a b c a b')\n\
    </cell>\n<code language=julia-1.3>\nhistogram('b b b b a')\n</cell>\n<code language=julia-1.3>\n\
    histogram('')\n</cell>\n<text>\nExercise 2\nWrite a function called count_letters\
    \ that takes a string and returns the number of occurrences of each letter in\
    \ the string.", "    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        if histogram[letter] == 0\n            histogram[letter]\
    \ = 1\n        else\n            histogram[letter] += 1\n        end\n    end\n\
    \    return histogram\nend\n</cell>\n<code language=julia-1.3>\nhistogram('a b\
    \ c')\n</cell>\n<code language=julia-1.3>\nhistogram('a b b a')\n</cell>\n<code\
    \ language=julia-1.3>\nhistogram('a b c a b')\n</cell>\n<code language=julia-1.3>\n\
    histogram('b b b b a')\n</cell>\n<code language=julia-1.3>\nhistogram('')\n</cell>\n\
    <text>\nExercise\nWrite a function that takes a string and returns the number\
    \ of times each letter appears in the string.", "    histogram = Dict{String,\
    \ Int64}()\n    letters = split(test)\n    for letter in letters\n        histogram[letter]\
    \ = get(histogram, letter, 0) + 1\n    return histogram\nend\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that takes a string and returns the number of words\
    \ in it.", "    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = get(histogram, letter,\
    \ 0) + 1\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5", "    histogram = Dict{String,\
    \ Int64}()\n    letters = split(test)\n    for letter in letters\n        histogram[letter]\
    \ = get(histogram, letter, 0) + 1\n    end\n    histogram\nend\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\
    \ a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b\
    \ c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b\
    \ c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b\
    \ c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b\
    \ c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b\
    \ c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n", "    histogram = Dict{String, Int64}()\n\
    \    letters = split(test)\n    for letter in letters\n        if histogram[letter]\
    \ == 0\n            histogram[letter] = 1\n        else\n            histogram[letter]\
    \ += 1\n        end\n    end\n    return histogram\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of characters\
    \ in the string that are not alphanumeric.", "    histogram = Dict{String, Int64}()\n\
    \    letters = split(test)\n    letters = sort(letters)\n    letters = unique(letters)\n\
    \    for letter in letters\n        histogram[letter] = length(filter(x -> x ==\
    \ letter, letters))\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b ", "    counts = Dict{String, Int64}()\n    for c in split(test)\n\
    \        counts[c] = get(counts, c, 0) + 1\n    return counts\nend\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\
    \ a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of characters that are\
    \ not spaces.\nExample:\ncount_non_space(\"a b c\") == 2\ncount_non_space(\"a\
    \ b b a\") == 3\ncount_non_space(\"b b b b a\") == 4\ncount_non_space(\"a b c\
    \ a b\") == 3\ncount_non_space(\"b b b b a\") == 4\ncount_non_space(\"\") == 0",
  "    histogram = Dict{String, Int64}()\n    letters = split(test)\n    letters =\
    \ sort(letters)\n    for letter in letters\n        histogram[letter] = get(histogram,\
    \ letter, 0) + 1\n    return histogram\nend", "    histogram = Dict{String, Int64}()\n\
    \    letters = split(test)\n    for letter in letters\n        histogram[letter]\
    \ = get(histogram, letter, 0) + 1\n    return histogram\nend\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.4>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.4>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"a\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"b b b b a\"\
    )\n</cell>\n<code language=julia-1.4>\nhistogram(\"b b b b a\")\n</cell>\n<code\
    \ language=julia-1.4>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.4>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.4>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.4>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.4>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.4>\n", "    histogram = Dict{String,\
    \ Int64}()\n    letters = split(test)\n    for letter in letters\n        histogram[letter]\
    \ = histogram[letter] + 1 if histogram[letter] > 0 else 1\n    return histogram\n\
    end\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>", "    histogram\
    \ = Dict{String, Int64}()\n    letters = split(test)\n    for letter in letters\n\
    \        histogram[letter] = get(histogram, letter, 0) + 1\n    end\n    return\
    \ histogram\nend", "    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = histogram[letter] + 1\
    \ if histogram[letter] > 0 else 1\n    end\n    return histogram\nend\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\
    \ a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</", "    histogram = Dict{String, Int64}()\n    for\
    \ letter in split(test)\n        histogram[letter] = histogram[letter] + 1 if\
    \ histogram[letter] > 0 else 1\n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram('a b c')\n</cell>\n<code language=julia-1.5>\nhistogram('a b b a')\n\
    </cell>\n<code language=julia-1.5>\nhistogram('a b c a b')\n</cell>\n<code language=julia-1.5>\n\
    histogram('b b b b a')\n</cell>\n<code language=julia-1.5>\nhistogram('')\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string and returns the number\
    \ of occurrences of each letter in the string.\nExample: histogram('a b c a b\
    \ c a b b b a b b b a b b b a b b b a b b b a b b b a b b b a b b b a b b b a\
    \ b b b a b b b a b b b a b b b a b b b a b b b a b b b a b b b a b b b a b b\
    \ b a b b b a b b b a b b b a b b b a b b b a b b b a b b b a b b b a b b b a\
    \ b b b a b b b a b b b a b b b a b b b a b b b a b b b a b b b a b b b a b b\
    \ b a b b b a b b b a b b b a b b b a b b b a b b b a b b b a b b b a b b b a\
    \ b b b a b b b a b b b a b b b a b b b a b b b a b b b a b b b a b b b a b b\
    \ b a b b b a b b b a b b b a b b b a b b b a b b b a b b b a b b b a b b b a\
    \ b b b a b b b a b b b a b b b a b b b a b b b a b b b a b b b a b b b a b b\
    \ b a b b b a b b b a b b b a b b b a b b b a b b b a b b b a b b b a b b b a\
    \ b b b a b b b a b b b a b b b a ", "    histogram = Dict{String, Int64}()\n\
    \    letters = split(test)\n    for letter in letters\n        histogram[letter]\
    \ = get(histogram, letter, 0) + 1\n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram('a b c')\n</cell>\n<code language=julia-1.5>\nhistogram('a b b a')\n\
    </cell>\n<code language=julia-1.5>\nhistogram('a b c a b')\n</cell>\n<code language=julia-1.5>\n\
    histogram('b b b b a')\n</cell>\n<code language=julia-1.5>\nhistogram('')\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of times a letter\
    \ appears in a string.\nThe function should take a string as input and return\
    \ a dictionary with the letter as the key and the number of times the letter appears\
    \ as the value.\nThe function should ignore case when counting.", "    histogram\
    \ = Dict{String, Int64}()\n    letters = split(test)\n    for letter in letters\n\
    \        histogram[letter] = histogram[letter] + 1 if histogram[letter] > 0 else\
    \ 1\n    return histogram\nend", "    histogram = Dict{String, Int64}()\n    letters\
    \ = split(test)\n    for letter in letters\n        histogram[letter] = get(histogram,\
    \ letter, 0) + 1\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.0>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.0>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"a b c a b\")\n</cell>\n\
    <code language=julia-1.0>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"a b c a b\")\n</cell>\n\
    <code language=julia-1.0>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"a b c a b\")\n</cell>\n\
    <code language=julia-1.0>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"a b c a b\")\n</cell>\n\
    <code language=julia-1.0>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"a b c a b\")\n</cell>\n\
    <code language=julia-1.0>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n", "    histogram = Dict{String, Int64}()\n    letters =\
    \ split(test)\n    for letter in letters\n        if histogram[letter] == 0\n\
    \            histogram[letter] = 1\n        else\n            histogram[letter]\
    \ += 1\n        end\n    end\n    return histogram\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and returns a string with all the letters\
    \ replaced by an asterisk (*).", "    histogram = Dict{String, Int64}()\n    letters\
    \ = split(test)\n    for letter in letters\n        if histogram[letter] == 0\n\
    \            histogram[letter] = 1\n        else\n            histogram[letter]\
    \ += 1\n        end\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a ", "    histogram = Dict{String, Int64}()\n\
    \    for letter in split(test)\n        histogram[letter] = get(histogram, letter,\
    \ 0) + 1\n    return histogram\nend", "    histo = Dict{String, Int64}()\n   \
    \ letters = split(test)\n    for letter in letters\n        histo[letter] = get(histo,\
    \ letter, 0) + 1\n    return histo\nend\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.0>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.0>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"a\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b ", "    histogram\
    \ = Dict{String, Int64}()\n    letters = split(test)\n    for letter in letters\n\
    \        histogram[letter] = histogram[letter] + 1 if histogram[letter] > 0 else\
    \ 1\n    end\n    return histogram\nend\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that takes a string and returns the number of words in the string.\
    \ \nThe function should ignore all non-word characters (spaces, punctuation, etc.).\n\
    The function should ignore all empty strings.\nThe function should ignore all\
    \ strings that consist of only one word.\nThe function should ignore all strings\
    \ that consist of only one word and one non-word character.\nThe function should\
    \ ignore all strings that consist of only one word and one non-word character\
    \ and one empty string.\nThe function should ignore all strings that consist of\
    \ only one word and one non-word character and one empty string and one empty\
    \ string.\nThe function should ignore all strings that consist of only one word\
    \ and one non-word character and one empty string and one empty string and one\
    \ empty string.\nThe function should ignore all strings that consist of only one\
    \ word and one non-word character and one empty string and one empty string and\
    \ one empty string and one empty string.\nThe function should ignore all strings\
    \ that consist of only one word and one non-word character and one empty string\
    \ and one empty string and one empty string and one empty string and one empty\
    \ string.\nThe function should ignore all strings that consist of only one word\
    \ and one non-word character and one empty string and one empty string and one\
    \ empty string and one empty string and one empty string and one empty string.\n\
    The function should ignore all strings that consist of only one word and one non-word\
    \ character and one empty string and one empty string and one empty string and\
    \ one empty string and one empty string and one empty string and one empty string\
    \ and one empty string.\nThe function should ignore all strings that consist of\
    \ only one word and one non-word character and one empty string and one empty\
    \ string and one empty string and one empty string and one empty string and one\
    \ empty string and one empty string and one empty string and one empty string.\n\
    The function should ignore all strings that consist of only one word and one non-word\
    \ character and one empty string and one empty string and one empty string and\
    \ one empty string and one empty string and one empty string and one empty string\
    \ and one empty string and one empty string and one empty string.\nThe function\
    \ should ignore all strings that consist of only one word and one non-word character\
    \ and one empty string and one empty string and one empty string and one empty\
    \ string and one empty string and one empty string and one empty string and ",
  "    histogram = Dict{String, Int64}()\n    letters = split(test)\n    letters =\
    \ sort(letters)\n    letters = unique(letters)\n    for letter in letters\n  \
    \      histogram[letter] = length(letters)\n    end\n    return histogram\nend\n\
    </cell>\n<text>\nExercise 4\nWrite a function that takes a string and returns\
    \ a string where all occurrences of every letter are replaced by an underscore.\
    \ \nFor example 'a b c a b' becomes 'a _ c _ _'.", "    histogram = Dict{String,\
    \ Int64}()\n    letters = split(test)\n    for letter in letters\n        if histogram[letter]\
    \ == 0\n            histogram[letter] = 1\n        else\n            histogram[letter]\
    \ += 1\n        end\n    end\n    return histogram\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of times each\
    \ letter appears in the string.\nIf the letter appears more than once, return\
    \ the letter with the highest count.\nIf the letter appears less than once, return\
    \ an empty string.", "    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    letters = sort(letters)\n    for letter in letters\n        if histogram[letter]\
    \ == 0\n            histogram[letter] = 1\n        else\n            histogram[letter]\
    \ += 1\n        end\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b\
    \ c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b\
    \ c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b\
    \ c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b\
    \ c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\n", "    histo =\
    \ Dict{String, Int64}()\n    for c in test\n        histo[c] = get(histo, c, 0)\
    \ + 1\n    return histo\nend", "    histogram = Dict{String, Int64}()\n    letters\
    \ = split(test)\n    for letter in letters\n        histogram[letter] = histogram[letter]\
    \ + 1 if histogram[letter] > 0 else 1\n    return histogram\nend\n</cell>\n<code\
    \ language=julia-1.0>\nhistogram(\"a b c\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"a b b a\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"a b c\
    \ a b\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.0>\nhistogram(\"\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a ", " \
    \   histogram = Dict{String, Int64}()\n    for letter in split(test)\n       \
    \ histogram[letter] = get(histogram, letter, 0) + 1\n    return histogram\nend",
  "    histogram = Dict{String, Int64}()\n    for letter in split(test)\n        histogram[letter]\
    \ = histogram[letter] ? histogram[letter] + 1 : 1\n    end\n    return histogram\n\
    end\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=juli",
  "    histogram = Dict{String, Int64}()\n    letters = split(test)\n    for letter\
    \ in letters\n        if histogram[letter] == 0\n            histogram[letter]\
    \ = 1\n        else\n            histogram[letter] += 1\n        end\n    end\n\
    \    return histogram\nend\n</cell>\n<code language=julia-1.0>\nhistogram(\"a\
    \ b c\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"a b b a\")\n</cell>\n\
    <code language=julia-1.0>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"a b\
    \ c a b\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"a b c a b\")\n</cell>\n\
    <code language=julia-1.0>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"a b\
    \ c a b\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"a b c a b\")\n</cell>\n\
    <code language=julia-1.0>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"a b\
    \ c a b\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"a b c a b\")\n</cell>\n\
    <code language=julia-1.0>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"a b\
    \ c a b\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"a b c a b\")\n</cell>\n\
    <code language=julia-1.0>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"a b\
    \ c a b\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"a b c a b\")\n</cell>\n\
    <code language=julia-1.0>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"a b\
    \ c a b\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"a ", "    histogram\
    \ = Dict{String, Int64}()\n    for letter in split(test)\n        histogram[letter]\
    \ = histogram[letter] + 1 if histogram[letter] >= 1 else 1\n    end\n    histogram\n\
    end\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"a b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b\
    \ c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b\
    \ c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b b b a\")\n</cell", "    histogram =\
    \ Dict{String, Int64}()\n    letters = split(test)\n    letters.sort!()\n    \n\
    \    for letter in letters\n        if histogram[letter] == 0\n            histogram[letter]\
    \ = 1\n        else\n            histogram[letter] += 1\n        end\n    end\n\
    \    return histogram\nend\n</cell>\n<code language=julia-1.5>\nhistogram('a b\
    \ c a b')\n</cell>\n<code language=julia-1.5>\nhistogram('a b b b a')\n</cell>\n\
    <code language=julia-1.5>\nhistogram('b b b b a')\n</cell>\n<code language=julia-1.5>\n\
    histogram('a b c a b')\n</cell>\n<code language=julia-1.5>\nhistogram('a b c a\
    \ b')\n</cell>\n<code language=julia-1.5>\nhistogram('a b c a b')\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram('a b c a b')\n</cell>\n<code language=julia-1.5>\n\
    histogram('a b c a b')\n</cell>\n<code language=julia-1.5>\nhistogram('a b c a\
    \ b')\n</cell>\n<code language=julia-1.5>\nhistogram('a b c a b')\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram('a b c a b')\n</cell>\n<code language=julia-1.5>\n\
    histogram('a b c a b')\n</cell>\n<code language=julia-1.5>\nhistogram('a b c a\
    \ b')\n</cell>\n<code language=julia-1.5>\nhistogram('a b c a b')\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram('a b c a b')\n</cell>\n<code language=julia-1.5>\n\
    histogram('a b c a b')\n</cell>\n<code language=julia-1.5>\nhistogram('a b c a\
    \ b')\n</cell>\n<code language=julia-1.5>\nhistogram('a b c a b')\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram('a b c a b')\n</cell>\n<code language=julia-1.5>\n\
    histogram('a b c a b')\n</cell>\n<code language=julia-1.5>\nhistogram('a b c a\
    \ b')\n</cell>\n<code language=julia-1.5>\nhistogram('a b c a b')\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram('a b c a b')\n</cell>\n<code language=julia-1.5>\n\
    histogram('a b c a b')\n</cell>\n<code language=julia-1.5>\nhistogram('a b c a\
    \ b')\n</", "    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = get(histogram, letter,\
    \ 0) + 1\n    end\n    return histogram\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of words in the string.\n\
    The function should ignore all non-word characters (spaces, punctuation, etc.).\n\
    The function should ignore all empty strings.", "    histogram = Dict{String,\
    \ Int64}()\n    letters = split(test)\n    letters = sort(letters)\n    for i\
    \ in letters\n        histogram[i] = histogram[i] + 1 if histogram[i] > 0 else\
    \ 1\n    return histogram\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of characters in the string.\nThe\
    \ function should ignore spaces.\nThe function should ignore punctuation and numbers.\n\
    The function should ignore uppercase letters.\nThe function should ignore lowercase\
    \ letters.\nThe function should ignore non-alphabetic characters.\nThe function\
    \ should ignore non-alphabetic characters and spaces.\nThe function should ignore\
    \ non-alphabetic characters and spaces and uppercase letters.\nThe function should\
    \ ignore non-alphabetic characters and spaces and uppercase letters and lowercase\
    \ letters.\nThe function should ignore non-alphabetic characters and spaces and\
    \ uppercase letters and lowercase letters and numbers.\nThe function should ignore\
    \ non-alphabetic characters and spaces and uppercase letters and lowercase letters\
    \ and numbers and punctuation.\nThe function should ignore non-alphabetic characters\
    \ and spaces and uppercase letters and lowercase letters and numbers and punctuation\
    \ and uppercase letters.\nThe function should ignore non-alphabetic characters\
    \ and spaces and uppercase letters and lowercase letters and numbers and punctuation\
    \ and uppercase letters and lowercase letters.\nThe function should ignore non-alphabetic\
    \ characters and spaces and uppercase letters and lowercase letters and numbers\
    \ and punctuation and uppercase letters and lowercase letters and numbers.\nThe\
    \ function should ignore non-alphabetic characters and spaces and uppercase letters\
    \ and lowercase letters and numbers and punctuation and uppercase letters and\
    \ lowercase letters and numbers and punctuation.\nThe function should ignore non-alphabetic\
    \ characters and spaces and uppercase letters and lowercase letters and numbers\
    \ and punctuation and uppercase letters and lowercase letters and numbers and\
    \ punctuation and uppercase letters.\nThe function should ignore non-alphabetic\
    \ characters and spaces and uppercase letters and lowercase letters and numbers\
    \ and punctuation and uppercase letters and lowercase letters and numbers and\
    \ punctuation and uppercase letters and lowercase letters.\nThe function should\
    \ ignore non-alphabetic characters and spaces and uppercase letters and lowercase\
    \ letters and numbers and punctuation and uppercase letters and lowercase letters\
    \ and numbers and punctuation and uppercase letters and lowercase letters and\
    \ numbers.\nThe function should ignore non-alphabetic characters and spaces and\
    \ uppercase letters and lowercase letters and numbers and punctuation and uppercase\
    \ letters and lowercase letters and numbers and punctuation and uppercase letter",
  "    counts = Dict{String, Int64}()\n    for letter in split(test)\n        counts[letter]\
    \ = get(counts, letter, 0) + 1\n    return counts\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of characters\
    \ in the string. \nWrite a function that takes a string and returns the number\
    \ of words in the string. \nWrite a function that takes a string and returns the\
    \ number of sentences in the string. \nWrite a function that takes a string and\
    \ returns the number of uppercase letters in the string. \nWrite a function that\
    \ takes a string and returns the number of lowercase letters in the string. \n\
    Write a function that takes a string and returns the number of digits (0-9) in\
    \ the string. \nWrite a function that takes a string and returns the number of\
    \ punctuation marks in the string. \nWrite a function that takes a string and\
    \ returns the number of symbols in the string. \nWrite a function that takes a\
    \ string and returns the number of words that start with a capital letter. \n\
    Write a function that takes a string and returns the number of words that start\
    \ with a lowercase letter. \nWrite a function that takes a string and returns\
    \ the number of words that start with a digit. \nWrite a function that takes a\
    \ string and returns the number of words that start with a punctuation mark. \n\
    Write a function that takes a string and returns the number of words that start\
    \ with a symbol. \nWrite a function that takes a string and returns the number\
    \ of words that start with a word. \nWrite a function that takes a string and\
    \ returns the number of words that start with a word and end with a letter. \n\
    Write a function that takes a string and returns the number of words that start\
    \ with a word and end with a digit. \nWrite a function that takes a string and\
    \ returns the number of words that start with a word and end with a punctuation\
    \ mark. \nWrite a function that takes a string and returns the number of words\
    \ that start with a word and end with a symbol. \nWrite a function that takes\
    \ a string and returns the number of words that start with a word and end with\
    \ a word. \nWrite a function that takes a string and returns the number of words\
    \ that start with a word and end with a word and end with a letter. \nWrite a\
    \ function that takes a string and returns the number of words that start with\
    \ a word and end with a word and end with a digit. \nWrite a function that takes\
    \ a string and returns the number of words that start with a word and end with\
    \ a word and end with a punctuation mark. \nWrite a function that takes a string\
    \ and returns the number of words that start with a word and end with a word and\
    \ end with a symbol. \nWrite a function that takes a string and returns the number\
    \ of words that start with a word and end with a word and end with a word. \n\
    Write a function that takes a string and returns the number of words that start\
    \ with a word and end with a word and end with a word and end with a letter. \n\
    Write a function that takes a string and returns the number of words that start\
    \ with a word and end with a word ", "    histogram = Dict{String, Int64}()\n\
    \    letters = split(test)\n    for letter in letters\n        if histogram[letter]\
    \ == 0\n            histogram[letter] = 1\n        else\n            histogram[letter]\
    \ += 1\n        end\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b ",
  "    histogram = Dict{String, Int64}()\n    letters = split(test)\n    for letter\
    \ in letters\n        histogram[letter] = histogram[letter] ? histogram[letter]\
    \ + 1 : 1\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of words in the string.\nThe function should ignore all\
    \ punctuation and only count the letters a-z.", "    histogram = Dict{String,\
    \ Int64}()\n    letters = split(test)\n    for letter in letters\n        histogram[letter]\
    \ = get(histogram, letter, 0) + 1\n    return histogram\nend\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.4>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.4>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"\")\n</cell>\n<text>\nExercise\nWrite a function that takes a string\
    \ and returns the number of words in the string.\nWrite a function that takes\
    \ a string and returns the number of characters in the string.\nWrite a function\
    \ that takes a string and returns the number of uppercase letters in the string.\n\
    Write a function that takes a string and returns the number of lowercase letters\
    \ in the string.\nWrite a function that takes a string and returns the number\
    \ of digits (0-9) in the string.\nWrite a function that takes a string and returns\
    \ the number of punctuation marks in the string.\nWrite a function that takes\
    \ a string and returns the number of words in the string that start with a letter.\n\
    Write a function that takes a string and returns the number of words in the string\
    \ that start with a capital letter.\nWrite a function that takes a string and\
    \ returns the number of words in the string that start with a digit.\nWrite a\
    \ function that takes a string and returns the number of words in the string that\
    \ start with a punctuation mark.\nWrite a function that takes a string and returns\
    \ the number of characters in the string that start with a letter.\nWrite a function\
    \ that takes a string and returns the number of characters in the string that\
    \ start with a capital letter.\nWrite a function that takes a string and returns\
    \ the number of characters in the string that start with a digit.\nWrite a function\
    \ that takes a string and returns the number of characters in the string that\
    \ start with a punctuation mark.\nWrite a function that takes a string and returns\
    \ the number of uppercase letters in the string that start with a letter.\nWrite\
    \ a function that takes a string and returns the number of uppercase letters in\
    \ the string that start with a capital letter.\nWrite a function that takes a\
    \ string and returns the number of uppercase letters in the string that start\
    \ with a digit.\nWrite a function that takes a string and returns the number of\
    \ uppercase letters in the string that start with a punctuation mark.\nWrite a\
    \ function that takes a string and returns the number of lowercase letters in\
    \ the string that start with a letter.\nWrite a function that takes a string and\
    \ returns the number of lowercase letters in the string that start with a capital\
    \ letter.\nWrite a function that takes a string and returns the number of lowercase\
    \ letters in the string that start with a digit.\nWrite a function that takes\
    \ a string and returns the number of lowercase letters in the string that start\
    \ with a punctuation ", "    histo = Dict{String, Int64}()\n    for c in split(test)\n\
    \        if haskey(histo, c)\n            histo[c] += 1\n        else\n      \
    \      histo[c] = 1\n        end\n    end\n    return histo\nend\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\
    \ a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>", "    histo = Dict{String, Int64}()\n    for\
    \ c in test\n        if histo[c] == 0\n            histo[c] = 1\n        else\n\
    \            histo[c] += 1\n        end\n    end\n    return histo\nend\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\
    \ a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=", "    histogram = Dict{String,\
    \ Int64}()\n    for c in split(test)\n        if !haskey(histogram, c)\n     \
    \       histogram[c] = 1\n        else\n            histogram[c] += 1\n      \
    \  end\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=", "    histogram = Dict{String, Int64}()\n\
    \    letters = split(test)\n    for letter in letters\n        histogram[letter]\
    \ = get(histogram, letter, 0) + 1\n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ number of times a letter appears in a given string.", "    histogram = Dict{String,\
    \ Int64}()\n    letters = split(test)\n    letters = sort(letters)\n    for letter\
    \ in letters\n        if histogram[letter] == 0\n            histogram[letter]\
    \ = 1\n        else\n            histogram[letter] += 1\n        end\n    end\n\
    \    return histogram\nend\n</cell>\n<code language=julia-1.5>\nhistogram(\"a\
    \ b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=juli", "    histogram = Dict{String, Int64}()\n\
    \    letters = split(test)\n    for letter in letters\n        histogram[letter]\
    \ = get(histogram, letter, 0) + 1\n    end\n    return histogram\nend\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\
    \ a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of characters in the string\
    \ that are not in the alphabet.", "    histogram = Dict{String, Int64}()\n   \
    \ letters = split(test)\n    for letter in letters\n        histogram[letter]\
    \ = histogram[letter] + 1 if histogram[letter] > 0 else 1\n    end\n    return\
    \ histogram\nend\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=",
  "    histogram = Dict{String, Int64}()\n    letters = split(test)\n    for letter\
    \ in letters\n        if histogram[letter] == 0\n            histogram[letter]\
    \ = 1\n        else\n            histogram[letter] += 1\n        end\n    end\n\
    \    return histogram\nend\n</cell>\n<code language=julia-1.5>\nhistogram(\"a\
    \ b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\n", "    histogram = Dict{String,\
    \ Int64}()\n    letters = split(test)\n    for letter in letters\n        histogram[letter]\
    \ = get(histogram, letter, 0) + 1\n    end\n    return histogram\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of words in the string. \nThe function should ignore all punctuation marks and\
    \ only count the letters a-z.", "    histogram = Dict{String, Int64}()\n    letters\
    \ = split(test)\n    for letter in letters\n        if histogram[letter] == 0\n\
    \            histogram[letter] = 1\n        else\n            histogram[letter]\
    \ += 1\n        end\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b ",
  "    counts = Dict{String, Int64}()\n    for letter in split(test)\n        counts[letter]\
    \ = get(counts, letter, 0) + 1\n    return counts\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and returns the number of words in the\
    \ string.\nThe function should ignore all non-word characters (spaces, punctuation,\
    \ etc.).\nThe function should ignore case when counting words.\nThe function should\
    \ ignore punctuation when counting words.\nThe function should ignore numbers\
    \ when counting words.\nThe function should ignore all characters that are not\
    \ letters.\nThe function should ignore all empty strings.", "    counts = Dict{String,\
    \ Int64}()\n    for c in split(test)\n        counts[c] = get(counts, c, 0) +\
    \ 1\n    \n    largest = counts[maximum(counts)]\n    \n    largest = largest.key\n\
    \    \n    largest = counts[largest]\n    \n    largest = largest.key\n    \n\
    \    largest = largest.key\n    \n    largest = largest.key\n    \n    largest\
    \ = largest.key\n    \n    largest = largest.key\n    \n    largest = largest.key\n\
    \    \n    largest = largest.key\n    \n    largest = largest.key\n    \n    largest\
    \ = largest.key\n    \n    largest = largest.key\n    \n    largest = largest.key\n\
    \    \n    largest = largest.key\n    \n    largest = largest.key\n    \n    largest\
    \ = largest.key\n    \n    largest = largest.key\n    \n    largest = largest.key\n\
    \    \n    largest = largest.key\n    \n    largest = largest.key\n    \n    largest\
    \ = largest.key\n    \n    largest = largest.key\n    \n    largest = largest.key\n\
    \    \n    largest = largest.key\n    \n    largest = largest.key\n    \n    largest\
    \ = largest.key\n    \n    largest = largest.key\n    \n    largest = largest.key\n\
    \    \n    largest = largest.key\n    \n    largest = largest.key\n    \n    largest\
    \ = largest.key\n    \n    largest = largest.key\n    \n    largest = largest.key\n\
    \    \n    largest = largest.key\n    \n    largest = largest.key\n    \n    largest\
    \ = largest.key\n    \n    largest = largest.key\n    \n    largest = largest.key\n\
    \    \n    largest = largest.key\n    \n    largest = largest.key\n    \n    largest\
    \ = largest.key\n    \n    largest = largest.key\n    \n    largest = largest.key",
  "    histogram = Dict{String, Int64}()\n    letters = split(test)\n    for letter\
    \ in letters\n        histogram[letter] = histogram[letter] ? histogram[letter]\
    \ + 1 : 1\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b ", "    histogram = Dict{String,\
    \ Int64}()\n    for letter in split(test)\n        histogram[letter] = histogram[letter]\
    \ + 1 if histogram[letter] >= 1 else 1\n    return histogram\nend", "    histogram\
    \ = Dict{String, Int64}()\n    for letter in split(test)\n        histogram[letter]\
    \ = histogram[letter] + 1 if histogram[letter] > 0 else 1\n    return histogram\n\
    end", "    histogram = Dict{String, Int64}()\n    letters = split(test)\n    for\
    \ letter in letters\n        histogram[letter] = get(histogram, letter, 0) + 1\n\
    \    return histogram\nend\n</cell>\n<code language=julia-1.5>\nhistogram(\"a\
    \ b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\")\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of times each letter appears in the string.", "    histogram = Dict{String,\
    \ Int64}()\n    letters = split(test)\n    for letter in letters\n        if histogram[letter]\
    \ == 0\n            histogram[letter] = 1\n        else\n            histogram[letter]\
    \ += 1\n        end\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b ", "    histogram = Dict{String, Int64}()\n\
    \    for letter in split(test)\n        histogram[letter] = histogram[letter]\
    \ + 1 if histogram[letter] > 0 else 1\n    return histogram\nend\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\
    \ a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"", " \
    \   histogram = Dict{String, Int64}()\n    letters = split(test)\n    for letter\
    \ in letters\n        histogram[letter] = histogram[letter] + 1 if histogram[letter]\
    \ > 0 else 1\n    return histogram\nend", "    histogram = Dict{String, Int64}()\n\
    \    letters = split(test)\n    for letter in letters\n        histogram[letter]\
    \ = get(histogram, letter, 0) + 1\n    return histogram\nend\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.3>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.3>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"\")\n</cell>\n<text>\nExercise 3\nWrite a function called count_letters\
    \ that takes a string and returns a dictionary of the letter with the most repetition\
    \ and containing the corresponding count.", "    histogram = Dict{String, Int64}()\n\
    \    letters = split(test)\n    letters = letters[2:end]\n    for letter in letters\n\
    \        histogram[letter] = histogram[letter] + 1 if histogram[letter] > 0 else\
    \ 1\n    return histogram\nend", "    histogram = Dict{String, Int64}()\n    letters\
    \ = split(test)\n    for letter in letters\n        histogram[letter] = histogram[letter]\
    \ + 1 if histogram[letter] > 0 else 1\n    end\n    return histogram\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string and returns a list of\
    \ all words in the string. \nThe function should split the string on spaces and\
    \ then remove any empty strings from the list.\nThe function should return a list\
    \ of strings. \nThe function should ignore all punctuation and only consider letters.\n\
    The function should ignore all non-letters.\nThe function should ignore all numbers\
    \ and only consider letters.\nThe function should ignore all non-letters.\nThe\
    \ function should ignore all non-letters.\nThe function should ignore all non-letters.\n\
    The function should ignore all non-letters.\nThe function should ignore all non-letters.\n\
    The function should ignore all non-letters.\nThe function should ignore all non-letters.\n\
    The function should ignore all non-letters.\nThe function should ignore all non-letters.\n\
    The function should ignore all non-letters.\nThe function should ignore all non-letters.\n\
    The function should ignore all non-letters.\nThe function should ignore all non-letters.\n\
    The function should ignore all non-letters.\nThe function should ignore all non-letters.\n\
    The function should ignore all non-letters.\nThe function should ignore all non-letters.\n\
    The function should ignore all non-letters.\nThe function should ignore all non-letters.\n\
    The function should ignore all non-letters.\nThe function should ignore all non-letters.\n\
    The function should ignore all non-letters.\nThe function should ignore all non-letters.\n\
    The function should ignore all non-letters.\nThe function should ignore all non-letters.\n\
    The function should ignore all non-letters.\nThe function should ignore all non-letters.\n\
    The function should ignore all non-letters.\nThe function should ignore all non-letters.\n\
    The function should ignore all non-letters.\nThe function should ignore all non-letters.\n\
    The function should ignore all non-letters.\nThe function should ignore all non-letters.\n\
    The function should ignore all non-letters.\nThe function should ignore all non-letters.\n\
    The function should ignore all non-letters.\nThe function should ignore all non-letters.\n\
    The function should ignore all non-letters.\nThe function should ignore all non-letters.\n\
    The function should ignore all non-letters.\nThe function should ignore all non-letters.\n\
    The function should ignore all non-letters.\nThe function should ignore all non-",
  "    histogram = Dict{String, Int64}()\n    letters = split(test)\n    for letter\
    \ in letters\n        if histogram[letter] == 0\n            histogram[letter]\
    \ = 1\n        else\n            histogram[letter] += 1\n        end\n    end\n\
    \    return histogram\nend\n</cell>\n<code language=julia-1.0>\nhistogram(\"a\
    \ b c\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"a b b a\")\n</cell>\n\
    <code language=julia-1.0>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"\")\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of times\
    \ a substring appears in a given string.\nThe substring can appear anywhere in\
    \ the string.\nThe function should work for strings of any length.\nThe function\
    \ should work for strings of any length.\nThe function should work for strings\
    \ of any length.\nThe function should work for strings of any length.\nThe function\
    \ should work for strings of any length.\nThe function should work for strings\
    \ of any length.\nThe function should work for strings of any length.\nThe function\
    \ should work for strings of any length.\nThe function should work for strings\
    \ of any length.\nThe function should work for strings of any length.\nThe function\
    \ should work for strings of any length.\nThe function should work for strings\
    \ of any length.\nThe function should work for strings of any length.\nThe function\
    \ should work for strings of any length.\nThe function should work for strings\
    \ of any length.\nThe function should work for strings of any length.\nThe function\
    \ should work for strings of any length.\nThe function should work for strings\
    \ of any length.\nThe function should work for strings of any length.\nThe function\
    \ should work for strings of any length.\nThe function should work for strings\
    \ of any length.\nThe function should work for strings of any length.\nThe function\
    \ should work for strings of any length.\nThe function should work for strings\
    \ of any length.\nThe function should work for strings of any length.\nThe function\
    \ should work for strings of any length.\nThe function should work for strings\
    \ of any length.\nThe function should work for strings of any length.\nThe function\
    \ should work for strings of any length.\nThe function should work for strings\
    \ of any length.\nThe function should work for strings of any length.\nThe function\
    \ should work for strings of any length.\nThe function should work for strings\
    \ of any length.\nThe function should work for strings of any length.\nThe function\
    \ should work for strings of any length.\nThe function should work for strings\
    \ of any length.\nThe function should work for strings of any length.\nThe function\
    \ should work for strings of any length.\nThe ", "    histogram = Dict{String,\
    \ Int64}()\n    letters = split(test)\n    for letter in letters\n        histogram[letter]\
    \ = get(histogram, letter, 0) + 1\n    return histogram\nend\n</cell>\n<code language=julia-1.0>\n\
    histogram('a b c')\n</cell>\n<code language=julia-1.0>\nhistogram('a b b a')\n\
    </cell>\n<code language=julia-1.0>\nhistogram('a b c a b')\n</cell>\n<code language=julia-1.0>\n\
    histogram('b b b b a')\n</cell>\n<code language=julia-1.0>\nhistogram('')\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string and returns the number\
    \ of characters in the string that are\nnot in the alphabet (a to z).", "    histo\
    \ = Dict{String, Int64}()\n    letters = split(test)\n    for letter in letters\n\
    \        histo[letter] = get(histo, letter, 0) + 1\n    end\n    return histo\n\
    end\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>",
  "    histogram = Dict{String, Int64}()\n    letters = split(test)\n    for letter\
    \ in letters\n        histogram[letter] = histogram[letter] + 1 if histogram[letter]\
    \ > 0 else 1\n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of words in it.", "    histogram = Dict{String, Int64}()\n\
    \    for letter in split(test)\n        histogram[letter] = histogram[letter]\
    \ + 1 if histogram[letter] > 0 else 1\n    return histogram\nend\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\
    \ a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"", " \
    \   histogram = Dict{String, Int64}()\n    letters = split(test)\n    for letter\
    \ in letters\n        histogram[letter] = get(histogram, letter, 0) + 1\n    end\n\
    \    return histogram\nend\n</cell>\n<code language=julia-1.5>\nhistogram(\"a\
    \ b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\")\n\
    </cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b ", "    histo = Dict{String, Int64}()\n  \
    \  \n    for letter in split(test)\n        if histo[letter] == 0\n          \
    \  histo[letter] = 1\n        else\n            histo[letter] += 1\n        end\n\
    \    end\n    \n    return histo\nend\n</cell>\n<code language=julia-1.5>\nhistogram(\"\
    a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n", " \
    \   histogram = Dict{String, Int64}()\n    letters = split(test)\n    for letter\
    \ in letters\n        histogram[letter] = get(histogram, letter, 0) + 1\n    return\
    \ histogram\nend\n</cell>\n<code language=julia-1.5>\nhistogram('a b c')\n</cell>\n\
    <code language=julia-1.5>\nhistogram('a b b a')\n</cell>\n<code language=julia-1.5>\n\
    histogram('a b c a b')\n</cell>\n<code language=julia-1.5>\nhistogram('b b b b\
    \ a')\n</cell>\n<code language=julia-1.5>\nhistogram('')\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of characters\
    \ in the string that are uppercase letters.", "    histogram = Dict{String, Int64}()\n\
    \    letters = split(test)\n    for letter in letters\n        histogram[letter]\
    \ = histogram[letter] + 1 if histogram[letter] > 0 else 1\n    return histogram\n\
    end", "    histogram = Dict{String, Int64}()\n    letters = split(test)\n    for\
    \ letter in letters\n        histogram[letter] = get(histogram, letter, 0) + 1\n\
    \    return histogram\nend\n</cell>\n<code language=julia-1.5>\nhistogram(\"a\
    \ b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\n", "    histogram = Dict{String, Int64}()\n    letters\
    \ = split(test)\n    for letter in letters\n        histogram[letter] = histogram[letter]\
    \ + 1 if histogram[letter] > 0 else 1\n    return histogram\nend\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram('a b c')\n</cell>\n<code language=julia-1.5>\n\
    histogram('a b b a')\n</cell>\n<code language=julia-1.5>\nhistogram('a b c a b')\n\
    </cell>\n<code language=julia-1.5>\nhistogram('b b b b a')\n</cell>\n<code language=julia-1.5>\n\
    histogram('')\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of words in the string.\nIf the string contains no words,\
    \ return 0.\nIf the string contains one word, return 1.\nIf the string contains\
    \ multiple words, return 2.", "    histogram = Dict{String, Int64}()\n    letters\
    \ = split(test)\n    for letter in letters\n        histogram[letter] = histogram[letter]\
    \ + 1 if histogram[letter] >= 1 else 1\n    return histogram\nend\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\
    \ a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a string and returns the number of words in the string.\n\
    Example:\n    count_words(\"a b c a b c d e f g h i j k l m n o p q r s t u v\
    \ w x y z\") == 15\n    count_words(\"a b c a b c d e f g h i j k l m n o p q\
    \ r s t u v w x y z\") == 3\n    count_words(\"a b c a b c d e f g h i j k l m\
    \ n o p q r s t u v w x y z\") == 0\n    count_words(\"a b c a b c d e f g h i\
    \ j k l m n o p q r s t u v w x y z\") == -1\n    count_words(\"a b c a b c d\
    \ e f g h i j k l m n o p q r s t u v w x y z\") == -2\n    count_words(\"a b\
    \ c a b c d e f g h i j k l m n o p q r s t u v w x y z\") == -3\n    count_words(\"\
    a b c a b c d e f g h i j k l m n o p q r s t u v w x y z\") == -4\n    count_words(\"\
    a b c a b c d e f g h i j k l m n o p q r s t u v w x y z\") == -5\n    count_words(\"\
    a b c a b c d e f g h i j k l m n o p q r s t u v w x y z\") == -6\n    count_words(\"\
    a b c a b c d e f g h i j k l m n o p q r s t u v w x y z\") == -7\n", "    histogram\
    \ = Dict{String, Int64}()\n    letters = split(test)\n    for letter in letters\n\
    \        histogram[letter] = histogram[letter] ? histogram[letter] + 1 : 1\n \
    \   end\n    histogram\nend\n</cell>\n<code language=julia-1.5>\nhistogram(\"\
    a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</",
  "    histogram = Dict{String, Int64}()\n    for c in split(test)\n        if !haskey(histogram,\
    \ c)\n            histogram[c] = 0\n        end\n        histogram[c] += 1\n \
    \   end\n    return histogram\nend\n</cell>\n<code language=julia-1.4>\nhistogram(\"\
    a b c\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"a b b a\")\n</cell>\n\
    <code language=julia-1.4>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"\")\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of characters in the string that are not letters.", "    histogram\
    \ = Dict{String, Int64}()\n    letters = split(test)\n    for letter in letters\n\
    \        histogram[letter] = histogram[letter] + 1 if histogram[letter] > 0 else\
    \ 1\n    return histogram\nend", "    histogram = Dict{String, Int64}()\n    letters\
    \ = split(test)\n    for letter in letters\n        if histogram[letter] == 0\n\
    \            histogram[letter] = 1\n        else\n            histogram[letter]\
    \ += 1\n        end\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns a dictionary of the letter with the most repetition and containing\
    \ the corresponding count.\nIf several letters have the same occurrence, return\
    \ all of them.\nExample: histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\nHint:\
    \ use split() to split the string into a list of characters.", "    histogram\
    \ = Dict{String, Int64}()\n    for letter in split(test)\n        histogram[letter]\
    \ = histogram[letter] + 1 if histogram[letter] > 0 else 1\n    return histogram\n\
    end\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5",
  "    histogram = Dict{String, Int64}()\n    for c in split(test)\n        histogram[c]\
    \ = get(histogram, c, 0) + 1\n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b ", "    counts\
    \ = Dict{String, Int64}()\n    for c in split(test)\n        counts[c] = get(counts,\
    \ c, 0) + 1\n    \n    return counts\nend", "    histogram = Dict{String, Int64}()\n\
    \    letters = split(test)\n    for letter in letters\n        histogram[letter]\
    \ = get(histogram, letter, 0) + 1\n    end\n    return histogram\nend\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\
    \ a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n", "    histogram = Dict{String, Int64}()\n\
    \    letters = split(test)\n    letters = sort(letters)\n    letters = unique(letters)\n\
    \    for letter in letters\n        histogram[letter] = length(filter(x -> x ==\
    \ letter, letters))\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b\
    \ c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b\
    \ c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b\
    \ c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b\
    \ c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b\
    \ c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n", "    histogram = Dict{String, Int64}()\n\
    \    letters = split(test)\n    for letter in letters\n        histogram[letter]\
    \ = histogram[letter] + 1 if histogram[letter] >= 1 else 1\n    return histogram\n\
    end\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell", "    histogram =\
    \ Dict{String, Int64}()\n    letters = split(test)\n    for letter in letters\n\
    \        histogram[letter] = get(histogram, letter, 0) + 1\n    end\n    return\
    \ histogram\nend\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of words in it.", "    histo = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histo[letter] = get(histo, letter, 0) + 1\n\
    \    return histo\nend", "    histogram = Dict{String, Int64}()\n    letters =\
    \ split(test)\n    for letter in letters\n        if histogram[letter] == 0\n\
    \            histogram[letter] = 1\n        else\n            histogram[letter]\
    \ += 1\n        end\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"a b c\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns a string where all characters are capitalized.", "    histogram\
    \ = Dict{String, Int64}()\n    letters = split(test)\n    for letter in letters\n\
    \        histogram[letter] = histogram[letter] + 1 if histogram[letter] > 0 else\
    \ 1\n    return histogram\nend", "    histo = Dict{String, Int64}()\n    for c\
    \ in test\n        histo[c] = get(histo, c, 0) + 1\n    return histo\nend\n</cell>\n\
    <code language=julia-1.1>\nhistogram(\"a b c\")\n</cell>\n<code language=julia-1.1>\n\
    histogram(\"a b b a\")\n</cell>\n<code language=julia-1.1>\nhistogram(\"a b c\
    \ a b\")\n</cell>\n<code language=julia-1.1>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.1>\nhistogram(\"\")\n</cell>\n<code language=julia-1.1>\n\
    histogram(\"a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b ", "    histogram = Dict{String, Int64}()\n    letters\
    \ = split(test)\n    for letter in letters\n        if histogram[letter] == 0\n\
    \            histogram[letter] = 1\n        else\n            histogram[letter]\
    \ += 1\n        end\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b ",
  "    histogram = Dict{String, Int64}()\n    for letter in split(test)\n        histogram[letter]\
    \ = get(histogram, letter, 0) + 1\n    return histogram\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string and returns the number of times\
    \ each letter appears.\nFor example histogram('a b c a b') == {'a': 2, 'b': 2}.",
  "    histogram = Dict{String, Int64}()\n    letters = split(test)\n    for letter\
    \ in letters\n        histogram[letter] = get(histogram, letter, 0) + 1\n    return\
    \ histogram\nend\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n",
  "    histogram = Dict{String, Int64}()\n    letters = split(test)\n    for letter\
    \ in letters\n        histogram[letter] = histogram[letter] + 1 if histogram[letter]\
    \ >= 1 else 1\n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c ", "    histogram = Dict{String,\
    \ Int64}()\n    letters = split(test)\n    for letter in letters\n        histogram[letter]\
    \ = get(histogram, letter, 0) + 1\n    return histogram\nend\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.3>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.3>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"a b c a b\")\n</cell>\n\
    <code language=julia-1.3>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"a b c a b\")\n</cell>\n\
    <code language=julia-1.3>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"a b c a b\")\n</cell>\n\
    <code language=julia-1.3>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"a b c a b\")\n</cell>\n\
    <code language=julia-1.3>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"a b c a b\")\n</cell>\n\
    <code language=julia-1.3>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=juli", "    histogram = Dict{String, Int64}()\n\
    \    letters = split(test)\n    for letter in letters\n        if histogram[letter]\
    \ == 0\n            histogram[letter] = 1\n        else\n            histogram[letter]\
    \ += 1\n        end\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.3>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.3>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.3>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.3>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.3>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.3>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.3>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"b ",
  "    histogram = Dict{String, Int64}()\n    letters = split(test)\n    for letter\
    \ in letters\n        if histogram[letter] == 0\n            histogram[letter]\
    \ = 1\n        else\n            histogram[letter] += 1\n        end\n    end\n\
    \    return histogram\nend\n</cell>\n<code language=julia-1.5>\nhistogram(\"a\
    \ b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b\
    \ c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b\
    \ c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b\
    \ c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b\
    \ c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b\
    \ c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")", " \
    \   histogram = Dict{String, Int64}()\n    for c in test\n        if histogram[c]\
    \ == 0\n            histogram[c] = 1\n        else\n            histogram[c] +=\
    \ 1\n        end\n    end\n    return histogram\nend", "    histogram = Dict{String,\
    \ Int64}()\n    letters = split(test)\n    for letter in letters\n        if histogram[letter]\
    \ == 0\n            histogram[letter] = 1\n        else\n            histogram[letter]\
    \ += 1\n        end\n    end\n    return histogram\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of characters\
    \ in the string that are uppercase letters.", "    histogram = Dict{String, Int64}()\n\
    \    letters = split(test)\n    for letter in letters\n        histogram[letter]\
    \ = get(histogram, letter, 0) + 1\n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=juli", "    histogram = Dict{String, Int64}()\n\
    \    letters = split(test)\n    for letter in letters\n        if histogram[letter]\
    \ == 0\n            histogram[letter] = 1\n        else\n            histogram[letter]\
    \ += 1\n        end\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.0>\n\
    histogram('a b c')\n</cell>\n<code language=julia-1.0>\nhistogram('a b b a')\n\
    </cell>\n<code language=julia-1.0>\nhistogram('a b c a b')\n</cell>\n<code language=julia-1.0>\n\
    histogram('b b b b a')\n</cell>\n<code language=julia-1.0>\nhistogram('')\n</cell>\n\
    <text>\nExercise: Write a function that takes a string and returns the number\
    \ of characters in the string that are not alphabetic characters. \n    \n   \
    \ Example:\n    count_non_alpha('a b c') == 2\n    count_non_alpha('a b b a')\
    \ == 4\n    count_non_alpha('a b c a b') == 4\n    count_non_alpha('b b b b a')\
    \ == 6\n    count_non_alpha('') == 0", "    histogram = Dict{String, Int64}()\n\
    \    letters = split(test)\n    for letter in letters\n        histogram[letter]\
    \ = get(histogram, letter, 0) + 1\n    end\n    return histogram\nend\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b\
    \ c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b\
    \ c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b b b a\")\n</", "    counts = Dict{String, Int64}()\n    for letter\
    \ in split(test)\n        counts[letter] = get(counts, letter, 0) + 1\n    return\
    \ counts\nend\n</cell>\n<code language=julia-1.3>\nhistogram(\"a b c\")\n</cell>\n\
    <code language=julia-1.3>\nhistogram(\"a b b a\")\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"a b c a b\")\n</cell>\n\
    <code language=julia-1.3>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"a b c a b\")\n</cell>\n\
    <code language=julia-1.3>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"a b c a b\")\n</cell>\n\
    <code language=julia-1.3>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"a b c a b\")\n</cell>\n\
    <code language=julia-1.3>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"a b c a b\")\n</cell>\n\
    <code language=julia-1.3>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"a b c a b\")\n</cell>\n\
    <code language=julia-1.3>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"", "    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        if histogram[letter] == 0\n            histogram[letter]\
    \ = 1\n        else\n            histogram[letter] += 1\n        end\n    end\n\
    \    return histogram\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a string and returns the number of times each letter appears in the string.",
  "    histogram = Dict{String, Int64}()\n    letters = split(test)\n    for letter\
    \ in letters\n        histogram[letter] = histogram[letter] + 1 if histogram[letter]\
    \ > 0 else 1\n    end\n    histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=", "    counts = Dict{String, Int64}()\n \
    \   for c in split(test)\n        counts[c] = get(counts, c, 0) + 1\n    \n  \
    \  return counts\nend\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\")\n\
    </cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a ", "    histogram = Dict{String,\
    \ Int64}()\n    letters = split(test)\n    for letter in letters\n        if histogram[letter]\
    \ == 0\n            histogram[letter] = 1\n        else\n            histogram[letter]\
    \ += 1\n        end\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"a b c\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns the number of occurrences of each letter in the string.",
  "    histogram = Dict{String, Int64}()\n    letters = split(test)\n    for letter\
    \ in letters\n        histogram[letter] = histogram[letter] + 1 if histogram[letter]\
    \ > 0 else 1\n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram('a b c')\n</cell>\n<code language=julia-1.5>\nhistogram('a b b a')\n\
    </cell>\n<code language=julia-1.5>\nhistogram('a b c a b')\n</cell>\n<code language=julia-1.5>\n\
    histogram('b b b b a')\n</cell>\n<code language=julia-1.5>\nhistogram('')\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of characters in the string. \nWrite a function that takes a string and returns\
    \ the number of uppercase characters in the string. \nWrite a function that takes\
    \ a string and returns the number of lowercase characters in the string. \nWrite\
    \ a function that takes a string and returns the number of digits (0-9) in the\
    \ string. \nWrite a function that takes a string and returns the number of spaces\
    \ ( ) in the string. \nWrite a function that takes a string and returns the number\
    \ of punctuation marks (!,@,#,$,%,^,&,*,(,),-,+,=,<,>,:,;,:,\",;,:,\",;,:,\",;,:,\"\
    ,;,:,\",;,:,\",;,:,\",;,:,\",;,:,\",;,:,\",;,:,\",;,:,\",;,:,\",;,:,\",;,:,\"\
    ,;,:,\",;,:,\",;,:,\",;,:,\",;,:,\",;,:,\",;,:,\",;,:,\",;,:,\",;,:,\",;,:,\"\
    ,;,:,\",;,:,\",;,:,\",;,:,\",;,:,\",;,:,\",;,:,\",;,:,\",;,:,\",;,:,\",;,:,\"\
    ,;,:,\",;,:,\",;,:,\",;,:,\",;,:,\",;,:,\",;,:,\",;,:,\",;,:,\",;,:,\",;,:,\"\
    ,;,:,\",;,:,\",;,:,\",;,:,\",;,:,\",;,:,\",;,:,\",;,:,\",;,:,\",;,:,\",;,:,\"\
    ,;,:,\",;,:,\",;,:,\",;,:,\",;,:,\",;,:,\",", "    histogram = Dict{String, Int64}()\n\
    \    letters = split(test)\n    for letter in letters\n        histogram[letter]\
    \ = get(histogram, letter, 0) + 1\n    end\n    return histogram\nend\n</cell>\n\
    <code language=julia-1.5>\nhistogram('a b c')\n</cell>\n<code language=julia-1.5>\n\
    histogram('a b b a')\n</cell>\n<code language=julia-1.5>\nhistogram('a b c a b')\n\
    </cell>\n<code language=julia-1.5>\nhistogram('b b b b a')\n</cell>\n<code language=julia-1.5>\n\
    histogram('')\n</cell>\n<text>\nExercise\nWrite a function that takes a string\
    \ and returns the number of words in the string.\nThe function should ignore all\
    \ non-word characters (spaces, punctuation, etc.).\nThe function should ignore\
    \ all empty strings.\nThe function should ignore all strings consisting of only\
    \ whitespace.\nThe function should ignore all strings consisting of only punctuation.\n\
    The function should ignore all strings consisting of only digits.\nThe function\
    \ should ignore all strings consisting of only lowercase letters.\nThe function\
    \ should ignore all strings consisting of only uppercase letters.\nThe function\
    \ should ignore all strings consisting of only letters that are not in the English\
    \ alphabet.\nThe function should ignore all strings consisting of only letters\
    \ that are not in the English alphabet or digits.\nThe function should ignore\
    \ all strings consisting of only letters that are not in the English alphabet\
    \ or digits or punctuation.\nThe function should ignore all strings consisting\
    \ of only letters that are not in the English alphabet or digits or punctuation\
    \ or whitespace.\nThe function should ignore all strings consisting of only letters\
    \ that are not in the English alphabet or digits or punctuation or whitespace\
    \ or empty strings.\nThe function should ignore all strings consisting of only\
    \ letters that are not in the English alphabet or digits or punctuation or whitespace\
    \ or empty strings or only whitespace.\nThe function should ignore all strings\
    \ consisting of only letters that are not in the English alphabet or digits or\
    \ punctuation or whitespace or empty strings or only whitespace or only punctuation.\n\
    The function should ignore all strings consisting of only letters that are not\
    \ in the English alphabet or digits or punctuation or whitespace or empty strings\
    \ or only whitespace or only punctuation or only digits.\nThe function should\
    \ ignore all strings consisting of only letters that are not in the English alphabet\
    \ or digits or punctuation or whitespace or empty strings or only whitespace or\
    \ only punctuation or only digits or only punctuation.\nThe function should ignore\
    \ all strings consisting of only letters that are not in the English alphabet\
    \ or digits or punctuation or whitespace or empty strings or only whitespace or\
    \ only ", "    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = histogram[letter] + 1\
    \ if histogram[letter] >= 1 else 1\n    end\n    return histogram\nend\n</cell>\n\
    <code language=julia-1.4>\nhistogram(\"a b c\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"a b b a\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"a b c\
    \ a b\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.4>\nhistogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of times each letter appears\
    \ in the string.", "    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    letters = sort(letters)\n    for letter in letters\n        histogram[letter]\
    \ = histogram[letter] + 1 if histogram[letter] >= 1 else 1\n    return histogram\n\
    end\n</cell>\n<code language=julia-1.0>\nhistogram(\"a b c\")\n</cell>\n<code\
    \ language=julia-1.0>\nhistogram(\"a b b a\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.0>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.0>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.0>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.0>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.0>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.0>\nhistogram(\"b ", "    histogram = Dict{String, Int64}()\n\
    \    letters = split(test)\n    for letter in letters\n        histogram[letter]\
    \ = histogram[letter] + 1 if histogram[letter] > 0 else 1\n    return histogram\n\
    end\n</cell>\n<code language=julia-1.5>\nhistogram('a b c')\n</cell>\n<code language=julia-1.5>\n\
    histogram('a b b a')\n</cell>\n<code language=julia-1.5>\nhistogram('a b c a b')\n\
    </cell>\n<code language=julia-1.5>\nhistogram('b b b b a')\n</cell>\n<code language=julia-1.5>\n\
    histogram('')\n</cell>\n<text>\nExercise\nWrite a function that takes a string\
    \ and returns the number of times each letter appears.", "    histogram = Dict{String,\
    \ Int64}()\n    letters = split(test)\n    for letter in letters\n        if histogram[letter]\
    \ == 0\n            histogram[letter] = 1\n        else\n            histogram[letter]\
    \ += 1\n        end\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b ",
  "    histogram = Dict{String, Int64}()\n    letters = split(test)\n    for letter\
    \ in letters\n        histogram[letter] = histogram[letter] + 1 if histogram[letter]\
    \ > 0 else 1\n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram('a b c')\n</cell>\n<code language=julia-1.5>\nhistogram('a b b a')\n\
    </cell>\n<code language=julia-1.5>\nhistogram('a b c a b')\n</cell>\n<code language=julia-1.5>\n\
    histogram('b b b b a')\n</cell>\n<code language=julia-1.5>\nhistogram('')\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of times each letter appears in the string.", "    histogram = Dict{String,\
    \ Int64}()\n    letters = split(test)\n    for letter in letters\n        histogram[letter]\
    \ = histogram[letter] + 1 if histogram[letter] > 0 else 1\n    return histogram\n\
    end\n</cell>\n<code language=julia-1.5>\nhistogram('a b c')\n</cell>\n<code language=julia-1.5>\n\
    histogram('a b b a')\n</cell>\n<code language=julia-1.5>\nhistogram('a b c a b')\n\
    </cell>\n<code language=julia-1.5>\nhistogram('b b b b a')\n</cell>\n<code language=julia-1.5>\n\
    histogram('')\n</cell>\n<text>\nExercise 2\nWrite a function count_letters(test::String)::Dict{String,\
    \ Int64} that takes a string and returns a dictionary of the letter with the most\
    \ repetition and containing the corresponding count.\nIf several letters have\
    \ the same occurrence, return all of them.\nIf no letter appears in the string,\
    \ return an empty dictionary.\nIf no letter appears in the string, return an empty\
    \ dictionary.", "    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    letters = sort(letters)\n    for letter in letters\n        histogram[letter]\
    \ = get(histogram, letter, 0) + 1\n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c ", "    histogram = Dict{String, Int64}()\n\
    \    letters = split(test)\n    for letter in letters\n        histogram[letter]\
    \ = histogram[letter] + 1 if histogram[letter] > 0 else 1\n    return histogram\n\
    end", "    histogram = Dict{String, Int64}()\n    letters = split(test)\n    for\
    \ letter in letters\n        histogram[letter] = histogram[letter] + 1 if histogram[letter]\
    \ > 0 else 1\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</", "    histogram = Dict{String, Int64}()\n    for letter in split(test)\n\
    \        histogram[letter] = histogram[letter] ? histogram[letter] + 1 : 1\n \
    \   end\n    return histogram\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string and returns the number of characters in that string that\
    \ are\nletters. \nExample: \n    count_letters(\"Hello World\") == 5\n    count_letters(\"\
    Hello World!\") == 4\n    count_letters(\"Hello World!!\") == 3\n    count_letters(\"\
    Hello World!!!\") == 1", "    histogram = Dict{String, Int64}()\n    letters =\
    \ split(test)\n    for letter in letters\n        histogram[letter] = histogram[letter]\
    \ + 1 if histogram[letter] > 0 else 1\n    return histogram\nend", "    histogram\
    \ = Dict{String, Int64}()\n    for c in test\n        histogram[c] = get(histogram,\
    \ c, 0) + 1\n    return histogram\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of characters in the string that\
    \ are not alphanumeric. \nExample: \n    count_non_alphanumeric('a b c d e f g')\
    \ == 4\n    count_non_alphanumeric('') == 0\n    count_non_alphanumeric('a b c\
    \ d e f g h i j k l m n o p q r s t u v w x y z') == 12", "    histo = Dict{String,\
    \ Int64}()\n    for c in test\n        histo[c] = histo[c] + 1 if histo[c] > 0\
    \ else 1\n    return histo\nend\n</cell>\n<code language=julia-1.4>\nhistogram(\"\
    a b c\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"a b b a\")\n</cell>\n\
    <code language=julia-1.4>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.4>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.4>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.4>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.4>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.4>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.4>\nhistogram(\"b ", "    histogram = Dict{String, Int64}()\n\
    \    letters = split(test)\n    for letter in letters\n        if histogram[letter]\
    \ == 0\n            histogram[letter] = 1\n        else\n            histogram[letter]\
    \ += 1\n        end\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")", "    histogram = Dict{String, Int64}()\n    for letter in split(test)\n\
    \        histogram[letter] = histogram[letter] + 1 if histogram[letter] > 0 else\
    \ 1\n    return histogram\nend", "    histogram = Dict{String, Int64}()\n    letters\
    \ = split(test)\n    for letter in letters\n        histogram[letter] = get(histogram,\
    \ letter, 0) + 1\n    end\n    return histogram\nend", "    histogram = Dict{String,\
    \ Int64}()\n    letters = split(test)\n    for letter in letters\n        histogram[letter]\
    \ = histogram[letter] + 1 if histogram[letter] > 0 else 1\n    return histogram\n\
    end\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>", "    histogram\
    \ = Dict{String, Int64}()\n    letters = split(test)\n    for letter in letters\n\
    \        histogram[letter] = histogram[letter] + 1 if histogram[letter] >= 1 else\
    \ 1\n    return histogram\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string and returns the number of characters in the string. \nWrite\
    \ a function that takes a string and returns the number of words in the string.\
    \ \nWrite a function that takes a string and returns the number of lines in the\
    \ string. \nWrite a function that takes a string and returns the number of characters\
    \ in the string divided by the number of words in the string.", "    histogram\
    \ = Dict{String, Int64}()\n    letters = split(test)\n    for letter in letters\n\
    \        histogram[letter] = histogram[letter] + 1 if histogram[letter] > 0 else\
    \ 1\n    return histogram\nend\n</cell>\n<code language=julia-1.5>\nhistogram(\"\
    a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-", "    histogram = Dict{String, Int64}()\n    letters =\
    \ split(test)\n    letters = sort(letters)\n    for letter in letters\n      \
    \  if histogram[letter] == 0\n            histogram[letter] = 1\n        else\n\
    \            histogram[letter] += 1\n        end\n    end\n    return histogram\n\
    end\n</cell>\n<code language=julia-1.5>\nhistogram('a b c')\n</cell>\n<code language=julia-1.5>\n\
    histogram('a b b a')\n</cell>\n<code language=julia-1.5>\nhistogram('a b c a b')\n\
    </cell>\n<code language=julia-1.5>\nhistogram('b b b b a')\n</cell>\n<code language=julia-1.5>\n\
    histogram('')\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of words in the string.\nExample:\ncount_words('a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b ",
  "    histogram = Dict{String, Int64}()\n    letters = split(test)\n    for letter\
    \ in letters\n        histogram[letter] = histogram[letter] ? histogram[letter]\
    \ + 1 : 1\n    end\n    histogram\nend\n</cell>\n<code language=julia-1.5>\nhistogram(\"\
    a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=", "    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        if histogram[letter] == 0\n            histogram[letter]\
    \ = 1\n        else\n            histogram[letter] += 1\n        end\n    end\n\
    \    return histogram\nend\n</cell>\n<code language=julia-1.5>\nhistogram(\"a\
    \ b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\")\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of times each letter appears in the string.\nThe function should\
    \ ignore case and only count the letters a-z.\nThe function should ignore non-letters\
    \ and only count the letters a-z.\nThe function should ignore non-letters and\
    \ only count the letters a-z.\nThe function should ignore non-letters and only\
    \ count the letters a-z.\nThe function should ignore non-letters and only count\
    \ the letters a-z.\nThe function should ignore non-letters and only count the\
    \ letters a-z.\nThe function should ignore non-letters and only count the letters\
    \ a-z.\nThe function should ignore non-letters and only count the letters a-z.\n\
    The function should ignore non-letters and only count the letters a-z.\nThe function\
    \ should ignore non-letters and only count the letters a-z.\nThe function should\
    \ ignore non-letters and only count the letters a-z.\nThe function should ignore\
    \ non-letters and only count the letters a-z.\nThe function should ignore non-letters\
    \ and only count the letters a-z.\nThe function should ignore non-letters and\
    \ only count the letters a-z.\nThe function should ignore non-letters and only\
    \ count the letters a-z.\nThe function should ignore non-letters and only count\
    \ the letters a-z.\nThe function should ignore non-letters and only count the\
    \ letters a-z.\nThe function should ignore non-letters and only count the letters\
    \ a-z.\nThe function should ignore non-letters and only count the letters a-z.\n\
    The function should ignore non-letters and only count the letters a-z.\nThe function\
    \ should ignore non-letters and only count the letters a-z.\nThe function should\
    \ ignore non-letters and only count the letters a-z.\nThe function should ignore\
    \ non-letters and only count the letters a-z.\nThe function should ignore non-letters\
    \ and only ", "    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = histogram[letter] + 1\
    \ if histogram[letter] > 0 else 1\n    end\n    return histogram\nend\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\
    \ a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</", "    counts = Dict{String, Int64}()\n    for c\
    \ in split(test)\n        counts[c] = get(counts, c, 0) + 1\n    return counts\n\
    end\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</", "    histogram = Dict{String, Int64}()\n    letters\
    \ = split(test)\n    for letter in letters\n        if histogram[letter] == 0\n\
    \            histogram[letter] = 1\n        else\n            histogram[letter]\
    \ += 1\n        end\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b ", "    histogram = Dict{String, Int64}()\n\
    \    letters = split(test)\n    for letter in letters\n        histogram[letter]\
    \ = histogram[letter] + 1 if histogram[letter] >= 1 else 1\n    return histogram\n\
    end", "    histogram = Dict{String, Int64}()\n    for letter in split(test)\n\
    \        histogram[letter] = histogram[letter] + 1 if histogram[letter] >= 1 else\
    \ 1\n    return histogram\nend", "    histogram = Dict{String, Int64}()\n    letters\
    \ = split(test)\n    for letter in letters\n        if histogram[letter] == 0\n\
    \            histogram[letter] = 1\n        else\n            histogram[letter]\
    \ += 1\n        end\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.4>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.4>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of characters in the string that are uppercase letters.",
  "    histogram = Dict{String, Int64}()\n    letters = split(test)\n    for letter\
    \ in letters\n        histogram[letter] = histogram[letter] + 1 if histogram[letter]\
    \ >= 1 else 1\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n", "    histogram = Dict{String, Int64}()\n    letters =\
    \ split(test)\n    letters = sort(letters)\n    letters = unique(letters)\n  \
    \  for letter in letters\n        histogram[letter] = length(letters[letter])\n\
    \    end\n    return histogram\nend\n</cell>\n<code language=julia-1.0>\nhistogram(\"\
    a b c\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"a b b a\")\n</cell>\n\
    <code language=julia-1.0>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.0>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.0>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.0>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.0>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.0>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.0>\nhistogram", "    histogram = Dict{String,\
    \ Int64}()\n    letters = split(test)\n    for letter in letters\n        histogram[letter]\
    \ = histogram[letter] + 1 if histogram[letter] > 0 else 1\n    return histogram\n\
    end\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>", "    histogram\
    \ = Dict{String, Int64}()\n    letters = split(test)\n    for letter in letters\n\
    \        histogram[letter] = get(histogram, letter, 0) + 1\n    end\n    return\
    \ histogram\nend\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n", "    histogram\
    \ = Dict{String, Int64}()\n    letters = split(test)\n    for letter in letters\n\
    \        if histogram[letter] == 0\n            histogram[letter] = 1\n      \
    \  else\n            histogram[letter] += 1\n        end\n    end\n    return\
    \ histogram\nend\n</cell>\n<code language=julia-1.5>\nhistogram('a b c')\n</cell>\n\
    <code language=julia-1.5>\nhistogram('a b b a')\n</cell>\n<code language=julia-1.5>\n\
    histogram('a b c a b')\n</cell>\n<code language=julia-1.5>\nhistogram('b b b b\
    \ a')\n</cell>\n<code language=julia-1.5>\nhistogram('')\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function count_letters(test::String) which returns a dictionary of\
    \ the letter with the most repetition and containing the corresponding count.\n\
    If several letters have the same occurrence, return all of them.", "    histogram\
    \ = Dict{String, Int64}()\n    letters = split(test)\n    letters.sort!()\n  \
    \  for letter in letters\n        histogram[letter] = histogram[letter] + 1 if\
    \ histogram[letter] > 0 else 1\n    end\n    return histogram\nend\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\
    \ a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"", "    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = histogram[letter] ? histogram[letter]\
    \ + 1 : 1\n    end\n    return histogram\nend", "    histogram = Dict{String,\
    \ Int64}()\n    letters = split(test)\n    for letter in letters\n        histogram[letter]\
    \ = histogram[letter] + 1 if histogram[letter] >= 1 else 1\n    end\n    return\
    \ histogram\nend\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string and returns the number of words\
    \ in the string.\nIf the string contains no words, return 0.\nIf the string contains\
    \ only spaces, return 1.\nIf the string contains only letters, return 1.\nIf the\
    \ string contains only numbers, return 1.\nIf the string contains only special\
    \ characters, return 1.\nIf the string contains only uppercase letters, return\
    \ 1.\nIf the string contains only lowercase letters, return 1.\nIf the string\
    \ contains only digits, return 1.\nIf the string contains only non-alphanumeric\
    \ characters, return 1.\nIf the string contains only non-alphanumeric characters\
    \ and spaces, return 2.\nIf the string contains only non-alphanumeric characters,\
    \ spaces and numbers, return 3.\nIf the string contains only non-alphanumeric\
    \ characters, spaces and uppercase letters, return 4.\nIf the string contains\
    \ only non-alphanumeric characters, spaces and lowercase letters, return 5.\n\
    If the string contains only non-alphanumeric characters, spaces and digits, return\
    \ 6.\nIf the string contains only non-alphanumeric characters, spaces and non-alphanumeric\
    \ characters, return 7.\nIf the string contains only non-alphanumeric characters,\
    \ spaces and non-alphanumeric characters and spaces, return 8.\nIf the string\
    \ contains only non-alphanumeric characters, spaces and non-alphanumeric characters\
    \ and numbers, return 9.\nIf the string contains only non-alphanumeric characters,\
    \ spaces and non-alphanumeric characters and uppercase letters, return 10.\nIf\
    \ the string contains only non-alphanumeric characters, spaces and non-alphanumeric\
    \ characters and lowercase letters, return 11.\nIf the string contains only non-alphanumeric\
    \ characters, spaces and non-alphanumeric characters and digits, return 12.\n\
    If the string contains only non-alphanumeric characters, spaces and non-alphanumeric\
    \ characters and non-alphanumeric characters, return 13.\nIf the string contains\
    \ only non-alphanumeric characters, spaces and non-alphanumeric character", " \
    \   histogram = Dict{String, Int64}()\n    letters = split(test)\n    letters\
    \ = sort(letters)\n    for letter in letters\n        histogram[letter] = get(histogram,\
    \ letter, 0) + 1\n    return histogram\nend", "    histogram = Dict{String, Int64}()\n\
    \    letters = split(test)\n    for letter in letters\n        histogram[letter]\
    \ = histogram[letter] + 1 if histogram[letter] >= 1 else 1\n    end\n    return\
    \ histogram\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of characters in the string that are not letters.", " \
    \   histogram = Dict{String, Int64}()\n    letters = split(test)\n    for letter\
    \ in letters\n        histogram[letter] = histogram[letter] ? histogram[letter]\
    \ + 1 : 1\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=", "    histogram = Dict{String, Int64}()\n\
    \    letters = split(test)\n    for letter in letters\n        histogram[letter]\
    \ = get(histogram, letter, 0) + 1\n    end\n    return histogram\nend\n</cell>\n\
    <code language=julia-1.0>\nhistogram(\"a b c\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"a b b a\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"a b c\
    \ a b\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.0>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.0>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.0>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.0>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.0>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.0>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"b b b b a\")\n</cell>\n", "    histogram = Dict{String, Int64}()\n\
    \    for c in split(test)\n        if !haskey(histogram, c)\n            histogram[c]\
    \ = 0\n        end\n        histogram[c] += 1\n    end\n    return histogram\n\
    end\n</cell>\n<code language=julia-1.4>\nhistogram('a b c')\n</cell>\n<code language=julia-1.4>\n\
    histogram('a b b a')\n</cell>\n<code language=julia-1.4>\nhistogram('a b c a b')\n\
    </cell>\n<code language=julia-1.4>\nhistogram('b b b b a')\n</cell>\n<code language=julia-1.4>\n\
    histogram('')\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of words in the string. \nThe function should ignore\
    \ all punctuation marks and only count the letters a-z.", "    histogram = Dict{String,\
    \ Int64}()\n    letters = split(test)\n    for letter in letters\n        histogram[letter]\
    \ = histogram[letter] + 1 if histogram[letter] > 0 else 1\n    end\n    return\
    \ histogram\nend", "    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        if histogram[letter] == 0\n            histogram[letter]\
    \ = 1\n        else\n            histogram[letter] += 1\n        end\n    end\n\
    \    return histogram\nend\n</cell>\n<code language=julia-1.5>\nhistogram(\"a\
    \ b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")", " \
    \   histogram = Dict{String, Int64}()\n    letters = split(test)\n    for letter\
    \ in letters\n        histogram[letter] = histogram[letter] ?? 0\n        histogram[letter]\
    \ += 1\n    return histogram\nend\n</cell>\n<code language=julia-1.5>\nhistogram(\"\
    a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\")\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ the number of words in the string.", "    histogram = Dict{String, Int64}()\n\
    \    letters = split(test)\n    for letter in letters\n        histogram[letter]\
    \ = histogram[letter] + 1 if histogram[letter] > 0 else 1\n    end\n    return\
    \ histogram\nend\n</cell>\n<code language=julia-1.5>\nhistogram('a b c')\n</cell>\n\
    <code language=julia-1.5>\nhistogram('a b b a')\n</cell>\n<code language=julia-1.5>\n\
    histogram('a b c a b')\n</cell>\n<code language=julia-1.5>\nhistogram('b b b b\
    \ a')\n</cell>\n<code language=julia-1.5>\nhistogram('')\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of words in the\
    \ string.", "    counts = Dict{String, Int64}()\n    for c in split(test)\n  \
    \      counts[c] = get(counts, c, 0) + 1\n    \n    largest = counts[maximum(counts)]\n\
    \    \n    letters = collect(keys(counts))\n    \n    return largest, letters\n\
    end\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=", "    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        if histogram[letter] == 0\n            histogram[letter]\
    \ = 1\n        else\n            histogram[letter] += 1\n        end\n    end\n\
    \    return histogram\nend\n</cell>\n<text>\nExercise 9\nWrite a function that\
    \ takes a string and returns a list of all the words in the string.\nExample:\n\
    \    words(\"a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c ", "    histogram = Dict{String, Int64}()\n\
    \    for letter in split(test)\n        histogram[letter] = histogram[letter]\
    \ + 1 if histogram[letter] >= 1 else 1\n    end\n    return histogram\nend\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\
    \ a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b\
    \ c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b\
    \ c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b\
    \ c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b\
    \ c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b\
    \ c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=", "    histogram = Dict{String,\
    \ Int64}()\n    letters = split(test)\n    for letter in letters\n        if histogram[letter]\
    \ == 0\n            histogram[letter] = 1\n        else\n            histogram[letter]\
    \ += 1\n        end\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b ",
  "    histogram = Dict{String, Int64}()\n    for c in split(test)\n        histogram[c]\
    \ = get(histogram, c, 0) + 1\n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b "]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
