name: HumanEval_95_check_dict_case
language: julia
results:
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict()\n\
    \        return false\n    \n    for key in keys(dict)\n        if islower(key)\n\
    \            return true\n        elseif isupper(key)\n            return true\n\
    \        else\n            return false\n    end\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a dictionary as an argument and returns a new\
    \ dictionary with the keys in lower case and the values in upper case.\nThe function\
    \ should return a new dictionary if the given dictionary is empty, or if the given\
    \ dictionary is not empty and the keys in lower case are not all upper case.\n\
    Examples:\ndict_to_upper_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\")) should\
    \ return Dict(\"a\" => \"APPLE\", \"b\" => \"BANANA\").\ndict_to_upper_case(Dict(\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\")) should return Dict(\"\
    a\" => \"APPLE\", \"A\" => \"BANANA\", \"B\" => \"BANANA\").\ndict_to_upper_case(Dict(\"\
    a\" => \"apple\", \"8\" => \"banana\", \"a\" => \"apple\")) should return Dict(\"\
    a\" => \"APPLE\", \"8\" => \"BANANA\", \"a\" => \"APPLE\").\ndict_to_upper_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) should return\
    \ Dict(\"Name\" => \"JOHN\", \"Age\" => \"36\", \"City\" => \"HOUSTON\").\ndict_to_upper_case(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) should return Dict(\"STATE\" => \"NC\"\
    , \"ZIP\" => \"12345\").\ndict_to_upper_case(Dict()) should return Dict().\ndict_to_upper_case(Dict(\"\
    a\" => \"apple\", \"b\" => \"banana\", \"c\" => \"carrot\")) should return Dict(\"\
    a\" => \"APPLE\", \"b\" => \"BANANA\", \"c\" => \"CARROT\").\ndict_to_upper_case(Dict(\"\
    a\" => \"apple\", \"b\" => \"banana\", \"c\" => \"carrot\", \"d\" => \"dog\"))\
    \ should return Dict(\"a\" => \"APPLE\", \"b\" => \"BANANA\", \"c\" => \"CARROT\"\
    , \"d\" => \"DOG\").\ndict_to_upper_case(Dict(\"a\" => \"apple\", \"b\" => \"\
    banana\", \"c\" => \"carrot\", \"d\" => \"dog\", \"e\" => \"elephant\")) should\
    \ return Dict(\"a\" => \"APPLE\", \"b\" => \"BANANA\", \"c\" => \"CARROT\", \"\
    d\" => \"DOG\", \"e\" => \"ELEPHANT\nusing Test\n\n@testset begin\n\ncandidate\
    \ = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" =>\
    \ \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\"\
    \ => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t\
    @test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t\
    @test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\
    \t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpxm2t19s3.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpxm2t19s3.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict{String,\
    \ String}()\n        return true\n    end\n    \n    for k in keys(dict)\n   \
    \     if islower(k)\n            return false\n        end\n    end\n    \n  \
    \  for k in keys(dict)\n        if isupper(k)\n            return false\n    \
    \    end\n    end\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp3cfgeynv.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmp3cfgeynv.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    true = false\
    \ \n    for key in keys(dict)\n        if islower(key)\n            true = true\n\
    \        elseif isupper(key)\n            true = true\n        else\n        \
    \    true = false\n        end\n    end\n    return true\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp1c_sj5a1.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmp1c_sj5a1.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    true = true\n\
    \    for key in dict\n        if islower(key)\n            true = false\n    \
    \    else\n            true = true\n    end\n    return true\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp9dth0mea.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmp9dth0mea.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict{String,\
    \ String}()\n        return true\n    end\n    \n    for key in keys(dict)\n \
    \       if islower(key)\n            return false\n        end\n    end\n    \n\
    \    for key in keys(dict)\n        if isupper(key)\n            return false\n\
    \        end\n    end\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp32zzhcvg.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmp32zzhcvg.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict()\n\
    \        return false\n    else\n        true\n    end\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of characters\
    \ in that string.\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpaib4fdo4.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpaib4fdo4.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    true = true\n\
    \    for key in keys(dict)\n        if islower(key) || isupper(key)\n        \
    \    true = false\n        end\n    end\n    return true\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpbm4ci5_n.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpbm4ci5_n.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    true = true\n    for\
    \ key in keys(dict)\n        if islower(key) || isupper(key)\n            true\
    \ = false\n        end\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpbvuez06b.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpbvuez06b.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict{String,\
    \ String}()\n        true\n    else\n        false\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmph3n6mh9f.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmph3n6mh9f.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict{String,\
    \ String}()\n        return true\n    else\n        true = false\n        for\
    \ key in dict\n            if islower(key)\n                true = true\n    \
    \        elseif isupper(key)\n                true = true\n            else\n\
    \                true = false\n        end\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpg3gjp_t3.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpg3gjp_t3.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict{String,\
    \ String}()\n        true\n    else\n        false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpanoeuy1w.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpanoeuy1w.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    true = true\n    for\
    \ key in keys(dict)\n        if islower(key)\n            true = false\n     \
    \   elseif isupper(key)\n            true = false\n        end\n    end\n    return\
    \ true\nend\n</cell>\n<text>\nExercise 4\nWrite a function that takes a string\
    \ and returns the number of characters in that string.\nExamples:\ncount_chars(\"\
    apple\") should return 5.\ncount_chars(\"banana\") should return 6.\ncount_chars(\"\
    hello\") should return 0.\ncount_chars(\"\") should return 0.\ncount_chars(\"\
    \ \") should return 0.\ncount_chars(\" a\") should return 1.\ncount_chars(\"a\
    \ \") should return 1.\ncount_chars(\"a b\") should return 2.\ncount_chars(\"\
    a b c\") should return 3.\ncount_chars(\"a b c d\") should return 4.\ncount_chars(\"\
    a b c d e\") should return 5.\ncount_chars(\"a b c d e f\") should return 6.\n\
    count_chars(\"a b c d e f g\") should return 7.\ncount_chars(\"a b c d e f g h\"\
    ) should return 8.\ncount_chars(\"a b c d e f g h i\") should return 9.\ncount_chars(\"\
    a b c d e f g h i j\") should return 10.\ncount_chars(\"a b c d e f g h i j k\"\
    ) should return 11.\ncount_chars(\"a b c d e f g h i j k l\") should return 12.\n\
    count_chars(\"a b c d e f g h i j k l m\") should return 13.\ncount_chars(\"a\
    \ b c d e f g h i j k l m n\") should return 14.\ncount_chars(\"a b c d e f g\
    \ h i j k l m n o\") should return 15.\ncount_chars(\"a b c d e f g h i j k l\
    \ m n o p\") should return 16.\ncount_chars(\"a b c d e f g h i j k l m n o p\
    \ q\") should return 17.\ncount_chars(\"a b c d e f g h i j k l m n o p q r\"\
    ) should return 18.\ncount_chars(\"a b c d e f g h i j k l m n o p q r s\") should\
    \ return 19.\ncount_chars(\"a b c d e f g h i j k l m n o p q r s t\") should\
    \ return 20.\ncount_chars(\"a b c d e f g h i j k l m n o p q r s t u\nusing Test\n\
    \n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpd9xs9p37.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpd9xs9p37.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    true = true\n    for\
    \ key in keys(dict)\n        if islower(key) || isupper(key)\n            true\
    \ = false\n        end\n    end\n    return true\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpb1c0lcp_.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpb1c0lcp_.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict{String,\
    \ String}()\n        return true\n    \n    for k in keys(dict)\n        if islower(k)\n\
    \            return false\n        if isupper(k)\n            return false\n \
    \   end\n    return true\nend\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"apple\", \"b\" => \"banana\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    ))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"apple\"\
    , \"8\" => \"banana\", \"a\" => \"apple\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    ))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"STATE\" => \"NC\"\
    , \"ZIP\" => \"12345\" ))\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a dictionary as an argument and returns a new dictionary where all keys\
    \ are converted to upper case. \nThe function should return a new dictionary if\
    \ the given dictionary is empty. \nThe function should return a new dictionary\
    \ if the given dictionary is not empty. \nThe function should return a new dictionary\
    \ if the given dictionary is not empty and all keys are converted to upper case.\
    \ \nThe function should return a new dictionary if the given dictionary is not\
    \ empty and some keys are not converted to upper case. \nThe function should return\
    \ a new dictionary if the given dictionary is not empty and some keys are converted\
    \ to upper case. \nThe function should return a new dictionary if the given dictionary\
    \ is not empty and some keys are not converted to upper case. \nThe function should\
    \ return a new dictionary if the given dictionary is not empty and some keys are\
    \ not converted to upper case. \nThe function should return a new dictionary if\
    \ the given dictionary is not empty and some keys are not converted to upper case.\
    \ \nThe function should return a new dictionary if the given dictionary is not\
    \ empty and some keys are not converted to upper case. \nThe function should return\
    \ a new dictionary if the given dictionary is not empty and some keys are not\
    \ converted to upper case. \nThe function should return a new dictionary if the\
    \ given dictionary is not empty and some keys are not converted to upper case.\
    \ \nThe function should return a new dictionary if the given dictionary is not\
    \ empty and some keys are not converted to upper case. \nThe function should return\
    \ a new dictionary if the given dictionary is not empty and some keys are not\
    \ converted to upper case. \nThe function should return a new dictionary if the\
    \ given dictionary is not empty and some keys are not converted to upper case.\
    \ \nThe function should return a new dictionary if the given dictionary is not\
    \ empty and \nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmprf3zth25.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmprf3zth25.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict{String,\
    \ String}()\n        return true\n    \n    for k in keys(dict)\n        if islower(k)\n\
    \            return false\n        if isupper(k)\n            return false\n \
    \   end\n    return true\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpf_lulkz5.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpf_lulkz5.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict{String,\
    \ String}()\n        return true\n    \n    for k in keys(dict)\n        if islower(k)\n\
    \            return false\n        if isupper(k)\n            return false\n \
    \   end\n    return true\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpct_08me0.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpct_08me0.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    true = true\n    for\
    \ key in keys(dict)\n        if islower(key)\n            true = false\n     \
    \   elseif isupper(key)\n            true = false\n        end\n    end\n    return\
    \ true\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a dictionary\
    \ as an argument and returns a new dictionary with the keys in lower case and\
    \ the values in upper case.\nThe function should return a new dictionary if the\
    \ given dictionary is empty or if the given dictionary has keys that are not strings\
    \ or if the given dictionary has keys that are not strings in upper case.\nExamples:\n\
    convert_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return {\"a\":\"\
    apple\", \"b\":\"banana\"}.\nconvert_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return {\"a\":\"apple\", \"b\":\"banana\"}.\nconvert_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return {\"a\":\"apple\"\
    , \"8\":\"banana\"}.\nconvert_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"}) should return {\"name\":\"John\", \"age\":\"36\", \"city\"\
    :\"houston\"}.\nconvert_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should\
    \ return {\"state\":\"NC\", \"zip\":\"12345\"}.\nconvert_dict_case({}) should\
    \ return {}.\nconvert_dict_case({\"a\":\"apple\", \"b\":\"banana\", \"c\":\"carrot\"\
    }) should return {\"a\":\"apple\", \"b\":\"banana\", \"c\":\"carrot\"}.\nconvert_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\", \"c\":\"carrot\", \"d\":\"dog\"}) should return\
    \ {\"a\":\"apple\", \"b\":\"banana\", \"c\":\"carrot\", \"d\":\"dog\"}.\nconvert_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\", \"c\":\"carrot\", \"d\":\"dog\", \"e\":\"elephant\"\
    }) should return {\"a\":\"apple\", \"b\":\"banana\", \"c\":\"carrot\", \"d\":\"\
    dog\", \"e\":\"elephant\"}.\nconvert_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    , \"c\":\"carrot\", \"d\":\"dog\", \"e\":\"elephant\", \"f\":\"fish\"}) should\
    \ return {\"a\":\"apple\", \"b\":\"banana\", \"c\":\"carrot\", \"d\":\"dog\",\
    \ \"e\":\"elephant\", \"f\":\"fish\"}.\nconvert_dict_case({\"a\":\"apple\", \"\
    b\":\"banana\", \"c\":\"carrot\", \"d\":\"dog\", \"e\nusing Test\n\n@testset begin\n\
    \ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpgy48byn0.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpgy48byn0.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict{String,\
    \ String}()\n        return true\n    \n    true = false\n    for key in keys(dict)\n\
    \        if islower(key)\n            true = true\n        elseif isupper(key)\n\
    \            true = true\n        else\n            true = false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp08_nfdmb.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmp08_nfdmb.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict{String,\
    \ String}()\n        return true\n    \n    for key in keys(dict)\n        if\
    \ islower(key)\n            return false\n        if isupper(key)\n          \
    \  return false\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n</cell>\n<code\
    \ language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"apple\", \"8\" => \"banana\", \"a\" => \"apple\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    ))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"STATE\" => \"NC\"\
    , \"ZIP\" => \"12345\" ))\n</cell>\n<text>\nExercise 2: Write a function that\
    \ takes a dictionary as an argument and returns a new dictionary where all keys\
    \ are strings in lower case and all values are strings in upper case. \nThe function\
    \ should return a new dictionary if the given dictionary is empty or if the keys\
    \ or values of the dictionary are not strings. \nExamples:\nconvert_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return {\"a\":\"apple\", \"b\":\"banana\"\
    }.\nconvert_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return {\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}.\nconvert_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return {\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}.\nconvert_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return {\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}.\nconvert_dict_case({\"STATE\":\"NC\", \"ZIP\"\
    :\"12345\" }) should return {\"STATE\":\"NC\", \"ZIP\":\"12345\" }.\nconvert_dict_case({})\
    \ should return {}.\nconvert_dict_case({\"a\":\"apple\", \"b\":\"banana\", \"\
    c\":\"carrot\"}) should return {\"a\":\"apple\", \"b\":\"banana\", \"c\":\"carrot\"\
    }.\nconvert_dict_case({\"a\":\"apple\", \"b\":\"banana\", \"c\":\"carrot\", \"\
    d\":\"dog\"}) should return {\"\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpyboie0dn.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpyboie0dn.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    true = true\n    for\
    \ key in keys(dict)\n        if islower(key)\n            true = false\n     \
    \   elseif isupper(key)\n            true = false\n        end\n    end\n    return\
    \ true\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp7judn4lp.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmp7judn4lp.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    true = true\n    for\
    \ key in dict\n        if islower(key)\n            true = false\n        else\n\
    \            true = true\n        end\n    end\n    return true\nend\n</cell>\n\
    <code language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp8ey5_agb.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmp8ey5_agb.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict{String,\
    \ String}()\n        return true\n    \n    true = false\n    for key in keys(dict)\n\
    \        if islower(key)\n            true = true\n        elseif isupper(key)\n\
    \            true = true\n        else\n            true = false\n        end\n\
    \    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmps25fwc62.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmps25fwc62.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict{String,\
    \ String}()\n        return true\n    \n    for k in keys(dict)\n        if islower(k)\n\
    \            return false\n        if isupper(k)\n            return false\n \
    \   end\n    return true\nend\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"apple\", \"b\" => \"banana\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    ))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"apple\"\
    , \"8\" => \"banana\", \"a\" => \"apple\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    ))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"STATE\" => \"NC\"\
    , \"ZIP\" => \"12345\" ))\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a dictionary and returns a new dictionary where all keys are converted\
    \ to lower case and all values are converted to upper case.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp60v5jcyx.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmp60v5jcyx.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict()\n\
    \        return false\n    \n    for k in keys(dict)\n        if islower(k)\n\
    \            return false\n        if isupper(k)\n            return false\n \
    \   end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpq4azs8wq.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpq4azs8wq.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict()\n\
    \        return true\n    \n    true = false\n    for key in dict\n        if\
    \ islower(key)\n            true = true\n        elseif isupper(key)\n       \
    \     true = true\n        else\n            true = false\n        end\n    end\n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"apple\", \"b\" => \"banana\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    ))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"apple\"\
    , \"8\" => \"banana\", \"a\" => \"apple\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    ))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"STATE\" => \"NC\"\
    , \"ZIP\" => \"12345\" ))\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a string and returns the number of characters in that string.\nExamples:\n\
    count_chars(\"apple\") should return 5.\ncount_chars(\"banana\") should return\
    \ 6.\ncount_chars(\"apple\") should return 5.\ncount_chars(\"banana\") should\
    \ return 6.\ncount_chars(\"apple\") should return 5.\ncount_chars(\"banana\")\
    \ should return 6.\ncount_chars(\"apple\") should return 5.\ncount_chars(\"banana\"\
    ) should return 6.\ncount_chars(\"apple\") should return 5.\ncount_chars(\"banana\"\
    ) should return 6.\ncount_chars(\"apple\") should return 5.\ncount_chars(\"banana\"\
    ) should return 6.\ncount_chars(\"apple\") should return 5.\ncount_chars(\"banana\"\
    ) should return 6.\ncount_chars(\"apple\") should return 5.\ncount_chars(\"banana\"\
    ) should return 6.\ncount_chars(\"apple\") should return 5.\ncount_chars(\"banana\"\
    ) should return 6.\ncount_chars(\"apple\") should return 5.\ncount_chars(\"banana\"\
    ) should return 6.\ncount_chars(\"apple\") should return 5.\ncount_chars(\"banana\"\
    ) should return 6.\ncount_chars(\"apple\") should return 5.\ncount_chars(\"banana\"\
    ) should return 6.\ncount_chars(\"apple\") should return 5.\ncount_chars(\"banana\"\
    ) should return 6.\ncount_chars(\"apple\") should return 5.\ncount_chars(\"banana\"\
    ) should return 6.\ncount_chars(\"apple\") should return 5.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpfrvsgl42.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpfrvsgl42.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    true = true\n\
    \    for key in keys(dict)\n        if islower(key)\n            true = false\n\
    \        else\n            true = true\n    end\n    return true\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmprt3hr9p_.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmprt3hr9p_.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict{String,\
    \ String}()\n        return true\n    \n    for k in keys(dict)\n        if islower(k)\n\
    \            return false\n        if isupper(k)\n            return false\n \
    \   end\n    return true\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpzefhqpgb.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpzefhqpgb.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict()\n\
    \        return true\n    \n    for key in keys(dict)\n        if islower(key)\n\
    \            return false\n        if isupper(key)\n            return false\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpejzqd2va.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpejzqd2va.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict{String,\
    \ String}()\n        return true\n    \n    for key in keys(dict)\n        if\
    \ islower(key)\n            return false\n        if isupper(key)\n          \
    \  return false\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp4264s2aj.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmp4264s2aj.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict{String,\
    \ String}()\n        return true\n    end\n    \n    for key in keys(dict)\n \
    \       if islower(key)\n            return false\n        end\n    end\n    \n\
    \    for key in keys(dict)\n        if isupper(key)\n            return false\n\
    \        end\n    end\n    \n    return true\nend\n</cell>\n<code language=julia-1.3>\n\
    check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n</cell>\n<code\
    \ language=julia-1.3>\ncheck_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"))\n</cell>\n<code language=julia-1.3>\ncheck_dict_case(Dict(\"\
    a\" => \"apple\", \"8\" => \"banana\", \"a\" => \"apple\"))\n</cell>\n<code language=julia-1.3>\n\
    check_dict_case(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    ))\n</cell>\n<code language=julia-1.3>\ncheck_dict_case(Dict(\"STATE\" => \"NC\"\
    , \"ZIP\" => \"12345\" ))\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a dictionary as an argument and returns a new dictionary where the keys\
    \ are in upper case and the values are in lower case.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpygpg__mw.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpygpg__mw.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict{String,\
    \ String}()\n        return true\n    end\n    \n    for k in keys(dict)\n   \
    \     if islower(k)\n            return false\n        end\n    end\n    \n  \
    \  for k in keys(dict)\n        if isupper(k)\n            return false\n    \
    \    end\n    end\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpoj3z_e52.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpoj3z_e52.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict{String,\
    \ String}()\n        return true\n    \n    for key in dict\n        if islower(key)\n\
    \            return false\n        if isupper(key)\n            return false\n\
    \    end\n    return true\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns a string with all letters in lower case and\
    \ all letters in upper case. \nExamples:\nconvert_case(\"apple\") should return\
    \ \"apple\".\nconvert_case(\"banana\") should return \"BANANA\".\nconvert_case(\"\
    Apple\") should return \"apple\".\nconvert_case(\"BANANA\") should return \"BANANA\"\
    .\nconvert_case(\"APPLE\") should return \"apple\".\nconvert_case(\"BANANA\")\
    \ should return \"BANANA\".\nconvert_case(\"APPLE\") should return \"apple\".\n\
    convert_case(\"BANANA\") should return \"BANANA\".\nconvert_case(\"APPLE\") should\
    \ return \"apple\".\nconvert_case(\"BANANA\") should return \"BANANA\".\nconvert_case(\"\
    APPLE\") should return \"apple\".\nconvert_case(\"BANANA\") should return \"BANANA\"\
    .\nconvert_case(\"APPLE\") should return \"apple\".\nconvert_case(\"BANANA\")\
    \ should return \"BANANA\".\nconvert_case(\"APPLE\") should return \"apple\".\n\
    convert_case(\"BANANA\") should return \"BANANA\".\nconvert_case(\"APPLE\") should\
    \ return \"apple\".\nconvert_case(\"BANANA\") should return \"BANANA\".\nconvert_case(\"\
    APPLE\") should return \"apple\".\nconvert_case(\"BANANA\") should return \"BANANA\"\
    .\nconvert_case(\"APPLE\") should return \"apple\".\nconvert_case(\"BANANA\")\
    \ should return \"BANANA\".\nconvert_case(\"APPLE\") should return \"apple\".\n\
    convert_case(\"BANANA\") should return \"BANANA\".\nconvert_case(\"APPLE\") should\
    \ return \"apple\".\nconvert_case(\"BANANA\") should return \"BANANA\".\nconvert_case(\"\
    APPLE\") should return \"apple\".\nconvert_case(\"BANANA\") should return \"BANANA\"\
    .\nconvert_case(\"APPLE\") should return \"apple\".\nconvert_case(\"BANANA\")\
    \ should return \"BANANA\".\nconvert_case(\"APPLE\") should return \"apple\".\n\
    convert_case(\"BANAN\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpwr7jsxr8.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpwr7jsxr8.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict{String,\
    \ String}()\n        return true\n    \n    for key in dict\n        if islower(key)\n\
    \            return false\n        if isupper(key)\n            return false\n\
    \    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpkvbvx1wy.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpkvbvx1wy.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict{String,\
    \ String}()\n        return true\n    \n    true = false\n    for key in dict\n\
    \        if islower(key)\n            true = true\n        elseif isupper(key)\n\
    \            true = true\n        else\n            true = false\n        end\n\
    \    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpf0zm0v2u.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpf0zm0v2u.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict()\n\
    \        return false\n    \n    true = true\n    for key in dict\n        if\
    \ islower(key)\n            true = false\n        elseif isupper(key)\n      \
    \      true = false\n        end\n    end\n    return true\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmprfahnkr2.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmprfahnkr2.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict{String,\
    \ String}()\n        return true\n    \n    for key in keys(dict)\n        if\
    \ islower(key)\n            return false\n        if isupper(key)\n          \
    \  return false\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpwq_xarii.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpwq_xarii.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict{String,\
    \ String}()\n        return true\n    \n    for k in keys(dict)\n        if islower(k)\n\
    \            return false\n        if isupper(k)\n            return false\n \
    \   end\n    return true\nend\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"apple\", \"b\" => \"banana\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    ))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"apple\"\
    , \"8\" => \"banana\", \"a\" => \"apple\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    ))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"STATE\" => \"NC\"\
    , \"ZIP\" => \"12345\" ))\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a string and returns a string with all the characters in lower case and\
    \ all the characters in upper case.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" =>\
    \ \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\"\
    \ => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t\
    @test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t\
    @test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\
    \t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp1z9sv3s4.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmp1z9sv3s4.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict{String,\
    \ String}()\n        return true\n    \n    true = false\n    for key in keys(dict)\n\
    \        if islower(key)\n            true = true\n        elseif isupper(key)\n\
    \            true = true\n        else\n            true = false\n        end\n\
    \    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpz0kz2ilh.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpz0kz2ilh.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if dict == Dict{String,\
    \ String}()\n        return true\n    else\n        true = false\n        for\
    \ key in dict\n            if islower(key)\n                true = true\n    \
    \        elseif isupper(key)\n                true = true\n            else\n\
    \                true = false\n        end\n        return true\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a dictionary, return True\
    \ if all keys are strings in lower \n    case or all keys are strings in upper\
    \ case, else return False.\n    The function should return False is the given\
    \ dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"\
    b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"\
    A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpwghnlrsp.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpwghnlrsp.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict{String,\
    \ String}()\n        return true\n    \n    for k in keys(dict)\n        if islower(k)\n\
    \            return false\n        if isupper(k)\n            return false\n \
    \   end\n    return true\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpj4dvox49.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpj4dvox49.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict{String,\
    \ String}()\n        return true\n    \n    for key in keys(dict)\n        if\
    \ islower(key)\n            return false\n        if isupper(key)\n          \
    \  return false\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpgzs4nhlg.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpgzs4nhlg.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict{String,\
    \ String}()\n        return true\n    \n    for key in keys(dict)\n        if\
    \ islower(key)\n            return false\n        if isupper(key)\n          \
    \  return false\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n</cell>\n<code\
    \ language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"apple\", \"8\" => \"banana\", \"a\" => \"apple\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    ))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"STATE\" => \"NC\"\
    , \"ZIP\" => \"12345\" ))\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a dictionary as an argument and returns a new dictionary where all keys\
    \ are strings in lower case and all values are strings in upper case.\nusing Test\n\
    \n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpi3th6190.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpi3th6190.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict()\n\
    \        return false\n    \n    true = false\n    for key in dict\n        if\
    \ islower(key)\n            true = true\n        elseif isupper(key)\n       \
    \     true = true\n        end\n    end\n    return true\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpe08t6dcc.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpe08t6dcc.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict{String,\
    \ String}()\n        return true\n    \n    for k in keys(dict)\n        if islower(k)\n\
    \            return false\n        if isupper(k)\n            return false\n \
    \   end\n    return true\nend\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"apple\", \"b\" => \"banana\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    ))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"apple\"\
    , \"8\" => \"banana\", \"a\" => \"apple\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    ))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"STATE\" => \"NC\"\
    , \"ZIP\" => \"12345\" ))\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a dictionary as an argument and returns a new dictionary where all keys\
    \ are strings in lower case and all values are strings in upper case. \nThe function\
    \ should return an empty dictionary if the given dictionary is empty.\nExamples:\n\
    make_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return Dict(\"a\" =>\
    \ \"APPLE\", \"b\" => \"BANANA\").\nmake_dict_case({\"a\":\"apple\", \"A\":\"\
    banana\", \"B\":\"banana\"}) should return Dict(\"a\" => \"APPLE\", \"A\" => \"\
    BANANA\", \"B\" => \"BANANA\").\nmake_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return Dict(\"a\" => \"APPLE\", \"8\" => \"BANANA\"\
    , \"a\" => \"APPLE\").\nmake_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"}) should return Dict(\"Name\" => \"JOHN\", \"Age\" => \"36\"\
    , \"City\" => \"HOUSTON\").\nmake_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\"\
    \ }) should return Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\").\nHint: Use\
    \ islower() and isupper() functions.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" =>\
    \ \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\"\
    \ => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t\
    @test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t\
    @test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\
    \t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp8m2v4047.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmp8m2v4047.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict{String,\
    \ String}()\n        return true\n    \n    for k in keys(dict)\n        if islower(k)\n\
    \            return false\n        if isupper(k)\n            return false\n \
    \   end\n    return true\nend\n</cell>\n<code language=julia-1.3>\nusing Test\n\
    \n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp3450mw0d.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmp3450mw0d.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if dict == Dict{String,\
    \ String}() \n        false\n    else\n        true\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp5tnrvm1q.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmp5tnrvm1q.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict{String,\
    \ String}()\n        return true\n    \n    for key in keys(dict)\n        if\
    \ islower(key)\n            return false\n        if isupper(key)\n          \
    \  return false\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpefkvtf6z.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpefkvtf6z.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict{String,\
    \ String}()\n        return true\n    \n    for key in keys(dict)\n        if\
    \ islower(key)\n            return false\n        if isupper(key)\n          \
    \  return false\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n</cell>\n<code\
    \ language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"apple\", \"8\" => \"banana\", \"a\" => \"apple\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    ))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"STATE\" => \"NC\"\
    , \"ZIP\" => \"12345\" ))\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a dictionary as an argument and returns a new dictionary where all keys\
    \ are converted to upper case.\nThe function should return a new dictionary if\
    \ the given dictionary is not empty and all keys are converted to upper case.\n\
    Examples:\nconvert_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\")) should\
    \ return Dict(\"A\" => \"apple\", \"B\" => \"banana\").\nconvert_dict_case(Dict(\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\")) should return Dict(\"\
    A\" => \"apple\", \"B\" => \"banana\").\nconvert_dict_case(Dict(\"a\" => \"apple\"\
    , \"8\" => \"banana\", \"a\" => \"apple\")) should return Dict(\"A\" => \"apple\"\
    , \"B\" => \"banana\").\nconvert_dict_case(Dict(\"Name\" => \"John\", \"Age\"\
    \ => \"36\", \"City\" => \"Houston\")) should return Dict(\"NAME\" => \"John\"\
    , \"AGE\" => \"36\", \"CITY\" => \"Houston\").\nconvert_dict_case(Dict(\"STATE\"\
    \ => \"NC\", \"ZIP\" => \"12345\" )) should return Dict(\"STATE\" => \"NC\", \"\
    ZIP\" => \"12345\" ).\nconvert_dict_case(Dict()) should return Dict().\nconvert_dict_case(Dict(\"\
    a\" => \"apple\", \"b\" => \"banana\", \"c\" => \"carrot\")) should return Dict(\"\
    A\" => \"apple\", \"B\" => \"banana\", \"C\" => \"carrot\").\nconvert_dict_case(Dict(\"\
    \nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp5mwa2eew.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmp5mwa2eew.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    true = true\n\
    \    for key in keys(dict)\n        if islower(key) || isupper(key)\n        \
    \    true = false\n        end\n    end\n    return true\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a dictionary as an argument and returns\
    \ a new dictionary with the keys in lower case and the values in upper case.\n\
    The function should return a new dictionary if the given dictionary is not empty.\
    \ Otherwise it should return an empty dictionary.\nExamples:\ndict_to_upper_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return {\"a\":\"APPLE\", \"b\":\"BANANA\"\
    }.\ndict_to_upper_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\
    \ should return {\"a\":\"APPLE\", \"A\":\"BANANA\", \"B\":\"BANANA\"}.\ndict_to_upper_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return {\"a\":\"APPLE\"\
    , \"8\":\"BANANA\", \"a\":\"APPLE\"}.\ndict_to_upper_case({\"Name\":\"John\",\
    \ \"Age\":\"36\", \"City\":\"Houston\"}) should return {\"name\":\"JOHN\", \"\
    age\":\"36\", \"city\":\"HOUSTON\"}.\ndict_to_upper_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" }) should return {\"state\":\"NC\", \"zip\":\"12345\"}.\ndict_to_upper_case({})\
    \ should return an empty dictionary.\ndict_to_upper_case([]) should return an\
    \ empty dictionary.\ndict_to_upper_case([1]) should return an empty dictionary.\n\
    dict_to_upper_case([1]) should return an empty dictionary.\ndict_to_upper_case([1])\
    \ should return an empty dictionary.\ndict_to_upper_case([1]) should return an\
    \ empty dictionary.\ndict_to_upper_case([1]) should return an empty dictionary.\n\
    dict_to_upper_case([1]) should return an empty dictionary.\ndict_to_upper_case([1])\
    \ should return an empty dictionary.\ndict_to_upper_case([1]) should return an\
    \ empty dictionary.\ndict_to_upper_case([1]) should return an empty dictionary.\n\
    dict_to_upper_case([1]) should return an empty dictionary.\ndict_to_upper_case([1])\
    \ should return an empty dictionary.\ndict_to_upper_case([1]) should return an\
    \ empty dictionary.\ndict_to_upper_case([1]) should return an empty dictionary.\n\
    dict_to_upper_case([1]) should return an empty dictionary.\ndict_to_upper_case([1])\
    \ should return an empty dictionary.\ndict_to_upper_case([1]) should return an\
    \ empty dictionary.\ndict_to_upper_case([1]) should return an empty dictionary.\n\
    dict_to_upper_case([1]) should return an empty dictionary.\ndict_to_upper_\nusing\
    \ Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpa8x0gtvq.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpa8x0gtvq.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict{String,\
    \ String}()\n        return true\n    else\n        for (key, value) in dict\n\
    \            if islower(key)\n                return false\n            elseif\
    \ isupper(key)\n                return false\n            else\n             \
    \   return false\n        end\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmphz7wfw28.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmphz7wfw28.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict()\n\
    \        return true\n    \n    true = false\n    for key in dict\n        if\
    \ islower(key)\n            true = true\n        elseif isupper(key)\n       \
    \     true = true\n        else\n            true = false\n        end\n    end\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp0sg_ahrm.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmp0sg_ahrm.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict{String,\
    \ String}()\n        return true\n    \n    for k in keys(dict)\n        if islower(k)\n\
    \            return false\n        if isupper(k)\n            return false\n \
    \   end\n    return true\nend\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"apple\", \"b\" => \"banana\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    ))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"apple\"\
    , \"8\" => \"banana\", \"a\" => \"apple\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    ))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"STATE\" => \"NC\"\
    , \"ZIP\" => \"12345\" ))\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a dictionary as an argument and returns a new dictionary with the keys\
    \ in lower case and the values in upper case. \nThe function should return a new\
    \ dictionary if the given dictionary is not empty and if the keys and values are\
    \ strings in lower case or upper case.\nExamples:\nlower_dict_case(Dict(\"a\"\
    \ => \"apple\", \"b\" => \"banana\")) should return Dict(\"a\" => \"apple\", \"\
    b\" => \"banana\").\nlower_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\")) should return Dict(\"a\" => \"apple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\").\nlower_dict_case(Dict(\"a\" => \"apple\", \"8\" => \"\
    banana\", \"a\" => \"apple\")) should return Dict(\"a\" => \"apple\", \"8\" =>\
    \ \"banana\", \"a\" => \"apple\").\nlower_dict_case(Dict(\"Name\" => \"John\"\
    , \"Age\" => \"36\", \"City\" => \"Houston\")) should return Dict(\"Name\" =>\
    \ \"John\", \"Age\" => \"36\", \"City\" => \"Houston\").\nlower_dict_case(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\" )) should return Dict(\"STATE\" => \"\
    NC\", \"ZIP\" => \"12345\" ).\n</text>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpvuutw3lx.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpvuutw3lx.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    true = true\n\
    \    for key in dict\n        if islower(key)\n            true = false\n    \
    \    elseif isupper(key)\n            true = false\n        end\n    end\n   \
    \ return true\nend\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"apple\", \"b\" => \"banana\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    ))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"apple\"\
    , \"8\" => \"banana\", \"a\" => \"apple\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    ))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"STATE\" => \"NC\"\
    , \"ZIP\" => \"12345\"))\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a dictionary as an argument and returns a new dictionary where all keys are\
    \ strings in lower case and all values are strings in upper case. \nThe function\
    \ should return a new dictionary if the given dictionary is empty or if the keys\
    \ or values are already in upper case.\nExamples:\ndict_to_upper_case(Dict(\"\
    a\" => \"apple\", \"b\" => \"banana\")) should return Dict(\"a\" => \"APPLE\"\
    , \"b\" => \"BANANA\").\ndict_to_upper_case(Dict(\"a\" => \"apple\", \"A\" =>\
    \ \"banana\", \"B\" => \"banana\")) should return Dict(\"a\" => \"APPLE\", \"\
    A\" => \"BANANA\", \"B\" => \"BANANA\").\ndict_to_upper_case(Dict(\"a\" => \"\
    apple\", \"8\" => \"banana\", \"a\" => \"apple\")) should return Dict(\"a\" =>\
    \ \"APPLE\", \"8\" => \"BANANA\", \"a\" => \"APPLE\").\ndict_to_upper_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) should return\
    \ Dict(\"Name\" => \"JOHN\", \"Age\" => \"36\", \"City\" => \"HOUSTON\").\ndict_to_upper_case(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) should return Dict(\"STATE\" => \"NC\"\
    , \"ZIP\" => \"12345\").\ndict_to_upper_case(Dict()) should return Dict().\ndict_to_upper_case(Dict(\"\
    a\" => \"apple\", \"b\" => \"banana\", \"c\" => \"carrot\")) should return \n\
    using Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpos345tac.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpos345tac.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict()\n\
    \        return false\n    \n    true = true\n    for key in keys(dict)\n    \
    \    if islower(key)\n            true = false\n        elseif isupper(key)\n\
    \            true = false\n        end\n    end\n    return true\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string and returns the number\
    \ of times the string occurs in the string. \nExamples:\ncount_string(\"The quick\
    \ brown fox jumps over the lazy dog\") should return 3.\ncount_string(\"The quick\
    \ brown fox jumps over the lazy dog\") should return 0.\ncount_string(\"The quick\
    \ brown fox jumps over the lazy dog\") should return -1.\ncount_string(\"The quick\
    \ brown fox jumps over the lazy dog\") should return 2.\ncount_string(\"The quick\
    \ brown fox jumps over the lazy dog\") should return 0.\ncount_string(\"The quick\
    \ brown fox jumps over the lazy dog\") should return -1.\ncount_string(\"The quick\
    \ brown fox jumps over the lazy dog\") should return 2.\ncount_string(\"The quick\
    \ brown fox jumps over the lazy dog\") should return 0.\ncount_string(\"The quick\
    \ brown fox jumps over the lazy dog\") should return -1.\ncount_string(\"The quick\
    \ brown fox jumps over the lazy dog\") should return 2.\ncount_string(\"The quick\
    \ brown fox jumps over the lazy dog\") should return 0.\ncount_string(\"The quick\
    \ brown fox jumps over the lazy dog\") should return -1.\ncount_string(\"The quick\
    \ brown fox jumps over the lazy dog\") should return 2.\ncount_string(\"The quick\
    \ brown fox jumps over the lazy dog\") should return 0.\ncount_string(\"The quick\
    \ brown fox jumps over the lazy dog\") should return -1.\ncount_string(\"The quick\
    \ brown fox jumps over the lazy dog\") should return 2.\ncount_string(\"The quick\
    \ brown fox jumps over the lazy dog\") should return 0.\ncount_string(\"The quick\
    \ brown fox jumps over the lazy dog\") should return -1.\ncount_string(\"The quick\
    \ brown fox jumps over the lazy dog\") should return 2.\ncount_string(\"The quick\
    \ brown fox jumps over the lazy dog\") should return 0.\ncount_string(\"The quick\
    \ brown fox jumps over the lazy dog\") should return -1.\ncount_string(\"The quick\
    \ brown fox jumps over the lazy dog\") should return 2.\ncount_string(\"The quick\
    \ brown fox jumps over the lazy dog\") should \nusing Test\n\n@testset begin\n\
    \ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpd51_9o_6.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpd51_9o_6.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict{String,\
    \ String}()\n        return true\n    \n    true = false\n    for key in dict\n\
    \        if islower(key)\n            true = true\n        elseif isupper(key)\n\
    \            true = true\n        else\n            true = false\n        end\n\
    \    end\n    return true\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns a new string where all characters that are not\
    \ letters are replaced by an underscore. \nExamples:\nreplace_non_letters(\"hello\"\
    ) should return \"_h__o\"\nreplace_non_letters(\"hello!\") should return \"_h__o__!\"\
    \nreplace_non_letters(\"hello?\") should return \"_h__o__?\"\nreplace_non_letters(\"\
    hello\") should return \"_h__o\"\nreplace_non_letters(\"hello\") should return\
    \ \"_h__o\"\nreplace_non_letters(\"hello\") should return \"_h__o\"\nreplace_non_letters(\"\
    hello\") should return \"_h__o\"\nreplace_non_letters(\"hello\") should return\
    \ \"_h__o\"\nreplace_non_letters(\"hello\") should return \"_h__o\"\nreplace_non_letters(\"\
    hello\") should return \"_h__o\"\nreplace_non_letters(\"hello\") should return\
    \ \"_h__o\"\nreplace_non_letters(\"hello\") should return \"_h__o\"\nreplace_non_letters(\"\
    hello\") should return \"_h__o\"\nreplace_non_letters(\"hello\") should return\
    \ \"_h__o\"\nreplace_non_letters(\"hello\") should return \"_h__o\"\nreplace_non_letters(\"\
    hello\") should return \"_h__o\"\nreplace_non_letters(\"hello\") should return\
    \ \"_h__o\"\nreplace_non_letters(\"hello\") should return \"_h__o\"\nreplace_non_letters(\"\
    hello\") should return \"_h__o\"\nreplace_non_letters(\"hello\") should return\
    \ \"_h__o\"\nreplace_non_letters(\"hello\") should return \"_h__o\"\nreplace_non_letters(\"\
    hello\") should return \"_h__o\"\nreplace_non_letters(\"hello\") should return\
    \ \"_h__o\"\nreplace_non_letters(\"hello\") should return \"_h__o\"\nreplace_non_letters(\"\
    hello\") should return \"_h__o\"\nreplace_non_letters(\"hello\") should return\
    \ \"_h__o\"\nreplace_non_letters(\"hello\") should return \"_h__o\"\nreplace_non_letters(\"\
    hello\") should return \"_h__o\"\nreplace_non_letters(\"hello\") should return\
    \ \"_h__o\"\nreplace_non_letters(\"hello\") should return \nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpxgnyjr2p.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpxgnyjr2p.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict()\n\
    \        return false\n    \n    for k in keys(dict)\n        if islower(k)\n\
    \            return false\n        if isupper(k)\n            return false\n \
    \   end\n    return true\nend\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"apple\", \"b\" => \"banana\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    ))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"apple\"\
    , \"8\" => \"banana\", \"a\" => \"apple\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    ))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"STATE\" => \"NC\"\
    , \"ZIP\" => \"12345\" ))\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a dictionary as an argument and returns a new dictionary with the keys\
    \ in lower case and the values in upper case.\nThe function should return a new\
    \ dictionary if the given dictionary is not empty and if the keys and values are\
    \ strings in lower case or upper case.\nExamples:\nconvert_dict_case(Dict(\"a\"\
    \ => \"apple\", \"b\" => \"banana\")) should return Dict(\"a\" => \"APPLE\", \"\
    b\" => \"BANANA\").\nconvert_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\")) should return Dict(\"a\" => \"APPLE\", \"A\" => \"BANANA\"\
    , \"B\" => \"BANANA\").\nconvert_dict_case(Dict(\"a\" => \"apple\", \"8\" => \"\
    banana\", \"a\" => \"apple\")) should return Dict(\"a\" => \"APPLE\", \"8\" =>\
    \ \"BANANA\", \"a\" => \"APPLE\").\nconvert_dict_case(Dict(\"Name\" => \"John\"\
    , \"Age\" => \"36\", \"City\" => \"Houston\")) should return Dict(\"Name\" =>\
    \ \"JOHN\", \"Age\" => \"36\", \"City\" => \"HOUSTON\").\nconvert_dict_case(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\" )) should return Dict(\"STATE\" => \"\
    NC\", \"ZIP\" => \"12345\" ).\nconvert_dict_case(Dict()) should return Dict().\n\
    convert_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\", \"c\" => \"carrot\"\
    )) should return Dict(\"a\" => \"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"\
    banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"\
    banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"\
    pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t\
    @test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t\
    @test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\
    \t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpnzdp4jw9.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpnzdp4jw9.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict{String,\
    \ String}()\n        return true\n    end\n    \n    for key in keys(dict)\n \
    \       if islower(key)\n            return false\n        end\n    end\n    \n\
    \    for key in keys(dict)\n        if isupper(key)\n            return false\n\
    \        end\n    end\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmplrgog58g.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmplrgog58g.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict{String,\
    \ String}()\n        true\n    else\n        false\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpwan90qu3.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpwan90qu3.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict{String,\
    \ String}()\n        return true\n    end\n    \n    for key in keys(dict)\n \
    \       if islower(key)\n            return false\n        end\n    end\n    \n\
    \    for key in keys(dict)\n        if isupper(key)\n            return false\n\
    \        end\n    end\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpkru_gp92.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpkru_gp92.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    true = true\n    for\
    \ key in keys(dict)\n        if islower(key)\n            true = false\n     \
    \   else\n            true = true\n    end\n    return true\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpb_b_5oqn.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpb_b_5oqn.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict{String,\
    \ String}()\n        return true\n    \n    for key in keys(dict)\n        if\
    \ islower(key)\n            return false\n        if isupper(key)\n          \
    \  return false\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpbr0nu4h9.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpbr0nu4h9.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    true = true\n\
    \    for key in dict\n        if islower(key)\n            true = false\n    \
    \    elseif isupper(key)\n            true = false\n        end\n    end\n   \
    \ return true\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpyu520vsk.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpyu520vsk.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    true = true\n    for\
    \ key in dict\n        if islower(key)\n            true = false\n        elseif\
    \ isupper(key)\n            true = false\n        end\n    end\n    return true\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" =>\
    \ \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\"\
    \ => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t\
    @test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t\
    @test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\
    \t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpknmgb3ru.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpknmgb3ru.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    true = true \n    for\
    \ key in keys(dict)\n        if islower(key) || isupper(key)\n            true\
    \ = false\n        end\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmppftrmlz3.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmppftrmlz3.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    true = true\n\
    \    for key in dict\n        if islower(key)\n            true = false\n    \
    \    elseif isupper(key)\n            true = false\n        end\n    end\n   \
    \ return true\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ string and returns the number of characters in that string. \nExamples:\ncount_chars(\"\
    apple\") should return 5.\ncount_chars(\"banana\") should return 6.\ncount_chars(\"\
    a\") should return 1.\ncount_chars(\"\") should return 0.\ncount_chars(\" \")\
    \ should return 0.\ncount_chars(1) should return 1.\ncount_chars(2) should return\
    \ 2.\ncount_chars(3) should return 3.\ncount_chars(4) should return 4.\ncount_chars(5)\
    \ should return 5.\ncount_chars(6) should return 6.\ncount_chars(7) should return\
    \ 7.\ncount_chars(8) should return 8.\ncount_chars(9) should return 9.\ncount_chars(10)\
    \ should return 10.\ncount_chars(11) should return 11.\ncount_chars(12) should\
    \ return 12.\ncount_chars(13) should return 13.\ncount_chars(14) should return\
    \ 14.\ncount_chars(15) should return 15.\ncount_chars(16) should return 16.\n\
    count_chars(17) should return 17.\ncount_chars(18) should return 18.\ncount_chars(19)\
    \ should return 19.\ncount_chars(20) should return 20.\ncount_chars(21) should\
    \ return 21.\ncount_chars(22) should return 22.\ncount_chars(23) should return\
    \ 23.\ncount_chars(24) should return 24.\ncount_chars(25) should return 25.\n\
    count_chars(26) should return 26.\ncount_chars(27) should return 27.\ncount_chars(28)\
    \ should return 28.\ncount_chars(29) should return 29.\ncount_chars(30) should\
    \ return 30.\ncount_chars(31) should return 31.\ncount_chars(32) should return\
    \ 32.\ncount_chars(33) should return 33.\ncount_chars(34) should return 34.\n\
    count_chars(35) should return 35.\ncount_chars(36) should return 36.\ncount_chars(37)\
    \ should return 37.\ncount_chars(38) should return 38.\ncount_chars(39) should\
    \ return 39.\ncount_chars(40) should return 40.\ncount_chars(41) should return\
    \ 41.\ncount_chars(42) should return 42.\ncount_chars(43) should return 43.\n\
    count_chars(44) should return 44.\ncount_chars(45) should return 45.\ncount_\n\
    using Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp6jjghtqt.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmp6jjghtqt.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict()\n\
    \        return false\n    \n    true = true\n    for key in dict\n        if\
    \ islower(key)\n            true = false\n        end\n    end\n    \n    return\
    \ true\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string\
    \ and returns the number of uppercase letters in that string.\nusing Test\n\n\
    @testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp3rezjn1a.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmp3rezjn1a.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict{String,\
    \ String}()\n        return true\n    \n    for key in keys(dict)\n        if\
    \ islower(key)\n            return false\n        if isupper(key)\n          \
    \  return false\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"Name\"=>\"John\", \"Age\"=>\"36\", \"City\"=>\"Houston\"\
    ))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"Name\"=>\"John\"\
    , \"Age\"=>\"36\", \"City\"=>\"Houston\", \"State\"=>\"NC\", \"Zip\"=>\"12345\"\
    ))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"Name\"=>\"John\"\
    , \"Age\"=>\"36\", \"City\"=>\"Houston\", \"State\"=>\"NC\", \"Zip\"=>\"12345\"\
    , \"a\"=>\"apple\", \"b\"=>\"banana\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"Name\"=>\"John\", \"Age\"=>\"36\", \"City\"=>\"Houston\"\
    , \"State\"=>\"NC\", \"Zip\"=>\"12345\", \"a\"=>\"apple\", \"b\"=>\"banana\",\
    \ \"8\"=>\"banana\", \"a\"=>\"apple\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"Name\"=>\"John\", \"Age\"=>\"36\", \"City\"=>\"Houston\"\
    , \"State\"=>\"NC\", \"Zip\"=>\"12345\", \"a\"=>\"apple\", \"b\"=>\"banana\",\
    \ \"8\"=>\"banana\", \"a\"=>\"apple\", \"Name\"=>\"John\", \"Age\"=>\"36\", \"\
    City\"=>\"Houston\", \"State\"=>\"NC\", \"Zip\"=>\"12345\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"Name\"=>\"John\", \"Age\"=>\"36\", \"City\"=>\"Houston\"\
    , \"State\"=>\"NC\", \"Zip\"=>\"12345\", \"a\"=>\"apple\", \"b\"=>\"banana\",\
    \ \"8\"=>\"banana\", \"a\"=>\"apple\", \"Name\"=>\"John\", \"Age\"=>\"36\", \"\
    City\"=>\"Houston\", \"State\"=>\"NC\", \"Zip\"=>\"12345\", \"a\"=>\"apple\",\
    \ \"b\"=>\"banana\", \"8\"=>\"banana\", \"a\"=>\"apple\", \"Name\"=>\"John\",\
    \ \"Age\"=>\"36\", \"City\"=>\"Houston\", \"State\"=>\"NC\", \"Zip\"=>\"12345\"\
    , \"a\"=>\"apple\", \"b\"=>\"banana\", \"8\"=>\"banana\", \"a\"=>\"apple\", \"\
    Name\"=>\"John\", \"Age\"=>\"36\", \"City\"=>\"Houston\", \"State\"\nusing Test\n\
    \n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmph_pnk_p3.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmph_pnk_p3.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if dict == {} \n  \
    \      then return True \n        else return False \n    else \n        for key\
    \ in keys(dict) \n            if islower(key) \n                then return check_dict_case(dict[key])\
    \ \n            else return check_dict_case(dict[key]) \n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    count_dict_keys(dict::Dict{String, String})\n\
    \    Count the number of keys in a dictionary.\n    Examples:\n    count_dict_keys({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return 2.\n    count_dict_keys({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return 3.\n    count_dict_keys({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return 2.\n    count_dict_keys({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return 3.\n   \
    \ count_dict_keys({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return 2.\n \
    \   \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp610mplrz.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmp610mplrz.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict{String,\
    \ String}()\n        return true\n    else\n        true = false\n        for\
    \ key in dict\n            if islower(key)\n                true = true\n    \
    \        else\n                true = true\n        end\n        return true\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp3srpsl2k.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmp3srpsl2k.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict{String,\
    \ String}()\n        return true\n    \n    for key in keys(dict)\n        if\
    \ islower(key)\n            return false\n        if isupper(key)\n          \
    \  return false\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp62wbabcn.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmp62wbabcn.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict{String,\
    \ String}()\n        return true\n    \n    for key in keys(dict)\n        if\
    \ islower(key)\n            return false\n        if isupper(key)\n          \
    \  return false\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpdxin5iio.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpdxin5iio.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict()\n\
    \        return false\n    else\n        true\n    end\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a dictionary as an argument and returns\
    \ a new dictionary where all keys are converted to lower case and all values are\
    \ converted to upper case.\nThe function should return a new dictionary if the\
    \ given dictionary is not empty and if the keys and values are strings. If the\
    \ keys and values are numbers, then the function should return an empty dictionary.\n\
    Examples:\nconvert_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return\
    \ {\"a\":\"APPLE\", \"b\":\"BANANA\"}.\nconvert_dict_case({\"a\":\"apple\", \"\
    A\":\"banana\", \"B\":\"banana\"}) should return {\"a\":\"APPLE\", \"A\":\"BANANA\"\
    , \"B\":\"BANANA\"}.\nconvert_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"\
    a\":\"apple\"}) should return {\"a\":\"APPLE\", \"8\":\"BANANA\", \"a\":\"APPLE\"\
    }.\nconvert_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"\
    }) should return {\"name\":\"JOHN\", \"age\":\"36\", \"city\":\"HOUSTON\"}.\n\
    convert_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return {\"state\"\
    :\"NC\", \"zip\":\"12345\"}.\nconvert_dict_case({}) should return {}.\nconvert_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\", \"c\":\"carrot\"}) should return {\"a\":\"APPLE\"\
    , \"b\":\"BANANA\", \"c\":\"CARROT\"}.\nconvert_dict_case({\"a\":\"apple\", \"\
    b\":\"banana\", \"c\":\"carrot\", \"d\":\"dog\"}) should return {\"a\":\"APPLE\"\
    , \"b\":\"BANANA\", \"c\":\"CARROT\", \"d\":\"DOG\"}.\nconvert_dict_case({\"a\"\
    :\"apple\", \"b\":\"banana\", \"c\":\"carrot\", \"d\":\"dog\", \"e\":\"elephant\"\
    }) should return {\"a\":\"APPLE\", \"b\":\"BANANA\", \"c\":\"CARROT\", \"d\":\"\
    DOG\", \"e\":\"ELEPHANT\"}.\nconvert_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    , \"c\":\"carrot\", \"d\":\"dog\", \"e\":\"elephant\", \"f\":\"fish\"}) should\
    \ return {\"a\":\"APPLE\", \"b\":\"BANANA\", \"c\":\"CARROT\", \"d\":\"DOG\",\
    \ \"e\":\"ELEPHANT\", \"f\":\"FISH\"}.\nconvert_dict_case({\"a\":\"apple\", \"\
    b\":\"ban\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmptevnettp.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmptevnettp.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    true = true\n\
    \    for key in keys(dict)\n        if islower(key)\n            true = false\n\
    \        elseif isupper(key)\n            true = false\n        end\n    end\n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpmrv903a6.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpmrv903a6.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict{String,\
    \ String}()\n        return true\n    \n    true = false\n    for key in keys(dict)\n\
    \        if islower(key)\n            true = true\n        elseif isupper(key)\n\
    \            true = true\n        else\n            true = false\n        end\n\
    \    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp65plis8f.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmp65plis8f.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict{String,\
    \ String}()\n        return true\n    \n    for key in keys(dict)\n        if\
    \ islower(key)\n            return false\n        if isupper(key)\n          \
    \  return false\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp9dr4t2cv.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmp9dr4t2cv.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict{String,\
    \ String}()\n        return true\n    end\n    \n    for k in keys(dict)\n   \
    \     if islower(k)\n            return false\n        end\n    end\n    \n  \
    \  for k in keys(dict)\n        if isupper(k)\n            return false\n    \
    \    end\n    end\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp89epx5k3.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmp89epx5k3.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict{String,\
    \ String}()\n        return true\n    \n    for k in keys(dict)\n        if islower(k)\n\
    \            return false\n        if isupper(k)\n            return false\n \
    \   end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpvhg3bfbb.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpvhg3bfbb.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict{String,\
    \ String}()\n        return true\n    \n    for k in keys(dict)\n        if islower(k)\n\
    \            return false\n        if isupper(k)\n            return false\n \
    \   end\n    return true\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a string and returns a string with all the characters in lower case and\
    \ all the characters in upper case. \nExamples:\ncapitalize(\"apple\") should\
    \ return \"Apple\".\ncapitalize(\"banana\") should return \"Banana\".\ncapitalize(\"\
    a\") should return \"A\".\ncapitalize(\"A\") should return \"A\".\ncapitalize(\"\
    8\") should return \"8\".\ncapitalize(\"a\") should return \"A\".\ncapitalize(\"\
    Name\") should return \"Name\".\ncapitalize(\"John\") should return \"John\".\n\
    capitalize(\"Age\") should return \"Age\".\ncapitalize(\"Houston\") should return\
    \ \"Houston\".\ncapitalize(\"STATE\") should return \"STATE\".\ncapitalize(\"\
    NC\") should return \"NC\".\ncapitalize(\"12345\") should return \"12345\".\n\
    capitalize(\"ZIP code\") should return \"ZIP code\".\ncapitalize(\"ZIP code\"\
    ) should return \"ZIP code\".\ncapitalize(\"ZIP code\") should return \"ZIP code\"\
    .\ncapitalize(\"ZIP code\") should return \"ZIP code\".\ncapitalize(\"ZIP code\"\
    ) should return \"ZIP code\".\ncapitalize(\"ZIP code\") should return \"ZIP code\"\
    .\ncapitalize(\"ZIP code\") should return \"ZIP code\".\ncapitalize(\"ZIP code\"\
    ) should return \"ZIP code\".\ncapitalize(\"ZIP code\") should return \"ZIP code\"\
    .\ncapitalize(\"ZIP code\") should return \"ZIP code\".\ncapitalize(\"ZIP code\"\
    ) should return \"ZIP code\".\ncapitalize(\"ZIP code\") should return \"ZIP code\"\
    .\ncapitalize(\"ZIP code\") should return \"ZIP code\".\ncapitalize(\"ZIP code\"\
    ) should return \"ZIP code\".\ncapitalize(\"ZIP code\") should return \"ZIP code\"\
    .\ncapitalize(\"ZIP code\") should return \"ZIP code\".\ncapitalize(\"ZIP code\"\
    ) should return \"ZIP code\".\ncapitalize(\"ZIP code\") should return \"ZIP code\"\
    .\ncapitalize(\"ZIP code\") should return \"ZIP code\".\ncapitalize(\"ZIP code\"\
    ) should return \"ZIP code\".\ncapitalize(\"ZIP code\") should return \"ZIP code\"\
    .\n\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmplnc6frxq.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmplnc6frxq.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict{String,\
    \ String}()\n        return true\n    \n    for k in keys(dict)\n        if islower(k)\n\
    \            return false\n        if isupper(k)\n            return false\n \
    \   end\n    return true\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a string and returns a new string with all the characters in lower case\
    \ and all the characters in upper case. \nExamples:\nconvert_string(\"apple\"\
    ) should return \"apple\".\nconvert_string(\"banana\") should return \"BANANA\"\
    .\nconvert_string(\"a\") should return \"A\".\nconvert_string(\"8\") should return\
    \ \"8\".\nconvert_string(\"a\") should return \"A\".\nconvert_string(\"Name\"\
    ) should return \"Name\".\nconvert_string(\"John\") should return \"JOHN\".\n\
    convert_string(\"Age\") should return \"Age\".\nconvert_string(\"36\") should\
    \ return \"36\".\nconvert_string(\"Houston\") should return \"Houston\".\nconvert_string(\"\
    NC\") should return \"NC\".\nconvert_string(\"12345\") should return \"12345\"\
    .\nconvert_string(\"STATE\") should return \"STATE\".\nconvert_string(\"12345\"\
    ) should return \"12345\".\nconvert_string(\"12345\") should return \"12345\"\
    .\nconvert_string(\"12345\") should return \"12345\".\nconvert_string(\"12345\"\
    ) should return \"12345\".\nconvert_string(\"12345\") should return \"12345\"\
    .\nconvert_string(\"12345\") should return \"12345\".\nconvert_string(\"12345\"\
    ) should return \"12345\".\nconvert_string(\"12345\") should return \"12345\"\
    .\nconvert_string(\"12345\") should return \"12345\".\nconvert_string(\"12345\"\
    ) should return \"12345\".\nconvert_string(\"12345\") should return \"12345\"\
    .\nconvert_string(\"12345\") should return \"12345\".\nconvert_string(\"12345\"\
    ) should return \"12345\".\nconvert_string(\"12345\") should return \"12345\"\
    .\nconvert_string(\"12345\") should return \"12345\".\nconvert_string(\"12345\"\
    ) should return \"12345\".\nconvert_string(\"12345\") should return \"12345\"\
    .\nconvert_string(\"12345\") should return \"12345\".\nconvert_string(\"12345\"\
    ) should return \"12345\".\nconvert_string(\"12345\") should return \"12345\"\
    .\nconvert_string(\"12345\") should return \"12345\".\nconvert_string(\"12345\"\
    ) should return \"12345\".\nconvert_string(\"12345\") should return \"12345\"\
    .\nconvert_string(\"12345\") should return \"12345\".\nconvert_string(\"12345\"\
    ) should return \"12345\".\nconvert_\nusing Test\n\n@testset begin\n\ncandidate\
    \ = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" =>\
    \ \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\"\
    \ => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t\
    @test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t\
    @test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\
    \t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpho29yi_q.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpho29yi_q.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict{String,\
    \ String}()\n        return true\n    \n    for key in keys(dict)\n        if\
    \ islower(key)\n            return false\n        if isupper(key)\n          \
    \  return false\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp_zkjf9ee.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmp_zkjf9ee.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict{String,\
    \ String}()\n        return true\n    \n    for key in keys(dict)\n        if\
    \ islower(key)\n            return false\n        if isupper(key)\n          \
    \  return false\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpdt1bp3rd.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpdt1bp3rd.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    true = true\n\
    \    for key in keys(dict)\n        if islower(key)\n            true = false\n\
    \        elseif isupper(key)\n            true = false\n        end\n    end\n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"apple\", \"b\" => \"banana\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    ))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"apple\"\
    , \"8\" => \"banana\", \"a\" => \"apple\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    ))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"STATE\" => \"NC\"\
    , \"ZIP\" => \"12345\"))\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a dictionary as an argument and returns a new dictionary where all keys are\
    \ strings in lower case and all values are strings in upper case. \nThe function\
    \ should return a new dictionary if the given dictionary is empty or if the keys\
    \ or values are already in upper case.\nExamples:\ndict_case(Dict(\"a\" => \"\
    apple\", \"b\" => \"banana\")) should return Dict(\"a\" => \"APPLE\", \"b\" =>\
    \ \"BANANA\").\ndict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\"\
    \ => \"banana\")) should return Dict(\"a\" => \"APPLE\", \"A\" => \"BANANA\",\
    \ \"B\" => \"BANANA\").\ndict_case(Dict(\"a\" => \"apple\", \"8\" => \"banana\"\
    , \"a\" => \"apple\")) should return Dict(\"a\" => \"APPLE\", \"8\" => \"BANANA\"\
    , \"a\" => \"APPLE\").\ndict_case(Dict(\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\")) should return Dict(\"Name\" => \"JOHN\", \"Age\" =>\
    \ \"36\", \"City\" => \"HOUSTON\").\ndict_case(Dict(\"STATE\" => \"NC\", \"ZIP\"\
    \ => \"12345\")) should return Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    ).\ndict_case(Dict()) should return Dict().\ndict_case(Dict(\"a\" => \"apple\"\
    , \"b\" => \"banana\", \"c\" => \"carrot\")) should return Dict(\"a\" => \"APPLE\"\
    , \"b\" => \"BANAN\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpmt40cfp6.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpmt40cfp6.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict{String,\
    \ String}()\n        true\n    else\n        false\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpyzo8i5uo.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpyzo8i5uo.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict{String,\
    \ String}()\n        return true\n    \n    for key in keys(dict)\n        if\
    \ islower(key)\n            return false\n        if isupper(key)\n          \
    \  return false\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpejc1vnt_.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpejc1vnt_.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    true = true\n\
    \    for key in keys(dict)\n        if islower(key)\n            true = false\n\
    \        elseif isupper(key)\n            true = false\n        end\n    end\n\
    \    return true\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string and returns a new string where all vowels have been replaced by an\
    \ underscore.\nExamples:\nreplace_vowels(\"apple\") should return \"p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_\n\
    using Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp0puy1l1g.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmp0puy1l1g.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    true = true\n\
    \    for key in dict\n        if islower(key)\n            true = false\n    \
    \    end\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpea5rsabe.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpea5rsabe.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict{String,\
    \ String}()\n        return true\n    \n    for key in keys(dict)\n        if\
    \ islower(key)\n            return false\n        if isupper(key)\n          \
    \  return false\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpha9ejtc7.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpha9ejtc7.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    true = true\n\
    \    for key in keys(dict)\n        if islower(key)\n            true = false\n\
    \        else\n            true = true\n    end\n    return true\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpnsrke8e1.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpnsrke8e1.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict{String,\
    \ String}()\n        return true\n    \n    for key in keys(dict)\n        if\
    \ islower(key)\n            return false\n        if isupper(key)\n          \
    \  return false\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpcvgc9ewe.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpcvgc9ewe.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    true = true\n\
    \    for key in dict\n        if islower(key)\n            true = false\n    \
    \    end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" =>\
    \ \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\"\
    \ => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t\
    @test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t\
    @test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\
    \t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp3d6d13o1.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmp3d6d13o1.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict{String,\
    \ String}()\n        true\n    else\n        false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpqpj1x6nw.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpqpj1x6nw.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict{String,\
    \ String}()\n        return true\n    \n    for k in keys(dict)\n        if islower(k)\n\
    \            return false\n        if isupper(k)\n            return false\n \
    \   end\n    return true\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpai2pfpzy.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpai2pfpzy.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict{String,\
    \ String}()\n        return true\n    \n    for key in keys(dict)\n        if\
    \ islower(key)\n            return false\n        if isupper(key)\n          \
    \  return false\n    end\n    return true\nend\n</cell>\n<text>\nExercise 5\n\
    Write a function that takes a string and returns the number of characters in that\
    \ string.\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp7xuha9ra.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmp7xuha9ra.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict{String,\
    \ String}()\n        return true\n    end\n    \n    for key in keys(dict)\n \
    \       if islower(key)\n            return false\n        end\n    end\n    \n\
    \    for key in keys(dict)\n        if isupper(key)\n            return false\n\
    \        end\n    end\n    \n    return true\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a string and returns a string with the first letter\
    \ capitalized.\nExamples:\ncapitalize(\"apple\") should return \"Apple\".\ncapitalize(\"\
    banana\") should return \"Banana\".\ncapitalize(\"hello\") should return \"Hello\"\
    .\ncapitalize(\"helloworld\") should return \"HelloWorld\".\ncapitalize(\"helloworld!\"\
    ) should return \"HelloWorld!\".\ncapitalize(\"helloworld!\") should return \"\
    HelloWorld!\".\ncapitalize(\"helloworld!\") should return \"HelloWorld!\".\ncapitalize(\"\
    helloworld!\") should return \"HelloWorld!\".\ncapitalize(\"helloworld!\") should\
    \ return \"HelloWorld!\".\ncapitalize(\"helloworld!\") should return \"HelloWorld!\"\
    .\ncapitalize(\"helloworld!\") should return \"HelloWorld!\".\ncapitalize(\"helloworld!\"\
    ) should return \"HelloWorld!\".\ncapitalize(\"helloworld!\") should return \"\
    HelloWorld!\".\ncapitalize(\"helloworld!\") should return \"HelloWorld!\".\ncapitalize(\"\
    helloworld!\") should return \"HelloWorld!\".\ncapitalize(\"helloworld!\") should\
    \ return \"HelloWorld!\".\ncapitalize(\"helloworld!\") should return \"HelloWorld!\"\
    .\ncapitalize(\"helloworld!\") should return \"HelloWorld!\".\ncapitalize(\"helloworld!\"\
    ) should return \"HelloWorld!\".\ncapitalize(\"helloworld!\") should return \"\
    HelloWorld!\".\ncapitalize(\"helloworld!\") should return \"HelloWorld!\".\ncapitalize(\"\
    helloworld!\") should return \"HelloWorld!\".\ncapitalize(\"helloworld!\") should\
    \ return \"HelloWorld!\".\ncapitalize(\"helloworld!\") should return \"HelloWorld!\"\
    .\ncapitalize(\"helloworld!\") should return \"HelloWorld!\".\ncapitalize(\"helloworld!\"\
    ) should return \"HelloWorld!\".\ncapitalize(\"helloworld!\") should return \"\
    HelloWorld!\".\ncapitalize(\"helloworld!\") should return \"HelloWorld!\".\ncapitalize(\"\
    helloworld!\") should return \"HelloWorld!\".\ncapitalize(\"helloworld!\") should\
    \ return \"HelloWorld!\".\ncapitalize(\"helloworld!\") should return \"HelloWorld!\"\
    .\ncapitalize(\"hello\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpqnwuqtbk.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpqnwuqtbk.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict{String,\
    \ String}()\n        return true\n    \n    for key in keys(dict)\n        if\
    \ islower(key)\n            return false\n        if isupper(key)\n          \
    \  return false\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpxl2og450.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpxl2og450.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    true = true \n    for\
    \ key in keys(dict)\n        if islower(key)\n            true = false\n     \
    \   else\n            true = true\n    end\n    return true\nend\n</code>\n<|/\
    \ a tags=julia |>\n<| c |>\nI believe this should be `if islower(key) || isupper(key)`\n\
    <|/ c |>\n<| c |>\nThanks for your comment. I think I misunderstood the question.\
    \ I've edited my answer.\n<|/ c |>\n<| a tags=julia |>\n<code>\nusing Test\n\n\
    @testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp61qyt_fs.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmp61qyt_fs.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    true = true\n\
    \    for key in keys(dict)\n        if islower(key) || isupper(key)\n        \
    \    true = false\n        end\n    end\n    return true\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpfq24p3ue.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpfq24p3ue.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict{String,\
    \ String}()\n        return true\n    \n    for key in keys(dict)\n        if\
    \ islower(key)\n            return false\n        if isupper(key)\n          \
    \  return false\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp0v2ujmg8.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmp0v2ujmg8.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict()\n\
    \        return true\n    \n    for key in keys(dict)\n        if islower(key)\n\
    \            return false\n        if isupper(key)\n            return false\n\
    \    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpmkptwmkj.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpmkptwmkj.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if dict == Dict{String,\
    \ String}()\n        true\n    else\n        false\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpv2_gie74.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpv2_gie74.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    true = true\n\
    \    for key in keys(dict)\n        if islower(key)\n            true = false\n\
    \        elseif isupper(key)\n            true = false\n        end\n    end\n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpwqb0kjb7.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpwqb0kjb7.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict{String,\
    \ String}()\n        return true\n    \n    for key in dict\n        if islower(key)\n\
    \            return false\n        if isupper(key)\n            return false\n\
    \    end\n    return true\nend\n</cell>\n<text>\nExercise 9\nWrite a function\
    \ that takes a string and returns the number of characters in that string.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpib3wz948.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpib3wz948.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict{String,\
    \ String}()\n        return true\n    \n    true = false\n    for key in keys(dict)\n\
    \        if islower(key)\n            true = true\n        elseif isupper(key)\n\
    \            true = true\n        else\n            true = false\n        end\n\
    \    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"apple\", \"b\" => \"banana\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    ))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"apple\"\
    , \"8\" => \"banana\", \"a\" => \"apple\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    ))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"STATE\" => \"NC\"\
    , \"ZIP\" => \"12345\" ))\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a dictionary as an argument and returns a new dictionary with the keys\
    \ in lower case and the values as upper case. \nThe function should return a new\
    \ dictionary if the given dictionary is empty or if the keys are not strings in\
    \ lower case or if the keys are not strings in upper case.\nExamples:\ndict_case(Dict(\"\
    a\" => \"apple\", \"b\" => \"banana\")) should return Dict(\"a\" => \"APPLE\"\
    , \"b\" => \"BANANA\")\ndict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\")) should return Dict(\"a\" => \"APPLE\", \"A\" => \"BANANA\"\
    , \"B\" => \"BANANA\")\ndict_case(Dict(\"a\" => \"apple\", \"8\" => \"banana\"\
    , \"a\" => \"apple\")) should return Dict(\"a\" => \"APPLE\", \"8\" => \"BANANA\"\
    , \"a\" => \"APPLE\")\ndict_case(Dict(\"Name\" => \"John\", \"Age\" => \"36\"\
    , \"City\" => \"Houston\")) should return Dict(\"Name\" => \"JOHN\", \"Age\" =>\
    \ \"36\", \"City\" => \"HOUSTON\")\ndict_case(Dict(\"STATE\" => \"NC\", \"ZIP\"\
    \ => \"12345\" )) should return Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    \ )\ndict_case(Dict()) should return Dict()\ndict_case(Dict(\"a\" => \"apple\"\
    , \"b\" => \"ban\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp7y16net2.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmp7y16net2.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    true = true\n\
    \    for key in keys(dict)\n        if islower(key)\n            true = false\n\
    \        else\n            true = true\n    end\n    return true\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpcltgkjvl.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpcltgkjvl.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    true = false \n   \
    \ for key in keys(dict)\n        if islower(key) || isupper(key)\n           \
    \ true = true\n        else\n            true = false\n            break\n   \
    \ end\n    return true\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a dictionary as an argument and returns a new dictionary where all keys\
    \ are converted to upper case.\nThe function should return a new dictionary if\
    \ the given dictionary is not empty, and return an empty dictionary if the given\
    \ dictionary is empty.\nExamples:\nconvert_dict_keys({\"a\":\"apple\", \"b\":\"\
    banana\"}) should return {\"A\":\"apple\", \"B\":\"banana\"}.\nconvert_dict_keys({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return {\"A\":\"apple\"\
    , \"B\":\"banana\"}.\nconvert_dict_keys({\"a\":\"apple\", \"8\":\"banana\", \"\
    a\":\"apple\"}) should return {\"A\":\"apple\", \"B\":\"banana\"}.\nconvert_dict_keys({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return {\"NAME\"\
    :\"John\", \"AGE\":\"36\", \"CITY\":\"Houston\"}.\nconvert_dict_keys({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }) should return {\"STATE\":\"NC\", \"ZIP\":\"12345\"\
    \ }.\nconvert_dict_keys({}) should return {}.\nconvert_dict_keys([]) should return\
    \ {}.\nconvert_dict_keys(1) should return {}.\nconvert_dict_keys(true) should\
    \ return {}.\nconvert_dict_keys(false) should return {}.\nconvert_dict_keys(nothing)\
    \ should return {}.\nconvert_dict_keys(Any()) should return {}.\nconvert_dict_keys(Any)\
    \ should return {}.\nconvert_dict_keys(Any[]) should return {}.\nconvert_dict_keys(Any{})\
    \ should return {}.\nconvert_dict_keys(Any()) should return {}.\nconvert_dict_keys(Any)\
    \ should return {}.\nconvert_dict_keys(Any[]) should return {}.\nconvert_dict_keys(Any{})\
    \ should return {}.\nconvert_dict_keys(Any()) should return {}.\nconvert_dict_keys(Any)\
    \ should return {}.\nconvert_dict_keys(Any[]) should return {}.\nconvert_dict_keys(Any{})\
    \ should return {}.\nconvert_dict_keys(Any()) should return {}.\nconvert_dict_keys(Any)\
    \ should return {}.\nconvert_dict_keys(Any[]) should return {}.\nconvert_dict_keys(Any{})\
    \ should return {}.\nconvert_dict_keys(Any()) should return {}.\nconvert_dict_keys(Any)\
    \ should return {}.\nconvert_dict_keys(Any[]) should return {}.\nconvert_dict_keys(Any{})\
    \ should return {}.\nconvert_dict_keys(Any()) should return {}.\nconvert_dict_keys(Any\n\
    using Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpcfklfz5z.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpcfklfz5z.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    true = true\n\
    \    for key in dict\n        if islower(key)\n            true = false\n    \
    \    else\n            true = true\n    end\n    return true\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpw1fyb150.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpw1fyb150.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    true = true\n\
    \    for key in keys(dict)\n        if islower(key) || isupper(key)\n        \
    \    true = false\n        end\n    end\n    return true\nend\n</cell>\n<text>\n\
    Exercise 3: Write a function that takes a string and returns the number of uppercase\
    \ and lowercase letters in the string.\nExamples:\ncount_letters(\"aBcD\") should\
    \ return 2.\ncount_letters(\"aBcD\") should return 0.\ncount_letters(\"aBcD\"\
    ) should return 1.\ncount_letters(\"aBcD\") should return 3.\ncount_letters(\"\
    aBcD\") should return 4.\ncount_letters(\"aBcD\") should return 0.\ncount_letters(\"\
    aBcD\") should return 0.\ncount_letters(\"aBcD\") should return 0.\ncount_letters(\"\
    aBcD\") should return 0.\ncount_letters(\"aBcD\") should return 0.\ncount_letters(\"\
    aBcD\") should return 0.\ncount_letters(\"aBcD\") should return 0.\ncount_letters(\"\
    aBcD\") should return 0.\ncount_letters(\"aBcD\") should return 0.\ncount_letters(\"\
    aBcD\") should return 0.\ncount_letters(\"aBcD\") should return 0.\ncount_letters(\"\
    aBcD\") should return 0.\ncount_letters(\"aBcD\") should return 0.\ncount_letters(\"\
    aBcD\") should return 0.\ncount_letters(\"aBcD\") should return 0.\ncount_letters(\"\
    aBcD\") should return 0.\ncount_letters(\"aBcD\") should return 0.\ncount_letters(\"\
    aBcD\") should return 0.\ncount_letters(\"aBcD\") should return 0.\ncount_letters(\"\
    aBcD\") should return 0.\ncount_letters(\"aBcD\") should return 0.\ncount_letters(\"\
    aBcD\") should return 0.\ncount_letters(\"aBcD\") should return 0.\ncount_letters(\"\
    aBcD\") should return 0.\ncount_letters(\"aBcD\") should return 0.\ncount_letters(\"\
    aBcD\") should return 0.\ncount_letters(\"aBcD\") should return 0.\ncount_letters(\"\
    aBcD\") should return 0.\ncount_letters(\"aBcD\") should return 0.\ncount_letters(\"\
    aBcD\") should return 0.\ncount_letters(\"aBcD\") should return 0.\ncount_letters(\"\
    aBcD\") should return 0.\ncount_letters(\"aBcD\nusing Test\n\n@testset begin\n\
    \ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpjujgvqjv.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpjujgvqjv.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict{String,\
    \ String}()\n        return true\n    end\n    \n    for k in keys(dict)\n   \
    \     if islower(k)\n            return false\n        end\n    end\n    \n  \
    \  for k in keys(dict)\n        if isupper(k)\n            return false\n    \
    \    end\n    end\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n</cell>\n<code\
    \ language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"apple\", \"8\" => \"banana\", \"a\" => \"apple\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    ))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"STATE\" => \"NC\"\
    , \"ZIP\" => \"12345\" ))\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a dictionary as an argument and returns a new dictionary with the keys\
    \ in lower case and the keys in upper case if the keys are strings in lower case\
    \ or upper case. \nThe function should return an empty dictionary if the given\
    \ dictionary is empty.\nExamples:\nlower_upper_dict({\"a\":\"apple\", \"b\":\"\
    banana\"}) should return Dict(\"a\" => \"apple\", \"b\" => \"banana\").\nlower_upper_dict({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return Dict(\"a\" =>\
    \ \"apple\", \"A\" => \"banana\", \"B\" => \"banana\").\nlower_upper_dict({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return Dict(\"a\" =>\
    \ \"apple\", \"8\" => \"banana\").\nlower_upper_dict({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}) should return Dict(\"Name\" => \"John\", \"Age\"\
    \ => \"36\", \"City\" => \"Houston\").\nlower_upper_dict({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" }) should return Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    ).\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpgwtwxu1v.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpgwtwxu1v.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    true = true\n\
    \    for key in keys(dict)\n        if islower(key) || isupper(key)\n        \
    \    true = false\n        end\n    end\n    return true\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpyynxoqmi.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpyynxoqmi.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict{String,\
    \ String}()\n        return true\n    \n    for key in keys(dict)\n        if\
    \ islower(key)\n            return false\n        if isupper(key)\n          \
    \  return false\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpqrn2ppxg.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpqrn2ppxg.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict{String,\
    \ String}()\n        true\n    else\n        false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpmf9q6oia.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpmf9q6oia.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict{String,\
    \ String}()\n        return true\n    \n    true = false\n    for key in keys(dict)\n\
    \        if islower(key)\n            true = true\n        elseif isupper(key)\n\
    \            true = true\n        else\n            false = false\n        end\n\
    \    end\n    return true\nend\n</cell>\n<code language=julia-1.3>\nusing Test\n\
    \n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmplxiow0m3.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmplxiow0m3.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict{String,\
    \ String}()\n        return true\n    \n    for k in keys(dict)\n        if islower(k)\n\
    \            return false\n        if isupper(k)\n            return false\n \
    \   end\n    return true\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a string and returns the number of characters in that string.\nExamples:\n\
    count_chars(\"Hello World\") should return 11.\ncount_chars(\"Hello World!\")\
    \ should return 20.\ncount_chars(\"Hello World!!\") should return 21.\ncount_chars(\"\
    Hello World!!!\") should return 22.\ncount_chars(\"Hello World!!!!\") should return\
    \ 23.\ncount_chars(\"Hello World!!!!!\") should return 24.\ncount_chars(\"Hello\
    \ World!!!!!!\") should return 25.\ncount_chars(\"Hello World!!!!!!!\") should\
    \ return 26.\ncount_chars(\"Hello World!!!!!!!1\") should return 27.\ncount_chars(\"\
    Hello World!!!!!!!12\") should return 28.\ncount_chars(\"Hello World!!!!!!!123\"\
    ) should return 29.\ncount_chars(\"Hello World!!!!!!!1234\") should return 30.\n\
    count_chars(\"Hello World!!!!!!!12345\") should return 31.\ncount_chars(\"Hello\
    \ World!!!!!!!123456\") should return 32.\ncount_chars(\"Hello World!!!!!!!1234567\"\
    ) should return 33.\ncount_chars(\"Hello World!!!!!!!12345678\") should return\
    \ 34.\ncount_chars(\"Hello World!!!!!!!123456789\") should return 35.\ncount_chars(\"\
    Hello World!!!!!!!1234567890\") should return 36.\ncount_chars(\"Hello World!!!!!!!12345678901\"\
    ) should return 37.\ncount_chars(\"Hello World!!!!!!!123456789012\") should return\
    \ 38.\ncount_chars(\"Hello World!!!!!!!1234567890123\") should return 39.\ncount_chars(\"\
    Hello World!!!!!!!12345678901234\") should return 40.\ncount_chars(\"Hello World!!!!!!!123456789012345\"\
    ) should return 41.\ncount_chars(\"Hello World!!!!!!!1234567890123456\") should\
    \ return 42.\ncount_chars(\"Hello World!!!!!!!12345678901234567\") should return\
    \ 43.\ncount_chars(\"Hello World!!!!!!!123456789012345678\") should return 44.\n\
    count_chars(\"Hello World!!!!!!!1234567890123456789\") should return 45.\ncount_chars(\"\
    Hello World!!!!!!!12345678901234567890\") should return 46.\ncount_chars(\"Hello\
    \ World!!!!!!!123456789012345678901\") should return 47.\ncount_chars(\"Hello\
    \ World!!!!!!!1234567890123456789012\") should return 48.\ncount_chars(\"Hello\
    \ World!!!!!!!12345678901234567890123\") should return 49.\ncount_chars(\"Hello\
    \ World!!!!!!!123456789\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpqm1vb_ti.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpqm1vb_ti.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict()\n\
    \        return true\n    \n    for k in keys(dict)\n        if islower(k)\n \
    \           return false\n        if isupper(k)\n            return false\n  \
    \  end\n    return true\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpl5_mbx00.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpl5_mbx00.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    true = true\n    for\
    \ key in dict\n        if islower(key)\n            true = false\n        else\n\
    \            true = true\n        end\n    end\n    return true\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpfqpeljvt.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpfqpeljvt.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    true = true\n\
    \    for key in keys(dict)\n        if islower(key)\n            true = false\n\
    \        elseif isupper(key)\n            true = false\n        end\n    end\n\
    \    return true\nend\n</cell>\n<text>\nExercise 4\nWrite a function that takes\
    \ a string and returns a string with all lowercase letters replaced with uppercase\
    \ letters.\nExamples:\nreplace_lowercase(\"apple\") should return \"APPLE\".\n\
    replace_lowercase(\"banana\") should return \"BANANA\".\nreplace_lowercase(\"\
    apple\") should return \"APPLE\".\nreplace_lowercase(\"apple\") should return\
    \ \"APPLE\".\nreplace_lowercase(\"apple\") should return \"APPLE\".\nreplace_lowercase(\"\
    apple\") should return \"APPLE\".\nreplace_lowercase(\"apple\") should return\
    \ \"APPLE\".\nreplace_lowercase(\"apple\") should return \"APPLE\".\nreplace_lowercase(\"\
    apple\") should return \"APPLE\".\nreplace_lowercase(\"apple\") should return\
    \ \"APPLE\".\nreplace_lowercase(\"apple\") should return \"APPLE\".\nreplace_lowercase(\"\
    apple\") should return \"APPLE\".\nreplace_lowercase(\"apple\") should return\
    \ \"APPLE\".\nreplace_lowercase(\"apple\") should return \"APPLE\".\nreplace_lowercase(\"\
    apple\") should return \"APPLE\".\nreplace_lowercase(\"apple\") should return\
    \ \"APPLE\".\nreplace_lowercase(\"apple\") should return \"APPLE\".\nreplace_lowercase(\"\
    apple\") should return \"APPLE\".\nreplace_lowercase(\"apple\") should return\
    \ \"APPLE\".\nreplace_lowercase(\"apple\") should return \"APPLE\".\nreplace_lowercase(\"\
    apple\") should return \"APPLE\".\nreplace_lowercase(\"apple\") should return\
    \ \"APPLE\".\nreplace_lowercase(\"apple\") should return \"APPLE\".\nreplace_lowercase(\"\
    apple\") should return \"APPLE\".\nreplace_lowercase(\"apple\") should return\
    \ \"APPLE\".\nreplace_lowercase(\"apple\") should return \"APPLE\".\nreplace_lowercase(\"\
    apple\") should return \"APPLE\".\nreplace_lowercase(\"apple\") should return\
    \ \"APPLE\".\nreplace_lowercase(\"apple\") should return \"APPLE\".\nreplace_lowercase(\"\
    apple\") should return \"APPLE\".\nreplace_lowercase(\"apple\") should return\
    \ \"APPLE\".\nreplace_lowercase(\"apple\") should return \"APPLE\".\nreplace_lowercase(\"\
    apple\") should return \"APPLE\".\nreplace_lowercase(\"apple\") should return\
    \ \"APPLE\".\nreplace_lowercase(\"apple\") should return \"APPLE\".\nreplace_lowercase(\"\
    apple\") should return \"APPLE\".\nreplace_lowercase(\"apple\") should return\
    \ \"APPLE\".\nreplace_lowercase(\"apple\") should return \"APPLE\".\nreplace_lowercase(\"\
    apple\") should return \"APPLE\".\nreplace_lowercase(\"apple\") should return\
    \ \"\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp29qlc9sz.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmp29qlc9sz.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    true = true\n\
    \    for key in dict\n        if islower(key)\n            true = false\n    \
    \    elseif isupper(key)\n            true = false\n        end\n    end\n   \
    \ return true\nend\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"apple\", \"b\" => \"banana\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    ))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"apple\"\
    , \"8\" => \"banana\", \"a\" => \"apple\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    ))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"STATE\" => \"NC\"\
    , \"ZIP\" => \"12345\"))\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a dictionary as an argument and returns a new dictionary where all keys are\
    \ strings in lower case and all values are strings in upper case.\nusing Test\n\
    \n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmprn2msiuo.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmprn2msiuo.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict()\n\
    \        return false\n    \n    for k in keys(dict)\n        if islower(k)\n\
    \            return false\n        if isupper(k)\n            return false\n \
    \   end\n    return true\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpz5q0wm15.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpz5q0wm15.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict{String,\
    \ String}()\n        return true\n    \n    for k in keys(dict)\n        if islower(k)\n\
    \            return false\n        if isupper(k)\n            return false\n \
    \   end\n    return true\nend\n</cell>\n<code language=julia-1.4>\ncheck_dict_case(Dict(\"\
    a\" => \"apple\", \"b\" => \"banana\"))\n</cell>\n<code language=julia-1.4>\n\
    check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    ))\n</cell>\n<code language=julia-1.4>\ncheck_dict_case(Dict(\"a\" => \"apple\"\
    , \"8\" => \"banana\", \"a\" => \"apple\"))\n</cell>\n<code language=julia-1.4>\n\
    check_dict_case(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    ))\n</cell>\n<code language=julia-1.4>\ncheck_dict_case(Dict(\"STATE\" => \"NC\"\
    , \"ZIP\" => \"12345\" ))\n</cell>\n<text>\nExercise 2: Write a function that\
    \ takes a dictionary and returns a new dictionary where all keys are converted\
    \ to lower case and all values are converted to upper case. \nThe function should\
    \ return an empty dictionary if the given dictionary is empty.\nExamples:\nconvert_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return Dict(\"a\" => \"APPLE\", \"b\"\
    \ => \"BANANA\").\nconvert_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\"\
    :\"banana\"}) should return Dict(\"a\" => \"APPLE\", \"A\" => \"BANANA\", \"B\"\
    \ => \"BANANA\").\nconvert_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return Dict(\"a\" => \"APPLE\", \"8\" => \"BANANA\", \"a\"\
    \ => \"APPLE\").\nconvert_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\"\
    :\"Houston\"}) should return Dict(\"Name\" => \"JOHN\", \"Age\" => \"36\", \"\
    City\" => \"HOUSTON\").\nconvert_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\"\
    \ }) should return Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\" ).\nconvert_dict_case({})\
    \ should return an empty dictionary.\nconvert_dict_case({\"a\":\"apple\", \"b\"\
    :\"banana\", \"c\":\"carrot\"}) should return Dict(\"a\" => \"APPLE\", \"b\" =>\
    \ \"BANANA\", \"c\" => \"CARROT\").\nconvert_dict_case({\"a\":\"apple\", \"b\"\
    :\"banana\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpqd3iaog6.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpqd3iaog6.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict()\n\
    \        return false\n    else\n        for key in keys(dict)\n            if\
    \ islower(key)\n                return true\n            elseif isupper(key)\n\
    \                return true\n            else\n                return false\n\
    \    end\nend\n</cell>\n<text>\nExercise 2: Write a function that takes a string\
    \ and returns the number of characters in that string.\nExamples:\ncount_chars(\"\
    apple\") should return 5.\ncount_chars(\"banana\") should return 6.\ncount_chars(\"\
    apple\") should return 0.\ncount_chars(\"a\") should return 0.\ncount_chars(\"\
    \") should return 0.\ncount_chars(\" \") should return 0.\ncount_chars(\" a\"\
    ) should return 1.\ncount_chars(\"a \") should return 1.\ncount_chars(\"a b\"\
    ) should return 2.\ncount_chars(\"a b c\") should return 3.\ncount_chars(\"a b\
    \ c \") should return 3.\ncount_chars(\"a b c d\") should return 4.\ncount_chars(\"\
    a b c d \") should return 4.\ncount_chars(\"a b c d e\") should return 5.\ncount_chars(\"\
    a b c d e \") should return 5.\ncount_chars(\"a b c d e f\") should return 6.\n\
    count_chars(\"a b c d e f \") should return 6.\ncount_chars(\"a b c d e f g\"\
    ) should return 7.\ncount_chars(\"a b c d e f g \") should return 7.\ncount_chars(\"\
    a b c d e f g h\") should return 8.\ncount_chars(\"a b c d e f g h \") should\
    \ return 8.\ncount_chars(\"a b c d e f g h i\") should return 9.\ncount_chars(\"\
    a b c d e f g h i \") should return 9.\ncount_chars(\"a b c d e f g h i j\") should\
    \ return 10.\ncount_chars(\"a b c d e f g h i j \") should return 10.\ncount_chars(\"\
    a b c d e f g h i j k\") should return 11.\ncount_chars(\"a b c d e f g h i j\
    \ k \") should return 11.\ncount_chars(\"a b c d e f g h i j k l\") should return\
    \ 12.\ncount_chars(\"a b c d e f g h i j k l \") should return 12.\ncount_chars(\"\
    a b c d e f g h i j k l m\") should return 13.\ncount_chars(\"a b c d e f g h\
    \ i j k l m \") should return 13.\ncount_chars(\"a b c \nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpd8axmuer.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpd8axmuer.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict{String,\
    \ String}()\n        return true\n    \n    for key in keys(dict)\n        if\
    \ islower(key)\n            return false\n        if isupper(key)\n          \
    \  return false\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpcojk1bil.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpcojk1bil.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    true = true \n\
    \    for key in keys(dict)\n        if islower(key)\n            true = false\n\
    \        elseif isupper(key)\n            true = false\n        end\n    end\n\
    \    return true\nend\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp4mfcn_59.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmp4mfcn_59.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    true = true\n\
    \    for key in dict\n        if islower(key)\n            true = false\n    \
    \        break\n        end\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmptviaiile.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmptviaiile.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    true = true\n    for\
    \ key in keys(dict)\n        if islower(key)\n            true = false\n     \
    \   elseif isupper(key)\n            true = false\n        end\n    end\n    return\
    \ true\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpdfube3xc.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpdfube3xc.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    true = true\n    for\
    \ key in keys(dict)\n        if islower(key)\n            true = false\n     \
    \   else\n            true = true\n    end\n    return true\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp6ucayopq.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmp6ucayopq.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict{String,\
    \ String}()\n        return true\n    \n    for k in keys(dict)\n        if islower(k)\n\
    \            return false\n        if isupper(k)\n            return false\n \
    \   end\n    return true\nend\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"apple\", \"b\" => \"banana\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    ))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"apple\"\
    , \"8\" => \"banana\", \"a\" => \"apple\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    ))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"STATE\" => \"NC\"\
    , \"ZIP\" => \"12345\" ))\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a dictionary as an argument and returns a new dictionary where all keys\
    \ are converted to upper case. \nThe function should return a new dictionary if\
    \ the given dictionary is empty or if the keys are not strings or if all keys\
    \ are already in upper case.\nExamples:\nconvert_dict_case(Dict(\"a\" => \"apple\"\
    , \"b\" => \"banana\")) should return Dict(\"A\" => \"apple\", \"B\" => \"banana\"\
    ).\nconvert_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) should return Dict(\"A\" => \"apple\", \"B\" => \"banana\").\nconvert_dict_case(Dict(\"\
    a\" => \"apple\", \"8\" => \"banana\", \"a\" => \"apple\")) should return Dict(\"\
    A\" => \"apple\", \"B\" => \"banana\").\nconvert_dict_case(Dict(\"Name\" => \"\
    John\", \"Age\" => \"36\", \"City\" => \"Houston\")) should return Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\").\nconvert_dict_case(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\" )) should return Dict(\"STATE\" => \"\
    NC\", \"ZIP\" => \"12345\" ).\nconvert_dict_case(Dict()) should return Dict().\n\
    convert_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\", \"c\" => \"carrot\"\
    )) should return Dict(\"A\" => \"apple\", \"B\" => \"banana\", \"C\" => \"carrot\n\
    using Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpp3jogdsx.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpp3jogdsx.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    true = true\n\
    \    for key in keys(dict)\n        if islower(key)\n            true = false\n\
    \        elseif isupper(key)\n            true = false\n        end\n    end\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpzo1xg13l.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpzo1xg13l.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    true = true\n\
    \    for key in keys(dict)\n        if islower(key)\n            true = false\n\
    \        else\n            true = true\n    end\n    return true\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpoxffadh1.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpoxffadh1.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict{String,\
    \ String}()\n        return true\n    end\n    \n    for key in keys(dict)\n \
    \       if islower(key)\n            return false\n        end\n    end\n    \n\
    \    for key in keys(dict)\n        if isupper(key)\n            return false\n\
    \        end\n    end\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpjthc_xin.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpjthc_xin.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict()\n\
    \        return false\n    \n    for k in keys(dict)\n        if islower(k)\n\
    \            return true\n        if isupper(k)\n            return true\n   \
    \ return false\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmps3ktmhrx.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmps3ktmhrx.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    true = true\n\
    \    for key in keys(dict)\n        if islower(key) || isupper(key)\n        \
    \    true = false\n        end\n    end\n    return true\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpjuoq6s6e.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpjuoq6s6e.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict{String,\
    \ String}()\n        return true\n    end\n    \n    for key in keys(dict)\n \
    \       if islower(key) || isupper(key)\n            return true\n        end\n\
    \    end\n    \n    return false\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp8dz7bfs0.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmp8dz7bfs0.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if dict == Dict{String,\
    \ String}()\n        return true\n    else\n        true = false\n        for\
    \ key in dict\n            if islower(key)\n                true = true\n    \
    \        else\n                true = true\n        end\n        return true\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpyfzv8pjq.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpyfzv8pjq.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict()\n\
    \        return false\n    else\n        for key in dict\n            if islower(key)\n\
    \                return true\n            elseif isupper(key)\n              \
    \  return true\n            else\n                return false\n        end\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpv0hu3hkn.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpv0hu3hkn.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict{String,\
    \ String}()\n        return true\n    \n    for k in keys(dict)\n        if islower(k)\n\
    \            return false\n        if isupper(k)\n            return false\n \
    \   end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpd8142yqo.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpd8142yqo.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    true = true\n\
    \    for key in keys(dict)\n        if islower(key) || isupper(key)\n        \
    \    true = false\n        end\n    end\n    return true\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpqh5qvixp.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpqh5qvixp.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    true = true\n\
    \    for key in keys(dict)\n        if islower(key)\n            true = false\n\
    \        elseif isupper(key)\n            true = false\n        end\n    end\n\
    \    return true\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns the number of vowels contained in the string.\nThe function\
    \ should return 0 if the string contains no vowels.\nThe function should return\
    \ 1 if the string contains 1 vowel.\nThe function should return 2 if the string\
    \ contains 2 vowels.\nThe function should return 3 if the string contains 3 vowels.\n\
    The function should return 4 if the string contains 4 vowels.\nThe function should\
    \ return 5 if the string contains 5 vowels.\nThe function should return 6 if the\
    \ string contains 6 vowels.\nThe function should return 7 if the string contains\
    \ 7 vowels.\nThe function should return 8 if the string contains 8 vowels.\nThe\
    \ function should return 9 if the string contains 9 vowels.\nThe function should\
    \ return 10 if the string contains 10 vowels.\nThe function should return 11 if\
    \ the string contains 11 vowels.\nThe function should return 12 if the string\
    \ contains 12 vowels.\nThe function should return 13 if the string contains 13\
    \ vowels.\nThe function should return 14 if the string contains 14 vowels.\nThe\
    \ function should return 15 if the string contains 15 vowels.\nThe function should\
    \ return 16 if the string contains 16 vowels.\nThe function should return 17 if\
    \ the string contains 17 vowels.\nThe function should return 18 if the string\
    \ contains 18 vowels.\nThe function should return 19 if the string contains 19\
    \ vowels.\nThe function should return 20 if the string contains 20 vowels.\nThe\
    \ function should return 21 if the string contains 21 vowels.\nThe function should\
    \ return 22 if the string contains 22 vowels.\nThe function should return 23 if\
    \ the string contains 23 vowels.\nThe function should return 24 if the string\
    \ contains 24 vowels.\nThe function should return 25 if the string contains 25\
    \ vowels.\nThe function should return 26 if the string contains 26 vowels.\nThe\
    \ function should return 27 if the string contains 27 vowels.\nThe function should\
    \ return 28 if the string contains 28 vowels.\nThe function should return 29 if\
    \ the string contains 29 vowels.\nThe function should return 30 if the string\
    \ contains 30 vowels.\nThe function should return 31 if the string contains 31\
    \ vowels.\nThe function should return 32 if the string contains 32 vowels.\nThe\
    \ function should return 33 if the string contains 33 vowels.\nThe function should\
    \ return 34 if the string contains 34 vowels.\nThe function should return 35 if\
    \ the string contains 35 vowels.\nThe function should return 36 if the string\
    \ contains 36 vowels.\nThe function should return \nusing Test\n\n@testset begin\n\
    \ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp94wsn9kw.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmp94wsn9kw.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict{String,\
    \ String}()\n        return true\n    \n    for key in dict\n        if islower(key)\n\
    \            return false\n        if isupper(key)\n            return false\n\
    \    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpy4by1khe.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpy4by1khe.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    true = true\n    for\
    \ key in keys(dict)\n        if islower(key)\n            true = false\n     \
    \   elseif isupper(key)\n            true = false\n        end\n    end\n    return\
    \ true\nend\n</cell>\n<text>\nExercise 4\nWrite a function that takes a string\
    \ and returns a new string with all the characters in lower case and all the characters\
    \ in upper case. \nExamples:\nlowercase(\"apple\") should return \"apple\".\n\
    uppercase(\"apple\") should return \"APPLE\".\nuppercase(\"APPLE\") should return\
    \ \"APPLE\".\nuppercase(\"APPLE\") should return \"APPLE\".\nlowercase(\"APPLE\"\
    ) should return \"apple\".\nlowercase(\"APPLE\") should return \"APPLE\".\nlowercase(\"\
    APPLE\") should return \"APPLE\".\nlowercase(\"APPLE\") should return \"APPLE\"\
    .\nlowercase(\"APPLE\") should return \"APPLE\".\nlowercase(\"APPLE\") should\
    \ return \"APPLE\".\nlowercase(\"APPLE\") should return \"APPLE\".\nlowercase(\"\
    APPLE\") should return \"APPLE\".\nlowercase(\"APPLE\") should return \"APPLE\"\
    .\nlowercase(\"APPLE\") should return \"APPLE\".\nlowercase(\"APPLE\") should\
    \ return \"APPLE\".\nlowercase(\"APPLE\") should return \"APPLE\".\nlowercase(\"\
    APPLE\") should return \"APPLE\".\nlowercase(\"APPLE\") should return \"APPLE\"\
    .\nlowercase(\"APPLE\") should return \"APPLE\".\nlowercase(\"APPLE\") should\
    \ return \"APPLE\".\nlowercase(\"APPLE\") should return \"APPLE\".\nlowercase(\"\
    APPLE\") should return \"APPLE\".\nlowercase(\"APPLE\") should return \"APPLE\"\
    .\nlowercase(\"APPLE\") should return \"APPLE\".\nlowercase(\"APPLE\") should\
    \ return \"APPLE\".\nlowercase(\"APPLE\") should return \"APPLE\".\nlowercase(\"\
    APPLE\") should return \"APPLE\".\nlowercase(\"APPLE\") should return \"APPLE\"\
    .\nlowercase(\"APPLE\") should return \"APPLE\".\nlowercase(\"APPLE\") should\
    \ return \"APPLE\".\nlowercase(\"APPLE\") should return \"APPLE\".\nlowercase(\"\
    APPLE\") should return \"APPLE\".\nlowercase(\"APPLE\") should return \"APPLE\"\
    .\nlowercase(\"APPLE\") should return \"APPLE\".\nlowercase(\"APPLE\") should\
    \ return \"APPLE\".\nlowercase(\"APPLE\") should return \"APPLE\".\nlowercase(\"\
    APPLE\") should return \"APPLE\".\nlowercase(\"APPLE\") should return \"APPLE\"\
    .\nlowercase(\"APPLE\") should return \"APPLE\".\nlowercase(\"APPLE\") should\
    \ return \"APPLE\".\nlowercase(\"APPLE\") should return \"APPLE\".\nlowercase(\"\
    APPLE\") should return \"APPLE\".\nlowercase(\"APPLE\") should return \"APPLE\"\
    .\nlowercase(\"APPLE\") should return \"APPLE\".\n\nusing Test\n\n@testset begin\n\
    \ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpuymp804l.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpuymp804l.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict{String,\
    \ String}()\n        return true\n    \n    for key in keys(dict)\n        if\
    \ islower(key)\n            return false\n        if isupper(key)\n          \
    \  return false\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpqb4_e1h5.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpqb4_e1h5.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    true = true\n    for\
    \ key in keys(dict)\n        if islower(key)\n            true = false\n     \
    \   else\n            true = true\n        end\n    end\n    return true\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" =>\
    \ \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\"\
    \ => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t\
    @test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t\
    @test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\
    \t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpcuag_y__.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpcuag_y__.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    true = true \n\
    \    for key in keys(dict)\n        if islower(key)\n            true = false\n\
    \        else\n            true = true\n    end\n    return true\nend\n</cell>\n\
    <code language=julia-1.3>\n\"\"\"\n    Given a dictionary, return True if all\
    \ keys are strings in lower \n    case or all keys are strings in upper case,\
    \ else return False.\n    The function should return False is the given dictionary\
    \ is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    \    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpx5okqulo.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpx5okqulo.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if dict == Dict{String,\
    \ String}()\n        return true\n    else\n        true = false\n        for\
    \ key in dict\n            if islower(key)\n                true = true\n    \
    \        elseif isupper(key)\n                true = true\n            else\n\
    \                true = false\n            end\n        end\n        return true\n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string\
    \ and returns the number of characters in that string. \nExamples:\ncount_chars(\"\
    apple\") should return 5.\ncount_chars(\"banana\") should return 3.\ncount_chars(\"\
    hello\") should return 0.\ncount_chars(\"\") should return 0.\ncount_chars(\"\
    \ \") should return 0.\ncount_chars(\" a\") should return 1.\ncount_chars(\" a\
    \ \") should return 2.\ncount_chars(\" a b\") should return 3.\ncount_chars(\"\
    \ a b c\") should return 4.\ncount_chars(\" a b c d\") should return 5.\ncount_chars(\"\
    \ a b c d e\") should return 6.\ncount_chars(\" a b c d e f\") should return 7.\n\
    count_chars(\" a b c d e f g\") should return 8.\ncount_chars(\" a b c d e f g\
    \ h\") should return 9.\ncount_chars(\" a b c d e f g h i\") should return 10.\n\
    count_chars(\" a b c d e f g h i j\") should return 11.\ncount_chars(\" a b c\
    \ d e f g h i j k\") should return 12.\ncount_chars(\" a b c d e f g h i j k l\"\
    ) should return 13.\ncount_chars(\" a b c d e f g h i j k l m\") should return\
    \ 14.\ncount_chars(\" a b c d e f g h i j k l m n\") should return 15.\ncount_chars(\"\
    \ a b c d e f g h i j k l m n o\") should return 16.\ncount_chars(\" a b c d e\
    \ f g h i j k l m n o p\") should return 17.\ncount_chars(\" a b c d e f g h i\
    \ j k l m n o p q\") should return 18.\ncount_chars(\" a b c d e f g h i j k l\
    \ m n o p q r\") should return 19.\ncount_chars(\" a b c d e f g h i j k l m n\
    \ o p q r s\") should return 20.\ncount_chars(\" a b c \nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpfbswtfjk.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpfbswtfjk.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict{String,\
    \ String}()\n        return true\n    \n    for k in keys(dict)\n        if islower(k)\n\
    \            return false\n        if isupper(k)\n            return false\n \
    \   end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp83lrfx60.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmp83lrfx60.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict{String,\
    \ String}()\n        return true\n    else\n        true\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpduawgyp5.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpduawgyp5.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict{String,\
    \ String}()\n        true\n    else\n        false\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp556yb2mj.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmp556yb2mj.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict{String,\
    \ String}()\n        return true\n    \n    for k in keys(dict)\n        if islower(k)\n\
    \            return false\n        if isupper(k)\n            return false\n \
    \   end\n    return true\nend\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"apple\", \"b\" => \"banana\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    ))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"apple\"\
    , \"8\" => \"banana\", \"a\" => \"apple\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    ))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"STATE\" => \"NC\"\
    , \"ZIP\" => \"12345\"))\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a dictionary as an argument and returns a new dictionary where all keys are\
    \ strings in lower case and all values are strings in upper case.\nusing Test\n\
    \n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpvzl0z_3w.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpvzl0z_3w.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict{String,\
    \ String}()\n        return true\n    \n    true = false\n    for key in dict\n\
    \        if islower(key)\n            true = true\n        elseif isupper(key)\n\
    \            true = true\n        end\n    end\n    return true\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpipgr_yf_.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpipgr_yf_.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    true = true\n\
    \    for key in keys(dict)\n        if islower(key)\n            true = false\n\
    \        elseif isupper(key)\n            true = false\n        end\n    end\n\
    \    return true\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string and returns a new string with all the characters in lower case and\
    \ all the characters in upper case.\nExamples:\ncapitalize(\"apple\") should return\
    \ \"Apple\".\ncapitalize(\"banana\") should return \"Banana\".\ncapitalize(\"\
    apple\") should return \"Apple\".\ncapitalize(\"apple\") should return \"Apple\"\
    .\ncapitalize(\"apple\") should return \"Apple\".\ncapitalize(\"apple\") should\
    \ return \"Apple\".\ncapitalize(\"apple\") should return \"Apple\".\ncapitalize(\"\
    apple\") should return \"Apple\".\ncapitalize(\"apple\") should return \"Apple\"\
    .\ncapitalize(\"apple\") should return \"Apple\".\ncapitalize(\"apple\") should\
    \ return \"Apple\".\ncapitalize(\"apple\") should return \"Apple\".\ncapitalize(\"\
    apple\") should return \"Apple\".\ncapitalize(\"apple\") should return \"Apple\"\
    .\ncapitalize(\"apple\") should return \"Apple\".\ncapitalize(\"apple\") should\
    \ return \"Apple\".\ncapitalize(\"apple\") should return \"Apple\".\ncapitalize(\"\
    apple\") should return \"Apple\".\ncapitalize(\"apple\") should return \"Apple\"\
    .\ncapitalize(\"apple\") should return \"Apple\".\ncapitalize(\"apple\") should\
    \ return \"Apple\".\ncapitalize(\"apple\") should return \"Apple\".\ncapitalize(\"\
    apple\") should return \"Apple\".\ncapitalize(\"apple\") should return \"Apple\"\
    .\ncapitalize(\"apple\") should return \"Apple\".\ncapitalize(\"apple\") should\
    \ return \"Apple\".\ncapitalize(\"apple\") should return \"Apple\".\ncapitalize(\"\
    apple\") should return \"Apple\".\ncapitalize(\"apple\") should return \"Apple\"\
    .\ncapitalize(\"apple\") should return \"Apple\".\ncapitalize(\"apple\") should\
    \ return \"Apple\".\ncapitalize(\"apple\") should return \"Apple\".\ncapitalize(\"\
    apple\") should return \"Apple\".\ncapitalize(\"apple\") should return \"Apple\"\
    .\ncapitalize(\"apple\") should return \"Apple\".\ncapitalize(\"apple\") should\
    \ return \"Apple\".\ncapitalize(\"apple\") should return \"Apple\".\ncapitalize(\"\
    apple\") should return \"Apple\".\ncapitalize(\"apple\") should return \"Apple\"\
    .\ncapitalize(\"apple\") should return \"Apple\".\ncapitalize(\"apple\") should\
    \ return \"Apple\".\ncapitalize(\"apple\") should return \"Apple\".\ncapitalize(\"\
    apple\") should return \"Apple\".\ncapitalize(\"apple\") should return \"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpc9zel3ze.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpc9zel3ze.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict{String,\
    \ String}()\n        return true\n    \n    true = false\n    for key in keys(dict)\n\
    \        if islower(key)\n            true = true\n        elseif isupper(key)\n\
    \            true = true\n        else\n            true = false\n        end\n\
    \    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpx0m140rf.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpx0m140rf.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict{String,\
    \ String}()\n        return true\n    end\n    \n    for key in keys(dict)\n \
    \       if islower(key) || isupper(key)\n            return true\n        end\n\
    \    end\n    \n    return false\nend\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"apple\", \"b\" => \"banana\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    ))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"apple\"\
    , \"8\" => \"banana\", \"a\" => \"apple\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    ))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"STATE\" => \"NC\"\
    , \"ZIP\" => \"12345\" ))\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a dictionary as an argument and returns a new dictionary where all keys\
    \ are strings in lower case and all values are strings in upper case.\nThe function\
    \ should return an empty dictionary if the given dictionary is empty.\nExamples:\n\
    dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\")) should return Dict(\"\
    a\" => \"APPLE\", \"b\" => \"BANANA\").\ndict_case(Dict(\"a\" => \"apple\", \"\
    A\" => \"banana\", \"B\" => \"banana\")) should return Dict(\"a\" => \"APPLE\"\
    , \"A\" => \"BANANA\", \"B\" => \"BANANA\").\ndict_case(Dict(\"a\" => \"apple\"\
    , \"8\" => \"banana\", \"a\" => \"apple\")) should return Dict(\"a\" => \"APPLE\"\
    , \"8\" => \"BANANA\", \"a\" => \"APPLE\").\ndict_case(Dict(\"Name\" => \"John\"\
    , \"Age\" => \"36\", \"City\" => \"Houston\")) should return Dict(\"Name\" =>\
    \ \"JOHN\", \"Age\" => \"36\", \"City\" => \"HOUSTON\").\ndict_case(Dict(\"STATE\"\
    \ => \"NC\", \"ZIP\" => \"12345\" )) should return Dict(\"STATE\" => \"NC\", \"\
    ZIP\" => \"12345\" ).\ndict_case(Dict()) should return an empty dictionary.\n\
    dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\", \"c\" => \"carrot\"))\
    \ should return Dict(\"a\" => \"APPLE\", \"b\" => \"BANAN\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp1nd_5lso.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmp1nd_5lso.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    true = true\n\
    \    for key in keys(dict)\n        if islower(key) || isupper(key)\n        \
    \    true = false\n        end\n    end\n    return true\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpjb1xw5wn.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpjb1xw5wn.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict{String,\
    \ String}()\n        return true\n    end\n    \n    for k in keys(dict)\n   \
    \     if islower(k)\n            return false\n        end\n    end\n    \n  \
    \  for k in keys(dict)\n        if isupper(k)\n            return false\n    \
    \    end\n    end\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n</cell>\n<code\
    \ language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"apple\", \"8\" => \"banana\", \"a\" => \"apple\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    ))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"STATE\" => \"NC\"\
    , \"ZIP\" => \"12345\" ))\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a dictionary as an argument and returns a new dictionary where all keys\
    \ are strings in lower case and all values are strings in upper case.\nThe function\
    \ should return an empty dictionary if the given dictionary is empty.\nExamples:\n\
    dict_to_upper_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\")) should return\
    \ Dict(\"a\" => \"APPLE\", \"b\" => \"BANANA\").\ndict_to_upper_case(Dict(\"a\"\
    \ => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\")) should return Dict(\"\
    a\" => \"APPLE\", \"A\" => \"BANANA\", \"B\" => \"BANANA\").\ndict_to_upper_case(Dict(\"\
    a\" => \"apple\", \"8\" => \"banana\", \"a\" => \"apple\")) should return Dict(\"\
    a\" => \"APPLE\", \"8\" => \"BANANA\", \"a\" => \"APPLE\").\ndict_to_upper_case(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) should return\
    \ Dict(\"Name\" => \"JOHN\", \"Age\" => \"36\", \"City\" => \"HOUSTON\").\ndict_to_upper_case(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\" )) should return Dict(\"STATE\" => \"\
    NC\", \"ZIP\" => \"12345\" ).\ndict_to_upper_case(Dict()) should return an empty\
    \ dictionary.\ndict_to_upper_case(Dict(\"a\" => \"\nusing Test\n\n@testset begin\n\
    \ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp96x_z5cd.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmp96x_z5cd.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    true = true\n    for\
    \ key in keys(dict)\n        if islower(key)\n            true = false\n     \
    \   elseif isupper(key)\n            true = false\n        end\n    end\n    return\
    \ true\nend\n</cell>\n<text>\nExercise 3: Write a function that checks if a dictionary\
    \ is empty or not. \nThe function should return True if the given dictionary is\
    \ empty and False if the given dictionary is not empty.\nExamples:\ncheck_dict_empty({})\
    \ should return True.\ncheck_dict_empty({\"a\":\"apple\", \"b\":\"banana\"}) should\
    \ return False.\ncheck_dict_empty({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"\
    banana\"}) should return False.\ncheck_dict_empty({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}) should return False.\ncheck_dict_empty({\"Name\":\"John\"\
    , \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\ncheck_dict_empty({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return False.\n\"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmptuf1tv6l.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmptuf1tv6l.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict()\n\
    \        return false\n    else\n        true\n    end\nend\n</cell>\n<text>\n\
    Exercise 7: Write a function that takes a dictionary as an argument and returns\
    \ a new dictionary where all keys are strings in lower case and all keys are strings\
    \ in upper case.\nExamples:\nconvert_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }) should return {\"a\":\"apple\", \"b\":\"banana\"}.\nconvert_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return {\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"}.\nconvert_dict_case({\"a\":\"apple\", \"\
    8\":\"banana\", \"a\":\"apple\"}) should return {\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}.\nconvert_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"\
    City\":\"Houston\"}) should return {\"name\":\"John\", \"age\":\"36\", \"city\"\
    :\"houston\"}.\nconvert_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should\
    \ return {\"state\":\"NC\", \"zip\":\"12345\"}.\nconvert_dict_case({}) should\
    \ return {}.\nconvert_dict_case({\"a\":\"apple\", \"b\":\"banana\", \"c\":\"carrot\"\
    }) should return {\"a\":\"apple\", \"b\":\"banana\", \"c\":\"carrot\"}.\nconvert_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\", \"c\":\"carrot\", \"d\":\"dog\"}) should return\
    \ {\"a\":\"apple\", \"b\":\"banana\", \"c\":\"carrot\", \"d\":\"dog\"}.\nconvert_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\", \"c\":\"carrot\", \"d\":\"dog\", \"e\":\"elephant\"\
    }) should return {\"a\":\"apple\", \"b\":\"banana\", \"c\":\"carrot\", \"d\":\"\
    dog\", \"e\":\"elephant\"}.\nconvert_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    , \"c\":\"carrot\", \"d\":\"dog\", \"e\":\"elephant\", \"f\":\"fish\"}) should\
    \ return {\"a\":\"apple\", \"b\":\"banana\", \"c\":\"carrot\", \"d\":\"dog\",\
    \ \"e\":\"elephant\", \"f\":\"fish\"}.\nconvert_dict_case({\"a\":\"apple\", \"\
    b\":\"banana\", \"c\":\"carrot\", \"d\":\"dog\", \"e\":\"elephant\", \"f\":\"\
    fish\", \"g\":\"gorilla\"}) should return {\"a\":\"apple\", \"b\":\"banana\",\
    \ \"c\":\"carrot\", \"d\":\"\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpcwf4r7j4.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpcwf4r7j4.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict{String,\
    \ String}()\n        return true\n    \n    for key in keys(dict)\n        if\
    \ islower(key)\n            return false\n        if isupper(key)\n          \
    \  return false\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp5fjrco_b.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmp5fjrco_b.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict{String,\
    \ String}()\n        return true\n    \n    true = false\n    for key in dict\n\
    \        if islower(key)\n            true = true\n        elseif isupper(key)\n\
    \            true = true\n        else\n            true = false\n        end\n\
    \    end\n    return true\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a dictionary and returns the number of keys that are strings in lower\
    \ case or strings in upper case.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"\
    banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"\
    banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"\
    pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t\
    @test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t\
    @test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\
    \t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmphsyrltoj.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmphsyrltoj.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    true = true\n\
    \    for key in dict\n        if islower(key)\n            true = false\n    \
    \    elseif isupper(key)\n            true = false\n        end\n    end\n   \
    \ return true\nend\n</cell>\n<text>\nExercise 7: Write a function that takes a\
    \ string and returns a new string with all the characters in lower case and all\
    \ the characters in upper case removed. \nExamples:\n    remove_all_case(\"apple\"\
    ) should return \"apple\".\n    remove_all_case(\"apple and orange\") should return\
    \ \"apple and orange\".\n    remove_all_case(\"apple and Orange\") should return\
    \ \"apple and orange\".\n    remove_all_case(\"Apple and Orange\") should return\
    \ \"Apple and orange\".\n    remove_all_case(\"Apple and Orange\", \" \") should\
    \ return \"Apple and orange\".\n    remove_all_case(\"Apple and Orange\", \"and\"\
    ) should return \"Apple and orange\".\n    remove_all_case(\"Apple and Orange\"\
    , \"and\", \" \") should return \"Apple and orange\".\n    remove_all_case(\"\
    Apple and Orange\", \"and\", \"and\") should return \"Apple and orange\".\n  \
    \  remove_all_case(\"Apple and Orange\", \"and\", \"and\", \" \") should return\
    \ \"Apple and orange\".\n    remove_all_case(\"Apple and Orange\", \"and\", \"\
    and\", \"and\") should return \"Apple and orange\".\n    remove_all_case(\"Apple\
    \ and Orange\", \"and\", \"and\", \"and\", \" \") should return \"Apple and orange\"\
    .\n    remove_all_case(\"Apple and Orange\", \"and\", \"and\", \"and\", \"and\"\
    ) should return \"Apple and orange\".\n    remove_all_case(\"Apple and Orange\"\
    , \"and\", \"and\", \"and\", \"and\", \" \") should return \"Apple and orange\"\
    .\n    remove_all_case(\"Apple and Orange\", \"and\", \"and\", \"and\", \"and\"\
    , \"and\") should return \"Apple and orange\".\n    remove_all_case(\"Apple and\
    \ Orange\", \"and\", \"and\", \"and\", \"and\", \"and\", \" \") should return\
    \ \"Apple and orange\".\n    remove_all_case(\"Apple and Orange\", \"and\", \"\
    and\", \"and\", \"and\", \"and\", \"and\") should return \"Apple and orange\"\
    .\n    remove_all_case(\"Apple and Orange\", \"and\", \"and\", \"and\", \"and\"\
    , \"and\", \"and\", \" \") should return \"Apple and orange\".\n    remove_all_case(\"\
    Apple and \nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpvwz1vmqh.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpvwz1vmqh.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict{String,\
    \ String}()\n        true\n    else\n        false\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp3oplll07.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmp3oplll07.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    true = true\n\
    \    for key in keys(dict)\n        if islower(key)\n            true = false\n\
    \        elseif isupper(key)\n            true = false\n        end\n    end\n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpogy3le5y.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpogy3le5y.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    true = true\n\
    \    for key in dict\n        if islower(key)\n            true = false\n    \
    \    else\n            true = true\n        end\n    end\n    return true\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" =>\
    \ \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\"\
    \ => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t\
    @test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t\
    @test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\
    \t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmptirzt_z5.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmptirzt_z5.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict{String,\
    \ String}()\n        return true\n    \n    for key in keys(dict)\n        if\
    \ islower(key)\n            return false\n        if isupper(key)\n          \
    \  return false\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp8kq4skq9.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmp8kq4skq9.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict{String,\
    \ String}()\n        return true\n    \n    for k in keys(dict)\n        if islower(k)\n\
    \            return false\n        if isupper(k)\n            return false\n \
    \   end\n    return true\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpnpfk03f8.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpnpfk03f8.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict{String,\
    \ String}()\n        return true\n    \n    for key in keys(dict)\n        if\
    \ islower(key)\n            return false\n        if isupper(key)\n          \
    \  return false\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\n</cell>\n<code\
    \ language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\"\
    , \"B\" => \"banana\"))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"apple\", \"8\" => \"banana\", \"a\" => \"apple\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    ))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"STATE\" => \"NC\"\
    , \"ZIP\" => \"12345\" ))\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a dictionary and returns a new dictionary where all keys are converted\
    \ to lower case and all values are converted to upper case.\nThe function should\
    \ return an empty dictionary if the given dictionary is empty.\nExamples:\nconvert_dict_case(Dict(\"\
    a\" => \"apple\", \"b\" => \"banana\")) should return Dict(\"a\" => \"APPLE\"\
    , \"b\" => \"BANANA\").\nconvert_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"\
    banana\", \"B\" => \"banana\")) should return Dict(\"a\" => \"APPLE\", \"A\" =>\
    \ \"BANANA\", \"B\" => \"BANANA\").\nconvert_dict_case(Dict(\"a\" => \"apple\"\
    , \"8\" => \"banana\", \"a\" => \"apple\")) should return Dict(\"a\" => \"APPLE\"\
    , \"8\" => \"BANANA\", \"a\" => \"APPLE\").\nconvert_dict_case(Dict(\"Name\" =>\
    \ \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) should return Dict(\"\
    Name\" => \"JOHN\", \"Age\" => \"36\", \"City\" => \"HOUSTON\").\nconvert_dict_case(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\" )) should return Dict(\"STATE\" => \"\
    NC\", \"ZIP\" => \"12345\" ).\nconvert_dict_case(Dict()) should return an empty\
    \ dictionary.\nconvert_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"\
    , \"c\" => \"carrot\")) should return Dict(\"a\" => \"APPLE\", \"b\" => \"BAN\n\
    using Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpm_2bd4ik.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpm_2bd4ik.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict()\n\
    \        return true\n    \n    for k in keys(dict)\n        if islower(k)\n \
    \           return false\n        if isupper(k)\n            return false\n  \
    \  end\n    return true\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpg3a_qkyf.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpg3a_qkyf.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict{String,\
    \ String}()\n        return true\n    end\n    \n    true = false\n    for key\
    \ in keys(dict)\n        if islower(key)\n            true = true\n        elseif\
    \ isupper(key)\n            true = true\n        else\n            true = false\n\
    \        end\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpv9uadsg7.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpv9uadsg7.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    true = true\n\
    \    for key in keys(dict)\n        if islower(key)\n            true = false\n\
    \        else\n            true = true\n    end\n    return true\nend\n</cell>\n\
    <code language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp7uonx86_.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmp7uonx86_.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict()\n\
    \        return false\n    \n    true = true\n    for key in dict\n        if\
    \ islower(key)\n            true = false\n        elseif isupper(key)\n      \
    \      true = false\n        end\n    end\n    return true\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpejzsejlk.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpejzsejlk.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict{String,\
    \ String}()\n        return true\n    \n    true = false\n    for key in dict\n\
    \        if islower(key)\n            true = true\n        elseif isupper(key)\n\
    \            true = true\n        else\n            return false\n    end\n  \
    \  return true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp5qqyg34i.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmp5qqyg34i.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    true = true\n\
    \    for key in dict\n        if islower(key)\n            true = false\n    \
    \    elseif isupper(key)\n            true = false\n        end\n    end\n   \
    \ return true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpw4lrh963.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpw4lrh963.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    true = true\n\
    \    for key in keys(dict)\n        if islower(key)\n            true = false\n\
    \        else\n            true = true\n        end\n    end\n    return true\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" =>\
    \ \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\"\
    \ => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t\
    @test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t\
    @test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\
    \t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpoo_90hpw.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpoo_90hpw.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict()\n\
    \        return true\n    \n    true = false\n    for key in dict\n        if\
    \ islower(key)\n            true = true\n        elseif isupper(key)\n       \
    \     true = true\n        else\n            true = false\n        end\n    end\n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp04rf40bu.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmp04rf40bu.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict{String,\
    \ String}()\n        return true\n    \n    for key in dict\n        if islower(key)\n\
    \            return false\n        if isupper(key)\n            return false\n\
    \    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp0o6x48qq.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmp0o6x48qq.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict{String,\
    \ String}()\n        return true\n    \n    for k in keys(dict)\n        if islower(k)\n\
    \            return false\n        if isupper(k)\n            return false\n \
    \   end\n    return true\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpxtooxdls.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpxtooxdls.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if dict == Dict{String,\
    \ String}()\n        true\n    else\n        false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp43msgam9.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmp43msgam9.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    true = true\n\
    \    for key in keys(dict)\n        if islower(key)\n            true = false\n\
    \        else\n            true = true\n    end\n    return true\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp111wnu96.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmp111wnu96.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    true = true\n\
    \    for key in dict\n        if islower(key)\n            true = false\n    \
    \    else\n            true = true\n    end\n    return true\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp0n2_fcgt.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmp0n2_fcgt.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    true = true\n\
    \    for key in dict\n        if islower(key)\n            true = false\n    \
    \    elseif isupper(key)\n            true = false\n        end\n    end\n   \
    \ return true\nend\n</cell>\n<text>\nExercise 4\nWrite a function that takes a\
    \ string and returns a new string where all \n    characters are capitalized.\
    \ \n    \n    For example, \"hello\" -> \"Hello\"\n    \n    Do not use the built-in\
    \ string function capitalize.\n    \n    Examples:\n    capitalize(\"hello\")\
    \ should return \"Hello\".\n    capitalize(\"hello\") should return \"Hello\"\
    .\n    capitalize(\"hello\") should return \"Hello\".\n    capitalize(\"hello\"\
    ) should return \"Hello\".\n    capitalize(\"hello\") should return \"Hello\"\
    .\n    capitalize(\"hello\") should return \"Hello\".\n    capitalize(\"hello\"\
    ) should return \"Hello\".\n    capitalize(\"hello\") should return \"Hello\"\
    .\n    capitalize(\"hello\") should return \"Hello\".\n    capitalize(\"hello\"\
    ) should return \"Hello\".\n    capitalize(\"hello\") should return \"Hello\"\
    .\n    capitalize(\"hello\") should return \"Hello\".\n    capitalize(\"hello\"\
    ) should return \"Hello\".\n    capitalize(\"hello\") should return \"Hello\"\
    .\n    capitalize(\"hello\") should return \"Hello\".\n    capitalize(\"hello\"\
    ) should return \"Hello\".\n    capitalize(\"hello\") should return \"Hello\"\
    .\n    capitalize(\"hello\") should return \"Hello\".\n    capitalize(\"hello\"\
    ) should return \"Hello\".\n    capitalize(\"hello\") should return \"Hello\"\
    .\n    capitalize(\"hello\") should return \"Hello\".\n    capitalize(\"hello\"\
    ) should return \"Hello\".\n    capitalize(\"hello\") should return \"Hello\"\
    .\n    capitalize(\"hello\") should return \"Hello\".\n    capitalize(\"hello\"\
    ) should return \"Hello\".\n    capitalize(\"hello\") should return \"Hello\"\
    .\n    capitalize(\"hello\") should return \"Hello\".\n    capitalize(\"hello\"\
    ) should return \"Hello\".\n    capitalize(\"hello\") should return \"Hello\"\
    .\n    capitalize(\"hello\") should return \"Hello\".\n    capitalize(\"hello\"\
    ) should return \"Hello\".\n    capitalize(\"hello\") should return \"Hello\"\
    .\n    capitalize(\"hello\") should return \"Hello\".\n    capitalize(\"hello\"\
    ) should return \"Hello\".\n    capitalize(\"hello\") should return \"Hello\"\
    .\n    capitalize(\"hello\") should return \"Hello\".\n    capitalize(\"hello\"\
    ) should return \"Hello\".\n    capitalize(\"hello\") should return \"Hello\"\
    .\n    \nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmphn4yx71c.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmphn4yx71c.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict{String,\
    \ String}()\n        return true\n    end\n    \n    for key in keys(dict)\n \
    \       if islower(key)\n            return false\n        end\n    end\n    \n\
    \    for key in keys(dict)\n        if isupper(key)\n            return false\n\
    \        end\n    end\n    \n    return true\nend\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp6m2d_7wu.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmp6m2d_7wu.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    true = true\n\
    \    for key in dict\n        if islower(key)\n            true = false\n    \
    \    elseif isupper(key)\n            true = false\n        end\n    end\n   \
    \ return true\nend\n</cell>\n<text>\nExercise 7: check_dict_case\nusing Test\n\
    \n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp9gvnaa1z.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmp9gvnaa1z.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if dict == Dict{String,\
    \ String}()\n        return true\n    else\n        true = false\n        for\
    \ key in dict\n            if islower(key)\n                true = true\n    \
    \        elseif isupper(key)\n                true = true\n            else\n\
    \                true = false\n        end\n    end\n    return true\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp6xsboyed.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmp6xsboyed.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict()\n\
    \        return true\n    \n    true = false\n    for key in keys(dict)\n    \
    \    if islower(key)\n            true = true\n        elseif isupper(key)\n \
    \           true = true\n        else\n            return false\n    end\n   \
    \ return true\nend\n</cell>\n<text>\nExercise 3: Write a function that takes a\
    \ string and returns a new string where all vowels have been replaced with an\
    \ underscore.\nExamples:\nreplace_vowels(\"apple\") should return \"p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_p_\n\
    using Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpkk3075_j.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpkk3075_j.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict{String,\
    \ String}()\n        return true\n    \n    true = false\n    for key in dict\n\
    \        if islower(key)\n            true = true\n        elseif isupper(key)\n\
    \            true = true\n        else\n            true = false\n        end\n\
    \    end\n    return true\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string and returns the number of vowels in that string.\nThe function\
    \ should return -1 if the string does not contain any vowels.\nExamples:\ncount_vowels(\"\
    apple\") should return 2.\ncount_vowels(\"banana\") should return 0.\ncount_vowels(\"\
    a\") should return -1.\ncount_vowels(\"aardvark\") should return -1.\ncount_vowels(\"\
    abracadabra\") should return 5.\ncount_vowels(\"abracadabra\") should return 5.\n\
    count_vowels(\"abracadabra\") should return 5.\ncount_vowels(\"abracadabra\")\
    \ should return 5.\ncount_vowels(\"abracadabra\") should return 5.\ncount_vowels(\"\
    abracadabra\") should return 5.\ncount_vowels(\"abracadabra\") should return 5.\n\
    count_vowels(\"abracadabra\") should return 5.\ncount_vowels(\"abracadabra\")\
    \ should return 5.\ncount_vowels(\"abracadabra\") should return 5.\ncount_vowels(\"\
    abracadabra\") should return 5.\ncount_vowels(\"abracadabra\") should return 5.\n\
    count_vowels(\"abracadabra\") should return 5.\ncount_vowels(\"abracadabra\")\
    \ should return 5.\ncount_vowels(\"abracadabra\") should return 5.\ncount_vowels(\"\
    abracadabra\") should return 5.\ncount_vowels(\"abracadabra\") should return 5.\n\
    count_vowels(\"abracadabra\") should return 5.\ncount_vowels(\"abracadabra\")\
    \ should return 5.\ncount_vowels(\"abracadabra\") should return 5.\ncount_vowels(\"\
    abracadabra\") should return 5.\ncount_vowels(\"abracadabra\") should return 5.\n\
    count_vowels(\"abracadabra\") should return 5.\ncount_vowels(\"abracadabra\")\
    \ should return 5.\ncount_vowels(\"abracadabra\") should return 5.\ncount_vowels(\"\
    abracadabra\") should return 5.\ncount_vowels(\"abracadabra\") should return 5.\n\
    count_vowels(\"abracadabra\") should return 5.\ncount_vowels(\"abracadabra\")\
    \ should return \nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpb69x91vt.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpb69x91vt.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if dict == Dict{String,\
    \ String}()\n        true\n    else\n        all(map(is_string, dict))\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" =>\
    \ \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\"\
    \ => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t\
    @test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t\
    @test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\
    \t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpc3rr83jb.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpc3rr83jb.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    true = true\n\
    \    for key in keys(dict)\n        if islower(key) || isupper(key)\n        \
    \    true = false\n        end\n    end\n    return true\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp9d3904x0.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmp9d3904x0.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict{String,\
    \ String}()\n        return true\n    \n    for k in keys(dict)\n        if islower(k)\n\
    \            return false\n        if isupper(k)\n            return false\n \
    \   end\n    return true\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpr6gm4q37.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpr6gm4q37.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    true = true\n\
    \    for key in keys(dict)\n        if islower(key)\n            true = false\n\
    \            break\n        elseif isupper(key)\n            true = false\n  \
    \          break\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpd6d08lvf.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpd6d08lvf.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict{String,\
    \ String}()\n        return true\n    \n    true = false\n    for key in dict\n\
    \        if islower(key)\n            true = true\n        elseif isupper(key)\n\
    \            true = true\n        else\n            true = false\n        end\n\
    \    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpfg2yn2eo.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpfg2yn2eo.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if dict == Dict()\n\
    \        return false\n    else\n        true\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp27cnv8pm.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmp27cnv8pm.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    true = true\n    for\
    \ key in keys(dict)\n        if islower(key)\n            true = false\n     \
    \   elseif isupper(key)\n            true = false\n        end\n    end\n    return\
    \ true\nend\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset begin\n\
    \ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpok6vdeiv.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpok6vdeiv.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict()\n\
    \        return true\n    \n    true = false\n    for key in dict\n        if\
    \ islower(key)\n            true = true\n        elseif isupper(key)\n       \
    \     true = true\n        else\n            true = false\n        end\n    end\n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpyrsol7l3.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpyrsol7l3.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict{String,\
    \ String}()\n        return true\n    \n    true = false\n    for key in keys(dict)\n\
    \        if islower(key)\n            true = true\n        elseif isupper(key)\n\
    \            true = true\n        else\n            true = false\n        end\n\
    \    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpw_n75owt.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpw_n75owt.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict()\n\
    \        return false\n    \n    true = false\n    for key in keys(dict)\n   \
    \     if islower(key)\n            true = true\n        elseif isupper(key)\n\
    \            true = true\n        else\n            return false\n    end\n  \
    \  return true\nend\n</cell>\n<text>\nExercise 4\nWrite a function that takes\
    \ a string and returns the number of characters in that string.\nusing Test\n\n\
    @testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmppj0sf7co.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmppj0sf7co.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    true = true\n    for\
    \ key in dict\n        if islower(key)\n            true = false\n        elseif\
    \ isupper(key)\n            true = false\n        end\n    end\n    return true\n\
    end\n</cell>\n<text>\nExercise 9\nWrite a function that takes a string and returns\
    \ the number of characters in that string.\nExamples:\ncount_chars(\"apple\")\
    \ should return 5.\ncount_chars(\"banana\") should return 3.\ncount_chars(\"hello\"\
    ) should return 0.\ncount_chars(\"\") should return 0.\ncount_chars(\" \") should\
    \ return 0.\ncount_chars(\"a\") should return 1.\ncount_chars(\"a \") should return\
    \ 1.\ncount_chars(\"a b\") should return 2.\ncount_chars(\"a b c\") should return\
    \ 3.\ncount_chars(\"a b c d\") should return 4.\ncount_chars(\"a b c d e\") should\
    \ return 5.\ncount_chars(\"a b c d e f\") should return 6.\ncount_chars(\"a b\
    \ c d e f g\") should return 7.\ncount_chars(\"a b c d e f g h\") should return\
    \ 8.\ncount_chars(\"a b c d e f g h i\") should return 9.\ncount_chars(\"a b c\
    \ d e f g h i j\") should return 10.\ncount_chars(\"a b c d e f g h i j k\") should\
    \ return 11.\ncount_chars(\"a b c d e f g h i j k l\") should return 12.\ncount_chars(\"\
    a b c d e f g h i j k l m\") should return 13.\ncount_chars(\"a b c d e f g h\
    \ i j k l m n\") should return 14.\ncount_chars(\"a b c d e f g h i j k l m n\
    \ o\") should return 15.\ncount_chars(\"a b c d e f g h i j k l m n o p\") should\
    \ return 16.\ncount_chars(\"a b c d e f g h i j k l m n o p q\") should return\
    \ 17.\ncount_chars(\"a b c d e f g h i j k l m n o p q r\") should return 18.\n\
    count_chars(\"a b c d e f g h i j k l m n o p q r s\") should return 19.\ncount_chars(\"\
    a b c d e f g h i j k l m n o p q r s t\") should return 20.\ncount_chars(\"a\
    \ b c d e f g h i j k l m n o p q r s t u\") should \nusing Test\n\n@testset begin\n\
    \ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpfd652vx_.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpfd652vx_.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict{String,\
    \ String}()\n        return true\n    \n    for k in keys(dict)\n        if islower(k)\n\
    \            return false\n        if isupper(k)\n            return false\n \
    \   end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n  \
    \  Given a dictionary, return True if all keys are strings in lower case or all\
    \ keys are strings in upper case, else return False.\n    The function should\
    \ return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n   \
    \ check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should\
    \ return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\"\
    :\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" }) should return True.\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp4z7d956x.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmp4z7d956x.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict{String,\
    \ String}()\n        return true\n    \n    for key in keys(dict)\n        if\
    \ islower(key)\n            return false\n        if isupper(key)\n          \
    \  return false\n    end\n    return true\nend\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpps96o839.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpps96o839.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict()\n\
    \        return true\n    \n    for key in keys(dict)\n        if islower(key)\n\
    \            return false\n        if isupper(key)\n            return false\n\
    \    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"\
    a\" => \"apple\", \"b\" => \"banana\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    ))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"a\" => \"apple\"\
    , \"8\" => \"banana\", \"a\" => \"apple\"))\n</cell>\n<code language=julia-1.5>\n\
    check_dict_case(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    ))\n</cell>\n<code language=julia-1.5>\ncheck_dict_case(Dict(\"STATE\" => \"NC\"\
    , \"ZIP\" => \"12345\" ))\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a dictionary as an argument and returns a new dictionary with the keys\
    \ in lower case and values as upper case. \nThe function should return a new dictionary\
    \ if the given dictionary is empty or if the keys are not strings or if the values\
    \ are strings. \nExamples:\ndict_to_upper_case(Dict(\"a\" => \"apple\", \"b\"\
    \ => \"banana\")) should return Dict(\"a\" => \"APPLE\", \"b\" => \"BANANA\").\n\
    dict_to_upper_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"\
    )) should return Dict(\"a\" => \"APPLE\", \"A\" => \"BANANA\", \"B\" => \"BANANA\"\
    ).\ndict_to_upper_case(Dict(\"a\" => \"apple\", \"8\" => \"banana\", \"a\" =>\
    \ \"apple\")) should return Dict(\"a\" => \"APPLE\", \"8\" => \"BANANA\", \"a\"\
    \ => \"APPLE\").\ndict_to_upper_case(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) should return Dict(\"Name\" => \"JOHN\", \"Age\"\
    \ => \"36\", \"City\" => \"HOUSTON\").\ndict_to_upper_case(Dict(\"STATE\" => \"\
    NC\", \"ZIP\" => \"12345\" )) should return Dict(\"STATE\" => \"NC\", \"ZIP\"\
    \ => \"12345\" ).\ndict_to_upper_case(Dict()) should return Dict().\ndict_to_upper_case(Dict(\"\
    a\" => \"apple\", \"b\" => \"banana\", \"c\" => \"carrot\")) should \nusing Test\n\
    \n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp5t6w1hnp.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmp5t6w1hnp.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    if dict == Dict()\n\
    \        return false\n    else\n        for key in dict\n            if islower(key)\n\
    \                return true\n            elseif isupper(key)\n              \
    \  return true\n            else\n                return false\n        end\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpjrqzdkhl.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpjrqzdkhl.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    true = true\n\
    \    for key in dict\n        if islower(key)\n            true = false\n    \
    \    elseif isupper(key)\n            true = false\n        end\n    end\n   \
    \ return true\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ string and returns the number of uppercase and lowercase letters.\nusing Test\n\
    \n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp5nmeuvao.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmp5nmeuvao.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    \n    true = true\n\
    \    for key in keys(dict)\n        if islower(key)\n            true = false\n\
    \        elseif isupper(key)\n            true = false\n        end\n    end\n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpaz04mmkl.jl:12\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpaz04mmkl.jl:12\n"
  exit_code: 1
  status: Exception
