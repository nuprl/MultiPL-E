name: HumanEval_65_circular_shift
language: julia
results:
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeuvqj2ni.jl:15\nin expression starting at\
    \ /tmp/tmpeuvqj2ni.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"\n    digits(x::Int64)\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsau4n4k_.jl:15\nin expression starting at\
    \ /tmp/tmpsau4n4k_.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else if shift < 0\n        return reverse(reverse(x))\n    else\n       \
    \ return reverse(reverse(x)[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd9sd7zyc.jl:12\nin expression starting at\
    \ /tmp/tmpd9sd7zyc.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    digits(x::Int64)\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcnh5h6ja.jl:17\nin expression starting at\
    \ /tmp/tmpcnh5h6ja.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<text>\nThe function digits() is defined in the\
    \ file digits.py:\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz4l8u9yl.jl:17\nin expression starting at\
    \ /tmp/tmpz4l8u9yl.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be between 0 and length(x)\")\n    else\n        digits = digits(x)\n\
    \        digits[shift] = digits[shift] % 10\n        digits = digits[0..(length(digits)-shift-1)]\n\
    \        digits = reverse(digits)\n        digits = digits[0..(length(digits)-1)]\n\
    \        return join(digits)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    digits(x::Int64)\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqbxzyy80.jl:21\nin expression starting at\
    \ /tmp/tmpqbxzyy80.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = x\n    digits = digits[shift:end]\n    return digits\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb7vbseeg.jl:17\nin expression starting at\
    \ /tmp/tmpb7vbseeg.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of digits in an integer.\nWrite\
    \ a function that returns the number of digits in an integer, rounded up to the\
    \ nearest integer.\nWrite a function that returns the number of digits in an integer,\
    \ rounded down to the nearest integer.\nWrite a function that returns the number\
    \ of digits in an integer, rounded up to the nearest integer, and rounded down\
    \ to the nearest integer.\nWrite a function that returns the number of digits\
    \ in an integer, rounded up to the nearest integer, and rounded down to the nearest\
    \ integer.\nWrite a function that returns the number of digits in an integer,\
    \ rounded up to the nearest integer, and rounded down to the nearest integer,\
    \ and rounded up to the nearest integer.\nWrite a function that returns the number\
    \ of digits in an integer, rounded up to the nearest integer, and rounded down\
    \ to the nearest integer, and rounded up to the nearest integer, and rounded down\
    \ to the nearest integer.\nWrite a function that returns the number of digits\
    \ in an integer, rounded up to the nearest integer, and rounded down to the nearest\
    \ integer, and rounded up to the nearest integer, and rounded down to the nearest\
    \ integer, and rounded up to the nearest integer.\nWrite a function that returns\
    \ the number of digits in an integer, rounded up to the nearest integer, and rounded\
    \ down to the nearest integer, and rounded up to the nearest integer, and rounded\
    \ down to the nearest integer, and rounded up to the nearest integer, and rounded\
    \ down to the nearest integer.\nWrite a function that returns the number of digits\
    \ in an integer, rounded up to the nearest integer, and rounded down to the nearest\
    \ integer, and rounded up to the nearest integer, and rounded down to the nearest\
    \ integer, and rounded up to the nearest integer, and rounded down to the nearest\
    \ integer, and rounded up to the nearest integer.\nWrite a function that returns\
    \ the number of digits in an integer, rounded up to the nearest integer, and rounded\
    \ down to the nearest integer, and rounded up to the nearest integer, and rounded\
    \ down to the nearest integer, and rounded up to the nearest integer, and rounded\
    \ down to the nearest integer, and rounded up to the nearest integer.\nWrite a\
    \ function that returns the number of digits in an integer, rounded up to the\
    \ nearest integer, and rounded down to the nearest integer, and rounded up to\
    \ the nearest integer, and rounded down to the nearest integer, and rounded up\
    \ to the nearest integer, and rounded down to the nearest integer, and rounded\
    \ up to the nearest integer.\nWrite a function that returns the number of digits\
    \ in an integer, rounded up to the nearest integer, and rounded down to the nearest\
    \ integer, and rounded up to the nearest integer, and rounded down to the nearest\
    \ integer, and rounded up to the nearest integer, and rounded down to the nearest\
    \ integer, and rounded up to the nearest integer.\nWrite a function that returns\
    \ the number of digits in an integer, rounded up to the nearest integer, and rounded\
    \ down to the nearest integer, and rounded up to the nearest integer, and rounded\
    \ down to the nearest integer, and rounded up to the nearest integer, and rounded\
    \ down to the nearest integer, and rounded up to the nearest \nusing Test\n\n\
    @testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"\
    001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\"\
    )\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk9ygar5j.jl:15\nin expression starting at\
    \ /tmp/tmpk9ygar5j.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\
    \t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12,\
    \ 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf522ypb9.jl:17\nin expression starting at\
    \ /tmp/tmpf522ypb9.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.5>\n@time circular_shift(123,\
    \ 1)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(123, 2)\n</cell>\n\
    <text>\nExercise: Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n    and return the result as a string.\n    If shift > number\
    \ of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\
    \n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\
    \t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12,\
    \ 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpami2bsjc.jl:17\nin expression starting at\
    \ /tmp/tmpami2bsjc.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\
    \t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12,\
    \ 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpll44rbqo.jl:17\nin expression starting at\
    \ /tmp/tmpll44rbqo.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    digits\
    \ = reverse(digits)\n    return digits\nend\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdit0fmvh.jl:18\nin expression starting at\
    \ /tmp/tmpdit0fmvh.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be between 0 and length(x)\")\n    else\n        digits = digits(x)\n\
    \        digits = digits[shift:end]\n        digits = reverse(digits)\n      \
    \  return join(digits)\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    digits(x::Int64)\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2hakxlxx.jl:18\nin expression starting at\
    \ /tmp/tmp2hakxlxx.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be in range 0 to length(x)\")\n    else\n        digits = digits(x)\n\
    \        digits[shift] = digits[shift] % 10\n        digits = digits[0..(length(digits)-shift-1)]\n\
    \        return join(digits, \"\")\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    digits(x::Int64)\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo0dd1_fi.jl:19\nin expression starting at\
    \ /tmp/tmpo0dd1_fi.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.5>\n@assert circular_shift(12,\
    \ 1) == 21\n@assert circular_shift(12, 2) == 12\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of digits in an integer. Test it on $10$\
    \ and $12$.\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeflyw7ma.jl:17\nin expression starting at\
    \ /tmp/tmpeflyw7ma.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be in range 0 to length(x)\")\n    else\n        digits = digits(x)\n\
    \        digits = digits[shift:end]\n        digits = reverse(digits)\n      \
    \  return join(digits)\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkc_fesya.jl:19\nin expression starting at\
    \ /tmp/tmpkc_fesya.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\
    \t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12,\
    \ 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz29x0s2k.jl:17\nin expression starting at\
    \ /tmp/tmpz29x0s2k.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = reverse(x[shift:end])\n    return digits\nend\n</cell>\n\
    <code language=julia-1.5>\n@time circular_shift(12, 1)\n</cell>\n<code language=julia-1.5>\n\
    @time circular_shift(12, 2)\n</cell>\n<text>\nExercise: Write a function that\
    \ returns the number of digits in an integer. Test it on integers from 0 to 20.\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptq06fu5n.jl:16\nin expression starting at\
    \ /tmp/tmptq06fu5n.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ digits\nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset begin\n\
    \ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyzrmmc64.jl:17\nin expression starting at\
    \ /tmp/tmpyzrmmc64.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.5>\n@time circular_shift(12,\
    \ 1)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(12, 2)\n</cell>\n\
    <text>\nExercise: Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n    and return the result as a string.\n    If shift > number\
    \ of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\
    \n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\
    \t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12,\
    \ 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl7f4f5mc.jl:17\nin expression starting at\
    \ /tmp/tmpl7f4f5mc.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    digits(x::Int64)\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnt3xri6o.jl:17\nin expression starting at\
    \ /tmp/tmpnt3xri6o.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    digits\
    \ = reverse(digits)\n    return digits\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr501y6bn.jl:18\nin expression starting at\
    \ /tmp/tmpr501y6bn.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else if shift < 0\n        return reverse(circular_shift(reverse(x), -shift))\n\
    \    else\n        return x[shift:length(x)+shift]\nend\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp12g0cw8s.jl:12\nin expression starting at\
    \ /tmp/tmp12g0cw8s.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    end\n    digits = digits[shift:end]\n\
    \    return join(digits)\nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\
    \n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) ==\
    \ \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"\
    79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7x1ho9_q.jl:18\nin expression starting at\
    \ /tmp/tmp7x1ho9_q.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    digits(x::Int64)\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6ifvqf00.jl:15\nin expression starting at\
    \ /tmp/tmp6ifvqf00.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd1soxhy6.jl:15\nin expression starting at\
    \ /tmp/tmpd1soxhy6.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7jm71xb9.jl:15\nin expression starting at\
    \ /tmp/tmp7jm71xb9.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be in range 0 to length(x)\")\n    else\n        digits = digits(x)\n\
    \        digits = digits[shift:end]\n        digits = reverse(digits)\n      \
    \  digits = join(digits)\n        return digits\nend\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcufvj76d.jl:19\nin expression starting at\
    \ /tmp/tmpcufvj76d.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be in range 0 to length(x)\")\n    elseif shift < length(x)\n     \
    \   return reverse(x)\n    else\n        return reverse(x[shift:end])\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::\nusing Test\n\n@testset begin\n\
    \ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpan9iltnc.jl:17\nin expression starting at\
    \ /tmp/tmpan9iltnc.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[-shift:-1]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\
    \t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12,\
    \ 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcefffcx8.jl:17\nin expression starting at\
    \ /tmp/tmpcefffcx8.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphnmi1mzq.jl:15\nin expression starting at\
    \ /tmp/tmphnmi1mzq.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be in range 0 to length(x)\")\n    else\n        digits = digits(x)\n\
    \        digits = digits[shift:end]\n        digits = reverse(digits)\n      \
    \  return join(digits)\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the number of digits in an integer. Test it on all integers between\
    \ 0 and 10 to see that it works.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsyiflu0p.jl:18\nin expression starting at\
    \ /tmp/tmpsyiflu0p.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    digits(x::Int64)\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpptniltu0.jl:15\nin expression starting at\
    \ /tmp/tmpptniltu0.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be in range 0 to length(x)\")\n    elseif shift == 0\n        return\
    \ toString(x)\n    else\n        digits = toString(x)\n        digits = digits[-shift:end]\n\
    \        digits = digits[::-1]\n        return digits\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: expected \"]\" or separator in arguments to \"\
    [ ]\"; got \"::-1\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp772646sk.jl:17\n\
    in expression starting at /tmp/tmp772646sk.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    end\n    digits = digits[shift:end]\n\
    \    return join(digits)\nend\n</cell>\n<code language=julia-1.4>\n@time circular_shift(123456789,\
    \ 2)\n</cell>\n<text>\nExercise: Circular shift the digits of the integer x, shift\
    \ the digits right by shift\n    and return the result as a string.\n    If shift\
    \ > number of digits, return digits reversed.\n    >>> circular_shift(123456789,\
    \ 2)\n    \"987654321\"\n    >>> circular_shift(123456789, 3)\n    \"987654321\"\
    \n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t\
    @test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97,\
    \ 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8nw5zp1k.jl:18\nin expression starting at\
    \ /tmp/tmp8nw5zp1k.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>\n@assert circular_shift(12,\
    \ 1) == 21\n@assert circular_shift(12, 2) == 12\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of digits in an integer.\nusing Test\n\
    \n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) ==\
    \ \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"\
    79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa3xap2w2.jl:17\nin expression starting at\
    \ /tmp/tmpa3xap2w2.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be in range 0 to length(x)\")\n    else\n        digits = digits(x)\n\
    \        digits[shift] = digits[shift] % 10\n        digits[length(digits)] =\
    \ digits[length(digits)] % 10\n        digits = reverse(digits)\n        return\
    \ join(digits)\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) ==\
    \ \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"\
    79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9pck8q_o.jl:20\nin expression starting at\
    \ /tmp/tmp9pck8q_o.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.1>\n\
    \"\"\"\n    digits(x::Int64)\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9o9kme8_.jl:15\nin expression starting at\
    \ /tmp/tmp9o9kme8_.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(digits(x))\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>\n@assert circular_shift(12,\
    \ 1) == 21\n@assert circular_shift(12, 2) == 12\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the number of digits in an integer. For example,\
    \ length(123) should return 3.\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq2vlqww_.jl:17\nin expression starting at\
    \ /tmp/tmpq2vlqww_.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else if shift < 0\n        return reverse(circular_shift(reverse(x), -shift))\n\
    \    else\n        return reverse(circular_shift(reverse(x), shift))\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9b_e2u3h.jl:12\nin expression starting at\
    \ /tmp/tmp9b_e2u3h.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be between 0 and length(x)\")\n    else\n        digits = digits(x)\n\
    \        digits[shift] = digits[shift] % 10\n        digits = digits[0..(length(digits)-shift-1)]\n\
    \        return join(digits, \"\")\n    end\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the number of digits in an integer. Test it on all\
    \ integers from 0 to 20.\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkn5p4vh4.jl:19\nin expression starting at\
    \ /tmp/tmpkn5p4vh4.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    digits(x::Int64)\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpok0ow1h_.jl:15\nin expression starting at\
    \ /tmp/tmpok0ow1h_.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    return join(digits, digits[shift:end])\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number of\
    \ digits in an integer.\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf9u74lhz.jl:16\nin expression starting at\
    \ /tmp/tmpf9u74lhz.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    digits(x::Int64)\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqf9m0ivs.jl:15\nin expression starting at\
    \ /tmp/tmpqf9m0ivs.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and returns the number of words in the\
    \ string.\n    >>> count_words(\"the quick brown fox jumps over the lazy dog\"\
    )\n    8\n    >>> count_words(\"the quick brown fox jumps over the lazy dog.\"\
    )\n    8\n    >>> count_words(\"the quick brown fox jumps over the lazy dog. \
    \ \")\n    8\n    >>> count_words(\"the quick brown fox jumps over the lazy dog.\
    \  \", 2)\n    7\n    >>> count_words(\"the quick brown fox jumps over the lazy\
    \ dog.  \", 3)\n    6\n    >>> count_words(\"the quick brown fox jumps over the\
    \ lazy dog.  \", 4)\n    5\n    >>> count_words(\"the quick brown fox jumps over\
    \ the lazy dog.  \", 5)\n    4\n    >>> count_words(\"the quick brown fox jumps\
    \ over the lazy dog.  \", 6)\n    3\n    >>> count_words(\"the quick brown fox\
    \ jumps over the lazy dog.  \", 7)\n    2\n    >>> count_words(\"the quick brown\
    \ fox jumps over the lazy dog.  \", 8)\n    1\n    >>> count_words(\"the quick\
    \ brown fox jumps over the lazy dog.  \", 9)\n    0\n    >>> count_words(\"the\
    \ quick brown fox jumps over the lazy dog.  \", 10)\n    0\n    >>> count_words(\"\
    the quick brown fox jumps over the lazy dog.  \", 11)\n    0\n    >>> count_words(\"\
    the quick brown fox jumps over the lazy dog.  \", 12)\n    0\n    >>> count_words(\"\
    the quick brown fox jumps over the lazy dog.  \", 13)\n    0\n    >>> count_words(\"\
    the quick brown fox jumps over the lazy dog.  \", 14)\n    0\n    >>> count_words(\"\
    the quick brown fox jumps over the lazy dog.  \", 15)\n    0\n    >>> count_words(\"\
    the quick brown fox jumps over the lazy dog.  \", 16)\n    0\n    >>> count_words(\"\
    the quick brown fox jumps over the lazy dog.  \", 17)\n    0\n    >>> count_words(\"\
    the quick brown fox jumps over the lazy dog.  \", 18)\n    0\n    >>> count_words(\"\
    the quick brown fox jumps over the lazy dog.  \", 19)\n    0\n    >>> count_words(\"\
    \nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4x5v5k2l.jl:15\nin expression starting at\
    \ /tmp/tmp4x5v5k2l.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return x[shift:end]\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    digits(x::Int64)\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpselmebgo.jl:15\nin expression starting at\
    \ /tmp/tmpselmebgo.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv5cogxjk.jl:15\nin expression starting at\
    \ /tmp/tmpv5cogxjk.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be in range 0 to length(x)\")\n    else\n        digits = digits(x)\n\
    \        digits = digits[shift:end]\n        digits = reverse(digits)\n      \
    \  digits = reverse(digits)\n        return join(digits)\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that converts a string to a list of integers. If\
    \ the string cannot be converted to a list of integers, return an empty list.\n\
    For example, if the string \"123abc\" can be converted to a list of integers,\
    \ return [123, 123, 123].\nIf the string \"123abc\" cannot be converted to a list\
    \ of integers, return an empty list.\nFor example, if the string \"123abc\" cannot\
    \ be converted to a list of integers, return an empty list.\nIf the string \"\
    123abc\" cannot be converted to a list of integers, return an empty list.\nFor\
    \ example, if the string \"123abc\" cannot be converted to a list of integers,\
    \ return an empty list.\nFor example, if the string \"123abc\" cannot be converted\
    \ to a list of integers, return an empty list.\nFor example, if the string \"\
    123abc\" cannot be converted to a list of integers, return an empty list.\nFor\
    \ example, if the string \"123abc\" cannot be converted to a list of integers,\
    \ return an empty list.\nFor example, if the string \"123abc\" cannot be converted\
    \ to a list of integers, return an empty list.\nFor example, if the string \"\
    123abc\" cannot be converted to a list of integers, return an empty list.\nFor\
    \ example, if the string \"123abc\" cannot be converted to a list of integers,\
    \ return an empty list.\nFor example, if the string \"123abc\" cannot be converted\
    \ to a list of integers, return an empty list.\nFor example, if the string \"\
    123abc\" cannot be converted to a list of integers, return an empty list.\nFor\
    \ example, if the string \"123abc\" cannot be converted to a list of integers,\
    \ return an empty list.\nFor example, if the string \"123abc\" cannot be converted\
    \ to a list of integers, return an empty list.\nFor example, if the string \"\
    123abc\" cannot be converted to a list of integers, return an empty list.\nFor\
    \ example, if the string \"123abc\" cannot be converted to a list of integers,\
    \ return an empty list.\nFor example, if the string \"123abc\" cannot be converted\
    \ to a list of integers, return an empty list.\nFor example, if the string \"\
    123abc\" cannot be converted to a list of integers, return an empty list.\nFor\
    \ example, if the string \"123abc\" cannot be converted to a list of integers,\
    \ return an empty list.\nFor example, if the string \"123abc\" cannot be converted\
    \ to a list of integers, return an empty list.\nFor example, if the string \"\
    123abc\" cannot be converted to a list of integers, return an empty list.\nFor\
    \ example, if the string \"123abc\" cannot be converted to a list of integers,\
    \ return an empty list.\nFor example, if the string \"123abc\" cannot be converted\
    \ to a list of integers, return an empty list.\nFor example, if the string \"\
    123abc\" cannot be converted to a list of integers, return an empty list.\nFor\
    \ example, if the string \"123abc\" cannot be converted to a list of integers,\
    \ return an empty list.\nFor example, if the string \nusing Test\n\n@testset begin\n\
    \ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp65jrscqn.jl:19\nin expression starting at\
    \ /tmp/tmp65jrscqn.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return x[shift:length(x)+shift]\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnhl1tcln.jl:15\nin expression starting at\
    \ /tmp/tmpnhl1tcln.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits, \"\")\nend\n</cell>\n<text>\nThe function digits() is defined in\
    \ the file digits.py:\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps8_9fsg0.jl:17\nin expression starting at\
    \ /tmp/tmps8_9fsg0.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else if shift < 0\n        return reverse(x)\n    else\n        digits =\
    \ digits(x)\n        digits[shift] = digits[shift] % 10\n        return join(digits,\
    \ \"\")\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    digits(x::Int64)\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpltq4ysqv.jl:12\nin expression starting at\
    \ /tmp/tmpltq4ysqv.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    end\n    digits[shift] = digits[shift]\
    \ % 10\n    digits[-shift] = digits[-shift] % 10\n    return join(digits, \"\"\
    )\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    digits(x::Int64)\nusing\
    \ Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsygna5f9.jl:19\nin expression starting at\
    \ /tmp/tmpsygna5f9.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\
    \t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12,\
    \ 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjhv982l4.jl:17\nin expression starting at\
    \ /tmp/tmpjhv982l4.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp60nap70z.jl:15\nin expression starting at\
    \ /tmp/tmp60nap70z.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = reverse(x[shift:end])\n    return digits\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxtewujtd.jl:16\nin expression starting at\
    \ /tmp/tmpxtewujtd.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be between 0 and length(x)\")\n    else\n        digits = digits(x)\n\
    \        digits = digits[shift:end]\n        digits = reverse(digits)\n      \
    \  return join(digits)\n    end\nend\n</code>\n<|/ a tags=julia,string |>\n<|\
    \ a dscore=0 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwqn2ci_1.jl:19\nin expression starting at\
    \ /tmp/tmpwqn2ci_1.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    digits(x::Int64)\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9629qupm.jl:15\nin expression starting at\
    \ /tmp/tmp9629qupm.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else if shift < 0\n        return reverse(circular_shift(reverse(x), -shift))\n\
    \    else\n        return reverse(x[shift:end-1]) + reverse(x[1:shift])\nend\n\
    </cell>\n<code language=julia-1.3>\n\"\"\"\n    digits(x::Int64)\nusing Test\n\
    \n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) ==\
    \ \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"\
    79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp65qus6ko.jl:12\nin expression starting at\
    \ /tmp/tmp65qus6ko.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.5>\n@assert circular_shift(12,\
    \ 1) == 21\n@assert circular_shift(12, 2) == 12\n</cell>\n<text>\nExercise: Write\
    \ a function that returns the number of digits in an integer.\nusing Test\n\n\
    @testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"\
    001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\"\
    )\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu2krab_k.jl:17\nin expression starting at\
    \ /tmp/tmpu2krab_k.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    end\n    digits[shift] = digits[shift]\
    \ % 10\n    digits = reverse(digits)\n    return join(digits, \"\")\nend\n</cell>\n\
    <text>\nThe function digits(x::Int64) returns a string containing the digits of\
    \ x, as a string.\nThe function reverse(x::String) reverses the string x.\nThe\
    \ function join(digits::String, separator::String) joins the elements of digits\
    \ into a string, separated by separator.\nThe function length(x::String) returns\
    \ the length of x, in characters.\nThe function reverse(x::String) reverses the\
    \ string x.\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdk6t9tl8.jl:19\nin expression starting at\
    \ /tmp/tmpdk6t9tl8.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.5>\n@assert circular_shift(12,\
    \ 1) == 21\n@assert circular_shift(12, 2) == 12\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of digits in an integer.\nFor example,\
    \ length(123) returns 3.\nWrite a function that returns the number of digits in\
    \ an integer, rounded to the nearest integer.\nFor example, length(123.4) returns\
    \ 4.\nWrite a function that returns the number of digits in an integer, rounded\
    \ to the nearest integer, including fractions.\nFor example, length(123.456) returns\
    \ 5.\nWrite a function that returns the number of digits in an integer, rounded\
    \ to the nearest integer, including fractions, including negative numbers.\nFor\
    \ example, length(123.456) returns 6.\nWrite a function that returns the number\
    \ of digits in an integer, rounded to the nearest integer, including fractions,\
    \ including negative numbers, including fractions.\nFor example, length(123.456)\
    \ returns 6.\nWrite a function that returns the number of digits in an integer,\
    \ rounded to the nearest integer, including fractions, including negative numbers,\
    \ including fractions, including negative numbers.\nFor example, length(123.456)\
    \ returns 6.\nWrite a function that returns the number of digits in an integer,\
    \ rounded to the nearest integer, including fractions, including negative numbers,\
    \ including fractions, including negative numbers, including fractions.\nFor example,\
    \ length(123.456) returns 6.\nWrite a function that returns the number of digits\
    \ in an integer, rounded to the nearest integer, including fractions, including\
    \ negative numbers, including fractions, including negative numbers, including\
    \ fractions, including negative numbers.\nFor example, length(123.456) returns\
    \ 6.\nWrite a function that returns the number of digits in an integer, rounded\
    \ to the nearest integer, including fractions, including negative numbers, including\
    \ fractions, including negative numbers, including fractions, including negative\
    \ numbers, including fractions.\nFor example, length(123.456) returns 6.\nWrite\
    \ a function that returns the number of digits in an integer, rounded to the nearest\
    \ integer, including fractions, including negative numbers, including fractions,\
    \ including negative numbers, including fractions, including negative numbers,\
    \ including fractions, including negative numbers.\nFor example, length(123.456)\
    \ returns 6.\nWrite a function that returns the number of digits in an integer,\
    \ rounded to the nearest integer, including fractions, including negative numbers,\
    \ including fractions, including negative numbers, including fractions, including\
    \ negative numbers, including fractions, including negative numbers, including\
    \ fractions.\nFor example, length(123.456) returns 6.\nWrite a function that returns\
    \ the number of digits in an integer, rounded to the nearest integer, including\
    \ fractions, including negative numbers, including fractions, including negative\
    \ numbers, including fractions, including negative numbers, including fractions,\
    \ including \nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t\
    @test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97,\
    \ 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7cud7dl2.jl:17\nin expression starting at\
    \ /tmp/tmp7cud7dl2.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    digits(x::Int64)\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd2m3gs52.jl:15\nin expression starting at\
    \ /tmp/tmpd2m3gs52.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be between 0 and $length(x)\")\n    else\n        digits = digits(x)\n\
    \        digits = digits[shift:end]\n        digits = reverse(digits)\n      \
    \  return join(digits)\n    end\nend\n</code>\n<|/ a tags=julia |>\n<| a dscore=2\
    \ |>\nA simple and efficient solution:\n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppcblsrh1.jl:19\nin expression starting at\
    \ /tmp/tmppcblsrh1.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(digits(x))\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.5>\n@assert circular_shift(12,\
    \ 1) == 21\n@assert circular_shift(12, 2) == 12\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the number of digits in an integer. For example,\
    \ length(123) == 3.\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpalqjsehq.jl:17\nin expression starting at\
    \ /tmp/tmpalqjsehq.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    return join(digits, digits[shift+1:end])\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4dezyeav.jl:16\nin expression starting at\
    \ /tmp/tmp4dezyeav.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\
    \t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12,\
    \ 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4vltlbm6.jl:17\nin expression starting at\
    \ /tmp/tmp4vltlbm6.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_ias16iv.jl:15\nin expression starting at\
    \ /tmp/tmp_ias16iv.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be between 0 and length(x)\")\n    elseif shift == 0\n        return\
    \ x\n    else\n        digits = digits(x)\n        digits_reversed = reverse(digits)\n\
    \        digits_shifted = shift(digits_reversed, shift)\n        digits_shifted_reversed\
    \ = reverse(digits_shifted)\n        return digits_shifted_reversed\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpct6c__qd.jl:22\nin expression starting at\
    \ /tmp/tmpct6c__qd.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else if shift < 0\n        return reverse(x)\n    else\n        return x[shift:end]\
    \ + reverse(substring(x, 0, shift))\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2m_joory.jl:12\nin expression starting at\
    \ /tmp/tmp2m_joory.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be in range 0 to length(x)\")\n    elseif shift == 0\n        return\
    \ x\n    else\n        digits = split(x, \"\")\n        digits[shift] = digits[shift][end-1]\n\
    \        join(digits, \"\")\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    circular_shift(x::Int64, shift::Int64)::String\n    \n    Shift the\
    \ digits of the integer x, shift the digits right by shift\n    and return the\
    \ result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkb1jw3dh.jl:20\nin expression starting at\
    \ /tmp/tmpkb1jw3dh.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg90nbpc_.jl:15\nin expression starting at\
    \ /tmp/tmpg90nbpc_.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    end\n    return join(reverse(digits[shift:end]))\n\
    end\n</cell>\n<text>\nThe function digits() is defined in the file digit.jl and\
    \ looks like this:\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps7ai4_bj.jl:17\nin expression starting at\
    \ /tmp/tmps7ai4_bj.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    digits\
    \ = reverse(digits)\n    return digits\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"\n    digits(x::Int64)\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp__db9vym.jl:18\nin expression starting at\
    \ /tmp/tmp__db9vym.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa0f9p3hf.jl:15\nin expression starting at\
    \ /tmp/tmpa0f9p3hf.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    digits(x::Int64)\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmnd9pn_2.jl:17\nin expression starting at\
    \ /tmp/tmpmnd9pn_2.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(digits(x))\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\
    \t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12,\
    \ 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw2wihy2h.jl:17\nin expression starting at\
    \ /tmp/tmpw2wihy2h.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be in range 0 to length(x)\")\n    else\n        digits = digits(x)\n\
    \        digits = digits[shift:end]\n        digits = reverse(digits)\n      \
    \  digits = join(digits, \"\")\n        return digits\nend\n</cell>\n<text>\n\
    The function digits() returns a list of digits of an integer, x, starting from\
    \ index 1 to the length of the integer. For example, digits(12) returns [1, 2,\
    \ 3, 4, 5].\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpflytgj4o.jl:19\nin expression starting at\
    \ /tmp/tmpflytgj4o.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be in range 0 to length(x)\")\n    else\n        digits = digits(x)\n\
    \        digits[shift] = digits[shift] % 10\n        digits = digits[0..(length(digits)-shift-1)]\n\
    \        digits = reverse(digits)\n        return join(digits)\n    end\nend\n\
    </cell>\n<text>\nThe function digits(x) returns a string containing the digits\
    \ of x. For example, digits(12) returns \"12\".\nusing Test\n\n@testset begin\n\
    \ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp16hcrpo1.jl:20\nin expression starting at\
    \ /tmp/tmp16hcrpo1.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) - 1 \n        shift %= length(x)\
    \ - 1\n        x >>= shift\n        x <<= shift\n        return to_string(x)\n\
    \    else \n        return x\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) ==\
    \ \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"\
    79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpukv2ensf.jl:18\nin expression starting at\
    \ /tmp/tmpukv2ensf.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be in range 0 to length(x)\")\n    else\n        digits = digits(x)\n\
    \        digits = digits[shift:end]\n        digits = reverse(digits)\n      \
    \  return join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) ==\
    \ \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"\
    79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3yz3895x.jl:18\nin expression starting at\
    \ /tmp/tmp3yz3895x.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    digits\
    \ = reverse(digits)\n    return digits\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv3yypoth.jl:18\nin expression starting at\
    \ /tmp/tmpv3yypoth.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else if shift < 0\n        return reverse(circular_shift(reverse(x), -shift))\n\
    \    else\n        return reverse(x[shift:end-1]) + reverse(x[1:shift])\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpduidwuvg.jl:12\nin expression starting at\
    \ /tmp/tmpduidwuvg.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.5>\n@assert circular_shift(12,\
    \ 1) == 21\n@assert circular_shift(12, 2) == 12\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the number of digits in an integer.\nusing Test\n\
    \n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) ==\
    \ \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"\
    79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa2jvqh1e.jl:17\nin expression starting at\
    \ /tmp/tmpa2jvqh1e.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.5>\n@assert circular_shift(12,\
    \ 1) == 21\n@assert circular_shift(12, 2) == 12\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the number of digits in an integer.\n    >>> digits(123)\n\
    \    3\n    >>> digits(0)\n    0\n    >>> digits(-10)\n    1\n    >>> digits(123456789)\n\
    \    10\n    >>> digits(1234567890)\n    11\n    >>> digits(123456789012345)\n\
    \    12\n    >>> digits(1234567890123456789)\n    13\n    >>> digits(12345678901234567890)\n\
    \    14\n    >>> digits(1234567890123456789012345)\n    15\n    >>> digits(12345678901234567890123456789)\n\
    \    16\n    >>> digits(12345678901234567890123456789012345)\n    17\n    >>>\
    \ digits(123456789012345678901234567890123456789)\n    18\n    >>> digits(123456789012345678901234567890123456789012345)\n\
    \    19\n    >>> digits(1234567890123456789012345678901234567890123456789012345)\n\
    \    20\n    >>> digits(12345678901234567890123456789012345678901234567890123456789012345)\n\
    \    21\n    >>> digits(123456789012345678901234567890123456789012345678901234567890123456789012345)\n\
    \    22\n    >>> digits(1234567890123456789012345678901234567890123456789012345678901234567890123456789012345)\n\
    \    23\n    >>> digits(12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345)\n\
    \    24\n    >>> digits(123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345)\n\
    \    25\n    >>> digits(123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345)\n\
    \    26\n    >>> digits(123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345)\n\
    \    27\n    >>> digits(123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345)\n\
    \    28\n    >>> digits(123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345)\n\
    \    29\n    >>> digits(123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345)\n\
    \    30\n    >>> digits(123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345)\n\
    \    31\n    >>> digits(123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345)\n\
    \    32\n    >>> digits(123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345)\n\
    \    33\n    >>> digits(123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345)\n\
    \    34\n    >>> digits(12345678901234567890123456789\nusing Test\n\n@testset\
    \ begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\
    \t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12,\
    \ 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgl51pm78.jl:17\nin expression starting at\
    \ /tmp/tmpgl51pm78.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else if shift < 0\n        return circular_shift(x, -shift)\n    else\n \
    \       return reverse(x[shift:end-1]) + circular_shift(x, shift-length(x))\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns the number of\
    \ digits in an integer.\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp21d8gq9g.jl:12\nin expression starting at\
    \ /tmp/tmp21d8gq9g.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = reverse(x[shift:end])\n    return digits\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    digits(x::Int64)\nusing Test\n\n@testset\
    \ begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\
    \t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12,\
    \ 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt4ynah7d.jl:16\nin expression starting at\
    \ /tmp/tmpt4ynah7d.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.3>\n@assert circular_shift(12,\
    \ 1) == 21\n@assert circular_shift(12, 2) == 12\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of digits in an integer. Test it on all\
    \ of the\nintegers from 1 to 10, and on negative integers. What happens if you\
    \ call it on a\nnegative integer?\nusing Test\n\n@testset begin\n\ncandidate =\
    \ circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp53cb5s62.jl:17\nin expression starting at\
    \ /tmp/tmp53cb5s62.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    end\n    digits[shift] = digits[shift]\
    \ % 10\n    digits[length(digits)] = digits[length(digits)] % 10\n    return join(digits,\
    \ \"\")\nend\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of digits in an integer. Test it on $10$ and $100$.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\
    \t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12,\
    \ 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt4f6fgj1.jl:19\nin expression starting at\
    \ /tmp/tmpt4f6fgj1.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else if shift < 0\n        return circular_shift(x, -shift)\n    else\n \
    \       return circular_shift(shift(x), shift)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr2k78raf.jl:12\nin expression starting at\
    \ /tmp/tmpr2k78raf.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    digits(x::Int64)\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5ph9bfn7.jl:17\nin expression starting at\
    \ /tmp/tmp5ph9bfn7.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp13v395t4.jl:15\nin expression starting at\
    \ /tmp/tmp13v395t4.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else if shift < 0\n        return circular_shift(x, -shift)\n    else\n \
    \       return circular_shift(shift(x), shift)\nend\n</cell>\n<text>\nNow let's\
    \ try it out!\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t\
    @test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97,\
    \ 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp91lvi5oh.jl:12\nin expression starting at\
    \ /tmp/tmp91lvi5oh.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be in range 0 to length(x)\")\n    else\n        digits = digits(x)\n\
    \        digits[shift] = digits[shift] % 10\n        digits = digits[0..(length(digits)-shift-1)]\n\
    \        return join(digits, \"\")\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    digits(x::Int64)::Array{Int64}\nReturn the digits of x in a vector.\n\
    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprq5c7rbj.jl:19\nin expression starting at\
    \ /tmp/tmprq5c7rbj.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    return join(digits, digits[shift-1:shift-1:-1])\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert circular_shift(12, 1) == 21\n\
    @assert circular_shift(12, 2) == 12\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the number of digits in an integer. Test it on $10$ and $20$.\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6ylixtu2.jl:16\nin expression starting at\
    \ /tmp/tmp6ylixtu2.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdk9gmi6k.jl:15\nin expression starting at\
    \ /tmp/tmpdk9gmi6k.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the number of digits in an integer. For example,\
    \ length(1234) = 4.\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzz_divan.jl:15\nin expression starting at\
    \ /tmp/tmpzz_divan.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.4>\n@assert circular_shift(12,\
    \ 1) == 21\n@assert circular_shift(12, 2) == 12\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of digits in an integer.\nFor example,\
    \ length(123) == 3.\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwcvfam_t.jl:17\nin expression starting at\
    \ /tmp/tmpwcvfam_t.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.4>\n@time circular_shift(123456789,\
    \ 2)\n</cell>\n<text>\nExercise\nWrite a function that returns the number of digits\
    \ in an integer.\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1sh8pl4a.jl:17\nin expression starting at\
    \ /tmp/tmp1sh8pl4a.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"\
    001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\"\
    )\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd4_rr02b.jl:17\nin expression starting at\
    \ /tmp/tmpd4_rr02b.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ digits\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string\
    \ as input and returns a string with all occurrences of its first character replaced\
    \ by its second character.\nIf the first character does not appear in the string,\
    \ return an empty string.\nIf the second character does not appear in the string,\
    \ return the same string as input.\nIf the second character appears more than\
    \ once in the string, return the same string as input.\nIf the second character\
    \ appears only once in the string, return the same string as input.\nIf the second\
    \ character appears more than once in the string, return the same string as input.\n\
    If the second character appears more than once in the string, return the same\
    \ string as input.\nIf the second character appears more than once in the string,\
    \ return the same string as input.\nIf the second character appears more than\
    \ once in the string, return the same string as input.\nIf the second character\
    \ appears more than once in the string, return the same string as input.\nIf the\
    \ second character appears more than once in the string, return the same string\
    \ as input.\nIf the second character appears more than once in the string, return\
    \ the same string as input.\nIf the second character appears more than once in\
    \ the string, return the same string as input.\nIf the second character appears\
    \ more than once in the string, return the same string as input.\nIf the second\
    \ character appears more than once in the string, return the same string as input.\n\
    If the second character appears more than once in the string, return the same\
    \ string as input.\nIf the second character appears more than once in the string,\
    \ return the same string as input.\nIf the second character appears more than\
    \ once in the string, return the same string as input.\nIf the second character\
    \ appears more than once in the string, return the same string as input.\nIf the\
    \ second character appears more than once in the string, return the same string\
    \ as input.\nIf the second character appears more than once in the string, return\
    \ the same string as input.\nIf the second character appears more than once in\
    \ the string, return the same string as input.\nIf the second character appears\
    \ more than once in the string, return the same string as input.\nIf the second\
    \ character appears more than once in the string, return the same string as input.\n\
    If the second character appears more than once in the string, return the same\
    \ string as input.\nIf the second character appears more than once in the string,\
    \ return the same string as input.\nIf the second character appears more than\
    \ once in the string, return the same string as input.\nIf the second character\
    \ appears more than once in the string, return the same string as input.\nIf the\
    \ second character appears more than once in the string, return the same string\
    \ as input.\nIf the second character appears more than once in the string, return\
    \ the same string as input.\nIf the second character appears more than once in\
    \ the string, return the same string as input.\nIf the second character \nusing\
    \ Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_b_qjqvt.jl:17\nin expression starting at\
    \ /tmp/tmp_b_qjqvt.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\
    \t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12,\
    \ 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3soiu0q9.jl:17\nin expression starting at\
    \ /tmp/tmp3soiu0q9.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7b909a5z.jl:15\nin expression starting at\
    \ /tmp/tmp7b909a5z.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(digits(x))\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    digits(x::Int64)\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4lb_f9ny.jl:17\nin expression starting at\
    \ /tmp/tmp4lb_f9ny.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ digits\nend\n</cell>\n<code language=julia-1.5>\n@time circular_shift(12, 1)\n\
    </cell>\n<code language=julia-1.5>\n@time circular_shift(12, 2)\n</cell>\n<text>\n\
    Exercise: Write a function that returns the number of digits in an integer. Test\
    \ it on integers from 1 to 10 and on integers from 0 to 9. How many digits does\
    \ it return for integers from 1 to 10?\nusing Test\n\n@testset begin\n\ncandidate\
    \ = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5qnxcx8j.jl:17\nin expression starting at\
    \ /tmp/tmp5qnxcx8j.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    digits(x::Int64)\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9y21we5s.jl:17\nin expression starting at\
    \ /tmp/tmp9y21we5s.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else if shift < 0\n        return reverse(x)\n    else\n        return reverse(x[shift:end])\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbvpk5mzr.jl:12\nin expression starting at\
    \ /tmp/tmpbvpk5mzr.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = reverse(x[shift:end])\n    return digits\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprrom4zur.jl:16\nin expression starting at\
    \ /tmp/tmprrom4zur.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be in range 0 to length(x)\")\n    else\n        digits = digits(x)\n\
    \        digits[shift] = digits[shift] % 10\n        digits = digits[shift+1:end]\n\
    \        digits = reverse(digits)\n        return join(digits)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgt4b484w.jl:20\nin expression starting at\
    \ /tmp/tmpgt4b484w.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[-shift:] + digits[:\
    \ shift]\n    return digits\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n\
    \    digits(x::Int64)\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"-(shift):\" range\
    \ expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2esj6ag4.jl:14\n\
    in expression starting at /tmp/tmp2esj6ag4.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end-1]) + reverse(x[1:shift])\nend\n\
    </cell>\n<text>\nThe function reverse() reverses a string. For example, circular_shift(reverse(\"\
    hello\"), 1) returns \"olleh\".\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp15z4rjp9.jl:15\nin expression starting at\
    \ /tmp/tmp15z4rjp9.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be in range 0 to length(x)\")\n    else\n        digits = digits(x)\n\
    \        digits[shift] = digits[shift] % 10\n        digits = reverse(digits)\n\
    \        return join(digits)\nend\n</cell>\n<code language=julia-1.3>\nusing Test\n\
    \n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) ==\
    \ \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"\
    79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoa1cpeil.jl:18\nin expression starting at\
    \ /tmp/tmpoa1cpeil.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be in range 0 to length(x)\")\n    else\n        digits = digits(x)\n\
    \        digits_reversed = reverse(digits)\n        digits_shifted = shift(digits_reversed,\
    \ shift)\n        digits_shifted_reversed = reverse(digits_shifted)\n        return\
    \ digits_shifted_reversed\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\
    \"\"\n    digits(x::Int64)::Vector{Int64}\nReturn the digits of x in a vector.\n\
    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp79pwybcw.jl:20\nin expression starting at\
    \ /tmp/tmp79pwybcw.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    digits(x::Int64)\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpknbspqho.jl:17\nin expression starting at\
    \ /tmp/tmpknbspqho.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<text>\nThe function digits() returns a list of\
    \ digits of an integer, starting with the least significant digit.\nusing Test\n\
    \n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) ==\
    \ \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"\
    79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5ai6pso7.jl:17\nin expression starting at\
    \ /tmp/tmp5ai6pso7.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<text>\nExercise: Write a function that converts\
    \ a string to a list of integers. If the string contains non-numeric characters,\
    \ return an empty list.\nThe function should handle negative numbers, too. For\
    \ example, if the string contains \"-\", the function should return [-3, -2, -1,\
    \ 0, 1, 2, 3].\nThe function should handle strings with spaces, too. For example,\
    \ if the string contains \"1 2 3\", the function should return [1, 2, 3].\nThe\
    \ function should handle strings with spaces, too. For example, if the string\
    \ contains \"1 2 3\", the function should return [1, 2, 3].\nThe function should\
    \ handle strings with spaces, too. For example, if the string contains \"1 2 3\"\
    , the function should return [1, 2, 3].\nThe function should handle strings with\
    \ spaces, too. For example, if the string contains \"1 2 3\", the function should\
    \ return [1, 2, 3].\nThe function should handle strings with spaces, too. For\
    \ example, if the string contains \"1 2 3\", the function should return [1, 2,\
    \ 3].\nThe function should handle strings with spaces, too. For example, if the\
    \ string contains \"1 2 3\", the function should return [1, 2, 3].\nThe function\
    \ should handle strings with spaces, too. For example, if the string contains\
    \ \"1 2 3\", the function should return [1, 2, 3].\nThe function should handle\
    \ strings with spaces, too. For example, if the string contains \"1 2 3\", the\
    \ function should return [1, 2, 3].\nThe function should handle strings with spaces,\
    \ too. For example, if the string contains \"1 2 3\", the function should return\
    \ [1, 2, 3].\nThe function should handle strings with spaces, too. For example,\
    \ if the string contains \"1 2 3\", the function should return [1, 2, 3].\nThe\
    \ function should handle strings with spaces, too. For example, if the string\
    \ contains \"1 2 3\", the function should return [1, 2, 3].\nThe function should\
    \ handle strings with spaces, too. For example, if the string contains \"1 2 3\"\
    , the function should return [1, 2, 3].\nThe function should handle strings with\
    \ spaces, too. For example, if the string contains \"1 2 3\", the function should\
    \ return [1, 2, 3].\nThe function should handle strings with spaces, too. For\
    \ example, if the string contains \"1 2 3\", the function should return [1, 2,\
    \ 3].\nThe function should handle strings with spaces, too. For example, if the\
    \ string contains \"1 2 3\", the function should return [1, 2, 3].\nThe function\
    \ should handle strings with spaces, too. For example, if the string contains\
    \ \"1 2 3\", the function should return [1, 2, 3].\nThe \nusing Test\n\n@testset\
    \ begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\
    \t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12,\
    \ 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphotvi916.jl:17\nin expression starting at\
    \ /tmp/tmphotvi916.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp35bxtn50.jl:15\nin expression starting at\
    \ /tmp/tmp35bxtn50.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    digits\
    \ = reverse(digits)\n    return digits\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    digits(x::Int64)\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqh10yapd.jl:18\nin expression starting at\
    \ /tmp/tmpqh10yapd.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.3>\n@assert circular_shift(12,\
    \ 1) == 21\n@assert circular_shift(12, 2) == 12\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the number of digits in an integer. For example,\
    \ length(1234) = 4.\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpktcbeifb.jl:17\nin expression starting at\
    \ /tmp/tmpktcbeifb.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1z_xsryv.jl:15\nin expression starting at\
    \ /tmp/tmp1z_xsryv.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be in range 0 to length(x)\")\n    else\n        digits = digits(x)\n\
    \        digits = digits[shift:end]\n        digits = reverse(digits)\n      \
    \  return join(digits, \"\")\nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\
    \n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) ==\
    \ \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"\
    79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv0yarpw4.jl:18\nin expression starting at\
    \ /tmp/tmpv0yarpw4.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\
    \t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12,\
    \ 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdjvqxi1b.jl:17\nin expression starting at\
    \ /tmp/tmpdjvqxi1b.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else \n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf6jn_mtc.jl:15\nin expression starting at\
    \ /tmp/tmpf6jn_mtc.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) - 1 \n        then return reverse(x)\n\
    \    else \n        digits = digits(x)\n        digits = digits[shift:end-1]\n\
    \        digits = reverse(digits)\n        return join(digits)\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the number of digits in an integer.\
    \ For example,\n    length(1234) = 4.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmph9vkbp91.jl:11\nin expression starting at /tmp/tmph9vkbp91.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.5>\n@time circular_shift(123456789,\
    \ 2)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number of\
    \ digits in an integer. For example, length(123456789) returns 10. You may use\
    \ length(x::Int64).\nWrite a function that returns the number of digits in an\
    \ integer, but for negative numbers. For example, length(123456789) returns 10.\
    \ You may use length(x::Int64).\nWrite a function that returns the number of digits\
    \ in an integer, but for negative numbers. For example, length(123456789) returns\
    \ 10. You may use length(x::Int64).\nWrite a function that returns the number\
    \ of digits in an integer, but for negative numbers. For example, length(123456789)\
    \ returns 10. You may use length(x::Int64).\nWrite a function that returns the\
    \ number of digits in an integer, but for negative numbers. For example, length(123456789)\
    \ returns 10. You may use length(x::Int64).\nWrite a function that returns the\
    \ number of digits in an integer, but for negative numbers. For example, length(123456789)\
    \ returns 10. You may use length(x::Int64).\nWrite a function that returns the\
    \ number of digits in an integer, but for negative numbers. For example, length(123456789)\
    \ returns 10. You may use length(x::Int64).\nWrite a function that returns the\
    \ number of digits in an integer, but for negative numbers. For example, length(123456789)\
    \ returns 10. You may use length(x::Int64).\nWrite a function that returns the\
    \ number of digits in an integer, but for negative numbers. For example, length(123456789)\
    \ returns 10. You may use length(x::Int64).\nWrite a function that returns the\
    \ number of digits in an integer, but for negative numbers. For example, length(123456789)\
    \ returns 10. You may use length(x::Int64).\nWrite a function that returns the\
    \ number of digits in an integer, but for negative numbers. For example, length(123456789)\
    \ returns 10. You may use length(x::Int64).\nWrite a function that returns the\
    \ number of digits in an integer, but for negative numbers. For example, length(123456789)\
    \ returns 10. You may use length(x::Int64).\nWrite a function that returns the\
    \ number of digits in an integer, but for negative numbers. For example, length(123456789)\
    \ returns 10. You may use length(x::Int64).\nWrite a function that returns the\
    \ number of digits in an integer, but for negative numbers. For example, length(123456789)\
    \ returns 10. You may use length(x::Int64).\nWrite a function that returns the\
    \ number of digits in an integer, but for negative numbers. For example, length(123456789)\
    \ returns 10. You may use length(x::Int64).\nWrite \nusing Test\n\n@testset begin\n\
    \ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9h3jp9u4.jl:17\nin expression starting at\
    \ /tmp/tmp9h3jp9u4.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\
    \t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12,\
    \ 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsdt5leum.jl:17\nin expression starting at\
    \ /tmp/tmpsdt5leum.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = x\n    digits = digits[shift:end]\n    return digits\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptoqlcstz.jl:17\nin expression starting at\
    \ /tmp/tmptoqlcstz.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    digits(x::Int64)\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk77dgs9w.jl:15\nin expression starting at\
    \ /tmp/tmpk77dgs9w.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    end\n    digits[shift] = digits[shift]\
    \ % 10\n    digits[shift] = digits[shift] / 10\n    return join(digits, \"\")\n\
    end\n</cell>\n<code language=julia-1.5>\n@time circular_shift(123456789, 2)\n\
    </cell>\n<code language=julia-1.5>\n@time circular_shift(123456789, 3)\n</cell>\n\
    <code language=julia-1.5>\n@time circular_shift(123456789, 4)\n</cell>\n<code\
    \ language=julia-1.5>\n@time circular_shift(123456789, 5)\n</cell>\n<code language=julia-1.5>\n\
    @time circular_shift(123456789, 6)\n</cell>\n<code language=julia-1.5>\n@time\
    \ circular_shift(123456789, 7)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(123456789,\
    \ 8)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(123456789, 9)\n\
    </cell>\n<code language=julia-1.5>\n@time circular_shift(123456789, 10)\n</cell>\n\
    <code language=julia-1.5>\n@time circular_shift(123456789, 11)\n</cell>\n<code\
    \ language=julia-1.5>\n@time circular_shift(123456789, 12)\n</cell>\n<code language=julia-1.5>\n\
    @time circular_shift(123456789, 13)\n</cell>\n<code language=julia-1.5>\n@time\
    \ circular_shift(123456789, 14)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(123456789,\
    \ 15)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(123456789, 16)\n\
    </cell>\n<code language=julia-1.5>\n@time circular_shift(123456789, 17)\n</cell>\n\
    <code language=julia-1.5>\n@time circular_shift(123456789, 18)\n</cell>\n<code\
    \ language=julia-1.5>\n@time circular_shift(123456789, 19)\n</cell>\n<code language=julia-1.5>\n\
    @time circular_shift(123456789, 20)\n</cell>\n<code language=julia-1.5>\n@time\
    \ circular_shift(123456789, 21)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(123456789,\
    \ 22)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(123456789, 23)\n\
    </cell>\n<code language=julia-1.5>\n@time circular_shift(123456789, 24)\n</cell>\n\
    <code language=julia-1.5>\n@time circular_shift(123456789, 25)\n\nusing Test\n\
    \n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) ==\
    \ \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"\
    79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg51cxbo1.jl:19\nin expression starting at\
    \ /tmp/tmpg51cxbo1.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end-1]) + reverse(x[1:shift])\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwjcmud6o.jl:15\nin expression starting at\
    \ /tmp/tmpwjcmud6o.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else if shift < 0\n        return reverse(circular_shift(reverse(x), -shift))\n\
    \    else\n        return reverse(x[shift:end-1]) + reverse(x[1:shift])\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu_5725t_.jl:12\nin expression starting at\
    \ /tmp/tmpu_5725t_.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be in range 0 to length(x)\")\n    else\n        digits = digits(x)\n\
    \        digits_reversed = reverse(digits)\n        digits_shifted = shift(digits_reversed,\
    \ shift)\n        return join(digits_shifted)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppztdf8ax.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppztdf8ax.jl:1\n\
    in expression starting at /tmp/tmppztdf8ax.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp02m2wvap.jl:15\nin expression starting at\
    \ /tmp/tmp02m2wvap.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9wqnoipk.jl:15\nin expression starting at\
    \ /tmp/tmp9wqnoipk.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    digits\
    \ = reverse(digits)\n    return digits\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    digits(x::Int64)\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmploepe2fv.jl:18\nin expression starting at\
    \ /tmp/tmploepe2fv.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp68_kvi55.jl:15\nin expression starting at\
    \ /tmp/tmp68_kvi55.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\
    \t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12,\
    \ 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx4i10dfp.jl:17\nin expression starting at\
    \ /tmp/tmpx4i10dfp.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = x\n    digits = digits[shift:end]\n    return digits\n\
    end\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    digits(x::Int64)\nusing Test\n\
    \n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) ==\
    \ \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"\
    79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy5_07cvy.jl:17\nin expression starting at\
    \ /tmp/tmpy5_07cvy.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be between 0 and length(x)\")\n    else\n        digits = digits(x)\n\
    \        digits = digits[shift:end]\n        digits = reverse(digits)\n      \
    \  return join(digits)\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbhdf_lvk.jl:19\nin expression starting at\
    \ /tmp/tmpbhdf_lvk.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else \n        return reverse(x[shift:end-1]) + reverse(x[1:shift])\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    circular_shift(x, shift)\nusing\
    \ Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqth_9vla.jl:15\nin expression starting at\
    \ /tmp/tmpqth_9vla.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    end\n    return join(reverse(digits[shift:end]))\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    digits(x::Int64)\nusing Test\n\
    \n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) ==\
    \ \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"\
    79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqiqu136_.jl:17\nin expression starting at\
    \ /tmp/tmpqiqu136_.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits, \"\")\nend\n</cell>\n<text>\nThe function digits(x::Int64) returns\
    \ a string containing the digits of x, in reverse order. For example, digits(123456789)\
    \ returns \"987654321\".\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw3fxpkjm.jl:17\nin expression starting at\
    \ /tmp/tmpw3fxpkjm.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp38d2rltf.jl:15\nin expression starting at\
    \ /tmp/tmp38d2rltf.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(digits(x))\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits, \"\")\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    digits(x::Int64)\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfx3ct9y4.jl:17\nin expression starting at\
    \ /tmp/tmpfx3ct9y4.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<text>\nThe function digits(x::Int64) returns a\
    \ string containing the digits of x. For example, digits(12) returns \"12\".\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_lfgdn3i.jl:17\nin expression starting at\
    \ /tmp/tmp_lfgdn3i.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<text>\nThe function digits() is defined in the\
    \ file digits_test.jl and looks like this:\nusing Test\n\n@testset begin\n\ncandidate\
    \ = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm4r8yilt.jl:17\nin expression starting at\
    \ /tmp/tmpm4r8yilt.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.4>\n@assert circular_shift(12,\
    \ 1) == 21\n@assert circular_shift(12, 2) == 12\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of digits in an integer.\nusing Test\n\
    \n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) ==\
    \ \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"\
    79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppjtm4175.jl:17\nin expression starting at\
    \ /tmp/tmppjtm4175.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    digits(x::Int64)\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnnksqzl2.jl:15\nin expression starting at\
    \ /tmp/tmpnnksqzl2.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\
    \t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12,\
    \ 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsyl4flfa.jl:17\nin expression starting at\
    \ /tmp/tmpsyl4flfa.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    digits(x::Int64)\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl02o48_n.jl:17\nin expression starting at\
    \ /tmp/tmpl02o48_n.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be in range 0 to length(x)\")\n    else\n        digits = digits(x)\n\
    \        digits = digits[shift:end]\n        digits = reverse(digits)\n      \
    \  return join(digits)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\
    \"\n    digits(x::Int64)\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2wxycjjq.jl:19\nin expression starting at\
    \ /tmp/tmp2wxycjjq.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[-shift:]+digits[:shift]\n\
    \    return join(digits)\nend\n</cell>\n<text>\nCircular shift the digits of the\
    \ integer x, shift the digits right by shift and return the result as a string.\n\
    \    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12,\
    \ 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"-(shift):\" range\
    \ expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsz909sku.jl:14\n\
    in expression starting at /tmp/tmpsz909sku.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\
    \t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12,\
    \ 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsvkgea9g.jl:17\nin expression starting at\
    \ /tmp/tmpsvkgea9g.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of characters\
    \ in it.\nWrite a function that takes a string and returns a string with all the\
    \ characters in reverse order.\nWrite a function that takes a string and returns\
    \ a string with all the characters in reverse order but starting with the first\
    \ character.\nWrite a function that takes a string and returns a string with all\
    \ the characters in reverse order but starting with the last character.\nWrite\
    \ a function that takes a string and returns a string with all the characters\
    \ in reverse order but starting with the second last character.\nWrite a function\
    \ that takes a string and returns a string with all the characters in reverse\
    \ order but starting with the third last character.\nWrite a function that takes\
    \ a string and returns a string with all the characters in reverse order but starting\
    \ with the fourth last character.\nWrite a function that takes a string and returns\
    \ a string with all the characters in reverse order but starting with the fifth\
    \ last character.\nWrite a function that takes a string and returns a string with\
    \ all the characters in reverse order but starting with the sixth last character.\n\
    Write a function that takes a string and returns a string with all the characters\
    \ in reverse order but starting with the seventh last character.\nWrite a function\
    \ that takes a string and returns a string with all the characters in reverse\
    \ order but starting with the eighth last character.\nWrite a function that takes\
    \ a string and returns a string with all the characters in reverse order but starting\
    \ with the ninth last character.\nWrite a function that takes a string and returns\
    \ a string with all the characters in reverse order but starting with the tenth\
    \ last character.\nWrite a function that takes a string and returns a string with\
    \ all the characters in reverse order but starting with the eleventh last character.\n\
    Write a function that takes a string and returns a string with all the characters\
    \ in reverse order but starting with the twelfth last character.\nWrite a function\
    \ that takes a string and returns a string with all the characters in reverse\
    \ order but starting with the thirteenth last character.\nWrite a function that\
    \ takes a string and returns a string with all the characters in reverse order\
    \ but starting with the fourteenth last character.\nWrite a function that takes\
    \ a string and returns a string with all the characters in reverse order but starting\
    \ with the fifteenth last character.\nWrite a function that takes a string and\
    \ returns a string with all the characters in reverse order but starting with\
    \ the sixteenth last character.\nWrite a function that takes a string and returns\
    \ a string with all the characters in reverse order but starting with the seventeenth\
    \ last character.\nWrite a function that takes a string and returns a string with\
    \ all the characters in reverse order but starting with the eighteenth last character.\n\
    Write a function that takes a string and returns a string with all the characters\
    \ in reverse order but starting with the nineteenth last character.\nWrite a \n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptfsjqpoq.jl:15\nin expression starting at\
    \ /tmp/tmptfsjqpoq.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be in range 0 to length(x)\")\n    else\n        digits = digits(x)\n\
    \        digits = digits[shift:end]\n        digits = reverse(digits)\n      \
    \  return join(digits)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"\
    001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\"\
    )\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4n707107.jl:18\nin expression starting at\
    \ /tmp/tmp4n707107.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be in range 0 to length(x)\")\n    else\n        digits = digits(x)\n\
    \        digits = digits[shift:end]\n        digits = reverse(digits)\n      \
    \  return join(digits)\nend\n</cell>\n<text>\nThe function digits() returns the\
    \ digits of the integer x, as a string.\nThe function length() returns the number\
    \ of digits of x.\nThe function reverse() reverses the digits of the integer x.\n\
    The function join() joins the digits of the integer x into a string.\nThe function\
    \ error() raises an error if shift is out of range.\nThe function circular_shift()\
    \ shifts the digits of the integer x by shift.\nThe function digits() returns\
    \ the digits of the integer x, as a string.\nThe function length() returns the\
    \ number of digits of x.\nThe function reverse() reverses the digits of the integer\
    \ x.\nThe function join() joins the digits of the integer x into a string.\nThe\
    \ function error() raises an error if shift is out of range.\nThe function circular_shift()\
    \ shifts the digits of the integer x by shift.\nThe function digits() returns\
    \ the digits of the integer x, as a string.\nThe function length() returns the\
    \ number of digits of x.\nThe function reverse() reverses the digits of the integer\
    \ x.\nThe function join() joins the digits of the integer x into a string.\nThe\
    \ function error() raises an error if shift is out of range.\nThe function circular_shift()\
    \ shifts the digits of the integer x by shift.\nThe function digits() returns\
    \ the digits of the integer x, as a string.\nThe function length() returns the\
    \ number of digits of x.\nThe function reverse() reverses the digits of the integer\
    \ x.\nThe function join() joins the digits of the integer x into a string.\nThe\
    \ function error() raises an error if shift is out of range.\nThe function circular_shift()\
    \ shifts the digits of the integer x by shift.\nThe function digits() returns\
    \ the digits of the integer x, as a string.\nThe function length() returns the\
    \ number of digits of x.\nThe function reverse() reverses the digits of the integer\
    \ x.\nThe function join() joins the digits of the integer x into a string.\nThe\
    \ function error() raises an error if shift is out of range.\nThe function circular_shift()\
    \ shifts the digits of the integer x by shift.\nThe function digits() returns\
    \ the digits of the integer x, as a string.\nThe function length() returns the\
    \ number of digits of x.\nThe function reverse() reverses the digits of the integer\
    \ x.\nThe function join() joins the digits of the integer x into a string.\nThe\
    \ function error() raises an error if shift is out of range.\nThe function circular_shift()\
    \ shifts the digits of the integer x by shift.\nThe function digit\nusing Test\n\
    \n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) ==\
    \ \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"\
    79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplhnvloh6.jl:18\nin expression starting at\
    \ /tmp/tmplhnvloh6.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be in range 0 to length(x)\")\n    else\n        digits = digits(x)\n\
    \        digits[shift] = digits[shift] % 10\n        digits = digits[shift..-1]\n\
    \        digits = reverse(digits)\n        return join(digits)\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid operator \"..-\" near column 31\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzcpypj6w.jl:15\nin expression starting at\
    \ /tmp/tmpzcpypj6w.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return x[shift:end]\nend\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq6_dziwl.jl:15\nin expression starting at\
    \ /tmp/tmpq6_dziwl.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    digits\
    \ = reverse(digits)\n    return digits\nend\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp81mmn4kp.jl:18\nin expression starting at\
    \ /tmp/tmp81mmn4kp.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = reverse(x[shift:end])\n    return digits\nend\n</cell>\n\
    <code language=julia-1.3>\n\"\"\"\n    digits(x::Int64)\nusing Test\n\n@testset\
    \ begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\
    \t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12,\
    \ 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpewrzyyo2.jl:16\nin expression starting at\
    \ /tmp/tmpewrzyyo2.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be in range 0 to length(x)\")\n    else\n        digits = digits(x)\n\
    \        digits = digits[shift:end]\n        digits = reverse(digits)\n      \
    \  return join(digits)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string and returns the number of occurrences of its first character\
    \ in that string.\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp47_k92j5.jl:19\nin expression starting at\
    \ /tmp/tmp47_k92j5.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa0hmhpzc.jl:15\nin expression starting at\
    \ /tmp/tmpa0hmhpzc.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else if shift < 0\n        return reverse(circular_shift(reverse(x), -shift))\n\
    \    else\n        return reverse(circular_shift(reverse(x), shift))\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoh5ex3ui.jl:12\nin expression starting at\
    \ /tmp/tmpoh5ex3ui.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else if shift < 0\n        return circular_shift(x, -shift)\n    else\n \
    \       digits = digits(x)\n        digits = digits[shift:end]\n        return\
    \ join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"\
    001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\"\
    )\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5ondoti_.jl:12\nin expression starting at\
    \ /tmp/tmp5ondoti_.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = reverse(x[shift:end])\n    return digits\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of digits in an integer.\n\
    Write a function that returns the number of digits in an integer.\nWrite a function\
    \ that returns the number of digits in an integer.\nWrite a function that returns\
    \ the number of digits in an integer.\nWrite a function that returns the number\
    \ of digits in an integer.\nWrite a function that returns the number of digits\
    \ in an integer.\nWrite a function that returns the number of digits in an integer.\n\
    Write a function that returns the number of digits in an integer.\nWrite a function\
    \ that returns the number of digits in an integer.\nWrite a function that returns\
    \ the number of digits in an integer.\nWrite a function that returns the number\
    \ of digits in an integer.\nWrite a function that returns the number of digits\
    \ in an integer.\nWrite a function that returns the number of digits in an integer.\n\
    Write a function that returns the number of digits in an integer.\nWrite a function\
    \ that returns the number of digits in an integer.\nWrite a function that returns\
    \ the number of digits in an integer.\nWrite a function that returns the number\
    \ of digits in an integer.\nWrite a function that returns the number of digits\
    \ in an integer.\nWrite a function that returns the number of digits in an integer.\n\
    Write a function that returns the number of digits in an integer.\nWrite a function\
    \ that returns the number of digits in an integer.\nWrite a function that returns\
    \ the number of digits in an integer.\nWrite a function that returns the number\
    \ of digits in an integer.\nWrite a function that returns the number of digits\
    \ in an integer.\nWrite a function that returns the number of digits in an integer.\n\
    Write a function that returns the number of digits in an integer.\nWrite a function\
    \ that returns the number of digits in an integer.\nWrite a function that returns\
    \ the number of digits in an integer.\nWrite a function that returns the number\
    \ of digits in an integer.\nWrite a function that returns the number of digits\
    \ in an integer.\nWrite a function that returns the number of digits in an integer.\n\
    Write a function that returns the number of digits in an integer.\nWrite a function\
    \ that returns the number of digits in an integer.\nWrite a function that returns\
    \ the number of digits in an integer.\nWrite a function that returns the number\
    \ of digits in an integer.\nWrite a function that returns the number of digits\
    \ in an integer.\nWrite a function that returns the number of digits in an integer.\n\
    Write a function that returns the number of digits in an integer.\nWrite a function\
    \ that returns the number of digits in an integer.\nWrite a function that returns\
    \ the number of digits in an integer.\nWrite a function that returns the number\
    \ of digits in an integer.\nWrite a function that returns the number of digits\
    \ in an integer.\nWrite a function that returns the number of digits in an integer.\n\
    Write a function that returns the number of digits in an integer.\nWrite a function\
    \ that returns the number of digits in an integer.\nWrite a function that returns\
    \ the number of digits in an integer.\nWrite a function that returns the number\
    \ of digits in an integer.\nWrite a \nusing Test\n\n@testset begin\n\ncandidate\
    \ = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpathienit.jl:16\nin expression starting at\
    \ /tmp/tmpathienit.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return digits(x)[end - shift + 1 : end]\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_7t0xrml.jl:15\nin expression starting at\
    \ /tmp/tmp_7t0xrml.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else if shift < 0\n        return reverse(reverse(x))\n    else\n       \
    \ return reverse(reverse(x)[1:shift]) + reverse(reverse(x)[shift+1:end])\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n    digits(\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3n_4rvzb.jl:12\nin expression starting at\
    \ /tmp/tmp3n_4rvzb.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = x\n    digits = digits[shift:end]\n    return digits\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string as input\
    \ and returns the number of characters in the string.\n    >>> count_chars(\"\
    hello\")\n    5\n    >>> count_chars(\"hello world\")\n    11\n    >>> count_chars(\"\
    hello world!\")\n    9\n    >>> count_chars(\"\")\n    0\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) ==\
    \ \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"\
    79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpylhv7y56.jl:17\nin expression starting at\
    \ /tmp/tmpylhv7y56.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be in range 0 to length(x)\")\n    else\n        digits = digits(x)\n\
    \        digits_reversed = reverse(digits)\n        digits_shifted = shift(digits_reversed,\
    \ shift)\n        digits_shifted_reversed = reverse(digits_shifted)\n        return\
    \ digits_shifted_reversed\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that converts a string to a list of integers. If the string contains non-numeric\
    \ characters, return an error. Otherwise, return the list of integers contained\
    \ in the string.\nFor example, if the string \"123abc\" were passed into the function,\
    \ return [123, 123, 123].\nIf the string \"abc\" were passed into the function,\
    \ return an error.\nIf the string \"123\" were passed into the function, return\
    \ [123, 123, 123].\nIf the string \"abc\" were passed into the function, return\
    \ an error.\nIf the string \"abc\" were passed into the function, return an error.\n\
    If the string \"abc\" were passed into the function, return an error.\nIf the\
    \ string \"abc\" were passed into the function, return an error.\nIf the string\
    \ \"abc\" were passed into the function, return an error.\nIf the string \"abc\"\
    \ were passed into the function, return an error.\nIf the string \"abc\" were\
    \ passed into the function, return an error.\nIf the string \"abc\" were passed\
    \ into the function, return an error.\nIf the string \"abc\" were passed into\
    \ the function, return an error.\nIf the string \"abc\" were passed into the function,\
    \ return an error.\nIf the string \"abc\" were passed into the function, return\
    \ an error.\nIf the string \"abc\" were passed into the function, return an error.\n\
    If the string \"abc\" were passed into the function, return an error.\nIf the\
    \ string \"abc\" were passed into the function, return an error.\nIf the string\
    \ \"abc\" were passed into the function, return an error.\nIf the string \"abc\"\
    \ were passed into the function, return an error.\nIf the string \"abc\" were\
    \ passed into the function, return an error.\nIf the string \"abc\" were passed\
    \ into the function, return an error.\nIf the string \"abc\" were passed into\
    \ the function, return an error.\nIf the string \"abc\" were passed into the function,\
    \ return an error.\nIf the string \"abc\" were passed into the function, return\
    \ an error.\nIf the string \"abc\" were passed into the function, return an error.\n\
    If the string \"abc\" were passed into the function, return an error.\nIf the\
    \ string \"abc\" were passed into the function, return an error.\nIf the string\
    \ \"abc\" were passed into the function, return an error.\nIf the string \"abc\"\
    \ were passed into the function, return an error.\nIf the string \"abc\" were\
    \ passed into the function, return an \nusing Test\n\n@testset begin\n\ncandidate\
    \ = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9e20ho1o.jl:19\nin expression starting at\
    \ /tmp/tmp9e20ho1o.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\
    \t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12,\
    \ 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp250zdfjm.jl:17\nin expression starting at\
    \ /tmp/tmp250zdfjm.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = reverse(x[shift:end])\n    return digits\nend\n</cell>\n\
    <code language=julia-1.5>\n@time circular_shift(12, 1)\n</cell>\n<code language=julia-1.5>\n\
    @time circular_shift(12, 2)\n</cell>\n<text>\nExercise: Write a function that\
    \ returns the number of digits in an integer.\nusing Test\n\n@testset begin\n\n\
    candidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp07ubnw6o.jl:16\nin expression starting at\
    \ /tmp/tmp07ubnw6o.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return x[shift:end]\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpidhxssu6.jl:15\nin expression starting at\
    \ /tmp/tmpidhxssu6.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be between 0 and $length(x)\")\n    else\n        digits = digits(x)\n\
    \        digits[shift] = digits[shift] % 10\n        digits[length(digits)] =\
    \ digits[length(digits)] / 10\n        return join(digits, \"\")\nend\n</code>\n\
    <|/ a tags=julia |>\n<| a tags=julia |>\nHere's a solution that doesn't use any\
    \ packages:\n<code>\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzh0dftnk.jl:18\nin expression starting at\
    \ /tmp/tmpzh0dftnk.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    digits(x::Int64)\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn4n49bb0.jl:17\nin expression starting at\
    \ /tmp/tmpn4n49bb0.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else if shift < 0\n        return reverse(x)\n    else\n        return reverse(x[1:shift])\
    \ + x[(shift+1):length(x)]\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) ==\
    \ \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"\
    79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9_o0du2c.jl:12\nin expression starting at\
    \ /tmp/tmp9_o0du2c.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else if shift < 0\n        return reverse(circular_shift(reverse(x), -shift))\n\
    \    else\n        return x[shift:end-1] + reverse(circular_shift(reverse(x[shift:end-1]),\
    \ shift))\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    digits(x::Int64)\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2spyavl0.jl:12\nin expression starting at\
    \ /tmp/tmp2spyavl0.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    digits(x::Int64)\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnm305ivc.jl:15\nin expression starting at\
    \ /tmp/tmpnm305ivc.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[-shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\
    \t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12,\
    \ 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk93hzf1d.jl:17\nin expression starting at\
    \ /tmp/tmpk93hzf1d.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else if shift < 0\n        return reverse(x)\n    else\n        return reverse(x[shift:end-1])\
    \ + reverse(x[1:shift])\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n   \
    \ digits(x::Int64)\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpptux3cgo.jl:12\nin expression starting at\
    \ /tmp/tmpptux3cgo.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.5>\n@assert circular_shift(12,\
    \ 1) == 21\n@assert circular_shift(12, 2) == 12\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of digits in an integer.\nusing Test\n\
    \n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) ==\
    \ \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"\
    79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl9xcqm4p.jl:17\nin expression starting at\
    \ /tmp/tmpl9xcqm4p.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"\
    001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\"\
    )\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp83z1rpxw.jl:17\nin expression starting at\
    \ /tmp/tmp83z1rpxw.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\
    \t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12,\
    \ 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4ifkqjep.jl:17\nin expression starting at\
    \ /tmp/tmp4ifkqjep.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = reverse(x[shift:end])\n    return digits\nend\n</cell>\n\
    <code language=julia-1.5>\n@time circular_shift(12, 1)\n</cell>\n<code language=julia-1.5>\n\
    @time circular_shift(12, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the number of digits in an integer. For example, length(1234) = 4.\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuf8whgz6.jl:16\nin expression starting at\
    \ /tmp/tmpuf8whgz6.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    digits(x::Int64)\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiriew9s5.jl:17\nin expression starting at\
    \ /tmp/tmpiriew9s5.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return digits(x)[shift:end]\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of digits in an integer. For example,\
    \ length(1234) = 4.\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_fhsllta.jl:15\nin expression starting at\
    \ /tmp/tmp_fhsllta.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    digits(x::Int64)::Vector{Int64}\nReturn the digits of x in reverse\
    \ order.\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps_5naezl.jl:15\nin expression starting at\
    \ /tmp/tmps_5naezl.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return x[shift:end]\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8zp1r_cg.jl:15\nin expression starting at\
    \ /tmp/tmp8zp1r_cg.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaetk2geb.jl:15\nin expression starting at\
    \ /tmp/tmpaetk2geb.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be between 0 and length(x)\")\n    else\n        digits = digits(x)\n\
    \        digits[shift] = digits[shift] % 10\n        digits[length(digits)] =\
    \ digits[length(digits)] % 10\n        digits = reverse(digits)\n        return\
    \ join(digits)\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns the number of times each character appears in the string.\
    \ For example, if the string \"abcabc\" was passed into the function, the function\
    \ should return [('a', 3), ('b', 2), ('c', 3)]. The order of the characters should\
    \ not matter.\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t\
    @test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97,\
    \ 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjw4srvf9.jl:19\nin expression starting at\
    \ /tmp/tmpjw4srvf9.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    digits\
    \ = reverse(digits)\n    return digits\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnzj4lcxe.jl:18\nin expression starting at\
    \ /tmp/tmpnzj4lcxe.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\
    \t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12,\
    \ 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp63hmwpkj.jl:17\nin expression starting at\
    \ /tmp/tmp63hmwpkj.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be between 0 and length(x)\")\n    elseif shift < length(x)\n     \
    \   return reverse(x[shift:end])\n    else\n        return x\nend\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that takes a string and returns the number of characters\
    \ in that string.\nWrite a function that takes a string and returns the number\
    \ of words in that string.\nWrite a function that takes a string and returns the\
    \ number of sentences in that string.\nWrite a function that takes a string and\
    \ returns the number of lines in that string.\nWrite a function that takes a string\
    \ and returns the number of characters in that string that are not spaces.\nWrite\
    \ a function that takes a string and returns the number of words in that string\
    \ that are not spaces.\nWrite a function that takes a string and returns the number\
    \ of sentences in that string that are not spaces.\nWrite a function that takes\
    \ a string and returns the number of lines in that string that are not spaces.\n\
    Write a function that takes a string and returns the number of characters in that\
    \ string that are not spaces and words in that string that are not spaces.\nWrite\
    \ a function that takes a string and returns the number of words in that string\
    \ that are not spaces and characters in that string that are not spaces.\nWrite\
    \ a function that takes a string and returns the number of sentences in that string\
    \ that are not spaces and words in that string that are not spaces.\nWrite a function\
    \ that takes a string and returns the number of lines in that string that are\
    \ not spaces and characters in that string that are not spaces.\nWrite a function\
    \ that takes a string and returns the number of characters in that string that\
    \ are not spaces and words in that string that are not spaces and sentences in\
    \ that string that are not spaces.\nWrite a function that takes a string and returns\
    \ the number of words in that string that are not spaces and characters in that\
    \ string that are not spaces and sentences in that string that are not spaces.\n\
    Write a function that takes a string and returns the number of sentences in that\
    \ string that are not spaces and words in that string that are not spaces and\
    \ characters in that string that are not spaces.\nWrite a function that takes\
    \ a string and returns the number of lines in that string that are not spaces\
    \ and characters in that string that are not spaces and words in that string that\
    \ are not spaces and sentences in that string that are not spaces.\nWrite a function\
    \ that takes a string and returns the number of characters in that string that\
    \ are not spaces and words in that string that are not spaces and sentences in\
    \ that string that are not spaces and lines in that string that are not spaces.\n\
    Write a function that takes a string and returns the number of words in that string\
    \ that are not spaces and characters in that string that are not spaces and sentences\
    \ in that string that are not spaces and lines in that string that are not spaces.\n\
    Write a function that takes a string and returns the number of sentences in that\
    \ string that are not spaces and words in that \nusing Test\n\n@testset begin\n\
    \ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprvwrx8uk.jl:17\nin expression starting at\
    \ /tmp/tmprvwrx8uk.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    digits(x::Int64)\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdqesgkfi.jl:15\nin expression starting at\
    \ /tmp/tmpdqesgkfi.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(digits(x))\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    digits(x::Int64)\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu7xhkxho.jl:17\nin expression starting at\
    \ /tmp/tmpu7xhkxho.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end-1]) + reverse(x[1:shift])\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmdhoizsn.jl:15\nin expression starting at\
    \ /tmp/tmpmdhoizsn.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end-1]) + reverse(x[1:shift])\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    digits(x::Int64)\nusing Test\n\
    \n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) ==\
    \ \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"\
    79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt4q20svc.jl:15\nin expression starting at\
    \ /tmp/tmpt4q20svc.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else \n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqnov7iwm.jl:15\nin expression starting at\
    \ /tmp/tmpqnov7iwm.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else if shift < 0\n        return reverse(circular_shift(reverse(x), -shift))\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    digits(x::Int64)\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnmfztmyx.jl:12\nin expression starting at\
    \ /tmp/tmpnmfztmyx.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else if shift < 0\n        return reverse(x)\n    else\n        return reverse(x[1:shift])\
    \ + x[(shift + 1):length(x)]\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) ==\
    \ \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"\
    79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk3609jvj.jl:12\nin expression starting at\
    \ /tmp/tmpk3609jvj.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(digits(x))\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits, \"\")\nend\n</cell>\n<text>\nThe function digits(x::Int64) returns\
    \ a list of digits of x, starting with the first\n    digit.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\
    \t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12,\
    \ 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphktcuo_s.jl:17\nin expression starting at\
    \ /tmp/tmphktcuo_s.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\
    \t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12,\
    \ 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe3aapyzx.jl:17\nin expression starting at\
    \ /tmp/tmpe3aapyzx.jl:17\n"
  exit_code: 1
  status: SyntaxError
