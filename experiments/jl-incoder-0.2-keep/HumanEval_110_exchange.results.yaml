name: HumanEval_110_exchange
language: julia
results:
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    if length(lst1) != length(lst2)\n \
    \       return \"NO\"\n    end\n    \n    even = Int64[]\n    \n    for ele in\
    \ lst1\n        if ele % 2 == 0\n            push!(even, ele)\n        end\n \
    \   end\n    \n    for ele in lst2\n        if ele % 2 == 0\n            push!(even,\
    \ ele)\n        end\n    end\n    \n    if length(even) == 0\n        return \"\
    NO\"\n    end\n    \n    return \"YES\"\nend\n</cell>\n<code language=julia-1.5>\n\
    exchange([1, 2, 3, 4], [1, 2, 3, 4])\n</cell>\n<code language=julia-1.5>\nexchange([1,\
    \ 2, 3, 4], [1, 5, 3, 4])\n</cell>\n<text>\nProblem 3\nWrite a function called\
    \ \"is_palindrome\" that takes two lists of numbers and determines whether it\
    \ is possible to perform an exchange of elements between them to make lst1 a list\
    \ of only even numbers.\n    There is no limit on the number of exchanged elements\
    \ between lst1 and lst2.\n    If it is possible to exchange elements between the\
    \ lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\"\
    .\n    Otherwise, return \"NO\".\n    For example:\n    is_palindrome([1, 2, 3,\
    \ 4], [1, 2, 3, 4]) => \"YES\"\n    is_palindrome([1, 2, 3, 4], [1, 5, 3, 4])\
    \ => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\
    \"\"\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppbv3qlsu.jl:39\nin expression starting at\
    \ /tmp/tmppbv3qlsu.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    if length(lst1) != length(lst2)\n \
    \       return \"NO\"\n    end\n    \n    even = filter(x -> x % 2 == 0, lst1)\n\
    \    odd = filter(x -> x % 2 != 0, lst1)\n    \n    if length(even) == length(odd)\n\
    \        return \"NO\"\n    end\n    \n    even = filter(x -> x % 2 == 0, lst2)\n\
    \    odd = filter(x -> x % 2 != 0, lst2)\n    \n    if length(even) == length(odd)\n\
    \        return \"NO\"\n    end\n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmptl8ipcon.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptl8ipcon.jl:1\n\
    in expression starting at /tmp/tmptl8ipcon.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpkb07g7np.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpkb07g7np.jl:1\n\
    in expression starting at /tmp/tmpkb07g7np.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    if length(lst1) != length(lst2)\n \
    \       return \"NO\"\n    end\n    \n    even = Int64[]\n    odd = Int64[]\n\
    \    \n    for i in 1:length(lst1)\n        if lst1[i] % 2 == 0\n            push!(even,\
    \ lst1[i])\n        else\n            push!(odd, lst1[i])\n        end\n    end\n\
    \    \n    for i in 1:length(lst2)\n        if lst2[i] % 2 == 0\n            push!(even,\
    \ lst2[i])\n        else\n            push!(odd, lst2[i])\n        end\n    end\n\
    \    \n    if length(even) == length(odd)\n        return \"YES\"\n    else\n\
    \        return \"NO\"\n    end\nend\n</cell>\n<code language=julia-1.5>\nexchange([1,\
    \ 2, 3, 4], [1, 2, 3, 4])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2,\
    \ 3, 4], [1, 5, 3, 4])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3,\
    \ 4], [1, 2, 3, 4, 5, 6])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2,\
    \ 3, 4], [1, 2, 3, 4, 5, 6, 7])\n</cell>\n<code language=julia-1.5>\nexchange([1,\
    \ 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8])\n</cell>\n<code language=julia-1.5>\nexchange([1,\
    \ 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9])\n</cell>\n<code language=julia-1.5>\n\
    exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n</cell>\n<code language=julia-1.5>\n\
    exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n</cell>\n<code language=julia-1.5>\n\
    exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n</cell>\n<code\
    \ language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n</cell>\n<code language=julia-1.5>\n\
    exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n\
    </cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n</cell>\n<code language=julia-1.5>\n\
    exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,\
    \ 17])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n</cell>\n<code language=julia-1.5>\n\
    exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,\
    \ 17, 18, 19])\n</cell>\n<code language=juli\nusing Test\n\n@testset begin\n\n\
    candidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk_h5nr2y.jl:44\nin expression starting at\
    \ /tmp/tmpk_h5nr2y.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3ckm5cyz.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3ckm5cyz.jl:1\n\
    in expression starting at /tmp/tmp3ckm5cyz.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphyk1x1hp.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphyk1x1hp.jl:1\n\
    in expression starting at /tmp/tmphyk1x1hp.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmph9ks2axb.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmph9ks2axb.jl:1\n\
    in expression starting at /tmp/tmph9ks2axb.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwddx0vde.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwddx0vde.jl:1\n\
    in expression starting at /tmp/tmpwddx0vde.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpj43h3l6u.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpj43h3l6u.jl:1\n\
    in expression starting at /tmp/tmpj43h3l6u.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp8kwdloqt.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8kwdloqt.jl:1\n\
    in expression starting at /tmp/tmp8kwdloqt.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpk6fc1jhg.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk6fc1jhg.jl:1\n\
    in expression starting at /tmp/tmpk6fc1jhg.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    even = lst1[findall(x -> x % 2 == 0,\
    \ lst1)]\n    odd = lst2[findall(x -> x % 2 != 0, lst2)]\n    \n    if length(even)\
    \ == length(odd) == length(lst1)\n        return \"YES\"\n    else\n        return\
    \ \"NO\"\n    end\nend\n</cell>\n<code language=julia-1.5>\nexchange([1,2,3,4,5,6],\
    \ [1,2,3,4,5,6])\n</cell>\n<code language=julia-1.5>\nexchange([1,2,3,4,5,6],\
    \ [1,5,3,4,6,2])\n</cell>\n<code language=julia-1.5>\nexchange([1,2,3,4,5,6],\
    \ [1,5,3,4,6,2])\n</cell>\n<code language=julia-1.5>\nexchange([1,2,3,4,5,6],\
    \ [1,5,3,4,6,2])\n</cell>\n<code language=julia-1.5>\nexchange([1,2,3,4,5,6],\
    \ [1,5,3,4,6,2])\n</cell>\n<code language=julia-1.5>\nexchange([1,2,3,4,5,6],\
    \ [1,5,3,4,6,2])\n</cell>\n<code language=julia-1.5>\nexchange([1,2,3,4,5,6],\
    \ [1,5,3,4,6,2])\n</cell>\n<code language=julia-1.5>\nexchange([1,2,3,4,5,6],\
    \ [1,5,3,4,6,2])\n</cell>\n<code language=julia-1.5>\nexchange([1,2,3,4,5,6],\
    \ [1,5,3,4,6,2])\n</cell>\n<code language=julia-1.5>\nexchange([1,2,3,4,5,6],\
    \ [1,5,3,4,6,2])\n</cell>\n<code language=julia-1.5>\nexchange([1,2,3,4,5,6],\
    \ [1,5,3,4,6,2])\n</cell>\n<code language=julia-1.5>\nexchange([1,2,3,4,5,6],\
    \ [1,5,3,4,6,2])\n</cell>\n<code language=julia-1.5>\nexchange([1,2,3,4,5,6],\
    \ [1,5,3,4,6,2])\n</cell>\n<code language=julia-1.5>\nexchange([1,2,3,4,5,6],\
    \ [1,5,3,4,6,2])\n</cell>\n<code language=julia-1.5>\nexchange([1,2,3,4,5,6],\
    \ [1,5,3,4,6,2])\n</cell>\n<code language=julia-1.5>\nexchange([1,2,3,4,5,6],\
    \ [1,5,3,4,6,2])\n</cell>\n<code language=julia-1.5>\nexchange([1,2,3,4,5,6],\
    \ [1,5,3,4,6,2])\n</cell>\n<code language=julia-1.5>\nexchange([1,2,3,4,5,6],\
    \ [1,5,3,4,6,2])\n</cell>\n<code language=julia-1.5>\nexchange([1,2,3,4,5,6],\
    \ [1,5,3,4,6,2])\n</cell>\n<code language=julia-1.5>\nexchange([1,2,3,4,5,6\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkz_f90i2.jl:24\nin expression starting at\
    \ /tmp/tmpkz_f90i2.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    even = lst1[2:end] % 2 == 0\n    even2\
    \ = lst2[2:end] % 2 == 0\n    \n    if even && even2\n        return \"YES\"\n\
    \    else\n        return \"NO\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    exchange([1, 2, 3, 4], [1, 2, 3, 4])\n</cell>\n<code language=julia-1.5>\nexchange([1,\
    \ 2, 3, 4], [1, 5, 3, 4])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes two vectors of numbers and returns a vector of the same length\n    in\
    \ which each element is the sum of the corresponding elements of the input vectors.\n\
    \    For example:\n    sum([1, 2, 3], [4, 5, 6]) => [5, 7, 9]\n    sum([1, 2,\
    \ 3], [4, 5, 6, 7]) => [5, 7, 9, 11]\n    sum([1, 2, 3], [4, 5, 6, 7], 3) => [5,\
    \ 7, 9, 11, 13]\n    sum([1, 2, 3], [4, 5, 6, 7], 3) => [5, 7, 9, 11, 13]\n  \
    \  sum([1, 2, 3], [4, 5, 6, 7], 3) => [5, 7, 9, 11, 13]\n    sum([1, 2, 3], [4,\
    \ 5, 6, 7], 3) => [5, 7, 9, 11, 13]\n    sum([1, 2, 3], [4, 5, 6, 7], 3) => [5,\
    \ 7, 9, 11, 13]\n    sum([1, 2, 3], [4, 5, 6, 7], 3) => [5, 7, 9, 11, 13]\n  \
    \  sum([1, 2, 3], [4, 5, 6, 7], 3) => [5, 7, 9, 11, 13]\n    sum([1, 2, 3], [4,\
    \ 5, 6, 7], 3) => [5, 7, 9, 11, 13]\n    sum([1, 2, 3], [4, 5, 6, 7], 3) => [5,\
    \ 7, 9, 11, 13]\n    sum([1, 2, 3], [4, 5, 6, 7], 3) => [5, 7, 9, 11, 13]\n  \
    \  sum([1, 2, 3], [4, 5, 6, 7], 3) => [5, 7, 9, 11, 13]\n    sum([1, 2, 3], [4,\
    \ 5, 6, 7], 3) => [5, 7, 9, 11, 13]\n    sum([1, 2, 3], [4, 5, 6, 7], 3) => [5,\
    \ 7, 9, 11, 13]\n    sum([1, 2, 3], [4, 5, 6, 7], 3) => [5, 7, 9, 11, 13]\n  \
    \  sum([1, 2, 3], [4, 5, 6, 7], 3) => [5, 7, 9, 11, 13]\n    sum([1, 2, 3], [4,\
    \ 5, 6, 7], 3) => [5, 7, 9, 11, 13]\n    sum([1, 2, 3], [4, 5, 6, 7], 3) => [5,\
    \ 7, 9, 11, 13]\n    sum([1, 2, 3], [4, 5, 6, 7], 3) => [5, 7, 9, 11, 13]\n  \
    \  sum([1, 2, 3], [4, 5, 6, 7], 3) => [5, 7, 9, 11, 13]\n    sum([1, 2, 3], [4,\
    \ 5, 6, 7], 3) => [5, 7, 9, 11, 13\nusing Test\n\n@testset begin\n\ncandidate\
    \ = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvyac_zz6.jl:24\nin expression starting at\
    \ /tmp/tmpvyac_zz6.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpss9f3jlv.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpss9f3jlv.jl:1\n\
    in expression starting at /tmp/tmpss9f3jlv.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    even = lst1[2:end] .== lst2[1:end-1]\n\
    \    \n    if all(even)\n        return \"YES\"\n    else\n        return \"NO\"\
    \n    end\nend\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1,\
    \ 2, 3, 4])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 5,\
    \ 3, 4])\n</cell>\n<text>\nExercise 3\nWrite a function called exchange2 that\
    \ takes two lists of numbers, and determines whether it is possible to perform\
    \ an exchange of elements between them to make lst1 a list of only even numbers.\n\
    \    There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange2([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange2([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that\
    \ the input lists will be non-empty.\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbtqnwmva.jl:23\nin expression starting at\
    \ /tmp/tmpbtqnwmva.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    if length(lst1) != length(lst2) \n\
    \        return \"NO\" \n    \n    even = filter(x -> x % 2 == 0, lst1)\n    odd\
    \ = filter(x -> x % 2 != 0, lst1)\n    \n    if length(even) == length(odd) \n\
    \        return \"NO\" \n    \n    even = filter(x -> x % 2 == 0, lst2)\n    odd\
    \ = filter(x -> x % 2 != 0, lst2)\n    \n    if length(even) == length(odd) \n\
    \        return \"NO\" \n    \n    even = filter(x -> x % 2 == 0, lst1)\n    odd\
    \ = filter(x -> x % 2 != 0, lst1)\n    \n    if length(even) == length(odd) \n\
    \        return \"NO\" \n    \n    even = filter(x -> x % 2 == 0, lst2)\n    odd\
    \ = filter(x -> x % 2 != 0, lst2)\n    \n    if length(even) == length(odd) \n\
    \        return \"NO\" \n    \n    even = filter(x -> x % 2 == 0, lst1)\n    odd\
    \ = filter(x -> x % 2 != 0, lst1)\n    \n    if length(even) == length(odd) \n\
    \        return \"NO\" \n    \n    even = filter(x -> x % 2 == 0, lst2)\n    odd\
    \ = filter(x -> x % 2 != 0, lst2)\n    \n    if length(even) == length(odd) \n\
    \        return \"NO\" \n    \n    even = filter(x -> x % 2 == 0, lst1)\n    odd\
    \ = filter(x -> x % 2 != 0, lst1)\n    \n    if length(even) == length(odd) \n\
    \        return \"NO\" \n    \n    even = filter(x -> x % 2 == 0, lst2)\n    odd\
    \ = filter(x -> x % 2 != 0, lst2)\n    \n    if length(even) == length(odd) \n\
    \        return \"NO\" \n    \n    even = filter(x -> x % 2 == 0, lst1)\n    odd\
    \ = filter(x -> x % 2 != 0, lst1)\n    \n    if length(even) == length(odd) \n\
    \        return \"NO\" \n    \n    even = filter(x -> x % 2 == 0, lst2)\n    odd\
    \ = filter(x -> x % 2 != 0, lst2)\n    \n    if length(even) == length(odd) \n\
    \        return \"NO\" \n    \n    even = filter(x -> x % 2 == 0, lst1)\n    odd\
    \ = filter(x -> x % 2 != 0, lst1)\n    \n    if length(even) == length(odd) \n\
    \        return \"NO\" \n    \n    even = filter(x -> x % 2 == 0, lst2)\n    odd\
    \ = filter(x -> x % 2 \nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\
    \t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpezashnm4.jl:86\nin expression starting at\
    \ /tmp/tmpezashnm4.jl:86\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp2jx6fljl.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2jx6fljl.jl:1\n\
    in expression starting at /tmp/tmp2jx6fljl.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpd740clk9.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpd740clk9.jl:1\n\
    in expression starting at /tmp/tmpd740clk9.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3s6d0dky.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3s6d0dky.jl:1\n\
    in expression starting at /tmp/tmp3s6d0dky.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwybyhxqt.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwybyhxqt.jl:1\n\
    in expression starting at /tmp/tmpwybyhxqt.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp5qd5n07f.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5qd5n07f.jl:1\n\
    in expression starting at /tmp/tmp5qd5n07f.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp91cvrb4e.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp91cvrb4e.jl:1\n\
    in expression starting at /tmp/tmp91cvrb4e.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    if length(lst1) == 0 || length(lst2)\
    \ == 0 \n        return \"NO\" \n    \n    even = lst1[2:end] \n    odd = lst1[1:end-1]\
    \ \n    \n    if length(even) == length(odd) \n        return \"NO\" \n    \n\
    \    even = even[findall(even .== 0)] \n    odd = odd[findall(odd .== 0)] \n \
    \   \n    if length(even) == length(odd) \n        return \"NO\" \n    \n    even\
    \ = even[findall(even .== 1)] \n    odd = odd[findall(odd .== 1)] \n    \n   \
    \ if length(even) == length(odd) \n        return \"NO\" \n    \n    even = even[findall(even\
    \ .== 2)] \n    odd = odd[findall(odd .== 2)] \n    \n    if length(even) == length(odd)\
    \ \n        return \"NO\" \n    \n    even = even[findall(even .== 3)] \n    odd\
    \ = odd[findall(odd .== 3)] \n    \n    if length(even) == length(odd) \n    \
    \    return \"NO\" \n    \n    even = even[findall(even .== 4)] \n    odd = odd[findall(odd\
    \ .== 4)] \n    \n    if length(even) == length(odd) \n        return \"NO\" \n\
    \    \n    even = even[findall(even .== 5)] \n    odd = odd[findall(odd .== 5)]\
    \ \n    \n    if length(even) == length(odd) \n        return \"NO\" \n    \n\
    \    even = even[findall(even .== 6)] \n    odd = odd[findall(odd .== 6)] \n \
    \   \n    if length(even) == length(odd) \n        return \"NO\" \n    \n    even\
    \ = even[findall(even .== 7)] \n    odd = odd[findall(odd .== 7)] \n    \n   \
    \ if length(even) == length(odd) \n        return \"NO\" \n    \n    even = even[findall(even\
    \ .== 8)] \n    odd = odd[findall(odd .== 8)] \n    \n    if length(even) == length(odd)\
    \ \n        return \"NO\" \n    \n    even = even[findall(even .== 9)] \n    odd\
    \ = odd[findall(odd .== 9)] \n    \n    if length(even) == length(odd) \n    \
    \    return \"NO\" \n    \n    even = even[findall(even .== 10)] \n    odd = odd[findall(odd\
    \ .== 10)] \n    \n    if length(even) == length(odd) \n        return \"NO\"\
    \ \n    \n    even = even[findall(even .== 11)] \n    odd = odd[findall(\nusing\
    \ Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3,\
    \ 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4])\
    \ == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"\
    NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t\
    @test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8rtjdlk6.jl:94\nin expression starting at\
    \ /tmp/tmp8rtjdlk6.jl:94\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqqy8jz1_.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqqy8jz1_.jl:1\n\
    in expression starting at /tmp/tmpqqy8jz1_.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpuvqo6861.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpuvqo6861.jl:1\n\
    in expression starting at /tmp/tmpuvqo6861.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmgh09mth.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmgh09mth.jl:1\n\
    in expression starting at /tmp/tmpmgh09mth.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpm9f1xl48.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpm9f1xl48.jl:1\n\
    in expression starting at /tmp/tmpm9f1xl48.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    even = filter(x -> x % 2 == 0, lst1)\n\
    \    odd = filter(x -> x % 2 != 0, lst1)\n    \n    if length(even) == length(odd)\
    \ \n        return \"NO\"\n    end\n    \n    even = filter(x -> x % 2 == 0, lst2)\n\
    \    odd = filter(x -> x % 2 != 0, lst2)\n    \n    if length(even) == length(odd)\
    \ \n        return \"NO\"\n    end\n    \n    even = filter(x -> x % 2 == 0, lst1)\n\
    \    odd = filter(x -> x % 2 != 0, lst1)\n    \n    if length(even) == length(odd)\
    \ \n        return \"NO\"\n    end\n    \n    even = filter(x -> x % 2 == 0, lst2)\n\
    \    odd = filter(x -> x % 2 != 0, lst2)\n    \n    if length(even) == length(odd)\
    \ \n        return \"NO\"\n    end\n    \n    even = filter(x -> x % 2 == 0, lst1)\n\
    \    odd = filter(x -> x % 2 != 0, lst1)\n    \n    if length(even) == length(odd)\
    \ \n        return \"NO\"\n    end\n    \n    even = filter(x -> x % 2 == 0, lst2)\n\
    \    odd = filter(x -> x % 2 != 0, lst2)\n    \n    if length(even) == length(odd)\
    \ \n        return \"NO\"\n    end\n    \n    even = filter(x -> x % 2 == 0, lst1)\n\
    \    odd = filter(x -> x % 2 != 0, lst1)\n    \n    if length(even) == length(odd)\
    \ \n        return \"NO\"\n    end\n    \n    even = filter(x -> x % 2 == 0, lst2)\n\
    \    odd = filter(x -> x % 2 != 0, lst2)\n    \n    if length(even) == length(odd)\
    \ \n        return \"NO\"\n    end\n    \n    even = filter(x -> x % 2 == 0, lst1)\n\
    \    odd = filter(x -> x % 2 != 0, lst1)\n    \n    if length(even) == length(odd)\
    \ \n        return \"NO\"\n    end\n    \n    even = filter(x -> x % 2 == 0, lst2)\n\
    \    odd = filter(x -> x % 2 != 0, lst2)\n    \n    if length(even) == length(odd)\
    \ \n        return \"NO\"\n    end\n    \n    even = filter(x -> x % 2 == 0, lst1)\n\
    \    odd = filter(x -> x % 2 != 0, lst1)\n    \n    if length(even) == length(odd)\
    \ \n        return \"NO\"\n    end\n    \n    even = filter(x -> x % 2 == 0, lst2)\n\
    \    od\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp62kpoelq.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp62kpoelq.jl:1\n\
    in expression starting at /tmp/tmp62kpoelq.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpknrbzkni.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpknrbzkni.jl:1\n\
    in expression starting at /tmp/tmpknrbzkni.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmzwpz7id.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmzwpz7id.jl:1\n\
    in expression starting at /tmp/tmpmzwpz7id.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpzbq2wng7.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzbq2wng7.jl:1\n\
    in expression starting at /tmp/tmpzbq2wng7.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    if length(lst1) != length(lst2) \n\
    \        return \"NO\" \n    \n    even = lst1[findall(x -> x % 2 == 0, lst1)]\n\
    \    odd = lst2[findall(x -> x % 2 != 0, lst2)]\n    \n    if length(even) ==\
    \ length(odd) \n        return \"NO\" \n    \n    even = sort(even)\n    odd =\
    \ sort(odd)\n    \n    if length(even) == length(odd) \n        return \"NO\"\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t\
    @test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpehkj_dwv.jl:1\nin expression starting at /tmp/tmpehkj_dwv.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpafee34g7.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpafee34g7.jl:1\n\
    in expression starting at /tmp/tmpafee34g7.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    even = filter(x -> x % 2 == 0, lst1)\n\
    \    odd = filter(x -> x % 2 != 0, lst1)\n    \n    if length(even) == length(odd)\
    \ \n        return \"NO\"\n    end\n    \n    even = filter(x -> x % 2 == 0, lst2)\n\
    \    odd = filter(x -> x % 2 != 0, lst2)\n    \n    if length(even) == length(odd)\
    \ \n        return \"NO\"\n    end\n    \n    even = filter(x -> x % 2 == 0, lst1)\n\
    \    odd = filter(x -> x % 2 != 0, lst1)\n    \n    if length(even) == length(odd)\
    \ \n        return \"NO\"\n    end\n    \n    even = filter(x -> x % 2 == 0, lst2)\n\
    \    odd = filter(x -> x % 2 != 0, lst2)\n    \n    if length(even) == length(odd)\
    \ \n        return \"NO\"\n    end\n    \n    even = filter(x -> x % 2 == 0, lst1)\n\
    \    odd = filter(x -> x % 2 != 0, lst1)\n    \n    if length(even) == length(odd)\
    \ \n        return \"NO\"\n    end\n    \n    even = filter(x -> x % 2 == 0, lst2)\n\
    \    odd = filter(x -> x % 2 != 0, lst2)\n    \n    if length(even) == length(odd)\
    \ \n        return \"NO\"\n    end\n    \n    even = filter(x -> x % 2 == 0, lst1)\n\
    \    odd = filter(x -> x % 2 != 0, lst1)\n    \n    if length(even) == length(odd)\
    \ \n        return \"NO\"\n    end\n    \n    even = filter(x -> x % 2 == 0, lst2)\n\
    \    odd = filter(x -> x % 2 != 0, lst2)\n    \n    if length(even) == length(odd)\
    \ \n        return \"NO\"\n    end\n    \n    even = filter(x -> x % 2 == 0, lst1)\n\
    \    odd = filter(x -> x % 2 != 0, lst1)\n    \n    if length(even) == length(odd)\
    \ \n        return \"NO\"\n    end\n    \n    even = filter(x -> x % 2 == 0, lst2)\n\
    \    odd = filter(x -> x % 2 != 0, lst2)\n    \n    if length(even) == length(odd)\
    \ \n        return \"NO\"\n    end\n    \n    even = filter(x -> x % 2 == 0, lst1)\n\
    \    odd = filter(x -> x % 2 != 0, lst1)\n    \n    if length(even) == length(odd)\
    \ \n        return \"NO\"\n    end\n    \n    even = filter(x -> x % 2 == 0, lst2)\n\
    \    od\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp74b5ebmr.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp74b5ebmr.jl:1\n\
    in expression starting at /tmp/tmp74b5ebmr.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp15x001fa.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp15x001fa.jl:1\n\
    in expression starting at /tmp/tmp15x001fa.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjr84qy4e.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjr84qy4e.jl:1\n\
    in expression starting at /tmp/tmpjr84qy4e.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    even = filter(x -> x % 2 == 0, lst1)\n\
    \    odd = filter(x -> x % 2 != 0, lst1)\n    \n    if length(even) == length(odd)\
    \ == length(lst1)\n        return \"YES\"\n    else\n        return \"NO\"\n \
    \   end\nend\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2,\
    \ 3, 4])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 5, 3,\
    \ 4])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 4,\
    \ 5])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 4,\
    \ 5])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 4,\
    \ 5])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 4,\
    \ 5])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 4,\
    \ 5])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 4,\
    \ 5])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 4,\
    \ 5])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 4,\
    \ 5])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 4,\
    \ 5])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 4,\
    \ 5])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 4,\
    \ 5])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 4,\
    \ 5])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 4,\
    \ 5])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 4,\
    \ 5])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 4,\
    \ 5])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 4,\
    \ 5])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 4,\
    \ 5])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 4,\
    \ 5])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 4,\
    \ 5])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 4,\
    \ 5])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 4,\
    \ 5])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 4,\
    \ 5])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 4,\
    \ 5])\n</cell>\n<code language=\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\
    \t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp245i0kqt.jl:24\nin expression starting at\
    \ /tmp/tmp245i0kqt.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    even = lst1[findall(x -> x % 2 == 0,\
    \ lst1)]\n    odd = lst2[findall(x -> x % 2 != 0, lst2)]\n    \n    if length(even)\
    \ == length(odd) && length(even) == length(lst1) && length(odd) == length(lst2)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 4])\n</cell>\n<code\
    \ language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 5, 3, 4])\n</cell>\n<code language=julia-1.5>\n\
    exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6])\n</cell>\n<code language=julia-1.5>\n\
    exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7])\n</cell>\n<code language=julia-1.5>\n\
    exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8])\n</cell>\n<code language=julia-1.5>\n\
    exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9])\n</cell>\n<code language=julia-1.5>\n\
    exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n</cell>\n<code language=julia-1.5>\n\
    exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n</cell>\n<code language=julia-1.5>\n\
    exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n</cell>\n<code\
    \ language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n</cell>\n<code language=julia-1.5>\n\
    exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n\
    </cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n</cell>\n<code language=julia-1.5>\n\
    exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,\
    \ 17])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n</cell>\n<code language=julia-1.5>\n\
    exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,\
    \ 17, 18, 19])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n</cell>\n\
    <code language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11, 12, 13, 14, 15, \nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\
    \t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdc_clg7z.jl:24\nin expression starting at\
    \ /tmp/tmpdc_clg7z.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpktp3cfff.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpktp3cfff.jl:1\n\
    in expression starting at /tmp/tmpktp3cfff.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpecrwb_yx.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpecrwb_yx.jl:1\n\
    in expression starting at /tmp/tmpecrwb_yx.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    even = lst1[findall(x -> x % 2 == 0,\
    \ lst1)]\n    odd = lst2[findall(x -> x % 2 != 0, lst2)]\n    \n    if length(even)\
    \ == length(odd) \n        return \"NO\"\n    end\n    \n    even = sort(even)\n\
    \    odd = sort(odd)\n    \n    if length(even) == length(odd) \n        return\
    \ \"NO\"\n    end\n    \n    even = unique(even)\n    odd = unique(odd)\n    \n\
    \    if length(even) == length(odd) \n        return \"NO\"\n    end\n    \n \
    \   even = union(even, odd)\n    \n    if length(even) == length(odd) \n     \
    \   return \"NO\"\n    end\n    \n    even = sort(even)\n    odd = sort(odd)\n\
    \    \n    if length(even) == length(odd) \n        return \"NO\"\n    end\n \
    \   \n    even = unique(even)\n    odd = unique(odd)\n    \n    if length(even)\
    \ == length(odd) \n        return \"NO\"\n    end\n    \n    even = union(even,\
    \ odd)\n    \n    if length(even) == length(odd) \n        return \"NO\"\n   \
    \ end\n    \n    even = sort(even)\n    odd = sort(odd)\n    \n    if length(even)\
    \ == length(odd) \n        return \"NO\"\n    end\n    \n    even = unique(even)\n\
    \    odd = unique(odd)\n    \n    if length(even) == length(odd) \n        return\
    \ \"NO\"\n    end\n    \n    even = union(even, odd)\n    \n    if length(even)\
    \ == length(odd) \n        return \"NO\"\n    end\n    \n    even = sort(even)\n\
    \    odd = sort(odd)\n    \n    if length(even) == length(odd) \n        return\
    \ \"NO\"\n    end\n    \n    even = unique(even)\n    odd = unique(odd)\n    \n\
    \    if length(even) == length(odd) \n        return \"NO\"\n    end\n    \n \
    \   even = union(even, odd)\n    \n    if length(even) == length(odd) \n     \
    \   return \"NO\"\n    end\n    \n    even = sort(even)\n    odd = sort(odd)\n\
    \    \n    if length(even) == length(odd) \n        return \"NO\"\n    end\n \
    \   \n    even = unique(even)\n    odd = unique(odd)\n    \n    if length(even)\
    \ == length(odd) \n        return \"NO\"\n    end\n    \n    even = union(even,\
    \ odd)\n    \n    if length(even) == length(odd) \n        return \"NO\"\n   \
    \ end\n    \n    even = sort(even)\nusing Test\n\n@testset begin\n\ncandidate\
    \ = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmprxbejh4h.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprxbejh4h.jl:1\n\
    in expression starting at /tmp/tmprxbejh4h.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpb7arldrv.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpb7arldrv.jl:1\n\
    in expression starting at /tmp/tmpb7arldrv.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpzdbebuxn.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzdbebuxn.jl:1\n\
    in expression starting at /tmp/tmpzdbebuxn.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3irvm0ma.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3irvm0ma.jl:1\n\
    in expression starting at /tmp/tmp3irvm0ma.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    if length(lst1) != length(lst2)\n \
    \       return \"NO\"\n    end\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\
    \t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp69g38k58.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp69g38k58.jl:1\n\
    in expression starting at /tmp/tmp69g38k58.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    if length(lst1) != length(lst2)\n \
    \       return \"NO\"\n    end\n    \n    even = Int64[]\n    odd = Int64[]\n\
    \    \n    for i in 1:length(lst1)\n        if mod(lst1[i], 2) == 0\n        \
    \    push!(even, lst1[i])\n        else\n            push!(odd, lst1[i])\n   \
    \     end\n    end\n    \n    for i in 1:length(lst2)\n        if mod(lst2[i],\
    \ 2) == 0\n            push!(even, lst2[i])\n        else\n            push!(odd,\
    \ lst2[i])\n        end\n    end\n    \n    if length(even) == length(odd)\n \
    \       return \"YES\"\n    else\n        return \"NO\"\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 4])\n</cell>\n<code\
    \ language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 5, 3, 4])\n</cell>\n<text>\n\
    Problem 3\nWrite a function that takes two vectors of numbers, and determines\
    \ whether it is possible to perform a binary operation between them.\n    There\
    \ is no limit on the number of binary operations between vectors.\n    If it is\
    \ possible to perform a binary operation between vectors to make all the elements\
    \ of vector1 to be equal to vector2, return \"YES\".\n    Otherwise, return \"\
    NO\".\n    For example:\n    binaryOperation([1, 1, 1], [1, 1, 1]) => \"YES\"\n\
    \    binaryOperation([1, 1, 1], [1, 1, 2]) => \"NO\"\n    It is assumed that the\
    \ input vectors will be non-empty.\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp504u8vft.jl:44\nin expression starting at\
    \ /tmp/tmp504u8vft.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpa46ed588.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpa46ed588.jl:1\n\
    in expression starting at /tmp/tmpa46ed588.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    even = lst1[2:end] .== lst2[1:end-1]\n\
    \    even = even .& (lst1[2:end] .== lst2[2:end])\n    even = even .& (lst1[2:end]\
    \ .== lst2[1:end-1])\n    even = even .& (lst1[2:end] .== lst2[2:end])\n    even\
    \ = even .& (lst1[2:end] .== lst2[1:end-1])\n    even = even .& (lst1[2:end] .==\
    \ lst2[2:end])\n    even = even .& (lst1[2:end] .== lst2[1:end-1])\n    even =\
    \ even .& (lst1[2:end] .== lst2[2:end])\n    even = even .& (lst1[2:end] .== lst2[1:end-1])\n\
    \    even = even .& (lst1[2:end] .== lst2[2:end])\n    even = even .& (lst1[2:end]\
    \ .== lst2[1:end-1])\n    even = even .& (lst1[2:end] .== lst2[2:end])\n    even\
    \ = even .& (lst1[2:end] .== lst2[1:end-1])\n    even = even .& (lst1[2:end] .==\
    \ lst2[2:end])\n    even = even .& (lst1[2:end] .== lst2[1:end-1])\n    even =\
    \ even .& (lst1[2:end] .== lst2[2:end])\n    even = even .& (lst1[2:end] .== lst2[1:end-1])\n\
    \    even = even .& (lst1[2:end] .== lst2[2:end])\n    even = even .& (lst1[2:end]\
    \ .== lst2[1:end-1])\n    even = even .& (lst1[2:end] .== lst2[2:end])\n    even\
    \ = even .& (lst1[2:end] .== lst2[1:end-1])\n    even = even .& (lst1[2:end] .==\
    \ lst2[2:end])\n    even = even .& (lst1[2:end] .== lst2[1:end-1])\n    even =\
    \ even .& (lst1[2:end] .== lst2[2:end])\n    even = even .& (lst1[2:end] .== lst2[1:end-1])\n\
    \    even = even .& (lst1[2:end] .== lst2[2:end])\n    even = even .& (lst1[2:end]\
    \ .== lst2[1:end-1])\n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\
    \t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7i8lxl22.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7i8lxl22.jl:1\n\
    in expression starting at /tmp/tmp7i8lxl22.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp5wfy6sp4.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5wfy6sp4.jl:1\n\
    in expression starting at /tmp/tmp5wfy6sp4.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    even = lst1[2:end] .== lst2[1:end-1]\n\
    \    even = even .& (lst1[2:end] .== lst2[2:end])\n    even = even .& (lst1[2:end]\
    \ .== lst2[1:end-1])\n    even = even .& (lst1[2:end] .== lst2[2:end])\n    even\
    \ = even .& (lst1[2:end] .== lst2[1:end-1])\n    even = even .& (lst1[2:end] .==\
    \ lst2[2:end])\n    even = even .& (lst1[2:end] .== lst2[1:end-1])\n    even =\
    \ even .& (lst1[2:end] .== lst2[2:end])\n    even = even .& (lst1[2:end] .== lst2[1:end-1])\n\
    \    even = even .& (lst1[2:end] .== lst2[2:end])\n    even = even .& (lst1[2:end]\
    \ .== lst2[1:end-1])\n    even = even .& (lst1[2:end] .== lst2[2:end])\n    even\
    \ = even .& (lst1[2:end] .== lst2[1:end-1])\n    even = even .& (lst1[2:end] .==\
    \ lst2[2:end])\n    even = even .& (lst1[2:end] .== lst2[1:end-1])\n    even =\
    \ even .& (lst1[2:end] .== lst2[2:end])\n    even = even .& (lst1[2:end] .== lst2[1:end-1])\n\
    \    even = even .& (lst1[2:end] .== lst2[2:end])\n    even = even .& (lst1[2:end]\
    \ .== lst2[1:end-1])\n    even = even .& (lst1[2:end] .== lst2[2:end])\n    even\
    \ = even .& (lst1[2:end] .== lst2[1:end-1])\n    even = even .& (lst1[2:end] .==\
    \ lst2[2:end])\n    even = even .& (lst1[2:end] .== lst2[1:end-1])\n    even =\
    \ even .& (lst1[2:end] .== lst2[2:end])\n    even = even .& (lst1[2:end] .== lst2[1:end-1])\n\
    \    even = even .& (lst1[2:end] .== lst2[2:end])\n    even = even .& (lst1[2:end]\
    \ .== lst2[1:end-1])\n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\
    \t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpuhrl8e5z.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpuhrl8e5z.jl:1\n\
    in expression starting at /tmp/tmpuhrl8e5z.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp2258qcd3.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2258qcd3.jl:1\n\
    in expression starting at /tmp/tmp2258qcd3.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    even = lst1[findall(x -> x % 2 == 0,\
    \ lst1)]\n    odd = lst2[findall(x -> x % 2 != 0, lst2)]\n    \n    if length(even)\
    \ == length(odd) \n        return \"NO\"\n    end\n    \n    even = sort(even)\n\
    \    odd = sort(odd)\n    \n    if length(even) == length(odd) \n        return\
    \ \"NO\"\n    end\n    \n    if length(even) > length(odd) \n        return \"\
    NO\"\n    end\n    \n    if length(even) < length(odd) \n        return \"YES\"\
    \n    end\n    \n    if even[1] == odd[1]\n        return \"YES\"\n    end\n \
    \   \n    if even[end] == odd[end]\n        return \"YES\"\n    end\n    \n  \
    \  if even[end] == odd[1]\n        return \"NO\"\n    end\n    \n    if even[1]\
    \ == odd[end]\n        return \"NO\"\n    end\n    \nend\n</cell>\n<code language=julia-1.5>\n\
    exchange([1, 2, 3, 4], [1, 2, 3, 4])\n</cell>\n<code language=julia-1.5>\nexchange([1,\
    \ 2, 3, 4], [1, 5, 3, 4])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2,\
    \ 3, 4], [1, 2, 5, 4])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3,\
    \ 4], [1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4],\
    \ [1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1,\
    \ 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2,\
    \ 4, 5])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 4,\
    \ 5])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 4, 5])\n\
    </cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 4, 5])\n</cell>\n\
    <code language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    exchange([1, 2, 3, 4], [1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nexchange([1,\
    \ 2, 3, 4], [1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2,\
    \ 3, 4], [1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3,\
    \ 4], [1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4],\
    \ [1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1,\
    \ 2, 4, 5])\n</cell>\n<code language=julia-1.5\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy_31lgcl.jl:54\nin expression starting at\
    \ /tmp/tmpy_31lgcl.jl:54\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp1kq3gad4.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1kq3gad4.jl:1\n\
    in expression starting at /tmp/tmp1kq3gad4.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    even = lst1[findall(x -> x % 2 == 0,\
    \ lst1)]\n    odd = lst2[findall(x -> x % 2 != 0, lst2)]\n    \n    if length(even)\
    \ == length(odd) \n        return \"NO\"\n    end\n    \n    for i in eachindex(even)\n\
    \        if even[i] > odd[i]\n            return \"NO\"\n        end\n    end\n\
    \    \n    for i in eachindex(odd)\n        if odd[i] > even[i]\n            return\
    \ \"NO\"\n        end\n    end\n    \n    return \"YES\"\nend\n</cell>\n<code\
    \ language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 4])\n</cell>\n<code language=julia-1.5>\n\
    exchange([1, 2, 3, 4], [1, 5, 3, 4])\n</cell>\n<code language=julia-1.5>\nexchange([1,\
    \ 2, 3, 4], [1, 2, 3, 4, 5, 6])\n</cell>\n<code language=julia-1.5>\nexchange([1,\
    \ 2, 3, 4], [1, 2, 3, 4, 5, 6, 7])\n</cell>\n<code language=julia-1.5>\nexchange([1,\
    \ 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8])\n</cell>\n<code language=julia-1.5>\nexchange([1,\
    \ 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9])\n</cell>\n<code language=julia-1.5>\n\
    exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n</cell>\n<code language=julia-1.5>\n\
    exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n</cell>\n<code language=julia-1.5>\n\
    exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n</cell>\n<code\
    \ language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n</cell>\n<code language=julia-1.5>\n\
    exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n\
    </cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n</cell>\n<code language=julia-1.5>\n\
    exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,\
    \ 17])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n</cell>\n<code language=julia-1.5>\n\
    exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,\
    \ 17, 18, 19])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\
    \t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_3qj_jwu.jl:36\nin expression starting at\
    \ /tmp/tmp_3qj_jwu.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpk69ucklh.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk69ucklh.jl:1\n\
    in expression starting at /tmp/tmpk69ucklh.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0n7dv0ge.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0n7dv0ge.jl:1\n\
    in expression starting at /tmp/tmp0n7dv0ge.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    even = lst1[findall(x -> x % 2 == 0,\
    \ lst1)]\n    odd = lst2[findall(x -> x % 2 != 0, lst2)]\n    \n    if length(even)\
    \ == length(odd) \n        return \"NO\"\n    elseif length(even) > length(odd)\
    \ \n        return \"YES\"\n    elseif length(even) < length(odd) \n        return\
    \ \"NO\"\n    end\nend\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3,\
    \ 4], [1, 2, 3, 4])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4])\n</cell>\n<text>\nProblem 3\nWrite a function that takes two vectors\
    \ of numbers, and determines whether it is possible to perform an exchange of\
    \ elements\nbetween them to make lst1 a list of only even numbers.\nThere is no\
    \ limit on the number of exchanged elements between lst1 and lst2.\nIf it is possible\
    \ to exchange elements between the lst1 and lst2 to make\nall the elements of\
    \ lst1 to be even, return \"YES\".\nOtherwise, return \"NO\".\nFor example:\n\
    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\nexchange([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) => \"NO\"\nIt is assumed that the input lists will be non-empty.\nHint:\
    \ You can use the function exchange.\nHint: You can use the function length.\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsmenlqwu.jl:26\nin expression starting at\
    \ /tmp/tmpsmenlqwu.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp1sjsabmb.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1sjsabmb.jl:1\n\
    in expression starting at /tmp/tmp1sjsabmb.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp95l7ff_k.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp95l7ff_k.jl:1\n\
    in expression starting at /tmp/tmp95l7ff_k.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp1_ww5m6_.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1_ww5m6_.jl:1\n\
    in expression starting at /tmp/tmp1_ww5m6_.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmprxy5m706.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprxy5m706.jl:1\n\
    in expression starting at /tmp/tmprxy5m706.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpt482dabh.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpt482dabh.jl:1\n\
    in expression starting at /tmp/tmpt482dabh.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    if length(lst1) != length(lst2)\n \
    \       return \"NO\"\n    end\n    \n    even = filter(x -> x % 2 == 0, lst1)\n\
    \    odd = filter(x -> x % 2 != 0, lst1)\n    \n    if length(even) == length(odd)\n\
    \        return \"NO\"\n    end\n    \n    even = filter(x -> x % 2 == 0, lst2)\n\
    \    odd = filter(x -> x % 2 != 0, lst2)\n    \n    if length(even) == length(odd)\n\
    \        return \"NO\"\n    end\n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpygzaldkx.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpygzaldkx.jl:1\n\
    in expression starting at /tmp/tmpygzaldkx.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjrow77w0.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjrow77w0.jl:1\n\
    in expression starting at /tmp/tmpjrow77w0.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpk8gjyc4j.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk8gjyc4j.jl:1\n\
    in expression starting at /tmp/tmpk8gjyc4j.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    even = lst1[2:end] .== lst2[1:end-1]\n\
    \    even = even .& (lst1[2:end] .== lst2[2:end])\n    even = even .& (lst1[2:end]\
    \ .== lst2[1:end-1])\n    even = even .& (lst1[2:end] .== lst2[2:end])\n    even\
    \ = even .& (lst1[2:end] .== lst2[1:end-1])\n    even = even .& (lst1[2:end] .==\
    \ lst2[2:end])\n    even = even .& (lst1[2:end] .== lst2[1:end-1])\n    even =\
    \ even .& (lst1[2:end] .== lst2[2:end])\n    even = even .& (lst1[2:end] .== lst2[1:end-1])\n\
    \    even = even .& (lst1[2:end] .== lst2[2:end])\n    even = even .& (lst1[2:end]\
    \ .== lst2[1:end-1])\n    even = even .& (lst1[2:end] .== lst2[2:end])\n    even\
    \ = even .& (lst1[2:end] .== lst2[1:end-1])\n    even = even .& (lst1[2:end] .==\
    \ lst2[2:end])\n    even = even .& (lst1[2:end] .== lst2[1:end-1])\n    even =\
    \ even .& (lst1[2:end] .== lst2[2:end])\n    even = even .& (lst1[2:end] .== lst2[1:end-1])\n\
    \    even = even .& (lst1[2:end] .== lst2[2:end])\n    even = even .& (lst1[2:end]\
    \ .== lst2[1:end-1])\n    even = even .& (lst1[2:end] .== lst2[2:end])\n    even\
    \ = even .& (lst1[2:end] .== lst2[1:end-1])\n    even = even .& (lst1[2:end] .==\
    \ lst2[2:end])\n    even = even .& (lst1[2:end] .== lst2[1:end-1])\n    even =\
    \ even .& (lst1[2:end] .== lst2[2:end])\n    even = even .& (lst1[2:end] .== lst2[1:end-1])\n\
    \    even = even .& (lst1[2:end] .== lst2[2:end])\n    even = even .& (lst1[2:end]\
    \ .== lst2[1:end-1])\n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\
    \t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp4suib04u.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4suib04u.jl:1\n\
    in expression starting at /tmp/tmp4suib04u.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwwqy2ff1.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwwqy2ff1.jl:1\n\
    in expression starting at /tmp/tmpwwqy2ff1.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpsblkalth.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsblkalth.jl:1\n\
    in expression starting at /tmp/tmpsblkalth.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp4mtbpgrv.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4mtbpgrv.jl:1\n\
    in expression starting at /tmp/tmp4mtbpgrv.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    if length(lst1) != length(lst2)\n \
    \       return \"NO\"\n    end\n    \n    even = Int64[]\n    \n    for i in 1:length(lst1)\n\
    \        if lst1[i] % 2 == 0 && lst2[i] % 2 == 0\n            push!(even, lst1[i])\n\
    \            push!(even, lst2[i])\n        end\n    end\n    \n    if length(even)\
    \ == length(lst1)\n        return \"YES\"\n    end\n    \n    return \"NO\"\n\
    end\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 4])\n\
    </cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 5, 3, 4])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes two lists of numbers, and determines\
    \ whether it is possible to perform an exchange of elements\nbetween them to make\
    \ lst1 a list of only odd numbers.\n    There is no limit on the number of exchanged\
    \ elements between lst1 and lst2.\n    If it is possible to exchange elements\
    \ between the lst1 and lst2 to make\n    all the elements of lst1 to be odd, return\
    \ \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4])\
    \ => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\
    \"\"\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0kgjrise.jl:34\nin expression starting at\
    \ /tmp/tmp0kgjrise.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwzdej88h.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwzdej88h.jl:1\n\
    in expression starting at /tmp/tmpwzdej88h.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7kdov5cc.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7kdov5cc.jl:1\n\
    in expression starting at /tmp/tmp7kdov5cc.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjhhrsu2t.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjhhrsu2t.jl:1\n\
    in expression starting at /tmp/tmpjhhrsu2t.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6h_ei9zd.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6h_ei9zd.jl:1\n\
    in expression starting at /tmp/tmp6h_ei9zd.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpg8y2wby2.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpg8y2wby2.jl:1\n\
    in expression starting at /tmp/tmpg8y2wby2.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpr6ol_597.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpr6ol_597.jl:1\n\
    in expression starting at /tmp/tmpr6ol_597.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpj6xbk207.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpj6xbk207.jl:1\n\
    in expression starting at /tmp/tmpj6xbk207.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpeouu3cga.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpeouu3cga.jl:1\n\
    in expression starting at /tmp/tmpeouu3cga.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp4q1ft8db.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4q1ft8db.jl:1\n\
    in expression starting at /tmp/tmp4q1ft8db.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp8xif9ki0.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8xif9ki0.jl:1\n\
    in expression starting at /tmp/tmp8xif9ki0.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    even = lst1[findall(x -> x % 2 == 0,\
    \ lst1)]\n    odd = lst2[findall(x -> x % 2 != 0, lst2)]\n    \n    if length(even)\
    \ == length(odd) && length(even) == length(lst1)\n        return \"YES\"\n   \
    \ else\n        return \"NO\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    exchange([1, 2, 3, 4], [1, 2, 3, 4])\n</cell>\n<code language=julia-1.5>\nexchange([1,\
    \ 2, 3, 4], [1, 5, 3, 4])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2,\
    \ 3, 4], [1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2,\
    \ 3, 4], [1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2,\
    \ 3, 4], [1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2,\
    \ 3, 4], [1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2,\
    \ 3, 4], [1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2,\
    \ 3, 4], [1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2,\
    \ 3, 4], [1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2,\
    \ 3, 4], [1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2,\
    \ 3, 4], [1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2,\
    \ 3, 4], [1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2,\
    \ 3, 4], [1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2,\
    \ 3, 4], [1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2,\
    \ 3, 4], [1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2,\
    \ 3, 4], [1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2,\
    \ 3, 4], [1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2,\
    \ 3, 4], [1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2,\
    \ 3, 4], [1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2,\
    \ 3, 4], [1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2,\
    \ 3, 4], [1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2,\
    \ 3, 4], [1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2,\
    \ 3, 4], [1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2,\
    \ 3, 4], [1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2,\
    \ 3, 4], [1, 2, 3, 4, \nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\
    \t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpii5g4a98.jl:24\nin expression starting at\
    \ /tmp/tmpii5g4a98.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpzf6758oi.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzf6758oi.jl:1\n\
    in expression starting at /tmp/tmpzf6758oi.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp25pi9h30.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp25pi9h30.jl:1\n\
    in expression starting at /tmp/tmp25pi9h30.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    if length(lst1) != length(lst2)\n \
    \       return \"NO\"\n    end\n    \n    even = filter(x -> x % 2 == 0, lst1)\n\
    \    odd = filter(x -> x % 2 != 0, lst2)\n    \n    if length(even) == length(odd)\n\
    \        return \"NO\"\n    end\n    \n    even = sort(even)\n    odd = sort(odd)\n\
    \    \n    if length(even) == length(odd)\n        return \"NO\"\n    end\n  \
    \  \n    i = 0\n    j = 0\n    \n    while i < length(even) && j < length(odd)\n\
    \        if even[i] < odd[j]\n            even[i] = even[i] + 2\n            i\
    \ = i + 1\n        elseif even[i] > odd[j]\n            even[i] = even[i] - 2\n\
    \            i = i + 1\n        else\n            odd[j] = odd[j] + 2\n      \
    \      j = j + 1\n        end\n    end\n    \n    if i == length(even)\n     \
    \   return \"YES\"\n    elseif j == length(odd)\n        return \"YES\"\n    end\n\
    \    \n    return \"NO\"\nend\n</cell>\n<code language=julia-1.5>\nexchange([1,2,3,4,5],\
    \ [1,2,3,4,5])\n</cell>\n<code language=julia-1.5>\nexchange([1,2,3,4,5], [1,5,3,4,5])\n\
    </cell>\n<code language=julia-1.5>\nexchange([1,2,3,4,5], [1,5,3,4,5])\n</cell>\n\
    <code language=julia-1.5>\nexchange([1,2,3,4,5], [1,2,3,4,5])\n</cell>\n<code\
    \ language=julia-1.5>\nexchange([1,2,3,4,5], [1,2,3,4,5])\n</cell>\n<code language=julia-1.5>\n\
    exchange([1,2,3,4,5], [1,2,3,4,5])\n</cell>\n<code language=julia-1.5>\nexchange([1,2,3,4,5],\
    \ [1,2,3,4,5])\n</cell>\n<code language=julia-1.5>\nexchange([1,2,3,4,5], [1,2,3,4,5])\n\
    </cell>\n<code language=julia-1.5>\nexchange([1,2,3,4,5], [1,2,3,4,5])\n</cell>\n\
    <code language=julia-1.5>\nexchange([1,2,3,4,5], [1,2,3,4,5])\n</cell>\n<code\
    \ language=julia-1.5>\nexchange([1,2,3,4,5], [1,2,3,4,5])\n</cell>\n<code language=julia-1.5>\n\
    exchange([1,2,3,4,5], [1,2,3,4,5])\n</cell>\n<code language=julia-1.5>\nexchange([1,2,3,4,5],\
    \ [1,2,3,4,5])\n</cell>\n<code language=julia-1.5>\nexchange([1,2,3,4,5], [1,2,3,4,5])\n\
    </cell>\n<code language=julia-1.5>\nexchange([1,2,3,4,5], [1,2,3,4,5])\n</cell>\n\
    \nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf3i03hut.jl:57\nin expression starting at\
    \ /tmp/tmpf3i03hut.jl:57\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwiu0j3ru.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwiu0j3ru.jl:1\n\
    in expression starting at /tmp/tmpwiu0j3ru.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    if length(lst1) != length(lst2)\n \
    \       return \"NO\"\n    end\n    \n    even = filter(x -> x % 2 == 0, lst1)\n\
    \    odd = filter(x -> x % 2 != 0, lst2)\n    \n    if length(even) == length(odd)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 4])\n</cell>\n<code\
    \ language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 5, 3, 4])\n</cell>\n<text>\n\
    Problem 7\nWrite a function that takes a vector of integers and returns a vector\
    \ of integers where the integers are the squares of the integers in the original\
    \ vector. For example, if the input vector is [4, 9, 16, 25], then the output\
    \ vector should be [16, 25, 64, 125]. The input vector will be modified.\nFor\
    \ example, if the input vector is [4, 9, 16, 25], then the output vector should\
    \ be [16, 25, 64, 125]. The input vector will be modified.\nFor example, if the\
    \ input vector is [4, 9, 16, 25], then the output vector should be [16, 25, 64,\
    \ 125]. The input vector will be modified.\nFor example, if the input vector is\
    \ [4, 9, 16, 25], then the output vector should be [16, 25, 64, 125]. The input\
    \ vector will be modified.\nFor example, if the input vector is [4, 9, 16, 25],\
    \ then the output vector should be [16, 25, 64, 125]. The input vector will be\
    \ modified.\nFor example, if the input vector is [4, 9, 16, 25], then the output\
    \ vector should be [16, 25, 64, 125]. The input vector will be modified.\nFor\
    \ example, if the input vector is [4, 9, 16, 25], then the output vector should\
    \ be [16, 25, 64, 125]. The input vector will be modified.\nFor example, if the\
    \ input vector is [4, 9, 16, 25], then the output vector should be [16, 25, 64,\
    \ 125]. The input vector will be modified.\nFor example, if the input vector is\
    \ [4, 9, 16, 25], then the output vector should be [16, 25, 64, 125]. The input\
    \ vector will be modified.\nFor example, if the input vector is [4, 9, 16, 25],\
    \ then the output vector should be [16, 25, 64, 125]. The input vector will be\
    \ modified.\nFor example, if the input vector is [4, 9, 16, 25], then the output\
    \ vector should be [16, 25, 64, 125]. The input vector will be modified.\nFor\
    \ example, if the input vector is [4, 9, 16, 25], then the output vector should\
    \ be [16, 25, 64, 125]. The input vector will be modified.\nFor example, if the\
    \ input vector is [4, 9, 16, 25], then the output vector should be [16, 25, 64,\
    \ 125]. The input vector will be modified.\nFor example, if the input vector is\
    \ [4, 9, 16, 25\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplwv49bto.jl:28\nin expression starting at\
    \ /tmp/tmplwv49bto.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    even = lst1[findall(x -> x % 2 == 0,\
    \ lst1)]\n    odd = lst2[findall(x -> x % 2 != 0, lst2)]\n    \n    if length(even)\
    \ == length(odd) \n        return \"NO\"\n    elseif length(even) > length(odd)\
    \ \n        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 4])\n</cell>\n<code\
    \ language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 5, 3, 4])\n</cell>\n<text>\n\
    Problem 8\nWrite a function called is_palindrome that takes one integer and returns\
    \ true if the integer is a palindrome, and false otherwise.\nFor example, 5 is\
    \ a palindrome, but 532 is not a palindrome.\nHint: You can use the function reverse\
    \ to reverse a string.\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\
    \t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9nx85jm5.jl:26\nin expression starting at\
    \ /tmp/tmp9nx85jm5.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn5527j8p.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn5527j8p.jl:1\n\
    in expression starting at /tmp/tmpn5527j8p.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6xsc2k3w.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6xsc2k3w.jl:1\n\
    in expression starting at /tmp/tmp6xsc2k3w.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpq33qy4cc.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpq33qy4cc.jl:1\n\
    in expression starting at /tmp/tmpq33qy4cc.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpr1yte38h.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpr1yte38h.jl:1\n\
    in expression starting at /tmp/tmpr1yte38h.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdtudotm2.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdtudotm2.jl:1\n\
    in expression starting at /tmp/tmpdtudotm2.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmptfyd8cj9.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptfyd8cj9.jl:1\n\
    in expression starting at /tmp/tmptfyd8cj9.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpcpyglwzg.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcpyglwzg.jl:1\n\
    in expression starting at /tmp/tmpcpyglwzg.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpl1y4i7ho.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpl1y4i7ho.jl:1\n\
    in expression starting at /tmp/tmpl1y4i7ho.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpe22v00ir.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpe22v00ir.jl:1\n\
    in expression starting at /tmp/tmpe22v00ir.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpf9mpmmyq.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpf9mpmmyq.jl:1\n\
    in expression starting at /tmp/tmpf9mpmmyq.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    even = lst1[2:end] .== lst2[1:end-1]\n\
    \    even = even .* lst1[2:end] .== lst2[1:end-1]\n    even = even .* lst1[2:end]\
    \ .== lst2[1:end-1]\n    even = even .* lst1[2:end] .== lst2[1:end-1]\n    even\
    \ = even .* lst1[2:end] .== lst2[1:end-1]\n    even = even .* lst1[2:end] .==\
    \ lst2[1:end-1]\n    even = even .* lst1[2:end] .== lst2[1:end-1]\n    even =\
    \ even .* lst1[2:end] .== lst2[1:end-1]\n    even = even .* lst1[2:end] .== lst2[1:end-1]\n\
    \    even = even .* lst1[2:end] .== lst2[1:end-1]\n    even = even .* lst1[2:end]\
    \ .== lst2[1:end-1]\n    even = even .* lst1[2:end] .== lst2[1:end-1]\n    even\
    \ = even .* lst1[2:end] .== lst2[1:end-1]\n    even = even .* lst1[2:end] .==\
    \ lst2[1:end-1]\n    even = even .* lst1[2:end] .== lst2[1:end-1]\n    even =\
    \ even .* lst1[2:end] .== lst2[1:end-1]\n    even = even .* lst1[2:end] .== lst2[1:end-1]\n\
    \    even = even .* lst1[2:end] .== lst2[1:end-1]\n    even = even .* lst1[2:end]\
    \ .== lst2[1:end-1]\n    even = even .* lst1[2:end] .== lst2[1:end-1]\n    even\
    \ = even .* lst1[2:end] .== lst2[1:end-1]\n    even = even .* lst1[2:end] .==\
    \ lst2[1:end-1]\n    even = even .* lst1[2:end] .== lst2[1:end-1]\n    even =\
    \ even .* lst1[2:end] .== lst2[1:end-1]\n    even = even .* lst1[2:end] .== lst2[1:end-1]\n\
    \    even = even .* lst1[2:end] .== lst2[1:end-1]\n    even = even .* lst1[2:end]\
    \ .== lst2[1:end-1]\n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\
    \t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyktseibi.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyktseibi.jl:1\n\
    in expression starting at /tmp/tmpyktseibi.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    if length(lst1) == 0 || length(lst2)\
    \ == 0 \n        return \"NO\"\n    end\n    \n    even = lst1[end] % 2 == 0\n\
    \    \n    if even \n        lst1[end] = lst1[end] % 2\n        lst2[end] = lst2[end]\
    \ % 2\n    end\n    \n    if length(lst1) > length(lst2)\n        lst1 = lst1[end+1:end]\n\
    \        lst2 = lst2[end+1:end]\n    end\n    \n    if length(lst1) < length(lst2)\n\
    \        lst1 = lst1[end+1:end]\n        lst2 = lst2[end+1:end]\n    end\n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nusing Test\n\n@testset\
    \ begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4])\
    \ == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpooe4rn4j.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpooe4rn4j.jl:1\n\
    in expression starting at /tmp/tmpooe4rn4j.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpfkeotv6k.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfkeotv6k.jl:1\n\
    in expression starting at /tmp/tmpfkeotv6k.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpk4d7whl6.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk4d7whl6.jl:1\n\
    in expression starting at /tmp/tmpk4d7whl6.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0d6x6_qp.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0d6x6_qp.jl:1\n\
    in expression starting at /tmp/tmp0d6x6_qp.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98gaj2pi.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98gaj2pi.jl:1\n\
    in expression starting at /tmp/tmp98gaj2pi.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpzlyj80a0.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzlyj80a0.jl:1\n\
    in expression starting at /tmp/tmpzlyj80a0.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpx9_hihvj.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpx9_hihvj.jl:1\n\
    in expression starting at /tmp/tmpx9_hihvj.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpl8orvtvp.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpl8orvtvp.jl:1\n\
    in expression starting at /tmp/tmpl8orvtvp.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppicy9m38.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppicy9m38.jl:1\n\
    in expression starting at /tmp/tmppicy9m38.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    if length(lst1) != length(lst2) \n\
    \        return \"NO\"\n    end\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\
    \t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3px4dq3j.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3px4dq3j.jl:1\n\
    in expression starting at /tmp/tmp3px4dq3j.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp1jsibqv9.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1jsibqv9.jl:1\n\
    in expression starting at /tmp/tmp1jsibqv9.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    even = lst1[2:end] % 2 == 0\n    even2\
    \ = lst2[2:end] % 2 == 0\n    \n    if even && even2\n        return \"YES\"\n\
    \    else\n        return \"NO\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    exchange([1, 2, 3, 4], [1, 2, 3, 4])\n</cell>\n<code language=julia-1.5>\nexchange([1,\
    \ 2, 3, 4], [1, 5, 3, 4])\n</cell>\n<text>\nProblem 7\nWrite a function that takes\
    \ two lists of numbers, and determines whether it is possible to perform an exchange\
    \ of elements\nbetween them to make lst1 a list of only odd numbers.\nThere is\
    \ no limit on the number of exchanged elements between lst1 and lst2.\nIf it is\
    \ possible to exchange elements between the lst1 and lst2 to make\nall the elements\
    \ of lst1 to be odd, return \"YES\".\nOtherwise, return \"NO\".\nFor example:\n\
    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\nexchange([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) => \"NO\"\nIt is assumed that the input lists will be non-empty.\n\"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp40l1za3r.jl:24\nin expression starting at\
    \ /tmp/tmp40l1za3r.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpuaneunsq.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpuaneunsq.jl:1\n\
    in expression starting at /tmp/tmpuaneunsq.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpumc7qesb.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpumc7qesb.jl:1\n\
    in expression starting at /tmp/tmpumc7qesb.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp8v6pa3va.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8v6pa3va.jl:1\n\
    in expression starting at /tmp/tmp8v6pa3va.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqkcbefi2.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqkcbefi2.jl:1\n\
    in expression starting at /tmp/tmpqkcbefi2.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    even = lst1[findall(x -> x % 2 == 0,\
    \ lst1)]\n    odd = lst2[findall(x -> x % 2 != 0, lst2)]\n    \n    if length(even)\
    \ == length(odd) && length(even) == length(lst1)\n        return \"YES\"\n   \
    \ else\n        return \"NO\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    exchange([1, 2, 3, 4], [1, 2, 3, 4])\n</cell>\n<code language=julia-1.5>\nexchange([1,\
    \ 2, 3, 4], [1, 5, 3, 4])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2,\
    \ 3, 4], [1, 2, 3])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4],\
    \ [1, 2, 3, 5])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1,\
    \ 2, 3, 6])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2,\
    \ 3, 7])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3,\
    \ 8])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 9])\n\
    </cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 10])\n</cell>\n\
    <code language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 11])\n</cell>\n<code\
    \ language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 12])\n</cell>\n<code language=julia-1.5>\n\
    exchange([1, 2, 3, 4], [1, 2, 3, 13])\n</cell>\n<code language=julia-1.5>\nexchange([1,\
    \ 2, 3, 4], [1, 2, 3, 14])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2,\
    \ 3, 4], [1, 2, 3, 15])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3,\
    \ 4], [1, 2, 3, 16])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4],\
    \ [1, 2, 3, 17])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1,\
    \ 2, 3, 18])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2,\
    \ 3, 19])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3,\
    \ 20])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 21])\n\
    </cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 22])\n</cell>\n\
    <code language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 23])\n</cell>\n<code\
    \ language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 24])\n</cell>\n<code language=julia-1.5>\n\
    exchange([1, 2, 3, 4], [1, 2, 3, 25])\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc7flb60w.jl:24\nin expression starting at\
    \ /tmp/tmpc7flb60w.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    even = lst1[findall(x -> x % 2 == 0,\
    \ lst1)]\n    odd = lst2[findall(x -> x % 2 != 0, lst2)]\n    \n    if length(even)\
    \ == length(odd) && length(even) == length(lst1)\n        return \"YES\"\n   \
    \ else\n        return \"NO\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    exchange([1, 2, 3, 4], [1, 2, 3, 4])\n</cell>\n<code language=julia-1.5>\nexchange([1,\
    \ 2, 3, 4], [1, 5, 3, 4])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2,\
    \ 3, 4], [1, 2, 3, 4, 5, 6])\n</cell>\n<code language=julia-1.5>\nexchange([1,\
    \ 2, 3, 4], [1, 2, 3, 4, 5, 6, 7])\n</cell>\n<code language=julia-1.5>\nexchange([1,\
    \ 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8])\n</cell>\n<code language=julia-1.5>\nexchange([1,\
    \ 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9])\n</cell>\n<code language=julia-1.5>\n\
    exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n</cell>\n<code language=julia-1.5>\n\
    exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n</cell>\n<code language=julia-1.5>\n\
    exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n</cell>\n<code\
    \ language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n</cell>\n<code language=julia-1.5>\n\
    exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n\
    </cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n</cell>\n<code language=julia-1.5>\n\
    exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,\
    \ 17])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n</cell>\n<code language=julia-1.5>\n\
    exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,\
    \ 17, 18, 19])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n</cell>\n\
    <code language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n</cell>\n<code language=julia-1.5>\n\
    exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, \nusing Test\n\n@testset begin\n\n\
    candidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj399m5la.jl:24\nin expression starting at\
    \ /tmp/tmpj399m5la.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    if length(lst1) != length(lst2)\n \
    \       return \"NO\"\n    end\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\
    \t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjga57m07.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjga57m07.jl:1\n\
    in expression starting at /tmp/tmpjga57m07.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpfxihd5m6.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfxihd5m6.jl:1\n\
    in expression starting at /tmp/tmpfxihd5m6.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    even = lst1[2:end] .+ lst1[1:end-1]\n\
    \    odd = lst2[2:end] .+ lst2[1:end-1]\n    \n    if even .== odd\n        return\
    \ \"YES\"\n    else\n        return \"NO\"\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    exchange([1, 2, 3, 4], [1, 2, 3, 4])\n</cell>\n<code language=julia-1.0>\nexchange([1,\
    \ 2, 3, 4], [1, 5, 3, 4])\n</cell>\n<text>\nProblem 7\nWrite a function that takes\
    \ two vectors of numbers, and determines whether it is possible to perform an\
    \ exchange of elements\nbetween them to make lst1 a list of only even numbers.\n\
    There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    If it is possible to exchange elements between the lst1 and lst2 to make\nall\
    \ the elements of lst1 to be even, return \"YES\".\nOtherwise, return \"NO\".\n\
    For example:\nexchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\nexchange([1, 2,\
    \ 3, 4], [1, 5, 3, 4]) => \"NO\"\nIt is assumed that the input lists will be non-empty.\n\
    Hint: You can use the function exchange.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvjizuy8q.jl:24\nin expression starting at\
    \ /tmp/tmpvjizuy8q.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpd7x4igci.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpd7x4igci.jl:1\n\
    in expression starting at /tmp/tmpd7x4igci.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    even = filter(x -> x % 2 == 0, lst1)\n\
    \    odd = filter(x -> x % 2 != 0, lst1)\n    \n    if length(even) == length(odd)\
    \ == length(lst1)\n        return \"YES\"\n    else\n        return \"NO\"\n \
    \   end\nend\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2,\
    \ 3, 4])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 5, 3,\
    \ 4])\n</cell>\n<text>\nProblem 8\nWrite a function that takes two lists of numbers,\
    \ and determines whether it is possible to perform an exchange of elements\nbetween\
    \ them to make lst1 a list of only even numbers.\nThere is no limit on the number\
    \ of exchanged elements between lst1 and lst2.\nIf it is possible to exchange\
    \ elements between the lst1 and lst2 to make\nall the elements of lst1 to be even,\
    \ return \"YES\".\nOtherwise, return \"NO\".\nFor example:\nexchange([1, 2, 3,\
    \ 4], [1, 2, 3, 4]) => \"YES\"\nexchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\
    \nIt is assumed that the input lists will be non-empty.\nHint: You may want to\
    \ use the filter function.\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\
    \t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn9bwgbg9.jl:24\nin expression starting at\
    \ /tmp/tmpn9bwgbg9.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    if length(lst1) != length(lst2)\n \
    \       return \"NO\"\n    end\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\
    \t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp5ly83akh.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5ly83akh.jl:1\n\
    in expression starting at /tmp/tmp5ly83akh.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    even = lst1[findall(x -> x % 2 == 0,\
    \ lst1)]\n    odd = lst2[findall(x -> x % 2 != 0, lst2)]\n    \n    if length(even)\
    \ == length(odd) == length(lst1)\n        return \"YES\"\n    else\n        return\
    \ \"NO\"\n    end\nend\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3,\
    \ 4], [1, 2, 3, 4])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1,\
    \ 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1,\
    \ 2, 3, 4, 5, 6])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4],\
    \ [1, 2, 3, 4, 5, 6, 7])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2,\
    \ 3, 4], [1, 2, 3, 4, 5, 6, 7, 8])\n</cell>\n<code language=julia-1.5>\nexchange([1,\
    \ 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9])\n</cell>\n<code language=julia-1.5>\n\
    exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n</cell>\n<code language=julia-1.5>\n\
    exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n</cell>\n<code language=julia-1.5>\n\
    exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n</cell>\n<code\
    \ language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n</cell>\n<code language=julia-1.5>\n\
    exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n\
    </cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n</cell>\n<code language=julia-1.5>\n\
    exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,\
    \ 17])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n</cell>\n<code language=julia-1.5>\n\
    exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,\
    \ 17, 18, 19])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n</cell>\n\
    <code language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n</cell\nusing Test\n\n@testset\
    \ begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4])\
    \ == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmputnj8o18.jl:24\nin expression starting at\
    \ /tmp/tmputnj8o18.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpfrgruvqb.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfrgruvqb.jl:1\n\
    in expression starting at /tmp/tmpfrgruvqb.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    if length(lst1) != length(lst2)\n \
    \       return \"NO\"\n    end\n    \n    even = filter(x -> x % 2 == 0, lst1)\n\
    \    odd = filter(x -> x % 2 != 0, lst1)\n    \n    if length(even) == length(odd)\n\
    \        return \"NO\"\n    end\n    \n    even = filter(x -> x % 2 == 0, lst2)\n\
    \    odd = filter(x -> x % 2 != 0, lst2)\n    \n    if length(even) == length(odd)\n\
    \        return \"NO\"\n    end\n    \n    even = filter(x -> x % 2 == 0, lst1)\n\
    \    even = filter(x -> x % 2 != 0, even)\n    \n    if length(even) == length(lst1)\n\
    \        return \"NO\"\n    end\n    \n    even = filter(x -> x % 2 == 0, lst2)\n\
    \    even = filter(x -> x % 2 != 0, even)\n    \n    if length(even) == length(lst2)\n\
    \        return \"NO\"\n    end\n    \n    even = filter(x -> x % 2 == 0, lst1)\n\
    \    even = filter(x -> x % 2 != 0, even)\n    \n    if length(even) == length(lst1)\n\
    \        return \"NO\"\n    end\n    \n    even = filter(x -> x % 2 == 0, lst2)\n\
    \    even = filter(x -> x % 2 != 0, even)\n    \n    if length(even) == length(lst2)\n\
    \        return \"NO\"\n    end\n    \n    even = filter(x -> x % 2 == 0, lst1)\n\
    \    even = filter(x -> x % 2 != 0, even)\n    \n    if length(even) == length(lst1)\n\
    \        return \"NO\"\n    end\n    \n    even = filter(x -> x % 2 == 0, lst2)\n\
    \    even = filter(x -> x % 2 != 0, even)\n    \n    if length(even) == length(lst2)\n\
    \        return \"NO\"\n    end\n    \n    even = filter(x -> x % 2 == 0, lst1)\n\
    \    even = filter(x -> x % 2 != 0, even)\n    \n    if length(even) == length(lst1)\n\
    \        return \"NO\"\n    end\n    \n    even = filter(x -> x % 2 == 0, lst2)\n\
    \    even = filter(x -> x % 2 != 0, even)\n    \n    if length(even) == length(lst2)\n\
    \        return \"NO\"\n    end\n    \n    even = filter(x -> x % 2 == 0, lst1)\n\
    \    even = filter(x -> x % 2 != 0, even)\n    \n    if length(even) == length(lst2)\n\
    \        return \"NO\"\n    end\n\nusing Test\n\n@testset begin\n\ncandidate =\
    \ exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpb3xz8w4n.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpb3xz8w4n.jl:1\n\
    in expression starting at /tmp/tmpb3xz8w4n.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0p9smflm.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0p9smflm.jl:1\n\
    in expression starting at /tmp/tmp0p9smflm.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpthua4yqj.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpthua4yqj.jl:1\n\
    in expression starting at /tmp/tmpthua4yqj.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpv95t5a9h.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpv95t5a9h.jl:1\n\
    in expression starting at /tmp/tmpv95t5a9h.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3_6cz8vw.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3_6cz8vw.jl:1\n\
    in expression starting at /tmp/tmp3_6cz8vw.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp95kghm4c.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp95kghm4c.jl:1\n\
    in expression starting at /tmp/tmp95kghm4c.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp10yb1h0e.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp10yb1h0e.jl:1\n\
    in expression starting at /tmp/tmp10yb1h0e.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp78nj1cxu.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp78nj1cxu.jl:1\n\
    in expression starting at /tmp/tmp78nj1cxu.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    if length(lst1) == 0 || length(lst2)\
    \ == 0 \n        return \"NO\"\n    end\n    \n    even = filter(x -> x % 2 ==\
    \ 0, lst1)\n    odd = filter(x -> x % 2 != 0, lst2)\n    \n    if length(even)\
    \ == length(odd) \n        return \"NO\"\n    end\n    \n    even = sort(even)\n\
    \    odd = sort(odd)\n    \n    if length(even) == length(odd) \n        return\
    \ \"NO\"\n    end\n    \n    even = filter(x -> x % 2 == 0, even)\n    odd = filter(x\
    \ -> x % 2 != 0, odd)\n    \n    if length(even) == length(odd) \n        return\
    \ \"NO\"\n    end\n    \n    even = filter(x -> x % 2 == 0, even)\n    odd = filter(x\
    \ -> x % 2 != 0, odd)\n    \n    if length(even) == length(odd) \n        return\
    \ \"NO\"\n    end\n    \n    even = filter(x -> x % 2 == 0, even)\n    odd = filter(x\
    \ -> x % 2 != 0, odd)\n    \n    if length(even) == length(odd) \n        return\
    \ \"NO\"\n    end\n    \n    even = filter(x -> x % 2 == 0, even)\n    odd = filter(x\
    \ -> x % 2 != 0, odd)\n    \n    if length(even) == length(odd) \n        return\
    \ \"NO\"\n    end\n    \n    even = filter(x -> x % 2 == 0, even)\n    odd = filter(x\
    \ -> x % 2 != 0, odd)\n    \n    if length(even) == length(odd) \n        return\
    \ \"NO\"\n    end\n    \n    even = filter(x -> x % 2 == 0, even)\n    odd = filter(x\
    \ -> x % 2 != 0, odd)\n    \n    if length(even) == length(odd) \n        return\
    \ \"NO\"\n    end\n    \n    even = filter(x -> x % 2 == 0, even)\n    odd = filter(x\
    \ -> x % 2 != 0, odd)\n    \n    if length(even) == length(odd) \n        return\
    \ \"NO\"\n    end\n    \n    even = filter(x -> x % 2 == 0, even)\n    odd = filter(x\
    \ -> x % 2 != 0, odd)\n    \n    if length(even) == length(odd) \n        return\
    \ \"NO\"\n    end\n    \n    even = filter(x -> x % 2 == 0, even)\n    odd = filter(x\
    \ -> x % 2 != 0, odd)\n    \n    if length(even) == length(odd) \n        return\
    \ \"NO\"\n    end\n    \n    even = filter(x -> x % 2 == \nusing Test\n\n@testset\
    \ begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4])\
    \ == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplfj1gfu5.jl:99\nin expression starting at\
    \ /tmp/tmplfj1gfu5.jl:99\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpd20kxkws.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpd20kxkws.jl:1\n\
    in expression starting at /tmp/tmpd20kxkws.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    if length(lst1) != length(lst2)\n \
    \       return \"NO\"\n    end\n    \n    even = lst1[findall(x -> x % 2 == 0,\
    \ lst1)]\n    odd = lst2[findall(x -> x % 2 == 1, lst2)]\n    \n    if length(even)\
    \ == length(odd)\n        return \"YES\"\n    else\n        return \"NO\"\n  \
    \  end\nend\n</cell>\n<code language=julia-1.3>\nexchange([1, 2, 3, 4], [1, 2,\
    \ 3, 4])\n</cell>\n<code language=julia-1.3>\nexchange([1, 2, 3, 4], [1, 5, 3,\
    \ 4])\n</cell>\n<text>\nProblem 7: Exchange Elements\nWrite a function that takes\
    \ two vectors of numbers, and exchanges elements from one vector to another in\
    \ such a way that all the elements of the first vector are even.\nFor example,\
    \ exchange([2, 3, 4, 5], [1, 3, 5, 7]) => [2, 4, 3, 7]\nIt is assumed that the\
    \ input vectors will not be empty.\nThe function should return the modified vectors.\n\
    For example:\nexchange([2, 3, 4, 5], [1, 3, 5, 7]) => [2, 4, 3, 7]\nexchange([2,\
    \ 3, 4, 5], [1, 3, 5, 7], [1, 3, 5, 7]) => [2, 4, 3, 7]\nexchange([2, 3, 4, 5],\
    \ [1, 3, 5, 7], [1, 3, 5, 7], [1, 3, 5, 7]) => [2, 4, 3, 7]\nexchange([2, 3, 4,\
    \ 5], [1, 3, 5, 7], [1, 3, 5, 7], [1, 3, 5, 7], [1, 3, 5, 7]) => [2, 4, 3, 7]\n\
    </text>\n<code language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyegvi1mr.jl:28\nin expression starting at\
    \ /tmp/tmpyegvi1mr.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpger9g99w.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpger9g99w.jl:1\n\
    in expression starting at /tmp/tmpger9g99w.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpd7b_8dzt.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpd7b_8dzt.jl:1\n\
    in expression starting at /tmp/tmpd7b_8dzt.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoiq3_lxf.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoiq3_lxf.jl:1\n\
    in expression starting at /tmp/tmpoiq3_lxf.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9zb4e2g1.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9zb4e2g1.jl:1\n\
    in expression starting at /tmp/tmp9zb4e2g1.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    even = lst1[findall(x -> x % 2 == 0,\
    \ lst1)]\n    odd = lst2[findall(x -> x % 2 == 1, lst2)]\n    \n    if length(even)\
    \ == length(odd) \n        return \"YES\"\n    else\n        return \"NO\"\n \
    \   end\nend\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2,\
    \ 3, 4])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 5, 3,\
    \ 4])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 4,\
    \ 5])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 4,\
    \ 5, 6])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3,\
    \ 4, 5, 6, 7])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1,\
    \ 2, 3, 4, 5, 6, 7, 8])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3,\
    \ 4], [1, 2, 3, 4, 5, 6, 7, 8, 9])\n</cell>\n<code language=julia-1.5>\nexchange([1,\
    \ 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n</cell>\n<code language=julia-1.5>\n\
    exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n</cell>\n<code language=julia-1.5>\n\
    exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n</cell>\n<code\
    \ language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n</cell>\n<code language=julia-1.5>\n\
    exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n\
    </cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n</cell>\n<code language=julia-1.5>\n\
    exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,\
    \ 17])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n</cell>\n<code language=julia-1.5>\n\
    exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,\
    \ 17, 18, 19])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n</cell>\n\
    <code language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n</cell>\n<code language=juli\n\
    using Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2,\
    \ 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3,\
    \ 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t\
    @test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3],\
    \ [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1,\
    \ 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplk5n2gvm.jl:24\nin expression starting at\
    \ /tmp/tmplk5n2gvm.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    if length(lst1) != length(lst2)\n \
    \       return \"NO\"\n    end\n    \n    even = filter(x -> x % 2 == 0, lst1)\n\
    \    odd = filter(x -> x % 2 != 0, lst2)\n    \n    if length(even) == length(odd)\n\
    \        return \"NO\"\n    end\n    \n    even = sort(even)\n    odd = sort(odd)\n\
    \    \n    if even[1] == odd[1]\n        return \"YES\"\n    end\n    \n    if\
    \ even[1] == odd[end]\n        return \"YES\"\n    end\n    \n    if even[end]\
    \ == odd[1]\n        return \"YES\"\n    end\n    \n    if even[end] == odd[end]\n\
    \        return \"YES\"\n    end\n    \n    return \"NO\"\nend\n</cell>\n<code\
    \ language=julia-1.5>\nexchange([1,2,3,4,5], [1,2,3,4,5])\n</cell>\n<code language=julia-1.5>\n\
    exchange([1,2,3,4,5], [1,5,3,4,5])\n</cell>\n<code language=julia-1.5>\nexchange([1,2,3,4,5],\
    \ [1,2,4,3,5])\n</cell>\n<code language=julia-1.5>\nexchange([1,2,3,4,5], [1,2,3,4,6])\n\
    </cell>\n<code language=julia-1.5>\nexchange([1,2,3,4,5], [1,2,3,4,5])\n</cell>\n\
    <code language=julia-1.5>\nexchange([1,2,3,4,5], [1,2,3,4,5])\n</cell>\n<code\
    \ language=julia-1.5>\nexchange([1,2,3,4,5], [1,2,3,4,5])\n</cell>\n<code language=julia-1.5>\n\
    exchange([1,2,3,4,5], [1,2,3,4,5])\n</cell>\n<code language=julia-1.5>\nexchange([1,2,3,4,5],\
    \ [1,2,3,4,5])\n</cell>\n<code language=julia-1.5>\nexchange([1,2,3,4,5], [1,2,3,4,5])\n\
    </cell>\n<code language=julia-1.5>\nexchange([1,2,3,4,5], [1,2,3,4,5])\n</cell>\n\
    <code language=julia-1.5>\nexchange([1,2,3,4,5], [1,2,3,4,5])\n</cell>\n<code\
    \ language=julia-1.5>\nexchange([1,2,3,4,5], [1,2,3,4,5])\n</cell>\n<code language=julia-1.5>\n\
    exchange([1,2,3,4,5], [1,2,3,4,5])\n</cell>\n<code language=julia-1.5>\nexchange([1,2,3,4,5],\
    \ [1,2,3,4,5])\n</cell>\n<code language=julia-1.5>\nexchange([1,2,3,4,5], [1,2,3,4,5])\n\
    </cell>\n<code language=julia-1.5>\nexchange([1,2,3,4,5], [1,2,3,4,5])\n</cell>\n\
    <code language=julia-1.5>\nexchange([1,2,3,4,5], [1,2,3,4,5])\n</cell\nusing Test\n\
    \n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1,\
    \ 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\
    )\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"\
    NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t\
    @test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd0j085tg.jl:47\nin expression starting at\
    \ /tmp/tmpd0j085tg.jl:47\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp94bz7nc1.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp94bz7nc1.jl:1\n\
    in expression starting at /tmp/tmp94bz7nc1.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpusiw54t7.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpusiw54t7.jl:1\n\
    in expression starting at /tmp/tmpusiw54t7.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpeixp4rq0.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpeixp4rq0.jl:1\n\
    in expression starting at /tmp/tmpeixp4rq0.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphdk3lg2o.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphdk3lg2o.jl:1\n\
    in expression starting at /tmp/tmphdk3lg2o.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpci75fw2d.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpci75fw2d.jl:1\n\
    in expression starting at /tmp/tmpci75fw2d.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6esci86a.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6esci86a.jl:1\n\
    in expression starting at /tmp/tmp6esci86a.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    even = lst1[findall(x -> x % 2 == 0,\
    \ lst1)]\n    odd = lst2[findall(x -> x % 2 == 1, lst2)]\n    \n    if length(even)\
    \ == length(odd) && length(even) == length(lst1)\n        return \"YES\"\n   \
    \ else\n        return \"NO\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    exchange([1, 2, 3, 4], [1, 2, 3, 4])\n</cell>\n<code language=julia-1.5>\nexchange([1,\
    \ 2, 3, 4], [1, 5, 3, 4])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2,\
    \ 3, 4], [1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2,\
    \ 3, 4], [1, 2, 3, 4, 5, 6])\n</cell>\n<code language=julia-1.5>\nexchange([1,\
    \ 2, 3, 4], [1, 2, 3, 4, 5, 6, 7])\n</cell>\n<code language=julia-1.5>\nexchange([1,\
    \ 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8])\n</cell>\n<code language=julia-1.5>\nexchange([1,\
    \ 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9])\n</cell>\n<code language=julia-1.5>\n\
    exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n</cell>\n<code language=julia-1.5>\n\
    exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n</cell>\n<code language=julia-1.5>\n\
    exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n</cell>\n<code\
    \ language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n</cell>\n<code language=julia-1.5>\n\
    exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n\
    </cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n</cell>\n<code language=julia-1.5>\n\
    exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,\
    \ 17])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n</cell>\n<code language=julia-1.5>\n\
    exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,\
    \ 17, 18, 19])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n</cell>\n\
    <code language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n\nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpevylg2gv.jl:24\nin expression starting at\
    \ /tmp/tmpevylg2gv.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpr1e4ir17.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpr1e4ir17.jl:1\n\
    in expression starting at /tmp/tmpr1e4ir17.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    if length(lst1) != length(lst2)\n \
    \       return \"NO\"\n    end\n    \n    even = Int64[]\n    \n    for i in 1:length(lst1)\n\
    \        if lst1[i] % 2 == 0 && lst2[i] % 2 == 0\n            push!(even, lst1[i])\n\
    \            push!(even, lst2[i])\n        end\n    end\n    \n    if length(even)\
    \ == length(lst1)\n        return \"YES\"\n    else\n        return \"NO\"\n \
    \   end\nend\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2,\
    \ 3, 4])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 5, 3,\
    \ 4])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 4,\
    \ 5])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 4,\
    \ 5, 6])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3,\
    \ 4, 5, 6, 7])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1,\
    \ 2, 3, 4, 5, 6, 7, 8])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3,\
    \ 4], [1, 2, 3, 4, 5, 6, 7, 8, 9])\n</cell>\n<code language=julia-1.5>\nexchange([1,\
    \ 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n</cell>\n<code language=julia-1.5>\n\
    exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n</cell>\n<code language=julia-1.5>\n\
    exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n</cell>\n<code\
    \ language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n</cell>\n<code language=julia-1.5>\n\
    exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n\
    </cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n</cell>\n<code language=julia-1.5>\n\
    exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,\
    \ 17])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n</cell>\n<code language=julia-1.5>\n\
    exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,\
    \ 17, 18, 19])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n\nusing\
    \ Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3,\
    \ 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4])\
    \ == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"\
    NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t\
    @test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpndbym_p6.jl:34\nin expression starting at\
    \ /tmp/tmpndbym_p6.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp4mv6_pg9.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4mv6_pg9.jl:1\n\
    in expression starting at /tmp/tmp4mv6_pg9.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    even = lst1[findall(x -> x % 2 == 0,\
    \ lst1)]\n    odd = lst2[findall(x -> x % 2 != 0, lst2)]\n    \n    if length(even)\
    \ == length(odd) == length(lst1)\n        return \"YES\"\n    else\n        return\
    \ \"NO\"\n    end\nend\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3,\
    \ 4], [1, 2, 3, 4])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1,\
    \ 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1,\
    \ 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1,\
    \ 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1,\
    \ 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1,\
    \ 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1,\
    \ 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1,\
    \ 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1,\
    \ 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1,\
    \ 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1,\
    \ 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1,\
    \ 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1,\
    \ 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1,\
    \ 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1,\
    \ 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1,\
    \ 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1,\
    \ 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1,\
    \ 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1,\
    \ 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1,\
    \ 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1,\
    \ 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1,\
    \ 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1,\
    \ 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1,\
    \ 2, 3, 4, 5])\n</\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t\
    @test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwyl3q4u4.jl:24\nin expression starting at\
    \ /tmp/tmpwyl3q4u4.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpap7l26vb.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpap7l26vb.jl:1\n\
    in expression starting at /tmp/tmpap7l26vb.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpsp19xzdz.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsp19xzdz.jl:1\n\
    in expression starting at /tmp/tmpsp19xzdz.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmptl3jrxea.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptl3jrxea.jl:1\n\
    in expression starting at /tmp/tmptl3jrxea.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    even = lst1[findall(x -> x % 2 == 0,\
    \ lst1)]\n    odd = lst2[findall(x -> x % 2 != 0, lst2)]\n    \n    if length(even)\
    \ == length(odd) && all(x -> x == 0, even) && all(x -> x == 0, odd) \n       \
    \ return \"YES\"\n    else\n        return \"NO\"\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 4])\n</cell>\n<code language=julia-1.5>\n\
    exchange([1, 2, 3, 4], [1, 5, 3, 4])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes two lists of numbers, and determines whether it is possible to perform\
    \ an exchange of elements\n    between them to make lst1 a list of only odd numbers.\n\
    \    There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be odd, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuar0cadh.jl:24\nin expression starting at\
    \ /tmp/tmpuar0cadh.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    even = lst1[findall(x -> x % 2 == 0,\
    \ lst1)]\n    odd = lst2[findall(x -> x % 2 != 0, lst2)]\n    \n    if length(even)\
    \ == length(odd) \n        return \"NO\"\n    end\n    \n    even = sort(even)\n\
    \    odd = sort(odd)\n    \n    if length(even) == length(odd) \n        return\
    \ \"NO\"\n    end\n    \n    \n    if length(even) > length(odd) \n        return\
    \ \"NO\"\n    end\n    \n    \n    if length(even) < length(odd) \n        return\
    \ \"YES\"\n    end\n    \n    \n    \nend\n</cell>\n<code language=julia-1.5>\n\
    exchange([1,2,3,4,5], [1,5,3,4,2])\n</cell>\n<text>\nProblem 8\nWrite a function\
    \ that takes two lists of numbers, and determines whether it is possible to perform\
    \ an exchange of elements\nbetween them to make lst1 a list of only even numbers.\n\
    There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    If it is possible to exchange elements between the lst1 and lst2 to make\nall\
    \ the elements of lst1 to be even, return \"YES\".\nOtherwise, return \"NO\".\n\
    For example:\nexchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\nexchange([1, 2,\
    \ 3, 4], [1, 5, 3, 4]) => \"NO\"\nIt is assumed that the input lists will be non-empty.\n\
    Hint: Use a for loop to iterate through each element of lst1 and lst2.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3,\
    \ 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4])\
    \ == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"\
    NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t\
    @test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyb62eazh.jl:42\nin expression starting at\
    \ /tmp/tmpyb62eazh.jl:42\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    even = lst1[findall(x -> x % 2 == 0,\
    \ lst1)]\n    odd = lst2[findall(x -> x % 2 != 0, lst2)]\n    \n    if length(even)\
    \ == length(odd) && length(even) == length(lst1) && length(odd) == length(lst2)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 4])\n</cell>\n<code\
    \ language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 5, 3, 4])\n</cell>\n<code language=julia-1.5>\n\
    exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6])\n</cell>\n<code language=julia-1.5>\n\
    exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7])\n</cell>\n<code language=julia-1.5>\n\
    exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8])\n</cell>\n<code language=julia-1.5>\n\
    exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9])\n</cell>\n<code language=julia-1.5>\n\
    exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n</cell>\n<code language=julia-1.5>\n\
    exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n</cell>\n<code language=julia-1.5>\n\
    exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n</cell>\n<code\
    \ language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n</cell>\n<code language=julia-1.5>\n\
    exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n\
    </cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n</cell>\n<code language=julia-1.5>\n\
    exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,\
    \ 17])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n</cell>\n<code language=julia-1.5>\n\
    exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,\
    \ 17, 18, 19])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n</cell>\n\
    <code language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11, 12, 13, 14, 15, \nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\
    \t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqloyomvb.jl:24\nin expression starting at\
    \ /tmp/tmpqloyomvb.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    even = lst1[findall(x -> x % 2 == 0,\
    \ lst1)]\n    odd = lst2[findall(x -> x % 2 != 0, lst2)]\n    \n    if length(even)\
    \ == length(odd) && length(even) == length(lst1)\n        return \"YES\"\n   \
    \ else\n        return \"NO\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    exchange([1, 2, 3, 4], [1, 2, 3, 4])\n</cell>\n<code language=julia-1.5>\nexchange([1,\
    \ 2, 3, 4], [1, 5, 3, 4])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2,\
    \ 3, 4], [1, 2, 3, 4, 5, 6])\n</cell>\n<code language=julia-1.5>\nexchange([1,\
    \ 2, 3, 4], [1, 2, 3, 4, 5, 6, 7])\n</cell>\n<code language=julia-1.5>\nexchange([1,\
    \ 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8])\n</cell>\n<code language=julia-1.5>\nexchange([1,\
    \ 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9])\n</cell>\n<code language=julia-1.5>\n\
    exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n</cell>\n<code language=julia-1.5>\n\
    exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n</cell>\n<code language=julia-1.5>\n\
    exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n</cell>\n<code\
    \ language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n</cell>\n<code language=julia-1.5>\n\
    exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n\
    </cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n</cell>\n<code language=julia-1.5>\n\
    exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,\
    \ 17])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n</cell>\n<code language=julia-1.5>\n\
    exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,\
    \ 17, 18, 19])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n</cell>\n\
    <code language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n</cell>\n<code language=julia-1.5>\n\
    exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, \nusing Test\n\n@testset begin\n\n\
    candidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprut470ws.jl:24\nin expression starting at\
    \ /tmp/tmprut470ws.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxuu_v02m.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxuu_v02m.jl:1\n\
    in expression starting at /tmp/tmpxuu_v02m.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpb3_34z8i.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpb3_34z8i.jl:1\n\
    in expression starting at /tmp/tmpb3_34z8i.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpkd5fvoxv.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpkd5fvoxv.jl:1\n\
    in expression starting at /tmp/tmpkd5fvoxv.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    even = filter(x -> x % 2 == 0, lst1)\n\
    \    odd = filter(x -> x % 2 != 0, lst1)\n    \n    if length(even) == length(odd)\
    \ && length(even) == length(lst2)\n        return \"YES\"\n    else\n        return\
    \ \"NO\"\n    end\nend\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3,\
    \ 4], [1, 2, 3, 4])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4])\n</cell>\n<text>\nProblem 5\nWrite a function that takes two vectors\
    \ of numbers, and determines whether it is possible to perform an exchange of\
    \ elements\nbetween them to make lst1 a list of only even numbers.\nThere is no\
    \ limit on the number of exchanged elements between lst1 and lst2.\nIf it is possible\
    \ to exchange elements between the lst1 and lst2 to make\nall the elements of\
    \ lst1 to be even, return \"YES\".\nOtherwise, return \"NO\".\nFor example:\n\
    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\nexchange([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) => \"NO\"\nIt is assumed that the input lists will be non-empty.\nHint:\
    \ You can use the function exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\
    \ \n    defined above.\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\
    \t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmuq0s6ke.jl:24\nin expression starting at\
    \ /tmp/tmpmuq0s6ke.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    if length(lst1) != length(lst2)\n \
    \       return \"NO\"\n    end\n    \n    even = Int64[]\n    \n    for i = 1:length(lst1)\n\
    \        if mod(lst1[i], 2) == 0 && mod(lst2[i], 2) == 0\n            push!(even,\
    \ lst1[i])\n            push!(even, lst2[i])\n        end\n    end\n    \n   \
    \ if length(even) == length(lst1)\n        return \"YES\"\n    else\n        return\
    \ \"NO\"\n    end\nend\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3,\
    \ 4], [1, 2, 3, 4])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4])\n</cell>\n<text>\nProblem 7\nWrite a function that takes two vectors\
    \ of numbers and returns their sum.\n    For example:\n    sum([1, 2, 3, 4]) =>\
    \ 10\n    sum([1, 2, 3, 4], 5) => 15\n    sum([1, 2, 3, 4], []) => 0\n    sum([1,\
    \ 2, 3, 4], [5]) => 5\n    sum([1, 2, 3, 4], [5, 6]) => 10\n    sum([1, 2, 3,\
    \ 4], [5, 6, 7]) => 15\n    sum([1, 2, 3, 4], [5, 6, 7], []) => 0\n    sum([1,\
    \ 2, 3, 4], [5, 6, 7], [8]) => 10\n    sum([1, 2, 3, 4], [5, 6, 7], [8], []) =>\
    \ 0\n    sum([1, 2, 3, 4], [5, 6, 7], [8], [9]) => 10\n    sum([1, 2, 3, 4], [5,\
    \ 6, 7], [8], [9], []) => 0\n    sum([1, 2, 3, 4], [5, 6, 7], [8], [9], [10])\
    \ => 10\n    sum([1, 2, 3, 4], [5, 6, 7], [8], [9], [10], []) => 0\n    sum([1,\
    \ 2, 3, 4], [5, 6, 7], [8], [9], [10], [11]) => 10\n    sum([1, 2, 3, 4], [5,\
    \ 6, 7], [8], [9], [10], [11], []) => 0\n    sum([1, 2, 3, 4], [5, 6, 7], [8],\
    \ [9], [10], [11], [12]) => 10\n    sum([1, 2, 3, 4], [5, 6, 7], [8], [9], [10],\
    \ [11], [12], []) => 0\n    sum([1, 2, 3, 4], [5, 6, 7], [8], [9], [10], [11],\
    \ [12], [13]) => 10\n    sum([1, 2, 3, 4], [5, 6, 7], [8], [9], [10], [11], [12],\
    \ [13], []) => 0\n    sum([1, 2, 3, 4], [5, 6, 7], [8], [9], [10], [11], [12],\
    \ [13], [14]) => 10\n    sum([1, 2, 3, 4], [5, 6, 7], [8], [9], [10], [11], [12],\
    \ [13], [14], []) => 0\n    \nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\
    \t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmja0u2kg.jl:34\nin expression starting at\
    \ /tmp/tmpmja0u2kg.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    even = lst1[2:end] .== lst2[1:end-1]\n\
    \    \n    if even && all(even)\n        return \"YES\"\n    else\n        return\
    \ \"NO\"\n    end\nend\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3,\
    \ 4], [1, 2, 3, 4])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4])\n</cell>\n<text>\nExercise 2\nWrite a function that takes two\
    \ vectors of numbers, and determines whether it is possible to perform an exchange\
    \ of elements to make lst1 a list of only even numbers.\n    There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n    If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n    all the elements\
    \ of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For\
    \ example:\n    exchange([2, 4, 6], [1, 3, 5]) => \"YES\"\n    exchange([2, 4,\
    \ 6], [1, 5, 3]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw13qdm0g.jl:23\nin expression starting at\
    \ /tmp/tmpw13qdm0g.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwae7k5_w.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwae7k5_w.jl:1\n\
    in expression starting at /tmp/tmpwae7k5_w.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    if length(lst1) != length(lst2)\n \
    \       return \"NO\"\n    end\n    \n    even = findall(x -> x % 2 == 0, lst1)\n\
    \    \n    if length(even) == 0\n        return \"NO\"\n    end\n    \n    even\
    \ = Int64(length(even))\n    \n    for i = 1:length(lst1)\n        if lst1[i]\
    \ % 2 != 0 && lst2[i] % 2 == 0\n            lst1[i] -= 1\n            lst2[i]\
    \ += 1\n        end\n    end\n    \n    if length(lst1) != length(lst2)\n    \
    \    return \"NO\"\n    end\n    \n    even = findall(x -> x % 2 == 0, lst1)\n\
    \    \n    if length(even) == 0\n        return \"NO\"\n    end\n    \n    even\
    \ = Int64(length(even))\n    \n    for i = 1:length(lst1)\n        if lst1[i]\
    \ % 2 == 0 && lst2[i] % 2 != 0\n            lst1[i] += 1\n            lst2[i]\
    \ -= 1\n        end\n    end\n    \n    if length(lst1) != length(lst2)\n    \
    \    return \"NO\"\n    end\n    \n    return \"YES\"\nend\n</cell>\n<code language=julia-1.5>\n\
    exchange([1,2,3,4,5], [1,5,3,6,4])\n</cell>\n<text>\nProblem 7\nWrite a function\
    \ that takes two vectors of integers, and returns a vector where each element\
    \ is the sum of the corresponding elements of the input vectors.\nFor example,\
    \ sum([1, 2, 3], [4, 5, 6]) should return [5, 7, 9].\nWrite a function that takes\
    \ two vectors of integers, and returns a vector where each element is the product\
    \ of the corresponding elements of the input vectors.\nFor example, prod([1, 2,\
    \ 3], [4, 5, 6]) should return [120, 60, 36].\nWrite a function that takes two\
    \ vectors of integers, and returns a vector where each element is the maximum\
    \ of the corresponding elements of the input vectors.\nFor example, max([1, 2,\
    \ 3], [4, 5, 6]) should return [4, 5, 6].\nWrite a function that takes two vectors\
    \ of integers, and returns a vector where each element is the minimum of the corresponding\
    \ elements of the input vectors.\nFor example, min([1, 2, 3], [4, 5, 6]) should\
    \ return [1, 4, 3].\nWrite a function that takes two vectors of integers, and\
    \ returns a vector where each element is the absolute value of the corresponding\
    \ elements of the input vectors.\nFor example, abs([1, 2, 3], [4, 5, 6]) should\
    \ return [1, 1, 3].\nWrite a function that takes two vectors of integers, and\
    \ returns a vector where each element is the reciprocal of the corresponding elements\
    \ of the input vectors.\nFor example, inv([1, 2, 3], [4, 5, 6]) should return\
    \ [-0.5, -0.5, -0.5].\nWrite a function that takes two vectors of integers, and\
    \ returns a vector where each element is the exponential of the corresponding\
    \ elements of the input vectors.\nFor example, exp([1, 2, 3], [\nusing Test\n\n\
    @testset begin\n\ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2,\
    \ 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\
    )\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"\
    NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t\
    @test(candidate([100, 200], [200, 200]) == \"YES\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp75ot5um.jl:59\nin expression starting at\
    \ /tmp/tmpp75ot5um.jl:59\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp1mad1yb3.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1mad1yb3.jl:1\n\
    in expression starting at /tmp/tmp1mad1yb3.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    even = lst1[findall(x -> x % 2 == 0,\
    \ lst1)]\n    odd = lst2[findall(x -> x % 2 != 0, lst2)]\n    \n    if length(even)\
    \ == length(odd) == length(lst1)\n        return \"YES\"\n    else\n        return\
    \ \"NO\"\n    end\nend\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3,\
    \ 4], [1, 2, 3, 4])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4])\n</cell>\n<text>\nProblem 7\nWrite a function that takes a list\
    \ of numbers and returns the number of elements in the list that are greater than\
    \ the element in the second position. For example:\n    count_greater([1, 2, 3,\
    \ 4], [1, 5, 3, 4]) => 2\n    count_greater([1, 2, 3, 4], [1, 2, 3, 4]) => 0\n\
    \    count_greater([1, 2, 3, 4], [1, 2, 3, 4, 5]) => 1\n    count_greater([1,\
    \ 2, 3, 4], [1, 2, 3, 4, 5, 6]) => 0\n    count_greater([1, 2, 3, 4], [1, 2, 3,\
    \ 4, 5, 6, 7]) => 0\n    count_greater([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8])\
    \ => 0\n    count_greater([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9]) => 0\n  \
    \  count_greater([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) => 0\n    count_greater([1,\
    \ 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) => 0\n    count_greater([1, 2,\
    \ 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) => 0\n    count_greater([1,\
    \ 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) => 0\n    count_greater([1,\
    \ 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) => 0\n    count_greater([1,\
    \ 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) => 0\n    count_greater([1,\
    \ 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) => 0\n  \
    \  count_greater([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,\
    \ 15, 16, 17]) => 0\n    count_greater([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]) => 0\n    count_greater([1, 2, 3, 4],\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]) => 0\n\
    \    count_greater([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,\
    \ 15, 16, 17, 18, 19, 20]) => 0\n    count_greater([1, 2, 3, 4], [1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]) => 0\n    count_greater([1,\
    \ 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\
    \ 20, 21, 22]) => 0\n    count_greater([1, 2, \nusing Test\n\n@testset begin\n\
    \ncandidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa4dva0ev.jl:24\nin expression starting at\
    \ /tmp/tmpa4dva0ev.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmptf1scpmm.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptf1scpmm.jl:1\n\
    in expression starting at /tmp/tmptf1scpmm.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7ypdpvq2.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7ypdpvq2.jl:1\n\
    in expression starting at /tmp/tmp7ypdpvq2.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmprj2vtu27.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprj2vtu27.jl:1\n\
    in expression starting at /tmp/tmprj2vtu27.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0x1ywyys.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0x1ywyys.jl:1\n\
    in expression starting at /tmp/tmp0x1ywyys.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpr904pt36.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpr904pt36.jl:1\n\
    in expression starting at /tmp/tmpr904pt36.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp359f_5or.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp359f_5or.jl:1\n\
    in expression starting at /tmp/tmp359f_5or.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwzfwrk9y.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwzfwrk9y.jl:1\n\
    in expression starting at /tmp/tmpwzfwrk9y.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdns0eo_4.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdns0eo_4.jl:1\n\
    in expression starting at /tmp/tmpdns0eo_4.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpbz7ig367.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbz7ig367.jl:1\n\
    in expression starting at /tmp/tmpbz7ig367.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    if length(lst1) != length(lst2)\n \
    \       return \"NO\"\n    end\n    \n    even = Int64[]\n    \n    for i in 1:length(lst1)\n\
    \        if lst1[i] % 2 == 0 && lst2[i] % 2 == 0\n            push!(even, lst1[i])\n\
    \            push!(even, lst2[i])\n        end\n    end\n    \n    if length(even)\
    \ == length(lst1)\n        return \"YES\"\n    else\n        return \"NO\"\n \
    \   end\nend\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 2,\
    \ 3, 4])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4], [1, 5, 3,\
    \ 4])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ and returns the sum of the numbers in the vector.\nFor example:\nsum([1, 2,\
    \ 3]) => 6\nsum([1, 5, 3]) => 8\nsum([1, 5, 3, 2]) => 10\nsum([1, 2, 3, 4, 5])\
    \ => 15\nsum([1, 2, 3, 4, 5, 6]) => 21\nWrite a function that takes a vector of\
    \ integers and returns the product of the numbers in the vector.\nFor example:\n\
    product([1, 2, 3]) => 6\nproduct([1, 5, 3]) => 15\nproduct([1, 5, 3, 2]) => 120\n\
    product([1, 2, 3, 4, 5]) => 15\nproduct([1, 2, 3, 4, 5, 6]) => 120\nproduct([1,\
    \ 2, 3, 4, 5, 6, 7]) => 243\nWrite a function that takes a vector of integers\
    \ and returns the maximum of the numbers in the vector.\nFor example:\nmax([1,\
    \ 2, 3]) => 3\nmax([1, 5, 3]) => 5\nmax([1, 5, 3, 2]) => 5\nmax([1, 2, 3, 4, 5])\
    \ => 5\nmax([1, 2, 3, 4, 5, 6]) => 6\nWrite a function that takes a vector of\
    \ integers and returns the minimum of the numbers in the vector.\nFor example:\n\
    min([1, 2, 3]) => 1\nmin([1, 5, 3]) => 1\nmin([1, 5, 3, 2]) => 1\nmin([1, 2, 3,\
    \ 4, 5]) => 1\nmin([1, 2, 3, 4, 5, 6]) => 1\nmin([1, 2, 3, 4, 5, 6, 7]) => 1\n\
    Write a function that takes a vector of integers and returns the number of elements\
    \ in the vector.\nFor example:\nlength([1, 2, 3]) => 3\nlength([1, 5, 3]) => 3\n\
    length([1, 5, 3, 2]) => 3\nlength([1, 2, 3, 4, 5]) => 4\nlength([1, 2, 3, 4, 5,\
    \ 6]) => 5\nlength([1, 2, 3, 4, 5, 6, 7]) => 5\nlength([1, 2, 3, 4, 5, 6, 7])\
    \ => 5\nlength([1, 2, 3, 4, 5, 6, 7]) => 5\nlength([1, 2, 3, 4, 5, 6, 7]) => 5\n\
    length([1, 2, 3, 4, 5, 6, 7]) => 5\nlength([1, 2, 3, 4, 5, 6, 7]) => 5\nlength([1,\
    \ 2, 3, 4, 5, 6, 7]) => 5\nlength([1, 2, 3, 4, 5, 6, 7]) => 5\nlength([1, 2, 3,\
    \ 4, 5, 6, 7]) => 5\nlength([1, 2, 3, 4, 5, 6, 7]) => 5\nlength([1, 2, 3, 4, 5,\
    \ 6, 7]) => 5\nlength([1, 2, 3, 4, 5, 6, 7]) => 5\nlength([1, 2, 3, 4, 5, 6, 7])\
    \ => \nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmnoqbma1.jl:34\nin expression starting at\
    \ /tmp/tmpmnoqbma1.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp4xj9jru0.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4xj9jru0.jl:1\n\
    in expression starting at /tmp/tmp4xj9jru0.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp5cepavoj.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5cepavoj.jl:1\n\
    in expression starting at /tmp/tmp5cepavoj.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    even = lst1[2:end] .== lst2[1:end-1]\n\
    \    even = even .& (lst1[2:end] .== lst2[2:end])\n    even = even .& (lst1[2:end]\
    \ .== lst2[1:end-1])\n    even = even .& (lst1[2:end] .== lst2[2:end])\n    even\
    \ = even .& (lst1[2:end] .== lst2[1:end-1])\n    even = even .& (lst1[2:end] .==\
    \ lst2[2:end])\n    even = even .& (lst1[2:end] .== lst2[1:end-1])\n    even =\
    \ even .& (lst1[2:end] .== lst2[2:end])\n    even = even .& (lst1[2:end] .== lst2[1:end-1])\n\
    \    even = even .& (lst1[2:end] .== lst2[2:end])\n    even = even .& (lst1[2:end]\
    \ .== lst2[1:end-1])\n    even = even .& (lst1[2:end] .== lst2[2:end])\n    even\
    \ = even .& (lst1[2:end] .== lst2[1:end-1])\n    even = even .& (lst1[2:end] .==\
    \ lst2[2:end])\n    even = even .& (lst1[2:end] .== lst2[1:end-1])\n    even =\
    \ even .& (lst1[2:end] .== lst2[2:end])\n    even = even .& (lst1[2:end] .== lst2[1:end-1])\n\
    \    even = even .& (lst1[2:end] .== lst2[2:end])\n    even = even .& (lst1[2:end]\
    \ .== lst2[1:end-1])\n    even = even .& (lst1[2:end] .== lst2[2:end])\n    even\
    \ = even .& (lst1[2:end] .== lst2[1:end-1])\n    even = even .& (lst1[2:end] .==\
    \ lst2[2:end])\n    even = even .& (lst1[2:end] .== lst2[1:end-1])\n    even =\
    \ even .& (lst1[2:end] .== lst2[2:end])\n    even = even .& (lst1[2:end] .== lst2[1:end-1])\n\
    \    even = even .& (lst1[2:end] .== lst2[2:end])\n    even = even .& (lst1[2:end]\
    \ .== lst2[1:end-1])\n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\
    \t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4,\
    \ 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpamppcwe7.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpamppcwe7.jl:1\n\
    in expression starting at /tmp/tmpamppcwe7.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    even = lst1[findall(x -> x % 2 == 0,\
    \ lst1)]\n    odd = lst2[findall(x -> x % 2 != 0, lst2)]\n    \n    if length(even)\
    \ == length(odd) && length(even) == length(lst1)\n        return \"YES\"\n   \
    \ else\n        return \"NO\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    exchange([1, 2, 3, 4], [1, 2, 3, 4])\n</cell>\n<code language=julia-1.5>\nexchange([1,\
    \ 2, 3, 4], [1, 5, 3, 4])\n</cell>\n<text>\nProblem 8\nWrite a function that takes\
    \ a list of numbers and returns the sum of the numbers in the list.\n    For example:\n\
    \    sum([1, 2, 3]) => 6\n    sum([1, 4, 9, 16]) => 42\n    sum([1, 4, 9, 16,\
    \ 25]) => 50\n    sum([1, 4, 9, 16, 25, 36]) => 55\n    sum([1, 4, 9, 16, 25,\
    \ 36, 49]) => 59\n    sum([1, 4, 9, 16, 25, 36, 49, 64]) => 66\n    sum([1, 4,\
    \ 9, 16, 25, 36, 49, 64, 81]) => 71\n    sum([1, 4, 9, 16, 25, 36, 49, 64, 81,\
    \ 100]) => 78\n    sum([1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121]) => 84\n  \
    \  sum([1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144]) => 90\n    sum([1, 4,\
    \ 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 168]) => 96\n    sum([1, 4, 9, 16,\
    \ 25, 36, 49, 64, 81, 100, 121, 144, 168, 192]) => 100\n    sum([1, 4, 9, 16,\
    \ 25, 36, 49, 64, 81, 100, 121, 144, 168, 192, 207]) => 100\n    sum([1, 4, 9,\
    \ 16, 25, 36, 49, 64, 81, 100, 121, 144, 168, 192, 207, 230]) => 100\n    sum([1,\
    \ 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 168, 192, 207, 230, 256]) => 100\n\
    \    sum([1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 168, 192, 207, 230,\
    \ 256, 271]) => 100\n    sum([1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144,\
    \ 168, 192, 207, 230, 256, 271, 288]) => 100\n    sum([1, 4, 9, 16, 25, 36, 49,\
    \ 64, 81, 100, 121, 144, 168, 192, 207, 230, 256, 271, 288, 303]) => 100\n   \
    \ sum([1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 168, 192, 207, 230, 256,\
    \ 271, \nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp2pz4iyu.jl:24\nin expression starting at\
    \ /tmp/tmpp2pz4iyu.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmps7svyzux.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps7svyzux.jl:1\n\
    in expression starting at /tmp/tmps7svyzux.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgbdt8tbi.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgbdt8tbi.jl:1\n\
    in expression starting at /tmp/tmpgbdt8tbi.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3d_tm9xq.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3d_tm9xq.jl:1\n\
    in expression starting at /tmp/tmp3d_tm9xq.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0czba4vn.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0czba4vn.jl:1\n\
    in expression starting at /tmp/tmp0czba4vn.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpksrljwzo.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpksrljwzo.jl:1\n\
    in expression starting at /tmp/tmpksrljwzo.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpz0v9ps5q.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpz0v9ps5q.jl:1\n\
    in expression starting at /tmp/tmpz0v9ps5q.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpnj0q1aw2.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpnj0q1aw2.jl:1\n\
    in expression starting at /tmp/tmpnj0q1aw2.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp95_eq6av.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp95_eq6av.jl:1\n\
    in expression starting at /tmp/tmp95_eq6av.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9s_f65ib.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9s_f65ib.jl:1\n\
    in expression starting at /tmp/tmp9s_f65ib.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    even = lst1[findall(x -> x % 2 == 0,\
    \ lst1)]\n    odd = lst2[findall(x -> x % 2 == 1, lst2)]\n    \n    if length(even)\
    \ == length(odd) == length(lst1) \n        return \"YES\"\n    else\n        return\
    \ \"NO\"\n    end\nend\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3,\
    \ 4], [1, 2, 3, 4])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4])\n</cell>\n<text>\nProblem 8\nWrite a function that takes a list\
    \ of numbers and returns the number of elements in the list that are less than\
    \ or equal to 10.\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl91nwglr.jl:24\nin expression starting at\
    \ /tmp/tmpl91nwglr.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpljlhwx7k.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpljlhwx7k.jl:1\n\
    in expression starting at /tmp/tmpljlhwx7k.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpcsqg9xnc.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcsqg9xnc.jl:1\n\
    in expression starting at /tmp/tmpcsqg9xnc.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmps3y_5zrm.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps3y_5zrm.jl:1\n\
    in expression starting at /tmp/tmps3y_5zrm.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpba9isyf1.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpba9isyf1.jl:1\n\
    in expression starting at /tmp/tmpba9isyf1.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    even = filter(x -> x % 2 == 0, lst1)\n\
    \    odd = filter(x -> x % 2 != 0, lst1)\n    \n    if length(even) == length(odd)\
    \ && length(even) == length(lst2)\n        return \"YES\"\n    else\n        return\
    \ \"NO\"\n    end\nend\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3,\
    \ 4], [1, 2, 3, 4])\n</cell>\n<code language=julia-1.5>\nexchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4])\n</cell>\n<text>\nProblem 3\nWrite a function that takes in a\
    \ list of numbers, and returns the sum of the numbers in the list.\n    For example:\n\
    \    sum([1, 2, 3]) => 6\n    sum([1, -2, 3, -4]) => 0\n    sum([1, -2, 3, -4,\
    \ 5]) => 10\n    sum([1, 2, 3, 4, 5]) => 15\n    sum([1, 2, 3, 4, 5, 6]) => 21\n\
    \    sum([1, 2, 3, 4, 5, 6, 7]) => 42\n    sum([1, 2, 3, 4, 5, 6, 7, 8]) => 85\n\
    \    sum([1, 2, 3, 4, 5, 6, 7, 8, 9]) => 141\n    sum([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10]) => 233\n    sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) => 429\n    sum([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) => 739\n    sum([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11, 12, 13]) => 1041\n    sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\
    \ 13, 14]) => 1441\n    sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\
    \ => 2331\n    sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) =>\
    \ 4291\n    sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]) =>\
    \ 7391\n    sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\
    \ => 1041\n    sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,\
    \ 18, 19]) => 1441\n    sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\
    \ 16, 17, 18, 19, 20]) => 2331\n    sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\
    \ 13, 14, 15, 16, 17, 18, 19, 20, 21]) => 4291\n    sum([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]) => 7391\n    sum([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\
    \ 23]) => 1041\n    sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,\
    \ 17, 18, 19, 20, 21, 22, 23, 24]) => 1441\n    sum([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) => 2331\n \
    \   sum([1, 2, \nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxfgdd8bk.jl:24\nin expression starting at\
    \ /tmp/tmpxfgdd8bk.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = exchange;\n\t@test(candidate([1,\
    \ 2, 3, 4], [1, 2, 3, 4]) == \"YES\")\n\t@test(candidate([1, 2, 3, 4], [1, 5,\
    \ 3, 4]) == \"NO\")\n\t@test(candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\"\
    )\n\t@test(candidate([5, 7, 3], [2, 6, 4]) == \"YES\")\n\t@test(candidate([5,\
    \ 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200], [200, 200]) == \"YES\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpkctf9c42.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpkctf9c42.jl:1\n\
    in expression starting at /tmp/tmpkctf9c42.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"In this problem, you will implement a function that takes two lists\
    \ of numbers,\n    and determines whether it is possible to perform an exchange\
    \ of elements\n    between them to make lst1 a list of only even numbers.\n  \
    \  There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    \    If it is possible to exchange elements between the lst1 and lst2 to make\n\
    \    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return\
    \ \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the\
    \ input lists will be non-empty.\n    \"\"\"\nfunction exchange(lst1::Vector{Int64},\
    \ lst2::Vector{Int64})::String \n    \n    even = lst1[2:end] .== lst2[2:end]\n\
    \    even = even .* lst1[2:end] .== lst2[2:end]\n    even = even .* lst1[2:end]\
    \ .== lst2[2:end]\n    even = even .* lst1[2:end] .== lst2[2:end]\n    even =\
    \ even .* lst1[2:end] .== lst2[2:end]\n    even = even .* lst1[2:end] .== lst2[2:end]\n\
    \    even = even .* lst1[2:end] .== lst2[2:end]\n    even = even .* lst1[2:end]\
    \ .== lst2[2:end]\n    even = even .* lst1[2:end] .== lst2[2:end]\n    even =\
    \ even .* lst1[2:end] .== lst2[2:end]\n    even = even .* lst1[2:end] .== lst2[2:end]\n\
    \    even = even .* lst1[2:end] .== lst2[2:end]\n    even = even .* lst1[2:end]\
    \ .== lst2[2:end]\n    even = even .* lst1[2:end] .== lst2[2:end]\n    even =\
    \ even .* lst1[2:end] .== lst2[2:end]\n    even = even .* lst1[2:end] .== lst2[2:end]\n\
    \    even = even .* lst1[2:end] .== lst2[2:end]\n    even = even .* lst1[2:end]\
    \ .== lst2[2:end]\n    even = even .* lst1[2:end] .== lst2[2:end]\n    even =\
    \ even .* lst1[2:end] .== lst2[2:end]\n    even = even .* lst1[2:end] .== lst2[2:end]\n\
    \    even = even .* lst1[2:end] .== lst2[2:end]\n    even = even .* lst1[2:end]\
    \ .== lst2[2:end]\n    even = even .* lst1[2:end] .== lst2[2:end]\n    even =\
    \ even .* lst1[2:end] .== lst2[2:end]\n    even = even .* lst1[2:end] .== lst2[2:end]\n\
    \    even = even .* lst1[2:end] .== lst2[2:end]\n    even = even .* lst1[2:end]\
    \ .== lst2[2:end]\n    even = even .* lst1[2:\nusing Test\n\n@testset begin\n\n\
    candidate = exchange;\n\t@test(candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\
    )\n\t@test(candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\")\n\t@test(candidate([1,\
    \ 2, 3, 4], [2, 1, 4, 3]) == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 4])\
    \ == \"YES\")\n\t@test(candidate([5, 7, 3], [2, 6, 3]) == \"NO\")\n\t@test(candidate([3,\
    \ 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\")\n\t@test(candidate([100, 200],\
    \ [200, 200]) == \"YES\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjh30ykzw.jl:44\nin expression starting at\
    \ /tmp/tmpjh30ykzw.jl:44\n"
  exit_code: 1
  status: SyntaxError
