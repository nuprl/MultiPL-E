name: HumanEval_142_sum_squares
language: julia
results:
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if mod(x,3) == 0\n            sum =\
    \ sum + x^2\n        elseif mod(x,4) == 0\n            sum = sum + x^3\n     \
    \   else\n            sum = sum + x^4\n        end\n    end\n    return sum\n\
    end\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis does not provide an answer to the\
    \ question. To critique or request clarification from an author, leave a comment\
    \ below their post. - [From Review](/review/low-quality-posts/29278294)\n<|/ c\
    \ |>\n<| c |>\nI believe it does provide an answer to the question. He asked how\
    \ to write a function which would take a list of integers and return their sum.\
    \ He also asked how to write a function which would take a list of integers and\
    \ return their sum. He also asked how to write a function which would take a list\
    \ of integers and return their sum. He also asked how to write a function which\
    \ would take a list of integers and return their sum. He also asked how to write\
    \ a function which would take a list of integers and return their sum. He also\
    \ asked how to write a function which would take a list of integers and return\
    \ their sum. He also asked how to write a function which would take a list of\
    \ integers and return their sum. He also asked how to write a function which would\
    \ take a list of integers and return their sum. He also asked how to write a function\
    \ which would take a list of integers and return their sum. He also asked how\
    \ to write a function which would take a list of integers and return their sum.\n\
    <|/ c |>\n<| c |>\nHe also asked how to write a function which would take a list\
    \ of integers and return their sum. He also asked how to write a function which\
    \ would take a list of integers and return their sum. He also asked how to write\
    \ a function which would take a list of integers and return their sum. He also\
    \ asked how to write a function which would take a list of integers and return\
    \ their sum. He also asked how to write a function which would take a list of\
    \ integers and return their sum. He also asked how to write a function which would\
    \ take a list of integers and return their sum. He also asked how to write a function\
    \ which would take a list of integers and return their sum. He also asked how\
    \ to write a function which would take a list of integers and return their sum.\
    \ He also asked how to write a function which would take a list of integers and\
    \ return their sum.\n<|/ c |>\n<| c |>\nHe also asked how to write a function\
    \ which would take a list of \nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9zjfa6ke.jl:24\nin expression starting at\
    \ /tmp/tmp9zjfa6ke.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum\
    \ = sum + i^2\n        elseif i%4 == 0\n            sum = sum + i^3\n        else\n\
    \            sum = sum + i\n        end\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([-1,-5,2,-1,-5])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a list of integers and returns the sum of the squares of the integers\
    \ in the list. \n    \n    Examples:\n    For lst = [1,2,3] the output should\
    \ be 9\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]\
    \  the output should be -49\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4,\
    \ 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps0hn1qs1.jl:25\nin expression starting at\
    \ /tmp/tmps0hn1qs1.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum+=i^2\n\
    \        elseif i%4 == 0\n            sum+=i^3\n        else\n            sum+=i\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 10\nWrite\
    \ a function that takes a list of integers and returns the sum of the squares\
    \ of the integers in the list. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nExamples:\nFor lst = [1,2,3] the output should\
    \ be 6\nFor lst = []  the output should be 0\nFor lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nHint: You can use the function sum_squares() you defined earlier.\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkb1ircx8.jl:24\nin expression starting at\
    \ /tmp/tmpkb1ircx8.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum\
    \ = sum + i*i\n        elseif i%4 == 0\n            sum = sum + i*i*i\n      \
    \  else\n            sum = sum + i\n        end\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector of integers and returns the sum of the\
    \ squares of the odd entries in the vector. \nThe function shall not change the\
    \ entries in the vector whose indexes are not a multiple of 3. \nThe function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the vector whose indexes are not a multiple of 4. \nThe function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the vector whose indexes are not a multiple of 5 or 6. \nThe function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the vector whose indexes are not a multiple of 7 or 8. \nThe function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the vector whose indexes are not a multiple of 9 or 10. \nThe function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the vector whose indexes are not a multiple of 11 or 12. \nThe function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the vector whose indexes are not a multiple of 13 or 14. \nThe function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the vector whose indexes are not a multiple of 15 or 16. \nThe function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the vector whose indexes are not a multiple of 17 or 18. \nThe function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the vector whose indexes are not a multiple of 19 or 20. \nThe function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the vector whose indexes are not a multiple of 21 or 22. \nThe function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the vector whose indexes are not a multiple of 23. \nThe function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the vector whose indexes are not a multiple of 24. \nThe function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the vector whose indexes are not a multiple of 25. \nThe function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the vector whose indexes are not a multiple of 26. \nThe function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the \nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t\
    @test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphret6_xv.jl:25\nin expression starting at\
    \ /tmp/tmphret6_xv.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum = sum\
    \ + i*i\n        elseif i%4 == 0\n            sum = sum + i*i*i\n        else\n\
    \            sum = sum + i\n        end\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsm8r22fr.jl:24\nin expression starting at\
    \ /tmp/tmpsm8r22fr.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum = sum\
    \ + i*i\n        elseif i%4 == 0\n            sum = sum + i*i*i\n        else\n\
    \            sum = sum + i\n        end\n    end\n    return sum\nend\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThe question was about a vectorized solution. Your\
    \ solution does not use vectorization and thus is slower than the other solutions.\n\
    <|/ c |>\n<| c |>\nI agree with you. Vectorization is very important for performance\
    \ and I thought that my solution was a good example for vectorization. Thank you\
    \ for the comment.\n<|/ c |>\n<| a tags=julia,function,for-loop,if-statement |>\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjinsuyla.jl:24\nin expression starting at\
    \ /tmp/tmpjinsuyla.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n            sum\
    \ += i\n        else\n            sum -= i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code\
    \ language=julia-1.5>\nsum_squares([-1,-5,2,-1,-5])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that will take a list of integers and a number k. The function\
    \ will then return a list of integers whose entries are all multiples of k. \n\
    For example if k = 3 and lst = [1,2,3,4,5,6,7,8,9,10] the function should return\
    \ [3,6,9,12].\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx1h5qavp.jl:22\nin expression starting at\
    \ /tmp/tmpx1h5qavp.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum = sum\
    \ + i*i\n        elseif i%4 == 0\n            sum = sum + i*i*i\n        else\n\
    \            sum = sum + i\n        end\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx37z7avb.jl:24\nin expression starting at\
    \ /tmp/tmpx37z7avb.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum += i*i\n\
    \        elseif i%4 == 0\n            sum += i*i*i\n        else\n           \
    \ sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpljhkh9o8.jl:24\nin expression starting at\
    \ /tmp/tmpljhkh9o8.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \n    sum = 0\n    for x in lst\n        if x % 3 == 0 || x % 4 == 0\n\
    \            sum += x\n        else\n            sum *= x\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise 7\nWrite a function that takes\
    \ a list of integers and returns the sum of the squares of the integers in the\
    \ list. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall \nusing Test\n\n@testset begin\n\ncandidate =\
    \ sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9])\
    \ == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpboz1omnc.jl:23\nin expression starting at\
    \ /tmp/tmpboz1omnc.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 3 == 0 || x % 4 == 0\n     \
    \       sum += x\n        else\n            sum *= x\n        end\n    end\n \
    \   return sum\nend\n</cell>\n<code language=julia-1.0>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_squares([-1,-5,2,-1,-5])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that will take a list of integers and return a list\
    \ of all even numbers. \n    \n    Examples:\n    For lst = [1,2,3,4,5,6,7,8,9,10]\
    \ the output should be [2,4,6,8,10]\n    For lst = [] the output should be []\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8fq__r5y.jl:22\nin expression starting at\
    \ /tmp/tmp8fq__r5y.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum\
    \ += i*i\n        elseif i%4 == 0\n            sum += i*i*i\n        else\n  \
    \          sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that will take a list of integers and return a list of integers whose\
    \ entries are all positive.\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppw9u47fi.jl:25\nin expression starting at\
    \ /tmp/tmppw9u47fi.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for i = 1:length(lst)\n        if mod(i, 3) == 0\n      \
    \      sum += lst[i]^2\n        elseif mod(i, 4) == 0\n            sum += lst[i]^3\n\
    \        else\n            sum += lst[i]\n        end\n    end\n    return sum\n\
    end\n</code>\n<|/ a tags=julia,list |>\n<| a dscore=1 |>\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) ==\
    \ 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa4e09a2f.jl:24\nin expression starting at\
    \ /tmp/tmpa4e09a2f.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \n    sum = 0\n    for i = 1:length(lst)\n        if mod(i, 3) == 0\n\
    \            sum += lst[i]^2\n        elseif mod(i, 4) == 0\n            sum +=\
    \ lst[i]^3\n        else\n            sum += lst[i]\n        end\n    end\n  \
    \  return sum\nend\n</cell>\n<text>\nExercise 2\nWrite a function that will take\
    \ a list of integers and a number k. The function will return the sum of the integers\
    \ in the list whose indexes are a multiple of k. \nFor lst = [1,2,3,4,5,6,7,8,9,10]\
    \ and k = 3 the output should be 15\nFor lst = [1,2,3,4,5,6,7,8,9,10] and k =\
    \ 7 the output should be 45\nFor lst = [1,2,3,4,5,6,7,8,9,10] and k = 9 the output\
    \ should be 90\nFor lst = [1,2,3,4,5,6,7,8,9,10] and k = 10 the output should\
    \ be 100\nFor lst = [1,2,3,4,5,6,7,8,9,10] and k = 11 the output should be 110\n\
    For lst = [1,2,3,4,5,6,7,8,9,10] and k = 12 the output should be 120\nFor lst\
    \ = [1,2,3,4,5,6,7,8,9,10] and k = 13 the output should be 130\nFor lst = [1,2,3,4,5,6,7,8,9,10]\
    \ and k = 14 the output should be 140\nFor lst = [1,2,3,4,5,6,7,8,9,10] and k\
    \ = 15 the output should be 150\nFor lst = [1,2,3,4,5,6,7,8,9,10] and k = 16 the\
    \ output should be 160\nFor lst = [1,2,3,4,5,6,7,8,9,10] and k = 17 the output\
    \ should be 170\nFor lst = [1,2,3,4,5,6,7,8,9,10] and k = 18 the output should\
    \ be 180\nFor lst = [1,2,3,4,5,6,7,8,9,10] and k = 19 the output should be 190\n\
    For lst = [1,2,3,4,5,6,7,8,9,10] and k = 20 the output should be 200\nFor lst\
    \ = [1,2,3,4,5,6,7,8,9,10] and k = 21 the output should be 210\nFor lst = [1,2,3,4,5,6,7,8,9,10]\
    \ and k = 22 the output should be 220\nFor lst = [1,2,3,4,5,6,7,8,9,10] and k\
    \ = 23 the output should be 230\nFor lst = [1,2,3,4,5,6,7,8,9,10] and k = 24 the\
    \ output should be 240\nFor lst = [1,2,3,4,5,6,7,8,9,10] and k = 25 the output\
    \ should be 250\nFor lst = [1,2,3,4,5,6,7,8,9,10] and k = 26 the output should\
    \ be 260\nFor lst = [1,2,3,4,5,6,7,8,9,10] and k = 27 the output should be 270\n\
    For lst = [1,2,3,4,5,6,7,8,9,10] and k = 28 the output should be 280\nFor \nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2,\
    \ 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4thuavo9.jl:25\nin expression starting at\
    \ /tmp/tmp4thuavo9.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \n    sum = 0\n    for x in lst\n        if x % 3 == 0 && x % 4 == 0\n\
    \            sum += x\n        elseif x % 3 == 0\n            sum += x^2\n   \
    \     elseif x % 4 == 0\n            sum += x^3\n        else\n            sum\
    \ += x\n        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a list of integers and returns the number of elements\
    \ in the list that are greater than or equal to 3.\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3ffjfsys.jl:27\nin expression starting at\
    \ /tmp/tmp3ffjfsys.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \n    sum = 0\n    for index in lst\n        if index%3==0 || index%4==0\n\
    \            sum += index^2\n        else\n            sum += index\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a list as input and returns a list with the square of every number in\
    \ the list. \n    \n    Examples:\n    For lst = [1,2,3] the output should be\
    \ [1,4,9]\n    For lst = [-1,-5,2,-1,-5]  the output should be [-1,-5,4,-1,-5]\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpurd11bdi.jl:23\nin expression starting at\
    \ /tmp/tmpurd11bdi.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n       \
    \     sum += i\n        else\n            sum *= i\n        end\n    end\n   \
    \ return sum\nend\n</cell>\n<code language=julia-1.0>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_squares([1,2,3])\n</cell>\n\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) ==\
    \ 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplg81pqh0.jl:23\nin expression starting at\
    \ /tmp/tmplg81pqh0.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum\
    \ = sum + i^2\n        elseif i%4 == 0\n            sum = sum + i^3\n        else\n\
    \            sum = sum + i\n        end\n    end\n    return sum\nend\n</cell>\n\
    <text>\nExercise 4\nWrite a function that takes a vector of integers and returns\
    \ a vector of integers containing the squares of the integers in the input vector.\
    \ \n    \n    Examples:\n    For lst = [1,2,3] the output should be [1,2,3]\n\
    \    For lst = []  the output should be []\n    For lst = [-1,-5,2,-1,-5]  the\
    \ output should be [-1,-5,4,-1,-5]\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp582qxz43.jl:25\nin expression starting at\
    \ /tmp/tmp582qxz43.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum += i*i\n\
    \        elseif i%4 == 0\n            sum += i*i*i\n        else\n           \
    \ sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([-1,-5,2,-1,-5])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that will take a list of integers\
    \ and return a list of all integers whose squares are less than or equal to 100.\
    \ \n    \n    Examples:\n    For lst = [1,2,3] the output should be [1,4,9]\n\
    \    For lst = []  the output should be []\n    For lst = [-1,-5,2,-1,-5]  the\
    \ output should be [-1,-5,2,-1,-5,-9,-16,-25]\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd20x7csl.jl:24\nin expression starting at\
    \ /tmp/tmpd20x7csl.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum = sum\
    \ + i*i\n        elseif i%4 == 0\n            sum = sum + i*i*i\n        else\n\
    \            sum = sum + i\n        end\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdp9sici6.jl:24\nin expression starting at\
    \ /tmp/tmpdp9sici6.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n            sum\
    \ += i^2\n        else\n            sum += i\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=juli\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz0m48jhw.jl:22\nin expression starting at\
    \ /tmp/tmpz0m48jhw.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum\
    \ = sum + i^2\n        elseif i%4 == 0\n            sum = sum + i^3\n        else\n\
    \            sum = sum + i\n        end\n    end\n    return sum\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a list of integers and returns\
    \ the product of the entries in the list. \n    \n    Examples:\n    For lst =\
    \ [1,2,3] the output should be 6\n    For lst = []  the output should be 1\n \
    \   For lst = [-1,-5,2,-1,-5]  the output should be -36\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) ==\
    \ 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6660dkvv.jl:25\nin expression starting at\
    \ /tmp/tmp6660dkvv.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \n    sum = 0\n    for x in lst\n        if x % 3 == 0 && x % 4 == 0\n\
    \            sum += x\n        else\n            sum -= x\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a list of integers and returns the sum of the squares of the integers in the\
    \ list. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4.\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3mram951.jl:23\nin expression starting at\
    \ /tmp/tmp3mram951.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n            sum\
    \ += i\n        else\n            sum -= i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that will take a list of integers\
    \ and return a list of all integers whose squares are less than or equal to 100.\
    \ \n    \n    Examples:\n    For lst = [1,2,3,4,5,6,7,8,9,10] the output should\
    \ be [1,2,3,4,5,6,7,8,9,10]\n    For lst = [-1,-5,2,-1,-5]  the output should\
    \ be [-1,-5,2,-1,-5]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9])\
    \ == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgbq2hw7l.jl:22\nin expression starting at\
    \ /tmp/tmpgbq2hw7l.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum\
    \ = sum + i*i\n        elseif i%4 == 0\n            sum = sum + i*i*i\n      \
    \  else\n            sum = sum + i\n        end\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6e3z113e.jl:25\nin expression starting at\
    \ /tmp/tmp6e3z113e.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n            sum\
    \ += i\n        else\n            sum *= i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<text>\nExercise 7\nWrite a function that takes a list of integers\
    \ and returns the sum of the integers squared. \nThe function shall not change\
    \ the entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries \nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpautht11w.jl:22\nin expression starting at\
    \ /tmp/tmpautht11w.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum += i*i\n\
    \        elseif i%4 == 0\n            sum += i*i*i\n        else\n           \
    \ sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([-1,-5,2,-1,-5])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that will take a list of integers\
    \ and return a list of all positive integers less than or equal to the sum of\
    \ the integers in the list. \n    \n    Examples:\n    For lst = [1,2,3] the output\
    \ should be [1,2,3]\n    For lst = [-1,-5,2,-1,-5]  the output should be [1,2,3,4,5]\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfd7kfwmh.jl:24\nin expression starting at\
    \ /tmp/tmpfd7kfwmh.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n            sum\
    \ += i\n        else\n            sum *= i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code\
    \ language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=juli\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv1h2s1fp.jl:22\nin expression starting at\
    \ /tmp/tmpv1h2s1fp.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum += i*i\n\
    \        elseif i%4 == 0\n            sum += i*i*i\n        else\n           \
    \ sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpawns52z3.jl:24\nin expression starting at\
    \ /tmp/tmpawns52z3.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n            sum\
    \ += i*i\n        else\n            sum += i*i*i\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that will take a list of integers and return a new\
    \ list with only the even numbers from the original list. \nThe function shall\
    \ not change the original list. \nThe function shall not create a new list. \n\
    The function shall not use any loops. \nThe function shall not use any conditional\
    \ statements. \nThe function shall not use any loops or conditional statements.\
    \ \nThe function shall not use any loops or conditional statements. \nThe function\
    \ shall not use any loops or conditional statements. \nThe function shall not\
    \ use any loops or conditional statements. \nThe function shall not use any loops\
    \ or conditional statements. \nThe function shall not use any loops or conditional\
    \ statements. \nThe function shall not use any loops or conditional statements.\
    \ \nThe function shall not use any loops or conditional statements. \nThe function\
    \ shall not use any loops or conditional statements. \nThe function shall not\
    \ use any loops or conditional statements. \nThe function shall not use any loops\
    \ or conditional statements. \nThe function shall not use any loops or conditional\
    \ statements. \nThe function shall not use any loops or conditional statements.\
    \ \nThe function shall not use any loops or conditional statements. \nThe function\
    \ shall not use any loops or conditional statements. \nThe function shall not\
    \ use any loops or conditional statements. \nThe function shall not use any loops\
    \ or conditional statements. \nThe function shall not use any loops or conditional\
    \ statements. \nThe function shall not use any loops or conditional statements.\
    \ \nThe function shall not use any loops or conditional statements. \nThe function\
    \ shall not use any loops or conditional statements. \nThe function shall not\
    \ use any loops or conditional statements. \nThe function shall not use any loops\
    \ or conditional statements. \nThe function shall not use any loops or conditional\
    \ statements. \nThe function shall not use any loops or conditional statements.\
    \ \nThe function shall not use any loops or conditional statements. \nThe function\
    \ shall not use any loops or conditional statements. \nThe function shall not\
    \ use any loops or conditional statements. \nThe function shall not use any loops\
    \ or conditional statements. \nThe function shall not use any loops or conditional\
    \ \nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc1tus1ko.jl:22\nin expression starting at\
    \ /tmp/tmpc1tus1ko.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n       \
    \     sum += i\n        else\n            sum -= i\n        end\n    end\n   \
    \ return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that will take\
    \ a list of integers and return a list of all entries that are divisible by 3.\
    \ The function shall not change the entries in the list whose indexes are not\
    \ a multiple of 3. \nThe function shall then return the sum of all entries. \n\
    Examples:\nFor lst = [1,2,3] the output should be [3,3]\nFor lst = [-1,-5,2,-1,-5]\
    \  the output should be [-1,-5,2,-1,-5]\nFor lst = [1,2,3,4,5,6,7,8,9,10] the\
    \ output should be [3,7,9]\nFor lst = [-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,-1,-5,2,\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgadui6zh.jl:23\nin expression starting at\
    \ /tmp/tmpgadui6zh.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 3 == 0\n            sum += x^2\n\
    \        elseif x % 4 == 0\n            sum += x^3\n        else\n           \
    \ sum += x\n        end\n    end\n    return sum\nend\n</code>\n<|/ a tags=julia\
    \ |>\n<| c |>\nThanks for your answer. I am new to Julia and I do not know what\
    \ a vector is. I tried to run your code but I get an error saying \"UndefVarError:\
    \ Vector not defined\". Could you please tell me what a vector is?\n<|/ c |>\n\
    <| c |>\nA vector is a collection of numbers. In Julia a vector is defined as\
    \ `Vector{T}`, where `T` is the type of the elements in the vector. `Vector{Int}`\
    \ is a vector of `Int` elements. `Vector{Float64}` is a vector of `Float64` elements.\
    \ `Vector{String}` is a vector of `String` elements. `Vector{Any}` is a vector\
    \ of `Any` elements. `Vector{Any}` is a vector of `Any` elements. `Vector{Any}`\
    \ is a vector of `Any` elements. `Vector{Any}` is a vector of `Any` elements.\
    \ `Vector{Any}` is a vector of `Any` elements. `Vector{Any}` is a vector of `Any`\
    \ elements. `Vector{Any}` is a vector of `Any` elements. `Vector{Any}` is a vector\
    \ of `Any` elements. `Vector{Any}` is a vector of `Any` elements. `Vector{Any}`\
    \ is a vector of `Any` elements. `Vector{Any}` is a vector of `Any` elements.\
    \ `Vector{Any}` is a vector of `Any` elements. `Vector{Any}` is a vector of `Any`\
    \ elements. `Vector{Any}` is a vector of `Any` elements. `Vector{Any}` is a vector\
    \ of `Any` elements. `Vector{Any}` is a vector of `Any` elements. `Vector{Any}`\
    \ is a vector of `Any` elements. `Vector{Any}` is a vector of `Any` elements.\
    \ `Vector{Any}` is a vector of `Any` elements. `Vector{Any}` is a vector of `Any`\
    \ elements. `Vector{Any}` is a vector of `Any` elements. `Vector{Any}` is a vector\
    \ of `Any` elements. `Vector{Any}` is a vector of `Any` elements. `Vector{Any}`\
    \ is a vector of `Any` elements. `Vector{Any}` is a vector of `Any` elements.\
    \ `Vector{Any}` is a vector of `Any` elements. `Vector{Any}` is a vector of `Any`\
    \ elements. `Vector{\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy6ioqwh3.jl:24\nin expression starting at\
    \ /tmp/tmpy6ioqwh3.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \n    sum = 0\n    for x in lst\n        if x % 3 == 0 && x % 4 == 0\n\
    \            sum += x\n        else\n            sum -= x\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of integers and returns\
    \ the sum of the squares of the odd entries in the vector. \nThe function shall\
    \ not change the entries in the vector whose indexes are not a multiple of 3.\
    \ The function shall then return the sum of all squared odd entries in the vector.\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3t98q6pm.jl:23\nin expression starting at\
    \ /tmp/tmp3t98q6pm.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 3 == 0 || x % 4 == 0\n     \
    \       sum += x\n        else\n            sum *= x\n        end\n    end\n \
    \   return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a list of integers and returns\
    \ the sum of the squares of the integers in the list. \nThe function shall not\
    \ change the entries in the list whose indexes are not a multiple of 3 or 4.\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps9vplgl4.jl:22\nin expression starting at\
    \ /tmp/tmps9vplgl4.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n       \
    \     sum += i\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpu6ccqpi8.jl:26\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 3 == 6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu6ccqpi8.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu6ccqpi8.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpu6ccqpi8.jl:27\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 13 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu6ccqpi8.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu6ccqpi8.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpu6ccqpi8.jl:29\n  Expression: candidate([1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1]) == 9\n   Evaluated: 0 == 9\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpu6ccqpi8.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu6ccqpi8.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpu6ccqpi8.jl:30\n  Expression: candidate([-1, -1, -1, -1, -1,\
    \ -1, -1, -1, -1]) == -3\n   Evaluated: 0 == -3\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu6ccqpi8.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu6ccqpi8.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpu6ccqpi8.jl:32\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: 0 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/std"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu6ccqpi8.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum\
    \ = sum + i^2\n        elseif i%4 == 0\n            sum = sum + i^3\n        else\n\
    \            sum = sum + i\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) ==\
    \ 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzr73vdvz.jl:30\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpzr73vdvz.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzr73vdvz.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpzr73vdvz.jl:31\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 146 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzr73vdvz.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzr73vdvz.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpzr73vdvz.jl:34\n  Expression: candidate([-1, -1, -1, -1, -1,\
    \ -1, -1, -1, -1]) == -3\n   Evaluated: -9 == -3\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzr73vdvz.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzr73vdvz.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpzr73vdvz.jl:36\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -10 == -126\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpzr73vdvz.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzr73vdvz.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpzr73vdvz.jl:37\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -165816 == 3030\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzr73vdvz.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 3 == 0 && x % 4 == 0\n     \
    \       sum += x\n        else\n            sum -= x\n        end\n    end\n \
    \   return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpr_e1664u.jl:27\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: -6 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpr_e1664u.jl:27 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr_e1664u.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpr_e1664u.jl:28\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: -14 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr_e1664u.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr_e1664u.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpr_e1664u.jl:30\n  Expression: candidate([1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1]) == 9\n   Evaluated: -9 == 9\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr_e1664u.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr_e1664u.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpr_e1664u.jl:31\n  Expression: candidate([-1, -1, -1, -1, -1,\
    \ -1, -1, -1, -1]) == -3\n   Evaluated: 9 == -3\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr_e1664u.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr_e1664u.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpr_e1664u.jl:33\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: 10 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 9 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr_e1664u.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n       \
    \     sum += i\n        else\n            sum *= i\n        end\n    end\n   \
    \ return sum\nend\n</cell>\n<text>\nExercise 7\nWrite a function that takes a\
    \ list of integers and returns the sum of all even numbers in the list.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2,\
    \ 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdte5fqk8.jl:23\nin expression starting at\
    \ /tmp/tmpdte5fqk8.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n            sum\
    \ += i\n        else\n            sum *= i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a list of integers\
    \ and returns the product of the entries in the list if they are all positive.\
    \ \nThe function shall not change the entries in the list whose entries are negative.\
    \ \nThe function shall then return the product of the entries. \nThe function\
    \ shall throw an error if the list is empty.\nusing Test\n\n@testset begin\n\n\
    candidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2cikjen5.jl:22\nin expression starting at\
    \ /tmp/tmp2cikjen5.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 3 == 0\n            sum += x\
    \ * x\n        elseif x % 4 == 0\n            sum += x * x\n        else\n   \
    \         sum += x\n        end\n    end\n    return sum\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\
    \t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\
    \t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1,\
    \ -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmigfh6fa.jl:29\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpmigfh6fa.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmigfh6fa.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpmigfh6fa.jl:30\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 98 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmigfh6fa.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmigfh6fa.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpmigfh6fa.jl:33\n  Expression: candidate([-1, -1, -1, -1, -1,\
    \ -1, -1, -1, -1]) == -3\n   Evaluated: -9 == -3\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmigfh6fa.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmigfh6fa.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpmigfh6fa.jl:35\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -10 == -126\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpmigfh6fa.jl:35 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmigfh6fa.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpmigfh6fa.jl:36\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: 12936 == 3030\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/ju"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmigfh6fa.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 3 == 0\n            sum += x\n\
    \        elseif x % 4 == 0\n            sum += x*x\n        else\n           \
    \ sum += x*x*x\n        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that will take a list of integers and return a new list\
    \ where each entry is the sum of the squares of the entries in the original list.\
    \ \n    \n    Examples:\n    For lst = [1,2,3] the output should be [1,4,9]\n\
    \    For lst = []  the output should be []\n    For lst = [-1,-5,2,-1,-5]  the\
    \ output should be [-1,-5,4,-9,25]\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmvea6ujd.jl:24\nin expression starting at\
    \ /tmp/tmpmvea6ujd.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 3 == 0\n            sum += x\
    \ * x\n        elseif x % 4 == 0\n            sum += x * x\n        else\n   \
    \         sum += x\n        end\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that will take a list of integers and a number k.\
    \ The function shall then remove all entries in the list whose index is less than\
    \ or equal to k. \n    \n    Examples:\n    For lst = [1,2,3,4,5,6,7,8,9,10],\
    \ k = 3 the output should be [4,5,6,7,8,9,10]\n    For lst = [1,2,3,4,5,6,7,8,9,10],\
    \ k = 5 the output should be [1,2,3,4,5,6,7,8,9,10]\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\
    \t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\
    \t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1,\
    \ -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0q7xlqmu.jl:24\nin expression starting at\
    \ /tmp/tmp0q7xlqmu.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum += i*i\n\
    \        elseif i%4 == 0\n            sum += i*i*i\n        else\n           \
    \ sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.0>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_squares([1,2,3])\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprqjocqqc.jl:24\nin expression starting at\
    \ /tmp/tmprqjocqqc.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \n    sum = 0\n    for x in lst\n        if x % 3 == 0\n            sum\
    \ += x*x\n        elseif x % 4 == 0\n            sum += x*x\n        else\n  \
    \          sum += x\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\nExercise 4\nWrite a\
    \ function that will take a list of integers and a number k. The function will\
    \ return the sum of the integers in the list whose index is less than or equal\
    \ to k. \n    \n    Examples:\n    For lst = [1,2,3,4,5,6,7] and k = 3 the output\
    \ should be 15\n    For lst = [1,2,3,4,5,6,7] and k = 7 the output should be 0\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpunxb4r26.jl:25\nin expression starting at\
    \ /tmp/tmpunxb4r26.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 3 == 0\n            sum += x^2\n\
    \        elseif x % 4 == 0\n            sum += x^3\n        else\n           \
    \ sum += x\n        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that will take a list of integers and return a new list\
    \ where all entries are multiplied by 2 except for the entries whose indexes are\
    \ a multiple of 3. \n    \n    Examples:\n    For lst = [1,2,3] the output should\
    \ be [2,4,6]\n    For lst = [-1,-5,2,-1,-5]  the output should be [-2,-4,-6,-6,-8]\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd48hii_l.jl:24\nin expression starting at\
    \ /tmp/tmpd48hii_l.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum+=i^2\n\
    \        elseif i%4 == 0\n            sum+=i^3\n        else\n            sum+=i\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<text>\nExercise 3\nWrite a function that will\
    \ take a list of integers and return a list of all entries that are divisible\
    \ by 3. The function shall not change the entries in the list whose indexes are\
    \ not a multiple of 3. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    For lst = [1,2,3] the output should be [1,3]\n  \
    \  For lst = []  the output should be []\n    For lst = [-1,-5,2,-1,-5]  the output\
    \ should be [-1,-5]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzak2rttn.jl:24\nin expression starting at\
    \ /tmp/tmpzak2rttn.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum = sum\
    \ + i*i\n        elseif i%4 == 0\n            sum = sum + i*i*i\n        else\n\
    \            sum = sum + i\n        end\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.0>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_squares([-1,-5,2,-1,-5])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ will take a list of integers and a number k. The function shall then return\
    \ the number of entries in the list whose index is less than or equal to k. \n\
    For lst = [1,2,3,4,5,6,7,8,9,10] and k = 3 the output should be 4\nFor lst = [1,2,3,4,5,6,7,8,9,10]\
    \ and k = 9 the output should be 10\nFor lst = [1,2,3,4,5,6,7,8,9,10] and k =\
    \ 11 the output should be 0\nFor lst = [1,2,3,4,5,6,7,8,9,10] and k = 12 the output\
    \ should be 0\nFor lst = [1,2,3,4,5,6,7,8,9,10] and k = 13 the output should be\
    \ 0\nFor lst = [1,2,3,4,5,6,7,8,9,10] and k = 14 the output should be 0\nFor lst\
    \ = [1,2,3,4,5,6,7,8,9,10] and k = 15 the output should be 0\nFor lst = [1,2,3,4,5,6,7,8,9,10]\
    \ and k = 16 the output should be 0\nFor lst = [1,2,3,4,5,6,7,8,9,10] and k =\
    \ 17 the output should be 0\nFor lst = [1,2,3,4,5,6,7,8,9,10] and k = 18 the output\
    \ should be 0\nFor lst = [1,2,3,4,5,6,7,8,9,10] and k = 19 the output should be\
    \ 0\nFor lst = [1,2,3,4,5,6,7,8,9,10] and k = 20 the output should be 0\nFor lst\
    \ = [1,2,3,4,5,6,7,8,9,10] and k = 21 the output should be 0\nFor lst = [1,2,3,4,5,6,7,8,9,10]\
    \ and k = 22 the output should be 0\nFor lst = [1,2,3,4,5,6,7,8,9,10] and k =\
    \ 23 the output should be 0\nFor lst = [1,2,3,4,5,6,7,8,9,10] and k = 24 the output\
    \ should be 0\nFor lst = [1,2,3,4,5,6,7,8,9,10] and k = 25 the output should be\
    \ 0\nFor lst = [1,2,3,4,5,6,7,8,9,10] and k = 26 the output should be 0\nFor lst\
    \ = [1,2,3,4,5,6,7,8,9,10] and k = 27 the output should be 0\nFor lst = [1,2,3,4,5,6,7,8,9,10]\
    \ and k = 28 the output should be 0\nFor lst\nusing Test\n\n@testset begin\n\n\
    candidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9t8js2_5.jl:24\nin expression starting at\
    \ /tmp/tmp9t8js2_5.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum\
    \ = sum + i^2\n        elseif i%4 == 0\n            sum = sum + i^3\n        else\n\
    \            sum = sum + i\n        end\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([-1,-5,2,-1,-5])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ will take a list of integers and return a new list with only the even numbers\
    \ from the original list. \nThe function shall not change the original list.\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiig2g9by.jl:25\nin expression starting at\
    \ /tmp/tmpiig2g9by.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum\
    \ = sum + i*i\n        elseif i%4 == 0\n            sum = sum + i*i*i\n      \
    \  else\n            sum = sum + i\n        end\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp3f05b08.jl:25\nin expression starting at\
    \ /tmp/tmpp3f05b08.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum = sum\
    \ + i^2\n        elseif i%4 == 0\n            sum = sum + i^3\n        else\n\
    \            sum = sum + i\n        end\n    end\n    return sum\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a list of integers and returns\
    \ the sum of the squares of the integers in the list. \n    \n    Examples:\n\
    \    For lst = [1,2,3] the output should be 9\n    For lst = []  the output should\
    \ be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -27\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp11wdx2z0.jl:24\nin expression starting at\
    \ /tmp/tmp11wdx2z0.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \n    sum = 0\n    for x in lst\n        if x % 3 == 0 || x % 4 == 0\n\
    \            sum += x\n        else\n            sum *= x\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a list of integers and returns the sum of the squares of the integers in the\
    \ list. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4.\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdfu_pd8w.jl:23\nin expression starting at\
    \ /tmp/tmpdfu_pd8w.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \n    sum = 0\n    for x in lst\n        if x % 3 == 0 && x % 4 == 0\n\
    \            sum += x\n        else\n            sum += x*x\n        end\n   \
    \ end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) ==\
    \ 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps66pnibg.jl:23\nin expression starting at\
    \ /tmp/tmps66pnibg.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \n    sum = 0\n    for x in lst\n        if mod(x,3) == 0\n          \
    \  sum = sum + x^2\n        elseif mod(x,4) == 0\n            sum = sum + x^3\n\
    \        else\n            sum = sum + x\n        end\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code\
    \ language=julia-1.5>\nsum_squares([-1,-5,2,-1,-5])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that will take a list of integers and return a list of all\
    \ entries that are divisible by 3 or 4.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4,\
    \ 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkxq26hej.jl:25\nin expression starting at\
    \ /tmp/tmpkxq26hej.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n            sum\
    \ += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([-1,-5,2,-1,-5])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that will take a list of integers\
    \ and return a list of integers whose entries are all positive.\nusing Test\n\n\
    @testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\
    \t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\
    \t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1,\
    \ -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe0xocu0w.jl:20\nin expression starting at\
    \ /tmp/tmpe0xocu0w.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n       \
    \     sum += i\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7ec_d4d0.jl:26\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 3 == 6\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7ec_d4d0.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7ec_d4d0.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp7ec_d4d0.jl:27\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 13 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7ec_d4d0.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7ec_d4d0.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp7ec_d4d0.jl:29\n  Expression: candidate([1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1]) == 9\n   Evaluated: 0 == 9\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp7ec_d4d0.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7ec_d4d0.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp7ec_d4d0.jl:30\n  Expression: candidate([-1, -1, -1, -1, -1,\
    \ -1, -1, -1, -1]) == -3\n   Evaluated: 0 == -3\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7ec_d4d0.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7ec_d4d0.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp7ec_d4d0.jl:32\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: 0 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/std"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7ec_d4d0.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if mod(x,3) == 0\n            sum =\
    \ sum + x^2\n        elseif mod(x,4) == 0\n            sum = sum + x^3\n     \
    \   else\n            sum = sum + x\n        end\n    end\n    return sum\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that will take a list of integers\
    \ and a number as input. The function shall then return the sum of the entries\
    \ in the list that \n    are divisible by the number. \n    \n    Examples:\n\
    \    For lst = [1,2,3,4,5,6,7,8,9,10] the output should be 45\n    For lst = [-1,-5,2,-1,-5]\
    \  the output should be 0\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4,\
    \ 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr35x7wzc.jl:24\nin expression starting at\
    \ /tmp/tmpr35x7wzc.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum\
    \ += i*i\n        elseif i%4 == 0\n            sum += i*i*i\n        else\n  \
    \          sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8uwn_cn9.jl:25\nin expression starting at\
    \ /tmp/tmp8uwn_cn9.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 3 == 0\n            sum += x*x\n\
    \        elseif x % 4 == 0\n            sum += x*x\n        else\n           \
    \ sum += x\n        end\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp08rnwood.jl:29\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp08rnwood.jl:29 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp08rnwood.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp08rnwood.jl:30\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 98 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp08rnwood.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp08rnwood.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp08rnwood.jl:33\n  Expression: candidate([-1, -1, -1, -1, -1,\
    \ -1, -1, -1, -1]) == -3\n   Evaluated: -9 == -3\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp08rnwood.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp08rnwood.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp08rnwood.jl:35\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -10 == -126\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp08rnwood.jl:35 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp08rnwood.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp08rnwood.jl:36\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: 12936 == 3030\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/ju"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp08rnwood.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 3 == 0\n            sum += x*x\n\
    \        elseif x % 4 == 0\n            sum += x*x*x\n        else\n         \
    \   sum += x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2,\
    \ 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqt81l3ro.jl:24\nin expression starting at\
    \ /tmp/tmpqt81l3ro.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum\
    \ = sum + i*i\n        elseif i%4 == 0\n            sum = sum + i*i*i\n      \
    \  else\n            sum = sum + i\n        end\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx4yj7qo5.jl:25\nin expression starting at\
    \ /tmp/tmpx4yj7qo5.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum += i*i\n\
    \        elseif i%4 == 0\n            sum += i*i*i\n        else\n           \
    \ sum += i\n        end\n    end\n    return sum\nend\n</code>\n<|/ a tags=julia,list\
    \ |>\n<| a dscore=0 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa1_9d236.jl:24\nin expression starting at\
    \ /tmp/tmpa1_9d236.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n       \
    \     sum += i\n        else\n            sum *= i\n        end\n    end\n   \
    \ return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) ==\
    \ 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpglevokk1.jl:23\nin expression starting at\
    \ /tmp/tmpglevokk1.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \n    sum = 0\n    for x in lst\n        if x % 3 == 0\n            sum\
    \ += x*x\n        elseif x % 4 == 0\n            sum += x*x*x\n        else\n\
    \            sum += x\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squ\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqnq3ymuy.jl:25\nin expression starting at\
    \ /tmp/tmpqnq3ymuy.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n            sum\
    \ += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([-1,-5,2,-1,-5])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a list of integers and\
    \ returns the sum of the squares of the integers except for those that are multiples\
    \ of 3 or 4.\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpntvro34z.jl:20\nin expression starting at\
    \ /tmp/tmpntvro34z.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n       \
    \     sum += i\n        else\n            sum *= i\n        end\n    end\n   \
    \ return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) ==\
    \ 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp87nlchv7.jl:23\nin expression starting at\
    \ /tmp/tmp87nlchv7.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n            sum\
    \ += i\n        else\n            sum -= i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code\
    \ language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=juli\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc241m02r.jl:22\nin expression starting at\
    \ /tmp/tmpc241m02r.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum += i*i\n\
    \        elseif i%4 == 0\n            sum += i*i*i\n        else\n           \
    \ sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9gsizzsy.jl:24\nin expression starting at\
    \ /tmp/tmp9gsizzsy.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum += i*i\n\
    \        elseif i%4 == 0\n            sum += i*i*i\n        else\n           \
    \ sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.4>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.4>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.4>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.4>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.4>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.4>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.4>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.4>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.4>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.4>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.4>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.4>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.4>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.4>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.4>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.4>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.4>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.4>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.4>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.4>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.4>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.4>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.4>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.4>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.4>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.4>\nsum_squares([1,2,3])\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_oht1l_4.jl:24\nin expression starting at\
    \ /tmp/tmp_oht1l_4.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n            sum\
    \ += i\n        else\n            sum -= i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a list of integers\
    \ and returns the sum of the squares of the integers in the list. \nThe function\
    \ shall not change the entries in the list whose indexes are not a multiple of\
    \ 3 or 4.\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkz3umao3.jl:22\nin expression starting at\
    \ /tmp/tmpkz3umao3.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 3 == 0\n            sum += x^2\n\
    \        elseif x % 4 == 0\n            sum += x^3\n        else\n           \
    \ sum += x\n        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a list of integers and returns the number of\
    \ positive integers in the list. \nFor lst = [1,2,3,4,5,6,7,8,9] the output should\
    \ be 9\nFor lst = [-1,-2,-3,-4,-5,-6,-7,-8,-9,-10] the output should be 10\nFor\
    \ lst = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]\
    \ the output should be 100\nFor lst = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]\
    \ the output should be 100\nFor lst = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprq8o049k.jl:24\nin expression starting at\
    \ /tmp/tmprq8o049k.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n            sum\
    \ += i\n        else\n            sum -= i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a list of integers and returns the sum of the\
    \ squares of the integers in the list. The function shall not change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcd3wke8w.jl:22\nin expression starting at\
    \ /tmp/tmpcd3wke8w.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n            sum\
    \ += i\n        else\n            sum -= i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that takes a list of integers\
    \ and returns the sum of the squares of the integers in the list. \nThe function\
    \ shall not change the entries in the list whose indexes are not a multiple of\
    \ 3 or 4. The function shall then return the sum of all entries. \nThe function\
    \ shall not use any looping constructs.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4,\
    \ 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkle36kp5.jl:22\nin expression starting at\
    \ /tmp/tmpkle36kp5.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n       \
    \     sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a list of integers and returns the sum of the\
    \ squares of the integers in the list. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 9\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -27\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_brnv4i3.jl:21\nin expression starting at\
    \ /tmp/tmp_brnv4i3.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum += i*i\n\
    \        elseif i%4 == 0\n            sum += i*i*i\n        else\n           \
    \ sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that will take a list of integers and return the sum of\
    \ all even entries in the list. The function shall not change the entries in the\
    \ list whose indexes are not a multiple of 2. \n    \n    Examples:\n    For lst\
    \ = [1,2,3,4,5,6,7,8,9,10] the output should be 21\n    For lst = [-1,-5,2,-1,-5,-4,-3,-2,-1]\
    \ the output should be -23\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4,\
    \ 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprkar5awn.jl:24\nin expression starting at\
    \ /tmp/tmprkar5awn.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum = sum\
    \ + i^2\n        elseif i%4 == 0\n            sum = sum + i^3\n        else\n\
    \            sum = sum + i\n        end\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdi1v_e77.jl:24\nin expression starting at\
    \ /tmp/tmpdi1v_e77.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum += i*i\n\
    \        elseif i%4 == 0\n            sum += i*i*i\n        else\n           \
    \ sum += i\n        end\n    end\n    return sum\nend\n</code>\n<|/ a tags=julia\
    \ |>\n<| c |>\nThanks for your answer! I appreciate it. I was wondering if there\
    \ is a way to do this without using loops. I tried to do it with map, but I couldn't\
    \ get it to work. Do you know if there is a way to do this with map?\n<|/ c |>\n\
    <| c |>\nI added a solution without loops.\n<|/ c |>\n<| c |>\nThanks again for\
    \ your help! I appreciate it!\n<|/ c |>\n<| a dscore=1 |>\nA solution without\
    \ loops:\n<code>\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t\
    @test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj3c5sds1.jl:24\nin expression starting at\
    \ /tmp/tmpj3c5sds1.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \n    sum = 0\n    for i = 1:length(lst)\n        if mod(i, 3) == 0\n\
    \            sum += lst[i]\n        elseif mod(i, 4) == 0\n            sum +=\
    \ lst[i]\n        else\n            sum += lst[i]*lst[i]\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjspiawge.jl:25\nin expression starting at\
    \ /tmp/tmpjspiawge.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n       \
    \     sum+=i\n        else\n            sum+=i*i\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ and returns a new vector where all entries are multiplied by 2 except for the\
    \ entries that are multiples of 3. The function shall not change the original\
    \ vector. \nFor example if the input vector is [1,2,3] the output vector should\
    \ be [2,4,6]\nFor example if the input vector is [1,2,3] the output vector should\
    \ be [2,4,6]\nFor example if the input vector is [1,2,3] the output vector should\
    \ be [2,4,6]\nFor example if the input vector is [1,2,3] the output vector should\
    \ be [2,4,6]\nFor example if the input vector is [1,2,3] the output vector should\
    \ be [2,4,6]\nFor example if the input vector is [1,2,3] the output vector should\
    \ be [2,4,6]\nFor example if the input vector is [1,2,3] the output vector should\
    \ be [2,4,6]\nFor example if the input vector is [1,2,3] the output vector should\
    \ be [2,4,6]\nFor example if the input vector is [1,2,3] the output vector should\
    \ be [2,4,6]\nFor example if the input vector is [1,2,3] the output vector should\
    \ be [2,4,6]\nFor example if the input vector is [1,2,3] the output vector should\
    \ be [2,4,6]\nFor example if the input vector is [1,2,3] the output vector should\
    \ be [2,4,6]\nFor example if the input vector is [1,2,3] the output vector should\
    \ be [2,4,6]\nFor example if the input vector is [1,2,3] the output vector should\
    \ be [2,4,6]\nFor example if the input vector is [1,2,3] the output vector should\
    \ be [2,4,6]\nFor example if the input vector is [1,2,3] the output vector should\
    \ be [2,4,6]\nFor example if the input vector is [1,2,3] the output vector should\
    \ be [2,4,6]\nFor example if the input vector is [1,2,3] the output vector should\
    \ be [2,4,6]\nFor example if the input vector is [1,2,3] the output vector should\
    \ be [2,4,6]\nFor example if the input vector is [1,2,3] the output vector should\
    \ be [2,4,6]\nFor example if the input vector is [1,2,3] the output vector should\
    \ be [2,4,6]\nFor example if the input vector is [1,2,3] the output vector should\
    \ be [2,4,6]\nFor example if the input vector is [1,2,3] the output vector should\
    \ be [2,4,6]\nFor example if the input vector is [1,2,3] the output vector should\
    \ be [\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1sg8ws4c.jl:23\nin expression starting at\
    \ /tmp/tmp1sg8ws4c.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 3 == 0\n            sum += x^2\n\
    \        elseif x % 4 == 0\n            sum += x^3\n        else\n           \
    \ sum += x\n        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a list of integers and returns the sum of the\
    \ squares of the integers in the list. The function shall not change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxqnkobrn.jl:24\nin expression starting at\
    \ /tmp/tmpxqnkobrn.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n       \
    \     sum+=i\n        else\n            sum+=i*i\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) ==\
    \ 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpab4r_nhe.jl:23\nin expression starting at\
    \ /tmp/tmpab4r_nhe.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n            sum\
    \ += i\n        else\n            sum *= i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code\
    \ language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=juli\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsehrc489.jl:22\nin expression starting at\
    \ /tmp/tmpsehrc489.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 3 == 0 && x % 4 == 0\n     \
    \       sum += x\n        else\n            sum += x * x\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.0>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_squares([-1,-5,2,-1,-5])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a list of integers and returns the sum\
    \ of the squares of the integers in the list if the integer is evenly divisible\
    \ by 3 or by 5 and 0 otherwise. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 5.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4zs_8ece.jl:22\nin expression starting at\
    \ /tmp/tmp4zs_8ece.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n       \
    \     sum += i\n        else\n            sum *= i\n        end\n    end\n   \
    \ return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) ==\
    \ 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp69cv3r0z.jl:23\nin expression starting at\
    \ /tmp/tmp69cv3r0z.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum\
    \ += i*i\n        elseif i%4 == 0\n            sum += i*i*i\n        else\n  \
    \          sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that will take a list of integers and will return\
    \ the number of elements in the list that are greater than or equal to 10. \n\
    The function shall not change the entries in the list whose indexes are not a\
    \ multiple of 3 or 4. The function shall then return the number of elements in\
    \ the list that are greater than or equal to 10.\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbrhhnp1f.jl:25\nin expression starting at\
    \ /tmp/tmpbrhhnp1f.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum\
    \ += i*i\n        elseif i%4 == 0\n            sum += i*i*i\n        else\n  \
    \          sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that will take a list of integers and return a new\
    \ list with only the even numbers from the original list. \n    \n    Examples:\n\
    \    For lst = [1,2,3,4,5,6,7,8,9,10] the output should be [2,4,6,8,10]\n    For\
    \ lst = [-1,-5,2,-1,-5]  the output should be [-1,-5,2]\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) ==\
    \ 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqwwsg36f.jl:25\nin expression starting at\
    \ /tmp/tmpqwwsg36f.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum\
    \ += i*i\n        elseif i%4 == 0\n            sum += i*i*i\n        else\n  \
    \          sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that will take a list of integers and a number k.\
    \ The function shall then return a list of all entries in the list whose index\
    \ is less than or equal to k. \n    \n    Examples:\n    For lst = [1,2,3,4,5,6,7,8,9]\
    \ and k = 3 the output should be [3,4,5,6,7,8,9]\n    For lst = [1,2,3,4,5,6,7,8,9]\
    \ and k = 7 the output should be []\n    For lst = [1,2,3,4,5,6,7,8,9] and k =\
    \ 10 the output should be []\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4,\
    \ 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsd06m5w6.jl:25\nin expression starting at\
    \ /tmp/tmpsd06m5w6.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 3 == 0 && x % 4 == 0\n     \
    \       sum += x\n        else\n            sum -= x\n        end\n    end\n \
    \   return sum\nend\n</code>\n<|/ a |>\n<| c |>\nThe function should return 0\
    \ if the list is empty. Your code returns 0 for an empty list.\n<|/ c |>\n<| c\
    \ |>\nThanks for pointing that out. I edited my answer accordingly.\n<|/ c |>\n\
    <| a tags=julia,list |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprqak3kom.jl:22\nin expression starting at\
    \ /tmp/tmprqak3kom.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n            sum\
    \ += i\n        else\n            sum -= i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<text>\nExercise 4\nWrite a function that takes a list of integers\
    \ and returns the sum of the squares of the integers in the list. \nThe function\
    \ shall not change the entries in the list whose indexes are not a multiple of\
    \ 3 or 4.\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf3gmji81.jl:22\nin expression starting at\
    \ /tmp/tmpf3gmji81.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum\
    \ = sum + i^2\n        elseif i%4 == 0\n            sum = sum + i^3\n        else\n\
    \            sum = sum + i\n        end\n    end\n    return sum\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a list of integers and returns\
    \ the sum of the squares of the integers in the list. \n    \n    Examples:\n\
    \    For lst = [1,2,3] the output should be 9\n    For lst = []  the output should\
    \ be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -25\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqgrd75hb.jl:25\nin expression starting at\
    \ /tmp/tmpqgrd75hb.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n            sum\
    \ += i\n        else\n            sum -= i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that will take a list of integers and return a list of all\
    \ even numbers in the list. \n    \n    Examples:\n    For lst = [1,2,3,4,5,6,7,8,9,10]\
    \ the output should be [2,4,6,8]\n    For lst = []  the output should be []\n\
    \    For lst = [-1,-5,2,-1,-5]  the output should be [-1,-5,2,-1,-5]\n    \"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi0ngwaqw.jl:22\nin expression starting at\
    \ /tmp/tmpi0ngwaqw.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum\
    \ += i*i\n        elseif i%4 == 0\n            sum += i*i*i\n        else\n  \
    \          sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.0>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_squares([\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpchodpy0m.jl:25\nin expression starting at\
    \ /tmp/tmpchodpy0m.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 3 == 0 || x % 4 == 0\n     \
    \       sum += x\n        else\n            sum *= x\n        end\n    end\n \
    \   return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=juli\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmsopztmt.jl:22\nin expression starting at\
    \ /tmp/tmpmsopztmt.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n       \
    \     sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([-1,-5,2,-1,-5])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a list of integers and\
    \ returns the number of integers in the list that are divisible by 3. The function\
    \ shall not change the list passed as argument. \nFor example the function should\
    \ return 2 for the list [1,2,3,4,5,6,7,8,9,10] and the function should return\
    \ 0 for the list [].\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzha5gg5k.jl:21\nin expression starting at\
    \ /tmp/tmpzha5gg5k.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum += i*i\n\
    \        elseif i%4 == 0\n            sum += i*i*i\n        else\n           \
    \ sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that will take a list of integers and return a list of all\
    \ entries that are divisible by 3 or 4.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4,\
    \ 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptmnwkjx0.jl:24\nin expression starting at\
    \ /tmp/tmptmnwkjx0.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum = sum\
    \ + i^2\n        elseif i%4 == 0\n            sum = sum + i^3\n        else\n\
    \            sum = sum + i\n        end\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdbjlqcu5.jl:24\nin expression starting at\
    \ /tmp/tmpdbjlqcu5.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum += i*i\n\
    \        elseif i%4 == 0\n            sum += i*i*i\n        else\n           \
    \ sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_h6_dwmy.jl:24\nin expression starting at\
    \ /tmp/tmp_h6_dwmy.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \n    sum = 0\n    for x in lst\n        if mod(x,3) == 0\n          \
    \  sum+=x*x\n        elseif mod(x,4) == 0\n            sum+=x*x\n        else\n\
    \            sum+=x\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9u6ip556.jl:25\nin expression starting at\
    \ /tmp/tmp9u6ip556.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \n    sum = 0\n    for x in lst\n        if x % 3 == 0\n            sum\
    \ += x^2\n        elseif x % 4 == 0\n            sum += x^3\n        else\n  \
    \          sum += x\n        end\n    end\n    return sum\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\
    \t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\
    \t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1,\
    \ -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjh81y2t2.jl:30\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpjh81y2t2.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjh81y2t2.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpjh81y2t2.jl:31\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 146 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjh81y2t2.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjh81y2t2.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpjh81y2t2.jl:34\n  Expression: candidate([-1, -1, -1, -1, -1,\
    \ -1, -1, -1, -1]) == -3\n   Evaluated: -9 == -3\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjh81y2t2.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjh81y2t2.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpjh81y2t2.jl:36\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -10 == -126\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpjh81y2t2.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjh81y2t2.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpjh81y2t2.jl:37\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -165816 == 3030\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjh81y2t2.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 3 == 0\n            sum += x\n\
    \        elseif x % 4 == 0\n            sum += x\n        else\n            sum\
    \ += x*x\n        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise\
    \ 10\nWrite a function that will take a list of integers and return the sum of\
    \ the squares of the integers in the list. The function shall not change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5b40cgf8.jl:24\nin expression starting at\
    \ /tmp/tmp5b40cgf8.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum += i*i\n\
    \        elseif i%4 == 0\n            sum += i*i*i\n        else\n           \
    \ sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise\
    \ 10\nWrite a function that takes a list of integers and returns the sum of the\
    \ squares of the integers in the list. \nThe function shall not change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entrie\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6avgesr_.jl:24\nin expression starting at\
    \ /tmp/tmp6avgesr_.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \n    sum = 0\n    for entry in lst\n        if mod(entry,3) == 0\n  \
    \          sum = sum + entry*entry\n        elseif mod(entry,4) == 0\n       \
    \     sum = sum + entry*entry*entry\n        else\n            sum = sum + entry\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares(lst)\n</cell>\n<text>\nExercise 2\nWrite a function that will take\
    \ a list of integers and return a list of integers whose entries are all positive.\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqz72634h.jl:25\nin expression starting at\
    \ /tmp/tmpqz72634h.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum+=i^2\n\
    \        elseif i%4 == 0\n            sum+=i^3\n        else\n            sum+=i\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 4\nWrite\
    \ a function that will take a list of integers and return a list of all entries\
    \ that are divisible by 3. The function shall not change the entries in the list\
    \ whose indexes are not a multiple of 3. The function shall then return the sum\
    \ of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should\
    \ be [1,3]\n    For lst = []  the output should be []\n    For lst = [-1,-5,2,-1,-5]\
    \  the output should be [-1,-5,2,-1,-5]\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuijt2yvh.jl:25\nin expression starting at\
    \ /tmp/tmpuijt2yvh.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n       \
    \     sum += i^2\n        else\n            sum += i\n        end\n    end\n \
    \   return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) ==\
    \ 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqt8yyk1p.jl:23\nin expression starting at\
    \ /tmp/tmpqt8yyk1p.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n       \
    \     sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([-1,-5,2,-1,-5])\n\
    </cell>\n<text>\nExercise 7: Write a function that takes a list of integers and\
    \ returns the sum of the squares of the integers in the list. \n    \n    Examples:\n\
    \    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should\
    \ be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphis1w7a2.jl:21\nin expression starting at\
    \ /tmp/tmphis1w7a2.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n            sum\
    \ += i\n        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that will take a list of integers and will return the sum of\
    \ all entries in the list that are a multiple of 3. The function shall not change\
    \ the entries in the list whose indexes are not a multiple of 3. \nThe function\
    \ shall then return the sum of all entries. \nExamples:\nFor lst = [1,2,3] the\
    \ output should be 6\nFor lst = []  the output should be 0\nFor lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nHint: Use a for loop to iterate through the list.\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg65nzm6c.jl:20\nin expression starting at\
    \ /tmp/tmpg65nzm6c.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n            sum\
    \ += i\n        else\n            sum *= i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector of integers\
    \ and returns the sum of the squares of the entries in the vector. \nThe function\
    \ shall not change the entries in the vector whose indexes are not a multiple\
    \ of 3 or 4.\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkryt9_ja.jl:22\nin expression starting at\
    \ /tmp/tmpkryt9_ja.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \n    sum = 0\n    for x in lst\n        if x % 3 == 0 && x % 4 == 0\n\
    \            sum += x\n        else\n            sum -= x\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise 10\nWrite a function that will\
    \ take a list of integers and return a list of all entries that are divisible\
    \ by 3 or 4.\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2264f6gn.jl:23\nin expression starting at\
    \ /tmp/tmp2264f6gn.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum\
    \ = sum + i^2\n        elseif i%4 == 0\n            sum = sum + i^3\n        else\n\
    \            sum = sum + i\n        end\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbt2e644u.jl:25\nin expression starting at\
    \ /tmp/tmpbt2e644u.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum\
    \ = sum + i^2\n        elseif i%4 == 0\n            sum = sum + i^3\n        else\n\
    \            sum = sum + i\n        end\n    end\n    return sum\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that will take a list of integers and return\
    \ a new list where all entries are divided by 2 except for the entries whose indexes\
    \ are a multiple of 3 and a multiple of 4. The function shall not change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be [1,3,3]\n    For lst = []  the output should be []\n  \
    \  For lst = [-1,-5,2,-1,-5]  the output should be [-1,-5,2,-3,-5]\n    \"\"\"\
    \nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc7lrdcp0.jl:25\nin expression starting at\
    \ /tmp/tmpc7lrdcp0.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum\
    \ = sum + i^2\n        elseif i%4 == 0\n            sum = sum + i^3\n        else\n\
    \            sum = sum + i\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) ==\
    \ 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5a1_wrs_.jl:30\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp5a1_wrs_.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5a1_wrs_.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp5a1_wrs_.jl:31\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 146 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5a1_wrs_.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5a1_wrs_.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp5a1_wrs_.jl:34\n  Expression: candidate([-1, -1, -1, -1, -1,\
    \ -1, -1, -1, -1]) == -3\n   Evaluated: -9 == -3\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5a1_wrs_.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5a1_wrs_.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp5a1_wrs_.jl:36\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -10 == -126\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp5a1_wrs_.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5a1_wrs_.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp5a1_wrs_.jl:37\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -165816 == 3030\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5a1_wrs_.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum = sum\
    \ + i*i\n        elseif i%4 == 0\n            sum = sum + i*i*i\n        else\n\
    \            sum = sum + i\n        end\n    end\n    return sum\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a list of integers and returns\
    \ the sum of the squares of the integers in the list. \nThe function shall not\
    \ change the entries in the list whose indexes are not a multiple of 3 or 4. The\
    \ function shall then return the sum of all entries. \nThe function shall not\
    \ change the entries in the list whose indexes are not a multiple of 3 or 4. The\
    \ function shall then return the sum of all entries. \nThe function shall not\
    \ change the entries in the list whose indexes are not a multiple of 3 or 4. The\
    \ function shall then return the sum of all entries. \nThe function shall not\
    \ change the entries in the list whose indexes are not a multiple of 3 or 4. The\
    \ function shall then return the sum of all entries. \nThe function shall not\
    \ change the entries in the list whose indexes are not a multiple of 3 or 4. The\
    \ function shall then return the sum of all entries. \nThe function shall not\
    \ change the entries in the list whose indexes are not a multiple of 3 or 4. The\
    \ function shall then return the sum of all entries. \nThe function shall not\
    \ change the entries in the list whose indexes are not a multiple of 3 or 4. The\
    \ function shall then return the sum of all entries. \nThe function shall not\
    \ change the entries in the list whose indexes are not a multiple of 3 or 4. The\
    \ function shall then return the sum of all entries. \nThe function shall not\
    \ change the entries in the list whose indexes are not a multiple of 3 or 4. The\
    \ function shall then return the sum of all entries. \nThe function shall not\
    \ change the entries in the list whose indexes are not a multiple of 3 or 4. The\
    \ function shall then return the sum of all entries. \nThe function shall not\
    \ change the entries in the list whose indexes are not a multiple of 3 or 4. The\
    \ function shall then return the sum of all entries. \nThe function shall not\
    \ change the entries in the list whose indexes are not a multiple of 3 or 4. The\
    \ function shall then return the sum of all entries. \nThe function shall not\
    \ change the entries in the list whose indexes are not a multiple of 3 or 4. The\
    \ function shall then return the sum of all entries. \nThe function shall not\
    \ change the entries in the list whose indexes are not a multiple of 3 or 4. The\
    \ function shall then return the sum of all entries. \nThe function shall not\
    \ change the entries in the list whose indexes are not a multiple of 3 or 4. The\
    \ function shall then return the sum of all entries. \nThe function shall not\
    \ change the entries in the list whose indexes are not a multiple of 3 or 4. The\
    \ function shall then return the sum of all entries. \nThe function shall not\
    \ change the entries in the list whose indexes are not a multiple of 3 or 4. The\
    \ function \nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgca0xui_.jl:24\nin expression starting at\
    \ /tmp/tmpgca0xui_.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \n    sum = 0\n    for index in lst\n        if index % 3 == 0 || index\
    \ % 4 == 0\n            sum += index\n        else\n            sum *= index\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that will take a list of integers and a number n. The function will\
    \ return the sum of the first n entries of the list. \n    \n    Examples:\n \
    \   For lst = [1,2,3,4,5,6,7,8,9,10] and n = 2 the output should be [3,7]\n  \
    \  For lst = [1,2,3,4,5,6,7,8,9,10] and n = 4 the output should be [15,21,25]\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4a06kg8a.jl:23\nin expression starting at\
    \ /tmp/tmp4a06kg8a.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 3 == 0\n            sum += x^2\n\
    \        elseif x % 4 == 0\n            sum += x^3\n        else\n           \
    \ sum += x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.0>\n\
    sum_squares(lst)\n</cell>\n<text>\nExercise 2\nWrite a function that will take\
    \ a list of integers and return a list of all even numbers in the list. \nFor\
    \ example if the input is lst = [1,2,3,4,5,6,7,8,9,10] the output should be [2,4,6,8,10].\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ a multiple of 2. \nThe function shall then return the sum of all entries. \n\
    For lst = [-1,-5,2,-1,-5]  the output should be [-2,-4,-6,-8,-10,-6,-4,-2]\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2,\
    \ 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl39by78h.jl:24\nin expression starting at\
    \ /tmp/tmpl39by78h.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum += i*i\n\
    \        elseif i%4 == 0\n            sum += i*i*i\n        else\n           \
    \ sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that takes a list of integers and returns the sum of the\
    \ squares of the integers in the list. \nThe function shall not change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entrie\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzfhlwo3t.jl:24\nin expression starting at\
    \ /tmp/tmpzfhlwo3t.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \n    sum = 0\n    for x in lst\n        if x % 3 == 0\n            sum\
    \ += x*x\n        elseif x % 4 == 0\n            sum += x*x\n        else\n  \
    \          sum += x\n        end\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a list of integers and returns the product\
    \ of the integers in the list. \nFor lst = [1,2,3] the output should be 6\nFor\
    \ lst = []  the output should be 1\nFor lst = [-1,-5,2,-1,-5]  the output should\
    \ be -36\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzi5lii84.jl:25\nin expression starting at\
    \ /tmp/tmpzi5lii84.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 3 == 0 || x % 4 == 0\n     \
    \       sum += x\n        else\n            sum *= x\n        end\n    end\n \
    \   return sum\nend\n</cell>\n<text>\nExercise 2\nWrite a function that will take\
    \ a list of integers and return a list of all entries that are divisible by 3\
    \ or 4.\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpao7iwxgw.jl:22\nin expression starting at\
    \ /tmp/tmpao7iwxgw.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum\
    \ = sum + i^2\n        elseif i%4 == 0\n            sum = sum + i^3\n        else\n\
    \            sum = sum + i\n        end\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([-1,-5,2,-1,-5])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a vector of integers and returns the sum of the squares of the even entries\
    \ of the vector. \nFor example if the input vector is [1,2,3,4,5,6,7,8,9,10] the\
    \ function should return 104.\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqk84lyx5.jl:25\nin expression starting at\
    \ /tmp/tmpqk84lyx5.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \n    sum = 0\n    for x in lst\n        if x % 3 == 0 && x % 4 == 0\n\
    \            sum += x\n        else\n            sum -= x\n        end\n    end\n\
    \    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpceo0a85g.jl:28\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: -6 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpceo0a85g.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpceo0a85g.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpceo0a85g.jl:29\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: -14 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpceo0a85g.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpceo0a85g.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpceo0a85g.jl:31\n  Expression: candidate([1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1]) == 9\n   Evaluated: -9 == 9\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpceo0a85g.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpceo0a85g.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpceo0a85g.jl:32\n  Expression: candidate([-1, -1, -1, -1, -1,\
    \ -1, -1, -1, -1]) == -3\n   Evaluated: 9 == -3\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpceo0a85g.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpceo0a85g.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpceo0a85g.jl:34\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: 10 == -126\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 9 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpceo0a85g.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 3 == 0 && x % 4 == 0\n     \
    \       sum += x\n        else\n            sum -= x\n        end\n    end\n \
    \   return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a list of integers and returns the sum of the squares of the integers in the\
    \ list. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the \nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4wudq5qe.jl:22\nin expression starting at\
    \ /tmp/tmp4wudq5qe.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n       \
    \     sum += i\n        else\n            sum *= i\n        end\n    end\n   \
    \ return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) ==\
    \ 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcgh3yzdh.jl:23\nin expression starting at\
    \ /tmp/tmpcgh3yzdh.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 3 == 0 && x % 4 == 0\n     \
    \       sum += x\n        else\n            sum -= x\n        end\n    end\n \
    \   return sum\nend\n</code>\n<|/ a tags=julia |>\n<| c |>\nThank you very much\
    \ for your answer! I appreciate it! I understand your code, but I do not understand\
    \ how it works. I do not understand how you use the modulo operator to determine\
    \ whether a number is divisible by 3 or 4.\n<|/ c |>\n<| c |>\nThe modulo operator\
    \ is basically a way to check if a number is divisible by another number. For\
    \ example, `5 % 3` returns `1` because `5` is divisible by `3`. `5 % 4` returns\
    \ `0` because `5` is not divisible by `4`. `5 % 5` returns `0` because `5` is\
    \ not divisible by `5`. `5 % 6` returns `1` because `5` is divisible by `6`.\n\
    <|/ c |>\n<| c |>\nThank you very much for your explanation! I understand it now!\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4,\
    \ 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1ybdww9l.jl:22\nin expression starting at\
    \ /tmp/tmp1ybdww9l.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n            sum\
    \ += i\n        else\n            sum *= i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code\
    \ language=julia-1.5>\nsum_squares([-1,-5,2,-1,-5])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a list of integers and returns the sum of the\
    \ squares of the integers in the list. The function shall not change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp59tq9t6f.jl:22\nin expression starting at\
    \ /tmp/tmp59tq9t6f.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 3 == 0 && x % 4 == 0\n     \
    \       sum += x\n        else\n            sum -= x\n        end\n    end\n \
    \   return sum\nend\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia,function,list\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp20hpa4tc.jl:22\nin expression starting at\
    \ /tmp/tmp20hpa4tc.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n       \
    \     sum += i\n        else\n            sum *= i\n        end\n    end\n   \
    \ return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) ==\
    \ 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8bblah7s.jl:23\nin expression starting at\
    \ /tmp/tmp8bblah7s.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n       \
    \     sum += i\n        else\n            sum *= i\n        end\n    end\n   \
    \ return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([-1,-5,2,-1,-5])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a list of integers and returns the sum\
    \ of the squares of the integers in the list. \n    \n    Examples:\n    For lst\
    \ = [1,2,3] the output should be 9\n    For lst = []  the output should be 0\n\
    \    For lst = [-1,-5,2,-1,-5]  the output should be -49\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) ==\
    \ 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5_pc02e0.jl:23\nin expression starting at\
    \ /tmp/tmp5_pc02e0.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n            sum\
    \ += i\n        else\n            sum -= i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code\
    \ language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=juli\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_c7mjibz.jl:22\nin expression starting at\
    \ /tmp/tmp_c7mjibz.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum += i*i\n\
    \        elseif i%4 == 0\n            sum += i*i*i\n        else\n           \
    \ sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp54zkianj.jl:24\nin expression starting at\
    \ /tmp/tmp54zkianj.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n            sum\
    \ += i\n        else\n            sum *= i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that will take a list of integers\
    \ and return the sum of the integers squared. \nFor lst = [1,2,3] the output should\
    \ be 9\nFor lst = []  the output should be 0\nFor lst = [-1,-5,2,-1,-5]  the output\
    \ should be -126\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t\
    @test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9j5bhxzb.jl:22\nin expression starting at\
    \ /tmp/tmp9j5bhxzb.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum = sum\
    \ + i^2\n        elseif i%4 == 0\n            sum = sum + i^3\n        else\n\
    \            sum = sum + i\n        end\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([-1,-5,2,-1,-5])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a list of integers and returns the sum of the integers in the list that\
    \ are divisible by 3. The function shall not change the list passed as argument.\
    \ \nThe function shall not change the list passed as argument but shall return\
    \ a new list with the integers divisible by 3 removed.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzff3w4g1.jl:24\nin expression starting at\
    \ /tmp/tmpzff3w4g1.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for index in lst\n        if index%3==0 || index%4==0\n \
    \           sum += index^2\n        else\n            sum += index\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<text>\nExercise 4\nWrite a function that\
    \ will take a list of integers and return a list of all entries that are divisible\
    \ by 3. The function shall not change the entries in the list whose indexes are\
    \ not a multiple of 3. \nThe function shall then return the sum of all entries.\
    \ \nFor lst = [1,2,3] the output should be 6\nFor lst = []  the output should\
    \ be 0\nFor lst = [-1,-5,2,-1,-5]  the output should be -126\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfmlszx4d.jl:22\nin expression starting at\
    \ /tmp/tmpfmlszx4d.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \n    sum = 0\n    for x in lst\n        if x % 3 == 0 || x % 4 == 0\n\
    \            sum += x\n        else\n            sum *= x\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a list of integers and returns the product of the integers in the list. The\
    \ function shall not change the entries in the list whose indexes are not a multiple\
    \ of 3 or 4. The function shall then return the product of all the entries.\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdms9c7iu.jl:23\nin expression starting at\
    \ /tmp/tmpdms9c7iu.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 3 == 0 || x % 4 == 0\n     \
    \       sum += x\n        else\n            sum *= x\n        end\n    end\n \
    \   return sum\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis does not provide\
    \ an answer to the question. To critique or request clarification from an author,\
    \ leave a comment below their post. - [From Review](/review/low-quality-posts/26827818)\n\
    <|/ c |>\n<| c |>\nI believe this does answer the question. He asked how to implement\
    \ a function that will take a list of integers and return their sum. He also asked\
    \ how to implement a function that will take a list of integers and return their\
    \ sum. He also asked how to implement a function that will take a list of integers\
    \ and return their sum. He also asked how to implement a function that will take\
    \ a list of integers and return their sum. He also asked how to implement a function\
    \ that will take a list of integers and return their sum. He also asked how to\
    \ implement a function that will take a list of integers and return their sum.\
    \ He also asked how to implement a function that will take a list of integers\
    \ and return their sum. He also asked how to implement a function that will take\
    \ a list of integers and return their sum.\n<|/ c |>\n<| c |>\nHe also asked how\
    \ to implement a function that will take a list of integers and return their sum.\
    \ He also asked how to implement a function that will take a list of integers\
    \ and return their sum. He also asked how to implement a function that will take\
    \ a list of integers and return their sum. He also asked how to implement a function\
    \ that will take a list of integers and return their sum. He also asked how to\
    \ implement a function that will take a list of integers and return their sum.\
    \ He also asked how to implement a function that will take a list of integers\
    \ and return their sum. He also asked how to implement a function that will take\
    \ a list of integers and return their sum. He also asked how to implement a function\
    \ that will take a list of integers and return their sum.\n<|/ c |>\n<| c |>\n\
    He also asked how to implement a function that will take a list of integers and\
    \ return their sum. He also asked how to implement a function that will take a\
    \ list of integers and return their sum. He also asked how to implement a function\
    \ that will take a list of integers and return their sum. He also asked how to\
    \ implement a function that will take a list of integers and return their sum.\
    \ He also asked how to implement a function that will take a list of integer\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptmnl4cov.jl:22\nin expression starting at\
    \ /tmp/tmptmnl4cov.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \n    sum = 0\n    for x in lst\n        if x % 3 == 0 && x % 4 == 0\n\
    \            sum += x\n        elseif x % 3 == 0\n            sum += x * x\n \
    \       elseif x % 4 == 0\n            sum += x * x * x\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([-1,-5,2,-1,-5])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a list of integers and returns the sum\
    \ of the squares of the integers in the list. \n    \n    Examples:\n    For lst\
    \ = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n\
    \    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) ==\
    \ 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmjy2gacx.jl:25\nin expression starting at\
    \ /tmp/tmpmjy2gacx.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n            sum\
    \ += i\n        else\n            sum *= i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that takes a list of integers\
    \ and returns the sum of the squares of the integers in the list. \nThe function\
    \ shall not change the entries in the list whose indexes are not a multiple of\
    \ 3 or 4.\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz_27valw.jl:22\nin expression starting at\
    \ /tmp/tmpz_27valw.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum = sum\
    \ + i^2\n        elseif i%4 == 0\n            sum = sum + i^3\n        else\n\
    \            sum = sum + i\n        end\n    end\n    return sum\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a list of integers and returns\
    \ the sum of the squares of the integers in the list. The function shall not change\
    \ the entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 3 or 4. The function\
    \ shall then \nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9uklupgi.jl:24\nin expression starting at\
    \ /tmp/tmp9uklupgi.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 3 == 0\n            sum += x^2\n\
    \        elseif x % 4 == 0\n            sum += x^3\n        else\n           \
    \ sum += x\n        end\n    end\n    return sum\nend\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThank you for your answer. I am still a beginner so I appreciate\
    \ your help. I understand that my code was very inefficient and I should use vectorization\
    \ to improve the efficiency of my code. I am still trying to figure out how to\
    \ vectorize my code though.\n<|/ c |>\n<| c |>\nI added a solution that uses vectorization\n\
    <|/ c |>\n<| c |>\nThank you so much for your help. I really appreciate it. I\
    \ will try to understand your solution and try to apply it to my code.\n<|/ c\
    \ |>\n<| c |>\nI added a solution that uses vectorization\n<|/ c |>\n<| c |>\n\
    Thank you so much for your help. I really appreciate it. I will try to understand\
    \ your solution and try to apply it to my code.\n<|/ c |>\n<| a tags=julia,function,for-loop,if-statement\
    \ |>\nThe function you wrote is very inefficient. Try this instead:\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphl4m5gj4.jl:24\nin expression starting at\
    \ /tmp/tmphl4m5gj4.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 3 == 0\n            sum += x*x\n\
    \        elseif x % 4 == 0\n            sum += x*x\n        else\n           \
    \ sum += x\n        end\n    end\n    return sum\nend\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nI appreciate your help and your time. I am new to Julia and I do\
    \ not know what a vector is. I did some research and found that it is an array\
    \ in Julia. I am still confused on how to implement your solution. Could you please\
    \ give me an example of how I would implement your solution?\n<|/ c |>\n<| c |>\n\
    I added an example to my answer. Hope it helps.\n<|/ c |>\n<| c |>\nThank you\
    \ for your help. I appreciate it. I will try this out and let you know how it\
    \ goes.\n<|/ c |>\n<| c |>\nI added an example to my answer. Hope it helps.\n\
    <|/ c |>\n<| c |>\nThank you for your help. I appreciate it. I will try this out\
    \ and let you know how it goes.\n<|/ c |>\n<| a tags=julia,function,if-statement\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3luq1fr2.jl:24\nin expression starting at\
    \ /tmp/tmp3luq1fr2.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \n    sum = 0\n    for index in lst \n        if index % 3 == 0 \n   \
    \         sum += index^2\n        else if index % 4 == 0 \n            sum +=\
    \ index^3\n        else \n            sum += index\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code\
    \ language=julia-1.5>\nsum_squares([-1,-5,2,-1,-5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a list of integers and returns the sum of the\
    \ squares of the integers in the list if the integer is a multiple of 3 or if\
    \ the integer is a multiple of 4. The function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeqozfc6d.jl:17\nin expression starting at\
    \ /tmp/tmpeqozfc6d.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum = sum\
    \ + i^2\n        elseif i%4 == 0\n            sum = sum + i^3\n        else\n\
    \            sum = sum + i\n        end\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphie0mtxv.jl:24\nin expression starting at\
    \ /tmp/tmphie0mtxv.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n            sum\
    \ += i\n        else\n            sum -= i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code\
    \ language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=juli\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpftyms_4u.jl:22\nin expression starting at\
    \ /tmp/tmpftyms_4u.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum += i*i\n\
    \        elseif i%4 == 0\n            sum += i*i*i\n        else\n           \
    \ sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([-1,-5,2,-1,-5])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that will take a list of integers\
    \ and return the sum of the squares of the integers except for the entries whose\
    \ indexes are a multiple of 3 and a multiple of 4. \n    \n    Examples:\n   \
    \ For lst = [1,2,3] the output should be 9\n    For lst = []  the output should\
    \ be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -49\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplcforod6.jl:24\nin expression starting at\
    \ /tmp/tmplcforod6.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum += i*i\n\
    \        elseif i%4 == 0\n            sum += i*i*i\n        else\n           \
    \ sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a list of integers and returns the sum of the\
    \ squares of the integers in the list. The function shall not change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpge1s5peb.jl:24\nin expression starting at\
    \ /tmp/tmpge1s5peb.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n            sum\
    \ += i\n        else\n            sum *= i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code\
    \ language=julia-1.5>\nsum_squares([-1,-5,2,-1,-5])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that will take a list of integers and return a list of all\
    \ integers whose square is less than or equal to 100. \n    \n    Examples:\n\
    \    For lst = [1,2,3] the output should be [1,2,3]\n    For lst = []  the output\
    \ should be []\n    For lst = [-1,-5,2,-1,-5]  the output should be [-5,-10,-15,-20,-25]\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4p43os4z.jl:22\nin expression starting at\
    \ /tmp/tmp4p43os4z.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 3 == 0 && x % 4 == 0\n     \
    \       sum += x\n        else\n            sum -= x\n        end\n    end\n \
    \   return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that will take a list of integers and return\
    \ a list of all integers whose squares are less than or equal to 100. \n    \n\
    \    Examples:\n    For lst = [1,2,3] the output should be [1,4,9]\n    For lst\
    \ = []  the output should be []\n    For lst = [-1,-5,2,-1,-5]  the output should\
    \ be [-1,-5,2,-1,-5]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9])\
    \ == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph8zjj_t0.jl:22\nin expression starting at\
    \ /tmp/tmph8zjj_t0.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum\
    \ = sum + i^2\n        elseif i%4 == 0\n            sum = sum + i^3\n        else\n\
    \            sum = sum + i\n        end\n    end\n    return sum\nend\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis does not provide an answer to the question. To\
    \ critique or request clarification from an author, leave a comment below their\
    \ post. - [From Review](/review/low-quality-posts/26859012)\n<|/ c |>\n<| c |>\n\
    I believe this does answer the question. He asked how to write a function which\
    \ takes a list of integers and returns their sum, squared, cubed, and summed squared\
    \ where each entry is a multiple of 3 or 4. The function he wrote is very similar\
    \ to the one he already has written.\n<|/ c |>\n<| c |>\nThis does not provide\
    \ an answer to the question. To critique or request clarification from an author,\
    \ leave a comment below their post. - [From Review](/review/low-quality-posts/26859012)\n\
    <|/ c |>\n<| c |>\nI believe this does answer the question. He asked how to write\
    \ a function which takes a list of integers and returns their sum, squared, cubed,\
    \ and summed squared where each entry is a multiple of 3 or 4. The function he\
    \ wrote is very similar to the one he already has written.\n<|/ c |>\n<| c |>\n\
    This does not provide an answer to the question. To critique or request clarification\
    \ from an author, leave a comment below their post. - [From Review](/review/low-quality-posts/26859012)\n\
    <|/ c |>\n<| a tags=julia,list |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4,\
    \ 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvvp4r80p.jl:25\nin expression starting at\
    \ /tmp/tmpvvp4r80p.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n            sum\
    \ += i\n        else\n            sum -= i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<text>\nExercise 7: Write a function that will take a list of integers\
    \ and return a list of all integers whose squares are less than or equal to 100.\
    \ \n    \n    Examples:\n    For lst = [1,2,3] the output should be [1,2,3]\n\
    \    For lst = [-1,-5,2,-1,-5]  the output should be [-1,-5,2,-1,-5]\n    \"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj_tmh7h1.jl:22\nin expression starting at\
    \ /tmp/tmpj_tmh7h1.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum\
    \ += i^2\n        elseif i%4 == 0\n            sum += i*i\n        else\n    \
    \        sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a list of integers and returns the sum\
    \ of all even numbers in the list. The function shall not change the list entries.\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpicn50mht.jl:25\nin expression starting at\
    \ /tmp/tmpicn50mht.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 3 == 0 || x % 4 == 0\n     \
    \       sum += x\n        else\n            sum *= x\n        end\n    end\n \
    \   return sum\nend\n</code>\n<|/ a tags=julia,list |>\n<| a dscore=2 |>\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfcyhd17n.jl:22\nin expression starting at\
    \ /tmp/tmpfcyhd17n.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \n    sum = 0\n    for x in lst\n        if x % 3 == 0\n            sum\
    \ += x^2\n        elseif x % 4 == 0\n            sum += x^3\n        else\n  \
    \          sum += x\n        end\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a list of integers and returns the sum\
    \ of the squares of the entries in the list.\nusing Test\n\n@testset begin\n\n\
    candidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprbqoj4ll.jl:25\nin expression starting at\
    \ /tmp/tmprbqoj4ll.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 3 == 0 && x % 4 == 0\n     \
    \       sum += x\n        else\n            sum -= x\n        end\n    end\n \
    \   return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a list of integers and returns\
    \ the sum of the squares of the integers in the list. \n    \n    Examples:\n\
    \    For lst = [1,2,3] the output should be 9\n    For lst = []  the output should\
    \ be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -27\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplbges8jh.jl:22\nin expression starting at\
    \ /tmp/tmplbges8jh.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n       \
    \     sum+=i\n        else\n            sum+=i*i\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n\
    <code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) ==\
    \ 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfd5glva7.jl:23\nin expression starting at\
    \ /tmp/tmpfd5glva7.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum = sum\
    \ + i*i\n        elseif i%4 == 0\n            sum = sum + i*i*i\n        else\n\
    \            sum = sum + i\n        end\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr4cvxq35.jl:24\nin expression starting at\
    \ /tmp/tmpr4cvxq35.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n       \
    \     sum += i\n        else\n            sum *= i\n        end\n    end\n   \
    \ return sum\nend\n</cell>\n<text>\nExercise 7: Write a function that will take\
    \ a list of integers and return the sum of the squares of the entries in the list.\
    \ \n    \n    Examples:\n    For lst = [1,2,3] the output should be 9\n    For\
    \ lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -25\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjh2uv7kw.jl:23\nin expression starting at\
    \ /tmp/tmpjh2uv7kw.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum\
    \ = sum + i*i\n        elseif i%4 == 0\n            sum = sum + i*i*i\n      \
    \  else\n            sum = sum + i\n        end\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppgd1_fzw.jl:25\nin expression starting at\
    \ /tmp/tmppgd1_fzw.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum+=i*i\n\
    \        elseif i%4 == 0\n            sum+=i*i*i\n        else\n            sum+=i\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 10\nWrite\
    \ a function that takes a list of integers and returns the product of all the\
    \ entries in the list. \nThe function shall not change the entries in the list\
    \ whose indexes are not a multiple of 3 or 4.\nusing Test\n\n@testset begin\n\n\
    candidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0u9l4atf.jl:24\nin expression starting at\
    \ /tmp/tmp0u9l4atf.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \n    sum = 0\n    for x in lst\n        if x % 3 == 0 && x % 4 == 0\n\
    \            sum += x\n        elseif x % 3 == 0\n            sum += x\n     \
    \   elseif x % 4 == 0\n            sum += x\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that will take a list\
    \ of integers and return a list of all entries that are divisible by 3. The function\
    \ shall not change the entries in the list whose indexes are not a multiple of\
    \ 3. \nThe function shall then return the sum of all entries. \nFor lst = [1,2,3]\
    \ the output should be [6,6,6]\nFor lst = [-1,-5,2,-1,-5]  the output should be\
    \ [-1,-5,2,-1,-5,2,-1,-5]\nFor lst = [1,2,3,4,5,6,7,8,9,10] the output should\
    \ be [6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpplg4_x2q.jl:25\nin expression starting at\
    \ /tmp/tmpplg4_x2q.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \n    sum = 0\n    for x in lst\n        if x % 3 == 0\n            sum\
    \ += x^2\n        elseif x % 4 == 0\n            sum += x^3\n        else\n  \
    \          sum += x\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squ\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpomx_vpn1.jl:25\nin expression starting at\
    \ /tmp/tmpomx_vpn1.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \n    sum = 0\n    for x in lst\n        if x % 3 == 0 && x % 4 == 0\n\
    \            sum += x\n        else\n            sum *= x\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) ==\
    \ 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw19l4e5s.jl:23\nin expression starting at\
    \ /tmp/tmpw19l4e5s.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 3 == 0 || x % 4 == 0\n     \
    \       sum += x\n        else\n            sum *= x\n        end\n    end\n \
    \   return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([-1,-5,2,-1,-5])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a list of integers and returns the sum\
    \ of the squares of the integers in the list. \nThe function shall not change\
    \ the entries in the list whose indexes are not a multiple of 3 or 4.\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) ==\
    \ 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphi30y30s.jl:22\nin expression starting at\
    \ /tmp/tmphi30y30s.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 3 == 0 && x % 4 == 0\n     \
    \       sum += x\n        else\n            sum -= x\n        end\n    end\n \
    \   return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([-1,-5,2,-1,-5])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that will take a list of integers and return a new\
    \ list where each entry is the sum of the squares of the entries in the original\
    \ list. \n    \n    Examples:\n    For lst = [1,2,3] the output should be [1,4,9]\n\
    \    For lst = []  the output should be []\n    For lst = [-1,-5,2,-1,-5]  the\
    \ output should be [-1,-5,4,-1,-5]\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdeeko08a.jl:22\nin expression starting at\
    \ /tmp/tmpdeeko08a.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n       \
    \     sum += i\n        else\n            sum *= i\n        end\n    end\n   \
    \ return sum\nend\n</cell>\n<text>\nExercise 5\nWrite a function that will take\
    \ a list of integers and return the sum of the squares of the integers in the\
    \ list. The function shall not change the entries in the list whose indexes are\
    \ not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkpugr0sk.jl:23\nin expression starting at\
    \ /tmp/tmpkpugr0sk.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n       \
    \     sum += i\n        else\n            sum *= i\n        end\n    end\n   \
    \ return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([-1,-5,2,-1,-5])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that will take a list of integers and return a list\
    \ of all even numbers in the list. \nFor example if the list is [1,2,3,4,5,6,7,8,9]\
    \ the output should be [2,4,6,8]. \nThe function shall not change the entries\
    \ in the list whose indexes are not a multiple of 2 and not a multiple of 4.\n\
    The function shall then return the sum of all entries.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw5tq0mcw.jl:23\nin expression starting at\
    \ /tmp/tmpw5tq0mcw.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \n    sum = 0\n    for x in lst\n        if mod(x,3) == 0\n          \
    \  sum = sum + x^2\n        elseif mod(x,4) == 0\n            sum = sum + x^3\n\
    \        else\n            sum = sum + x\n        end\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code\
    \ language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph07pjuge.jl:25\nin expression starting at\
    \ /tmp/tmph07pjuge.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \n    sum = 0\n    for x in lst\n        if x % 3 == 0 || x % 4 == 0\n\
    \            sum += x\n        else\n            sum *= x\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([-1,-5,2,-1,-5])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that will take a list of integers and will return\
    \ the sum of the squares of the integers in the list. The function shall not change\
    \ the entries in the list whose indexes are not a multiple of 3 or 4.\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) ==\
    \ 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkdcxten4.jl:23\nin expression starting at\
    \ /tmp/tmpkdcxten4.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if mod(x,3)==0 || mod(x,4)==0\n   \
    \         sum += x\n        else\n            sum *= x\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a list of integers and returns the sum of the squares of the integers in the\
    \ list. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nThe function shall \nusing Test\n\n@testset begin\n\ncandidate =\
    \ sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9])\
    \ == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpftw2s_i4.jl:22\nin expression starting at\
    \ /tmp/tmpftw2s_i4.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum\
    \ += i*i\n        elseif i%4 == 0\n            sum += i*i*i\n        else\n  \
    \          sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that takes a list of integers and returns the sum\
    \ of the squares of the integers in the list. \nThe function shall not change\
    \ the entries in the list whose indexes are not a multiple of 3 or 4.\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) ==\
    \ 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnob8mgcl.jl:25\nin expression starting at\
    \ /tmp/tmpnob8mgcl.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum = sum\
    \ + i^2\n        elseif i%4 == 0\n            sum = sum + i^3\n        else\n\
    \            sum = sum + i\n        end\n    end\n    return sum\nend\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThank you so much for your answer! I appreciate it!\n\
    <|/ c |>\n<| a |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppmic1nl_.jl:24\nin expression starting at\
    \ /tmp/tmppmic1nl_.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 3 == 0 && x % 4 == 0\n     \
    \       sum += x\n        elseif x % 3 == 0\n            sum += x * x\n      \
    \  elseif x % 4 == 0\n            sum += x * x * x\n        end\n    end\n   \
    \ return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that will take\
    \ a list of integers and return a list of integers where the integers in the list\
    \ are squared if they are a multiple of 3 and cubed if they are a multiple of\
    \ 4.\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp40wq2o97.jl:24\nin expression starting at\
    \ /tmp/tmp40wq2o97.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \n    sum = 0\n    for index in lst \n        if index%3 == 0 \n     \
    \       sum = sum + index^2\n        else \n            sum = sum + index^3\n\
    \        end\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4,\
    \ 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp16zq1tu9.jl:28\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 18 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp16zq1tu9.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp16zq1tu9.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp16zq1tu9.jl:29\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 146 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp16zq1tu9.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp16zq1tu9.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp16zq1tu9.jl:32\n  Expression: candidate([-1, -1, -1, -1, -1,\
    \ -1, -1, -1, -1]) == -3\n   Evaluated: -9 == -3\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp16zq1tu9.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp16zq1tu9.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp16zq1tu9.jl:34\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -244 == -126\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp16zq1tu9.jl:34 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp16zq1tu9.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp16zq1tu9.jl:35\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -165822 == 3030\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/shar"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp16zq1tu9.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \n    sum = 0\n    for x in lst\n        if x % 3 == 0 && x % 4 == 0\n\
    \            sum += x\n        else\n            sum -= x\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise 7\nWrite a function that takes\
    \ a list of integers and returns the sum of the squares of the integers in the\
    \ list. The function shall not change the list entries.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb18ljt3s.jl:23\nin expression starting at\
    \ /tmp/tmpb18ljt3s.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 3 == 0 && x % 4 == 0\n     \
    \       sum += x\n        elseif x % 3 == 0\n            sum += x * x\n      \
    \  elseif x % 4 == 0\n            sum += x * x * x\n        end\n    end\n   \
    \ return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a list of integers and returns\
    \ the sum of the squares of the integers in the list. \nThe function shall not\
    \ change the entries in the list whose indexes are not a multiple of 3 or 4.\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppd1i5l7u.jl:24\nin expression starting at\
    \ /tmp/tmppd1i5l7u.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n       \
    \     sum += i\n        else\n            sum *= i\n        end\n    end\n   \
    \ return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ list of integers and returns the sum of the squares of the integers in the list.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ a multiple of 3 or 4.\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8io9xkw6.jl:23\nin expression starting at\
    \ /tmp/tmp8io9xkw6.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n       \
    \     sum += i\n        else\n            sum *= i\n        end\n    end\n   \
    \ return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) ==\
    \ 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpposl94a_.jl:23\nin expression starting at\
    \ /tmp/tmpposl94a_.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum\
    \ = sum + i^2\n        elseif i%4 == 0\n            sum = sum + i^3\n        else\n\
    \            sum = sum + i\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) ==\
    \ 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpi_smwraa.jl:30\n  Expression: candidate([1,\
    \ 2, 3]) == 6\n   Evaluated: 12 == 6\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpi_smwraa.jl:30 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi_smwraa.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpi_smwraa.jl:31\n  Expression: candidate([1, 4, 9]) == 14\n\
    \   Evaluated: 146 == 14\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi_smwraa.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi_smwraa.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpi_smwraa.jl:34\n  Expression: candidate([-1, -1, -1, -1, -1,\
    \ -1, -1, -1, -1]) == -3\n   Evaluated: -9 == -3\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi_smwraa.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi_smwraa.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpi_smwraa.jl:36\n  Expression: candidate([-1, -5, 2, -1, -5])\
    \ == -126\n   Evaluated: -10 == -126\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpi_smwraa.jl:36 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi_smwraa.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpi_smwraa.jl:37\n  Expression: candidate([-56, -99, 1, 0, -2])\
    \ == 3030\n   Evaluated: -165816 == 3030\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi_smwraa.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 3 == 0\n            sum += x^2\n\
    \        elseif x % 4 == 0\n            sum += x^3\n        else\n           \
    \ sum += x\n        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that takes a list of integers and returns the sum of the\
    \ squares of the integers in the list. The function shall not change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9])\
    \ == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpig3mqmv2.jl:24\nin expression starting at\
    \ /tmp/tmpig3mqmv2.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n       \
    \     sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([-1,-5,2,-1,-5])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a list of integers and\
    \ returns the product of all entries in the list. \nFor lst = [1,2,3] the output\
    \ should be 6\nFor lst = []  the output should be 1\nFor lst = [-1,-5,2,-1,-5]\
    \  the output should be -36\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpec23_alq.jl:21\nin expression starting at\
    \ /tmp/tmpec23_alq.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum\
    \ = sum + i^2\n        elseif i%4 == 0\n            sum = sum + i^3\n        else\n\
    \            sum = sum + i\n        end\n    end\n    return sum\nend\n</cell>\n\
    <text>\nExercise 10\nWrite a function that will take a list of integers and return\
    \ the sum of the squares of the integers. \n    \n    Examples:\n    For lst =\
    \ [1,2,3] the output should be 9\n    For lst = []  the output should be 0\n \
    \   For lst = [-1,-5,2,-1,-5]  the output should be -49\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) ==\
    \ 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpslg1zcve.jl:25\nin expression starting at\
    \ /tmp/tmpslg1zcve.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \n    sum = 0\n    for i = 1:length(lst)\n        if mod(i, 3) == 0\n\
    \            sum += lst[i]\n        elseif mod(i, 4) == 0\n            sum +=\
    \ lst[i]\n        else\n            sum += lst[i]*lst[i]\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a list of integers and returns the sum of the squares of the integers in the\
    \ list. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n\
    \    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the\
    \ output should be -126\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4,\
    \ 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkmn3sxpc.jl:25\nin expression starting at\
    \ /tmp/tmpkmn3sxpc.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 3 == 0 && x % 4 == 0\n     \
    \       sum += x\n        elseif x % 3 == 0\n            sum += x * x\n      \
    \  elseif x % 4 == 0\n            sum += x * x * x\n        end\n    end\n   \
    \ return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares(lst)\n</cell>\n\
    <text>\nExercise 4\nWrite a function that takes a vector of integers and returns\
    \ the sum of the squares of the integers in the vector. \nThe function shall not\
    \ change the entries in the vector whose indexes are not a multiple of 3 or 4.\
    \ The function shall then return the sum of all entries. \nThe function shall\
    \ not change the entries in the vector whose indexes are a multiple of 3 or 4.\
    \ The function shall then return the sum of all entries. \nThe function shall\
    \ not change the entries in the vector whose indexes are a multiple of 3 or 4\
    \ and a multiple of 5. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the vector whose indexes are\
    \ a multiple of 3 or 4 and a multiple of 5 and a multiple of 7. The function shall\
    \ then return the sum of all entries. \nThe function shall not change the entries\
    \ in the vector whose indexes are a multiple of 3 or 4 and a multiple of 5 and\
    \ a multiple of 7 and a multiple of 11. The function shall then return the sum\
    \ of all entries. \nThe function shall not change the entries in the vector whose\
    \ indexes are a multiple of 3 or 4 and a multiple of 5 and a multiple of 7 and\
    \ a multiple of 11 and a multiple of 13. The function shall then return the sum\
    \ of all entries. \nThe function shall not change the entries in the vector whose\
    \ indexes are a multiple of 3 or 4 and a multiple of 5 and a multiple of 7 and\
    \ a multiple of 11 and a multiple of 13 and a multiple of 15. The function shall\
    \ then return the sum of all entries. \nThe function shall not change the entries\
    \ in the vector whose indexes are a multiple of 3 or 4 and a multiple of 5 and\
    \ a multiple of 7 and a multiple of 11 and a multiple of 13 and a multiple of\
    \ 15 and a multiple of 17. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the vector whose indexes are\
    \ a multiple of 3 or 4 and a multiple of 5 and a multiple of 7 and a multiple\
    \ of 11 and a multiple of 13 and a multiple of 15 and a multiple of 17 and a multiple\
    \ of 19. The function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the vector whose indexes are a multiple of 3\
    \ or 4 and a multiple of 5 and a multiple of 7 and a multiple of 11 and a multiple\
    \ of 13 and a multiple of 15 and a multiple of 17 and a multiple of 19 and a multiple\
    \ of 21. The function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the \nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4,\
    \ 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmoe_utlk.jl:24\nin expression starting at\
    \ /tmp/tmpmoe_utlk.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum += i*i\n\
    \        elseif i%4 == 0\n            sum += i*i*i\n        else\n           \
    \ sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares(lst)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a list\
    \ of integers and returns the sum of the squares of the integers in the list.\
    \ \n    \n    Examples:\n    For lst = [1,2,3] the output should be 9\n    For\
    \ lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output\
    \ should be -49\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcu1__all.jl:24\nin expression starting at\
    \ /tmp/tmpcu1__all.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum\
    \ = sum + i*i\n        elseif i%4 == 0\n            sum = sum + i*i*i\n      \
    \  else\n            sum = sum + i\n        end\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzu1__yds.jl:25\nin expression starting at\
    \ /tmp/tmpzu1__yds.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 3 == 0 || x % 4 == 0\n     \
    \       sum += x\n        else\n            sum -= x\n        end\n    end\n \
    \   return sum\nend\n</cell>\n<text>\nExercise 4\nWrite a function that takes\
    \ a list of integers and returns the sum of the squares of the integers in the\
    \ list. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3 or 4.\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_pxhfphf.jl:22\nin expression starting at\
    \ /tmp/tmp_pxhfphf.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 3 == 0\n            sum += x^2\n\
    \        elseif x % 4 == 0\n            sum += x^3\n        else\n           \
    \ sum += x\n        end\n    end\n    return sum\nend\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThanks for the answer. I'm sorry I didn't specify this in the question,\
    \ but I'm looking for a solution that does not use loops. I edited the question\
    \ to reflect this.\n<|/ c |>\n<| c |>\nI edited my answer to include a solution\
    \ that does not use loops.\n<|/ c |>\n<| a dscore=1 |>\nThe function can be written\
    \ as\n<code>\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmww71nhn.jl:24\nin expression starting at\
    \ /tmp/tmpmww71nhn.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n       \
    \     sum += i\n        else\n            sum -= i\n        end\n    end\n   \
    \ return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) ==\
    \ 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo_1s2zlu.jl:23\nin expression starting at\
    \ /tmp/tmpo_1s2zlu.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 3 == 0\n            sum += x^2\n\
    \        elseif x % 4 == 0\n            sum += x^3\n        else\n           \
    \ sum += x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.4>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.4>\nsum_squares([-1,-5,2,-1,-5])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a list of integers and\
    \ returns the sum of the squares of the integers in the list. \n    \n    Examples:\n\
    \    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should\
    \ be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9rg0dq0g.jl:24\nin expression starting at\
    \ /tmp/tmp9rg0dq0g.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 3 == 0\n            sum += x*x\n\
    \        elseif x % 4 == 0\n            sum += x*x\n        else\n           \
    \ sum += x\n        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a list of integers and returns the sum of the\
    \ squares of the integers in the list. \nThe function shall not change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4t069ptt.jl:24\nin expression starting at\
    \ /tmp/tmp4t069ptt.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \n    sum = 0\n    for x in lst\n        if mod(x,3) == 0\n          \
    \  sum+=x^2\n        elseif mod(x,4) == 0\n            sum+=x^3\n        else\n\
    \            sum+=x\n        end\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that will take a list of integers and return a new\
    \ list where each entry is the sum of the integers in the original list except\
    \ for those entries whose index is divisible by 3. The function shall not change\
    \ the original list.\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppm9outpl.jl:25\nin expression starting at\
    \ /tmp/tmppm9outpl.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 3 == 0\n            sum += x*x\n\
    \        elseif x % 4 == 0\n            sum += x*x\n        else\n           \
    \ sum += x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp95iskn57.jl:24\nin expression starting at\
    \ /tmp/tmp95iskn57.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum\
    \ += i*i\n        elseif i%4 == 0\n            sum += i*i*i\n        else\n  \
    \          sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that will take a list of integers and will return\
    \ the number of integers in the list that are divisible by 3. The function shall\
    \ not change the entries in the list whose indexes are not a multiple of 3. \n\
    The function shall then return the number of integers in the list that are divisible\
    \ by 3.\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp__mue5fo.jl:25\nin expression starting at\
    \ /tmp/tmp__mue5fo.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum = sum\
    \ + i^2\n        elseif i%4 == 0\n            sum = sum + i^3\n        else\n\
    \            sum = sum + i\n        end\n    end\n    return sum\nend\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nusing Test\n\n@testset begin\n\n\
    candidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpof15gxw0.jl:24\nin expression starting at\
    \ /tmp/tmpof15gxw0.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 3 == 0\n            sum += x*x\n\
    \        elseif x % 4 == 0\n            sum += x*x\n        else\n           \
    \ sum += x\n        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a list of integers and returns the sum of the\
    \ squares of the integers in the list. \nThe function shall not change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nThe function shall not change the entries in\
    \ the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all \nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\
    \t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp927hiphk.jl:24\nin expression starting at\
    \ /tmp/tmp927hiphk.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum\
    \ = sum + i*i\n        elseif i%4 == 0\n            sum = sum + i*i*i\n      \
    \  else\n            sum = sum + i\n        end\n    end\n    return sum\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that will take a list of integers\
    \ and return the sum of the squares of the integers in the list. \n    \n    Examples:\n\
    \    For lst = [1,2,3] the output should be 9\n    For lst = []  the output should\
    \ be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -25\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp76cvebnz.jl:25\nin expression starting at\
    \ /tmp/tmp76cvebnz.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \n    sum = 0\n    for x in lst\n        if x % 3 == 0 && x % 4 == 0\n\
    \            sum += x\n        else\n            sum -= x\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that will\
    \ take a list of integers and return a list of all entries that are a multiple\
    \ of 3. The function shall not change the entries in the list whose indexes are\
    \ not a multiple of 3. \nThe function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ a multiple of 3. The function shall then return the sum of all entries. \nThe\
    \ function shall not change the entries in the list whose indexes are not a multiple\
    \ of 3. The function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the list whose indexes are not a multiple of\
    \ 3. The function shall then return the sum of all entries. \nThe function shall\
    \ not change the entries in the list whose indexes are not a multiple of 3. The\
    \ function shall then return the sum of all entries. \nThe function shall not\
    \ change the entries in the list whose indexes are not a multiple of 3. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 3. The function shall\
    \ then return the sum of all entries. \nThe function shall not change the entries\
    \ in the list whose indexes are not a multiple of 3. The function shall then return\
    \ the sum of all entries. \nThe function shall not change the entries in the list\
    \ whose indexes are not a multiple of 3. The function shall then return the sum\
    \ of all entries. \nThe function shall not change the entries in the list whose\
    \ indexes are not a multiple of 3. The function shall then return the sum of all\
    \ entries. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of 3. The function shall then return the sum of all entries.\
    \ \nThe function shall not change the entries in the list whose indexes are not\
    \ a multiple of 3. The function shall then return the sum of all entries. \nThe\
    \ function shall not change the entries in the list whose indexes are not a multiple\
    \ of 3. The function shall then return the sum of all entries. \nThe function\
    \ shall not change the entries in the list whose indexes are not a multiple of\
    \ 3. The function shall then return the sum of all entries. \nThe function shall\
    \ not change the entries in the list whose indexes are not a multiple of 3. The\
    \ function shall then return the sum of all entries. \nThe function shall not\
    \ change the entries in the list whose indexes are not a multiple of 3. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of 3. The function shall\
    \ then return the sum of all entries. \nThe function shall not change the entries\
    \ in the list whose indexes are not a multiple of 3. The function shall then return\
    \ the sum of all entries. \nThe function shall not change the entries in the list\
    \ whose indexes are not a multiple of \nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1, 4,\
    \ 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_lohfe8a.jl:23\nin expression starting at\
    \ /tmp/tmp_lohfe8a.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 3 == 0 || x % 4 == 0\n     \
    \       sum += x\n        else\n            sum *= x\n        end\n    end\n \
    \   return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a list of integers and returns the sum of all even numbers in the list. \nFor\
    \ lst = [1,2,3,4,5,6,7,8,9,10] the output should be 45\nFor lst = [-1,-5,2,-1,-5]\
    \  the output should be -126\nFor lst = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\
    \ the output should be 44\nFor lst = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]\
    \ the output should be 44\nFor lst = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]\
    \ the output should be 44\nFor lst = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,5\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4ijitrne.jl:22\nin expression starting at\
    \ /tmp/tmp4ijitrne.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum += i*i\n\
    \        elseif i%4 == 0\n            sum += i*i*i\n        else\n           \
    \ sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that will take a list of integers and a number k and will\
    \ return the number of entries in the list whose index is divisible by k. \n \
    \   \n    Examples:\n    For lst = [1,2,3,4,5,6,7,8,9,10] the output should be\
    \ 4\n    For lst = [1,2,3,4,5,6,7,8,9,10] the output should be 4\n    For lst\
    \ = [1,2,3,4,5,6,7,8,9,10] the output should be 4\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\
    \t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\
    \t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1,\
    \ -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv27evwwa.jl:24\nin expression starting at\
    \ /tmp/tmpv27evwwa.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 3 == 0 || x % 4 == 0\n     \
    \       sum += x\n        else\n            sum *= x\n        end\n    end\n \
    \   return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([-1,-5,2,-1,-5])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a list of integers and returns the sum\
    \ of the squares of the integers in the list. \nThe function shall not change\
    \ the entries in the list whose indexes are not a multiple of 3 or 4.\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) ==\
    \ 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptdwg4ixx.jl:22\nin expression starting at\
    \ /tmp/tmptdwg4ixx.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    sum = 0\n    for x in lst\n        if x % 3 == 0 && x % 4 == 0\n     \
    \       sum += x\n        elseif x % 3 == 0\n            sum += x * x\n      \
    \  elseif x % 4 == 0\n            sum += x * x * x\n        end\n    end\n   \
    \ return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([-1,-5,2,-1,-5])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of integers and returns the sum\
    \ of the squares of the integers in the vector. \nThe function shall not change\
    \ the entries in the vector whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nThe function shall not change the\
    \ entries in the vector whose values are negative.\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj306dapq.jl:24\nin expression starting at\
    \ /tmp/tmpj306dapq.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if i%3 == 0\n            sum\
    \ = sum + i^2\n        elseif i%4 == 0\n            sum = sum + i^3\n        else\n\
    \            sum = sum + i\n        end\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmxw5ow38.jl:25\nin expression starting at\
    \ /tmp/tmpmxw5ow38.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \n    sum = 0\n    for x in lst\n        if x % 3 == 0 && x % 4 == 0\n\
    \            sum += x\n        else\n            sum += x * x\n        end\n \
    \   end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nsum_squares([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_squares([-1,-5,2,-1,-5])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a list of integers and returns the sum\
    \ of all even numbers in the list. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 4\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -2\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1, 2, 3]) == 6)\n\t@test(candidate([1,\
    \ 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([])) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1, -5, 2,\
    \ -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\t@test(candidate([-1,\
    \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16, -9, -2, 36, 36, 26,\
    \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1, -3,\
    \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
    \ -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf89_dad5.jl:23\nin expression starting at\
    \ /tmp/tmpf89_dad5.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\"\n    This function will take a list of integers. For all entries\
    \ in the list, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the list whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3]\
    \ the output should be 6\n    For lst = []  the output should be 0\n    For lst\
    \ = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\
    \ \n    \n    sum = 0\n    for i in lst\n        if i%3==0 || i%4==0\n       \
    \     sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_squares([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_squares([-1,-5,2,-1,-5])\n\
    </cell>\n<text>\nExercise 3.2\nWrite a function that takes a list of integers\
    \ and returns the sum of the squares of the integers in the list. \nThe function\
    \ shall not change the entries in the list whose indexes are not a multiple of\
    \ 3 or 4.\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1,\
    \ 2, 3]) == 6)\n\t@test(candidate([1, 4, 9]) == 14)\n\t@test(candidate(Vector{Int64}([]))\
    \ == 0)\n\t@test(candidate([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\n\t@test(candidate([-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]) == -3)\n\t@test(candidate([0]) == 0)\n\t@test(candidate([-1,\
    \ -5, 2, -1, -5]) == -126)\n\t@test(candidate([-56, -99, 1, 0, -2]) == 3030)\n\
    \t@test(candidate([-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\n\t@test(candidate([-16,\
    \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\t@test(candidate([-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10])\
    \ == -1448)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqqyolfdl.jl:21\nin expression starting at\
    \ /tmp/tmpqqyolfdl.jl:21\n"
  exit_code: 1
  status: SyntaxError
