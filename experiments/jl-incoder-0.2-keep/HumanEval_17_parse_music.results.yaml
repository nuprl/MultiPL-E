name: HumanEval_17_parse_music
language: julia
results:
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : music_string.index(\"|\", music_string.index(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"o\") + 1 : music_string.index(\"o\", music_string.index(\"\
    o\") + 1)]\n    music_string = music_string[music_string.index(\"|\") + 1 : music_string.index(\"\
    |\", music_string.index(\"|\") + 1)]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 : music_string.index(\"o\", music_string.index(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"|\") + 1 : music_string.index(\"|\", music_string.index(\"\
    |\") + 1)]\n    music_string = music_string[music_string.index(\"o\") + 1 : music_string.index(\"\
    o\", music_string.index(\"o\") + 1)]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : music_string.index(\"|\", music_string.index(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"o\") + 1 : music_string.index(\"o\", music_string.index(\"\
    o\") + 1)]\n    music_string = music_string[music_string.index(\"|\") + 1 : music_string.index(\"\
    |\", music_string.index(\"|\") + 1)]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 : music_string.index(\"o\", music_string.index(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"|\") + 1 : music_string.index(\"|\", music_string.index(\"\
    |\") + 1)]\n    music_string = music_string[music_string.index(\"o\") + 1 : music_string.index(\"\
    o\", music_string.index(\"o\") + 1)]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : music_string.index(\"|\", music_string.index(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"o\") + 1 : music_string.index(\"o\", music_string.index(\"\
    o\") + 1)]\n    music_string = music_string[music_string.index(\"|\") + 1 : music_string.index(\"\
    |\", music_string.\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7o_5q_06.jl:30\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7o_5q_06.jl:30\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmprv_cx77z.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmprv_cx77z.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmprv_cx77z.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip()\n    music_string = music_string.strip(\"\\n\")\n   \
    \ music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmptrdja42u.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmptrdja42u.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmptrdja42u.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find(\"|\"\
    ) + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 : music_string.find(\"|\", music_string.find(\"\
    |\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 : music_string.find(\"|\", music_string.find(\"\
    |\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t\
    @test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") ==\
    \ [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgzhdekuz.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpgzhdekuz.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpgzhdekuz.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.findFirst(\"\
    \ \")]\n    music_string = music_string[music_string.findFirst(\" \")]\n    music_string\
    \ = music_string[music_string.findFirst(\" \")]\n    music_string = music_string[music_string.findFirst(\"\
    \ \")]\n    music_string = music_string[music_string.findFirst(\" \")]\n    music_string\
    \ = music_string[music_string.findFirst(\" \")]\n    music_string = music_string[music_string.findFirst(\"\
    \ \")]\n    music_string = music_string[music_string.findFirst(\" \")]\n    music_string\
    \ = music_string[music_string.findFirst(\" \")]\n    music_string = music_string[music_string.findFirst(\"\
    \ \")]\n    music_string = music_string[music_string.findFirst(\" \")]\n    music_string\
    \ = music_string[music_string.findFirst(\" \")]\n    music_string = music_string[music_string.findFirst(\"\
    \ \")]\n    music_string = music_string[music_string.findFirst(\" \")]\n    music_string\
    \ = music_string[music_string.findFirst(\" \")]\n    music_string = music_string[music_string.findFirst(\"\
    \ \")]\n    music_string = music_string[music_string.findFirst(\" \")]\n    music_string\
    \ = music_string[music_string.findFirst(\" \")]\n    music_string = music_string[music_string.findFirst(\"\
    \ \")]\n    music_string = music_string[music_string.findFirst(\" \")]\n    music_string\
    \ = music_string[music_string.findFirst(\" \")]\n    music_string = music_string[music_string.findFirst(\"\
    \ \")]\n    music_string = music_string[music_string.findFirst(\" \")]\n    music_string\
    \ = music_string[music_string.findFirst(\" \")]\n    music_string = music_string[music_string.findFirst(\"\
    \ \")]\n    music_string = music_string[music_string.findFirst(\" \")]\n    music_string\
    \ = music_string[music_string.findFirst(\" \")]\n    music_string = music_string[music_string.findFirst(\"\
    \ \")]\n    music_string = music_string[music_string.findFirst(\" \")]\n    music_string\
    \ = music_string[music_\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpm5348dvu.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpm5348dvu.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find('|'):]\n\
    \    music_string = music_string[music_string.find('o'):]\n    music_string =\
    \ music_string[music_string.find('|'):]\n    music_string = music_string[music_string.find('o'):]\n\
    \    music_string = music_string[music_string.find('|'):]\n    music_string =\
    \ music_string[music_string.find('o'):]\n    music_string = music_string[music_string.find('|'):]\n\
    \    music_string = music_string[music_string.find('o'):]\n    music_string =\
    \ music_string[music_string.find('|'):]\n    music_string = music_string[music_string.find('o'):]\n\
    \    music_string = music_string[music_string.find('|'):]\n    music_string =\
    \ music_string[music_string.find('o'):]\n    music_string = music_string[music_string.find('|'):]\n\
    \    music_string = music_string[music_string.find('o'):]\n    music_string =\
    \ music_string[music_string.find('|'):]\n    music_string = music_string[music_string.find('o'):]\n\
    \    music_string = music_string[music_string.find('|'):]\n    music_string =\
    \ music_string[music_string.find('o'):]\n    music_string = music_string[music_string.find('|'):]\n\
    \    music_string = music_string[music_string.find('o'):]\n    music_string =\
    \ music_string[music_string.find('|'):]\n    music_string = music_string[music_string.find('o'):]\n\
    \    music_string = music_string[music_string.find('|'):]\n    music_string =\
    \ music_string[music_string.find('o'):]\n    music_string = music_string[music_string.find('|'):]\n\
    \    music_string = music_string[music_string.find('o'):]\n    music_string =\
    \ music_string[music_string.find('|'):]\n    music_string = music_string[music_string.find('o'):]\n\
    \    music_string = music_string[music_string.find('|'):]\n    music_string =\
    \ music_string[music_string.find('o'):]\n    music_string = music_string[music_string.find('|'):]\n\
    \    music_string = music_string\nusing Test\n\n@testset begin\n\ncandidate =\
    \ parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"music_string.find('|'):\"\
    \ range expression \nStacktrace:\n [1] top-level scope at /tmp/tmpzv6xr3ik.jl:15\n\
    \ [2] include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpzv6xr3ik.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpehm9znxu.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpehm9znxu.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 : music_string.findfirst(\"o\")]\n    music_string = music_string[1 :\
    \ music_string.findfirst(\"o\")]\n    music_string = music_string[1 : music_string.findfirst(\"\
    |\")]\n    music_string = music_string[1 : music_string.findfirst(\"o\")]\n  \
    \  music_string = music_string[1 : music_string.findfirst(\"|\")]\n    music_string\
    \ = music_string[1 : music_string.findfirst(\"o\")]\n    music_string = music_string[1\
    \ : music_string.findfirst(\"|\")]\n    music_string = music_string[1 : music_string.findfirst(\"\
    o\")]\n    music_string = music_string[1 : music_string.findfirst(\"|\")]\n  \
    \  music_string = music_string[1 : music_string.findfirst(\"o\")]\n    music_string\
    \ = music_string[1 : music_string.findfirst(\"|\")]\n    music_string = music_string[1\
    \ : music_string.findfirst(\"o\")]\n    music_string = music_string[1 : music_string.findfirst(\"\
    |\")]\n    music_string = music_string[1 : music_string.findfirst(\"o\")]\n  \
    \  music_string = music_string[1 : music_string.findfirst(\"|\")]\n    music_string\
    \ = music_string[1 : music_string.findfirst(\"o\")]\n    music_string = music_string[1\
    \ : music_string.findfirst(\"|\")]\n    music_string = music_string[1 : music_string.findfirst(\"\
    o\")]\n    music_string = music_string[1 : music_string.findfirst(\"|\")]\n  \
    \  music_string = music_string[1 : music_string.findfirst(\"o\")]\n    music_string\
    \ = music_string[1 : music_string.findfirst(\"|\")]\n    music_string = music_string[1\
    \ : music_string.findfirst(\"o\")]\n    music_string = music_string[1 : music_string.findfirst(\"\
    |\")]\n    music_string = music_string[1 : music_string.findfirst(\"o\")]\n  \
    \  music_string = music_string[1 : music_string.findfirst(\"|\")]\n    music_string\
    \ = music_string[1 : music_string.findfirst(\"o\")]\n    music_string = music_string[1\
    \ : music_string.findfirst(\"|\")]\n    music_string = music_string[\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpt4z0sjus.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpt4z0sjus.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find(\"|\"\
    ) + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : string(music_string).end]\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpodwtbdzy.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpodwtbdzy.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpodwtbdzy.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+music_string.index(\"|\")+1]\n    music_string = music_string[music_string.index(\"\
    |\"):music_string.index(\"|\")+music_string.index(\"|\")+2]\n    music_string\
    \ = music_string[music_string.index(\"|\"):music_string.index(\"|\")+music_string.index(\"\
    |\")+3]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+music_string.index(\"|\")+4]\n    music_string = music_string[music_string.index(\"\
    |\"):music_string.index(\"|\")+music_string.index(\"|\")+5]\n    music_string\
    \ = music_string[music_string.index(\"|\"):music_string.index(\"|\")+music_string.index(\"\
    |\")+6]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+music_string.index(\"|\")+7]\n    music_string = music_string[music_string.index(\"\
    |\"):music_string.index(\"|\")+music_string.index(\"|\")+8]\n    music_string\
    \ = music_string[music_string.index(\"|\"):music_string.index(\"|\")+music_string.index(\"\
    |\")+9]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+music_string.index(\"|\")+10]\n    music_string = music_string[music_string.index(\"\
    |\"):music_string.index(\"|\")+music_string.index(\"|\")+11]\n    music_string\
    \ = music_string[music_string.index(\"|\"):music_string.index(\"|\")+music_string.index(\"\
    |\")+12]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+music_string.index(\"|\")+13]\n    music_string = music_string[music_string.index(\"\
    |\"):music_string.index(\"|\")+music_string.index(\"|\")+14]\n    music_string\
    \ = music_string[music_string.index(\"|\"):music_string.index(\"|\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"music_string.index(\"\
    |\"):\" range expression \nStacktrace:\n [1] top-level scope at /tmp/tmpt42wxv5l.jl:15\n\
    \ [2] include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpt42wxv5l.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\") + 1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\") + 1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\") + 1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\") + 1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\") + 1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\") + 1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\") + 1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\") + 1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\") + 1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\") + 1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\") + 1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\") + 1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\") + 1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\") + 1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\") + 1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\") + 1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\") + 1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\") + 1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\") + 1]\n    music_string = music_string[music_string.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"music_string.index(\"\
    |\"):\" range expression \nStacktrace:\n [1] top-level scope at /tmp/tmpf808jby2.jl:15\n\
    \ [2] include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpf808jby2.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp2j0whl3c.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp2j0whl3c.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp2j0whl3c.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpt8cpol9b.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpt8cpol9b.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpt8cpol9b.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string[1:end-1]\n    music_string = music_string[music_string != \"\
    o\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \".\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \".\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \".\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \".\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \".\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \".\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \".\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \".\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \".\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \".\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \".\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \".\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \".\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \".\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \".\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \".\"]\n    music_string = music_\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpk8v6xm22.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpk8v6xm22.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpk8v6xm22.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find('|'):]\n\
    \    music_string = music_string[music_string.find('o'):]\n    music_string =\
    \ music_string[music_string.find('|'):]\n    music_string = music_string[music_string.find('o'):]\n\
    \    music_string = music_string[music_string.find('|'):]\n    music_string =\
    \ music_string[music_string.find('o'):]\n    music_string = music_string[music_string.find('|'):]\n\
    \    music_string = music_string[music_string.find('o'):]\n    music_string =\
    \ music_string[music_string.find('|'):]\n    music_string = music_string[music_string.find('o'):]\n\
    \    music_string = music_string[music_string.find('|'):]\n    music_string =\
    \ music_string[music_string.find('o'):]\n    music_string = music_string[music_string.find('|'):]\n\
    \    music_string = music_string[music_string.find('o'):]\n    music_string =\
    \ music_string[music_string.find('|'):]\n    music_string = music_string[music_string.find('o'):]\n\
    \    music_string = music_string[music_string.find('|'):]\n    music_string =\
    \ music_string[music_string.find('o'):]\n    music_string = music_string[music_string.find('|'):]\n\
    \    music_string = music_string[music_string.find('o'):]\n    music_string =\
    \ music_string[music_string.find('|'):]\n    music_string = music_string[music_string.find('o'):]\n\
    \    music_string = music_string[music_string.find('|'):]\n    music_string =\
    \ music_string[music_string.find('o'):]\n    music_string = music_string[music_string.find('|'):]\n\
    \    music_string = music_string[music_string.find('o'):]\n    music_string =\
    \ music_string[music_string.find('|'):]\n    music_string = music_string[music_string.find('o'):]\n\
    \    music_string = music_string[music_string.find('|'):]\n    music_string =\
    \ music_string[music_string.find('o'):]\n    music_string = music_string[music_string.find('|'):]\n\
    \    music_string = music_string\nusing Test\n\n@testset begin\n\ncandidate =\
    \ parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"music_string.find('|'):\"\
    \ range expression \nStacktrace:\n [1] top-level scope at /tmp/tmpzfszl3_f.jl:15\n\
    \ [2] include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpzfszl3_f.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_list = music_string.split(\" \")\n    music_list[1]\
    \ = music_list[1].strip\n    music_list[2] = music_list[2].strip\n    music_list[3]\
    \ = music_list[3].strip\n    music_list[4] = music_list[4].strip\n    music_list[5]\
    \ = music_list[5].strip\n    music_list[6] = music_list[6].strip\n    music_list[7]\
    \ = music_list[7].strip\n    music_list[8] = music_list[8].strip\n    music_list[9]\
    \ = music_list[9].strip\n    music_list[10] = music_list[10].strip\n    music_list[11]\
    \ = music_list[11].strip\n    music_list[12] = music_list[12].strip\n    music_list[13]\
    \ = music_list[13].strip\n    music_list[14] = music_list[14].strip\n    music_list[15]\
    \ = music_list[15].strip\n    music_list[16] = music_list[16].strip\n    music_list[17]\
    \ = music_list[17].strip\n    music_list[18] = music_list[18].strip\n    music_list[19]\
    \ = music_list[19].strip\n    music_list[20] = music_list[20].strip\n    music_list[21]\
    \ = music_list[21].strip\n    music_list[22] = music_list[22].strip\n    music_list[23]\
    \ = music_list[23].strip\n    music_list[24] = music_list[24].strip\n    music_list[25]\
    \ = music_list[25].strip\n    music_list[26] = music_list[26].strip\n    music_list[27]\
    \ = music_list[27].strip\n    music_list[28] = music_list[28].strip\n    music_list[29]\
    \ = music_list[29].strip\n    music_list[30] = music_list[30].strip\n    music_list[31]\
    \ = music_list[31].strip\n    music_list[32] = music_list[32].strip\n    music_list[33]\
    \ = music_list[33].strip\n    music_list[34] = music_list[34].strip\n    music_list[35]\
    \ = music_list[35].strip\n    music_list[36] = music_list[36].strip\n    music_list[37]\
    \ = music_list[37].strip\n    music_list[38] = music_list[38].strip\n    music_list[39\n\
    using Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4iegnxrq.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4iegnxrq.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpydzfjsjv.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpydzfjsjv.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpydzfjsjv.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp2e8bbfde.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp2e8bbfde.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp2e8bbfde.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyfab5frt.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpyfab5frt.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpyfab5frt.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find(\"|\"\
    ) + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 : music_string.find(\"|\", music_string.find(\"\
    |\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 : music_string.find(\"|\", music_string.find(\"\
    |\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t\
    @test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") ==\
    \ [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwkhp8lco.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpwkhp8lco.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpwkhp8lco.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_notes = music_string.split(\"|\")\n    music_notes\
    \ = music_notes[music_notes.len()/2:end]\n    music_notes = music_notes.map(x\
    \ => x.strip)\n    music_notes = music_notes.map(x => x.split(\" \"))\n    music_notes\
    \ = music_notes.map(x => x.map(x => x.toInt))\n    music_notes = music_notes.map(x\
    \ => x.map(x => x*4))\n    music_notes = music_notes.map(x => x.map(x => x*2))\n\
    \    music_notes = music_notes.map(x => x.map(x => x))\n    music_notes = music_notes.map(x\
    \ => x.map(x => x*4))\n    music_notes = music_notes.map(x => x.map(x => x*2))\n\
    \    music_notes = music_notes.map(x => x.map(x => x))\n    music_notes = music_notes.map(x\
    \ => x.map(x => x*4))\n    music_notes = music_notes.map(x => x.map(x => x*2))\n\
    \    music_notes = music_notes.map(x => x.map(x => x))\n    music_notes = music_notes.map(x\
    \ => x.map(x => x*4))\n    music_notes = music_notes.map(x => x.map(x => x*2))\n\
    \    music_notes = music_notes.map(x => x.map(x => x))\n    music_notes = music_notes.map(x\
    \ => x.map(x => x*4))\n    music_notes = music_notes.map(x => x.map(x => x*2))\n\
    \    music_notes = music_notes.map(x => x.map(x => x))\n    music_notes = music_notes.map(x\
    \ => x.map(x => x*4))\n    music_notes = music_notes.map(x => x.map(x => x*2))\n\
    \    music_notes = music_notes.map(x => x.map(x => x))\n    music_notes = music_notes.map(x\
    \ => x.map(x => x*4))\n    music_notes = music_notes.map(x => x.map(x => x*2))\n\
    \    music_notes = music_notes.map(x => x.map(x => x))\n    music_notes = music_notes.map(x\
    \ => x.map(x => x*4))\n    music_notes = music_\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7_5ohulf.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp7_5ohulf.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp7_5ohulf.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 : music_string.findfirst(\"o\")]\n    music_string = music_string[1 :\
    \ music_string.findfirst(\"o\")]\n    music_string = music_string[1 : music_string.findfirst(\"\
    |\")]\n    music_string = music_string[1 : music_string.findfirst(\"o\")]\n  \
    \  music_string = music_string[1 : music_string.findfirst(\"|\")]\n    music_string\
    \ = music_string[1 : music_string.findfirst(\"o\")]\n    music_string = music_string[1\
    \ : music_string.findfirst(\"|\")]\n    music_string = music_string[1 : music_string.findfirst(\"\
    o\")]\n    music_string = music_string[1 : music_string.findfirst(\"|\")]\n  \
    \  music_string = music_string[1 : music_string.findfirst(\"o\")]\n    music_string\
    \ = music_string[1 : music_string.findfirst(\"|\")]\n    music_string = music_string[1\
    \ : music_string.findfirst(\"o\")]\n    music_string = music_string[1 : music_string.findfirst(\"\
    |\")]\n    music_string = music_string[1 : music_string.findfirst(\"o\")]\n  \
    \  music_string = music_string[1 : music_string.findfirst(\"|\")]\n    music_string\
    \ = music_string[1 : music_string.findfirst(\"o\")]\n    music_string = music_string[1\
    \ : music_string.findfirst(\"|\")]\n    music_string = music_string[1 : music_string.findfirst(\"\
    o\")]\n    music_string = music_string[1 : music_string.findfirst(\"|\")]\n  \
    \  music_string = music_string[1 : music_string.findfirst(\"o\")]\n    music_string\
    \ = music_string[1 : music_string.findfirst(\"|\")]\n    music_string = music_string[1\
    \ : music_string.findfirst(\"o\")]\n    music_string = music_string[1 : music_string.findfirst(\"\
    |\")]\n    music_string = music_string[1 : music_string.findfirst(\"o\")]\n  \
    \  music_string = music_string[1 : music_string.findfirst(\"|\")]\n    music_string\
    \ = music_string[1 : music_string.findfirst(\"o\")]\n    music_string = music_string[1\
    \ : music_string.findfirst(\"|\")]\n    music_string = music_string[\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7nwjax1m.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7nwjax1m.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpd78k680x.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpd78k680x.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpd78k680x.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgzc_7pa0.jl:64\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgzc_7pa0.jl:64\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : music_string.index(\"|\", music_string.index(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"o\") + 1 : music_string.index(\"o\", music_string.index(\"\
    o\") + 1)]\n    music_string = music_string[music_string.index(\"|\") + 1 : music_string.index(\"\
    |\", music_string.index(\"|\") + 1)]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 : music_string.index(\"o\", music_string.index(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"|\") + 1 : music_string.index(\"|\", music_string.index(\"\
    |\") + 1)]\n    music_string = music_string[music_string.index(\"o\") + 1 : music_string.index(\"\
    o\", music_string.index(\"o\") + 1)]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : music_string.index(\"|\", music_string.index(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"o\") + 1 : music_string.index(\"o\", music_string.index(\"\
    o\") + 1)]\n    music_string = music_string[music_string.index(\"|\") + 1 : music_string.index(\"\
    |\", music_string.index(\"|\") + 1)]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 : music_string.index(\"o\", music_string.index(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"|\") + 1 : music_string.index(\"|\", music_string.index(\"\
    |\") + 1)]\n    music_string = music_string[music_string.index(\"o\") + 1 : music_string.index(\"\
    o\", music_string.index(\"o\") + 1)]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : music_string.index(\"|\", music_string.index(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"o\") + 1 : music_string.index(\"o\", music_string.index(\"\
    o\") + 1)]\n    music_string = music_string[music_string.index(\"|\") + 1 : music_string.index(\"\
    |\", music_string.\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4td51vfp.jl:30\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4td51vfp.jl:30\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_list = music_string.split(\" \")\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpamc58geg.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpamc58geg.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpamc58geg.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find('|'):]\n\
    \    music_string = music_string[music_string.find('o'):]\n    music_string =\
    \ music_string[music_string.find('|'):]\n    music_string = music_string[music_string.find('o'):]\n\
    \    music_string = music_string[music_string.find('|'):]\n    music_string =\
    \ music_string[music_string.find('o'):]\n    music_string = music_string[music_string.find('|'):]\n\
    \    music_string = music_string[music_string.find('o'):]\n    music_string =\
    \ music_string[music_string.find('|'):]\n    music_string = music_string[music_string.find('o'):]\n\
    \    music_string = music_string[music_string.find('|'):]\n    music_string =\
    \ music_string[music_string.find('o'):]\n    music_string = music_string[music_string.find('|'):]\n\
    \    music_string = music_string[music_string.find('o'):]\n    music_string =\
    \ music_string[music_string.find('|'):]\n    music_string = music_string[music_string.find('o'):]\n\
    \    music_string = music_string[music_string.find('|'):]\n    music_string =\
    \ music_string[music_string.find('o'):]\n    music_string = music_string[music_string.find('|'):]\n\
    \    music_string = music_string[music_string.find('o'):]\n    music_string =\
    \ music_string[music_string.find('|'):]\n    music_string = music_string[music_string.find('o'):]\n\
    \    music_string = music_string[music_string.find('|'):]\n    music_string =\
    \ music_string[music_string.find('o'):]\n    music_string = music_string[music_string.find('|'):]\n\
    \    music_string = music_string[music_string.find('o'):]\n    music_string =\
    \ music_string[music_string.find('|'):]\n    music_string = music_string[music_string.find('o'):]\n\
    \    music_string = music_string[music_string.find('|'):]\n    music_string =\
    \ music_string[music_string.find('o'):]\n    music_string = music_string[music_string.find('|'):]\n\
    \    music_string = music_string\nusing Test\n\n@testset begin\n\ncandidate =\
    \ parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"music_string.find('|'):\"\
    \ range expression \nStacktrace:\n [1] top-level scope at /tmp/tmpv5wbbnni.jl:15\n\
    \ [2] include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpv5wbbnni.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_notes = music_string.split(\"|\")\n    music_notes\
    \ = music_notes[music_notes.len()/2:end]\n    music_notes = music_notes.map(x\
    \ -> x.strip)\n    music_notes = music_notes.map(x -> x.split(\" \"))\n    music_notes\
    \ = music_notes.map(x -> x[1])\n    music_notes = music_notes.map(x -> x.split(\"\
    o\"))\n    music_notes = music_notes.map(x -> x.map(x -> x.toInt64))\n    music_notes\
    \ = music_notes.map(x -> x.map(x -> x.sum))\n    music_notes = music_notes.map(x\
    \ -> x.map(x -> x.max))\n    music_notes = music_notes.map(x -> x.map(x -> x.min))\n\
    \    music_notes = music_notes.map(x -> x.map(x -> x.mean))\n    music_notes =\
    \ music_notes.map(x -> x.map(x -> x.std))\n    music_notes = music_notes.map(x\
    \ -> x.map(x -> x.var))\n    music_notes = music_notes.map(x -> x.map(x -> x.max))\n\
    \    music_notes = music_notes.map(x -> x.map(x -> x.min))\n    music_notes =\
    \ music_notes.map(x -> x.map(x -> x.mean))\n    music_notes = music_notes.map(x\
    \ -> x.map(x -> x.std))\n    music_notes = music_notes.map(x -> x.map(x -> x.var))\n\
    \    music_notes = music_notes.map(x -> x.map(x -> x.max))\n    music_notes =\
    \ music_notes.map(x -> x.map(x -> x.min))\n    music_notes = music_notes.map(x\
    \ -> x.map(x -> x.mean))\n    music_notes = music_notes.map(x -> x.map(x -> x.std))\n\
    \    music_notes = music_notes.map(x -> x.map(x -> x.var))\n    music_notes =\
    \ music_notes.map(x -> x.map(x -> x.max))\n    music_notes = music_notes.map(x\
    \ -> x.map(x -> x.min))\n    music_notes = music_notes.map(x -> x.map(x -> x.mean))\n\
    \    music_notes = musi\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwnrq__2z.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpwnrq__2z.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpwnrq__2z.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\\n\")\n    music_string = music_string.strip(\"\
    \\r\")\n    music_string = music_string.strip(\"\\t\")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\" \")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\\n\")\n    music_string = music_string.strip(\"\
    \\r\")\n    music_string = music_string.strip(\"\\t\")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\" \")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\\n\")\n    music_string = music_string.strip(\"\
    \\r\")\n    music_string = music_string.strip(\"\\t\")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\" \")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\\n\")\n    music_string = music_string.strip(\"\
    \\r\")\n    music_string = music_string.strip(\"\\t\")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\" \")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = \nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0zbe7_n5.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp0zbe7_n5.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp0zbe7_n5.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string[1:end-1]\n    music_string = music_string[music_string != '.']\n\
    \    music_string = music_string[music_string != '|']\n    music_string = music_string[music_string\
    \ != 'o']\n    music_string = music_string[music_string != '|']\n    music_string\
    \ = music_string[music_string != '|']\n    music_string = music_string[music_string\
    \ != '|']\n    music_string = music_string[music_string != '|']\n    music_string\
    \ = music_string[music_string != '|']\n    music_string = music_string[music_string\
    \ != '|']\n    music_string = music_string[music_string != '|']\n    music_string\
    \ = music_string[music_string != '|']\n    music_string = music_string[music_string\
    \ != '|']\n    music_string = music_string[music_string != '|']\n    music_string\
    \ = music_string[music_string != '|']\n    music_string = music_string[music_string\
    \ != '|']\n    music_string = music_string[music_string != '|']\n    music_string\
    \ = music_string[music_string != '|']\n    music_string = music_string[music_string\
    \ != '|']\n    music_string = music_string[music_string != '|']\n    music_string\
    \ = music_string[music_string != '|']\n    music_string = music_string[music_string\
    \ != '|']\n    music_string = music_string[music_string != '|']\n    music_string\
    \ = music_string[music_string != '|']\n    music_string = music_string[music_string\
    \ != '|']\n    music_string = music_string[music_string != '|']\n    music_string\
    \ = music_string[music_string != '|']\n    music_string = music_string[music_string\
    \ != '|']\n    music_string = music_string[music_string != '|']\n    music_string\
    \ = music_string[music_string != '|']\n    music_string = music_string[music_string\
    \ != '|']\n    music_string = music_string[music_string != '|']\n    music_string\
    \ = music_string[music_string != '|']\n    music_string = music_string[music_string\
    \ != '|']\n    music_string = music_\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpx0pd6uft.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpx0pd6uft.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpx0pd6uft.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 : music_string.findfirst(\"o\")]\n    music_string = music_string[1 :\
    \ music_string.findfirst(\"o\")]\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 : end]\n    music_string = music_string[1 : end]\n    music_string =\
    \ music_string[music_string.findfirst(\"|\") + 1 : end]\n    music_string = music_string[1\
    \ : end]\n    music_string = music_string[music_string.findfirst(\"|\") + 1 :\
    \ end]\n    music_string = music_string[1 : end]\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 : end]\n    music_string = music_string[1 : end]\n    music_string =\
    \ music_string[music_string.findfirst(\"|\") + 1 : end]\n    music_string = music_string[1\
    \ : end]\n    music_string = music_string[music_string.findfirst(\"|\") + 1 :\
    \ end]\n    music_string = music_string[1 : end]\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 : end]\n    music_string = music_string[1 : end]\n    music_string =\
    \ music_string[music_string.findfirst(\"|\") + 1 : end]\n    music_string = music_string[1\
    \ : end]\n    music_string = music_string[music_string.findfirst(\"|\") + 1 :\
    \ end]\n    music_string = music_string[1 : end]\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 : end]\n    music_string = music_string[1 : end]\n    music_string =\
    \ music_string[music_string.findfirst(\"|\") + 1 : end]\n    music_string = music_string[1\
    \ : end]\n    music_string = music_string[music_string.findfirst(\"|\") + 1 :\
    \ end]\n    music_string = music_string[1 : end]\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 : end]\n    music_string = music_string[1 : end]\n    music_string =\
    \ music_string[music_string.findfirst(\"|\") + 1 : end]\n    music_string = music_string[1\
    \ : end]\n    music_string = music_string[music_string.findfirst(\"|\") + 1 :\
    \ end]\n    music_string = \nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp8eii430q.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp8eii430q.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp8eii430q.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgcl5zo9j.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpgcl5zo9j.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpgcl5zo9j.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmqnlzl1i.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpmqnlzl1i.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpmqnlzl1i.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string[1:end-1]\n    music_string = music_string[music_string != \"\
    o\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \".\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \".\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \".\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \".\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \".\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \".\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \".\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \".\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \".\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \".\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \".\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \".\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \".\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \".\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \".\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \".\"]\n    music_string = music_\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpeevnpcpl.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpeevnpcpl.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpeevnpcpl.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip()\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\".\") + 1 : music_string.find(\"\
    o\", music_string.find(\".\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\".\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\".\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\".\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\".\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\".\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\".\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\".\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\".\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.\n\
    using Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbmwfcgqx.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbmwfcgqx.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find(\"|\"\
    ) + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"|\", music_string.find(\"\
    |\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : \nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvkwbah4v.jl:36\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvkwbah4v.jl:36\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"music_string.index(\"\
    |\"):\" range expression \nStacktrace:\n [1] top-level scope at /tmp/tmpvxkz5ky5.jl:15\n\
    \ [2] include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpvxkz5ky5.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmwszwl36.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmwszwl36.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.findFirst(\"\
    \ \")]\n    music_string = music_string[music_string.findFirst(\"|\")]\n    music_string\
    \ = music_string[music_string.findFirst(\"o\")]\n    music_string = music_string[music_string.findFirst(\"\
    .|\")]\n    music_string = music_string[music_string.findFirst(\"o|\")]\n    music_string\
    \ = music_string[music_string.findFirst(\"o|\")]\n    music_string = music_string[music_string.findFirst(\"\
    o|\")]\n    music_string = music_string[music_string.findFirst(\"o|\")]\n    music_string\
    \ = music_string[music_string.findFirst(\"o|\")]\n    music_string = music_string[music_string.findFirst(\"\
    o|\")]\n    music_string = music_string[music_string.findFirst(\"o|\")]\n    music_string\
    \ = music_string[music_string.findFirst(\"o|\")]\n    music_string = music_string[music_string.findFirst(\"\
    o|\")]\n    music_string = music_string[music_string.findFirst(\"o|\")]\n    music_string\
    \ = music_string[music_string.findFirst(\"o|\")]\n    music_string = music_string[music_string.findFirst(\"\
    o|\")]\n    music_string = music_string[music_string.findFirst(\"o|\")]\n    music_string\
    \ = music_string[music_string.findFirst(\"o|\")]\n    music_string = music_string[music_string.findFirst(\"\
    o|\")]\n    music_string = music_string[music_string.findFirst(\"o|\")]\n    music_string\
    \ = music_string[music_string.findFirst(\"o|\")]\n    music_string = music_string[music_string.findFirst(\"\
    o|\")]\n    music_string = music_string[music_string.findFirst(\"o|\")]\n    music_string\
    \ = music_string[music_string.findFirst(\"o|\")]\n    music_string = music_string[music_string.findFirst(\"\
    o|\")]\n    music_string = music_string[music_string.findFirst(\"o|\")]\n    music_string\
    \ = music_string[music_string.findFirst(\"o|\")]\n    music_string = music_string[music_string.findFirst(\"\
    o|\")]\n    music_\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpisy5rno6.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpisy5rno6.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpisy5rno6.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_notes = music_string.split(\"|\")\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes.map(x -> x.strip)\n    music_notes\
    \ = music_notes.map(x -> x.split(\" \"))\n    music_notes = music_notes.map(x\
    \ -> x[1])\n    music_notes = music_notes.map(x -> x.split(\"o\"))\n    music_notes\
    \ = music_notes.map(x -> x.map(x -> x.toInt))\n    music_notes = music_notes.map(x\
    \ -> x.map(x -> x.sum))\n    music_notes = music_notes.map(x -> x.map(x -> x.max))\n\
    \    music_notes = music_notes.map(x -> x.map(x -> x.min))\n    music_notes =\
    \ music_notes.map(x -> x.map(x -> x.product))\n    music_notes = music_notes.map(x\
    \ -> x.map(x -> x.sum))\n    music_notes = music_notes.map(x -> x.map(x -> x.product))\n\
    \    music_notes = music_notes.map(x -> x.map(x -> x.sum))\n    music_notes =\
    \ music_notes.map(x -> x.map(x -> x.product))\n    music_notes = music_notes.map(x\
    \ -> x.map(x -> x.sum))\n    music_notes = music_notes.map(x -> x.map(x -> x.product))\n\
    \    music_notes = music_notes.map(x -> x.map(x -> x.sum))\n    music_notes =\
    \ music_notes.map(x -> x.map(x -> x.product))\n    music_notes = music_notes.map(x\
    \ -> x.map(x -> x.sum))\n    music_notes = music_notes.map(x -> x.map(x -> x.product))\n\
    \    music_notes = music_notes.map(x -> x.map(x -> x.sum))\n    music_notes =\
    \ music_notes.map(x -> x.map(x -> x.product))\n    music_notes = music_notes.map(x\
    \ -> x.map(x -> x.sum))\n    music_notes = music_notes.map(x -> x.map(x -> x.product))\n\
    \    music_notes = music_notes.map(x -> x.map(x -> x.sum))\n    music_notes =\
    \ music_notes.map(x -> x.\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprkqvw875.jl:42\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprkqvw875.jl:42\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp475zhb5g.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp475zhb5g.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip()\n    music_string = music_string.strip(\"\\n\")\n   \
    \ music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6f77ypk6.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp6f77ypk6.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp6f77ypk6.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpti8sp_7z.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpti8sp_7z.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpti8sp_7z.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqb8ym5j3.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpqb8ym5j3.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpqb8ym5j3.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmtzdkvpt.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmtzdkvpt.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : music_string.index(\"|\") + music_string.index(\"|\") + 1]\n    music_string\
    \ = music_string[music_string.index(\"|\") + 1 : music_string.index(\"|\") + music_string.index(\"\
    |\") + 1]\n    music_string = music_string[music_string.index(\"|\") + 1 : music_string.index(\"\
    |\") + music_string.index(\"|\") + 1]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : music_string.index(\"|\") + music_string.index(\"|\") + 1]\n    music_string\
    \ = music_string[music_string.index(\"|\") + 1 : music_string.index(\"|\") + music_string.index(\"\
    |\") + 1]\n    music_string = music_string[music_string.index(\"|\") + 1 : music_string.index(\"\
    |\") + music_string.index(\"|\") + 1]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : music_string.index(\"|\") + music_string.index(\"|\") + 1]\n    music_string\
    \ = music_string[music_string.index(\"|\") + 1 : music_string.index(\"|\") + music_string.index(\"\
    |\") + 1]\n    music_string = music_string[music_string.index(\"|\") + 1 : music_string.index(\"\
    |\") + music_string.index(\"|\") + 1]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : music_string.index(\"|\") + music_string.index(\"|\") + 1]\n    music_string\
    \ = music_string[music_string.index(\"|\") + 1 : music_string.index(\"|\") + music_string.index(\"\
    |\") + 1]\n    music_string = music_string[music_string.index(\"|\") + 1 : music_string.index(\"\
    |\") + music_string.index(\"|\") + 1]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : music_string.index(\"|\") + music_string.index(\"|\") + 1]\n    music_string\
    \ = music_string[music_string.index(\"|\") + 1 : music_string.index(\"|\") + music_string.index(\"\
    |\") + 1]\n    music_string = music_string[music_string.index(\"\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnnakcv21.jl:35\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpnnakcv21.jl:35\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : music_string.index(\"|\", music_string.index(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"|\") + 1 : music_string.index(\"|\", music_string.index(\"\
    |\") + 1)]\n    music_string = music_string[music_string.index(\"|\") + 1 : music_string.index(\"\
    |\", music_string.index(\"|\") + 1)]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : music_string.index(\"|\", music_string.index(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"|\") + 1 : music_string.index(\"|\", music_string.index(\"\
    |\") + 1)]\n    music_string = music_string[music_string.index(\"|\") + 1 : music_string.index(\"\
    |\", music_string.index(\"|\") + 1)]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : music_string.index(\"|\", music_string.index(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"|\") + 1 : music_string.index(\"|\", music_string.index(\"\
    |\") + 1)]\n    music_string = music_string[music_string.index(\"|\") + 1 : music_string.index(\"\
    |\", music_string.index(\"|\") + 1)]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : music_string.index(\"|\", music_string.index(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"|\") + 1 : music_string.index(\"|\", music_string.index(\"\
    |\") + 1)]\n    music_string = music_string[music_string.index(\"|\") + 1 : music_string.index(\"\
    |\", music_string.index(\"|\") + 1)]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : music_string.index(\"|\", music_string.index(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"|\") + 1 : music_string.index(\"|\", music_string.index(\"\
    |\") + 1)]\n    music_string = music_string[music_string.index(\"|\") + 1 : music_string.index(\"\
    |\", music_string.\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpyhhzixs5.jl:30\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpyhhzixs5.jl:30\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgtun6u20.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpgtun6u20.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpgtun6u20.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppst8nf9m.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmppst8nf9m.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmppst8nf9m.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_notes = music_string.split(\"|\")\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes.map(x => x.strip)\n    music_notes\
    \ = music_notes.map(x => x.split(\" \"))\n    music_notes = music_notes.map(x\
    \ => x.map(x => parse(x)))\n    music_notes = music_notes.map(x => x.map(x =>\
    \ x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x =>\
    \ x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x =>\
    \ x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x =>\
    \ x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x =>\
    \ x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x =>\
    \ x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x =>\
    \ x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x =>\
    \ x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x =>\
    \ x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x =>\
    \ x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x =>\
    \ x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x =>\
    \ x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x =>\
    \ x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x =>\
    \ x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x =>\
    \ x.map(x => x.map(x => x.map(x => x.map(x => x.map(\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp64nepgeg.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp64nepgeg.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip()\n    music_string = music_string[music_string.find('|'):]\n\
    \    music_string = music_string[music_string.find('o'):]\n    music_string =\
    \ music_string[music_string.find('|'):]\n    music_string = music_string[music_string.find('o'):]\n\
    \    music_string = music_string[music_string.find('|'):]\n    music_string =\
    \ music_string[music_string.find('o'):]\n    music_string = music_string[music_string.find('|'):]\n\
    \    music_string = music_string[music_string.find('o'):]\n    music_string =\
    \ music_string[music_string.find('|'):]\n    music_string = music_string[music_string.find('o'):]\n\
    \    music_string = music_string[music_string.find('|'):]\n    music_string =\
    \ music_string[music_string.find('o'):]\n    music_string = music_string[music_string.find('|'):]\n\
    \    music_string = music_string[music_string.find('o'):]\n    music_string =\
    \ music_string[music_string.find('|'):]\n    music_string = music_string[music_string.find('o'):]\n\
    \    music_string = music_string[music_string.find('|'):]\n    music_string =\
    \ music_string[music_string.find('o'):]\n    music_string = music_string[music_string.find('|'):]\n\
    \    music_string = music_string[music_string.find('o'):]\n    music_string =\
    \ music_string[music_string.find('|'):]\n    music_string = music_string[music_string.find('o'):]\n\
    \    music_string = music_string[music_string.find('|'):]\n    music_string =\
    \ music_string[music_string.find('o'):]\n    music_string = music_string[music_string.find('|'):]\n\
    \    music_string = music_string[music_string.find('o'):]\n    music_string =\
    \ music_string[music_string.find('|'):]\n    music_string = music_string[music_string.find('o'):]\n\
    \    music_string = music_string[music_string.find('|'):]\n    music_string =\
    \ music_string[music_string.find('o'):]\n    music_string = music_string[music_string.find('|'):]\n\
    \    music_string = music_string\nusing Test\n\n@testset begin\n\ncandidate =\
    \ parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"music_string.find('|'):\"\
    \ range expression \nStacktrace:\n [1] top-level scope at /tmp/tmp2redufzk.jl:15\n\
    \ [2] include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp2redufzk.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmploixmqsq.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmploixmqsq.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find(\"|\"\
    ) + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : \nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpagrlc0dq.jl:36\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpagrlc0dq.jl:36\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpke9j3po1.jl:64\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpke9j3po1.jl:64\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end-1]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end-1]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end-1]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end-1]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end-1]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end-1]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end-1]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end-1]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end-1]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end-1]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end-1]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end-1]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end-1]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end-1]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end-1]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end-1]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end-1]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end-1]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end-1]\n    music_string = music_string[musi\n\
    using Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprjny6ceg.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprjny6ceg.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find('|'):]\n\
    \    music_string = music_string[music_string.find('o'):]\n    music_string =\
    \ music_string[music_string.find('|'):]\n    music_string = music_string[music_string.find('o'):]\n\
    \    music_string = music_string[music_string.find('|'):]\n    music_string =\
    \ music_string[music_string.find('o'):]\n    music_string = music_string[music_string.find('|'):]\n\
    \    music_string = music_string[music_string.find('o'):]\n    music_string =\
    \ music_string[music_string.find('|'):]\n    music_string = music_string[music_string.find('o'):]\n\
    \    music_string = music_string[music_string.find('|'):]\n    music_string =\
    \ music_string[music_string.find('o'):]\n    music_string = music_string[music_string.find('|'):]\n\
    \    music_string = music_string[music_string.find('o'):]\n    music_string =\
    \ music_string[music_string.find('|'):]\n    music_string = music_string[music_string.find('o'):]\n\
    \    music_string = music_string[music_string.find('|'):]\n    music_string =\
    \ music_string[music_string.find('o'):]\n    music_string = music_string[music_string.find('|'):]\n\
    \    music_string = music_string[music_string.find('o'):]\n    music_string =\
    \ music_string[music_string.find('|'):]\n    music_string = music_string[music_string.find('o'):]\n\
    \    music_string = music_string[music_string.find('|'):]\n    music_string =\
    \ music_string[music_string.find('o'):]\n    music_string = music_string[music_string.find('|'):]\n\
    \    music_string = music_string[music_string.find('o'):]\n    music_string =\
    \ music_string[music_string.find('|'):]\n    music_string = music_string[music_string.find('o'):]\n\
    \    music_string = music_string[music_string.find('|'):]\n    music_string =\
    \ music_string[music_string.find('o'):]\n    music_string = music_string[music_string.find('|'):]\n\
    \    music_string = music_string\nusing Test\n\n@testset begin\n\ncandidate =\
    \ parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"music_string.find('|'):\"\
    \ range expression \nStacktrace:\n [1] top-level scope at /tmp/tmplgk_skwq.jl:15\n\
    \ [2] include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmplgk_skwq.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 : music_string.findfirst(\"o\")]\n    music_string = music_string[1 :\
    \ music_string.findfirst(\"o\")]\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 : music_string.findfirst(\"o\")]\n    music_string = music_string[1 :\
    \ music_string.findfirst(\"o\")]\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 : music_string.findfirst(\"o\")]\n    music_string = music_string[1 :\
    \ music_string.findfirst(\"o\")]\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 : music_string.findfirst(\"o\")]\n    music_string = music_string[1 :\
    \ music_string.findfirst(\"o\")]\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 : music_string.findfirst(\"o\")]\n    music_string = music_string[1 :\
    \ music_string.findfirst(\"o\")]\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 : music_string.findfirst(\"o\")]\n    music_string = music_string[1 :\
    \ music_string.findfirst(\"o\")]\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 : music_string.findfirst(\"o\")]\n    music_string = music_string[1 :\
    \ music_string.findfirst(\"o\")]\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 : music_string.findfirst(\"o\")]\n    music_string = music_string[1 :\
    \ music_string.findfirst(\"o\")]\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 : music_string.findfirst(\"o\")]\n    music_string = music_string[1 :\
    \ music_string.findfirst(\"o\")]\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 : music_string.findfirst(\"o\")]\n    music_string = music_string[1 :\
    \ music_string.findfirst(\"o\")]\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 : music_string.findfirst(\"o\")]\n    music_string = music_string[1 :\
    \ music_string.findfirst(\"o\")]\n    music_string = music_string[\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1nx137_m.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1nx137_m.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = ''.join(music_string)\n    music_string = music_string.strip()\n    music_string\
    \ = music_string.replace(' ', '')\n    music_string = music_string.replace('|',\
    \ '')\n    music_string = music_string.replace('o', '')\n    music_string = music_string.replace('.',\
    \ '')\n    music_string = music_string.replace(' ', '')\n    music_string = music_string.split(',')\n\
    \    music_string = [int(i) for i in music_string]\n    return music_string\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid character literal\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpc1uwc4t0.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpc1uwc4t0.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_6goa3oi.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp_6goa3oi.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp_6goa3oi.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = \"o o| .| o| o| .| .| .| .| o o\"\n    music_string = music_string.split(\"\
    \ \")\n    music_string = [x for x in music_string if x != \"\"]\n    music_string\
    \ = [x for x in music_string if x != \"o\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \".\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \"|\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \"|\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \"|\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \"|\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \"|\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \"|\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \"|\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \"|\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \"|\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \"|\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \"|\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \"|\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \"|\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\")\
    \ == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") ==\
    \ [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2,\
    \ 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkl0sfn4u.jl:53\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpkl0sfn4u.jl:53\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.findFirst(\"\
    \ \")]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n \
    \   music_string = music_string[music_string.findFirst(\"|\"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\"|\"):end]\n    music_string = music_string[music_string.findFirst(\"\
    |\"):end]\n    music_string = music_string[music_string.findFirst(\"|\"):end]\n\
    \    music_string = music_string[music_string.findFirst(\"|\"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\"|\"):end]\n    music_string = music_string[music_string.findFirst(\"\
    |\"):end]\n    music_string = music_string[music_string.findFirst(\"|\"):end]\n\
    \    music_string = music_string[music_string.findFirst(\"|\"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\"|\"):end]\n    music_string = music_string[music_string.findFirst(\"\
    |\"):end]\n    music_string = music_string[music_string.findFirst(\"|\"):end]\n\
    \    music_string = music_string[music_string.findFirst(\"|\"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\"|\"):end]\n    music_string = music_string[music_string.findFirst(\"\
    |\"):end]\n    music_string = music_string[music_string.findFirst(\"|\"):end]\n\
    \    music_string = music_string[music_string.findFirst(\"|\"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\"|\"):end]\n    music_string = music_string[music_string.findFirst(\"\
    |\"):end]\n    music_string = music_string[music_string.findFirst(\"|\"):end]\n\
    \    music_string = music_string[music_string.findFirst(\"|\"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\"|\"):end]\n    music_string = music_string[music_string.findFirst(\"\
    |\"):end]\n    music_string = music_string[music_string.findFirst(\"|\"):end]\n\
    \    music_string = music_string[music_string.findFirst(\"|\"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\"|\"):end]\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppvgvrrsp.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmppvgvrrsp.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmppvgvrrsp.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_list = music_string.split(\" \")\n    music_list2\
    \ = music_list\n    music_list3 = music_list\n    music_list4 = music_list\n \
    \   music_list5 = music_list\n    music_list6 = music_list\n    music_list7 =\
    \ music_list\n    music_list8 = music_list\n    music_list9 = music_list\n   \
    \ music_list10 = music_list\n    music_list11 = music_list\n    music_list12 =\
    \ music_list\n    music_list13 = music_list\n    music_list14 = music_list\n \
    \   music_list15 = music_list\n    music_list16 = music_list\n    music_list17\
    \ = music_list\n    music_list18 = music_list\n    music_list19 = music_list\n\
    \    music_list20 = music_list\n    music_list21 = music_list\n    music_list22\
    \ = music_list\n    music_list23 = music_list\n    music_list24 = music_list\n\
    \    music_list25 = music_list\n    music_list26 = music_list\n    music_list27\
    \ = music_list\n    music_list28 = music_list\n    music_list29 = music_list\n\
    \    music_list30 = music_list\n    music_list31 = music_list\n    music_list32\
    \ = music_list\n    music_list33 = music_list\n    music_list34 = music_list\n\
    \    music_list35 = music_list\n    music_list36 = music_list\n    music_list37\
    \ = music_list\n    music_list38 = music_list\n    music_list39 = music_list\n\
    \    music_list40 = music_list\n    music_list41 = music_list\n    music_list42\
    \ = music_list\n    music_list43 = music_list\n    music_list44 = music_list\n\
    \    music_list45 = music_list\n    music_list46 = music_list\n    music_list47\
    \ = music_list\n    music_list48 = music_list\n    music_list49 = music_list\n\
    \    music_list50 = music_list\n    music_list51 = music_list\n    music_list5\n\
    using Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpf7tq6y96.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpf7tq6y96.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpf7tq6y96.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string[1:end-1]\n    music_string = music_string[music_string != \"\
    o\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \".\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpigk12zlx.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpigk12zlx.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpigk12zlx.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find(\"|\"\
    ) + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 : music_string.find(\"|\", music_string.find(\"\
    |\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 : music_string.find(\"|\", music_string.find(\"\
    |\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t\
    @test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") ==\
    \ [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwhf3b5im.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpwhf3b5im.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpwhf3b5im.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    \nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn6x8064l.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpn6x8064l.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpn6x8064l.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpkcr5ac4p.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpkcr5ac4p.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpkcr5ac4p.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string[1:end-1]\n    music_string = music_string[music_string .== \"\
    |\"]\n    music_string = music_string[music_string .== \"o\"]\n    music_string\
    \ = music_string[music_string .== \"|\"]\n    music_string = music_string[music_string\
    \ .== \"o\"]\n    music_string = music_string[music_string .== \"|\"]\n    music_string\
    \ = music_string[music_string .== \"o\"]\n    music_string = music_string[music_string\
    \ .== \"|\"]\n    music_string = music_string[music_string .== \"o\"]\n    music_string\
    \ = music_string[music_string .== \"|\"]\n    music_string = music_string[music_string\
    \ .== \"o\"]\n    music_string = music_string[music_string .== \"|\"]\n    music_string\
    \ = music_string[music_string .== \"o\"]\n    music_string = music_string[music_string\
    \ .== \"|\"]\n    music_string = music_string[music_string .== \"o\"]\n    music_string\
    \ = music_string[music_string .== \"|\"]\n    music_string = music_string[music_string\
    \ .== \"o\"]\n    music_string = music_string[music_string .== \"|\"]\n    music_string\
    \ = music_string[music_string .== \"o\"]\n    music_string = music_string[music_string\
    \ .== \"|\"]\n    music_string = music_string[music_string .== \"o\"]\n    music_string\
    \ = music_string[music_string .== \"|\"]\n    music_string = music_string[music_string\
    \ .== \"o\"]\n    music_string = music_string[music_string .== \"|\"]\n    music_string\
    \ = music_string[music_string .== \"o\"]\n    music_string = music_string[music_string\
    \ .== \"|\"]\n    music_string = music_string[music_string .== \"o\"]\n    music_string\
    \ = music_string[music_string .== \"|\"]\n    music_string = music_string[music_string\
    \ .== \"o\"]\n    music_string = music_string[music_string .== \"|\"]\n    music_string\
    \ = music_string[music_string .== \"o\"]\n    music_string = music_string[music_string\
    \ .== \"|\"]\n    music_string = musi\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmps1y3cc1l.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmps1y3cc1l.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmps1y3cc1l.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_list = music_string.split(\" \")\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpga81aewn.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpga81aewn.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpga81aewn.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end-1]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end-1]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end-1]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end-1]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end-1]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end-1]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end-1]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end-1]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end-1]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end-1]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end-1]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end-1]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end-1]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end-1]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end-1]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end-1]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end-1]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end-1]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end-1]\n    music_string = music_string[musi\n\
    using Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpikbla_pi.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpikbla_pi.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.start-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpam4039n_.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpam4039n_.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpam4039n_.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : music_string.index(\"|\", music_string.index(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"o\") + 1 : music_string.index(\"o\", music_string.index(\"\
    o\") + 1)]\n    music_string = music_string[music_string.index(\"o\") + 1 : music_string.index(\"\
    o\", music_string.index(\"o\") + 1)]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 : music_string.index(\"o\", music_string.index(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"o\") + 1 : music_string.index(\"o\", music_string.index(\"\
    o\") + 1)]\n    music_string = music_string[music_string.index(\"o\") + 1 : music_string.index(\"\
    o\", music_string.index(\"o\") + 1)]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 : music_string.index(\"o\", music_string.index(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"o\") + 1 : music_string.index(\"o\", music_string.index(\"\
    o\") + 1)]\n    music_string = music_string[music_string.index(\"o\") + 1 : music_string.index(\"\
    o\", music_string.index(\"o\") + 1)]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 : music_string.index(\"o\", music_string.index(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"o\") + 1 : music_string.index(\"o\", music_string.index(\"\
    o\") + 1)]\n    music_string = music_string[music_string.index(\"o\") + 1 : music_string.index(\"\
    o\", music_string.index(\"o\") + 1)]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 : music_string.index(\"o\", music_string.index(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"o\") + 1 : music_string.index(\"o\", music_string.index(\"\
    o\") + 1)]\n    music_string = music_string[music_string.index(\"o\") + 1 : music_string.index(\"\
    o\", music_string.\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpje2awkuj.jl:30\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpje2awkuj.jl:30\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string[1:end-1]\n    music_string = music_string[music_string != \"\
    o\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \".\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \".\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \".\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \".\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \".\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \".\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \".\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \".\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \".\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \".\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \".\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \".\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \".\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \".\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \".\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \".\"]\n    music_string = music_\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmplp0p637r.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmplp0p637r.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmplp0p637r.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip()\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : \nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8lynbgm2.jl:36\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8lynbgm2.jl:36\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjb_y54hi.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpjb_y54hi.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpjb_y54hi.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string[1:end-1]\n    music_string = music_string[music_string != \"\
    o\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \".\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp5_pzlni2.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp5_pzlni2.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp5_pzlni2.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.findFirst(\"\
    \ \")]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n \
    \   music_string = music_string[music_string.findFirst(\"|\"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\"|\"):end]\n    music_string = music_string[music_string.findFirst(\"\
    |\"):end]\n    music_string = music_string[music_string.findFirst(\"|\"):end]\n\
    \    music_string = music_string[music_string.findFirst(\"|\"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\"|\"):end]\n    music_string = music_string[music_string.findFirst(\"\
    |\"):end]\n    music_string = music_string[music_string.findFirst(\"|\"):end]\n\
    \    music_string = music_string[music_string.findFirst(\"|\"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\"|\"):end]\n    music_string = music_string[music_string.findFirst(\"\
    |\"):end]\n    music_string = music_string[music_string.findFirst(\"|\"):end]\n\
    \    music_string = music_string[music_string.findFirst(\"|\"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\"|\"):end]\n    music_string = music_string[music_string.findFirst(\"\
    |\"):end]\n    music_string = music_string[music_string.findFirst(\"|\"):end]\n\
    \    music_string = music_string[music_string.findFirst(\"|\"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\"|\"):end]\n    music_string = music_string[music_string.findFirst(\"\
    |\"):end]\n    music_string = music_string[music_string.findFirst(\"|\"):end]\n\
    \    music_string = music_string[music_string.findFirst(\"|\"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\"|\"):end]\n    music_string = music_string[music_string.findFirst(\"\
    |\"):end]\n    music_string = music_string[music_string.findFirst(\"|\"):end]\n\
    \    music_string = music_string[music_string.findFirst(\"|\"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\"|\"):end]\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp8cyucpr0.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp8cyucpr0.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp8cyucpr0.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_list = music_string.split(\" \")\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_ytcmd8o.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp_ytcmd8o.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp_ytcmd8o.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqe9q3hp8.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpqe9q3hp8.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpqe9q3hp8.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpm166kglb.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpm166kglb.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpm166kglb.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_list = music_string.split(\" \")\n    music_list\
    \ = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"(music_list.len()\
    \ - 1):\" range expression \nStacktrace:\n [1] top-level scope at /tmp/tmpswno9vhw.jl:16\n\
    \ [2] include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpswno9vhw.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\") + 1 .. music_string.index(\"|\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6e34qw_4.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp6e34qw_4.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp6e34qw_4.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string[1:end-1]\n    music_string = music_string[music_string != '.']\n\
    \    music_string = music_string[music_string != '|']\n    music_string = music_string[music_string\
    \ != 'o']\n    music_string = music_string[music_string != '|']\n    music_string\
    \ = music_string[music_string != '|']\n    music_string = music_string[music_string\
    \ != '|']\n    music_string = music_string[music_string != '|']\n    music_string\
    \ = music_string[music_string != '|']\n    music_string = music_string[music_string\
    \ != '|']\n    music_string = music_string[music_string != '|']\n    music_string\
    \ = music_string[music_string != '|']\n    music_string = music_string[music_string\
    \ != '|']\n    music_string = music_string[music_string != '|']\n    music_string\
    \ = music_string[music_string != '|']\n    music_string = music_string[music_string\
    \ != '|']\n    music_string = music_string[music_string != '|']\n    music_string\
    \ = music_string[music_string != '|']\n    music_string = music_string[music_string\
    \ != '|']\n    music_string = music_string[music_string != '|']\n    music_string\
    \ = music_string[music_string != '|']\n    music_string = music_string[music_string\
    \ != '|']\n    music_string = music_string[music_string != '|']\n    music_string\
    \ = music_string[music_string != '|']\n    music_string = music_string[music_string\
    \ != '|']\n    music_string = music_string[music_string != '|']\n    music_string\
    \ = music_string[music_string != '|']\n    music_string = music_string[music_string\
    \ != '|']\n    music_string = music_string[music_string != '|']\n    music_string\
    \ = music_string[music_string != '|']\n    music_string = music_string[music_string\
    \ != '|']\n    music_string = music_string[music_string != '|']\n    music_string\
    \ = music_string[music_string != '|']\n    music_string = music_string[music_string\
    \ != '|']\n    music_string = music_\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp77mkg5pu.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp77mkg5pu.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp77mkg5pu.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip()\n    music_string = music_string[music_string.rfind('|'):]\n\
    \    music_string = music_string[music_string.rfind('o'):]\n    music_string =\
    \ music_string[music_string.rfind('|'):]\n    music_string = music_string[music_string.rfind('o'):]\n\
    \    music_string = music_string[music_string.rfind('|'):]\n    music_string =\
    \ music_string[music_string.rfind('o'):]\n    music_string = music_string[music_string.rfind('|'):]\n\
    \    music_string = music_string[music_string.rfind('o'):]\n    music_string =\
    \ music_string[music_string.rfind('|'):]\n    music_string = music_string[music_string.rfind('o'):]\n\
    \    music_string = music_string[music_string.rfind('|'):]\n    music_string =\
    \ music_string[music_string.rfind('o'):]\n    music_string = music_string[music_string.rfind('|'):]\n\
    \    music_string = music_string[music_string.rfind('o'):]\n    music_string =\
    \ music_string[music_string.rfind('|'):]\n    music_string = music_string[music_string.rfind('o'):]\n\
    \    music_string = music_string[music_string.rfind('|'):]\n    music_string =\
    \ music_string[music_string.rfind('o'):]\n    music_string = music_string[music_string.rfind('|'):]\n\
    \    music_string = music_string[music_string.rfind('o'):]\n    music_string =\
    \ music_string[music_string.rfind('|'):]\n    music_string = music_string[music_string.rfind('o'):]\n\
    \    music_string = music_string[music_string.rfind('|'):]\n    music_string =\
    \ music_string[music_string.rfind('o'):]\n    music_string = music_string[music_string.rfind('|'):]\n\
    \    music_string = music_string[music_string.rfind('o'):]\n    music_string =\
    \ music_string[music_string.rfind('|'):]\n    music_string = music_string[music_string.rfind('o'):]\n\
    \    music_string = music_string[music_string.rfind('|'):]\n    music_string =\
    \ music_string[music_\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"music_string.rfind('|'):\"\
    \ range expression \nStacktrace:\n [1] top-level scope at /tmp/tmpgepte547.jl:15\n\
    \ [2] include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpgepte547.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find(\"|\"\
    ) + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 : music_string.find(\"|\", music_string.find(\"\
    |\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 : music_string.find(\"|\", music_string.find(\"\
    |\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t\
    @test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") ==\
    \ [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_u1emx0f.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp_u1emx0f.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp_u1emx0f.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpenlxevc1.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpenlxevc1.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpenlxevc1.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.findFirst(\"\
    \ \")]\n    music_string = music_string[music_string.findFirst(\" \"):]\n    music_string\
    \ = music_string[music_string.findFirst(\"|\"):]\n    music_string = music_string[music_string.findFirst(\"\
    |\"):]\n    music_string = music_string[music_string.findFirst(\"|\"):]\n    music_string\
    \ = music_string[music_string.findFirst(\"|\"):]\n    music_string = music_string[music_string.findFirst(\"\
    |\"):]\n    music_string = music_string[music_string.findFirst(\"|\"):]\n    music_string\
    \ = music_string[music_string.findFirst(\"|\"):]\n    music_string = music_string[music_string.findFirst(\"\
    |\"):]\n    music_string = music_string[music_string.findFirst(\"|\"):]\n    music_string\
    \ = music_string[music_string.findFirst(\"|\"):]\n    music_string = music_string[music_string.findFirst(\"\
    |\"):]\n    music_string = music_string[music_string.findFirst(\"|\"):]\n    music_string\
    \ = music_string[music_string.findFirst(\"|\"):]\n    music_string = music_string[music_string.findFirst(\"\
    |\"):]\n    music_string = music_string[music_string.findFirst(\"|\"):]\n    music_string\
    \ = music_string[music_string.findFirst(\"|\"):]\n    music_string = music_string[music_string.findFirst(\"\
    |\"):]\n    music_string = music_string[music_string.findFirst(\"|\"):]\n    music_string\
    \ = music_string[music_string.findFirst(\"|\"):]\n    music_string = music_string[music_string.findFirst(\"\
    |\"):]\n    music_string = music_string[music_string.findFirst(\"|\"):]\n    music_string\
    \ = music_string[music_string.findFirst(\"|\"):]\n    music_string = music_string[music_string.findFirst(\"\
    |\"):]\n    music_string = music_string[music_string.findFirst(\"|\"):]\n    music_string\
    \ = music_string[music_string.findFirst(\"|\"):]\n    music_string = music_string[music_string.findFirst(\"\
    |\"):]\n\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"music_string.findFirst(\"\
    \ \"):\" range expression \nStacktrace:\n [1] top-level scope at /tmp/tmpffnjwery.jl:16\n\
    \ [2] include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpffnjwery.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find(\"|\"\
    ) + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 : music_string.find(\"|\", music_string.find(\"\
    |\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 : music_string.find(\"|\", music_string.find(\"\
    |\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t\
    @test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") ==\
    \ [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpf3elh9pz.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpf3elh9pz.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpf3elh9pz.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip()\n    music_string = music_string.strip(\"\\n\")\n   \
    \ music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpz1zoi9wp.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpz1zoi9wp.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpz1zoi9wp.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpv3nq9_wq.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpv3nq9_wq.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpv3nq9_wq.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string[1:end-1]\n    music_list = split(music_string, \"|\")\n    music_list\
    \ = map(parse, music_list)\n    music_list = map(sum, music_list)\n    return\
    \ music_list\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t\
    @test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") ==\
    \ [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp9jzscbdk.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{Int64}([])\n  MethodError: no method\
    \ matching parse(::SubString{String})\n  Closest candidates are:\n    parse(!Matched::Type{T},\
    \ !Matched::AbstractChar; base) where T<:Integer at parse.jl:41\n    parse(!Matched::Type{T},\
    \ !Matched::AbstractString; base) where T<:Integer at parse.jl:238\n    parse(!Matched::Type{T},\
    \ !Matched::AbstractString; kwargs...) where T<:Real at parse.jl:376\n    ...\n\
    \  Stacktrace:\n   [1] iterate at ./generator.jl:47 [inlined]\n   [2] _collect(::Array{SubString{String},1},\
    \ ::Base.Generator{Array{SubString{String},1},typeof(parse)}, ::Base.EltypeUnknown,\
    \ ::Base.HasShape{1}) at ./array.jl:678\n   [3] collect_similar at ./array.jl:607\
    \ [inlined]\n   [4] map at ./abstractarray.jl:2072 [inlined]\n   [5] parse_music(::String)\
    \ at /tmp/tmp9jzscbdk.jl:16\n   [6] top-level scope at /tmp/tmp9jzscbdk.jl:25\n\
    \   [7] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [8] top-level scope at /tmp/tmp9jzscbdk.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmp9jzscbdk.jl:26\n  Test threw exception\n  Expression: candidate(\"\
    o o o o\") == [4, 4, 4, 4]\n  MethodError: no method matching parse(::SubString{String})\n\
    \  Closest candidates are:\n    parse(!Matched::Type{T}, !Matched::AbstractChar;\
    \ base) where T<:Integer at parse.jl:41\n    parse(!Matched::Type{T}, !Matched::AbstractString;\
    \ base) where T<:Integer at parse.jl:238\n    parse(!Matched::Type{T}, !Matched::AbstractString;\
    \ kwargs...) where T<:Real at parse.jl:376\n    ...\n  Stacktrace:\n   [1] iterate\
    \ at ./generator.jl:47 [inlined]\n   [2] _collect(::Array{SubString{String},1},\
    \ ::Base.Generator{Array{SubString{String},1},typeof(parse)}, ::Base.EltypeUnknown,\
    \ ::Base.HasShape{1}) at ./array.jl:678\n   [3] collect_similar at ./array.jl:607\
    \ [inlined]\n   [4] map at ./abstractarray.jl:2072 [inlined]\n   [5] parse_music(::String)\
    \ at /tmp/tmp9jzscbdk.jl:16\n   [6] top-level scope at /tmp/tmp9jzscbdk.jl:26\n\
    \   [7] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [8] top-level scope at /tmp/tmp9jzscbdk.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmp9jzscbdk.jl:27\n  Test threw exception\n  Expression: candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1]\n  MethodError: no method matching parse(::SubString{String})\n\
    \  Closest candidates are:\n    parse(!Matched::Type{T}, !Matched::AbstractChar;\
    \ base) where T<:Integer at parse.jl:41\n    parse(!Matched::Type{T}, !Matched::AbstractString;\
    \ base) where T<:Integer at parse.jl:238\n    parse(!Matched::Type{T}, !Matched::AbstractString;\
    \ kwargs...) where T<:Real at parse.jl:376\n    ...\n  Stacktrace:\n   [1] iterate\
    \ at ./generator.jl:47 [inlined]\n   [2] _collect(::Array{SubString{String},1},\
    \ ::Base.Generator{Array{SubString{String},1},typeof(parse)}, ::Base.EltypeUnknown,\
    \ ::Base.HasShape{1}) at ./array.jl:678\n   [3] collect_similar at ./array.jl:607\
    \ [inlined]\n   [4] map at ./abstractarray.jl:2072 [inlined]\n   [5] parse_music(::String)\
    \ at /tmp/tmp9jzscbdk.jl:16\n   [6] top-level scope at /tmp/tmp9jzscbdk.jl:27\n\
    \   [7] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [8] top-level scope at /tmp/tmp9jzscbdk.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmp9jzscbdk.jl:28\n  Test threw exception\n  Expression: candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n  MethodError: no method matching\
    \ parse(::SubString{String})\n  Closest candidates are:\n    parse(!Matched::Type{T},\
    \ !Matched::AbstractChar; base) where T<:Integer at parse.jl:41\n    parse(!Matched::Type{T},\
    \ !Matched::AbstractString; base) where T<:Integer at parse.jl:238\n    parse(!Matched::Type{T},\
    \ !Matched::AbstractString; kwargs...) where T<:Real at parse.jl:376\n    ...\n\
    \  Stacktrace:\n   [1] iterate at ./generator.jl:47 [inlined]\n   [2] _collect(::Array{SubString{String},1},\
    \ ::Base.Generator{Array{SubString{String},1},typeof(parse)}, ::Base.EltypeUnknown,\
    \ ::Base.HasShape{1}) at ./array.jl:678\n   [3] collect_similar at ./array.jl:607\
    \ [inlined]\n   [4] map at ./abstractarray.jl:2072 [inlined]\n   [5] parse_music(::String)\
    \ at /tmp/tmp9jzscbdk.jl:16\n   [6] top-level scope at /tmp/tmp9jzscbdk.jl:28\n\
    \   [7] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [8] top-level scope at /tmp/tmp9jzscbdk.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmp9jzscbdk.jl:29\n  Test threw exception\n  Expression: candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n  MethodError: no method\
    \ matching parse(::SubString{String})\n  Closest candidates are:\n    parse(!Matched::Type{T},\
    \ !Matched::AbstractChar; base) where T<:Integer at parse.jl:41\n    parse(!Matched::Type{T},\
    \ !Matched::AbstractString; base) where T<:Integer at parse.jl:238\n    parse(!Matched::Type{T},\
    \ !Matched::AbstractString; kwargs...) where T<:Real at parse.jl:376\n    ...\n\
    \  Stacktrace:\n   [1] iterate at ./generator.jl:47 [inlined]\n   [2] _collect(::Array{SubString{String},1},\
    \ ::Base.Generator{Array{SubString{String},1},typeof(parse)}, ::Base.EltypeUnknown,\
    \ ::Base.HasShape{1}) at ./array.jl:678\n   [3] collect_similar at ./array.jl:607\
    \ [inlined]\n   [4] map at ./abstractarray.jl:2072 [inlined]\n   [5] parse_music(::String)\
    \ at /tmp/tmp9jzscbdk.jl:16\n   [6] top-level scope at /tmp/tmp9jzscbdk.jl:29\n\
    \   [7] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [8] top-level scope at /tmp/tmp9jzscbdk.jl:24\n  \nTest Summary: | Error \
    \ Total\ntest set      |     5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9jzscbdk.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_list = music_string.split(\" \")\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp30lv6k69.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp30lv6k69.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp30lv6k69.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip()\n    music_string = music_string.strip(\"\\n\")\n   \
    \ music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpee5gnu28.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpee5gnu28.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpee5gnu28.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpbftjr6yj.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpbftjr6yj.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpbftjr6yj.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.findfirst('|'):end]\n\
    \    music_string = music_string[music_string.findfirst('o'):end]\n    music_string\
    \ = music_string[music_string.findfirst('|'):end]\n    music_string = music_string[music_string.findfirst('o'):end]\n\
    \    music_string = music_string[music_string.findfirst('|'):end]\n    music_string\
    \ = music_string[music_string.findfirst('o'):end]\n    music_string = music_string[music_string.findfirst('|'):end]\n\
    \    music_string = music_string[music_string.findfirst('o'):end]\n    music_string\
    \ = music_string[music_string.findfirst('|'):end]\n    music_string = music_string[music_string.findfirst('o'):end]\n\
    \    music_string = music_string[music_string.findfirst('|'):end]\n    music_string\
    \ = music_string[music_string.findfirst('o'):end]\n    music_string = music_string[music_string.findfirst('|'):end]\n\
    \    music_string = music_string[music_string.findfirst('o'):end]\n    music_string\
    \ = music_string[music_string.findfirst('|'):end]\n    music_string = music_string[music_string.findfirst('o'):end]\n\
    \    music_string = music_string[music_string.findfirst('|'):end]\n    music_string\
    \ = music_string[music_string.findfirst('o'):end]\n    music_string = music_string[music_string.findfirst('|'):end]\n\
    \    music_string = music_string[music_string.findfirst('o'):end]\n    music_string\
    \ = music_string[music_string.findfirst('|'):end]\n    music_string = music_string[music_string.findfirst('o'):end]\n\
    \    music_string = music_string[music_string.findfirst('|'):end]\n    music_string\
    \ = music_string[music_string.findfirst('o'):end]\n    music_string = music_string[music_string.findfirst('|'):end]\n\
    \    music_string = music_string[music_string.findfirst('o'):end]\n    music_string\
    \ = music_string[music_string.findfirst('|'):end]\n    music_string = music_string[music_string.findfirst('o'):end]\n\
    using Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp338i0ye9.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp338i0ye9.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp338i0ye9.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_list = music_string.split(\" \")\n    music_list\
    \ = music_list[music_list.len()-1:music_list.len()]\n    music_list = music_list[music_list.len()-1:music_list.len()]\n\
    \    music_list = music_list[music_list.len()-1:music_list.len()]\n    music_list\
    \ = music_list[music_list.len()-1:music_list.len()]\n    music_list = music_list[music_list.len()-1:music_list.len()]\n\
    \    music_list = music_list[music_list.len()-1:music_list.len()]\n    music_list\
    \ = music_list[music_list.len()-1:music_list.len()]\n    music_list = music_list[music_list.len()-1:music_list.len()]\n\
    \    music_list = music_list[music_list.len()-1:music_list.len()]\n    music_list\
    \ = music_list[music_list.len()-1:music_list.len()]\n    music_list = music_list[music_list.len()-1:music_list.len()]\n\
    \    music_list = music_list[music_list.len()-1:music_list.len()]\n    music_list\
    \ = music_list[music_list.len()-1:music_list.len()]\n    music_list = music_list[music_list.len()-1:music_list.len()]\n\
    \    music_list = music_list[music_list.len()-1:music_list.len()]\n    music_list\
    \ = music_list[music_list.len()-1:music_list.len()]\n    music_list = music_list[music_list.len()-1:music_list.len()]\n\
    \    music_list = music_list[music_list.len()-1:music_list.len()]\n    music_list\
    \ = music_list[music_list.len()-1:music_list.len()]\n    music_list = music_list[music_list.len()-1:music_list.len()]\n\
    \    music_list = music_list[music_list.len()-1:music_list.len()]\n    music_list\
    \ = music_list[music_list.len()-1:music_list.len()]\n    music_list = music_list[music_list.len()-1:music_list.len()]\n\
    \    music_list = music_list[music_list.len()-1:music_list.len()]\n    music_list\
    \ = music_list[music_list.len()-1:music_list.len()]\n    music_list = music_list[music_list.len()-1:music_list.len()]\n\
    \nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphwohb09r.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmphwohb09r.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmphwohb09r.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip()\n    music_string = music_string.strip(\"\\n\")\n   \
    \ music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"\\v\")\n    music_string = music_string.strip(\"\
    \\f\")\n    music_string = music_string.strip(\"\\a\")\n    music_string = music_string.strip(\"\
    \\e\")\n    music_string = music_string.strip(\"\\\\n\")\n    music_string = music_string.strip(\"\
    \\v\")\n    music_string = music_string.strip(\"\\f\")\n    music_string = music_string.strip(\"\
    \\a\")\n    music_string = music_string.strip(\"\\e\")\n    music_string = music_string.strip(\"\
    \\\\n\")\n    music_string = music_string.strip(\"\\v\")\n    music_string = music_string.strip(\"\
    \\f\")\n    music_string = music_string.strip(\"\\a\")\n    music_string = music_string.strip(\"\
    \\e\")\n    music_string = music_string.strip(\"\\\\n\")\n    music_string = music_string.strip(\"\
    \\v\")\n    music_string = music_string.strip(\"\\f\")\n    music_string = music_string.strip(\"\
    \\a\")\n    music_string = music_string.strip(\"\\e\")\n    music_string = music_string.strip(\"\
    \\\\n\")\n    music_string = music_string.strip(\"\\v\")\n    music_string = music_string.strip(\"\
    \\f\")\n    music_string = music_string.strip(\"\\a\")\n    music_string = music_string.strip(\"\
    \\e\")\n    music_string = music_string.strip(\"\\\\n\")\n    music_string = music_string.strip(\"\
    \\v\")\n    music_string = music_string.strip(\"\\f\")\n    music_string = music_string.strip(\"\
    \\a\")\n    music_string = music_string.strip(\"\\e\")\n    music_string = music_string.strip(\"\
    \\\\n\")\n    music_string = music_string.strip(\"\\v\")\n    music_string = music_string.strip(\"\
    \\f\")\n    music_string = music_string.strip(\"\\a\")\n    music_string = music_string.strip(\"\
    \\e\")\n    music_string = music_string.strip(\"\\\\n\")\n    music_string = music_string.strip(\"\
    \\v\")\n    music_string = music_string.strip(\"\\f\")\n    music_string = music_string.strip(\"\
    \nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpme6qvy94.jl:61\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpme6qvy94.jl:61\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_notes = music_string.split(\"|\")\n    music_notes\
    \ = music_notes[music_notes.len()/2:end]\n    music_notes = music_notes.map(x\
    \ -> x.strip)\n    music_notes = music_notes.map(x -> x.split(\"o\"))\n    music_notes\
    \ = music_notes.map(x -> x.map(x -> x.toInt))\n    music_notes = music_notes.map(x\
    \ -> x.map(x -> x.sum))\n    return music_notes\nend\n</cell>\n<code language=julia-1.5>\n\
    music_notes = parse_music(\"\"\"o o| .| o| o| .| .| .| .| o o\"\"\")\n</cell>\n\
    <code language=julia-1.5>\nmusic_notes\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\")\
    \ == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") ==\
    \ [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2,\
    \ 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpx1ijgpup.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpx1ijgpup.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_notes = music_string.split(\"|\")\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes.map(x -> x.strip)\n    music_notes\
    \ = music_notes.map(x -> x.split(\"o\"))\n    music_notes = music_notes.map(x\
    \ -> x.map(x -> x.toInt64))\n    music_notes = music_notes.map(x -> x.map(x ->\
    \ x.sum))\n    music_notes = music_notes.map(x -> x.map(x -> x.max))\n    music_notes\
    \ = music_notes.map(x -> x.map(x -> x.min))\n    music_notes = music_notes.map(x\
    \ -> x.map(x -> x.mean))\n    music_notes = music_notes.map(x -> x.map(x -> x.std))\n\
    \    music_notes = music_notes.map(x -> x.map(x -> x.var))\n    music_notes =\
    \ music_notes.map(x -> x.map(x -> x.max))\n    music_notes = music_notes.map(x\
    \ -> x.map(x -> x.min))\n    music_notes = music_notes.map(x -> x.map(x -> x.sum))\n\
    \    music_notes = music_notes.map(x -> x.map(x -> x.mean))\n    music_notes =\
    \ music_notes.map(x -> x.map(x -> x.std))\n    music_notes = music_notes.map(x\
    \ -> x.map(x -> x.var))\n    music_notes = music_notes.map(x -> x.map(x -> x.max))\n\
    \    music_notes = music_notes.map(x -> x.map(x -> x.min))\n    music_notes =\
    \ music_notes.map(x -> x.map(x -> x.sum))\n    music_notes = music_notes.map(x\
    \ -> x.map(x -> x.mean))\n    music_notes = music_notes.map(x -> x.map(x -> x.std))\n\
    \    music_notes = music_notes.map(x -> x.map(x -> x.var))\n    music_notes =\
    \ music_notes.map(x -> x.map(x -> x.max))\n    music_notes = music_notes.map(x\
    \ -> x.map(x -> x.min))\n    music_notes = music_notes.map(x -> x.map(x -> x.sum))\n\
    \    music_notes = \nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmplbz75i2i.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmplbz75i2i.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmplbz75i2i.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgxick177.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpgxick177.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpgxick177.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4s0fnviy.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4s0fnviy.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string[1:end-1]\n    music_string = music_string[music_string == \"\
    .\"]\n    music_string = music_string[music_string == \"o\"]\n    music_string\
    \ = music_string[music_string == \"|\"]\n    music_string = music_string[music_string\
    \ == \"|\"]\n    music_string = music_string[music_string == \"|\"]\n    music_string\
    \ = music_string[music_string == \"|\"]\n    music_string = music_string[music_string\
    \ == \"|\"]\n    music_string = music_string[music_string == \"|\"]\n    music_string\
    \ = music_string[music_string == \"|\"]\n    music_string = music_string[music_string\
    \ == \"|\"]\n    music_string = music_string[music_string == \"|\"]\n    music_string\
    \ = music_string[music_string == \"|\"]\n    music_string = music_string[music_string\
    \ == \"|\"]\n    music_string = music_string[music_string == \"|\"]\n    music_string\
    \ = music_string[music_string == \"|\"]\n    music_string = music_string[music_string\
    \ == \"|\"]\n    music_string = music_string[music_string == \"|\"]\n    music_string\
    \ = music_string[music_string == \"|\"]\n    music_string = music_string[music_string\
    \ == \"|\"]\n    music_string = music_string[music_string == \"|\"]\n    music_string\
    \ = music_string[music_string == \"|\"]\n    music_string = music_string[music_string\
    \ == \"|\"]\n    music_string = music_string[music_string == \"|\"]\n    music_string\
    \ = music_string[music_string == \"|\"]\n    music_string = music_string[music_string\
    \ == \"|\"]\n    music_string = music_string[music_string == \"|\"]\n    music_string\
    \ = music_string[music_string == \"|\"]\n    music_string = music_string[music_string\
    \ == \"|\"]\n    music_string = music_string[music_string == \"|\"]\n    music_string\
    \ = music_string[music_string == \"|\"]\n    music_string = music_string[music_string\
    \ == \"|\"]\n    music_string = music_string[music_string == \"|\"]\n    music_string\
    \ = music_string[music_string == \"|\"]\n    music_string = music_\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpd5p6nwme.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpd5p6nwme.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpd5p6nwme.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string[1:end-1]\n    music_string = music_string[music_string != \"\
    .\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"]\"]\n    music_string = music_string[music_string\
    \ != \":\"]\n    music_string = music_string[music_string != \"/\"]\n    music_string\
    \ = music_string[music_string != \"-\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpspfbcz5a.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpspfbcz5a.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpspfbcz5a.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string[1:end-1]\n    music_string = music_string[music_string == \"\
    |\"]\n    music_string = music_string[music_string == \"o\"]\n    music_string\
    \ = music_string[music_string == \"|\"]\n    music_string = music_string[music_string\
    \ == \"|\"]\n    music_string = music_string[music_string == \"|\"]\n    music_string\
    \ = music_string[music_string == \"|\"]\n    music_string = music_string[music_string\
    \ == \"|\"]\n    music_string = music_string[music_string == \"|\"]\n    music_string\
    \ = music_string[music_string == \"|\"]\n    music_string = music_string[music_string\
    \ == \"|\"]\n    music_string = music_string[music_string == \"|\"]\n    music_string\
    \ = music_string[music_string == \"|\"]\n    music_string = music_string[music_string\
    \ == \"|\"]\n    music_string = music_string[music_string == \"|\"]\n    music_string\
    \ = music_string[music_string == \"|\"]\n    music_string = music_string[music_string\
    \ == \"|\"]\n    music_string = music_string[music_string == \"|\"]\n    music_string\
    \ = music_string[music_string == \"|\"]\n    music_string = music_string[music_string\
    \ == \"|\"]\n    music_string = music_string[music_string == \"|\"]\n    music_string\
    \ = music_string[music_string == \"|\"]\n    music_string = music_string[music_string\
    \ == \"|\"]\n    music_string = music_string[music_string == \"|\"]\n    music_string\
    \ = music_string[music_string == \"|\"]\n    music_string = music_string[music_string\
    \ == \"|\"]\n    music_string = music_string[music_string == \"|\"]\n    music_string\
    \ = music_string[music_string == \"|\"]\n    music_string = music_string[music_string\
    \ == \"|\"]\n    music_string = music_string[music_string == \"|\"]\n    music_string\
    \ = music_string[music_string == \"|\"]\n    music_string = music_string[music_string\
    \ == \"|\"]\n    music_string = music_string[music_string == \"|\"]\n    music_string\
    \ = music_string[music_string == \"|\"]\n    music_string = music_\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp1crganz8.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp1crganz8.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp1crganz8.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip()\n    music_string = music_string[music_string.rfind('|'):end]\n\
    \    music_string = music_string[music_string.rfind('o'):end]\n    music_string\
    \ = music_string[music_string.rfind('|'):end]\n    music_string = music_string[music_string.rfind('o'):end]\n\
    \    music_string = music_string[music_string.rfind('|'):end]\n    music_string\
    \ = music_string[music_string.rfind('o'):end]\n    music_string = music_string[music_string.rfind('|'):end]\n\
    \    music_string = music_string[music_string.rfind('o'):end]\n    music_string\
    \ = music_string[music_string.rfind('|'):end]\n    music_string = music_string[music_string.rfind('o'):end]\n\
    \    music_string = music_string[music_string.rfind('|'):end]\n    music_string\
    \ = music_string[music_string.rfind('o'):end]\n    music_string = music_string[music_string.rfind('|'):end]\n\
    \    music_string = music_string[music_string.rfind('o'):end]\n    music_string\
    \ = music_string[music_string.rfind('|'):end]\n    music_string = music_string[music_string.rfind('o'):end]\n\
    \    music_string = music_string[music_string.rfind('|'):end]\n    music_string\
    \ = music_string[music_string.rfind('o'):end]\n    music_string = music_string[music_string.rfind('|'):end]\n\
    \    music_string = music_string[music_string.rfind('o'):end]\n    music_string\
    \ = music_string[music_string.rfind('|'):end]\n    music_string = music_string[music_string.rfind('o'):end]\n\
    \    music_string = music_string[music_string.rfind('|'):end]\n    music_string\
    \ = music_string[music_string.rfind('o'):end]\n    music_string = music_string[music_string.rfind('|'):end]\n\
    \    music_string = music_string[music_string.rfind('o'):end]\n    music_string\
    \ = music_string[music_string.rfind('|'):end]\n    music_string = music_string[music_string.rfind('o'):end]\n\
    \    music_string = music_string[music_string.rfind('|'):end]\n    music_string\
    \ = music_string[music_\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphmhc9kmk.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphmhc9kmk.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp99z6k0_7.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp99z6k0_7.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp99z6k0_7.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphlpgztor.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmphlpgztor.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmphlpgztor.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_list = music_string.split(\" \")\n    music_list\
    \ = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"(music_list.len()\
    \ - 1):\" range expression \nStacktrace:\n [1] top-level scope at /tmp/tmpkulsqgxc.jl:16\n\
    \ [2] include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpkulsqgxc.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmkthiojh.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmkthiojh.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpycjcg8da.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpycjcg8da.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find(\"|\"\
    ) + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"|\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[1 : music_string.find(\"|\", music_string.find(\"o\") + 1)]\n\
    \    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[1 : music_string.find(\"|\", music_string.find(\"o\") + 1)]\n\
    \    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[1 : music_string.find(\"|\", music_string.find(\"o\") + 1)]\n\
    \    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[1 : music_string.find(\"|\", music_string.find(\"o\") + 1)]\n\
    \    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[1 : music_\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpo69hxvq3.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpo69hxvq3.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\\n\")\n    music_string = music_string.strip(\"\
    \\r\")\n    music_string = music_string.strip(\"\\t\")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\" \")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\\n\")\n    music_string = music_string.strip(\"\
    \\r\")\n    music_string = music_string.strip(\"\\t\")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\" \")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\\n\")\n    music_string = music_string.strip(\"\
    \\r\")\n    music_string = music_string.strip(\"\\t\")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\" \")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\\n\")\n    music_string = music_string.strip(\"\
    \\r\")\n    music_string = music_string.strip(\"\\t\")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\" \")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = \nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp8ickjs2k.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp8ickjs2k.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp8ickjs2k.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find(\"|\"\
    ) + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\".\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\".\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    .\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n\
    \    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    .\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n\
    \    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    .\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n\
    \    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    .\") + 1 : musi\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t\
    @test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") ==\
    \ [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3enmbyf7.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3enmbyf7.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip()\n    music_string = music_string.strip(\"\\n\")\n   \
    \ music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"\\v\")\n    music_string = music_string.strip(\"\
    \\f\")\n    music_string = music_string.strip(\"\\a\")\n    music_string = music_string.strip(\"\
    \\e\")\n    music_string = music_string.strip(\"\\\\n\")\n    music_string = music_string.strip(\"\
    \\v\")\n    music_string = music_string.strip(\"\\f\")\n    music_string = music_string.strip(\"\
    \\a\")\n    music_string = music_string.strip(\"\\e\")\n    music_string = music_string.strip(\"\
    \\\\n\")\n    music_string = music_string.strip(\"\\v\")\n    music_string = music_string.strip(\"\
    \\f\")\n    music_string = music_string.strip(\"\\a\")\n    music_string = music_string.strip(\"\
    \\e\")\n    music_string = music_string.strip(\"\\\\n\")\n    music_string = music_string.strip(\"\
    \\v\")\n    music_string = music_string.strip(\"\\f\")\n    music_string = music_string.strip(\"\
    \\a\")\n    music_string = music_string.strip(\"\\e\")\n    music_string = music_string.strip(\"\
    \\\\n\")\n    music_string = music_string.strip(\"\\v\")\n    music_string = music_string.strip(\"\
    \\f\")\n    music_string = music_string.strip(\"\\a\")\n    music_string = music_string.strip(\"\
    \\e\")\n    music_string = music_string.strip(\"\\\\n\")\n    music_string = music_string.strip(\"\
    \\v\")\n    music_string = music_string.strip(\"\\f\")\n    music_string = music_string.strip(\"\
    \\a\")\n    music_string = music_string.strip(\"\\e\")\n    music_string = music_string.strip(\"\
    \\\\n\")\n    music_string = music_string.strip(\"\\v\")\n    music_string = music_string.strip(\"\
    \\f\")\n    music_string = music_string.strip(\"\\a\")\n    music_string = music_string.strip(\"\
    \\e\")\n    music_string = music_string.strip(\"\\\\n\")\n    music_string = music_string.strip(\"\
    \\v\")\n    music_string = music_string.strip(\"\\f\")\n    music_string = music_string.strip(\"\
    \nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpowhr3ifs.jl:61\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpowhr3ifs.jl:61\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_notes = music_string.split(\"|\")\n    music_notes\
    \ = music_notes[music_notes.len()/2:end]\n    music_notes = music_notes.map(x\
    \ -> x.strip)\n    music_notes = music_notes.map(x -> x.split(\" \"))\n    music_notes\
    \ = music_notes.map(x -> x.map(x -> x.toInt))\n    music_notes = music_notes.map(x\
    \ -> x.map(x -> x.sum))\n    music_notes = music_notes.map(x -> x.map(x -> x.max))\n\
    \    music_notes = music_notes.map(x -> x.map(x -> x.min))\n    music_notes =\
    \ music_notes.map(x -> x.map(x -> x.mean))\n    music_notes = music_notes.map(x\
    \ -> x.map(x -> x.std))\n    music_notes = music_notes.map(x -> x.map(x -> x.sum))\n\
    \    music_notes = music_notes.map(x -> x.map(x -> x.max))\n    music_notes =\
    \ music_notes.map(x -> x.map(x -> x.min))\n    music_notes = music_notes.map(x\
    \ -> x.map(x -> x.mean))\n    music_notes = music_notes.map(x -> x.map(x -> x.std))\n\
    \    music_notes = music_notes.map(x -> x.map(x -> x.sum))\n    music_notes =\
    \ music_notes.map(x -> x.map(x -> x.max))\n    music_notes = music_notes.map(x\
    \ -> x.map(x -> x.min))\n    music_notes = music_notes.map(x -> x.map(x -> x.mean))\n\
    \    music_notes = music_notes.map(x -> x.map(x -> x.std))\n    music_notes =\
    \ music_notes.map(x -> x.map(x -> x.sum))\n    music_notes = music_notes.map(x\
    \ -> x.map(x -> x.max))\n    music_notes = music_notes.map(x -> x.map(x -> x.min))\n\
    \    music_notes = music_notes.map(x -> x.map(x -> x.mean))\n    music_notes =\
    \ music_notes.map(x -> x.map(x -> x.std))\n    music_notes = music_notes.map(x\
    \ -> x.map(x -> x.sum\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgpauam_f.jl:41\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgpauam_f.jl:41\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.findFirst(\"\
    \ \")]\n    music_string = music_string[music_string.findFirst(\"|\")]\n    music_string\
    \ = music_string[music_string.findFirst(\"o\")]\n    music_string = music_string[music_string.findFirst(\"\
    .\")]\n    music_string = music_string[music_string.findFirst(\"o|\")]\n    music_string\
    \ = music_string[music_string.findFirst(\".|\")]\n    music_string = music_string[music_string.findFirst(\"\
    o|\")]\n    music_string = music_string[music_string.findFirst(\"o|\")]\n    music_string\
    \ = music_string[music_string.findFirst(\"o|\")]\n    music_string = music_string[music_string.findFirst(\"\
    o|\")]\n    music_string = music_string[music_string.findFirst(\"o|\")]\n    music_string\
    \ = music_string[music_string.findFirst(\"o|\")]\n    music_string = music_string[music_string.findFirst(\"\
    o|\")]\n    music_string = music_string[music_string.findFirst(\"o|\")]\n    music_string\
    \ = music_string[music_string.findFirst(\"o|\")]\n    music_string = music_string[music_string.findFirst(\"\
    o|\")]\n    music_string = music_string[music_string.findFirst(\"o|\")]\n    music_string\
    \ = music_string[music_string.findFirst(\"o|\")]\n    music_string = music_string[music_string.findFirst(\"\
    o|\")]\n    music_string = music_string[music_string.findFirst(\"o|\")]\n    music_string\
    \ = music_string[music_string.findFirst(\"o|\")]\n    music_string = music_string[music_string.findFirst(\"\
    o|\")]\n    music_string = music_string[music_string.findFirst(\"o|\")]\n    music_string\
    \ = music_string[music_string.findFirst(\"o|\")]\n    music_string = music_string[music_string.findFirst(\"\
    o|\")]\n    music_string = music_string[music_string.findFirst(\"o|\")]\n    music_string\
    \ = music_string[music_string.findFirst(\"o|\")]\n    music_string = music_string[music_string.findFirst(\"\
    o|\")]\n    music_string = musi\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdileu9m1.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpdileu9m1.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpdileu9m1.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.start-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpkh28buvc.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpkh28buvc.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpkh28buvc.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip()\n    music_string = music_string[music_string.rfind('|'):]\n\
    \    music_string = music_string[music_string.rfind('o'):]\n    music_string =\
    \ music_string[music_string.rfind('|'):]\n    music_string = music_string[music_string.rfind('o'):]\n\
    \    music_string = music_string[music_string.rfind('|'):]\n    music_string =\
    \ music_string[music_string.rfind('o'):]\n    music_string = music_string[music_string.rfind('|'):]\n\
    \    music_string = music_string[music_string.rfind('o'):]\n    music_string =\
    \ music_string[music_string.rfind('|'):]\n    music_string = music_string[music_string.rfind('o'):]\n\
    \    music_string = music_string[music_string.rfind('|'):]\n    music_string =\
    \ music_string[music_string.rfind('o'):]\n    music_string = music_string[music_string.rfind('|'):]\n\
    \    music_string = music_string[music_string.rfind('o'):]\n    music_string =\
    \ music_string[music_string.rfind('|'):]\n    music_string = music_string[music_string.rfind('o'):]\n\
    \    music_string = music_string[music_string.rfind('|'):]\n    music_string =\
    \ music_string[music_string.rfind('o'):]\n    music_string = music_string[music_string.rfind('|'):]\n\
    \    music_string = music_string[music_string.rfind('o'):]\n    music_string =\
    \ music_string[music_string.rfind('|'):]\n    music_string = music_string[music_string.rfind('o'):]\n\
    \    music_string = music_string[music_string.rfind('|'):]\n    music_string =\
    \ music_string[music_string.rfind('o'):]\n    music_string = music_string[music_string.rfind('|'):]\n\
    \    music_string = music_string[music_string.rfind('o'):]\n    music_string =\
    \ music_string[music_string.rfind('|'):]\n    music_string = music_string[music_string.rfind('o'):]\n\
    \    music_string = music_string[music_string.rfind('|'):]\n    music_string =\
    \ music_string[music_\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"music_string.rfind('|'):\"\
    \ range expression \nStacktrace:\n [1] top-level scope at /tmp/tmp746kbpg6.jl:15\n\
    \ [2] include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp746kbpg6.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpk4e_i5e6.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpk4e_i5e6.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpk4e_i5e6.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_list = music_string.split(\" \")\n    music_list[1]\
    \ = music_list[1].strip\n    music_list[2] = music_list[2].strip\n    music_list[3]\
    \ = music_list[3].strip\n    music_list[4] = music_list[4].strip\n    music_list[5]\
    \ = music_list[5].strip\n    music_list[6] = music_list[6].strip\n    music_list[7]\
    \ = music_list[7].strip\n    music_list[8] = music_list[8].strip\n    music_list[9]\
    \ = music_list[9].strip\n    music_list[10] = music_list[10].strip\n    music_list[11]\
    \ = music_list[11].strip\n    music_list[12] = music_list[12].strip\n    music_list[13]\
    \ = music_list[13].strip\n    music_list[14] = music_list[14].strip\n    music_list[15]\
    \ = music_list[15].strip\n    music_list[16] = music_list[16].strip\n    music_list[17]\
    \ = music_list[17].strip\n    music_list[18] = music_list[18].strip\n    music_list[19]\
    \ = music_list[19].strip\n    music_list[20] = music_list[20].strip\n    music_list[21]\
    \ = music_list[21].strip\n    music_list[22] = music_list[22].strip\n    music_list[23]\
    \ = music_list[23].strip\n    music_list[24] = music_list[24].strip\n    music_list[25]\
    \ = music_list[25].strip\n    music_list[26] = music_list[26].strip\n    music_list[27]\
    \ = music_list[27].strip\n    music_list[28] = music_list[28].strip\n    music_list[29]\
    \ = music_list[29].strip\n    music_list[30] = music_list[30].strip\n    music_list[31]\
    \ = music_list[31].strip\n    music_list[32] = music_list[32].strip\n    music_list[33]\
    \ = music_list[33].strip\n    music_list[34] = music_list[34].strip\n    music_list[35]\
    \ = music_list[35].strip\n    music_list[36] = music_list[36].strip\n    music_list[37]\
    \ = music_list[37].strip\n    music_list[38] = music_list[38].strip\n    music_list[39\n\
    using Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0sfbl3n6.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp0sfbl3n6.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"music_string.index(\"\
    |\"):\" range expression \nStacktrace:\n [1] top-level scope at /tmp/tmpo0eeo0sl.jl:15\n\
    \ [2] include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpo0eeo0sl.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_list = music_string.split(\" \") |> collect\n\
    \    music_list = music_list |> filter(x->x != \".\")\n    music_list = music_list\
    \ |> filter(x->x != \"o\")\n    music_list = music_list |> filter(x->x != \"|\"\
    )\n    music_list = music_list |> filter(x->x != \"|\")\n    music_list = music_list\
    \ |> filter(x->x != \"|\")\n    music_list = music_list |> filter(x->x != \"|\"\
    )\n    music_list = music_list |> filter(x->x != \"|\")\n    music_list = music_list\
    \ |> filter(x->x != \"|\")\n    music_list = music_list |> filter(x->x != \"|\"\
    )\n    music_list = music_list |> filter(x->x != \"|\")\n    music_list = music_list\
    \ |> filter(x->x != \"|\")\n    music_list = music_list |> filter(x->x != \"|\"\
    )\n    music_list = music_list |> filter(x->x != \"|\")\n    music_list = music_list\
    \ |> filter(x->x != \"|\")\n    music_list = music_list |> filter(x->x != \"|\"\
    )\n    music_list = music_list |> filter(x->x != \"|\")\n    music_list = music_list\
    \ |> filter(x->x != \"|\")\n    music_list = music_list |> filter(x->x != \"|\"\
    )\n    music_list = music_list |> filter(x->x != \"|\")\n    music_list = music_list\
    \ |> filter(x->x != \"|\")\n    music_list = music_list |> filter(x->x != \"|\"\
    )\n    music_list = music_list |> filter(x->x != \"|\")\n    music_list = music_list\
    \ |> filter(x->x != \"|\")\n    music_list = music_list |> filter(x->x != \"|\"\
    )\n    music_list = music_list |> filter(x->x != \"|\")\n    music_list = music_list\
    \ |> filter(x->x != \"|\")\n    music_list = music_list |> filter(x->x != \"|\"\
    )\n    music_list = music_list |> filter(x->x != \"|\")\n    music_list = music_list\
    \ |> filter(x->x \nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t\
    @test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") ==\
    \ [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp15ibaio7.jl:45\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp15ibaio7.jl:45\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip()\n    music_string = music_string[1:end]\n    music_string\
    \ = music_string[music_string.find('|'):end]\n    music_string = music_string[music_string.find('o'):end]\n\
    \    music_string = music_string[music_string.find('|'):end]\n    music_string\
    \ = music_string[music_string.find('o'):end]\n    music_string = music_string[music_string.find('|'):end]\n\
    \    music_string = music_string[music_string.find('o'):end]\n    music_string\
    \ = music_string[music_string.find('|'):end]\n    music_string = music_string[music_string.find('o'):end]\n\
    \    music_string = music_string[music_string.find('|'):end]\n    music_string\
    \ = music_string[music_string.find('o'):end]\n    music_string = music_string[music_string.find('|'):end]\n\
    \    music_string = music_string[music_string.find('o'):end]\n    music_string\
    \ = music_string[music_string.find('|'):end]\n    music_string = music_string[music_string.find('o'):end]\n\
    \    music_string = music_string[music_string.find('|'):end]\n    music_string\
    \ = music_string[music_string.find('o'):end]\n    music_string = music_string[music_string.find('|'):end]\n\
    \    music_string = music_string[music_string.find('o'):end]\n    music_string\
    \ = music_string[music_string.find('|'):end]\n    music_string = music_string[music_string.find('o'):end]\n\
    \    music_string = music_string[music_string.find('|'):end]\n    music_string\
    \ = music_string[music_string.find('o'):end]\n    music_string = music_string[music_string.find('|'):end]\n\
    \    music_string = music_string[music_string.find('o'):end]\n    music_string\
    \ = music_string[music_string.find('|'):end]\n    music_string = music_string[music_string.find('o'):end]\n\
    \    music_string = music_string[music_string.find('|'):end]\n    music_string\
    \ = music_string[music_string.find('o'):end]\n    music_string = music_string[music_string.find('|'):end]\n\
    \    music_string = music_string[music_string.find('o'):end]\n    music_string\
    \ = music_string[music_string.find('|\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid character literal\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpgdv7xs0o.jl:52\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgdv7xs0o.jl:52\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find('|'):]\n\
    \    music_string = music_string[music_string.find('o'):]\n    music_string =\
    \ music_string[music_string.find('|'):]\n    music_string = music_string[music_string.find('o'):]\n\
    \    music_string = music_string[music_string.find('|'):]\n    music_string =\
    \ music_string[music_string.find('o'):]\n    music_string = music_string[music_string.find('|'):]\n\
    \    music_string = music_string[music_string.find('o'):]\n    music_string =\
    \ music_string[music_string.find('|'):]\n    music_string = music_string[music_string.find('o'):]\n\
    \    music_string = music_string[music_string.find('|'):]\n    music_string =\
    \ music_string[music_string.find('o'):]\n    music_string = music_string[music_string.find('|'):]\n\
    \    music_string = music_string[music_string.find('o'):]\n    music_string =\
    \ music_string[music_string.find('|'):]\n    music_string = music_string[music_string.find('o'):]\n\
    \    music_string = music_string[music_string.find('|'):]\n    music_string =\
    \ music_string[music_string.find('o'):]\n    music_string = music_string[music_string.find('|'):]\n\
    \    music_string = music_string[music_string.find('o'):]\n    music_string =\
    \ music_string[music_string.find('|'):]\n    music_string = music_string[music_string.find('o'):]\n\
    \    music_string = music_string[music_string.find('|'):]\n    music_string =\
    \ music_string[music_string.find('o'):]\n    music_string = music_string[music_string.find('|'):]\n\
    \    music_string = music_string[music_string.find('o'):]\n    music_string =\
    \ music_string[music_string.find('|'):]\n    music_string = music_string[music_string.find('o'):]\n\
    \    music_string = music_string[music_string.find('|'):]\n    music_string =\
    \ music_string[music_string.find('o'):]\n    music_string = music_string[music_string.find('|'):]\n\
    \    music_string = music_string\nusing Test\n\n@testset begin\n\ncandidate =\
    \ parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"music_string.find('|'):\"\
    \ range expression \nStacktrace:\n [1] top-level scope at /tmp/tmpfvfqehu5.jl:15\n\
    \ [2] include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpfvfqehu5.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find(\"|\"\
    ) + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\".\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t\
    @test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") ==\
    \ [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprnt56kjx.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprnt56kjx.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpz5p54qj7.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpz5p54qj7.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpz5p54qj7.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.findfirst('|'):end]\n\
    \    music_string = music_string[music_string.findfirst('o'):end]\n    music_string\
    \ = music_string[music_string.findfirst('.'):end]\n    music_string = music_string[music_string.findfirst('|'):end]\n\
    \    music_string = music_string[music_string.findfirst('o'):end]\n    music_string\
    \ = music_string[music_string.findfirst('.'):end]\n    music_string = music_string[music_string.findfirst('|'):end]\n\
    \    music_string = music_string[music_string.findfirst('o'):end]\n    music_string\
    \ = music_string[music_string.findfirst('.'):end]\n    music_string = music_string[music_string.findfirst('|'):end]\n\
    \    music_string = music_string[music_string.findfirst('o'):end]\n    music_string\
    \ = music_string[music_string.findfirst('.'):end]\n    music_string = music_string[music_string.findfirst('|'):end]\n\
    \    music_string = music_string[music_string.findfirst('o'):end]\n    music_string\
    \ = music_string[music_string.findfirst('.'):end]\n    music_string = music_string[music_string.findfirst('|'):end]\n\
    \    music_string = music_string[music_string.findfirst('o'):end]\n    music_string\
    \ = music_string[music_string.findfirst('.'):end]\n    music_string = music_string[music_string.findfirst('|'):end]\n\
    \    music_string = music_string[music_string.findfirst('o'):end]\n    music_string\
    \ = music_string[music_string.findfirst('.'):end]\n    music_string = music_string[music_string.findfirst('|'):end]\n\
    \    music_string = music_string[music_string.findfirst('o'):end]\n    music_string\
    \ = music_string[music_string.findfirst('.'):end]\n    music_string = music_string[music_string.findfirst('|'):end]\n\
    \    music_string = music_string[music_string.findfirst('o'):end]\n    music_string\
    \ = music_string[music_string.findfirst('.'):end]\n    music_string = music_string[music_string.findfirst('|'):end]\n\
    \    music_string = music_string[\nusing Test\n\n@testset begin\n\ncandidate =\
    \ parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnmggvebb.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpnmggvebb.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8dazpmaq.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8dazpmaq.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip()\n    music_string = music_string[music_string.rfind('|'):]\n\
    \    music_string = music_string[music_string.rfind('o'):]\n    music_string =\
    \ music_string[music_string.rfind('|'):]\n    music_string = music_string[music_string.rfind('o'):]\n\
    \    music_string = music_string[music_string.rfind('|'):]\n    music_string =\
    \ music_string[music_string.rfind('o'):]\n    music_string = music_string[music_string.rfind('|'):]\n\
    \    music_string = music_string[music_string.rfind('o'):]\n    music_string =\
    \ music_string[music_string.rfind('|'):]\n    music_string = music_string[music_string.rfind('o'):]\n\
    \    music_string = music_string[music_string.rfind('|'):]\n    music_string =\
    \ music_string[music_string.rfind('o'):]\n    music_string = music_string[music_string.rfind('|'):]\n\
    \    music_string = music_string[music_string.rfind('o'):]\n    music_string =\
    \ music_string[music_string.rfind('|'):]\n    music_string = music_string[music_string.rfind('o'):]\n\
    \    music_string = music_string[music_string.rfind('|'):]\n    music_string =\
    \ music_string[music_string.rfind('o'):]\n    music_string = music_string[music_string.rfind('|'):]\n\
    \    music_string = music_string[music_string.rfind('o'):]\n    music_string =\
    \ music_string[music_string.rfind('|'):]\n    music_string = music_string[music_string.rfind('o'):]\n\
    \    music_string = music_string[music_string.rfind('|'):]\n    music_string =\
    \ music_string[music_string.rfind('o'):]\n    music_string = music_string[music_string.rfind('|'):]\n\
    \    music_string = music_string[music_string.rfind('o'):]\n    music_string =\
    \ music_string[music_string.rfind('|'):]\n    music_string = music_string[music_string.rfind('o'):]\n\
    \    music_string = music_string[music_string.rfind('|'):]\n    music_string =\
    \ music_string[music_\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"music_string.rfind('|'):\"\
    \ range expression \nStacktrace:\n [1] top-level scope at /tmp/tmpnpuxlua4.jl:15\n\
    \ [2] include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpnpuxlua4.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip()\n    music_string = music_string[music_string.find('|'):]\n\
    \    music_string = music_string[music_string.find('|'):music_string.find('|')+2]\n\
    \    music_string = music_string[music_string.find('|'):music_string.find('|')+2]\n\
    \    music_string = music_string[music_string.find('|'):music_string.find('|')+2]\n\
    \    music_string = music_string[music_string.find('|'):music_string.find('|')+2]\n\
    \    music_string = music_string[music_string.find('|'):music_string.find('|')+2]\n\
    \    music_string = music_string[music_string.find('|'):music_string.find('|')+2]\n\
    \    music_string = music_string[music_string.find('|'):music_string.find('|')+2]\n\
    \    music_string = music_string[music_string.find('|'):music_string.find('|')+2]\n\
    \    music_string = music_string[music_string.find('|'):music_string.find('|')+2]\n\
    \    music_string = music_string[music_string.find('|'):music_string.find('|')+2]\n\
    \    music_string = music_string[music_string.find('|'):music_string.find('|')+2]\n\
    \    music_string = music_string[music_string.find('|'):music_string.find('|')+2]\n\
    \    music_string = music_string[music_string.find('|'):music_string.find('|')+2]\n\
    \    music_string = music_string[music_string.find('|'):music_string.find('|')+2]\n\
    \    music_string = music_string[music_string.find('|'):music_string.find('|')+2]\n\
    \    music_string = music_string[music_string.find('|'):music_string.find('|')+2]\n\
    \    music_string = music_string[music_string.find('|'):music_string.find('|')+2]\n\
    \    music_string = music_string[music_string.find('|'):music_string.find('|')+2]\n\
    \    music_string = music_string[music_string.find('|'):music_string.find('|')+2]\n\
    \    music_string = music_string[music_string.find('|'):music_string.find('|')+2]\n\
    \    music_string = music_string[music_string.find('|'):music_string.find('|')+2]\n\
    \    music_string = music_string[music_string.find('|'):music_string.find('|')+2]\n\
    \    music_\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"music_string.find('|'):\"\
    \ range expression \nStacktrace:\n [1] top-level scope at /tmp/tmp2nm7lu5i.jl:15\n\
    \ [2] include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp2nm7lu5i.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip()\n    music_string = music_string[music_string.find(\"\
    -\") + 1 .. end]\n    music_string = music_string[1 .. end]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 .. end]\n    music_string = music_string[1\
    \ .. end]\n    music_string = music_string[music_string.find(\"o\") + 1 .. end]\n\
    \    music_string = music_string[1 .. end]\n    music_string = music_string[music_string.find(\"\
    -\") + 1 .. end]\n    music_string = music_string[1 .. end]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 .. end]\n    music_string = music_string[1\
    \ .. end]\n    music_string = music_string[music_string.find(\"o\") + 1 .. end]\n\
    \    music_string = music_string[1 .. end]\n    music_string = music_string[music_string.find(\"\
    -\") + 1 .. end]\n    music_string = music_string[1 .. end]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 .. end]\n    music_string = music_string[1\
    \ .. end]\n    music_string = music_string[music_string.find(\"o\") + 1 .. end]\n\
    \    music_string = music_string[1 .. end]\n    music_string = music_string[music_string.find(\"\
    -\") + 1 .. end]\n    music_string = music_string[1 .. end]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 .. end]\n    music_string = music_string[1\
    \ .. end]\n    music_string = music_string[music_string.find(\"o\") + 1 .. end]\n\
    \    music_string = music_string[1 .. end]\n    music_string = music_string[music_string.find(\"\
    -\") + 1 .. end]\n    music_string = music_string[1 .. end]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 .. end]\n    music_string = music_string[1\
    \ .. end]\n    music_string = music_string[music_string.find(\"o\") + 1 .. end]\n\
    \    music_string = music_string[1 .. end]\n    music_string = music_string[music_string.find(\"\
    -\") + 1 .. end]\n    music_string = music_string[1 .. end]\n    music_string\
    \ = music_string[music_string.find(\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpk85dxd0w.jl:53\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpk85dxd0w.jl:53\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip()\n    music_string = music_string.strip(\"\\n\")\n   \
    \ music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoca5yli2.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpoca5yli2.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpoca5yli2.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_notes = music_string.split(\"|\")\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpzpjnxkz1.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpzpjnxkz1.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpzpjnxkz1.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip()\n    music_string = music_string.strip(\"\\n\")\n   \
    \ music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"\\v\")\n    music_string = music_string.strip(\"\
    \\f\")\n    music_string = music_string.strip(\"\\a\")\n    music_string = music_string.strip(\"\
    \\e\")\n    music_string = music_string.strip(\"\\c\")\n    music_string = music_string.strip(\"\
    \\^\")\n    music_string = music_string.strip(\"\\~\")\n    music_string = music_string.strip(\"\
    \\*\")\n    music_string = music_string.strip(\"\\+\")\n    music_string = music_string.strip(\"\
    \\?\")\n    music_string = music_string.strip(\"\\*\")\n    music_string = music_string.strip(\"\
    \\*\")\n    music_string = music_string.strip(\"\\*\")\n    music_string = music_string.strip(\"\
    \\*\")\n    music_string = music_string.strip(\"\\*\")\n    music_string = music_string.strip(\"\
    \\*\")\n    music_string = music_string.strip(\"\\*\")\n    music_string = music_string.strip(\"\
    \\*\")\n    music_string = music_string.strip(\"\\*\")\n    music_string = music_string.strip(\"\
    \\*\")\n    music_string = music_string.strip(\"\\*\")\n    music_string = music_string.strip(\"\
    \\*\")\n    music_string = music_string.strip(\"\\*\")\n    music_string = music_string.strip(\"\
    \\*\")\n    music_string = music_string.strip(\"\\*\")\n    music_string = music_string.strip(\"\
    \\*\")\n    music_string = music_string.strip(\"\\*\")\n    music_string = music_string.strip(\"\
    \\*\")\n    music_string = music_string.strip(\"\\*\")\n    music_string = music_string.strip(\"\
    \\*\")\n    music_string = music_string.strip(\"\\*\")\n    music_string = music_string.strip(\"\
    \\*\")\n    music_string = music_string.strip(\"\\*\")\n    music_string = music_string.strip(\"\
    \\*\")\n    music_string = music_string.strip(\"\\*\")\n    music_string = music_string.strip(\"\
    \\*\")\n    music_string = music_string.strip(\"\\*\")\n    music_string = music_string.strip(\"\
    \\*\")\n    music_string = music_string.strip\nusing Test\n\n@testset begin\n\n\
    candidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpi3u3t1cj.jl:22\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpi3u3t1cj.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpevomn2w6.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpevomn2w6.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpevomn2w6.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpo3kymi0l.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpo3kymi0l.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpo3kymi0l.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"music_string.index(\"\
    |\"):\" range expression \nStacktrace:\n [1] top-level scope at /tmp/tmp3ytsx350.jl:15\n\
    \ [2] include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp3ytsx350.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : music_string.index(\"|\", music_string.index(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"|\") + 1 : music_string.index(\"|\", music_string.index(\"\
    |\") + 1)]\n    music_string = music_string[music_string.index(\"|\") + 1 : music_string.index(\"\
    |\", music_string.index(\"|\") + 1)]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : music_string.index(\"|\", music_string.index(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"|\") + 1 : music_string.index(\"|\", music_string.index(\"\
    |\") + 1)]\n    music_string = music_string[music_string.index(\"|\") + 1 : music_string.index(\"\
    |\", music_string.index(\"|\") + 1)]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : music_string.index(\"|\", music_string.index(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"|\") + 1 : music_string.index(\"|\", music_string.index(\"\
    |\") + 1)]\n    music_string = music_string[music_string.index(\"|\") + 1 : music_string.index(\"\
    |\", music_string.index(\"|\") + 1)]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : music_string.index(\"|\", music_string.index(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"|\") + 1 : music_string.index(\"|\", music_string.index(\"\
    |\") + 1)]\n    music_string = music_string[music_string.index(\"|\") + 1 : music_string.index(\"\
    |\", music_string.index(\"|\") + 1)]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : music_string.index(\"|\", music_string.index(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"|\") + 1 : music_string.index(\"|\", music_string.index(\"\
    |\") + 1)]\n    music_string = music_string[music_string.index(\"|\") + 1 : music_string.index(\"\
    |\", music_string.\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpakuh899n.jl:30\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpakuh899n.jl:30\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpyk7f1p41.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpyk7f1p41.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\\n\")\n    music_string = music_string.strip(\"\
    \\r\")\n    music_string = music_string.strip(\"\\t\")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\" \")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\\n\")\n    music_string = music_string.strip(\"\
    \\r\")\n    music_string = music_string.strip(\"\\t\")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\" \")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\\n\")\n    music_string = music_string.strip(\"\
    \\r\")\n    music_string = music_string.strip(\"\\t\")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\" \")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\\n\")\n    music_string = music_string.strip(\"\
    \\r\")\n    music_string = music_string.strip(\"\\t\")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\" \")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = \nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy4a_n8x4.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpy4a_n8x4.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpy4a_n8x4.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.replace(' ', '')\n    music_string = music_string.replace('|',\
    \ '')\n    music_string = music_string.replace('o', '')\n    music_string = music_string.replace('.',\
    \ '')\n    music_string = music_string.replace('o|', '')\n    music_string = music_string.replace('.|',\
    \ '')\n    music_string = music_string.replace('o|', '')\n    music_string = music_string.replace('o|',\
    \ '')\n    music_string = music_string.replace('o|', '')\n    music_string = music_string.replace('o|',\
    \ '')\n    music_string = music_string.replace('o|', '')\n    music_string = music_string.replace('o|',\
    \ '')\n    music_string = music_string.replace('o|', '')\n    music_string = music_string.replace('o|',\
    \ '')\n    music_string = music_string.replace('o|', '')\n    music_string = music_string.replace('o|',\
    \ '')\n    music_string = music_string.replace('o|', '')\n    music_string = music_string.replace('o|',\
    \ '')\n    music_string = music_string.replace('o|', '')\n    music_string = music_string.replace('o|',\
    \ '')\n    music_string = music_string.replace('o|', '')\n    music_string = music_string.replace('o|',\
    \ '')\n    music_string = music_string.replace('o|', '')\n    music_string = music_string.replace('o|',\
    \ '')\n    music_string = music_string.replace('o|', '')\n    music_string = music_string.replace('o|',\
    \ '')\n    music_string = music_string.replace('o|', '')\n    music_string = music_string.replace('o|',\
    \ '')\n    music_string = music_string.replace('o|', '')\n    music_string = music_string.replace('o|',\
    \ '')\n    music_string = music_string.replace('o|', '')\n    music_string = music_string.replace('o|',\
    \ '')\n    music_string = music_string.replace('o|', '')\n    music_string = music_string.replace('o|',\
    \ '')\n    music_string = music_string.replace('o|', '')\n    music_string = music_string.replace('o|',\
    \ '')\n    music_string = music_string.replace('o|', '')\n    music_string = music_string.replace('o|',\
    \ '')\n    music_string = music_string.replace('o|', '')\n    music_string = music_string.replace('o|',\
    \ '')\n    music_string = music_string.replace('o|', '')\n    music_string = music_string.replace('o|',\
    \ '')\n    music_string = music_string.replace('o|', '')\n    \nusing Test\n\n\
    @testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid character literal\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpvzbtfco4.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvzbtfco4.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find('|'):]\n\
    \    music_string = music_string[music_string.find('|'):]\n    music_string =\
    \ music_string[music_string.find('|'):]\n    music_string = music_string[music_string.find('|'):]\n\
    \    music_string = music_string[music_string.find('|'):]\n    music_string =\
    \ music_string[music_string.find('|'):]\n    music_string = music_string[music_string.find('|'):]\n\
    \    music_string = music_string[music_string.find('|'):]\n    music_string =\
    \ music_string[music_string.find('|'):]\n    music_string = music_string[music_string.find('|'):]\n\
    \    music_string = music_string[music_string.find('|'):]\n    music_string =\
    \ music_string[music_string.find('|'):]\n    music_string = music_string[music_string.find('|'):]\n\
    \    music_string = music_string[music_string.find('|'):]\n    music_string =\
    \ music_string[music_string.find('|'):]\n    music_string = music_string[music_string.find('|'):]\n\
    \    music_string = music_string[music_string.find('|'):]\n    music_string =\
    \ music_string[music_string.find('|'):]\n    music_string = music_string[music_string.find('|'):]\n\
    \    music_string = music_string[music_string.find('|'):]\n    music_string =\
    \ music_string[music_string.find('|'):]\n    music_string = music_string[music_string.find('|'):]\n\
    \    music_string = music_string[music_string.find('|'):]\n    music_string =\
    \ music_string[music_string.find('|'):]\n    music_string = music_string[music_string.find('|'):]\n\
    \    music_string = music_string[music_string.find('|'):]\n    music_string =\
    \ music_string[music_string.find('|'):]\n    music_string = music_string[music_string.find('|'):]\n\
    \    music_string = music_string[music_string.find('|'):]\n    music_string =\
    \ music_string[music_string.find('|'):]\n    music_string = music_string[music_string.find('|'):]\n\
    \    music_string = music_string\nusing Test\n\n@testset begin\n\ncandidate =\
    \ parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"music_string.find('|'):\"\
    \ range expression \nStacktrace:\n [1] top-level scope at /tmp/tmpc8rnur82.jl:15\n\
    \ [2] include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpc8rnur82.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7ohcr1bm.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp7ohcr1bm.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp7ohcr1bm.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp8b1mwmk9.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp8b1mwmk9.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp8b1mwmk9.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find(\"|\"\
    ) + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 : music_string.find(\"|\", music_string.find(\"\
    |\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 : music_string.find(\"|\", music_string.find(\"\
    |\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t\
    @test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") ==\
    \ [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpob8kq6ch.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpob8kq6ch.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpob8kq6ch.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_notes = music_string.split(\"|\")\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes.map(parse_note)\n    music_notes\
    \ = music_notes.map(x -> x * 4)\n    music_notes = music_notes.sum\n    return\
    \ music_notes\nend\n</cell>\n<code language=julia-1.5>\n# %load solutions/parse_music.jl\n\
    </cell>\n<text>\nExercise 2\nWrite a function which takes a string representing\
    \ musical notes and returns list of integers representing how many beats does\
    \ each note last.\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t\
    @test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") ==\
    \ [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppufrx2gr.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppufrx2gr.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3bzlltv4.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3bzlltv4.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvysqq9gk.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvysqq9gk.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : music_string.index(\"|\", music_string.index(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"o\") + 1 : music_string.index(\"o\", music_string.index(\"\
    o\") + 1)]\n    music_string = music_string[music_string.index(\"o\") + 1 : music_string.index(\"\
    o\", music_string.index(\"o\") + 1)]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 : music_string.index(\"o\", music_string.index(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"o\") + 1 : music_string.index(\"o\", music_string.index(\"\
    o\") + 1)]\n    music_string = music_string[music_string.index(\"o\") + 1 : music_string.index(\"\
    o\", music_string.index(\"o\") + 1)]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 : music_string.index(\"o\", music_string.index(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"o\") + 1 : music_string.index(\"o\", music_string.index(\"\
    o\") + 1)]\n    music_string = music_string[music_string.index(\"o\") + 1 : music_string.index(\"\
    o\", music_string.index(\"o\") + 1)]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 : music_string.index(\"o\", music_string.index(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"o\") + 1 : music_string.index(\"o\", music_string.index(\"\
    o\") + 1)]\n    music_string = music_string[music_string.index(\"o\") + 1 : music_string.index(\"\
    o\", music_string.index(\"o\") + 1)]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 : music_string.index(\"o\", music_string.index(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"o\") + 1 : music_string.index(\"o\", music_string.index(\"\
    o\") + 1)]\n    music_string = music_string[music_string.index(\"o\") + 1 : music_string.index(\"\
    o\", music_string.\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzo7scann.jl:30\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzo7scann.jl:30\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 .. music_string.findfirst(\"o\")]\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 .. music_string.findfirst(\"o\")]\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 .. music_string.findfirst(\"o\")]\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 .. music_string.findfirst(\"o\")]\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 .. music_string.findfirst(\"o\")]\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 .. music_string.findfirst(\"o\")]\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 .. music_string.findfirst(\"o\")]\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 .. music_string.findfirst(\"o\")]\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 .. music_string.findfirst(\"o\")]\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 .. music_string.findfirst(\"o\")]\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 .. music_string.findfirst(\"o\")]\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 .. music_string.findfirst(\"o\")]\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 .. music_string.findfirst(\"o\")]\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 .. music_string.findfirst(\"o\")]\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 .. music_string.findfirst(\"o\")]\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 .. music_string.findfirst(\"o\")]\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 .. music_string.findfirst(\"o\")]\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 .. music_string.findfirst(\"o\")]\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpc28py_md.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpc28py_md.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpc28py_md.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyghcg1b0.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpyghcg1b0.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpyghcg1b0.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find(\"|\"\
    ) + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\".\") + 1 : music_string.find(\"\
    o\", music_string.find(\".\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = \nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpzr9wdfl9.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpzr9wdfl9.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpzr9wdfl9.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[music_string.end-1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[music_string.end-1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[music_string.end-1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[music_string.end-1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[music_string.end-1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[music_string.end-1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[music_string.end-1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[music_string.end-1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[music_string.end-1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[music_string.end-1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[music_string.end-1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[music_string.end-1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[music_string.end-1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[music_string.end-1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[music_string.end-1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[music_string.end-1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[\nusing Test\n\n@testset begin\n\ncandidate =\
    \ parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmptl4x3ilv.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmptl4x3ilv.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 .. music_string.findfirst(\"o\")]\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 .. music_string.findfirst(\"o\")]\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 .. music_string.findfirst(\"o\")]\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 .. music_string.findfirst(\"o\")]\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 .. music_string.findfirst(\"o\")]\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 .. music_string.findfirst(\"o\")]\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 .. music_string.findfirst(\"o\")]\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 .. music_string.findfirst(\"o\")]\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 .. music_string.findfirst(\"o\")]\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 .. music_string.findfirst(\"o\")]\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 .. music_string.findfirst(\"o\")]\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 .. music_string.findfirst(\"o\")]\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 .. music_string.findfirst(\"o\")]\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 .. music_string.findfirst(\"o\")]\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 .. music_string.findfirst(\"o\")]\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 .. music_string.findfirst(\"o\")]\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 .. music_string.findfirst(\"o\")]\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 .. music_string.findfirst(\"o\")]\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp20u6royx.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp20u6royx.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp20u6royx.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip()\n    music_string = music_string.strip(\"\\n\")\n   \
    \ music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0blfyuok.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp0blfyuok.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp0blfyuok.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpv2mccywx.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpv2mccywx.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find(\"|\"\
    ) + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 : music_string.find(\"|\", music_string.find(\"\
    |\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 : music_string.find(\"|\", music_string.find(\"\
    |\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t\
    @test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") ==\
    \ [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqf99urpj.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpqf99urpj.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpqf99urpj.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find(\"|\"\
    ) + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\".\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp91_keoxp.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp91_keoxp.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp91_keoxp.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpf3bbeisg.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpf3bbeisg.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find(\"|\"\
    ) + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 : music_string.find(\"|\", music_string.find(\"\
    |\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 : music_string.find(\"|\", music_string.find(\"\
    |\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t\
    @test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") ==\
    \ [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp1zhddzta.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp1zhddzta.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp1zhddzta.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.findFirst(\"\
    \ \")]\n    music_string = music_string[music_string.findFirst(\"|\")]\n    music_string\
    \ = music_string[music_string.findFirst(\".\")]\n    music_string = music_string[music_string.findFirst(\"\
    o\")]\n    music_string = music_string[music_string.findFirst(\"o|\")]\n    music_string\
    \ = music_string[music_string.findFirst(\"|o\")]\n    music_string = music_string[music_string.findFirst(\"\
    |o|\")]\n    music_string = music_string[music_string.findFirst(\"|.|\")]\n  \
    \  music_string = music_string[music_string.findFirst(\"|.|o\")]\n    music_string\
    \ = music_string[music_string.findFirst(\"|.|o|\")]\n    music_string = music_string[music_string.findFirst(\"\
    |.|.|\")]\n    music_string = music_string[music_string.findFirst(\"|.|.|o\")]\n\
    \    music_string = music_string[music_string.findFirst(\"|.|.|o|\")]\n    music_string\
    \ = music_string[music_string.findFirst(\"|.|.|.|\")]\n    music_string = music_string[music_string.findFirst(\"\
    |.|.|.|o\")]\n    music_string = music_string[music_string.findFirst(\"|.|.|.|o|\"\
    )]\n    music_string = music_string[music_string.findFirst(\"|.|.|.|.|\")]\n \
    \   music_string = music_string[music_string.findFirst(\"|.|.|.|.|o\")]\n    music_string\
    \ = music_string[music_string.findFirst(\"|.|.|.|.|o|\")]\n    music_string =\
    \ music_string[music_string.findFirst(\"|.|.|.|.|.|\")]\n    music_string = music_string[music_string.findFirst(\"\
    |.|.|.|.|.|o\")]\n    music_string = music_string[music_string.findFirst(\"|.|.|.|.|.|o|\"\
    )]\n    music_string = music_string[music_string.findFirst(\"|.|.|.|.|.|.|\")]\n\
    \    music_string = music_string[music_string.findFirst(\"|.|.|.|.|.|.|o\")]\n\
    \    music_string = music_string[music_string.findFirst(\"|.|.|.|\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8qmh279h.jl:45\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8qmh279h.jl:45\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip()\n    music_string = music_string.strip(\"\\n\")\n   \
    \ music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqr4jq_gi.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpqr4jq_gi.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpqr4jq_gi.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpd3usm9y5.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpd3usm9y5.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpd3usm9y5.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1h4lpb_7.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1h4lpb_7.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip()\n    music_string = music_string[music_string.rfind('|'):]\n\
    \    music_string = music_string[music_string.rfind('o'):]\n    music_string =\
    \ music_string[music_string.rfind('|'):]\n    music_string = music_string[music_string.rfind('o'):]\n\
    \    music_string = music_string[music_string.rfind('|'):]\n    music_string =\
    \ music_string[music_string.rfind('o'):]\n    music_string = music_string[music_string.rfind('|'):]\n\
    \    music_string = music_string[music_string.rfind('o'):]\n    music_string =\
    \ music_string[music_string.rfind('|'):]\n    music_string = music_string[music_string.rfind('o'):]\n\
    \    music_string = music_string[music_string.rfind('|'):]\n    music_string =\
    \ music_string[music_string.rfind('o'):]\n    music_string = music_string[music_string.rfind('|'):]\n\
    \    music_string = music_string[music_string.rfind('o'):]\n    music_string =\
    \ music_string[music_string.rfind('|'):]\n    music_string = music_string[music_string.rfind('o'):]\n\
    \    music_string = music_string[music_string.rfind('|'):]\n    music_string =\
    \ music_string[music_string.rfind('o'):]\n    music_string = music_string[music_string.rfind('|'):]\n\
    \    music_string = music_string[music_string.rfind('o'):]\n    music_string =\
    \ music_string[music_string.rfind('|'):]\n    music_string = music_string[music_string.rfind('o'):]\n\
    \    music_string = music_string[music_string.rfind('|'):]\n    music_string =\
    \ music_string[music_string.rfind('o'):]\n    music_string = music_string[music_string.rfind('|'):]\n\
    \    music_string = music_string[music_string.rfind('o'):]\n    music_string =\
    \ music_string[music_string.rfind('|'):]\n    music_string = music_string[music_string.rfind('o'):]\n\
    \    music_string = music_string[music_string.rfind('|'):]\n    music_string =\
    \ music_string[music_\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"music_string.rfind('|'):\"\
    \ range expression \nStacktrace:\n [1] top-level scope at /tmp/tmp30rkx82u.jl:15\n\
    \ [2] include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp30rkx82u.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : music_string.index(\"|\", music_string.index(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"|\") + 1 : music_string.index(\"|\", music_string.index(\"\
    |\") + 1)]\n    music_string = music_string[music_string.index(\"|\") + 1 : music_string.index(\"\
    |\", music_string.index(\"|\") + 1)]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : music_string.index(\"|\", music_string.index(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"|\") + 1 : music_string.index(\"|\", music_string.index(\"\
    |\") + 1)]\n    music_string = music_string[music_string.index(\"|\") + 1 : music_string.index(\"\
    |\", music_string.index(\"|\") + 1)]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : music_string.index(\"|\", music_string.index(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"|\") + 1 : music_string.index(\"|\", music_string.index(\"\
    |\") + 1)]\n    music_string = music_string[music_string.index(\"|\") + 1 : music_string.index(\"\
    |\", music_string.index(\"|\") + 1)]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : music_string.index(\"|\", music_string.index(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"|\") + 1 : music_string.index(\"|\", music_string.index(\"\
    |\") + 1)]\n    music_string = music_string[music_string.index(\"|\") + 1 : music_string.index(\"\
    |\", music_string.index(\"|\") + 1)]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : music_string.index(\"|\", music_string.index(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"|\") + 1 : music_string.index(\"|\", music_string.index(\"\
    |\") + 1)]\n    music_string = music_string[music_string.index(\"|\") + 1 : music_string.index(\"\
    |\", music_string.\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6_tfl6vj.jl:30\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6_tfl6vj.jl:30\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0_g0tw9b.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp0_g0tw9b.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : string(music_string).end]\n    music_\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwu9rvisi.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpwu9rvisi.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpwu9rvisi.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_list = music_string.split(\" \")\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp1pmmr_nu.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp1pmmr_nu.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp1pmmr_nu.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip()\n    music_string = music_string.strip(\"\\n\")\n   \
    \ music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgqqeq3li.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpgqqeq3li.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpgqqeq3li.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyujnxa3b.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpyujnxa3b.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpyujnxa3b.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string[1:end-1]\n    music_string = music_string[music_string != \"\
    o\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \".\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpz2lvc4k5.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpz2lvc4k5.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpz2lvc4k5.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string[1:] # remove first symbol\n    music_string = music_string[music_string.find(\"\
    |\"):] # remove last symbol\n    music_string = music_string[music_string.find(\"\
    |\"):music_string.find(\"|\")+1] # remove last symbol\n    music_string = music_string[music_string.find(\"\
    |\"):music_string.find(\"|\")+1] # remove last symbol\n    music_string = music_string[music_string.find(\"\
    |\"):music_string.find(\"|\")+1] # remove last symbol\n    music_string = music_string[music_string.find(\"\
    |\"):music_string.find(\"|\")+1] # remove last symbol\n    music_string = music_string[music_string.find(\"\
    |\"):music_string.find(\"|\")+1] # remove last symbol\n    music_string = music_string[music_string.find(\"\
    |\"):music_string.find(\"|\")+1] # remove last symbol\n    music_string = music_string[music_string.find(\"\
    |\"):music_string.find(\"|\")+1] # remove last symbol\n    music_string = music_string[music_string.find(\"\
    |\"):music_string.find(\"|\")+1] # remove last symbol\n    music_string = music_string[music_string.find(\"\
    |\"):music_string.find(\"|\")+1] # remove last symbol\n    music_string = music_string[music_string.find(\"\
    |\"):music_string.find(\"|\")+1] # remove last symbol\n    music_string = music_string[music_string.find(\"\
    |\"):music_string.find(\"|\")+1] # remove last symbol\n    music_string = music_string[music_string.find(\"\
    |\"):music_string.find(\"|\")+1] # remove last symbol\n    music_string = music_string[music_string.find(\"\
    |\"):music_string.find(\"|\")+1] # remove last symbol\n    music_string = music_string[music_string.find(\"\
    |\"):music_string.find(\"|\")+1] # remove last symbol\n    music_string = music_string[music_string.find(\"\
    |\"):music_string.find(\"|\")+1] # remove last symbol\n    music_string = music_string[music_string.find(\"\
    |\"):music_string.find(\"|\")+1] # remove last symbol\n    music_string = music_string[music_string.find(\"\
    |\"):music_string.find(\"|\")+1] # remove last symbol\n    music_string = music_string[music_string.find(\"\
    |\"):music_string.find(\"|\")+1] # remove last symbol\n    music_string = music_string[music_string.find(\"\
    \nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmpgxljqjuv.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpgxljqjuv.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_notes = music_string.split(\"|\")\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpc560c_t1.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpc560c_t1.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpc560c_t1.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip()\n    music_notes = music_string.split(\"|\")\n    music_notes\
    \ = music_notes[music_notes.len()/2:end]\n    music_notes = music_notes.map(x\
    \ => x.trim())\n    music_notes = music_notes.map(x => x.split(\"o\"))\n    music_notes\
    \ = music_notes.map(x => x.map(x => x.toInt))\n    music_notes = music_notes.map(x\
    \ => x.map(x => x.sum))\n    music_notes = music_notes.map(x => x.map(x => x/4))\n\
    \    music_notes = music_notes.map(x => x.map(x => x.sum))\n    music_notes =\
    \ music_notes.map(x => x.map(x => x/4))\n    music_notes = music_notes.map(x =>\
    \ x.map(x => x.sum))\n    music_notes = music_notes.map(x => x.map(x => x/4))\n\
    \    music_notes = music_notes.map(x => x.map(x => x.sum))\n    music_notes =\
    \ music_notes.map(x => x.map(x => x/4))\n    music_notes = music_notes.map(x =>\
    \ x.map(x => x.sum))\n    music_notes = music_notes.map(x => x.map(x => x/4))\n\
    \    music_notes = music_notes.map(x => x.map(x => x.sum))\n    music_notes =\
    \ music_notes.map(x => x.map(x => x/4))\n    music_notes = music_notes.map(x =>\
    \ x.map(x => x.sum))\n    music_notes = music_notes.map(x => x.map(x => x/4))\n\
    \    music_notes = music_notes.map(x => x.map(x => x.sum))\n    music_notes =\
    \ music_notes.map(x => x.map(x => x/4))\n    music_notes = music_notes.map(x =>\
    \ x.map(x => x.sum))\n    music_notes = music_notes.map(x => x.map(x => x/4))\n\
    \    music_notes = music_notes.map(x => x.map(x => x.sum))\n    music_notes =\
    \ music_notes.map(x => x.map(x => x/4))\n    music_notes = music_notes.map(x =>\
    \ x.map(x => x.sum))\n    music_notes = music_note\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_bch3esi.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp_bch3esi.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp_bch3esi.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find(\"|\"\
    ) + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 : music_string.find(\"|\", music_string.find(\"\
    |\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 : music_string.find(\"|\", music_string.find(\"\
    |\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t\
    @test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") ==\
    \ [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpw8xedmr5.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpw8xedmr5.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpw8xedmr5.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoh4kmu48.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpoh4kmu48.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpoh4kmu48.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjhdhq3a8.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpjhdhq3a8.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\") + 1 .. end]\n    music_string = music_string[music_string.index(\"o\") +\
    \ 1 .. end]\n    music_string = music_string[music_string.index(\"|\") + 1 ..\
    \ end]\n    music_string = music_string[music_string.index(\"o\") + 1 .. end]\n\
    \    music_string = music_string[music_string.index(\"|\") + 1 .. end]\n    music_string\
    \ = music_string[music_string.index(\"o\") + 1 .. end]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 .. end]\n    music_string = music_string[music_string.index(\"o\") +\
    \ 1 .. end]\n    music_string = music_string[music_string.index(\"|\") + 1 ..\
    \ end]\n    music_string = music_string[music_string.index(\"o\") + 1 .. end]\n\
    \    music_string = music_string[music_string.index(\"|\") + 1 .. end]\n    music_string\
    \ = music_string[music_string.index(\"o\") + 1 .. end]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 .. end]\n    music_string = music_string[music_string.index(\"o\") +\
    \ 1 .. end]\n    music_string = music_string[music_string.index(\"|\") + 1 ..\
    \ end]\n    music_string = music_string[music_string.index(\"o\") + 1 .. end]\n\
    \    music_string = music_string[music_string.index(\"|\") + 1 .. end]\n    music_string\
    \ = music_string[music_string.index(\"o\") + 1 .. end]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 .. end]\n    music_string = music_string[music_string.index(\"o\") +\
    \ 1 .. end]\n    music_string = music_string[music_string.index(\"|\") + 1 ..\
    \ end]\n    music_string = music_string[music_string.index(\"o\") + 1 .. end]\n\
    \    music_string = music_string[music_string.index(\"|\") + 1 .. end]\n    music_string\
    \ = music_string[music_string.index(\"o\") + 1 .. end]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 .. end]\n    music_\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp4w6gt266.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp4w6gt266.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp4w6gt266.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_list = music_string.split(\" \")\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwyjkswnm.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpwyjkswnm.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpwyjkswnm.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_list = music_string.split(' ')\n    music_list\
    \ = filter(x -> x != ' ', music_list)\n    music_list = music_list[music_list.index('|'):end]\n\
    \    music_list = music_list[music_list.index('o'):end]\n    music_list = music_list[music_list.index('|'):end]\n\
    \    music_list = music_list[music_list.index('o'):end]\n    music_list = music_list[music_list.index('|'):end]\n\
    \    music_list = music_list[music_list.index('o'):end]\n    music_list = music_list[music_list.index('|'):end]\n\
    \    music_list = music_list[music_list.index('o'):end]\n    music_list = music_list[music_list.index('|'):end]\n\
    \    music_list = music_list[music_list.index('o'):end]\n    music_list = music_list[music_list.index('|'):end]\n\
    \    music_list = music_list[music_list.index('o'):end]\n    music_list = music_list[music_list.index('|'):end]\n\
    \    music_list = music_list[music_list.index('o'):end]\n    music_list = music_list[music_list.index('|'):end]\n\
    \    music_list = music_list[music_list.index('o'):end]\n    music_list = music_list[music_list.index('|'):end]\n\
    \    music_list = music_list[music_list.index('o'):end]\n    music_list = music_list[music_list.index('|'):end]\n\
    \    music_list = music_list[music_list.index('o'):end]\n    music_list = music_list[music_list.index('|'):end]\n\
    \    music_list = music_list[music_list.index('o'):end]\n    music_list = music_list[music_list.index('|'):end]\n\
    \    music_list = music_list[music_list.index('o'):end]\n    music_list = music_list[music_list.index('|'):end]\n\
    \    music_list = music_list[music_list.index('o'):end]\n    music_list = music_list[music_list.index('|'):end]\n\
    \    music_list = music_list[music_list.index('o'):end]\n    music_list = music_list[music_list.index('|'):end]\n\
    \    music_list = music_list[music_list.index('o'):end]\n    music_list = music_list[music_list.index('|'):end]\n\
    \    music_list = music_list[music_list.index('o'):end]\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjdx0vuzt.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpjdx0vuzt.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpjdx0vuzt.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppagjtt23.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmppagjtt23.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmppagjtt23.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string[1:end-1]\n    music_string = replace(music_string, \"o\", \"\
    0\")\n    music_string = replace(music_string, \"|\", \"0\")\n    music_string\
    \ = replace(music_string, \".\", \"0\")\n    music_string = replace(music_string,\
    \ \"0\", \"o\")\n    music_string = replace(music_string, \"1\", \"o|\")\n   \
    \ music_string = replace(music_string, \"2\", \".|\")\n    music_string = replace(music_string,\
    \ \"3\", \".|\")\n    music_string = replace(music_string, \"4\", \".|\")\n  \
    \  music_string = replace(music_string, \"5\", \".|\")\n    music_string = replace(music_string,\
    \ \"6\", \".|\")\n    music_string = replace(music_string, \"7\", \".|\")\n  \
    \  music_string = replace(music_string, \"8\", \".|\")\n    music_string = replace(music_string,\
    \ \"9\", \".|\")\n    music_string = replace(music_string, \"10\", \".|\")\n \
    \   music_string = replace(music_string, \"11\", \".|\")\n    music_string = replace(music_string,\
    \ \"12\", \".|\")\n    music_string = replace(music_string, \"13\", \".|\")\n\
    \    music_string = replace(music_string, \"14\", \".|\")\n    music_string =\
    \ replace(music_string, \"15\", \".|\")\n    music_string = replace(music_string,\
    \ \"16\", \".|\")\n    music_string = replace(music_string, \"17\", \".|\")\n\
    \    music_string = replace(music_string, \"18\", \".|\")\n    music_string =\
    \ replace(music_string, \"19\", \".|\")\n    music_string = replace(music_string,\
    \ \"20\", \".|\")\n    music_string = replace(music_string, \"21\", \".|\")\n\
    \    music_string = replace(music_string, \"22\", \".|\")\n    music_string =\
    \ replace(music_string, \"23\", \".|\")\n    music_string = replace(music_string,\
    \ \"24\", \".|\")\n    music_string = replace(music_string, \"25\", \".|\")\n\
    \    music_string = replace(music_string, \"26\", \".|\")\n    music_string =\
    \ replace(music_string, \"27\", \".|\")\n    music_string = replace(music_string,\
    \ \"28\", \".|\")\n    music_string = replace(music_string, \"29\", \".|\")\n\
    \    music_string = replace(music_string, \"30\", \".|\")\n    music_string =\
    \ replace(music_string, \"31\", \".|\")\n    music_string = replace(music_string,\
    \ \"32\", \".|\")\n    music_\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpcj88sw2c.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpcj88sw2c.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpcj88sw2c.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_list = music_string.split(\" \")\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqfoh1dg3.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpqfoh1dg3.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpqfoh1dg3.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.findFirst(\"\
    \ \")]\n    music_string = music_string[music_string.findFirst(\"|\")]\n    music_string\
    \ = music_string[music_string.findFirst(\"o\")]\n    music_string = music_string[music_string.findFirst(\"\
    .\")]\n    music_string = music_string[music_string.findFirst(\"o\")]\n    music_string\
    \ = music_string[music_string.findFirst(\"o\")]\n    music_string = music_string[music_string.findFirst(\"\
    o\")]\n    music_string = music_string[music_string.findFirst(\"o\")]\n    music_string\
    \ = music_string[music_string.findFirst(\"o\")]\n    music_string = music_string[music_string.findFirst(\"\
    o\")]\n    music_string = music_string[music_string.findFirst(\"o\")]\n    music_string\
    \ = music_string[music_string.findFirst(\"o\")]\n    music_string = music_string[music_string.findFirst(\"\
    o\")]\n    music_string = music_string[music_string.findFirst(\"o\")]\n    music_string\
    \ = music_string[music_string.findFirst(\"o\")]\n    music_string = music_string[music_string.findFirst(\"\
    o\")]\n    music_string = music_string[music_string.findFirst(\"o\")]\n    music_string\
    \ = music_string[music_string.findFirst(\"o\")]\n    music_string = music_string[music_string.findFirst(\"\
    o\")]\n    music_string = music_string[music_string.findFirst(\"o\")]\n    music_string\
    \ = music_string[music_string.findFirst(\"o\")]\n    music_string = music_string[music_string.findFirst(\"\
    o\")]\n    music_string = music_string[music_string.findFirst(\"o\")]\n    music_string\
    \ = music_string[music_string.findFirst(\"o\")]\n    music_string = music_string[music_string.findFirst(\"\
    o\")]\n    music_string = music_string[music_string.findFirst(\"o\")]\n    music_string\
    \ = music_string[music_string.findFirst(\"o\")]\n    music_string = music_string[music_string.findFirst(\"\
    o\")]\n    music_string = music_string[music_string.findFirst(\"o\")]\n    music_string\
    \ = music_string[music_string.\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphnccrfpl.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphnccrfpl.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.start-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjpvbrsrl.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpjpvbrsrl.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpjpvbrsrl.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6fd5gnsk.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6fd5gnsk.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+music_string.index(\"|\")+1]\n    music_string = music_string[music_string.index(\"\
    |\"):music_string.index(\"|\")+music_string.index(\"|\")+2]\n    music_string\
    \ = music_string[music_string.index(\"|\"):music_string.index(\"|\")+music_string.index(\"\
    |\")+3]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+music_string.index(\"|\")+4]\n    music_string = music_string[music_string.index(\"\
    |\"):music_string.index(\"|\")+music_string.index(\"|\")+5]\n    music_string\
    \ = music_string[music_string.index(\"|\"):music_string.index(\"|\")+music_string.index(\"\
    |\")+6]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+music_string.index(\"|\")+7]\n    music_string = music_string[music_string.index(\"\
    |\"):music_string.index(\"|\")+music_string.index(\"|\")+8]\n    music_string\
    \ = music_string[music_string.index(\"|\"):music_string.index(\"|\")+music_string.index(\"\
    |\")+9]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+music_string.index(\"|\")+10]\n    music_string = music_string[music_string.index(\"\
    |\"):music_string.index(\"|\")+music_string.index(\"|\")+11]\n    music_string\
    \ = music_string[music_string.index(\"|\"):music_string.index(\"|\")+music_string.index(\"\
    |\")+12]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+music_string.index(\"|\")+13]\n    music_string = music_string[music_string.index(\"\
    |\"):music_string.index(\"|\")+music_string.index(\"|\")+14]\n    music_string\
    \ = music_string[music_string.index(\"|\"):music_string.index(\"|\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"music_string.index(\"\
    |\"):\" range expression \nStacktrace:\n [1] top-level scope at /tmp/tmpldzxob1n.jl:15\n\
    \ [2] include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpldzxob1n.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string.strip\n\
    \    music_string = music_string[music_string.end-1:end]\n    music_string = music_string[1:end]\n\
    \    music_string = music_string.strip\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string.strip\n\
    \    music_string = music_string[music_string.end-1:end]\n    music_string = music_string[1:end]\n\
    \    music_string = music_string.strip\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string.strip\n\
    \    music_string = music_string[music_string.end-1:end]\n    music_string = music_string[1:end]\n\
    \    music_string = music_string.strip\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string.strip\n\
    \    music_string = music_string[music_string.end-1:end]\n    music_string = music_string[1:end]\n\
    \    music_string = music_string.strip\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string.strip\n\
    \    music_string = music_string[music_string.end-1:end]\n    music_string = music_string[1:end]\n\
    \    music_string = music_string.strip\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string.strip\n\
    \    music_string = music_string[music_string.end-1:end]\n    music_string = music_string[1:end]\n\
    \    music_string = music_string.strip\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string.strip\n\
    \    music_string = music_string[music_string.end-1:end]\n    music_string = music_string[1:end]\n\
    \    music_string = music_string.strip\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    musi\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwz8zycm5.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpwz8zycm5.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpwz8zycm5.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = ''.join(music_string)\n    music_string = music_string.strip()\n    music_string\
    \ = music_string.replace(' ', '')\n    music_string = music_string.replace('|',\
    \ '')\n    music_string = music_string.replace('o', '')\n    music_string = music_string.replace('.',\
    \ '')\n    music_string = music_string.replace(' ', '')\n    music_string = music_string.replace('\
    \ ', '')\n    music_string = music_string.replace(' ', '')\n    music_string =\
    \ music_string.replace(' ', '')\n    music_string = music_string.replace(' ',\
    \ '')\n    music_string = music_string.replace(' ', '')\n    music_string = music_string.replace('\
    \ ', '')\n    music_string = music_string.replace(' ', '')\n    music_string =\
    \ music_string.replace(' ', '')\n    music_string = music_string.replace(' ',\
    \ '')\n    music_string = music_string.replace(' ', '')\n    music_string = music_string.replace('\
    \ ', '')\n    music_string = music_string.replace(' ', '')\n    music_string =\
    \ music_string.replace(' ', '')\n    music_string = music_string.replace(' ',\
    \ '')\n    music_string = music_string.replace(' ', '')\n    music_string = music_string.replace('\
    \ ', '')\n    music_string = music_string.replace(' ', '')\n    music_string =\
    \ music_string.replace(' ', '')\n    music_string = music_string.replace(' ',\
    \ '')\n    music_string = music_string.replace(' ', '')\n    music_string = music_string.replace('\
    \ ', '')\n    music_string = music_string.replace(' ', '')\n    music_string =\
    \ music_string.replace(' ', '')\n    music_string = music_string.replace(' ',\
    \ '')\n    music_string = music_string.replace(' ', '')\n    music_string = music_string.replace('\
    \ ', '')\n    music_string = music_string.replace(' ', '')\n    music_string =\
    \ music_string.replace(' ', '')\n    music_string = music_string.replace(' ',\
    \ '')\n    music_string = music_string.replace(' ', '')\n    music_string = music_string.replace('\
    \ ', '')\n    music_string = music_string.replace(' ', '')\n    music_string =\
    \ music_string.replace(' ', '')\n    music_string = music_string.replace(' ',\
    \ '')\n    music_string = music_string.replace(' ', '')\n    music_string = music_string.replace('\
    \ ', '')\n    music_string = music_string.replace(' ', '')\n    music_string =\
    \ music_string.replace(' ', '')\n    music_string = music_string.replace(' ',\
    \ '')\n    music_string = music_string.replace(' \nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid character literal\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpcs7jq1bj.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpcs7jq1bj.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip()\n    music_string = music_string.strip(\"\\n\")\n   \
    \ music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpue9vos55.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpue9vos55.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpue9vos55.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_notes = music_string.split(\"|\")\n    music_notes\
    \ = music_notes[music_notes.len()/2:end]\n    music_notes = music_notes.map(x\
    \ => x.strip)\n    music_notes = music_notes.map(x => x.split(\"o\"))\n    music_notes\
    \ = music_notes.map(x => x.map(x => x.toInt))\n    music_notes = music_notes.map(x\
    \ => x.map(x => x.sum))\n    music_notes = music_notes.map(x => x.map(x => x.max))\n\
    \    music_notes = music_notes.map(x => x.map(x => x.min))\n    music_notes =\
    \ music_notes.map(x => x.map(x => x.sum))\n    music_notes = music_notes.map(x\
    \ => x.map(x => x.max))\n    music_notes = music_notes.map(x => x.map(x => x.min))\n\
    \    music_notes = music_notes.map(x => x.map(x => x.sum))\n    music_notes =\
    \ music_notes.map(x => x.map(x => x.max))\n    music_notes = music_notes.map(x\
    \ => x.map(x => x.min))\n    music_notes = music_notes.map(x => x.map(x => x.sum))\n\
    \    music_notes = music_notes.map(x => x.map(x => x.max))\n    music_notes =\
    \ music_notes.map(x => x.map(x => x.min))\n    music_notes = music_notes.map(x\
    \ => x.map(x => x.sum))\n    music_notes = music_notes.map(x => x.map(x => x.max))\n\
    \    music_notes = music_notes.map(x => x.map(x => x.min))\n    music_notes =\
    \ music_notes.map(x => x.map(x => x.sum))\n    music_notes = music_notes.map(x\
    \ => x.map(x => x.max))\n    music_notes = music_notes.map(x => x.map(x => x.min))\n\
    \    music_notes = music_notes.map(x => x.map(x => x.sum))\n    music_notes =\
    \ music_notes.map(x => x.map(x => x.max))\n    music_notes = music_notes.map(x\
    \ => x.map(x => x.min\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpg6refwyk.jl:41\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpg6refwyk.jl:41\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string[1:end-1]\n    music_string = music_string[music_string != \"\
    .\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"o\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpx4lkbzra.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpx4lkbzra.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpx4lkbzra.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+music_string.index(\"|\")+1]\n    music_string = music_string[music_string.index(\"\
    |\"):music_string.index(\"|\")+music_string.index(\"|\")+2]\n    music_string\
    \ = music_string[music_string.index(\"|\"):music_string.index(\"|\")+music_string.index(\"\
    |\")+3]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+music_string.index(\"|\")+4]\n    music_string = music_string[music_string.index(\"\
    |\"):music_string.index(\"|\")+music_string.index(\"|\")+5]\n    music_string\
    \ = music_string[music_string.index(\"|\"):music_string.index(\"|\")+music_string.index(\"\
    |\")+6]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+music_string.index(\"|\")+7]\n    music_string = music_string[music_string.index(\"\
    |\"):music_string.index(\"|\")+music_string.index(\"|\")+8]\n    music_string\
    \ = music_string[music_string.index(\"|\"):music_string.index(\"|\")+music_string.index(\"\
    |\")+9]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+music_string.index(\"|\")+10]\n    music_string = music_string[music_string.index(\"\
    |\"):music_string.index(\"|\")+music_string.index(\"|\")+11]\n    music_string\
    \ = music_string[music_string.index(\"|\"):music_string.index(\"|\")+music_string.index(\"\
    |\")+12]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+music_string.index(\"|\")+13]\n    music_string = music_string[music_string.index(\"\
    |\"):music_string.index(\"|\")+music_string.index(\"|\")+14]\n    music_string\
    \ = music_string[music_string.index(\"|\"):music_string.index(\"|\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"music_string.index(\"\
    |\"):\" range expression \nStacktrace:\n [1] top-level scope at /tmp/tmpbh811fw4.jl:15\n\
    \ [2] include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpbh811fw4.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn96g74n6.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpn96g74n6.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpn96g74n6.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_list = music_string.split(\" \")\n    music_list\
    \ = music_list[music_list.len()-1:music_list.len()]\n    music_list = music_list[music_list.len()-1:music_list.len()]\n\
    \    music_list = music_list[music_list.len()-1:music_list.len()]\n    music_list\
    \ = music_list[music_list.len()-1:music_list.len()]\n    music_list = music_list[music_list.len()-1:music_list.len()]\n\
    \    music_list = music_list[music_list.len()-1:music_list.len()]\n    music_list\
    \ = music_list[music_list.len()-1:music_list.len()]\n    music_list = music_list[music_list.len()-1:music_list.len()]\n\
    \    music_list = music_list[music_list.len()-1:music_list.len()]\n    music_list\
    \ = music_list[music_list.len()-1:music_list.len()]\n    music_list = music_list[music_list.len()-1:music_list.len()]\n\
    \    music_list = music_list[music_list.len()-1:music_list.len()]\n    music_list\
    \ = music_list[music_list.len()-1:music_list.len()]\n    music_list = music_list[music_list.len()-1:music_list.len()]\n\
    \    music_list = music_list[music_list.len()-1:music_list.len()]\n    music_list\
    \ = music_list[music_list.len()-1:music_list.len()]\n    music_list = music_list[music_list.len()-1:music_list.len()]\n\
    \    music_list = music_list[music_list.len()-1:music_list.len()]\n    music_list\
    \ = music_list[music_list.len()-1:music_list.len()]\n    music_list = music_list[music_list.len()-1:music_list.len()]\n\
    \    music_list = music_list[music_list.len()-1:music_list.len()]\n    music_list\
    \ = music_list[music_list.len()-1:music_list.len()]\n    music_list = music_list[music_list.len()-1:music_list.len()]\n\
    \    music_list = music_list[music_list.len()-1:music_list.len()]\n    music_list\
    \ = music_list[music_list.len()-1:music_list.len()]\n    music_list = music_list[music_list.len()-1:music_list.len()]\n\
    \nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpfnnvqv3l.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpfnnvqv3l.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpfnnvqv3l.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find(\"|\"\
    ) + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 : music_string.find(\"|\", music_string.find(\"\
    |\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 : music_string.find(\"|\", music_string.find(\"\
    |\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t\
    @test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") ==\
    \ [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpm170bgq0.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpm170bgq0.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpm170bgq0.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : string(music_string).end]\n    music_\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpf6g_fuka.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpf6g_fuka.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpf6g_fuka.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0ka1fxmf.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp0ka1fxmf.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp0ka1fxmf.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_notes = music_string.split(\"|\")\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpztg7ojke.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpztg7ojke.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpztg7ojke.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmprphy_4en.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmprphy_4en.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmprphy_4en.jl:1\n"
  exit_code: 1
  status: Exception
