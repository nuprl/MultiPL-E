name: HumanEval_17_parse_music
language: julia
results:
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : music_string.index(\"|\", music_string.index(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"o\") + 1 : music_string.index(\"o\", music_string.index(\"\
    o\") + 1)]\n    music_string = music_string[music_string.index(\"|\") + 1 : music_string.index(\"\
    |\", music_string.index(\"|\") + 1)]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 : music_string.index(\"o\", music_string.index(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"|\") + 1 : music_string.index(\"|\", music_string.index(\"\
    |\") + 1)]\n    music_string = music_string[music_string.index(\"o\") + 1 : music_string.index(\"\
    o\", music_string.index(\"o\") + 1)]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : music_string.index(\"|\", music_string.index(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"o\") + 1 : music_string.index(\"o\", music_string.index(\"\
    o\") + 1)]\n    music_string = music_string[music_string.index(\"|\") + 1 : music_string.index(\"\
    |\", music_string.index(\"|\") + 1)]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 : music_string.index(\"o\", music_string.index(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"|\") + 1 : music_string.index(\"|\", music_string.index(\"\
    |\") + 1)]\n    music_string = music_string[music_string.index(\"o\") + 1 : music_string.index(\"\
    o\", music_string.index(\"o\") + 1)]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : music_string.index(\"|\", music_string.index(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"o\") + 1 : music_string.index(\"o\", music_string.index(\"\
    o\") + 1)]\n    music_string = music_string[music_string.index(\"|\") + 1 : music_string.index(\"\
    |\", music_string.\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3sbdygt6.jl:30\nin expression starting at\
    \ /tmp/tmp3sbdygt6.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpnozo49u6.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpnozo49u6.jl:1\n\
    in expression starting at /tmp/tmpnozo49u6.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip()\n    music_string = music_string.strip(\"\\n\")\n   \
    \ music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpr7smbtwa.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpr7smbtwa.jl:1\n\
    in expression starting at /tmp/tmpr7smbtwa.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find(\"|\"\
    ) + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 : music_string.find(\"|\", music_string.find(\"\
    |\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 : music_string.find(\"|\", music_string.find(\"\
    |\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t\
    @test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") ==\
    \ [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppc0pmlz6.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppc0pmlz6.jl:1\n\
    in expression starting at /tmp/tmppc0pmlz6.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.findFirst(\"\
    \ \")]\n    music_string = music_string[music_string.findFirst(\" \")]\n    music_string\
    \ = music_string[music_string.findFirst(\" \")]\n    music_string = music_string[music_string.findFirst(\"\
    \ \")]\n    music_string = music_string[music_string.findFirst(\" \")]\n    music_string\
    \ = music_string[music_string.findFirst(\" \")]\n    music_string = music_string[music_string.findFirst(\"\
    \ \")]\n    music_string = music_string[music_string.findFirst(\" \")]\n    music_string\
    \ = music_string[music_string.findFirst(\" \")]\n    music_string = music_string[music_string.findFirst(\"\
    \ \")]\n    music_string = music_string[music_string.findFirst(\" \")]\n    music_string\
    \ = music_string[music_string.findFirst(\" \")]\n    music_string = music_string[music_string.findFirst(\"\
    \ \")]\n    music_string = music_string[music_string.findFirst(\" \")]\n    music_string\
    \ = music_string[music_string.findFirst(\" \")]\n    music_string = music_string[music_string.findFirst(\"\
    \ \")]\n    music_string = music_string[music_string.findFirst(\" \")]\n    music_string\
    \ = music_string[music_string.findFirst(\" \")]\n    music_string = music_string[music_string.findFirst(\"\
    \ \")]\n    music_string = music_string[music_string.findFirst(\" \")]\n    music_string\
    \ = music_string[music_string.findFirst(\" \")]\n    music_string = music_string[music_string.findFirst(\"\
    \ \")]\n    music_string = music_string[music_string.findFirst(\" \")]\n    music_string\
    \ = music_string[music_string.findFirst(\" \")]\n    music_string = music_string[music_string.findFirst(\"\
    \ \")]\n    music_string = music_string[music_string.findFirst(\" \")]\n    music_string\
    \ = music_string[music_string.findFirst(\" \")]\n    music_string = music_string[music_string.findFirst(\"\
    \ \")]\n    music_string = music_string[music_string.findFirst(\" \")]\n    music_string\
    \ = music_string[music_\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9t1o1tu1.jl:1\nin expression starting at /tmp/tmp9t1o1tu1.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find('|'):]\n\
    \    music_string = music_string[music_string.find('o'):]\n    music_string =\
    \ music_string[music_string.find('|'):]\n    music_string = music_string[music_string.find('o'):]\n\
    \    music_string = music_string[music_string.find('|'):]\n    music_string =\
    \ music_string[music_string.find('o'):]\n    music_string = music_string[music_string.find('|'):]\n\
    \    music_string = music_string[music_string.find('o'):]\n    music_string =\
    \ music_string[music_string.find('|'):]\n    music_string = music_string[music_string.find('o'):]\n\
    \    music_string = music_string[music_string.find('|'):]\n    music_string =\
    \ music_string[music_string.find('o'):]\n    music_string = music_string[music_string.find('|'):]\n\
    \    music_string = music_string[music_string.find('o'):]\n    music_string =\
    \ music_string[music_string.find('|'):]\n    music_string = music_string[music_string.find('o'):]\n\
    \    music_string = music_string[music_string.find('|'):]\n    music_string =\
    \ music_string[music_string.find('o'):]\n    music_string = music_string[music_string.find('|'):]\n\
    \    music_string = music_string[music_string.find('o'):]\n    music_string =\
    \ music_string[music_string.find('|'):]\n    music_string = music_string[music_string.find('o'):]\n\
    \    music_string = music_string[music_string.find('|'):]\n    music_string =\
    \ music_string[music_string.find('o'):]\n    music_string = music_string[music_string.find('|'):]\n\
    \    music_string = music_string[music_string.find('o'):]\n    music_string =\
    \ music_string[music_string.find('|'):]\n    music_string = music_string[music_string.find('o'):]\n\
    \    music_string = music_string[music_string.find('|'):]\n    music_string =\
    \ music_string[music_string.find('o'):]\n    music_string = music_string[music_string.find('|'):]\n\
    \    music_string = music_string\nusing Test\n\n@testset begin\n\ncandidate =\
    \ parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"music_string.find('|'):\"\
    \ range expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpiaed086b.jl:15\n\
    in expression starting at /tmp/tmpiaed086b.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2bzc2szy.jl:1\nin expression starting at /tmp/tmp2bzc2szy.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 : music_string.findfirst(\"o\")]\n    music_string = music_string[1 :\
    \ music_string.findfirst(\"o\")]\n    music_string = music_string[1 : music_string.findfirst(\"\
    |\")]\n    music_string = music_string[1 : music_string.findfirst(\"o\")]\n  \
    \  music_string = music_string[1 : music_string.findfirst(\"|\")]\n    music_string\
    \ = music_string[1 : music_string.findfirst(\"o\")]\n    music_string = music_string[1\
    \ : music_string.findfirst(\"|\")]\n    music_string = music_string[1 : music_string.findfirst(\"\
    o\")]\n    music_string = music_string[1 : music_string.findfirst(\"|\")]\n  \
    \  music_string = music_string[1 : music_string.findfirst(\"o\")]\n    music_string\
    \ = music_string[1 : music_string.findfirst(\"|\")]\n    music_string = music_string[1\
    \ : music_string.findfirst(\"o\")]\n    music_string = music_string[1 : music_string.findfirst(\"\
    |\")]\n    music_string = music_string[1 : music_string.findfirst(\"o\")]\n  \
    \  music_string = music_string[1 : music_string.findfirst(\"|\")]\n    music_string\
    \ = music_string[1 : music_string.findfirst(\"o\")]\n    music_string = music_string[1\
    \ : music_string.findfirst(\"|\")]\n    music_string = music_string[1 : music_string.findfirst(\"\
    o\")]\n    music_string = music_string[1 : music_string.findfirst(\"|\")]\n  \
    \  music_string = music_string[1 : music_string.findfirst(\"o\")]\n    music_string\
    \ = music_string[1 : music_string.findfirst(\"|\")]\n    music_string = music_string[1\
    \ : music_string.findfirst(\"o\")]\n    music_string = music_string[1 : music_string.findfirst(\"\
    |\")]\n    music_string = music_string[1 : music_string.findfirst(\"o\")]\n  \
    \  music_string = music_string[1 : music_string.findfirst(\"|\")]\n    music_string\
    \ = music_string[1 : music_string.findfirst(\"o\")]\n    music_string = music_string[1\
    \ : music_string.findfirst(\"|\")]\n    music_string = music_string[\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn4gokmrv.jl:1\nin expression starting at /tmp/tmpn4gokmrv.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find(\"|\"\
    ) + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : string(music_string).end]\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpvm0n6wbk.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvm0n6wbk.jl:1\n\
    in expression starting at /tmp/tmpvm0n6wbk.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+music_string.index(\"|\")+1]\n    music_string = music_string[music_string.index(\"\
    |\"):music_string.index(\"|\")+music_string.index(\"|\")+2]\n    music_string\
    \ = music_string[music_string.index(\"|\"):music_string.index(\"|\")+music_string.index(\"\
    |\")+3]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+music_string.index(\"|\")+4]\n    music_string = music_string[music_string.index(\"\
    |\"):music_string.index(\"|\")+music_string.index(\"|\")+5]\n    music_string\
    \ = music_string[music_string.index(\"|\"):music_string.index(\"|\")+music_string.index(\"\
    |\")+6]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+music_string.index(\"|\")+7]\n    music_string = music_string[music_string.index(\"\
    |\"):music_string.index(\"|\")+music_string.index(\"|\")+8]\n    music_string\
    \ = music_string[music_string.index(\"|\"):music_string.index(\"|\")+music_string.index(\"\
    |\")+9]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+music_string.index(\"|\")+10]\n    music_string = music_string[music_string.index(\"\
    |\"):music_string.index(\"|\")+music_string.index(\"|\")+11]\n    music_string\
    \ = music_string[music_string.index(\"|\"):music_string.index(\"|\")+music_string.index(\"\
    |\")+12]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+music_string.index(\"|\")+13]\n    music_string = music_string[music_string.index(\"\
    |\"):music_string.index(\"|\")+music_string.index(\"|\")+14]\n    music_string\
    \ = music_string[music_string.index(\"|\"):music_string.index(\"|\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"music_string.index(\"\
    |\"):\" range expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp09xizdoc.jl:15\n\
    in expression starting at /tmp/tmp09xizdoc.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\") + 1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\") + 1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\") + 1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\") + 1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\") + 1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\") + 1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\") + 1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\") + 1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\") + 1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\") + 1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\") + 1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\") + 1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\") + 1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\") + 1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\") + 1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\") + 1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\") + 1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\") + 1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\") + 1]\n    music_string = music_string[music_string.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"music_string.index(\"\
    |\"):\" range expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbix3jl_m.jl:15\n\
    in expression starting at /tmp/tmpbix3jl_m.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp1j0fk65l.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1j0fk65l.jl:1\n\
    in expression starting at /tmp/tmp1j0fk65l.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpfg_c0fwf.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfg_c0fwf.jl:1\n\
    in expression starting at /tmp/tmpfg_c0fwf.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string[1:end-1]\n    music_string = music_string[music_string != \"\
    o\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \".\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \".\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \".\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \".\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \".\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \".\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \".\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \".\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \".\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \".\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \".\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \".\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \".\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \".\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \".\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \".\"]\n    music_string = music_\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpk9leex3x.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk9leex3x.jl:1\n\
    in expression starting at /tmp/tmpk9leex3x.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find('|'):]\n\
    \    music_string = music_string[music_string.find('o'):]\n    music_string =\
    \ music_string[music_string.find('|'):]\n    music_string = music_string[music_string.find('o'):]\n\
    \    music_string = music_string[music_string.find('|'):]\n    music_string =\
    \ music_string[music_string.find('o'):]\n    music_string = music_string[music_string.find('|'):]\n\
    \    music_string = music_string[music_string.find('o'):]\n    music_string =\
    \ music_string[music_string.find('|'):]\n    music_string = music_string[music_string.find('o'):]\n\
    \    music_string = music_string[music_string.find('|'):]\n    music_string =\
    \ music_string[music_string.find('o'):]\n    music_string = music_string[music_string.find('|'):]\n\
    \    music_string = music_string[music_string.find('o'):]\n    music_string =\
    \ music_string[music_string.find('|'):]\n    music_string = music_string[music_string.find('o'):]\n\
    \    music_string = music_string[music_string.find('|'):]\n    music_string =\
    \ music_string[music_string.find('o'):]\n    music_string = music_string[music_string.find('|'):]\n\
    \    music_string = music_string[music_string.find('o'):]\n    music_string =\
    \ music_string[music_string.find('|'):]\n    music_string = music_string[music_string.find('o'):]\n\
    \    music_string = music_string[music_string.find('|'):]\n    music_string =\
    \ music_string[music_string.find('o'):]\n    music_string = music_string[music_string.find('|'):]\n\
    \    music_string = music_string[music_string.find('o'):]\n    music_string =\
    \ music_string[music_string.find('|'):]\n    music_string = music_string[music_string.find('o'):]\n\
    \    music_string = music_string[music_string.find('|'):]\n    music_string =\
    \ music_string[music_string.find('o'):]\n    music_string = music_string[music_string.find('|'):]\n\
    \    music_string = music_string\nusing Test\n\n@testset begin\n\ncandidate =\
    \ parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"music_string.find('|'):\"\
    \ range expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsdi1db3v.jl:15\n\
    in expression starting at /tmp/tmpsdi1db3v.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_list = music_string.split(\" \")\n    music_list[1]\
    \ = music_list[1].strip\n    music_list[2] = music_list[2].strip\n    music_list[3]\
    \ = music_list[3].strip\n    music_list[4] = music_list[4].strip\n    music_list[5]\
    \ = music_list[5].strip\n    music_list[6] = music_list[6].strip\n    music_list[7]\
    \ = music_list[7].strip\n    music_list[8] = music_list[8].strip\n    music_list[9]\
    \ = music_list[9].strip\n    music_list[10] = music_list[10].strip\n    music_list[11]\
    \ = music_list[11].strip\n    music_list[12] = music_list[12].strip\n    music_list[13]\
    \ = music_list[13].strip\n    music_list[14] = music_list[14].strip\n    music_list[15]\
    \ = music_list[15].strip\n    music_list[16] = music_list[16].strip\n    music_list[17]\
    \ = music_list[17].strip\n    music_list[18] = music_list[18].strip\n    music_list[19]\
    \ = music_list[19].strip\n    music_list[20] = music_list[20].strip\n    music_list[21]\
    \ = music_list[21].strip\n    music_list[22] = music_list[22].strip\n    music_list[23]\
    \ = music_list[23].strip\n    music_list[24] = music_list[24].strip\n    music_list[25]\
    \ = music_list[25].strip\n    music_list[26] = music_list[26].strip\n    music_list[27]\
    \ = music_list[27].strip\n    music_list[28] = music_list[28].strip\n    music_list[29]\
    \ = music_list[29].strip\n    music_list[30] = music_list[30].strip\n    music_list[31]\
    \ = music_list[31].strip\n    music_list[32] = music_list[32].strip\n    music_list[33]\
    \ = music_list[33].strip\n    music_list[34] = music_list[34].strip\n    music_list[35]\
    \ = music_list[35].strip\n    music_list[36] = music_list[36].strip\n    music_list[37]\
    \ = music_list[37].strip\n    music_list[38] = music_list[38].strip\n    music_list[39\n\
    using Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdo592ola.jl:1\nin expression starting at /tmp/tmpdo592ola.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3jj8a7gb.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3jj8a7gb.jl:1\n\
    in expression starting at /tmp/tmp3jj8a7gb.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyi3ploql.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyi3ploql.jl:1\n\
    in expression starting at /tmp/tmpyi3ploql.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppbawk_t3.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppbawk_t3.jl:1\n\
    in expression starting at /tmp/tmppbawk_t3.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find(\"|\"\
    ) + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 : music_string.find(\"|\", music_string.find(\"\
    |\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 : music_string.find(\"|\", music_string.find(\"\
    |\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t\
    @test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") ==\
    \ [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpk_177dxj.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk_177dxj.jl:1\n\
    in expression starting at /tmp/tmpk_177dxj.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_notes = music_string.split(\"|\")\n    music_notes\
    \ = music_notes[music_notes.len()/2:end]\n    music_notes = music_notes.map(x\
    \ => x.strip)\n    music_notes = music_notes.map(x => x.split(\" \"))\n    music_notes\
    \ = music_notes.map(x => x.map(x => x.toInt))\n    music_notes = music_notes.map(x\
    \ => x.map(x => x*4))\n    music_notes = music_notes.map(x => x.map(x => x*2))\n\
    \    music_notes = music_notes.map(x => x.map(x => x))\n    music_notes = music_notes.map(x\
    \ => x.map(x => x*4))\n    music_notes = music_notes.map(x => x.map(x => x*2))\n\
    \    music_notes = music_notes.map(x => x.map(x => x))\n    music_notes = music_notes.map(x\
    \ => x.map(x => x*4))\n    music_notes = music_notes.map(x => x.map(x => x*2))\n\
    \    music_notes = music_notes.map(x => x.map(x => x))\n    music_notes = music_notes.map(x\
    \ => x.map(x => x*4))\n    music_notes = music_notes.map(x => x.map(x => x*2))\n\
    \    music_notes = music_notes.map(x => x.map(x => x))\n    music_notes = music_notes.map(x\
    \ => x.map(x => x*4))\n    music_notes = music_notes.map(x => x.map(x => x*2))\n\
    \    music_notes = music_notes.map(x => x.map(x => x))\n    music_notes = music_notes.map(x\
    \ => x.map(x => x*4))\n    music_notes = music_notes.map(x => x.map(x => x*2))\n\
    \    music_notes = music_notes.map(x => x.map(x => x))\n    music_notes = music_notes.map(x\
    \ => x.map(x => x*4))\n    music_notes = music_notes.map(x => x.map(x => x*2))\n\
    \    music_notes = music_notes.map(x => x.map(x => x))\n    music_notes = music_notes.map(x\
    \ => x.map(x => x*4))\n    music_notes = music_\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp4lkr00e9.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4lkr00e9.jl:1\n\
    in expression starting at /tmp/tmp4lkr00e9.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 : music_string.findfirst(\"o\")]\n    music_string = music_string[1 :\
    \ music_string.findfirst(\"o\")]\n    music_string = music_string[1 : music_string.findfirst(\"\
    |\")]\n    music_string = music_string[1 : music_string.findfirst(\"o\")]\n  \
    \  music_string = music_string[1 : music_string.findfirst(\"|\")]\n    music_string\
    \ = music_string[1 : music_string.findfirst(\"o\")]\n    music_string = music_string[1\
    \ : music_string.findfirst(\"|\")]\n    music_string = music_string[1 : music_string.findfirst(\"\
    o\")]\n    music_string = music_string[1 : music_string.findfirst(\"|\")]\n  \
    \  music_string = music_string[1 : music_string.findfirst(\"o\")]\n    music_string\
    \ = music_string[1 : music_string.findfirst(\"|\")]\n    music_string = music_string[1\
    \ : music_string.findfirst(\"o\")]\n    music_string = music_string[1 : music_string.findfirst(\"\
    |\")]\n    music_string = music_string[1 : music_string.findfirst(\"o\")]\n  \
    \  music_string = music_string[1 : music_string.findfirst(\"|\")]\n    music_string\
    \ = music_string[1 : music_string.findfirst(\"o\")]\n    music_string = music_string[1\
    \ : music_string.findfirst(\"|\")]\n    music_string = music_string[1 : music_string.findfirst(\"\
    o\")]\n    music_string = music_string[1 : music_string.findfirst(\"|\")]\n  \
    \  music_string = music_string[1 : music_string.findfirst(\"o\")]\n    music_string\
    \ = music_string[1 : music_string.findfirst(\"|\")]\n    music_string = music_string[1\
    \ : music_string.findfirst(\"o\")]\n    music_string = music_string[1 : music_string.findfirst(\"\
    |\")]\n    music_string = music_string[1 : music_string.findfirst(\"o\")]\n  \
    \  music_string = music_string[1 : music_string.findfirst(\"|\")]\n    music_string\
    \ = music_string[1 : music_string.findfirst(\"o\")]\n    music_string = music_string[1\
    \ : music_string.findfirst(\"|\")]\n    music_string = music_string[\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt_j1h_yn.jl:1\nin expression starting at /tmp/tmpt_j1h_yn.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpybhr_zyh.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpybhr_zyh.jl:1\n\
    in expression starting at /tmp/tmpybhr_zyh.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvox7q6d7.jl:64\nin expression starting at\
    \ /tmp/tmpvox7q6d7.jl:64\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : music_string.index(\"|\", music_string.index(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"o\") + 1 : music_string.index(\"o\", music_string.index(\"\
    o\") + 1)]\n    music_string = music_string[music_string.index(\"|\") + 1 : music_string.index(\"\
    |\", music_string.index(\"|\") + 1)]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 : music_string.index(\"o\", music_string.index(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"|\") + 1 : music_string.index(\"|\", music_string.index(\"\
    |\") + 1)]\n    music_string = music_string[music_string.index(\"o\") + 1 : music_string.index(\"\
    o\", music_string.index(\"o\") + 1)]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : music_string.index(\"|\", music_string.index(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"o\") + 1 : music_string.index(\"o\", music_string.index(\"\
    o\") + 1)]\n    music_string = music_string[music_string.index(\"|\") + 1 : music_string.index(\"\
    |\", music_string.index(\"|\") + 1)]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 : music_string.index(\"o\", music_string.index(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"|\") + 1 : music_string.index(\"|\", music_string.index(\"\
    |\") + 1)]\n    music_string = music_string[music_string.index(\"o\") + 1 : music_string.index(\"\
    o\", music_string.index(\"o\") + 1)]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : music_string.index(\"|\", music_string.index(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"o\") + 1 : music_string.index(\"o\", music_string.index(\"\
    o\") + 1)]\n    music_string = music_string[music_string.index(\"|\") + 1 : music_string.index(\"\
    |\", music_string.\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvz67nv9r.jl:30\nin expression starting at\
    \ /tmp/tmpvz67nv9r.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_list = music_string.split(\" \")\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpl54y2djf.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpl54y2djf.jl:1\n\
    in expression starting at /tmp/tmpl54y2djf.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find('|'):]\n\
    \    music_string = music_string[music_string.find('o'):]\n    music_string =\
    \ music_string[music_string.find('|'):]\n    music_string = music_string[music_string.find('o'):]\n\
    \    music_string = music_string[music_string.find('|'):]\n    music_string =\
    \ music_string[music_string.find('o'):]\n    music_string = music_string[music_string.find('|'):]\n\
    \    music_string = music_string[music_string.find('o'):]\n    music_string =\
    \ music_string[music_string.find('|'):]\n    music_string = music_string[music_string.find('o'):]\n\
    \    music_string = music_string[music_string.find('|'):]\n    music_string =\
    \ music_string[music_string.find('o'):]\n    music_string = music_string[music_string.find('|'):]\n\
    \    music_string = music_string[music_string.find('o'):]\n    music_string =\
    \ music_string[music_string.find('|'):]\n    music_string = music_string[music_string.find('o'):]\n\
    \    music_string = music_string[music_string.find('|'):]\n    music_string =\
    \ music_string[music_string.find('o'):]\n    music_string = music_string[music_string.find('|'):]\n\
    \    music_string = music_string[music_string.find('o'):]\n    music_string =\
    \ music_string[music_string.find('|'):]\n    music_string = music_string[music_string.find('o'):]\n\
    \    music_string = music_string[music_string.find('|'):]\n    music_string =\
    \ music_string[music_string.find('o'):]\n    music_string = music_string[music_string.find('|'):]\n\
    \    music_string = music_string[music_string.find('o'):]\n    music_string =\
    \ music_string[music_string.find('|'):]\n    music_string = music_string[music_string.find('o'):]\n\
    \    music_string = music_string[music_string.find('|'):]\n    music_string =\
    \ music_string[music_string.find('o'):]\n    music_string = music_string[music_string.find('|'):]\n\
    \    music_string = music_string\nusing Test\n\n@testset begin\n\ncandidate =\
    \ parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"music_string.find('|'):\"\
    \ range expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjhbt6g2v.jl:15\n\
    in expression starting at /tmp/tmpjhbt6g2v.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_notes = music_string.split(\"|\")\n    music_notes\
    \ = music_notes[music_notes.len()/2:end]\n    music_notes = music_notes.map(x\
    \ -> x.strip)\n    music_notes = music_notes.map(x -> x.split(\" \"))\n    music_notes\
    \ = music_notes.map(x -> x[1])\n    music_notes = music_notes.map(x -> x.split(\"\
    o\"))\n    music_notes = music_notes.map(x -> x.map(x -> x.toInt64))\n    music_notes\
    \ = music_notes.map(x -> x.map(x -> x.sum))\n    music_notes = music_notes.map(x\
    \ -> x.map(x -> x.max))\n    music_notes = music_notes.map(x -> x.map(x -> x.min))\n\
    \    music_notes = music_notes.map(x -> x.map(x -> x.mean))\n    music_notes =\
    \ music_notes.map(x -> x.map(x -> x.std))\n    music_notes = music_notes.map(x\
    \ -> x.map(x -> x.var))\n    music_notes = music_notes.map(x -> x.map(x -> x.max))\n\
    \    music_notes = music_notes.map(x -> x.map(x -> x.min))\n    music_notes =\
    \ music_notes.map(x -> x.map(x -> x.mean))\n    music_notes = music_notes.map(x\
    \ -> x.map(x -> x.std))\n    music_notes = music_notes.map(x -> x.map(x -> x.var))\n\
    \    music_notes = music_notes.map(x -> x.map(x -> x.max))\n    music_notes =\
    \ music_notes.map(x -> x.map(x -> x.min))\n    music_notes = music_notes.map(x\
    \ -> x.map(x -> x.mean))\n    music_notes = music_notes.map(x -> x.map(x -> x.std))\n\
    \    music_notes = music_notes.map(x -> x.map(x -> x.var))\n    music_notes =\
    \ music_notes.map(x -> x.map(x -> x.max))\n    music_notes = music_notes.map(x\
    \ -> x.map(x -> x.min))\n    music_notes = music_notes.map(x -> x.map(x -> x.mean))\n\
    \    music_notes = musi\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpq5r1iqhe.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpq5r1iqhe.jl:1\n\
    in expression starting at /tmp/tmpq5r1iqhe.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\\n\")\n    music_string = music_string.strip(\"\
    \\r\")\n    music_string = music_string.strip(\"\\t\")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\" \")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\\n\")\n    music_string = music_string.strip(\"\
    \\r\")\n    music_string = music_string.strip(\"\\t\")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\" \")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\\n\")\n    music_string = music_string.strip(\"\
    \\r\")\n    music_string = music_string.strip(\"\\t\")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\" \")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\\n\")\n    music_string = music_string.strip(\"\
    \\r\")\n    music_string = music_string.strip(\"\\t\")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\" \")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = \nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmprce6c2cu.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprce6c2cu.jl:1\n\
    in expression starting at /tmp/tmprce6c2cu.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string[1:end-1]\n    music_string = music_string[music_string != '.']\n\
    \    music_string = music_string[music_string != '|']\n    music_string = music_string[music_string\
    \ != 'o']\n    music_string = music_string[music_string != '|']\n    music_string\
    \ = music_string[music_string != '|']\n    music_string = music_string[music_string\
    \ != '|']\n    music_string = music_string[music_string != '|']\n    music_string\
    \ = music_string[music_string != '|']\n    music_string = music_string[music_string\
    \ != '|']\n    music_string = music_string[music_string != '|']\n    music_string\
    \ = music_string[music_string != '|']\n    music_string = music_string[music_string\
    \ != '|']\n    music_string = music_string[music_string != '|']\n    music_string\
    \ = music_string[music_string != '|']\n    music_string = music_string[music_string\
    \ != '|']\n    music_string = music_string[music_string != '|']\n    music_string\
    \ = music_string[music_string != '|']\n    music_string = music_string[music_string\
    \ != '|']\n    music_string = music_string[music_string != '|']\n    music_string\
    \ = music_string[music_string != '|']\n    music_string = music_string[music_string\
    \ != '|']\n    music_string = music_string[music_string != '|']\n    music_string\
    \ = music_string[music_string != '|']\n    music_string = music_string[music_string\
    \ != '|']\n    music_string = music_string[music_string != '|']\n    music_string\
    \ = music_string[music_string != '|']\n    music_string = music_string[music_string\
    \ != '|']\n    music_string = music_string[music_string != '|']\n    music_string\
    \ = music_string[music_string != '|']\n    music_string = music_string[music_string\
    \ != '|']\n    music_string = music_string[music_string != '|']\n    music_string\
    \ = music_string[music_string != '|']\n    music_string = music_string[music_string\
    \ != '|']\n    music_string = music_\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpb88yt78l.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpb88yt78l.jl:1\n\
    in expression starting at /tmp/tmpb88yt78l.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 : music_string.findfirst(\"o\")]\n    music_string = music_string[1 :\
    \ music_string.findfirst(\"o\")]\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 : end]\n    music_string = music_string[1 : end]\n    music_string =\
    \ music_string[music_string.findfirst(\"|\") + 1 : end]\n    music_string = music_string[1\
    \ : end]\n    music_string = music_string[music_string.findfirst(\"|\") + 1 :\
    \ end]\n    music_string = music_string[1 : end]\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 : end]\n    music_string = music_string[1 : end]\n    music_string =\
    \ music_string[music_string.findfirst(\"|\") + 1 : end]\n    music_string = music_string[1\
    \ : end]\n    music_string = music_string[music_string.findfirst(\"|\") + 1 :\
    \ end]\n    music_string = music_string[1 : end]\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 : end]\n    music_string = music_string[1 : end]\n    music_string =\
    \ music_string[music_string.findfirst(\"|\") + 1 : end]\n    music_string = music_string[1\
    \ : end]\n    music_string = music_string[music_string.findfirst(\"|\") + 1 :\
    \ end]\n    music_string = music_string[1 : end]\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 : end]\n    music_string = music_string[1 : end]\n    music_string =\
    \ music_string[music_string.findfirst(\"|\") + 1 : end]\n    music_string = music_string[1\
    \ : end]\n    music_string = music_string[music_string.findfirst(\"|\") + 1 :\
    \ end]\n    music_string = music_string[1 : end]\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 : end]\n    music_string = music_string[1 : end]\n    music_string =\
    \ music_string[music_string.findfirst(\"|\") + 1 : end]\n    music_string = music_string[1\
    \ : end]\n    music_string = music_string[music_string.findfirst(\"|\") + 1 :\
    \ end]\n    music_string = \nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3av7dvlh.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3av7dvlh.jl:1\n\
    in expression starting at /tmp/tmp3av7dvlh.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpcg_0jqnj.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcg_0jqnj.jl:1\n\
    in expression starting at /tmp/tmpcg_0jqnj.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphmss9hy6.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphmss9hy6.jl:1\n\
    in expression starting at /tmp/tmphmss9hy6.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string[1:end-1]\n    music_string = music_string[music_string != \"\
    o\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \".\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \".\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \".\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \".\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \".\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \".\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \".\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \".\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \".\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \".\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \".\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \".\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \".\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \".\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \".\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \".\"]\n    music_string = music_\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphfguelf1.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphfguelf1.jl:1\n\
    in expression starting at /tmp/tmphfguelf1.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip()\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\".\") + 1 : music_string.find(\"\
    o\", music_string.find(\".\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\".\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\".\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\".\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\".\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\".\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\".\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\".\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\".\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.\n\
    using Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiqw6ifvd.jl:1\nin expression starting at /tmp/tmpiqw6ifvd.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find(\"|\"\
    ) + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"|\", music_string.find(\"\
    |\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : \nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6_fjpiju.jl:36\nin expression starting at\
    \ /tmp/tmp6_fjpiju.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"music_string.index(\"\
    |\"):\" range expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjgpshhp3.jl:15\n\
    in expression starting at /tmp/tmpjgpshhp3.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbcy0_fxt.jl:1\nin expression starting at /tmp/tmpbcy0_fxt.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.findFirst(\"\
    \ \")]\n    music_string = music_string[music_string.findFirst(\"|\")]\n    music_string\
    \ = music_string[music_string.findFirst(\"o\")]\n    music_string = music_string[music_string.findFirst(\"\
    .|\")]\n    music_string = music_string[music_string.findFirst(\"o|\")]\n    music_string\
    \ = music_string[music_string.findFirst(\"o|\")]\n    music_string = music_string[music_string.findFirst(\"\
    o|\")]\n    music_string = music_string[music_string.findFirst(\"o|\")]\n    music_string\
    \ = music_string[music_string.findFirst(\"o|\")]\n    music_string = music_string[music_string.findFirst(\"\
    o|\")]\n    music_string = music_string[music_string.findFirst(\"o|\")]\n    music_string\
    \ = music_string[music_string.findFirst(\"o|\")]\n    music_string = music_string[music_string.findFirst(\"\
    o|\")]\n    music_string = music_string[music_string.findFirst(\"o|\")]\n    music_string\
    \ = music_string[music_string.findFirst(\"o|\")]\n    music_string = music_string[music_string.findFirst(\"\
    o|\")]\n    music_string = music_string[music_string.findFirst(\"o|\")]\n    music_string\
    \ = music_string[music_string.findFirst(\"o|\")]\n    music_string = music_string[music_string.findFirst(\"\
    o|\")]\n    music_string = music_string[music_string.findFirst(\"o|\")]\n    music_string\
    \ = music_string[music_string.findFirst(\"o|\")]\n    music_string = music_string[music_string.findFirst(\"\
    o|\")]\n    music_string = music_string[music_string.findFirst(\"o|\")]\n    music_string\
    \ = music_string[music_string.findFirst(\"o|\")]\n    music_string = music_string[music_string.findFirst(\"\
    o|\")]\n    music_string = music_string[music_string.findFirst(\"o|\")]\n    music_string\
    \ = music_string[music_string.findFirst(\"o|\")]\n    music_string = music_string[music_string.findFirst(\"\
    o|\")]\n    music_\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp4_qd9b3l.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4_qd9b3l.jl:1\n\
    in expression starting at /tmp/tmp4_qd9b3l.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_notes = music_string.split(\"|\")\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes.map(x -> x.strip)\n    music_notes\
    \ = music_notes.map(x -> x.split(\" \"))\n    music_notes = music_notes.map(x\
    \ -> x[1])\n    music_notes = music_notes.map(x -> x.split(\"o\"))\n    music_notes\
    \ = music_notes.map(x -> x.map(x -> x.toInt))\n    music_notes = music_notes.map(x\
    \ -> x.map(x -> x.sum))\n    music_notes = music_notes.map(x -> x.map(x -> x.max))\n\
    \    music_notes = music_notes.map(x -> x.map(x -> x.min))\n    music_notes =\
    \ music_notes.map(x -> x.map(x -> x.product))\n    music_notes = music_notes.map(x\
    \ -> x.map(x -> x.sum))\n    music_notes = music_notes.map(x -> x.map(x -> x.product))\n\
    \    music_notes = music_notes.map(x -> x.map(x -> x.sum))\n    music_notes =\
    \ music_notes.map(x -> x.map(x -> x.product))\n    music_notes = music_notes.map(x\
    \ -> x.map(x -> x.sum))\n    music_notes = music_notes.map(x -> x.map(x -> x.product))\n\
    \    music_notes = music_notes.map(x -> x.map(x -> x.sum))\n    music_notes =\
    \ music_notes.map(x -> x.map(x -> x.product))\n    music_notes = music_notes.map(x\
    \ -> x.map(x -> x.sum))\n    music_notes = music_notes.map(x -> x.map(x -> x.product))\n\
    \    music_notes = music_notes.map(x -> x.map(x -> x.sum))\n    music_notes =\
    \ music_notes.map(x -> x.map(x -> x.product))\n    music_notes = music_notes.map(x\
    \ -> x.map(x -> x.sum))\n    music_notes = music_notes.map(x -> x.map(x -> x.product))\n\
    \    music_notes = music_notes.map(x -> x.map(x -> x.sum))\n    music_notes =\
    \ music_notes.map(x -> x.\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcogjlxa_.jl:42\nin expression starting at\
    \ /tmp/tmpcogjlxa_.jl:42\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpukbrk1kt.jl:1\nin expression starting at /tmp/tmpukbrk1kt.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip()\n    music_string = music_string.strip(\"\\n\")\n   \
    \ music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpzme_ysvp.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzme_ysvp.jl:1\n\
    in expression starting at /tmp/tmpzme_ysvp.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpsgtips2p.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsgtips2p.jl:1\n\
    in expression starting at /tmp/tmpsgtips2p.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjnc5y4wc.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjnc5y4wc.jl:1\n\
    in expression starting at /tmp/tmpjnc5y4wc.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsqnrfzl7.jl:1\nin expression starting at /tmp/tmpsqnrfzl7.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : music_string.index(\"|\") + music_string.index(\"|\") + 1]\n    music_string\
    \ = music_string[music_string.index(\"|\") + 1 : music_string.index(\"|\") + music_string.index(\"\
    |\") + 1]\n    music_string = music_string[music_string.index(\"|\") + 1 : music_string.index(\"\
    |\") + music_string.index(\"|\") + 1]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : music_string.index(\"|\") + music_string.index(\"|\") + 1]\n    music_string\
    \ = music_string[music_string.index(\"|\") + 1 : music_string.index(\"|\") + music_string.index(\"\
    |\") + 1]\n    music_string = music_string[music_string.index(\"|\") + 1 : music_string.index(\"\
    |\") + music_string.index(\"|\") + 1]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : music_string.index(\"|\") + music_string.index(\"|\") + 1]\n    music_string\
    \ = music_string[music_string.index(\"|\") + 1 : music_string.index(\"|\") + music_string.index(\"\
    |\") + 1]\n    music_string = music_string[music_string.index(\"|\") + 1 : music_string.index(\"\
    |\") + music_string.index(\"|\") + 1]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : music_string.index(\"|\") + music_string.index(\"|\") + 1]\n    music_string\
    \ = music_string[music_string.index(\"|\") + 1 : music_string.index(\"|\") + music_string.index(\"\
    |\") + 1]\n    music_string = music_string[music_string.index(\"|\") + 1 : music_string.index(\"\
    |\") + music_string.index(\"|\") + 1]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : music_string.index(\"|\") + music_string.index(\"|\") + 1]\n    music_string\
    \ = music_string[music_string.index(\"|\") + 1 : music_string.index(\"|\") + music_string.index(\"\
    |\") + 1]\n    music_string = music_string[music_string.index(\"\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp172nluxv.jl:35\nin expression starting at\
    \ /tmp/tmp172nluxv.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : music_string.index(\"|\", music_string.index(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"|\") + 1 : music_string.index(\"|\", music_string.index(\"\
    |\") + 1)]\n    music_string = music_string[music_string.index(\"|\") + 1 : music_string.index(\"\
    |\", music_string.index(\"|\") + 1)]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : music_string.index(\"|\", music_string.index(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"|\") + 1 : music_string.index(\"|\", music_string.index(\"\
    |\") + 1)]\n    music_string = music_string[music_string.index(\"|\") + 1 : music_string.index(\"\
    |\", music_string.index(\"|\") + 1)]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : music_string.index(\"|\", music_string.index(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"|\") + 1 : music_string.index(\"|\", music_string.index(\"\
    |\") + 1)]\n    music_string = music_string[music_string.index(\"|\") + 1 : music_string.index(\"\
    |\", music_string.index(\"|\") + 1)]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : music_string.index(\"|\", music_string.index(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"|\") + 1 : music_string.index(\"|\", music_string.index(\"\
    |\") + 1)]\n    music_string = music_string[music_string.index(\"|\") + 1 : music_string.index(\"\
    |\", music_string.index(\"|\") + 1)]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : music_string.index(\"|\", music_string.index(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"|\") + 1 : music_string.index(\"|\", music_string.index(\"\
    |\") + 1)]\n    music_string = music_string[music_string.index(\"|\") + 1 : music_string.index(\"\
    |\", music_string.\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq_d4geqo.jl:30\nin expression starting at\
    \ /tmp/tmpq_d4geqo.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjpw29sd5.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjpw29sd5.jl:1\n\
    in expression starting at /tmp/tmpjpw29sd5.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpzciit99t.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzciit99t.jl:1\n\
    in expression starting at /tmp/tmpzciit99t.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_notes = music_string.split(\"|\")\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes.map(x => x.strip)\n    music_notes\
    \ = music_notes.map(x => x.split(\" \"))\n    music_notes = music_notes.map(x\
    \ => x.map(x => parse(x)))\n    music_notes = music_notes.map(x => x.map(x =>\
    \ x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x =>\
    \ x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x =>\
    \ x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x =>\
    \ x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x =>\
    \ x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x =>\
    \ x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x =>\
    \ x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x =>\
    \ x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x =>\
    \ x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x =>\
    \ x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x =>\
    \ x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x =>\
    \ x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x =>\
    \ x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x =>\
    \ x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x => x.map(x =>\
    \ x.map(x => x.map(x => x.map(x => x.map(x => x.map(\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpql32ktu9.jl:23\nin expression starting at\
    \ /tmp/tmpql32ktu9.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip()\n    music_string = music_string[music_string.find('|'):]\n\
    \    music_string = music_string[music_string.find('o'):]\n    music_string =\
    \ music_string[music_string.find('|'):]\n    music_string = music_string[music_string.find('o'):]\n\
    \    music_string = music_string[music_string.find('|'):]\n    music_string =\
    \ music_string[music_string.find('o'):]\n    music_string = music_string[music_string.find('|'):]\n\
    \    music_string = music_string[music_string.find('o'):]\n    music_string =\
    \ music_string[music_string.find('|'):]\n    music_string = music_string[music_string.find('o'):]\n\
    \    music_string = music_string[music_string.find('|'):]\n    music_string =\
    \ music_string[music_string.find('o'):]\n    music_string = music_string[music_string.find('|'):]\n\
    \    music_string = music_string[music_string.find('o'):]\n    music_string =\
    \ music_string[music_string.find('|'):]\n    music_string = music_string[music_string.find('o'):]\n\
    \    music_string = music_string[music_string.find('|'):]\n    music_string =\
    \ music_string[music_string.find('o'):]\n    music_string = music_string[music_string.find('|'):]\n\
    \    music_string = music_string[music_string.find('o'):]\n    music_string =\
    \ music_string[music_string.find('|'):]\n    music_string = music_string[music_string.find('o'):]\n\
    \    music_string = music_string[music_string.find('|'):]\n    music_string =\
    \ music_string[music_string.find('o'):]\n    music_string = music_string[music_string.find('|'):]\n\
    \    music_string = music_string[music_string.find('o'):]\n    music_string =\
    \ music_string[music_string.find('|'):]\n    music_string = music_string[music_string.find('o'):]\n\
    \    music_string = music_string[music_string.find('|'):]\n    music_string =\
    \ music_string[music_string.find('o'):]\n    music_string = music_string[music_string.find('|'):]\n\
    \    music_string = music_string\nusing Test\n\n@testset begin\n\ncandidate =\
    \ parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"music_string.find('|'):\"\
    \ range expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpl7z3nrwj.jl:15\n\
    in expression starting at /tmp/tmpl7z3nrwj.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8kfmxznc.jl:1\nin expression starting at /tmp/tmp8kfmxznc.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find(\"|\"\
    ) + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : \nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgv0qn2ca.jl:36\nin expression starting at\
    \ /tmp/tmpgv0qn2ca.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptlzzu3qz.jl:64\nin expression starting at\
    \ /tmp/tmptlzzu3qz.jl:64\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end-1]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end-1]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end-1]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end-1]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end-1]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end-1]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end-1]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end-1]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end-1]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end-1]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end-1]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end-1]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end-1]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end-1]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end-1]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end-1]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end-1]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end-1]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end-1]\n    music_string = music_string[musi\n\
    using Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplby94dad.jl:1\nin expression starting at /tmp/tmplby94dad.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find('|'):]\n\
    \    music_string = music_string[music_string.find('o'):]\n    music_string =\
    \ music_string[music_string.find('|'):]\n    music_string = music_string[music_string.find('o'):]\n\
    \    music_string = music_string[music_string.find('|'):]\n    music_string =\
    \ music_string[music_string.find('o'):]\n    music_string = music_string[music_string.find('|'):]\n\
    \    music_string = music_string[music_string.find('o'):]\n    music_string =\
    \ music_string[music_string.find('|'):]\n    music_string = music_string[music_string.find('o'):]\n\
    \    music_string = music_string[music_string.find('|'):]\n    music_string =\
    \ music_string[music_string.find('o'):]\n    music_string = music_string[music_string.find('|'):]\n\
    \    music_string = music_string[music_string.find('o'):]\n    music_string =\
    \ music_string[music_string.find('|'):]\n    music_string = music_string[music_string.find('o'):]\n\
    \    music_string = music_string[music_string.find('|'):]\n    music_string =\
    \ music_string[music_string.find('o'):]\n    music_string = music_string[music_string.find('|'):]\n\
    \    music_string = music_string[music_string.find('o'):]\n    music_string =\
    \ music_string[music_string.find('|'):]\n    music_string = music_string[music_string.find('o'):]\n\
    \    music_string = music_string[music_string.find('|'):]\n    music_string =\
    \ music_string[music_string.find('o'):]\n    music_string = music_string[music_string.find('|'):]\n\
    \    music_string = music_string[music_string.find('o'):]\n    music_string =\
    \ music_string[music_string.find('|'):]\n    music_string = music_string[music_string.find('o'):]\n\
    \    music_string = music_string[music_string.find('|'):]\n    music_string =\
    \ music_string[music_string.find('o'):]\n    music_string = music_string[music_string.find('|'):]\n\
    \    music_string = music_string\nusing Test\n\n@testset begin\n\ncandidate =\
    \ parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"music_string.find('|'):\"\
    \ range expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpj7yg6xi_.jl:15\n\
    in expression starting at /tmp/tmpj7yg6xi_.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 : music_string.findfirst(\"o\")]\n    music_string = music_string[1 :\
    \ music_string.findfirst(\"o\")]\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 : music_string.findfirst(\"o\")]\n    music_string = music_string[1 :\
    \ music_string.findfirst(\"o\")]\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 : music_string.findfirst(\"o\")]\n    music_string = music_string[1 :\
    \ music_string.findfirst(\"o\")]\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 : music_string.findfirst(\"o\")]\n    music_string = music_string[1 :\
    \ music_string.findfirst(\"o\")]\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 : music_string.findfirst(\"o\")]\n    music_string = music_string[1 :\
    \ music_string.findfirst(\"o\")]\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 : music_string.findfirst(\"o\")]\n    music_string = music_string[1 :\
    \ music_string.findfirst(\"o\")]\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 : music_string.findfirst(\"o\")]\n    music_string = music_string[1 :\
    \ music_string.findfirst(\"o\")]\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 : music_string.findfirst(\"o\")]\n    music_string = music_string[1 :\
    \ music_string.findfirst(\"o\")]\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 : music_string.findfirst(\"o\")]\n    music_string = music_string[1 :\
    \ music_string.findfirst(\"o\")]\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 : music_string.findfirst(\"o\")]\n    music_string = music_string[1 :\
    \ music_string.findfirst(\"o\")]\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 : music_string.findfirst(\"o\")]\n    music_string = music_string[1 :\
    \ music_string.findfirst(\"o\")]\n    music_string = music_string[\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbnlmn_xs.jl:1\nin expression starting at /tmp/tmpbnlmn_xs.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = ''.join(music_string)\n    music_string = music_string.strip()\n    music_string\
    \ = music_string.replace(' ', '')\n    music_string = music_string.replace('|',\
    \ '')\n    music_string = music_string.replace('o', '')\n    music_string = music_string.replace('.',\
    \ '')\n    music_string = music_string.replace(' ', '')\n    music_string = music_string.split(',')\n\
    \    music_string = [int(i) for i in music_string]\n    return music_string\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid empty character literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8utg__jk.jl:14\nin expression starting at\
    \ /tmp/tmp8utg__jk.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6z850nm5.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6z850nm5.jl:1\n\
    in expression starting at /tmp/tmp6z850nm5.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = \"o o| .| o| o| .| .| .| .| o o\"\n    music_string = music_string.split(\"\
    \ \")\n    music_string = [x for x in music_string if x != \"\"]\n    music_string\
    \ = [x for x in music_string if x != \"o\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \".\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \"|\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \"|\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \"|\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \"|\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \"|\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \"|\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \"|\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \"|\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \"|\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \"|\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \"|\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \"|\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \"|\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\")\
    \ == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") ==\
    \ [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2,\
    \ 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpedbgtnlt.jl:53\nin expression starting at\
    \ /tmp/tmpedbgtnlt.jl:53\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.findFirst(\"\
    \ \")]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n \
    \   music_string = music_string[music_string.findFirst(\"|\"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\"|\"):end]\n    music_string = music_string[music_string.findFirst(\"\
    |\"):end]\n    music_string = music_string[music_string.findFirst(\"|\"):end]\n\
    \    music_string = music_string[music_string.findFirst(\"|\"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\"|\"):end]\n    music_string = music_string[music_string.findFirst(\"\
    |\"):end]\n    music_string = music_string[music_string.findFirst(\"|\"):end]\n\
    \    music_string = music_string[music_string.findFirst(\"|\"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\"|\"):end]\n    music_string = music_string[music_string.findFirst(\"\
    |\"):end]\n    music_string = music_string[music_string.findFirst(\"|\"):end]\n\
    \    music_string = music_string[music_string.findFirst(\"|\"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\"|\"):end]\n    music_string = music_string[music_string.findFirst(\"\
    |\"):end]\n    music_string = music_string[music_string.findFirst(\"|\"):end]\n\
    \    music_string = music_string[music_string.findFirst(\"|\"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\"|\"):end]\n    music_string = music_string[music_string.findFirst(\"\
    |\"):end]\n    music_string = music_string[music_string.findFirst(\"|\"):end]\n\
    \    music_string = music_string[music_string.findFirst(\"|\"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\"|\"):end]\n    music_string = music_string[music_string.findFirst(\"\
    |\"):end]\n    music_string = music_string[music_string.findFirst(\"|\"):end]\n\
    \    music_string = music_string[music_string.findFirst(\"|\"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\"|\"):end]\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpq5nxf3s6.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpq5nxf3s6.jl:1\n\
    in expression starting at /tmp/tmpq5nxf3s6.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_list = music_string.split(\" \")\n    music_list2\
    \ = music_list\n    music_list3 = music_list\n    music_list4 = music_list\n \
    \   music_list5 = music_list\n    music_list6 = music_list\n    music_list7 =\
    \ music_list\n    music_list8 = music_list\n    music_list9 = music_list\n   \
    \ music_list10 = music_list\n    music_list11 = music_list\n    music_list12 =\
    \ music_list\n    music_list13 = music_list\n    music_list14 = music_list\n \
    \   music_list15 = music_list\n    music_list16 = music_list\n    music_list17\
    \ = music_list\n    music_list18 = music_list\n    music_list19 = music_list\n\
    \    music_list20 = music_list\n    music_list21 = music_list\n    music_list22\
    \ = music_list\n    music_list23 = music_list\n    music_list24 = music_list\n\
    \    music_list25 = music_list\n    music_list26 = music_list\n    music_list27\
    \ = music_list\n    music_list28 = music_list\n    music_list29 = music_list\n\
    \    music_list30 = music_list\n    music_list31 = music_list\n    music_list32\
    \ = music_list\n    music_list33 = music_list\n    music_list34 = music_list\n\
    \    music_list35 = music_list\n    music_list36 = music_list\n    music_list37\
    \ = music_list\n    music_list38 = music_list\n    music_list39 = music_list\n\
    \    music_list40 = music_list\n    music_list41 = music_list\n    music_list42\
    \ = music_list\n    music_list43 = music_list\n    music_list44 = music_list\n\
    \    music_list45 = music_list\n    music_list46 = music_list\n    music_list47\
    \ = music_list\n    music_list48 = music_list\n    music_list49 = music_list\n\
    \    music_list50 = music_list\n    music_list51 = music_list\n    music_list5\n\
    using Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpkvow_cm_.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpkvow_cm_.jl:1\n\
    in expression starting at /tmp/tmpkvow_cm_.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string[1:end-1]\n    music_string = music_string[music_string != \"\
    o\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \".\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpx43sgzn5.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpx43sgzn5.jl:1\n\
    in expression starting at /tmp/tmpx43sgzn5.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find(\"|\"\
    ) + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 : music_string.find(\"|\", music_string.find(\"\
    |\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 : music_string.find(\"|\", music_string.find(\"\
    |\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t\
    @test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") ==\
    \ [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0hz7krfe.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0hz7krfe.jl:1\n\
    in expression starting at /tmp/tmp0hz7krfe.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    \nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpteyw9oea.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpteyw9oea.jl:1\n\
    in expression starting at /tmp/tmpteyw9oea.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmplbvampu9.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplbvampu9.jl:1\n\
    in expression starting at /tmp/tmplbvampu9.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string[1:end-1]\n    music_string = music_string[music_string .== \"\
    |\"]\n    music_string = music_string[music_string .== \"o\"]\n    music_string\
    \ = music_string[music_string .== \"|\"]\n    music_string = music_string[music_string\
    \ .== \"o\"]\n    music_string = music_string[music_string .== \"|\"]\n    music_string\
    \ = music_string[music_string .== \"o\"]\n    music_string = music_string[music_string\
    \ .== \"|\"]\n    music_string = music_string[music_string .== \"o\"]\n    music_string\
    \ = music_string[music_string .== \"|\"]\n    music_string = music_string[music_string\
    \ .== \"o\"]\n    music_string = music_string[music_string .== \"|\"]\n    music_string\
    \ = music_string[music_string .== \"o\"]\n    music_string = music_string[music_string\
    \ .== \"|\"]\n    music_string = music_string[music_string .== \"o\"]\n    music_string\
    \ = music_string[music_string .== \"|\"]\n    music_string = music_string[music_string\
    \ .== \"o\"]\n    music_string = music_string[music_string .== \"|\"]\n    music_string\
    \ = music_string[music_string .== \"o\"]\n    music_string = music_string[music_string\
    \ .== \"|\"]\n    music_string = music_string[music_string .== \"o\"]\n    music_string\
    \ = music_string[music_string .== \"|\"]\n    music_string = music_string[music_string\
    \ .== \"o\"]\n    music_string = music_string[music_string .== \"|\"]\n    music_string\
    \ = music_string[music_string .== \"o\"]\n    music_string = music_string[music_string\
    \ .== \"|\"]\n    music_string = music_string[music_string .== \"o\"]\n    music_string\
    \ = music_string[music_string .== \"|\"]\n    music_string = music_string[music_string\
    \ .== \"o\"]\n    music_string = music_string[music_string .== \"|\"]\n    music_string\
    \ = music_string[music_string .== \"o\"]\n    music_string = music_string[music_string\
    \ .== \"|\"]\n    music_string = musi\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpj6azcnf3.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpj6azcnf3.jl:1\n\
    in expression starting at /tmp/tmpj6azcnf3.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_list = music_string.split(\" \")\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpivd5h8ip.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpivd5h8ip.jl:1\n\
    in expression starting at /tmp/tmpivd5h8ip.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end-1]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end-1]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end-1]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end-1]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end-1]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end-1]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end-1]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end-1]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end-1]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end-1]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end-1]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end-1]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end-1]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end-1]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end-1]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end-1]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end-1]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end-1]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end-1]\n    music_string = music_string[musi\n\
    using Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmccwiu4e.jl:1\nin expression starting at /tmp/tmpmccwiu4e.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.start-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpw11j_879.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpw11j_879.jl:1\n\
    in expression starting at /tmp/tmpw11j_879.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : music_string.index(\"|\", music_string.index(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"o\") + 1 : music_string.index(\"o\", music_string.index(\"\
    o\") + 1)]\n    music_string = music_string[music_string.index(\"o\") + 1 : music_string.index(\"\
    o\", music_string.index(\"o\") + 1)]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 : music_string.index(\"o\", music_string.index(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"o\") + 1 : music_string.index(\"o\", music_string.index(\"\
    o\") + 1)]\n    music_string = music_string[music_string.index(\"o\") + 1 : music_string.index(\"\
    o\", music_string.index(\"o\") + 1)]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 : music_string.index(\"o\", music_string.index(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"o\") + 1 : music_string.index(\"o\", music_string.index(\"\
    o\") + 1)]\n    music_string = music_string[music_string.index(\"o\") + 1 : music_string.index(\"\
    o\", music_string.index(\"o\") + 1)]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 : music_string.index(\"o\", music_string.index(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"o\") + 1 : music_string.index(\"o\", music_string.index(\"\
    o\") + 1)]\n    music_string = music_string[music_string.index(\"o\") + 1 : music_string.index(\"\
    o\", music_string.index(\"o\") + 1)]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 : music_string.index(\"o\", music_string.index(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"o\") + 1 : music_string.index(\"o\", music_string.index(\"\
    o\") + 1)]\n    music_string = music_string[music_string.index(\"o\") + 1 : music_string.index(\"\
    o\", music_string.\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxljczk4y.jl:30\nin expression starting at\
    \ /tmp/tmpxljczk4y.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string[1:end-1]\n    music_string = music_string[music_string != \"\
    o\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \".\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \".\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \".\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \".\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \".\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \".\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \".\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \".\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \".\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \".\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \".\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \".\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \".\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \".\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \".\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \".\"]\n    music_string = music_\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpml7em133.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpml7em133.jl:1\n\
    in expression starting at /tmp/tmpml7em133.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip()\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : \nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3p0yv5dx.jl:36\nin expression starting at\
    \ /tmp/tmp3p0yv5dx.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqaty0tih.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqaty0tih.jl:1\n\
    in expression starting at /tmp/tmpqaty0tih.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string[1:end-1]\n    music_string = music_string[music_string != \"\
    o\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \".\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdzajfqp4.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdzajfqp4.jl:1\n\
    in expression starting at /tmp/tmpdzajfqp4.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.findFirst(\"\
    \ \")]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n \
    \   music_string = music_string[music_string.findFirst(\"|\"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\"|\"):end]\n    music_string = music_string[music_string.findFirst(\"\
    |\"):end]\n    music_string = music_string[music_string.findFirst(\"|\"):end]\n\
    \    music_string = music_string[music_string.findFirst(\"|\"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\"|\"):end]\n    music_string = music_string[music_string.findFirst(\"\
    |\"):end]\n    music_string = music_string[music_string.findFirst(\"|\"):end]\n\
    \    music_string = music_string[music_string.findFirst(\"|\"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\"|\"):end]\n    music_string = music_string[music_string.findFirst(\"\
    |\"):end]\n    music_string = music_string[music_string.findFirst(\"|\"):end]\n\
    \    music_string = music_string[music_string.findFirst(\"|\"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\"|\"):end]\n    music_string = music_string[music_string.findFirst(\"\
    |\"):end]\n    music_string = music_string[music_string.findFirst(\"|\"):end]\n\
    \    music_string = music_string[music_string.findFirst(\"|\"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\"|\"):end]\n    music_string = music_string[music_string.findFirst(\"\
    |\"):end]\n    music_string = music_string[music_string.findFirst(\"|\"):end]\n\
    \    music_string = music_string[music_string.findFirst(\"|\"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\"|\"):end]\n    music_string = music_string[music_string.findFirst(\"\
    |\"):end]\n    music_string = music_string[music_string.findFirst(\"|\"):end]\n\
    \    music_string = music_string[music_string.findFirst(\"|\"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\"|\"):end]\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpvob4m05y.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvob4m05y.jl:1\n\
    in expression starting at /tmp/tmpvob4m05y.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_list = music_string.split(\" \")\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp1i1bfdjv.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1i1bfdjv.jl:1\n\
    in expression starting at /tmp/tmp1i1bfdjv.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpzmaauys3.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzmaauys3.jl:1\n\
    in expression starting at /tmp/tmpzmaauys3.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmm604y7b.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmm604y7b.jl:1\n\
    in expression starting at /tmp/tmpmm604y7b.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_list = music_string.split(\" \")\n    music_list\
    \ = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"(music_list.len()\
    \ - 1):\" range expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpok7m_j9f.jl:16\n\
    in expression starting at /tmp/tmpok7m_j9f.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\") + 1 .. music_string.index(\"|\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpj62t4cju.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpj62t4cju.jl:1\n\
    in expression starting at /tmp/tmpj62t4cju.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string[1:end-1]\n    music_string = music_string[music_string != '.']\n\
    \    music_string = music_string[music_string != '|']\n    music_string = music_string[music_string\
    \ != 'o']\n    music_string = music_string[music_string != '|']\n    music_string\
    \ = music_string[music_string != '|']\n    music_string = music_string[music_string\
    \ != '|']\n    music_string = music_string[music_string != '|']\n    music_string\
    \ = music_string[music_string != '|']\n    music_string = music_string[music_string\
    \ != '|']\n    music_string = music_string[music_string != '|']\n    music_string\
    \ = music_string[music_string != '|']\n    music_string = music_string[music_string\
    \ != '|']\n    music_string = music_string[music_string != '|']\n    music_string\
    \ = music_string[music_string != '|']\n    music_string = music_string[music_string\
    \ != '|']\n    music_string = music_string[music_string != '|']\n    music_string\
    \ = music_string[music_string != '|']\n    music_string = music_string[music_string\
    \ != '|']\n    music_string = music_string[music_string != '|']\n    music_string\
    \ = music_string[music_string != '|']\n    music_string = music_string[music_string\
    \ != '|']\n    music_string = music_string[music_string != '|']\n    music_string\
    \ = music_string[music_string != '|']\n    music_string = music_string[music_string\
    \ != '|']\n    music_string = music_string[music_string != '|']\n    music_string\
    \ = music_string[music_string != '|']\n    music_string = music_string[music_string\
    \ != '|']\n    music_string = music_string[music_string != '|']\n    music_string\
    \ = music_string[music_string != '|']\n    music_string = music_string[music_string\
    \ != '|']\n    music_string = music_string[music_string != '|']\n    music_string\
    \ = music_string[music_string != '|']\n    music_string = music_string[music_string\
    \ != '|']\n    music_string = music_\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7zzvvn86.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7zzvvn86.jl:1\n\
    in expression starting at /tmp/tmp7zzvvn86.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip()\n    music_string = music_string[music_string.rfind('|'):]\n\
    \    music_string = music_string[music_string.rfind('o'):]\n    music_string =\
    \ music_string[music_string.rfind('|'):]\n    music_string = music_string[music_string.rfind('o'):]\n\
    \    music_string = music_string[music_string.rfind('|'):]\n    music_string =\
    \ music_string[music_string.rfind('o'):]\n    music_string = music_string[music_string.rfind('|'):]\n\
    \    music_string = music_string[music_string.rfind('o'):]\n    music_string =\
    \ music_string[music_string.rfind('|'):]\n    music_string = music_string[music_string.rfind('o'):]\n\
    \    music_string = music_string[music_string.rfind('|'):]\n    music_string =\
    \ music_string[music_string.rfind('o'):]\n    music_string = music_string[music_string.rfind('|'):]\n\
    \    music_string = music_string[music_string.rfind('o'):]\n    music_string =\
    \ music_string[music_string.rfind('|'):]\n    music_string = music_string[music_string.rfind('o'):]\n\
    \    music_string = music_string[music_string.rfind('|'):]\n    music_string =\
    \ music_string[music_string.rfind('o'):]\n    music_string = music_string[music_string.rfind('|'):]\n\
    \    music_string = music_string[music_string.rfind('o'):]\n    music_string =\
    \ music_string[music_string.rfind('|'):]\n    music_string = music_string[music_string.rfind('o'):]\n\
    \    music_string = music_string[music_string.rfind('|'):]\n    music_string =\
    \ music_string[music_string.rfind('o'):]\n    music_string = music_string[music_string.rfind('|'):]\n\
    \    music_string = music_string[music_string.rfind('o'):]\n    music_string =\
    \ music_string[music_string.rfind('|'):]\n    music_string = music_string[music_string.rfind('o'):]\n\
    \    music_string = music_string[music_string.rfind('|'):]\n    music_string =\
    \ music_string[music_\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"music_string.rfind('|'):\"\
    \ range expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy9eo92rt.jl:15\n\
    in expression starting at /tmp/tmpy9eo92rt.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find(\"|\"\
    ) + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 : music_string.find(\"|\", music_string.find(\"\
    |\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 : music_string.find(\"|\", music_string.find(\"\
    |\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t\
    @test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") ==\
    \ [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppyuizpxg.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppyuizpxg.jl:1\n\
    in expression starting at /tmp/tmppyuizpxg.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpi5hilkyq.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpi5hilkyq.jl:1\n\
    in expression starting at /tmp/tmpi5hilkyq.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.findFirst(\"\
    \ \")]\n    music_string = music_string[music_string.findFirst(\" \"):]\n    music_string\
    \ = music_string[music_string.findFirst(\"|\"):]\n    music_string = music_string[music_string.findFirst(\"\
    |\"):]\n    music_string = music_string[music_string.findFirst(\"|\"):]\n    music_string\
    \ = music_string[music_string.findFirst(\"|\"):]\n    music_string = music_string[music_string.findFirst(\"\
    |\"):]\n    music_string = music_string[music_string.findFirst(\"|\"):]\n    music_string\
    \ = music_string[music_string.findFirst(\"|\"):]\n    music_string = music_string[music_string.findFirst(\"\
    |\"):]\n    music_string = music_string[music_string.findFirst(\"|\"):]\n    music_string\
    \ = music_string[music_string.findFirst(\"|\"):]\n    music_string = music_string[music_string.findFirst(\"\
    |\"):]\n    music_string = music_string[music_string.findFirst(\"|\"):]\n    music_string\
    \ = music_string[music_string.findFirst(\"|\"):]\n    music_string = music_string[music_string.findFirst(\"\
    |\"):]\n    music_string = music_string[music_string.findFirst(\"|\"):]\n    music_string\
    \ = music_string[music_string.findFirst(\"|\"):]\n    music_string = music_string[music_string.findFirst(\"\
    |\"):]\n    music_string = music_string[music_string.findFirst(\"|\"):]\n    music_string\
    \ = music_string[music_string.findFirst(\"|\"):]\n    music_string = music_string[music_string.findFirst(\"\
    |\"):]\n    music_string = music_string[music_string.findFirst(\"|\"):]\n    music_string\
    \ = music_string[music_string.findFirst(\"|\"):]\n    music_string = music_string[music_string.findFirst(\"\
    |\"):]\n    music_string = music_string[music_string.findFirst(\"|\"):]\n    music_string\
    \ = music_string[music_string.findFirst(\"|\"):]\n    music_string = music_string[music_string.findFirst(\"\
    |\"):]\n\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"music_string.findFirst(\"\
    \ \"):\" range expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplpl6d6_p.jl:16\n\
    in expression starting at /tmp/tmplpl6d6_p.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find(\"|\"\
    ) + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 : music_string.find(\"|\", music_string.find(\"\
    |\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 : music_string.find(\"|\", music_string.find(\"\
    |\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t\
    @test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") ==\
    \ [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpcg198t8q.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcg198t8q.jl:1\n\
    in expression starting at /tmp/tmpcg198t8q.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip()\n    music_string = music_string.strip(\"\\n\")\n   \
    \ music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpeblc3rxt.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpeblc3rxt.jl:1\n\
    in expression starting at /tmp/tmpeblc3rxt.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy4vzxmd3.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy4vzxmd3.jl:1\n\
    in expression starting at /tmp/tmpy4vzxmd3.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string[1:end-1]\n    music_list = split(music_string, \"|\")\n    music_list\
    \ = map(parse, music_list)\n    music_list = map(sum, music_list)\n    return\
    \ music_list\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t\
    @test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") ==\
    \ [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp30qjuc9r.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{Int64}([])\n  MethodError: no method\
    \ matching parse(::SubString{String})\n  Closest candidates are:\n    parse(!Matched::Type{T},\
    \ !Matched::AbstractString) where T<:Complex at /shared/centos7/julia/1.7.3/share/julia/base/parse.jl:381\n\
    \    parse(!Matched::Type{T}, !Matched::AbstractChar; base) where T<:Integer at\
    \ /shared/centos7/julia/1.7.3/share/julia/base/parse.jl:40\n    parse(!Matched::Type{T},\
    \ !Matched::AbstractString; base) where T<:Integer at /shared/centos7/julia/1.7.3/share/julia/base/parse.jl:240\n\
    \    ...\n  Stacktrace:\n   [1] iterate\n     @ ./generator.jl:47 [inlined]\n\
    \   [2] _collect\n     @ ./array.jl:744 [inlined]\n   [3] collect_similar\n  \
    \   @ ./array.jl:653 [inlined]\n   [4] map\n     @ ./abstractarray.jl:2867 [inlined]\n\
    \   [5] parse_music(music_string::String)\n     @ Main /tmp/tmp30qjuc9r.jl:16\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmp30qjuc9r.jl:25 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmp30qjuc9r.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp30qjuc9r.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"o o o o\") == [4, 4, 4, 4]\n  MethodError: no method matching parse(::SubString{String})\n\
    \  Closest candidates are:\n    parse(!Matched::Type{T}, !Matched::AbstractString)\
    \ where T<:Complex at /shared/centos7/julia/1.7.3/share/julia/base/parse.jl:381\n\
    \    parse(!Matched::Type{T}, !Matched::AbstractChar; base) where T<:Integer at\
    \ /shared/centos7/julia/1.7.3/share/julia/base/parse.jl:40\n    parse(!Matched::Type{T},\
    \ !Matched::AbstractString; base) where T<:Integer at /shared/centos7/julia/1.7.3/share/julia/base/parse.jl:240\n\
    \    ...\n  Stacktrace:\n   [1] iterate\n     @ ./generator.jl:47 [inlined]\n\
    \   [2] _collect\n     @ ./array.jl:744 [inlined]\n   [3] collect_similar\n  \
    \   @ ./array."
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp30qjuc9r.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_list = music_string.split(\" \")\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp1yijmdy0.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1yijmdy0.jl:1\n\
    in expression starting at /tmp/tmp1yijmdy0.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip()\n    music_string = music_string.strip(\"\\n\")\n   \
    \ music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3n2ucnn5.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3n2ucnn5.jl:1\n\
    in expression starting at /tmp/tmp3n2ucnn5.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppip8k7i_.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppip8k7i_.jl:1\n\
    in expression starting at /tmp/tmppip8k7i_.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.findfirst('|'):end]\n\
    \    music_string = music_string[music_string.findfirst('o'):end]\n    music_string\
    \ = music_string[music_string.findfirst('|'):end]\n    music_string = music_string[music_string.findfirst('o'):end]\n\
    \    music_string = music_string[music_string.findfirst('|'):end]\n    music_string\
    \ = music_string[music_string.findfirst('o'):end]\n    music_string = music_string[music_string.findfirst('|'):end]\n\
    \    music_string = music_string[music_string.findfirst('o'):end]\n    music_string\
    \ = music_string[music_string.findfirst('|'):end]\n    music_string = music_string[music_string.findfirst('o'):end]\n\
    \    music_string = music_string[music_string.findfirst('|'):end]\n    music_string\
    \ = music_string[music_string.findfirst('o'):end]\n    music_string = music_string[music_string.findfirst('|'):end]\n\
    \    music_string = music_string[music_string.findfirst('o'):end]\n    music_string\
    \ = music_string[music_string.findfirst('|'):end]\n    music_string = music_string[music_string.findfirst('o'):end]\n\
    \    music_string = music_string[music_string.findfirst('|'):end]\n    music_string\
    \ = music_string[music_string.findfirst('o'):end]\n    music_string = music_string[music_string.findfirst('|'):end]\n\
    \    music_string = music_string[music_string.findfirst('o'):end]\n    music_string\
    \ = music_string[music_string.findfirst('|'):end]\n    music_string = music_string[music_string.findfirst('o'):end]\n\
    \    music_string = music_string[music_string.findfirst('|'):end]\n    music_string\
    \ = music_string[music_string.findfirst('o'):end]\n    music_string = music_string[music_string.findfirst('|'):end]\n\
    \    music_string = music_string[music_string.findfirst('o'):end]\n    music_string\
    \ = music_string[music_string.findfirst('|'):end]\n    music_string = music_string[music_string.findfirst('o'):end]\n\
    using Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpc5sq3df8.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpc5sq3df8.jl:1\n\
    in expression starting at /tmp/tmpc5sq3df8.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_list = music_string.split(\" \")\n    music_list\
    \ = music_list[music_list.len()-1:music_list.len()]\n    music_list = music_list[music_list.len()-1:music_list.len()]\n\
    \    music_list = music_list[music_list.len()-1:music_list.len()]\n    music_list\
    \ = music_list[music_list.len()-1:music_list.len()]\n    music_list = music_list[music_list.len()-1:music_list.len()]\n\
    \    music_list = music_list[music_list.len()-1:music_list.len()]\n    music_list\
    \ = music_list[music_list.len()-1:music_list.len()]\n    music_list = music_list[music_list.len()-1:music_list.len()]\n\
    \    music_list = music_list[music_list.len()-1:music_list.len()]\n    music_list\
    \ = music_list[music_list.len()-1:music_list.len()]\n    music_list = music_list[music_list.len()-1:music_list.len()]\n\
    \    music_list = music_list[music_list.len()-1:music_list.len()]\n    music_list\
    \ = music_list[music_list.len()-1:music_list.len()]\n    music_list = music_list[music_list.len()-1:music_list.len()]\n\
    \    music_list = music_list[music_list.len()-1:music_list.len()]\n    music_list\
    \ = music_list[music_list.len()-1:music_list.len()]\n    music_list = music_list[music_list.len()-1:music_list.len()]\n\
    \    music_list = music_list[music_list.len()-1:music_list.len()]\n    music_list\
    \ = music_list[music_list.len()-1:music_list.len()]\n    music_list = music_list[music_list.len()-1:music_list.len()]\n\
    \    music_list = music_list[music_list.len()-1:music_list.len()]\n    music_list\
    \ = music_list[music_list.len()-1:music_list.len()]\n    music_list = music_list[music_list.len()-1:music_list.len()]\n\
    \    music_list = music_list[music_list.len()-1:music_list.len()]\n    music_list\
    \ = music_list[music_list.len()-1:music_list.len()]\n    music_list = music_list[music_list.len()-1:music_list.len()]\n\
    \nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpimd1p1ex.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpimd1p1ex.jl:1\n\
    in expression starting at /tmp/tmpimd1p1ex.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip()\n    music_string = music_string.strip(\"\\n\")\n   \
    \ music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"\\v\")\n    music_string = music_string.strip(\"\
    \\f\")\n    music_string = music_string.strip(\"\\a\")\n    music_string = music_string.strip(\"\
    \\e\")\n    music_string = music_string.strip(\"\\\\n\")\n    music_string = music_string.strip(\"\
    \\v\")\n    music_string = music_string.strip(\"\\f\")\n    music_string = music_string.strip(\"\
    \\a\")\n    music_string = music_string.strip(\"\\e\")\n    music_string = music_string.strip(\"\
    \\\\n\")\n    music_string = music_string.strip(\"\\v\")\n    music_string = music_string.strip(\"\
    \\f\")\n    music_string = music_string.strip(\"\\a\")\n    music_string = music_string.strip(\"\
    \\e\")\n    music_string = music_string.strip(\"\\\\n\")\n    music_string = music_string.strip(\"\
    \\v\")\n    music_string = music_string.strip(\"\\f\")\n    music_string = music_string.strip(\"\
    \\a\")\n    music_string = music_string.strip(\"\\e\")\n    music_string = music_string.strip(\"\
    \\\\n\")\n    music_string = music_string.strip(\"\\v\")\n    music_string = music_string.strip(\"\
    \\f\")\n    music_string = music_string.strip(\"\\a\")\n    music_string = music_string.strip(\"\
    \\e\")\n    music_string = music_string.strip(\"\\\\n\")\n    music_string = music_string.strip(\"\
    \\v\")\n    music_string = music_string.strip(\"\\f\")\n    music_string = music_string.strip(\"\
    \\a\")\n    music_string = music_string.strip(\"\\e\")\n    music_string = music_string.strip(\"\
    \\\\n\")\n    music_string = music_string.strip(\"\\v\")\n    music_string = music_string.strip(\"\
    \\f\")\n    music_string = music_string.strip(\"\\a\")\n    music_string = music_string.strip(\"\
    \\e\")\n    music_string = music_string.strip(\"\\\\n\")\n    music_string = music_string.strip(\"\
    \\v\")\n    music_string = music_string.strip(\"\\f\")\n    music_string = music_string.strip(\"\
    \nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqfs6z7gv.jl:61\nin expression starting at\
    \ /tmp/tmpqfs6z7gv.jl:61\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_notes = music_string.split(\"|\")\n    music_notes\
    \ = music_notes[music_notes.len()/2:end]\n    music_notes = music_notes.map(x\
    \ -> x.strip)\n    music_notes = music_notes.map(x -> x.split(\"o\"))\n    music_notes\
    \ = music_notes.map(x -> x.map(x -> x.toInt))\n    music_notes = music_notes.map(x\
    \ -> x.map(x -> x.sum))\n    return music_notes\nend\n</cell>\n<code language=julia-1.5>\n\
    music_notes = parse_music(\"\"\"o o| .| o| o| .| .| .| .| o o\"\"\")\n</cell>\n\
    <code language=julia-1.5>\nmusic_notes\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\")\
    \ == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") ==\
    \ [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2,\
    \ 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1l3bw8s5.jl:23\nin expression starting at\
    \ /tmp/tmp1l3bw8s5.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_notes = music_string.split(\"|\")\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes.map(x -> x.strip)\n    music_notes\
    \ = music_notes.map(x -> x.split(\"o\"))\n    music_notes = music_notes.map(x\
    \ -> x.map(x -> x.toInt64))\n    music_notes = music_notes.map(x -> x.map(x ->\
    \ x.sum))\n    music_notes = music_notes.map(x -> x.map(x -> x.max))\n    music_notes\
    \ = music_notes.map(x -> x.map(x -> x.min))\n    music_notes = music_notes.map(x\
    \ -> x.map(x -> x.mean))\n    music_notes = music_notes.map(x -> x.map(x -> x.std))\n\
    \    music_notes = music_notes.map(x -> x.map(x -> x.var))\n    music_notes =\
    \ music_notes.map(x -> x.map(x -> x.max))\n    music_notes = music_notes.map(x\
    \ -> x.map(x -> x.min))\n    music_notes = music_notes.map(x -> x.map(x -> x.sum))\n\
    \    music_notes = music_notes.map(x -> x.map(x -> x.mean))\n    music_notes =\
    \ music_notes.map(x -> x.map(x -> x.std))\n    music_notes = music_notes.map(x\
    \ -> x.map(x -> x.var))\n    music_notes = music_notes.map(x -> x.map(x -> x.max))\n\
    \    music_notes = music_notes.map(x -> x.map(x -> x.min))\n    music_notes =\
    \ music_notes.map(x -> x.map(x -> x.sum))\n    music_notes = music_notes.map(x\
    \ -> x.map(x -> x.mean))\n    music_notes = music_notes.map(x -> x.map(x -> x.std))\n\
    \    music_notes = music_notes.map(x -> x.map(x -> x.var))\n    music_notes =\
    \ music_notes.map(x -> x.map(x -> x.max))\n    music_notes = music_notes.map(x\
    \ -> x.map(x -> x.min))\n    music_notes = music_notes.map(x -> x.map(x -> x.sum))\n\
    \    music_notes = \nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_s940k18.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_s940k18.jl:1\n\
    in expression starting at /tmp/tmp_s940k18.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpm_g76rau.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpm_g76rau.jl:1\n\
    in expression starting at /tmp/tmpm_g76rau.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpim0c_2tb.jl:1\nin expression starting at /tmp/tmpim0c_2tb.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string[1:end-1]\n    music_string = music_string[music_string == \"\
    .\"]\n    music_string = music_string[music_string == \"o\"]\n    music_string\
    \ = music_string[music_string == \"|\"]\n    music_string = music_string[music_string\
    \ == \"|\"]\n    music_string = music_string[music_string == \"|\"]\n    music_string\
    \ = music_string[music_string == \"|\"]\n    music_string = music_string[music_string\
    \ == \"|\"]\n    music_string = music_string[music_string == \"|\"]\n    music_string\
    \ = music_string[music_string == \"|\"]\n    music_string = music_string[music_string\
    \ == \"|\"]\n    music_string = music_string[music_string == \"|\"]\n    music_string\
    \ = music_string[music_string == \"|\"]\n    music_string = music_string[music_string\
    \ == \"|\"]\n    music_string = music_string[music_string == \"|\"]\n    music_string\
    \ = music_string[music_string == \"|\"]\n    music_string = music_string[music_string\
    \ == \"|\"]\n    music_string = music_string[music_string == \"|\"]\n    music_string\
    \ = music_string[music_string == \"|\"]\n    music_string = music_string[music_string\
    \ == \"|\"]\n    music_string = music_string[music_string == \"|\"]\n    music_string\
    \ = music_string[music_string == \"|\"]\n    music_string = music_string[music_string\
    \ == \"|\"]\n    music_string = music_string[music_string == \"|\"]\n    music_string\
    \ = music_string[music_string == \"|\"]\n    music_string = music_string[music_string\
    \ == \"|\"]\n    music_string = music_string[music_string == \"|\"]\n    music_string\
    \ = music_string[music_string == \"|\"]\n    music_string = music_string[music_string\
    \ == \"|\"]\n    music_string = music_string[music_string == \"|\"]\n    music_string\
    \ = music_string[music_string == \"|\"]\n    music_string = music_string[music_string\
    \ == \"|\"]\n    music_string = music_string[music_string == \"|\"]\n    music_string\
    \ = music_string[music_string == \"|\"]\n    music_string = music_\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7e20x76s.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7e20x76s.jl:1\n\
    in expression starting at /tmp/tmp7e20x76s.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string[1:end-1]\n    music_string = music_string[music_string != \"\
    .\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"]\"]\n    music_string = music_string[music_string\
    \ != \":\"]\n    music_string = music_string[music_string != \"/\"]\n    music_string\
    \ = music_string[music_string != \"-\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6faqicne.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6faqicne.jl:1\n\
    in expression starting at /tmp/tmp6faqicne.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string[1:end-1]\n    music_string = music_string[music_string == \"\
    |\"]\n    music_string = music_string[music_string == \"o\"]\n    music_string\
    \ = music_string[music_string == \"|\"]\n    music_string = music_string[music_string\
    \ == \"|\"]\n    music_string = music_string[music_string == \"|\"]\n    music_string\
    \ = music_string[music_string == \"|\"]\n    music_string = music_string[music_string\
    \ == \"|\"]\n    music_string = music_string[music_string == \"|\"]\n    music_string\
    \ = music_string[music_string == \"|\"]\n    music_string = music_string[music_string\
    \ == \"|\"]\n    music_string = music_string[music_string == \"|\"]\n    music_string\
    \ = music_string[music_string == \"|\"]\n    music_string = music_string[music_string\
    \ == \"|\"]\n    music_string = music_string[music_string == \"|\"]\n    music_string\
    \ = music_string[music_string == \"|\"]\n    music_string = music_string[music_string\
    \ == \"|\"]\n    music_string = music_string[music_string == \"|\"]\n    music_string\
    \ = music_string[music_string == \"|\"]\n    music_string = music_string[music_string\
    \ == \"|\"]\n    music_string = music_string[music_string == \"|\"]\n    music_string\
    \ = music_string[music_string == \"|\"]\n    music_string = music_string[music_string\
    \ == \"|\"]\n    music_string = music_string[music_string == \"|\"]\n    music_string\
    \ = music_string[music_string == \"|\"]\n    music_string = music_string[music_string\
    \ == \"|\"]\n    music_string = music_string[music_string == \"|\"]\n    music_string\
    \ = music_string[music_string == \"|\"]\n    music_string = music_string[music_string\
    \ == \"|\"]\n    music_string = music_string[music_string == \"|\"]\n    music_string\
    \ = music_string[music_string == \"|\"]\n    music_string = music_string[music_string\
    \ == \"|\"]\n    music_string = music_string[music_string == \"|\"]\n    music_string\
    \ = music_string[music_string == \"|\"]\n    music_string = music_\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpk6a5xumk.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk6a5xumk.jl:1\n\
    in expression starting at /tmp/tmpk6a5xumk.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip()\n    music_string = music_string[music_string.rfind('|'):end]\n\
    \    music_string = music_string[music_string.rfind('o'):end]\n    music_string\
    \ = music_string[music_string.rfind('|'):end]\n    music_string = music_string[music_string.rfind('o'):end]\n\
    \    music_string = music_string[music_string.rfind('|'):end]\n    music_string\
    \ = music_string[music_string.rfind('o'):end]\n    music_string = music_string[music_string.rfind('|'):end]\n\
    \    music_string = music_string[music_string.rfind('o'):end]\n    music_string\
    \ = music_string[music_string.rfind('|'):end]\n    music_string = music_string[music_string.rfind('o'):end]\n\
    \    music_string = music_string[music_string.rfind('|'):end]\n    music_string\
    \ = music_string[music_string.rfind('o'):end]\n    music_string = music_string[music_string.rfind('|'):end]\n\
    \    music_string = music_string[music_string.rfind('o'):end]\n    music_string\
    \ = music_string[music_string.rfind('|'):end]\n    music_string = music_string[music_string.rfind('o'):end]\n\
    \    music_string = music_string[music_string.rfind('|'):end]\n    music_string\
    \ = music_string[music_string.rfind('o'):end]\n    music_string = music_string[music_string.rfind('|'):end]\n\
    \    music_string = music_string[music_string.rfind('o'):end]\n    music_string\
    \ = music_string[music_string.rfind('|'):end]\n    music_string = music_string[music_string.rfind('o'):end]\n\
    \    music_string = music_string[music_string.rfind('|'):end]\n    music_string\
    \ = music_string[music_string.rfind('o'):end]\n    music_string = music_string[music_string.rfind('|'):end]\n\
    \    music_string = music_string[music_string.rfind('o'):end]\n    music_string\
    \ = music_string[music_string.rfind('|'):end]\n    music_string = music_string[music_string.rfind('o'):end]\n\
    \    music_string = music_string[music_string.rfind('|'):end]\n    music_string\
    \ = music_string[music_\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm6hn4jf1.jl:1\nin expression starting at /tmp/tmpm6hn4jf1.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjs64oo88.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjs64oo88.jl:1\n\
    in expression starting at /tmp/tmpjs64oo88.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp2tlzht3u.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2tlzht3u.jl:1\n\
    in expression starting at /tmp/tmp2tlzht3u.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_list = music_string.split(\" \")\n    music_list\
    \ = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\n    music_list = music_list[music_list.len()-1:]\n\
    \    music_list = music_list[music_list.len()-1:]\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"(music_list.len()\
    \ - 1):\" range expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmph5q3jtij.jl:16\n\
    in expression starting at /tmp/tmph5q3jtij.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcapmb4ip.jl:1\nin expression starting at /tmp/tmpcapmb4ip.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc3n7u8a7.jl:1\nin expression starting at /tmp/tmpc3n7u8a7.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find(\"|\"\
    ) + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"|\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[1 : music_string.find(\"|\", music_string.find(\"o\") + 1)]\n\
    \    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[1 : music_string.find(\"|\", music_string.find(\"o\") + 1)]\n\
    \    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[1 : music_string.find(\"|\", music_string.find(\"o\") + 1)]\n\
    \    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[1 : music_string.find(\"|\", music_string.find(\"o\") + 1)]\n\
    \    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[1 : music_\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptfv1_h2a.jl:1\nin expression starting at /tmp/tmptfv1_h2a.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\\n\")\n    music_string = music_string.strip(\"\
    \\r\")\n    music_string = music_string.strip(\"\\t\")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\" \")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\\n\")\n    music_string = music_string.strip(\"\
    \\r\")\n    music_string = music_string.strip(\"\\t\")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\" \")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\\n\")\n    music_string = music_string.strip(\"\
    \\r\")\n    music_string = music_string.strip(\"\\t\")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\" \")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\\n\")\n    music_string = music_string.strip(\"\
    \\r\")\n    music_string = music_string.strip(\"\\t\")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\" \")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = \nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmptwups_nq.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptwups_nq.jl:1\n\
    in expression starting at /tmp/tmptwups_nq.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find(\"|\"\
    ) + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\".\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\".\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    .\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n\
    \    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    .\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n\
    \    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    .\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n\
    \    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    .\") + 1 : musi\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t\
    @test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") ==\
    \ [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp30t4xcew.jl:1\nin expression starting at /tmp/tmp30t4xcew.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip()\n    music_string = music_string.strip(\"\\n\")\n   \
    \ music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"\\v\")\n    music_string = music_string.strip(\"\
    \\f\")\n    music_string = music_string.strip(\"\\a\")\n    music_string = music_string.strip(\"\
    \\e\")\n    music_string = music_string.strip(\"\\\\n\")\n    music_string = music_string.strip(\"\
    \\v\")\n    music_string = music_string.strip(\"\\f\")\n    music_string = music_string.strip(\"\
    \\a\")\n    music_string = music_string.strip(\"\\e\")\n    music_string = music_string.strip(\"\
    \\\\n\")\n    music_string = music_string.strip(\"\\v\")\n    music_string = music_string.strip(\"\
    \\f\")\n    music_string = music_string.strip(\"\\a\")\n    music_string = music_string.strip(\"\
    \\e\")\n    music_string = music_string.strip(\"\\\\n\")\n    music_string = music_string.strip(\"\
    \\v\")\n    music_string = music_string.strip(\"\\f\")\n    music_string = music_string.strip(\"\
    \\a\")\n    music_string = music_string.strip(\"\\e\")\n    music_string = music_string.strip(\"\
    \\\\n\")\n    music_string = music_string.strip(\"\\v\")\n    music_string = music_string.strip(\"\
    \\f\")\n    music_string = music_string.strip(\"\\a\")\n    music_string = music_string.strip(\"\
    \\e\")\n    music_string = music_string.strip(\"\\\\n\")\n    music_string = music_string.strip(\"\
    \\v\")\n    music_string = music_string.strip(\"\\f\")\n    music_string = music_string.strip(\"\
    \\a\")\n    music_string = music_string.strip(\"\\e\")\n    music_string = music_string.strip(\"\
    \\\\n\")\n    music_string = music_string.strip(\"\\v\")\n    music_string = music_string.strip(\"\
    \\f\")\n    music_string = music_string.strip(\"\\a\")\n    music_string = music_string.strip(\"\
    \\e\")\n    music_string = music_string.strip(\"\\\\n\")\n    music_string = music_string.strip(\"\
    \\v\")\n    music_string = music_string.strip(\"\\f\")\n    music_string = music_string.strip(\"\
    \nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph5b0vbvg.jl:61\nin expression starting at\
    \ /tmp/tmph5b0vbvg.jl:61\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_notes = music_string.split(\"|\")\n    music_notes\
    \ = music_notes[music_notes.len()/2:end]\n    music_notes = music_notes.map(x\
    \ -> x.strip)\n    music_notes = music_notes.map(x -> x.split(\" \"))\n    music_notes\
    \ = music_notes.map(x -> x.map(x -> x.toInt))\n    music_notes = music_notes.map(x\
    \ -> x.map(x -> x.sum))\n    music_notes = music_notes.map(x -> x.map(x -> x.max))\n\
    \    music_notes = music_notes.map(x -> x.map(x -> x.min))\n    music_notes =\
    \ music_notes.map(x -> x.map(x -> x.mean))\n    music_notes = music_notes.map(x\
    \ -> x.map(x -> x.std))\n    music_notes = music_notes.map(x -> x.map(x -> x.sum))\n\
    \    music_notes = music_notes.map(x -> x.map(x -> x.max))\n    music_notes =\
    \ music_notes.map(x -> x.map(x -> x.min))\n    music_notes = music_notes.map(x\
    \ -> x.map(x -> x.mean))\n    music_notes = music_notes.map(x -> x.map(x -> x.std))\n\
    \    music_notes = music_notes.map(x -> x.map(x -> x.sum))\n    music_notes =\
    \ music_notes.map(x -> x.map(x -> x.max))\n    music_notes = music_notes.map(x\
    \ -> x.map(x -> x.min))\n    music_notes = music_notes.map(x -> x.map(x -> x.mean))\n\
    \    music_notes = music_notes.map(x -> x.map(x -> x.std))\n    music_notes =\
    \ music_notes.map(x -> x.map(x -> x.sum))\n    music_notes = music_notes.map(x\
    \ -> x.map(x -> x.max))\n    music_notes = music_notes.map(x -> x.map(x -> x.min))\n\
    \    music_notes = music_notes.map(x -> x.map(x -> x.mean))\n    music_notes =\
    \ music_notes.map(x -> x.map(x -> x.std))\n    music_notes = music_notes.map(x\
    \ -> x.map(x -> x.sum\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdatfvcg2.jl:41\nin expression starting at\
    \ /tmp/tmpdatfvcg2.jl:41\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.findFirst(\"\
    \ \")]\n    music_string = music_string[music_string.findFirst(\"|\")]\n    music_string\
    \ = music_string[music_string.findFirst(\"o\")]\n    music_string = music_string[music_string.findFirst(\"\
    .\")]\n    music_string = music_string[music_string.findFirst(\"o|\")]\n    music_string\
    \ = music_string[music_string.findFirst(\".|\")]\n    music_string = music_string[music_string.findFirst(\"\
    o|\")]\n    music_string = music_string[music_string.findFirst(\"o|\")]\n    music_string\
    \ = music_string[music_string.findFirst(\"o|\")]\n    music_string = music_string[music_string.findFirst(\"\
    o|\")]\n    music_string = music_string[music_string.findFirst(\"o|\")]\n    music_string\
    \ = music_string[music_string.findFirst(\"o|\")]\n    music_string = music_string[music_string.findFirst(\"\
    o|\")]\n    music_string = music_string[music_string.findFirst(\"o|\")]\n    music_string\
    \ = music_string[music_string.findFirst(\"o|\")]\n    music_string = music_string[music_string.findFirst(\"\
    o|\")]\n    music_string = music_string[music_string.findFirst(\"o|\")]\n    music_string\
    \ = music_string[music_string.findFirst(\"o|\")]\n    music_string = music_string[music_string.findFirst(\"\
    o|\")]\n    music_string = music_string[music_string.findFirst(\"o|\")]\n    music_string\
    \ = music_string[music_string.findFirst(\"o|\")]\n    music_string = music_string[music_string.findFirst(\"\
    o|\")]\n    music_string = music_string[music_string.findFirst(\"o|\")]\n    music_string\
    \ = music_string[music_string.findFirst(\"o|\")]\n    music_string = music_string[music_string.findFirst(\"\
    o|\")]\n    music_string = music_string[music_string.findFirst(\"o|\")]\n    music_string\
    \ = music_string[music_string.findFirst(\"o|\")]\n    music_string = music_string[music_string.findFirst(\"\
    o|\")]\n    music_string = musi\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn8mg6rtw.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn8mg6rtw.jl:1\n\
    in expression starting at /tmp/tmpn8mg6rtw.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.start-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9k65nocb.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9k65nocb.jl:1\n\
    in expression starting at /tmp/tmp9k65nocb.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip()\n    music_string = music_string[music_string.rfind('|'):]\n\
    \    music_string = music_string[music_string.rfind('o'):]\n    music_string =\
    \ music_string[music_string.rfind('|'):]\n    music_string = music_string[music_string.rfind('o'):]\n\
    \    music_string = music_string[music_string.rfind('|'):]\n    music_string =\
    \ music_string[music_string.rfind('o'):]\n    music_string = music_string[music_string.rfind('|'):]\n\
    \    music_string = music_string[music_string.rfind('o'):]\n    music_string =\
    \ music_string[music_string.rfind('|'):]\n    music_string = music_string[music_string.rfind('o'):]\n\
    \    music_string = music_string[music_string.rfind('|'):]\n    music_string =\
    \ music_string[music_string.rfind('o'):]\n    music_string = music_string[music_string.rfind('|'):]\n\
    \    music_string = music_string[music_string.rfind('o'):]\n    music_string =\
    \ music_string[music_string.rfind('|'):]\n    music_string = music_string[music_string.rfind('o'):]\n\
    \    music_string = music_string[music_string.rfind('|'):]\n    music_string =\
    \ music_string[music_string.rfind('o'):]\n    music_string = music_string[music_string.rfind('|'):]\n\
    \    music_string = music_string[music_string.rfind('o'):]\n    music_string =\
    \ music_string[music_string.rfind('|'):]\n    music_string = music_string[music_string.rfind('o'):]\n\
    \    music_string = music_string[music_string.rfind('|'):]\n    music_string =\
    \ music_string[music_string.rfind('o'):]\n    music_string = music_string[music_string.rfind('|'):]\n\
    \    music_string = music_string[music_string.rfind('o'):]\n    music_string =\
    \ music_string[music_string.rfind('|'):]\n    music_string = music_string[music_string.rfind('o'):]\n\
    \    music_string = music_string[music_string.rfind('|'):]\n    music_string =\
    \ music_string[music_\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"music_string.rfind('|'):\"\
    \ range expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk5e2esk5.jl:15\n\
    in expression starting at /tmp/tmpk5e2esk5.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjhyz6qtj.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjhyz6qtj.jl:1\n\
    in expression starting at /tmp/tmpjhyz6qtj.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_list = music_string.split(\" \")\n    music_list[1]\
    \ = music_list[1].strip\n    music_list[2] = music_list[2].strip\n    music_list[3]\
    \ = music_list[3].strip\n    music_list[4] = music_list[4].strip\n    music_list[5]\
    \ = music_list[5].strip\n    music_list[6] = music_list[6].strip\n    music_list[7]\
    \ = music_list[7].strip\n    music_list[8] = music_list[8].strip\n    music_list[9]\
    \ = music_list[9].strip\n    music_list[10] = music_list[10].strip\n    music_list[11]\
    \ = music_list[11].strip\n    music_list[12] = music_list[12].strip\n    music_list[13]\
    \ = music_list[13].strip\n    music_list[14] = music_list[14].strip\n    music_list[15]\
    \ = music_list[15].strip\n    music_list[16] = music_list[16].strip\n    music_list[17]\
    \ = music_list[17].strip\n    music_list[18] = music_list[18].strip\n    music_list[19]\
    \ = music_list[19].strip\n    music_list[20] = music_list[20].strip\n    music_list[21]\
    \ = music_list[21].strip\n    music_list[22] = music_list[22].strip\n    music_list[23]\
    \ = music_list[23].strip\n    music_list[24] = music_list[24].strip\n    music_list[25]\
    \ = music_list[25].strip\n    music_list[26] = music_list[26].strip\n    music_list[27]\
    \ = music_list[27].strip\n    music_list[28] = music_list[28].strip\n    music_list[29]\
    \ = music_list[29].strip\n    music_list[30] = music_list[30].strip\n    music_list[31]\
    \ = music_list[31].strip\n    music_list[32] = music_list[32].strip\n    music_list[33]\
    \ = music_list[33].strip\n    music_list[34] = music_list[34].strip\n    music_list[35]\
    \ = music_list[35].strip\n    music_list[36] = music_list[36].strip\n    music_list[37]\
    \ = music_list[37].strip\n    music_list[38] = music_list[38].strip\n    music_list[39\n\
    using Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp_64yq4n.jl:1\nin expression starting at /tmp/tmpp_64yq4n.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"music_string.index(\"\
    |\"):\" range expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpw_p3gv5c.jl:15\n\
    in expression starting at /tmp/tmpw_p3gv5c.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_list = music_string.split(\" \") |> collect\n\
    \    music_list = music_list |> filter(x->x != \".\")\n    music_list = music_list\
    \ |> filter(x->x != \"o\")\n    music_list = music_list |> filter(x->x != \"|\"\
    )\n    music_list = music_list |> filter(x->x != \"|\")\n    music_list = music_list\
    \ |> filter(x->x != \"|\")\n    music_list = music_list |> filter(x->x != \"|\"\
    )\n    music_list = music_list |> filter(x->x != \"|\")\n    music_list = music_list\
    \ |> filter(x->x != \"|\")\n    music_list = music_list |> filter(x->x != \"|\"\
    )\n    music_list = music_list |> filter(x->x != \"|\")\n    music_list = music_list\
    \ |> filter(x->x != \"|\")\n    music_list = music_list |> filter(x->x != \"|\"\
    )\n    music_list = music_list |> filter(x->x != \"|\")\n    music_list = music_list\
    \ |> filter(x->x != \"|\")\n    music_list = music_list |> filter(x->x != \"|\"\
    )\n    music_list = music_list |> filter(x->x != \"|\")\n    music_list = music_list\
    \ |> filter(x->x != \"|\")\n    music_list = music_list |> filter(x->x != \"|\"\
    )\n    music_list = music_list |> filter(x->x != \"|\")\n    music_list = music_list\
    \ |> filter(x->x != \"|\")\n    music_list = music_list |> filter(x->x != \"|\"\
    )\n    music_list = music_list |> filter(x->x != \"|\")\n    music_list = music_list\
    \ |> filter(x->x != \"|\")\n    music_list = music_list |> filter(x->x != \"|\"\
    )\n    music_list = music_list |> filter(x->x != \"|\")\n    music_list = music_list\
    \ |> filter(x->x != \"|\")\n    music_list = music_list |> filter(x->x != \"|\"\
    )\n    music_list = music_list |> filter(x->x != \"|\")\n    music_list = music_list\
    \ |> filter(x->x \nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t\
    @test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") ==\
    \ [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph2elaz3w.jl:45\nin expression starting at\
    \ /tmp/tmph2elaz3w.jl:45\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip()\n    music_string = music_string[1:end]\n    music_string\
    \ = music_string[music_string.find('|'):end]\n    music_string = music_string[music_string.find('o'):end]\n\
    \    music_string = music_string[music_string.find('|'):end]\n    music_string\
    \ = music_string[music_string.find('o'):end]\n    music_string = music_string[music_string.find('|'):end]\n\
    \    music_string = music_string[music_string.find('o'):end]\n    music_string\
    \ = music_string[music_string.find('|'):end]\n    music_string = music_string[music_string.find('o'):end]\n\
    \    music_string = music_string[music_string.find('|'):end]\n    music_string\
    \ = music_string[music_string.find('o'):end]\n    music_string = music_string[music_string.find('|'):end]\n\
    \    music_string = music_string[music_string.find('o'):end]\n    music_string\
    \ = music_string[music_string.find('|'):end]\n    music_string = music_string[music_string.find('o'):end]\n\
    \    music_string = music_string[music_string.find('|'):end]\n    music_string\
    \ = music_string[music_string.find('o'):end]\n    music_string = music_string[music_string.find('|'):end]\n\
    \    music_string = music_string[music_string.find('o'):end]\n    music_string\
    \ = music_string[music_string.find('|'):end]\n    music_string = music_string[music_string.find('o'):end]\n\
    \    music_string = music_string[music_string.find('|'):end]\n    music_string\
    \ = music_string[music_string.find('o'):end]\n    music_string = music_string[music_string.find('|'):end]\n\
    \    music_string = music_string[music_string.find('o'):end]\n    music_string\
    \ = music_string[music_string.find('|'):end]\n    music_string = music_string[music_string.find('o'):end]\n\
    \    music_string = music_string[music_string.find('|'):end]\n    music_string\
    \ = music_string[music_string.find('o'):end]\n    music_string = music_string[music_string.find('|'):end]\n\
    \    music_string = music_string[music_string.find('o'):end]\n    music_string\
    \ = music_string[music_string.find('|\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid character literal\nStacktrace:\n [1]\
    \ top-level scope\n   @ /tmp/tmpr7khssfc.jl:52\nin expression starting at /tmp/tmpr7khssfc.jl:52\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find('|'):]\n\
    \    music_string = music_string[music_string.find('o'):]\n    music_string =\
    \ music_string[music_string.find('|'):]\n    music_string = music_string[music_string.find('o'):]\n\
    \    music_string = music_string[music_string.find('|'):]\n    music_string =\
    \ music_string[music_string.find('o'):]\n    music_string = music_string[music_string.find('|'):]\n\
    \    music_string = music_string[music_string.find('o'):]\n    music_string =\
    \ music_string[music_string.find('|'):]\n    music_string = music_string[music_string.find('o'):]\n\
    \    music_string = music_string[music_string.find('|'):]\n    music_string =\
    \ music_string[music_string.find('o'):]\n    music_string = music_string[music_string.find('|'):]\n\
    \    music_string = music_string[music_string.find('o'):]\n    music_string =\
    \ music_string[music_string.find('|'):]\n    music_string = music_string[music_string.find('o'):]\n\
    \    music_string = music_string[music_string.find('|'):]\n    music_string =\
    \ music_string[music_string.find('o'):]\n    music_string = music_string[music_string.find('|'):]\n\
    \    music_string = music_string[music_string.find('o'):]\n    music_string =\
    \ music_string[music_string.find('|'):]\n    music_string = music_string[music_string.find('o'):]\n\
    \    music_string = music_string[music_string.find('|'):]\n    music_string =\
    \ music_string[music_string.find('o'):]\n    music_string = music_string[music_string.find('|'):]\n\
    \    music_string = music_string[music_string.find('o'):]\n    music_string =\
    \ music_string[music_string.find('|'):]\n    music_string = music_string[music_string.find('o'):]\n\
    \    music_string = music_string[music_string.find('|'):]\n    music_string =\
    \ music_string[music_string.find('o'):]\n    music_string = music_string[music_string.find('|'):]\n\
    \    music_string = music_string\nusing Test\n\n@testset begin\n\ncandidate =\
    \ parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"music_string.find('|'):\"\
    \ range expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpaw7t7bea.jl:15\n\
    in expression starting at /tmp/tmpaw7t7bea.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find(\"|\"\
    ) + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\".\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t\
    @test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") ==\
    \ [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl91t5o12.jl:1\nin expression starting at /tmp/tmpl91t5o12.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphabvc3wb.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphabvc3wb.jl:1\n\
    in expression starting at /tmp/tmphabvc3wb.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.findfirst('|'):end]\n\
    \    music_string = music_string[music_string.findfirst('o'):end]\n    music_string\
    \ = music_string[music_string.findfirst('.'):end]\n    music_string = music_string[music_string.findfirst('|'):end]\n\
    \    music_string = music_string[music_string.findfirst('o'):end]\n    music_string\
    \ = music_string[music_string.findfirst('.'):end]\n    music_string = music_string[music_string.findfirst('|'):end]\n\
    \    music_string = music_string[music_string.findfirst('o'):end]\n    music_string\
    \ = music_string[music_string.findfirst('.'):end]\n    music_string = music_string[music_string.findfirst('|'):end]\n\
    \    music_string = music_string[music_string.findfirst('o'):end]\n    music_string\
    \ = music_string[music_string.findfirst('.'):end]\n    music_string = music_string[music_string.findfirst('|'):end]\n\
    \    music_string = music_string[music_string.findfirst('o'):end]\n    music_string\
    \ = music_string[music_string.findfirst('.'):end]\n    music_string = music_string[music_string.findfirst('|'):end]\n\
    \    music_string = music_string[music_string.findfirst('o'):end]\n    music_string\
    \ = music_string[music_string.findfirst('.'):end]\n    music_string = music_string[music_string.findfirst('|'):end]\n\
    \    music_string = music_string[music_string.findfirst('o'):end]\n    music_string\
    \ = music_string[music_string.findfirst('.'):end]\n    music_string = music_string[music_string.findfirst('|'):end]\n\
    \    music_string = music_string[music_string.findfirst('o'):end]\n    music_string\
    \ = music_string[music_string.findfirst('.'):end]\n    music_string = music_string[music_string.findfirst('|'):end]\n\
    \    music_string = music_string[music_string.findfirst('o'):end]\n    music_string\
    \ = music_string[music_string.findfirst('.'):end]\n    music_string = music_string[music_string.findfirst('|'):end]\n\
    \    music_string = music_string[\nusing Test\n\n@testset begin\n\ncandidate =\
    \ parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppsjw46p4.jl:1\nin expression starting at /tmp/tmppsjw46p4.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyvm28ye5.jl:1\nin expression starting at /tmp/tmpyvm28ye5.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip()\n    music_string = music_string[music_string.rfind('|'):]\n\
    \    music_string = music_string[music_string.rfind('o'):]\n    music_string =\
    \ music_string[music_string.rfind('|'):]\n    music_string = music_string[music_string.rfind('o'):]\n\
    \    music_string = music_string[music_string.rfind('|'):]\n    music_string =\
    \ music_string[music_string.rfind('o'):]\n    music_string = music_string[music_string.rfind('|'):]\n\
    \    music_string = music_string[music_string.rfind('o'):]\n    music_string =\
    \ music_string[music_string.rfind('|'):]\n    music_string = music_string[music_string.rfind('o'):]\n\
    \    music_string = music_string[music_string.rfind('|'):]\n    music_string =\
    \ music_string[music_string.rfind('o'):]\n    music_string = music_string[music_string.rfind('|'):]\n\
    \    music_string = music_string[music_string.rfind('o'):]\n    music_string =\
    \ music_string[music_string.rfind('|'):]\n    music_string = music_string[music_string.rfind('o'):]\n\
    \    music_string = music_string[music_string.rfind('|'):]\n    music_string =\
    \ music_string[music_string.rfind('o'):]\n    music_string = music_string[music_string.rfind('|'):]\n\
    \    music_string = music_string[music_string.rfind('o'):]\n    music_string =\
    \ music_string[music_string.rfind('|'):]\n    music_string = music_string[music_string.rfind('o'):]\n\
    \    music_string = music_string[music_string.rfind('|'):]\n    music_string =\
    \ music_string[music_string.rfind('o'):]\n    music_string = music_string[music_string.rfind('|'):]\n\
    \    music_string = music_string[music_string.rfind('o'):]\n    music_string =\
    \ music_string[music_string.rfind('|'):]\n    music_string = music_string[music_string.rfind('o'):]\n\
    \    music_string = music_string[music_string.rfind('|'):]\n    music_string =\
    \ music_string[music_\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"music_string.rfind('|'):\"\
    \ range expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_k8mrl1b.jl:15\n\
    in expression starting at /tmp/tmp_k8mrl1b.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip()\n    music_string = music_string[music_string.find('|'):]\n\
    \    music_string = music_string[music_string.find('|'):music_string.find('|')+2]\n\
    \    music_string = music_string[music_string.find('|'):music_string.find('|')+2]\n\
    \    music_string = music_string[music_string.find('|'):music_string.find('|')+2]\n\
    \    music_string = music_string[music_string.find('|'):music_string.find('|')+2]\n\
    \    music_string = music_string[music_string.find('|'):music_string.find('|')+2]\n\
    \    music_string = music_string[music_string.find('|'):music_string.find('|')+2]\n\
    \    music_string = music_string[music_string.find('|'):music_string.find('|')+2]\n\
    \    music_string = music_string[music_string.find('|'):music_string.find('|')+2]\n\
    \    music_string = music_string[music_string.find('|'):music_string.find('|')+2]\n\
    \    music_string = music_string[music_string.find('|'):music_string.find('|')+2]\n\
    \    music_string = music_string[music_string.find('|'):music_string.find('|')+2]\n\
    \    music_string = music_string[music_string.find('|'):music_string.find('|')+2]\n\
    \    music_string = music_string[music_string.find('|'):music_string.find('|')+2]\n\
    \    music_string = music_string[music_string.find('|'):music_string.find('|')+2]\n\
    \    music_string = music_string[music_string.find('|'):music_string.find('|')+2]\n\
    \    music_string = music_string[music_string.find('|'):music_string.find('|')+2]\n\
    \    music_string = music_string[music_string.find('|'):music_string.find('|')+2]\n\
    \    music_string = music_string[music_string.find('|'):music_string.find('|')+2]\n\
    \    music_string = music_string[music_string.find('|'):music_string.find('|')+2]\n\
    \    music_string = music_string[music_string.find('|'):music_string.find('|')+2]\n\
    \    music_string = music_string[music_string.find('|'):music_string.find('|')+2]\n\
    \    music_string = music_string[music_string.find('|'):music_string.find('|')+2]\n\
    \    music_\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"music_string.find('|'):\"\
    \ range expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmql89izp.jl:15\n\
    in expression starting at /tmp/tmpmql89izp.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip()\n    music_string = music_string[music_string.find(\"\
    -\") + 1 .. end]\n    music_string = music_string[1 .. end]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 .. end]\n    music_string = music_string[1\
    \ .. end]\n    music_string = music_string[music_string.find(\"o\") + 1 .. end]\n\
    \    music_string = music_string[1 .. end]\n    music_string = music_string[music_string.find(\"\
    -\") + 1 .. end]\n    music_string = music_string[1 .. end]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 .. end]\n    music_string = music_string[1\
    \ .. end]\n    music_string = music_string[music_string.find(\"o\") + 1 .. end]\n\
    \    music_string = music_string[1 .. end]\n    music_string = music_string[music_string.find(\"\
    -\") + 1 .. end]\n    music_string = music_string[1 .. end]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 .. end]\n    music_string = music_string[1\
    \ .. end]\n    music_string = music_string[music_string.find(\"o\") + 1 .. end]\n\
    \    music_string = music_string[1 .. end]\n    music_string = music_string[music_string.find(\"\
    -\") + 1 .. end]\n    music_string = music_string[1 .. end]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 .. end]\n    music_string = music_string[1\
    \ .. end]\n    music_string = music_string[music_string.find(\"o\") + 1 .. end]\n\
    \    music_string = music_string[1 .. end]\n    music_string = music_string[music_string.find(\"\
    -\") + 1 .. end]\n    music_string = music_string[1 .. end]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 .. end]\n    music_string = music_string[1\
    \ .. end]\n    music_string = music_string[music_string.find(\"o\") + 1 .. end]\n\
    \    music_string = music_string[1 .. end]\n    music_string = music_string[music_string.find(\"\
    -\") + 1 .. end]\n    music_string = music_string[1 .. end]\n    music_string\
    \ = music_string[music_string.find(\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbxet8nvd.jl:53\nin expression starting at\
    \ /tmp/tmpbxet8nvd.jl:53\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip()\n    music_string = music_string.strip(\"\\n\")\n   \
    \ music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6snn_bmd.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6snn_bmd.jl:1\n\
    in expression starting at /tmp/tmp6snn_bmd.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_notes = music_string.split(\"|\")\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpvz4h5962.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvz4h5962.jl:1\n\
    in expression starting at /tmp/tmpvz4h5962.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip()\n    music_string = music_string.strip(\"\\n\")\n   \
    \ music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"\\v\")\n    music_string = music_string.strip(\"\
    \\f\")\n    music_string = music_string.strip(\"\\a\")\n    music_string = music_string.strip(\"\
    \\e\")\n    music_string = music_string.strip(\"\\c\")\n    music_string = music_string.strip(\"\
    \\^\")\n    music_string = music_string.strip(\"\\~\")\n    music_string = music_string.strip(\"\
    \\*\")\n    music_string = music_string.strip(\"\\+\")\n    music_string = music_string.strip(\"\
    \\?\")\n    music_string = music_string.strip(\"\\*\")\n    music_string = music_string.strip(\"\
    \\*\")\n    music_string = music_string.strip(\"\\*\")\n    music_string = music_string.strip(\"\
    \\*\")\n    music_string = music_string.strip(\"\\*\")\n    music_string = music_string.strip(\"\
    \\*\")\n    music_string = music_string.strip(\"\\*\")\n    music_string = music_string.strip(\"\
    \\*\")\n    music_string = music_string.strip(\"\\*\")\n    music_string = music_string.strip(\"\
    \\*\")\n    music_string = music_string.strip(\"\\*\")\n    music_string = music_string.strip(\"\
    \\*\")\n    music_string = music_string.strip(\"\\*\")\n    music_string = music_string.strip(\"\
    \\*\")\n    music_string = music_string.strip(\"\\*\")\n    music_string = music_string.strip(\"\
    \\*\")\n    music_string = music_string.strip(\"\\*\")\n    music_string = music_string.strip(\"\
    \\*\")\n    music_string = music_string.strip(\"\\*\")\n    music_string = music_string.strip(\"\
    \\*\")\n    music_string = music_string.strip(\"\\*\")\n    music_string = music_string.strip(\"\
    \\*\")\n    music_string = music_string.strip(\"\\*\")\n    music_string = music_string.strip(\"\
    \\*\")\n    music_string = music_string.strip(\"\\*\")\n    music_string = music_string.strip(\"\
    \\*\")\n    music_string = music_string.strip(\"\\*\")\n    music_string = music_string.strip(\"\
    \\*\")\n    music_string = music_string.strip\nusing Test\n\n@testset begin\n\n\
    candidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpbr1amvdu.jl:22\nin expression starting at /tmp/tmpbr1amvdu.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpockhyr1x.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpockhyr1x.jl:1\n\
    in expression starting at /tmp/tmpockhyr1x.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpnssl4a8n.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpnssl4a8n.jl:1\n\
    in expression starting at /tmp/tmpnssl4a8n.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"music_string.index(\"\
    |\"):\" range expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk7kg3l3t.jl:15\n\
    in expression starting at /tmp/tmpk7kg3l3t.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : music_string.index(\"|\", music_string.index(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"|\") + 1 : music_string.index(\"|\", music_string.index(\"\
    |\") + 1)]\n    music_string = music_string[music_string.index(\"|\") + 1 : music_string.index(\"\
    |\", music_string.index(\"|\") + 1)]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : music_string.index(\"|\", music_string.index(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"|\") + 1 : music_string.index(\"|\", music_string.index(\"\
    |\") + 1)]\n    music_string = music_string[music_string.index(\"|\") + 1 : music_string.index(\"\
    |\", music_string.index(\"|\") + 1)]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : music_string.index(\"|\", music_string.index(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"|\") + 1 : music_string.index(\"|\", music_string.index(\"\
    |\") + 1)]\n    music_string = music_string[music_string.index(\"|\") + 1 : music_string.index(\"\
    |\", music_string.index(\"|\") + 1)]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : music_string.index(\"|\", music_string.index(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"|\") + 1 : music_string.index(\"|\", music_string.index(\"\
    |\") + 1)]\n    music_string = music_string[music_string.index(\"|\") + 1 : music_string.index(\"\
    |\", music_string.index(\"|\") + 1)]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : music_string.index(\"|\", music_string.index(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"|\") + 1 : music_string.index(\"|\", music_string.index(\"\
    |\") + 1)]\n    music_string = music_string[music_string.index(\"|\") + 1 : music_string.index(\"\
    |\", music_string.\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf2qkvr1h.jl:30\nin expression starting at\
    \ /tmp/tmpf2qkvr1h.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7aex2qt4.jl:1\nin expression starting at /tmp/tmp7aex2qt4.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\\n\")\n    music_string = music_string.strip(\"\
    \\r\")\n    music_string = music_string.strip(\"\\t\")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\" \")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\\n\")\n    music_string = music_string.strip(\"\
    \\r\")\n    music_string = music_string.strip(\"\\t\")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\" \")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\\n\")\n    music_string = music_string.strip(\"\
    \\r\")\n    music_string = music_string.strip(\"\\t\")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\" \")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\\n\")\n    music_string = music_string.strip(\"\
    \\r\")\n    music_string = music_string.strip(\"\\t\")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\" \")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = \nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn6cyfsp9.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn6cyfsp9.jl:1\n\
    in expression starting at /tmp/tmpn6cyfsp9.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.replace(' ', '')\n    music_string = music_string.replace('|',\
    \ '')\n    music_string = music_string.replace('o', '')\n    music_string = music_string.replace('.',\
    \ '')\n    music_string = music_string.replace('o|', '')\n    music_string = music_string.replace('.|',\
    \ '')\n    music_string = music_string.replace('o|', '')\n    music_string = music_string.replace('o|',\
    \ '')\n    music_string = music_string.replace('o|', '')\n    music_string = music_string.replace('o|',\
    \ '')\n    music_string = music_string.replace('o|', '')\n    music_string = music_string.replace('o|',\
    \ '')\n    music_string = music_string.replace('o|', '')\n    music_string = music_string.replace('o|',\
    \ '')\n    music_string = music_string.replace('o|', '')\n    music_string = music_string.replace('o|',\
    \ '')\n    music_string = music_string.replace('o|', '')\n    music_string = music_string.replace('o|',\
    \ '')\n    music_string = music_string.replace('o|', '')\n    music_string = music_string.replace('o|',\
    \ '')\n    music_string = music_string.replace('o|', '')\n    music_string = music_string.replace('o|',\
    \ '')\n    music_string = music_string.replace('o|', '')\n    music_string = music_string.replace('o|',\
    \ '')\n    music_string = music_string.replace('o|', '')\n    music_string = music_string.replace('o|',\
    \ '')\n    music_string = music_string.replace('o|', '')\n    music_string = music_string.replace('o|',\
    \ '')\n    music_string = music_string.replace('o|', '')\n    music_string = music_string.replace('o|',\
    \ '')\n    music_string = music_string.replace('o|', '')\n    music_string = music_string.replace('o|',\
    \ '')\n    music_string = music_string.replace('o|', '')\n    music_string = music_string.replace('o|',\
    \ '')\n    music_string = music_string.replace('o|', '')\n    music_string = music_string.replace('o|',\
    \ '')\n    music_string = music_string.replace('o|', '')\n    music_string = music_string.replace('o|',\
    \ '')\n    music_string = music_string.replace('o|', '')\n    music_string = music_string.replace('o|',\
    \ '')\n    music_string = music_string.replace('o|', '')\n    music_string = music_string.replace('o|',\
    \ '')\n    music_string = music_string.replace('o|', '')\n    \nusing Test\n\n\
    @testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid empty character literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx203qzus.jl:14\nin expression starting at\
    \ /tmp/tmpx203qzus.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find('|'):]\n\
    \    music_string = music_string[music_string.find('|'):]\n    music_string =\
    \ music_string[music_string.find('|'):]\n    music_string = music_string[music_string.find('|'):]\n\
    \    music_string = music_string[music_string.find('|'):]\n    music_string =\
    \ music_string[music_string.find('|'):]\n    music_string = music_string[music_string.find('|'):]\n\
    \    music_string = music_string[music_string.find('|'):]\n    music_string =\
    \ music_string[music_string.find('|'):]\n    music_string = music_string[music_string.find('|'):]\n\
    \    music_string = music_string[music_string.find('|'):]\n    music_string =\
    \ music_string[music_string.find('|'):]\n    music_string = music_string[music_string.find('|'):]\n\
    \    music_string = music_string[music_string.find('|'):]\n    music_string =\
    \ music_string[music_string.find('|'):]\n    music_string = music_string[music_string.find('|'):]\n\
    \    music_string = music_string[music_string.find('|'):]\n    music_string =\
    \ music_string[music_string.find('|'):]\n    music_string = music_string[music_string.find('|'):]\n\
    \    music_string = music_string[music_string.find('|'):]\n    music_string =\
    \ music_string[music_string.find('|'):]\n    music_string = music_string[music_string.find('|'):]\n\
    \    music_string = music_string[music_string.find('|'):]\n    music_string =\
    \ music_string[music_string.find('|'):]\n    music_string = music_string[music_string.find('|'):]\n\
    \    music_string = music_string[music_string.find('|'):]\n    music_string =\
    \ music_string[music_string.find('|'):]\n    music_string = music_string[music_string.find('|'):]\n\
    \    music_string = music_string[music_string.find('|'):]\n    music_string =\
    \ music_string[music_string.find('|'):]\n    music_string = music_string[music_string.find('|'):]\n\
    \    music_string = music_string\nusing Test\n\n@testset begin\n\ncandidate =\
    \ parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"music_string.find('|'):\"\
    \ range expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9abdt8ed.jl:15\n\
    in expression starting at /tmp/tmp9abdt8ed.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn4u6rbn8.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn4u6rbn8.jl:1\n\
    in expression starting at /tmp/tmpn4u6rbn8.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpk0wrmk0o.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk0wrmk0o.jl:1\n\
    in expression starting at /tmp/tmpk0wrmk0o.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find(\"|\"\
    ) + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 : music_string.find(\"|\", music_string.find(\"\
    |\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 : music_string.find(\"|\", music_string.find(\"\
    |\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t\
    @test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") ==\
    \ [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpkb9ylkr4.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpkb9ylkr4.jl:1\n\
    in expression starting at /tmp/tmpkb9ylkr4.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_notes = music_string.split(\"|\")\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes.map(parse_note)\n    music_notes\
    \ = music_notes.map(x -> x * 4)\n    music_notes = music_notes.sum\n    return\
    \ music_notes\nend\n</cell>\n<code language=julia-1.5>\n# %load solutions/parse_music.jl\n\
    </cell>\n<text>\nExercise 2\nWrite a function which takes a string representing\
    \ musical notes and returns list of integers representing how many beats does\
    \ each note last.\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t\
    @test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") ==\
    \ [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp68u11hsy.jl:22\nin expression starting at\
    \ /tmp/tmp68u11hsy.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9xplbvyc.jl:1\nin expression starting at /tmp/tmp9xplbvyc.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm90wsvhi.jl:1\nin expression starting at /tmp/tmpm90wsvhi.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : music_string.index(\"|\", music_string.index(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"o\") + 1 : music_string.index(\"o\", music_string.index(\"\
    o\") + 1)]\n    music_string = music_string[music_string.index(\"o\") + 1 : music_string.index(\"\
    o\", music_string.index(\"o\") + 1)]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 : music_string.index(\"o\", music_string.index(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"o\") + 1 : music_string.index(\"o\", music_string.index(\"\
    o\") + 1)]\n    music_string = music_string[music_string.index(\"o\") + 1 : music_string.index(\"\
    o\", music_string.index(\"o\") + 1)]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 : music_string.index(\"o\", music_string.index(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"o\") + 1 : music_string.index(\"o\", music_string.index(\"\
    o\") + 1)]\n    music_string = music_string[music_string.index(\"o\") + 1 : music_string.index(\"\
    o\", music_string.index(\"o\") + 1)]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 : music_string.index(\"o\", music_string.index(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"o\") + 1 : music_string.index(\"o\", music_string.index(\"\
    o\") + 1)]\n    music_string = music_string[music_string.index(\"o\") + 1 : music_string.index(\"\
    o\", music_string.index(\"o\") + 1)]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 : music_string.index(\"o\", music_string.index(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"o\") + 1 : music_string.index(\"o\", music_string.index(\"\
    o\") + 1)]\n    music_string = music_string[music_string.index(\"o\") + 1 : music_string.index(\"\
    o\", music_string.\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkjzj9to1.jl:30\nin expression starting at\
    \ /tmp/tmpkjzj9to1.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 .. music_string.findfirst(\"o\")]\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 .. music_string.findfirst(\"o\")]\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 .. music_string.findfirst(\"o\")]\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 .. music_string.findfirst(\"o\")]\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 .. music_string.findfirst(\"o\")]\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 .. music_string.findfirst(\"o\")]\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 .. music_string.findfirst(\"o\")]\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 .. music_string.findfirst(\"o\")]\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 .. music_string.findfirst(\"o\")]\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 .. music_string.findfirst(\"o\")]\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 .. music_string.findfirst(\"o\")]\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 .. music_string.findfirst(\"o\")]\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 .. music_string.findfirst(\"o\")]\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 .. music_string.findfirst(\"o\")]\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 .. music_string.findfirst(\"o\")]\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 .. music_string.findfirst(\"o\")]\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 .. music_string.findfirst(\"o\")]\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 .. music_string.findfirst(\"o\")]\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpbigea6lh.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbigea6lh.jl:1\n\
    in expression starting at /tmp/tmpbigea6lh.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpozg51_l2.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpozg51_l2.jl:1\n\
    in expression starting at /tmp/tmpozg51_l2.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find(\"|\"\
    ) + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\".\") + 1 : music_string.find(\"\
    o\", music_string.find(\".\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = \nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmptf_aybdj.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptf_aybdj.jl:1\n\
    in expression starting at /tmp/tmptf_aybdj.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[music_string.end-1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[music_string.end-1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[music_string.end-1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[music_string.end-1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[music_string.end-1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[music_string.end-1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[music_string.end-1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[music_string.end-1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[music_string.end-1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[music_string.end-1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[music_string.end-1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[music_string.end-1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[music_string.end-1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[music_string.end-1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[music_string.end-1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[music_string.end-1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[\nusing Test\n\n@testset begin\n\ncandidate =\
    \ parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy9o52hol.jl:1\nin expression starting at /tmp/tmpy9o52hol.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 .. music_string.findfirst(\"o\")]\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 .. music_string.findfirst(\"o\")]\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 .. music_string.findfirst(\"o\")]\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 .. music_string.findfirst(\"o\")]\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 .. music_string.findfirst(\"o\")]\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 .. music_string.findfirst(\"o\")]\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 .. music_string.findfirst(\"o\")]\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 .. music_string.findfirst(\"o\")]\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 .. music_string.findfirst(\"o\")]\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 .. music_string.findfirst(\"o\")]\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 .. music_string.findfirst(\"o\")]\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 .. music_string.findfirst(\"o\")]\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 .. music_string.findfirst(\"o\")]\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 .. music_string.findfirst(\"o\")]\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 .. music_string.findfirst(\"o\")]\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 .. music_string.findfirst(\"o\")]\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 .. music_string.findfirst(\"o\")]\n    music_string = music_string[music_string.findfirst(\"\
    |\") + 1 .. music_string.findfirst(\"o\")]\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppljgbkc2.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppljgbkc2.jl:1\n\
    in expression starting at /tmp/tmppljgbkc2.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip()\n    music_string = music_string.strip(\"\\n\")\n   \
    \ music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp73lfs7lg.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp73lfs7lg.jl:1\n\
    in expression starting at /tmp/tmp73lfs7lg.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv8libvho.jl:1\nin expression starting at /tmp/tmpv8libvho.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find(\"|\"\
    ) + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 : music_string.find(\"|\", music_string.find(\"\
    |\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 : music_string.find(\"|\", music_string.find(\"\
    |\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t\
    @test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") ==\
    \ [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpme4wuyvn.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpme4wuyvn.jl:1\n\
    in expression starting at /tmp/tmpme4wuyvn.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find(\"|\"\
    ) + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\".\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpt9mh0vmt.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpt9mh0vmt.jl:1\n\
    in expression starting at /tmp/tmpt9mh0vmt.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqqcagl8w.jl:1\nin expression starting at /tmp/tmpqqcagl8w.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find(\"|\"\
    ) + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 : music_string.find(\"|\", music_string.find(\"\
    |\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 : music_string.find(\"|\", music_string.find(\"\
    |\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t\
    @test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") ==\
    \ [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp2zpsre2l.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2zpsre2l.jl:1\n\
    in expression starting at /tmp/tmp2zpsre2l.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.findFirst(\"\
    \ \")]\n    music_string = music_string[music_string.findFirst(\"|\")]\n    music_string\
    \ = music_string[music_string.findFirst(\".\")]\n    music_string = music_string[music_string.findFirst(\"\
    o\")]\n    music_string = music_string[music_string.findFirst(\"o|\")]\n    music_string\
    \ = music_string[music_string.findFirst(\"|o\")]\n    music_string = music_string[music_string.findFirst(\"\
    |o|\")]\n    music_string = music_string[music_string.findFirst(\"|.|\")]\n  \
    \  music_string = music_string[music_string.findFirst(\"|.|o\")]\n    music_string\
    \ = music_string[music_string.findFirst(\"|.|o|\")]\n    music_string = music_string[music_string.findFirst(\"\
    |.|.|\")]\n    music_string = music_string[music_string.findFirst(\"|.|.|o\")]\n\
    \    music_string = music_string[music_string.findFirst(\"|.|.|o|\")]\n    music_string\
    \ = music_string[music_string.findFirst(\"|.|.|.|\")]\n    music_string = music_string[music_string.findFirst(\"\
    |.|.|.|o\")]\n    music_string = music_string[music_string.findFirst(\"|.|.|.|o|\"\
    )]\n    music_string = music_string[music_string.findFirst(\"|.|.|.|.|\")]\n \
    \   music_string = music_string[music_string.findFirst(\"|.|.|.|.|o\")]\n    music_string\
    \ = music_string[music_string.findFirst(\"|.|.|.|.|o|\")]\n    music_string =\
    \ music_string[music_string.findFirst(\"|.|.|.|.|.|\")]\n    music_string = music_string[music_string.findFirst(\"\
    |.|.|.|.|.|o\")]\n    music_string = music_string[music_string.findFirst(\"|.|.|.|.|.|o|\"\
    )]\n    music_string = music_string[music_string.findFirst(\"|.|.|.|.|.|.|\")]\n\
    \    music_string = music_string[music_string.findFirst(\"|.|.|.|.|.|.|o\")]\n\
    \    music_string = music_string[music_string.findFirst(\"|.|.|.|\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplzfoovnp.jl:45\nin expression starting at\
    \ /tmp/tmplzfoovnp.jl:45\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip()\n    music_string = music_string.strip(\"\\n\")\n   \
    \ music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpcu0q1_ix.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcu0q1_ix.jl:1\n\
    in expression starting at /tmp/tmpcu0q1_ix.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppfx7skqy.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppfx7skqy.jl:1\n\
    in expression starting at /tmp/tmppfx7skqy.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv2qejgrm.jl:1\nin expression starting at /tmp/tmpv2qejgrm.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip()\n    music_string = music_string[music_string.rfind('|'):]\n\
    \    music_string = music_string[music_string.rfind('o'):]\n    music_string =\
    \ music_string[music_string.rfind('|'):]\n    music_string = music_string[music_string.rfind('o'):]\n\
    \    music_string = music_string[music_string.rfind('|'):]\n    music_string =\
    \ music_string[music_string.rfind('o'):]\n    music_string = music_string[music_string.rfind('|'):]\n\
    \    music_string = music_string[music_string.rfind('o'):]\n    music_string =\
    \ music_string[music_string.rfind('|'):]\n    music_string = music_string[music_string.rfind('o'):]\n\
    \    music_string = music_string[music_string.rfind('|'):]\n    music_string =\
    \ music_string[music_string.rfind('o'):]\n    music_string = music_string[music_string.rfind('|'):]\n\
    \    music_string = music_string[music_string.rfind('o'):]\n    music_string =\
    \ music_string[music_string.rfind('|'):]\n    music_string = music_string[music_string.rfind('o'):]\n\
    \    music_string = music_string[music_string.rfind('|'):]\n    music_string =\
    \ music_string[music_string.rfind('o'):]\n    music_string = music_string[music_string.rfind('|'):]\n\
    \    music_string = music_string[music_string.rfind('o'):]\n    music_string =\
    \ music_string[music_string.rfind('|'):]\n    music_string = music_string[music_string.rfind('o'):]\n\
    \    music_string = music_string[music_string.rfind('|'):]\n    music_string =\
    \ music_string[music_string.rfind('o'):]\n    music_string = music_string[music_string.rfind('|'):]\n\
    \    music_string = music_string[music_string.rfind('o'):]\n    music_string =\
    \ music_string[music_string.rfind('|'):]\n    music_string = music_string[music_string.rfind('o'):]\n\
    \    music_string = music_string[music_string.rfind('|'):]\n    music_string =\
    \ music_string[music_\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"music_string.rfind('|'):\"\
    \ range expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpe66u7bfe.jl:15\n\
    in expression starting at /tmp/tmpe66u7bfe.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : music_string.index(\"|\", music_string.index(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"|\") + 1 : music_string.index(\"|\", music_string.index(\"\
    |\") + 1)]\n    music_string = music_string[music_string.index(\"|\") + 1 : music_string.index(\"\
    |\", music_string.index(\"|\") + 1)]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : music_string.index(\"|\", music_string.index(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"|\") + 1 : music_string.index(\"|\", music_string.index(\"\
    |\") + 1)]\n    music_string = music_string[music_string.index(\"|\") + 1 : music_string.index(\"\
    |\", music_string.index(\"|\") + 1)]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : music_string.index(\"|\", music_string.index(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"|\") + 1 : music_string.index(\"|\", music_string.index(\"\
    |\") + 1)]\n    music_string = music_string[music_string.index(\"|\") + 1 : music_string.index(\"\
    |\", music_string.index(\"|\") + 1)]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : music_string.index(\"|\", music_string.index(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"|\") + 1 : music_string.index(\"|\", music_string.index(\"\
    |\") + 1)]\n    music_string = music_string[music_string.index(\"|\") + 1 : music_string.index(\"\
    |\", music_string.index(\"|\") + 1)]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : music_string.index(\"|\", music_string.index(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"|\") + 1 : music_string.index(\"|\", music_string.index(\"\
    |\") + 1)]\n    music_string = music_string[music_string.index(\"|\") + 1 : music_string.index(\"\
    |\", music_string.\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8_tpu8ks.jl:30\nin expression starting at\
    \ /tmp/tmp8_tpu8ks.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdgetf1t9.jl:1\nin expression starting at /tmp/tmpdgetf1t9.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : string(music_string).end]\n    music_\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpuojxrkc6.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpuojxrkc6.jl:1\n\
    in expression starting at /tmp/tmpuojxrkc6.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_list = music_string.split(\" \")\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpcs9pnljm.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcs9pnljm.jl:1\n\
    in expression starting at /tmp/tmpcs9pnljm.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip()\n    music_string = music_string.strip(\"\\n\")\n   \
    \ music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpvadavh22.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvadavh22.jl:1\n\
    in expression starting at /tmp/tmpvadavh22.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp36hamt24.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp36hamt24.jl:1\n\
    in expression starting at /tmp/tmp36hamt24.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string[1:end-1]\n    music_string = music_string[music_string != \"\
    o\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \".\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp58q89d5z.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp58q89d5z.jl:1\n\
    in expression starting at /tmp/tmp58q89d5z.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string[1:] # remove first symbol\n    music_string = music_string[music_string.find(\"\
    |\"):] # remove last symbol\n    music_string = music_string[music_string.find(\"\
    |\"):music_string.find(\"|\")+1] # remove last symbol\n    music_string = music_string[music_string.find(\"\
    |\"):music_string.find(\"|\")+1] # remove last symbol\n    music_string = music_string[music_string.find(\"\
    |\"):music_string.find(\"|\")+1] # remove last symbol\n    music_string = music_string[music_string.find(\"\
    |\"):music_string.find(\"|\")+1] # remove last symbol\n    music_string = music_string[music_string.find(\"\
    |\"):music_string.find(\"|\")+1] # remove last symbol\n    music_string = music_string[music_string.find(\"\
    |\"):music_string.find(\"|\")+1] # remove last symbol\n    music_string = music_string[music_string.find(\"\
    |\"):music_string.find(\"|\")+1] # remove last symbol\n    music_string = music_string[music_string.find(\"\
    |\"):music_string.find(\"|\")+1] # remove last symbol\n    music_string = music_string[music_string.find(\"\
    |\"):music_string.find(\"|\")+1] # remove last symbol\n    music_string = music_string[music_string.find(\"\
    |\"):music_string.find(\"|\")+1] # remove last symbol\n    music_string = music_string[music_string.find(\"\
    |\"):music_string.find(\"|\")+1] # remove last symbol\n    music_string = music_string[music_string.find(\"\
    |\"):music_string.find(\"|\")+1] # remove last symbol\n    music_string = music_string[music_string.find(\"\
    |\"):music_string.find(\"|\")+1] # remove last symbol\n    music_string = music_string[music_string.find(\"\
    |\"):music_string.find(\"|\")+1] # remove last symbol\n    music_string = music_string[music_string.find(\"\
    |\"):music_string.find(\"|\")+1] # remove last symbol\n    music_string = music_string[music_string.find(\"\
    |\"):music_string.find(\"|\")+1] # remove last symbol\n    music_string = music_string[music_string.find(\"\
    |\"):music_string.find(\"|\")+1] # remove last symbol\n    music_string = music_string[music_string.find(\"\
    |\"):music_string.find(\"|\")+1] # remove last symbol\n    music_string = music_string[music_string.find(\"\
    \nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpm5w57u5_.jl:14\nin expression\
    \ starting at /tmp/tmpm5w57u5_.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_notes = music_string.split(\"|\")\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6n7873ii.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6n7873ii.jl:1\n\
    in expression starting at /tmp/tmp6n7873ii.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip()\n    music_notes = music_string.split(\"|\")\n    music_notes\
    \ = music_notes[music_notes.len()/2:end]\n    music_notes = music_notes.map(x\
    \ => x.trim())\n    music_notes = music_notes.map(x => x.split(\"o\"))\n    music_notes\
    \ = music_notes.map(x => x.map(x => x.toInt))\n    music_notes = music_notes.map(x\
    \ => x.map(x => x.sum))\n    music_notes = music_notes.map(x => x.map(x => x/4))\n\
    \    music_notes = music_notes.map(x => x.map(x => x.sum))\n    music_notes =\
    \ music_notes.map(x => x.map(x => x/4))\n    music_notes = music_notes.map(x =>\
    \ x.map(x => x.sum))\n    music_notes = music_notes.map(x => x.map(x => x/4))\n\
    \    music_notes = music_notes.map(x => x.map(x => x.sum))\n    music_notes =\
    \ music_notes.map(x => x.map(x => x/4))\n    music_notes = music_notes.map(x =>\
    \ x.map(x => x.sum))\n    music_notes = music_notes.map(x => x.map(x => x/4))\n\
    \    music_notes = music_notes.map(x => x.map(x => x.sum))\n    music_notes =\
    \ music_notes.map(x => x.map(x => x/4))\n    music_notes = music_notes.map(x =>\
    \ x.map(x => x.sum))\n    music_notes = music_notes.map(x => x.map(x => x/4))\n\
    \    music_notes = music_notes.map(x => x.map(x => x.sum))\n    music_notes =\
    \ music_notes.map(x => x.map(x => x/4))\n    music_notes = music_notes.map(x =>\
    \ x.map(x => x.sum))\n    music_notes = music_notes.map(x => x.map(x => x/4))\n\
    \    music_notes = music_notes.map(x => x.map(x => x.sum))\n    music_notes =\
    \ music_notes.map(x => x.map(x => x/4))\n    music_notes = music_notes.map(x =>\
    \ x.map(x => x.sum))\n    music_notes = music_note\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpcgmwfj77.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcgmwfj77.jl:1\n\
    in expression starting at /tmp/tmpcgmwfj77.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find(\"|\"\
    ) + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 : music_string.find(\"|\", music_string.find(\"\
    |\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 : music_string.find(\"|\", music_string.find(\"\
    |\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t\
    @test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") ==\
    \ [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpaictpnjr.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpaictpnjr.jl:1\n\
    in expression starting at /tmp/tmpaictpnjr.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgczllv7y.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgczllv7y.jl:1\n\
    in expression starting at /tmp/tmpgczllv7y.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmcv8ykse.jl:1\nin expression starting at /tmp/tmpmcv8ykse.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\") + 1 .. end]\n    music_string = music_string[music_string.index(\"o\") +\
    \ 1 .. end]\n    music_string = music_string[music_string.index(\"|\") + 1 ..\
    \ end]\n    music_string = music_string[music_string.index(\"o\") + 1 .. end]\n\
    \    music_string = music_string[music_string.index(\"|\") + 1 .. end]\n    music_string\
    \ = music_string[music_string.index(\"o\") + 1 .. end]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 .. end]\n    music_string = music_string[music_string.index(\"o\") +\
    \ 1 .. end]\n    music_string = music_string[music_string.index(\"|\") + 1 ..\
    \ end]\n    music_string = music_string[music_string.index(\"o\") + 1 .. end]\n\
    \    music_string = music_string[music_string.index(\"|\") + 1 .. end]\n    music_string\
    \ = music_string[music_string.index(\"o\") + 1 .. end]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 .. end]\n    music_string = music_string[music_string.index(\"o\") +\
    \ 1 .. end]\n    music_string = music_string[music_string.index(\"|\") + 1 ..\
    \ end]\n    music_string = music_string[music_string.index(\"o\") + 1 .. end]\n\
    \    music_string = music_string[music_string.index(\"|\") + 1 .. end]\n    music_string\
    \ = music_string[music_string.index(\"o\") + 1 .. end]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 .. end]\n    music_string = music_string[music_string.index(\"o\") +\
    \ 1 .. end]\n    music_string = music_string[music_string.index(\"|\") + 1 ..\
    \ end]\n    music_string = music_string[music_string.index(\"o\") + 1 .. end]\n\
    \    music_string = music_string[music_string.index(\"|\") + 1 .. end]\n    music_string\
    \ = music_string[music_string.index(\"o\") + 1 .. end]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 .. end]\n    music_\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgoofdms4.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgoofdms4.jl:1\n\
    in expression starting at /tmp/tmpgoofdms4.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_list = music_string.split(\" \")\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpzria3sac.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzria3sac.jl:1\n\
    in expression starting at /tmp/tmpzria3sac.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_list = music_string.split(' ')\n    music_list\
    \ = filter(x -> x != ' ', music_list)\n    music_list = music_list[music_list.index('|'):end]\n\
    \    music_list = music_list[music_list.index('o'):end]\n    music_list = music_list[music_list.index('|'):end]\n\
    \    music_list = music_list[music_list.index('o'):end]\n    music_list = music_list[music_list.index('|'):end]\n\
    \    music_list = music_list[music_list.index('o'):end]\n    music_list = music_list[music_list.index('|'):end]\n\
    \    music_list = music_list[music_list.index('o'):end]\n    music_list = music_list[music_list.index('|'):end]\n\
    \    music_list = music_list[music_list.index('o'):end]\n    music_list = music_list[music_list.index('|'):end]\n\
    \    music_list = music_list[music_list.index('o'):end]\n    music_list = music_list[music_list.index('|'):end]\n\
    \    music_list = music_list[music_list.index('o'):end]\n    music_list = music_list[music_list.index('|'):end]\n\
    \    music_list = music_list[music_list.index('o'):end]\n    music_list = music_list[music_list.index('|'):end]\n\
    \    music_list = music_list[music_list.index('o'):end]\n    music_list = music_list[music_list.index('|'):end]\n\
    \    music_list = music_list[music_list.index('o'):end]\n    music_list = music_list[music_list.index('|'):end]\n\
    \    music_list = music_list[music_list.index('o'):end]\n    music_list = music_list[music_list.index('|'):end]\n\
    \    music_list = music_list[music_list.index('o'):end]\n    music_list = music_list[music_list.index('|'):end]\n\
    \    music_list = music_list[music_list.index('o'):end]\n    music_list = music_list[music_list.index('|'):end]\n\
    \    music_list = music_list[music_list.index('o'):end]\n    music_list = music_list[music_list.index('|'):end]\n\
    \    music_list = music_list[music_list.index('o'):end]\n    music_list = music_list[music_list.index('|'):end]\n\
    \    music_list = music_list[music_list.index('o'):end]\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7gmjt1zh.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7gmjt1zh.jl:1\n\
    in expression starting at /tmp/tmp7gmjt1zh.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpfw7_hbfd.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfw7_hbfd.jl:1\n\
    in expression starting at /tmp/tmpfw7_hbfd.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string[1:end-1]\n    music_string = replace(music_string, \"o\", \"\
    0\")\n    music_string = replace(music_string, \"|\", \"0\")\n    music_string\
    \ = replace(music_string, \".\", \"0\")\n    music_string = replace(music_string,\
    \ \"0\", \"o\")\n    music_string = replace(music_string, \"1\", \"o|\")\n   \
    \ music_string = replace(music_string, \"2\", \".|\")\n    music_string = replace(music_string,\
    \ \"3\", \".|\")\n    music_string = replace(music_string, \"4\", \".|\")\n  \
    \  music_string = replace(music_string, \"5\", \".|\")\n    music_string = replace(music_string,\
    \ \"6\", \".|\")\n    music_string = replace(music_string, \"7\", \".|\")\n  \
    \  music_string = replace(music_string, \"8\", \".|\")\n    music_string = replace(music_string,\
    \ \"9\", \".|\")\n    music_string = replace(music_string, \"10\", \".|\")\n \
    \   music_string = replace(music_string, \"11\", \".|\")\n    music_string = replace(music_string,\
    \ \"12\", \".|\")\n    music_string = replace(music_string, \"13\", \".|\")\n\
    \    music_string = replace(music_string, \"14\", \".|\")\n    music_string =\
    \ replace(music_string, \"15\", \".|\")\n    music_string = replace(music_string,\
    \ \"16\", \".|\")\n    music_string = replace(music_string, \"17\", \".|\")\n\
    \    music_string = replace(music_string, \"18\", \".|\")\n    music_string =\
    \ replace(music_string, \"19\", \".|\")\n    music_string = replace(music_string,\
    \ \"20\", \".|\")\n    music_string = replace(music_string, \"21\", \".|\")\n\
    \    music_string = replace(music_string, \"22\", \".|\")\n    music_string =\
    \ replace(music_string, \"23\", \".|\")\n    music_string = replace(music_string,\
    \ \"24\", \".|\")\n    music_string = replace(music_string, \"25\", \".|\")\n\
    \    music_string = replace(music_string, \"26\", \".|\")\n    music_string =\
    \ replace(music_string, \"27\", \".|\")\n    music_string = replace(music_string,\
    \ \"28\", \".|\")\n    music_string = replace(music_string, \"29\", \".|\")\n\
    \    music_string = replace(music_string, \"30\", \".|\")\n    music_string =\
    \ replace(music_string, \"31\", \".|\")\n    music_string = replace(music_string,\
    \ \"32\", \".|\")\n    music_\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppmz0hi1i.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppmz0hi1i.jl:1\n\
    in expression starting at /tmp/tmppmz0hi1i.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_list = music_string.split(\" \")\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\n    music_list\
    \ = music_list[music_list.length .. end]\n    music_list = music_list[music_list.length\
    \ .. end]\n    music_list = music_list[music_list.length .. end]\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdfle1pr4.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdfle1pr4.jl:1\n\
    in expression starting at /tmp/tmpdfle1pr4.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.findFirst(\"\
    \ \")]\n    music_string = music_string[music_string.findFirst(\"|\")]\n    music_string\
    \ = music_string[music_string.findFirst(\"o\")]\n    music_string = music_string[music_string.findFirst(\"\
    .\")]\n    music_string = music_string[music_string.findFirst(\"o\")]\n    music_string\
    \ = music_string[music_string.findFirst(\"o\")]\n    music_string = music_string[music_string.findFirst(\"\
    o\")]\n    music_string = music_string[music_string.findFirst(\"o\")]\n    music_string\
    \ = music_string[music_string.findFirst(\"o\")]\n    music_string = music_string[music_string.findFirst(\"\
    o\")]\n    music_string = music_string[music_string.findFirst(\"o\")]\n    music_string\
    \ = music_string[music_string.findFirst(\"o\")]\n    music_string = music_string[music_string.findFirst(\"\
    o\")]\n    music_string = music_string[music_string.findFirst(\"o\")]\n    music_string\
    \ = music_string[music_string.findFirst(\"o\")]\n    music_string = music_string[music_string.findFirst(\"\
    o\")]\n    music_string = music_string[music_string.findFirst(\"o\")]\n    music_string\
    \ = music_string[music_string.findFirst(\"o\")]\n    music_string = music_string[music_string.findFirst(\"\
    o\")]\n    music_string = music_string[music_string.findFirst(\"o\")]\n    music_string\
    \ = music_string[music_string.findFirst(\"o\")]\n    music_string = music_string[music_string.findFirst(\"\
    o\")]\n    music_string = music_string[music_string.findFirst(\"o\")]\n    music_string\
    \ = music_string[music_string.findFirst(\"o\")]\n    music_string = music_string[music_string.findFirst(\"\
    o\")]\n    music_string = music_string[music_string.findFirst(\"o\")]\n    music_string\
    \ = music_string[music_string.findFirst(\"o\")]\n    music_string = music_string[music_string.findFirst(\"\
    o\")]\n    music_string = music_string[music_string.findFirst(\"o\")]\n    music_string\
    \ = music_string[music_string.\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdu0wopnk.jl:1\nin expression starting at /tmp/tmpdu0wopnk.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.start-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9ukh9ybf.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9ukh9ybf.jl:1\n\
    in expression starting at /tmp/tmp9ukh9ybf.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3nia_tx5.jl:1\nin expression starting at /tmp/tmp3nia_tx5.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+music_string.index(\"|\")+1]\n    music_string = music_string[music_string.index(\"\
    |\"):music_string.index(\"|\")+music_string.index(\"|\")+2]\n    music_string\
    \ = music_string[music_string.index(\"|\"):music_string.index(\"|\")+music_string.index(\"\
    |\")+3]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+music_string.index(\"|\")+4]\n    music_string = music_string[music_string.index(\"\
    |\"):music_string.index(\"|\")+music_string.index(\"|\")+5]\n    music_string\
    \ = music_string[music_string.index(\"|\"):music_string.index(\"|\")+music_string.index(\"\
    |\")+6]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+music_string.index(\"|\")+7]\n    music_string = music_string[music_string.index(\"\
    |\"):music_string.index(\"|\")+music_string.index(\"|\")+8]\n    music_string\
    \ = music_string[music_string.index(\"|\"):music_string.index(\"|\")+music_string.index(\"\
    |\")+9]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+music_string.index(\"|\")+10]\n    music_string = music_string[music_string.index(\"\
    |\"):music_string.index(\"|\")+music_string.index(\"|\")+11]\n    music_string\
    \ = music_string[music_string.index(\"|\"):music_string.index(\"|\")+music_string.index(\"\
    |\")+12]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+music_string.index(\"|\")+13]\n    music_string = music_string[music_string.index(\"\
    |\"):music_string.index(\"|\")+music_string.index(\"|\")+14]\n    music_string\
    \ = music_string[music_string.index(\"|\"):music_string.index(\"|\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"music_string.index(\"\
    |\"):\" range expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1vdihe0n.jl:15\n\
    in expression starting at /tmp/tmp1vdihe0n.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string.strip\n\
    \    music_string = music_string[music_string.end-1:end]\n    music_string = music_string[1:end]\n\
    \    music_string = music_string.strip\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string.strip\n\
    \    music_string = music_string[music_string.end-1:end]\n    music_string = music_string[1:end]\n\
    \    music_string = music_string.strip\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string.strip\n\
    \    music_string = music_string[music_string.end-1:end]\n    music_string = music_string[1:end]\n\
    \    music_string = music_string.strip\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string.strip\n\
    \    music_string = music_string[music_string.end-1:end]\n    music_string = music_string[1:end]\n\
    \    music_string = music_string.strip\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string.strip\n\
    \    music_string = music_string[music_string.end-1:end]\n    music_string = music_string[1:end]\n\
    \    music_string = music_string.strip\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string.strip\n\
    \    music_string = music_string[music_string.end-1:end]\n    music_string = music_string[1:end]\n\
    \    music_string = music_string.strip\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string.strip\n\
    \    music_string = music_string[music_string.end-1:end]\n    music_string = music_string[1:end]\n\
    \    music_string = music_string.strip\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    musi\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp1zv3plu0.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1zv3plu0.jl:1\n\
    in expression starting at /tmp/tmp1zv3plu0.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = ''.join(music_string)\n    music_string = music_string.strip()\n    music_string\
    \ = music_string.replace(' ', '')\n    music_string = music_string.replace('|',\
    \ '')\n    music_string = music_string.replace('o', '')\n    music_string = music_string.replace('.',\
    \ '')\n    music_string = music_string.replace(' ', '')\n    music_string = music_string.replace('\
    \ ', '')\n    music_string = music_string.replace(' ', '')\n    music_string =\
    \ music_string.replace(' ', '')\n    music_string = music_string.replace(' ',\
    \ '')\n    music_string = music_string.replace(' ', '')\n    music_string = music_string.replace('\
    \ ', '')\n    music_string = music_string.replace(' ', '')\n    music_string =\
    \ music_string.replace(' ', '')\n    music_string = music_string.replace(' ',\
    \ '')\n    music_string = music_string.replace(' ', '')\n    music_string = music_string.replace('\
    \ ', '')\n    music_string = music_string.replace(' ', '')\n    music_string =\
    \ music_string.replace(' ', '')\n    music_string = music_string.replace(' ',\
    \ '')\n    music_string = music_string.replace(' ', '')\n    music_string = music_string.replace('\
    \ ', '')\n    music_string = music_string.replace(' ', '')\n    music_string =\
    \ music_string.replace(' ', '')\n    music_string = music_string.replace(' ',\
    \ '')\n    music_string = music_string.replace(' ', '')\n    music_string = music_string.replace('\
    \ ', '')\n    music_string = music_string.replace(' ', '')\n    music_string =\
    \ music_string.replace(' ', '')\n    music_string = music_string.replace(' ',\
    \ '')\n    music_string = music_string.replace(' ', '')\n    music_string = music_string.replace('\
    \ ', '')\n    music_string = music_string.replace(' ', '')\n    music_string =\
    \ music_string.replace(' ', '')\n    music_string = music_string.replace(' ',\
    \ '')\n    music_string = music_string.replace(' ', '')\n    music_string = music_string.replace('\
    \ ', '')\n    music_string = music_string.replace(' ', '')\n    music_string =\
    \ music_string.replace(' ', '')\n    music_string = music_string.replace(' ',\
    \ '')\n    music_string = music_string.replace(' ', '')\n    music_string = music_string.replace('\
    \ ', '')\n    music_string = music_string.replace(' ', '')\n    music_string =\
    \ music_string.replace(' ', '')\n    music_string = music_string.replace(' ',\
    \ '')\n    music_string = music_string.replace(' \nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid empty character literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz_e8_iro.jl:14\nin expression starting at\
    \ /tmp/tmpz_e8_iro.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip()\n    music_string = music_string.strip(\"\\n\")\n   \
    \ music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpf1eaoz4v.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpf1eaoz4v.jl:1\n\
    in expression starting at /tmp/tmpf1eaoz4v.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_notes = music_string.split(\"|\")\n    music_notes\
    \ = music_notes[music_notes.len()/2:end]\n    music_notes = music_notes.map(x\
    \ => x.strip)\n    music_notes = music_notes.map(x => x.split(\"o\"))\n    music_notes\
    \ = music_notes.map(x => x.map(x => x.toInt))\n    music_notes = music_notes.map(x\
    \ => x.map(x => x.sum))\n    music_notes = music_notes.map(x => x.map(x => x.max))\n\
    \    music_notes = music_notes.map(x => x.map(x => x.min))\n    music_notes =\
    \ music_notes.map(x => x.map(x => x.sum))\n    music_notes = music_notes.map(x\
    \ => x.map(x => x.max))\n    music_notes = music_notes.map(x => x.map(x => x.min))\n\
    \    music_notes = music_notes.map(x => x.map(x => x.sum))\n    music_notes =\
    \ music_notes.map(x => x.map(x => x.max))\n    music_notes = music_notes.map(x\
    \ => x.map(x => x.min))\n    music_notes = music_notes.map(x => x.map(x => x.sum))\n\
    \    music_notes = music_notes.map(x => x.map(x => x.max))\n    music_notes =\
    \ music_notes.map(x => x.map(x => x.min))\n    music_notes = music_notes.map(x\
    \ => x.map(x => x.sum))\n    music_notes = music_notes.map(x => x.map(x => x.max))\n\
    \    music_notes = music_notes.map(x => x.map(x => x.min))\n    music_notes =\
    \ music_notes.map(x => x.map(x => x.sum))\n    music_notes = music_notes.map(x\
    \ => x.map(x => x.max))\n    music_notes = music_notes.map(x => x.map(x => x.min))\n\
    \    music_notes = music_notes.map(x => x.map(x => x.sum))\n    music_notes =\
    \ music_notes.map(x => x.map(x => x.max))\n    music_notes = music_notes.map(x\
    \ => x.map(x => x.min\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4lnt3lhk.jl:41\nin expression starting at\
    \ /tmp/tmp4lnt3lhk.jl:41\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string[1:end-1]\n    music_string = music_string[music_string != \"\
    .\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"o\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp2d3d5z4j.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2d3d5z4j.jl:1\n\
    in expression starting at /tmp/tmp2d3d5z4j.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+music_string.index(\"|\")+1]\n    music_string = music_string[music_string.index(\"\
    |\"):music_string.index(\"|\")+music_string.index(\"|\")+2]\n    music_string\
    \ = music_string[music_string.index(\"|\"):music_string.index(\"|\")+music_string.index(\"\
    |\")+3]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+music_string.index(\"|\")+4]\n    music_string = music_string[music_string.index(\"\
    |\"):music_string.index(\"|\")+music_string.index(\"|\")+5]\n    music_string\
    \ = music_string[music_string.index(\"|\"):music_string.index(\"|\")+music_string.index(\"\
    |\")+6]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+music_string.index(\"|\")+7]\n    music_string = music_string[music_string.index(\"\
    |\"):music_string.index(\"|\")+music_string.index(\"|\")+8]\n    music_string\
    \ = music_string[music_string.index(\"|\"):music_string.index(\"|\")+music_string.index(\"\
    |\")+9]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+music_string.index(\"|\")+10]\n    music_string = music_string[music_string.index(\"\
    |\"):music_string.index(\"|\")+music_string.index(\"|\")+11]\n    music_string\
    \ = music_string[music_string.index(\"|\"):music_string.index(\"|\")+music_string.index(\"\
    |\")+12]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+music_string.index(\"|\")+13]\n    music_string = music_string[music_string.index(\"\
    |\"):music_string.index(\"|\")+music_string.index(\"|\")+14]\n    music_string\
    \ = music_string[music_string.index(\"|\"):music_string.index(\"|\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"music_string.index(\"\
    |\"):\" range expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphxbj9jrc.jl:15\n\
    in expression starting at /tmp/tmphxbj9jrc.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3s0q12yo.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3s0q12yo.jl:1\n\
    in expression starting at /tmp/tmp3s0q12yo.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_list = music_string.split(\" \")\n    music_list\
    \ = music_list[music_list.len()-1:music_list.len()]\n    music_list = music_list[music_list.len()-1:music_list.len()]\n\
    \    music_list = music_list[music_list.len()-1:music_list.len()]\n    music_list\
    \ = music_list[music_list.len()-1:music_list.len()]\n    music_list = music_list[music_list.len()-1:music_list.len()]\n\
    \    music_list = music_list[music_list.len()-1:music_list.len()]\n    music_list\
    \ = music_list[music_list.len()-1:music_list.len()]\n    music_list = music_list[music_list.len()-1:music_list.len()]\n\
    \    music_list = music_list[music_list.len()-1:music_list.len()]\n    music_list\
    \ = music_list[music_list.len()-1:music_list.len()]\n    music_list = music_list[music_list.len()-1:music_list.len()]\n\
    \    music_list = music_list[music_list.len()-1:music_list.len()]\n    music_list\
    \ = music_list[music_list.len()-1:music_list.len()]\n    music_list = music_list[music_list.len()-1:music_list.len()]\n\
    \    music_list = music_list[music_list.len()-1:music_list.len()]\n    music_list\
    \ = music_list[music_list.len()-1:music_list.len()]\n    music_list = music_list[music_list.len()-1:music_list.len()]\n\
    \    music_list = music_list[music_list.len()-1:music_list.len()]\n    music_list\
    \ = music_list[music_list.len()-1:music_list.len()]\n    music_list = music_list[music_list.len()-1:music_list.len()]\n\
    \    music_list = music_list[music_list.len()-1:music_list.len()]\n    music_list\
    \ = music_list[music_list.len()-1:music_list.len()]\n    music_list = music_list[music_list.len()-1:music_list.len()]\n\
    \    music_list = music_list[music_list.len()-1:music_list.len()]\n    music_list\
    \ = music_list[music_list.len()-1:music_list.len()]\n    music_list = music_list[music_list.len()-1:music_list.len()]\n\
    \nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp8rb65sq2.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8rb65sq2.jl:1\n\
    in expression starting at /tmp/tmp8rb65sq2.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find(\"|\"\
    ) + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 : music_string.find(\"|\", music_string.find(\"\
    |\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 : music_string.find(\"|\", music_string.find(\"\
    |\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t\
    @test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") ==\
    \ [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpzvgxkzb3.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzvgxkzb3.jl:1\n\
    in expression starting at /tmp/tmpzvgxkzb3.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : string(music_string).end]\n    music_\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpuf87twrq.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpuf87twrq.jl:1\n\
    in expression starting at /tmp/tmpuf87twrq.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp546_rvm0.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp546_rvm0.jl:1\n\
    in expression starting at /tmp/tmp546_rvm0.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_notes = music_string.split(\"|\")\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp8artk_jn.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8artk_jn.jl:1\n\
    in expression starting at /tmp/tmp8artk_jn.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppxw7jh8v.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppxw7jh8v.jl:1\n\
    in expression starting at /tmp/tmppxw7jh8v.jl:1\n"
  exit_code: 1
  status: SyntaxError
