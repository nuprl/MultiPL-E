name: HumanEval_155_even_odd_count
language: julia
prompt: "\"\"\"Given an integer. return a tuple that has the number of even and odd\
  \ digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n\
  \        even_odd_count(123) ==> (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
  \ Int64} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
  \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
  \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\
  \t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0)\
  \ == (1, 0))\nend\n"
completions: ["    if num < 0 \n        error(\"The given number must be positive\"\
    )\n    elseif num == 0\n        (1, 0)\n    else\n        even, odd = 0, 0\n \
    \       while num > 0\n            digit = num % 10\n            if digit % 2\
    \ == 0\n                even += 1\n            else\n                odd += 1\n\
    \            end\n            num /= 10\n        return (even, odd)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert even_odd_count(-12) == (1, 1)\n\
    @assert even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that checks if a number is prime or not. \nThe function should take in a single\
    \ integer and return a boolean.", "    if num < 0 \n        error(\"The given\
    \ number must be positive\")\n    elseif num == 0\n        (1, 0)\n    else\n\
    \        odd_count = num % 10\n        even_count = num / 10\n        return (odd_count,\
    \ even_count)\n    end\nend\n</cell>\n<code language=julia-1.5>", "    if num\
    \ < 0 \n        error(\"The input must be positive\")\n    elseif num == 0\n \
    \       (1, 0)\n    else\n        even, odd = 0, 0\n        while num > 0\n  \
    \          digit = num % 10\n            num = num / 10\n            if digit\
    \ % 2 == 0\n                even += 1\n            else\n                odd +=\
    \ 1\n        end\n        return (even, odd)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of digits\
    \ in an integer.", "    if num < 0\n        error(\"The given number must be positive\"\
    )\n    elseif num == 0\n        return (0, 0)\n    elseif num == 1\n        return\
    \ (1, 0)\n    else\n        even, odd = 0, 0\n        while num > 0\n        \
    \    if num % 2 == 0\n                even += 1\n                num -= 2\n  \
    \          else\n                odd += 1\n                num -= 1\n        end\n\
    \        return (even, odd)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a positive integer $n$\
    \ and returns the number of digits in $n$. \nThe function should raise an error\
    \ if the number is negative.", "    if num < 0 \n        error(\"The input must\
    \ be positive\")\n    elseif num == 0\n        (1, 0)\n    elseif num % 2 == 0\n\
    \        (num / 2, num / 2)\n    else\n        (num / 2, num / 2 + 1)\n    end\n\
    end\n</cell>\n<code language=julia-1.3>\n@assert even_odd_count(-12) == (1, 1)\n\
    @assert even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the number of digits in an integer.", "    if num < 0\n       \
    \ error(\"The input must be positive\")\n    elseif num == 0\n        (1, 0)\n\
    \    else\n        odd_count = num % 10\n        even_count = num / 10\n     \
    \   return (even_count, odd_count)\n    end\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes an integer and returns the number of digits in it.",
  "    if num < 0\n        error(\"The given number must be positive\")\n    elseif\
    \ num == 0\n        return (0, 0)\n    else\n        even, odd = 0, 0\n      \
    \  while num > 0\n            if num % 2 == 0\n                even += 1\n   \
    \             num = (num / 2)\n            else\n                odd += 1\n  \
    \              num = (num / 2)\n        end\n        return (even, odd)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>", "    if num < 0\n        error(\"The\
    \ input must be positive\")\n    end\n    even, odd = 0, 0\n    while num > 0\n\
    \        if num % 2 == 0\n            even += 1\n        else\n            odd\
    \ += 1\n        end\n        num /= 10\n    end\n    return (even, odd)\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert even_odd_count(-12) == (1, 1)\n@assert\
    \ even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a positive integer and returns the number of digits in that integer.",
  "    if num < 0 \n        error(\"The input must be positive\")\n    else if num\
    \ == 0 \n        return (0,0)\n    else\n        even = num / 2\n        odd =\
    \ num - even\n        return (even, odd)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of digits\
    \ in an integer.", "    if num < 0\n        error(\"The given number must be positive\"\
    )\n    elseif num == 0\n        return (0, 0)\n    else\n        even, odd = 0,\
    \ 0\n        while num > 0\n            digit = num % 10\n            if digit\
    \ % 2 == 0\n                even += digit\n            else\n                odd\
    \ += digit\n            end\n            num /= 10\n        return (even, odd)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@assert even_odd_count(-12)\
    \ == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes an integer and returns the number of digits in\
    \ that integer.", "    if num < 0\n        error(\"The input must be positive\"\
    )\n    elseif num == 0\n        return (0, 0)\n    else\n        even, odd = 0,\
    \ 0\n        while num != 0\n            if num % 2 == 0\n                even\
    \ += 1\n            else\n                odd += 1\n            end\n        \
    \    num = num / 2\n        return (even, odd)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes an integer and returns\
    \ the number of digits in it.", "    if num < 0 \n        error(\"The input must\
    \ be positive\")\n    end\n    even, odd = 0, 0\n    while num > 0\n        digit\
    \ = num % 10\n        if digit % 2 == 0\n            even += 1\n        else\n\
    \            odd += 1\n        end\n        num /= 10\n    end\n    return even,\
    \ odd\nend\n</cell>\n<code language=julia-1.5>", "    if num < 0 \n        error(\"\
    The input must be positive\")\n    else if num == 0\n        (1, 0)\n    else\
    \ if num % 2 == 0\n        (1, num/2)\n    else\n        (num/2, num/2)\nend\n\
    </cell>\n<text>\nExercise 4\nWrite a function that takes a positive integer and\
    \ returns the sum of the digits of that integer.", "    if num < 0\n        error(\"\
    The argument must be positive\")\n    end\n    even, odd = 0, 0\n    while num\
    \ > 0\n        digit = num % 10\n        if digit % 2 == 0\n            even +=\
    \ 1\n        else\n            odd += 1\n        end\n        num /= 10\n    end\n\
    \    return even, odd\nend\n</cell>\n<code language=julia-1.5>\n@assert even_odd_count(-12)\
    \ == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function is_palindrome(num::Int64) that checks if a number is a palindrome.\
    \ Recall that palindromes are those that read the same forwards as backwards.\
    \ A palindrome is a number that reads the same forwards as backwards. For example,\
    \ 121 is a palindrome, but 12321 is not a palindrome. Write a function that takes\
    \ a single integer as an argument and returns a boolean indicating whether it\
    \ is a palindrome.", "    if num < 0\n        error(\"The input must be positive\"\
    )\n    elseif num == 0\n        (1, 1)\n    else\n        even, odd = 0, 0\n \
    \       while num > 0\n            digit = num % 10\n            if digit % 2\
    \ == 0\n                even += 1\n            else\n                odd += 1\n\
    \            end\n            num /= 10\n        return (even, odd)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert even_odd_count(-12) == (1, 1)\n\
    @assert even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the number of digits in an integer.", "    if num < 0\n       \
    \ error(\"The input must be positive\")\n    elseif num == 0\n        return (0,\
    \ 0)\n    else\n        even, odd = 0, 0\n        while num > 0\n            if\
    \ num % 2 == 0\n                even += 1\n                num -= 2\n        \
    \    else\n                odd += 1\n                num -= 1\n        end\n \
    \       return (even, odd)\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if num < 0 \n        error(\"The given number must be positive\")\n    elseif\
    \ num == 0\n        (1, 1)\n    else\n        even, odd = 0, 0\n        while\
    \ num > 0\n            if num % 2 == 0\n                even += 1\n          \
    \      num = (num / 2)\n            else\n                odd += 1\n         \
    \       num = (num / 2)\n        end\n        return (even, odd)\n    end\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes an integer and returns\
    \ the number of digits in the number. \nFor example, even_odd_count(-12) should\
    \ return 1.", "    if num < 0\n        error(\"The given number must be positive\"\
    )\n    end\n    even, odd = 0, 0\n    while num > 0\n        digit = num % 10\n\
    \        if digit % 2 == 0\n            even += digit\n        else\n        \
    \    odd += digit\n        end\n        num /= 10\n    end\n    return (even,\
    \ odd)\nend\n</cell>\n<code language=julia-1.5>\n@assert even_odd_count(-12) ==\
    \ (1, 1)\n@assert even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a positive integer $n$ and returns the number of digits\
    \ in $n$ that are even.", "    if num < 0 \n        error(\"The input number must\
    \ be positive\")\n    elseif num == 0\n        return (0, 0)\n    elseif num <\
    \ 10\n        return (num, 0)\n    else\n        even, odd = 0, 0\n        digits\
    \ = num % 10\n        while digits > 0\n            if digits % 2 == 0\n     \
    \           even += 1\n            else\n                odd += 1\n          \
    \  digits /= 10\n        return (even, odd)\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if num < 0\n        error(\"The given number must be positive\")\n    end\n\
    \    even, odd = 0, 0\n    while num > 0\n        if num % 2 == 0\n          \
    \  even += 1\n        else\n            odd += 1\n        end\n        num /=\
    \ 10\n    end\n    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(-12)\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of vowels present in the string.", "    if num < 0\n        error(\"\
    The input must be positive\")\n    elseif num == 0\n        return (0, 0)\n  \
    \  else\n        even, odd = 0, 0\n        while num > 0\n            digit =\
    \ num % 10\n            if digit % 2 == 0\n                even += 1\n       \
    \     else\n                odd += 1\n            end\n            num /= 10\n\
    \        return (even, odd)\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    even_odd_count(-12)\n</cell>\n<code language=julia-1.4>\neven_odd_count(123)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of digits\
    \ in an integer.", "    if num < 0\n        error(\"The given number cannot be\
    \ negative\")\n    elseif num == 0\n        (1, 0)\n    elseif num % 2 == 0\n\
    \        (1, 1)\n    else\n        even_odd_count(num / 2)\n    end\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the factorial of a given number.\
    \ \nThe factorial of a number $n$ is defined as:", "    if num < 0\n        error(\"\
    The given number must be positive\")\n    end\n    even = 0\n    odd = 0\n   \
    \ for i in 1:num\n        if num % 2 == 0\n            even = even + 1\n     \
    \   else\n            odd = odd + 1 \n        end\n    end\n    return Tuple(even,\
    \ odd)\nend\n</cell>\n<code language=julia-1.3>\neven_odd_count(-12)\n</cell>\n\
    <code language=julia-1.3>\neven_odd_count(123)\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the factorial of a given number.", "    if num <\
    \ 0\n        error(\"The given number should be positive\")\n    end", "    if\
    \ num < 0\n        error(\"The given number must be positive.\")\n    elseif num\
    \ == 0\n        return (0, 0)\n    else\n        even, odd = 0, 0\n        while\
    \ num > 0\n            digit = num % 10\n            if digit % 2 == 0\n     \
    \           even += digit\n            else\n                odd += digit\n  \
    \          end\n            num /= 10\n        return (even, odd)\n    end\nend\n\
    </cell>\n<code language=julia-1.3>\n\"\"\"Given an integer. return a tuple that\
    \ has the number of even and odd digits respectively.", "    if num < 0 \n   \
    \     error(\"Invalid input\")\n    elseif num == 0\n        return (1, 0)\n \
    \   else\n        even, odd = 0, 0\n        digits = num % 10\n        while digits\
    \ > 0\n            digit = digits % 10\n            if digit % 2 == 0\n      \
    \          even += 1\n            else\n                odd += 1\n           \
    \ end\n            digits = digits / 10\n        return (even, odd)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert even_odd_count(-12) == (1, 1)\n\
    @assert even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ is_palindrome(num) that returns true if the given number is a palindrome and\
    \ false otherwise.", "    if num < 0\n        error(\"The given number cannot\
    \ be negative\")\n    end\n    even, odd = 0, 0\n    for x in num\n        if\
    \ x % 2 == 0\n            even += 1\n        else\n            odd += 1\n    \
    \    end\n    end\n    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>",
  "    if num < 0 \n        error(\"The given number should be positive\")\n    elseif\
    \ num == 0\n        (1, 0)\n    else\n        odd_count = num % 10\n        even_count\
    \ = num - odd_count\n        return (even_count, odd_count)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>", "    if num < 0 \n        error(\"Invalid input\"\
    )\n    elseif num == 0\n        return (0, 0)\n    else\n        even, odd = 0,\
    \ 0\n        while num > 0\n            digit = num % 10\n            if digit\
    \ % 2 == 0\n                even += digit\n            else\n                odd\
    \ += digit\n            end\n            num /= 10\n        return (even, odd)\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>", "    if num < 0\n        error(\"\
    The given number should be positive\")\n    end\n    even, odd = 0, 0\n    while\
    \ num > 0\n        if num % 2 == 0\n            even += 1\n        else\n    \
    \        odd += 1\n        end\n        num /= 10\n    end\n    return even, odd\n\
    end\n</cell>\n<code language=julia-1.5>", "    if num < 0\n        error(\"The\
    \ input must be positive\")\n    elseif num == 0\n        return (0, 0)\n    elseif\
    \ num == 1\n        return (1, 0)\n    else\n        even, odd = 0, 0\n      \
    \  while num > 0\n            digit = num % 10\n            if digit % 2 == 0\n\
    \                even += 1\n            else\n                odd += 1\n     \
    \       end\n            num /= 10\n        return (even, odd)\n    end\nend\n\
    </cell>\n<code language=julia-1.3>\n@assert even_odd_count(-12) == (1, 1)\n@assert\
    \ even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the number of digits in an integer.", "    if num < 0\n       \
    \ error(\"The input must be positive\")\n    end\n    even, odd = 0, 0\n    for\
    \ x in num\n        if x % 2 == 0\n            even += 1\n        else\n     \
    \       odd += 1\n        end\n    end\n    return even, odd\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123)\
    \ == (1, 2)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the number\
    \ of digits in an integer.", "    if num < 0\n        error(\"The given number\
    \ should be positive\")\n    elseif num == 0\n        return (0, 0)\n    else\n\
    \        even, odd = 0, 0\n        for i in 1:num\n            if i mod 2 == 0\n\
    \                even += 1\n            else\n                odd += 1\n     \
    \   end\n        return (even, odd)\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if num < 0\n        error(\"The given number must be positive\")\n    end\n\
    \    even_odd_count_helper(num, 1, 0)\nend", "    if num < 0 \n        error(\"\
    The argument must be positive\")\n    else if num == 0\n        return (0,0)\n\
    \    else\n        even, odd = 0, 0\n        while num > 0\n            digit\
    \ = num % 10\n            if digit % 2 == 0\n                even += digit\n \
    \           else\n                odd += digit\n            end\n            num\
    \ /= 10\n        return (even, odd)\n    end\nend\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a number as input and returns the sum of the digits\
    \ of that number. \nThe function should raise an error if the input is not a number.",
  "    if num < 0\n        error(\"The input must be positive\")\n    elseif num ==\
    \ 0\n        (1, 0)\n    else\n        even, odd = 0, 0\n        while num > 0\n\
    \            if num % 2 == 0\n                even += 1\n                num =\
    \ (num / 2)\n            else\n                odd += 1\n                num =\
    \ (num / 2)\n        end\n        return (even, odd)\n    end\nend\n</cell>\n\
    <code language=julia-1.3>", "    if num < 0 \n        error(\"The input must be\
    \ positive\")\n    elseif num == 0\n        (1, 0)\n    else\n        even, odd\
    \ = 0, 0\n        while num > 0\n            digit = num % 10\n            if\
    \ digit % 2 == 0\n                even += digit\n            else\n          \
    \      odd += digit\n            end\n            num /= 10\n        end\n   \
    \     return (even, odd)\n    end\nend\n</cell>\n<code language=julia-1.0>\n@assert\
    \ even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the number of digits in an integer.",
  "    if num < 0\n        error(\"The given number should be positive\")\n    elseif\
    \ num == 0\n        (1, 0)\n    else\n        even_odd_count(num / 10) + (1, num\
    \ % 10)\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert even_odd_count(-12)\
    \ == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes an integer and returns the number of digits in\
    \ that integer.", "    if num < 0 \n        error(\"The input must be positive\"\
    )\n    end\n    even::Int64 = 0\n    odd::Int64 = 0\n    for x in reverse(split(string(num),\
    \ \"\"))\n        if x % 2 == 0\n            even += x\n        else\n       \
    \     odd += x\n        end\n    end\n    return (even, odd)\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if num < 0\n        error(\"The given number must\
    \ be positive\")\n    elseif num == 0\n        return (0, 0)\n    elseif num ==\
    \ 1\n        return (1, 0)\n    elseif num == 2\n        return (0, 1)\n    else\n\
    \        even, odd = 0, 0\n        for i in 2..num\n            if num % i ==\
    \ 0\n                even += 1\n            else\n                odd += 1\n \
    \       end\n        return (even, odd)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes an integer and returns\
    \ the number of digits in that integer. \nThe function should work for negative\
    \ numbers as well.", "    if num < 0\n        error(\"The given number cannot\
    \ be negative\")\n    elseif num == 0\n        return (0, 0)\n    else\n     \
    \   even, odd = 0, 0\n        for i in 1:num\n            if num % i == 0\n  \
    \              even += 1\n            else\n                odd += 1\n       \
    \ end\n        return (even, odd)\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if num < 0\n        error(\"The given number must be positive\")\n    end\n\
    \    even, odd = 0, 0\n    while num > 0\n        if num % 2 == 0\n          \
    \  even += 1\n        else\n            odd += 1\n        end\n        num /=\
    \ 10\n    end\n    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(-12)\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a positive integer and\
    \ returns the number of digits in the number.", "    if num < 0\n        error(\"\
    Invalid input\")\n    elseif num == 0\n        return (0, 0)\n    elseif num %\
    \ 2 == 0\n        return (1, 0)\n    else\n        return (0, 1)\nend\n</cell>\n\
    <code language=julia-1.5>", "    if num < 0 \n        error(\"The input must be\
    \ positive\")\n    elseif num == 0\n        (1, 0)\n    else\n        even, odd\
    \ = 0, 0\n        while num > 0\n            digit = num % 10\n            if\
    \ digit % 2 == 0\n                even += 1\n            else\n              \
    \  odd += 1\n            end\n            num /= 10\n        return (even, odd)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>", "    if num < 0\n        error(\"\
    The input number must be positive\")\n    elseif num == 0\n        return (0,\
    \ 0)\n    else\n        even, odd = 0, 0\n        while num > 0\n            digit\
    \ = num % 10\n            if digit % 2 == 0\n                even += digit\n \
    \           else\n                odd += digit\n            end\n            num\
    \ /= 10\n        return (even, odd)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of digits\
    \ in an integer.", "    if num < 0\n        error(\"The input must be positive\"\
    )\n    end\n    even, odd = 0, 0\n    while num > 0\n        if num % 2 == 0\n\
    \            even += 1\n        else\n            odd += 1\n        end\n    \
    \    num /= 10\n    end\n    return even, odd\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes an integer and returns\
    \ the number of digits in that integer.", "    if num < 0\n        error(\"Invalid\
    \ input\")\n    elseif num == 0\n        return (0, 0)\n    else\n        even\
    \ = num % 2 == 0\n        odd = num % 2 != 0\n        return (even + odd, odd\
    \ + even)\n    end\nend\n</cell>\n<code language=julia-1.0>\n@time even_odd_count(-12)\n\
    </cell>\n<code language=julia-1.0>\n@time even_odd_count(123)\n</cell>\n<text>\n\
    Exercise\nWrite a function that returns the number of digits in an integer.",
  "    if num < 0\n        error(\"The given number must be positive.\")\n    elseif\
    \ num == 0\n        return (0, 0)\n    else\n        even, odd = 0, 0\n      \
    \  while num != 0\n            if num % 2 == 0\n                even += 1\n  \
    \              num = (num / 2)\n            else\n                odd += 1\n \
    \               num = (num / 2)\n        end\n        return (even, odd)\n   \
    \ end\nend\n</cell>\n<code language=julia-1.5>", "    if num < 0\n        error(\"\
    The given number should be non-negative.\")\n    end\n    even, odd = 0, 0\n \
    \   for digit in num\n        if digit % 2 == 0\n            even += 1\n     \
    \   else\n            odd += 1\n        end\n    end\n    return even, odd\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert even_odd_count(-12) == (1, 1)\n@assert\
    \ even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ called is_palindrome that takes a number as input and returns a boolean indicating\
    \ whether the number is a palindrome or not.", "    if num < 0\n        error(\"\
    The given number must be positive\")\n    elseif num == 0\n        return (0,\
    \ 0)\n    else\n        even, odd = 0, 0\n        while num > 0\n            digit\
    \ = num % 10\n            if digit % 2 == 0\n                even += 1\n     \
    \       else\n                odd += 1\n            end\n            num /= 10\n\
    \        return (even, odd)\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if num < 0 \n        error(\"The input must be positive\")\n    elseif num\
    \ == 0\n        (1, 0)\n    else\n        even, odd = 0, 0\n        for n in num\n\
    \            if n % 2 == 0\n                even += 1\n            else\n    \
    \            odd += 1\n        return (even, odd)\n    end\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a positive integer and returns the number\
    \ of digits in that integer.", "    if num < 0\n        error(\"The input must\
    \ be positive\")\n    elseif num == 0\n        (1, 0)\n    else\n        even,\
    \ odd = 0, 0\n        while num > 0\n            digit = num % 10\n          \
    \  if digit % 2 == 0\n                even += 1\n            else\n          \
    \      odd += 1\n            end\n            num /= 10\n        return (even,\
    \ odd)\n    end\nend\n</cell>\n<code language=julia-1.0>\n@assert even_odd_count(-12)\
    \ == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function is_palindrome(num::Int64) which returns true if the given\
    \ number is a palindrome and false otherwise. Hint: use the function even_odd_count\
    \ that you wrote earlier.", "    if num < 0\n        error(\"The given number\
    \ must be positive.\")\n    end\n    even::Int64 = 0\n    odd::Int64 = 0\n   \
    \ for x in num\n        if x % 2 == 0\n            even += 1\n        else\n \
    \           odd += 1\n        end\n    end\n    return (even, odd)\nend\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(-12)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of digits in an integer. \nFor example if num is 123, then the function\
    \ should return 3.", "    if num < 0\n        error(\"The given number must be\
    \ positive.\")\n    elseif num == 0\n        return (0, 0)\n    else\n       \
    \ even, odd = 0, 0\n        while num > 0\n            digit = num % 10\n    \
    \        if digit % 2 == 0\n                even += digit\n            else\n\
    \                odd += digit\n            end\n            num /= 10\n      \
    \  return (even, odd)\n    end\nend\n</cell>\n<code language=julia-1.5>", "  \
    \  if num < 0\n        error(\"The given number must be positive\")\n    elseif\
    \ num == 0\n        (1, 1)\n    else\n        even, odd = 0, 0\n        while\
    \ num != 0\n            if num % 2 == 0\n                even += 1\n         \
    \       num = (num / 2)\n            else\n                odd += 1\n        \
    \        num = (num / 2)\n        end\n        return (even, odd)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert even_odd_count(-12) == (1, 1)\n@assert\
    \ even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a positive integer and returns the number of digits in that integer.",
  "    if num < 0\n        error(\"The input must be positive\")\n    elseif num ==\
    \ 0\n        (1, 0)\n    else\n        even, odd = 0, 0\n        for n in num\n\
    \            if n % 2 == 0\n                even += 1\n            else\n    \
    \            odd += 1\n        return (even, odd)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123)\
    \ == (1, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that takes an integer\
    \ and returns the number of digits in that integer.", "    if num < 0 \n     \
    \   error(\"The input must be positive\")\n    elseif num == 0\n        (1, 0)\n\
    \    else\n        even, odd = 0, 0\n        while num > 0\n            digit\
    \ = num % 10\n            if digit % 2 == 0\n                even += 1\n     \
    \       else\n                odd += 1\n            end\n            num /= 10\n\
    \        return (even, odd)\n    end\nend\n</cell>\n<code language=julia-1.4>",
  "    if num < 0\n        error(\"The argument must be positive\")\n    elseif num\
    \ == 0\n        return (0, 0)\n    else\n        even, odd = 0, 0\n        for\
    \ i in 1:num\n            if i%2 == 0\n                even += 1\n           \
    \ else\n                odd += 1\n        end\n        return (even, odd)\n  \
    \  end\nend\n</cell>\n<code language=julia-1.3>\n@time even_odd_count(-12)\n</cell>\n\
    <code language=julia-1.3>\n@time even_odd_count(123)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of digits in an integer.", "   \
    \ if num < 0\n        error(\"The input number must be positive\")\n    elseif\
    \ num == 0\n        return (0, 0)\n    else\n        even, odd = 0, 0\n      \
    \  while num != 0\n            if num % 2 == 0\n                even += 1\n  \
    \              num /= 2\n            else\n                odd += 1\n        \
    \        num /= 2\n        end\n        return (even, odd)\n    end\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a number as input and returns\
    \ the number of digits in that number.", "    if num < 0\n        error(\"The\
    \ argument must be positive\")\n    elseif num == 0\n        return (0, 0)\n \
    \   else\n        even, odd = 0, 0\n        while num > 0\n            if num\
    \ % 2 == 0\n                even += 1\n                num -= 2\n            else\n\
    \                odd += 1\n                num -= 1\n        end\n        return\
    \ (even, odd)\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a number as input and returns the number of digits in that number.", " \
    \   if num < 0 \n        error(\"The input number should be positive\")\n    elseif\
    \ num == 0\n        (1, 0)\n    else\n        odd_count = num % 10\n        even_count\
    \ = num - odd_count\n        return (odd_count, even_count)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123)\
    \ == (1, 2)\n</cell>\n<text>\nExercise 3\nWrite a function that takes a positive\
    \ integer $n$ and returns the number of digits in $n$ that are even and odd respectively.",
  "    if num < 0\n        error(\"The given number must be positive\")\n    elseif\
    \ num == 0\n        return (0, 0)\n    else\n        even, odd = 0, 0\n      \
    \  while num > 0\n            if num % 2 == 0\n                even += 1\n   \
    \             num = (num / 2)\n            else\n                odd += 1\n  \
    \              num = (num / 2)\n        end\n        return (even, odd)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>", "    if num < 0\n        error(\"The\
    \ given number must be positive\")\n    end\n    even, odd = 0, 0\n    while num\
    \ > 0\n        digit = num % 10\n        if digit % 2 == 0\n            even +=\
    \ digit\n        else\n            odd += digit\n        end\n        num /= 10\n\
    \    end\n    return even, odd\nend\n</cell>\n<code language=julia-1.3>\neven_odd_count(-12)\n\
    </cell>\n<code language=julia-1.3>\neven_odd_count(123)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes an integer and returns the number of digits in\
    \ that integer.", "    if num < 0 \n        error(\"The given number must be positive\"\
    )\n    end\n    even, odd = 0, 0\n    while num > 0\n        if num % 2 == 0\n\
    \            even += 1\n        else\n            odd += 1\n        end\n    \
    \    num /= 10\n    end\n    return even, odd\nend\n</cell>\n<code language=julia-1.5>",
  "    if num < 0\n        error(\"The given number must be positive\")\n    elseif\
    \ num == 0\n        return (0, 0)\n    elseif num % 2 == 0\n        return (num\
    \ / 2, num / 2)\n    else\n        return (num / 2, num / 2 + 1)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>", "    if num < 0 \n        error(\"The given\
    \ number should be positive\")\n    else if num == 0\n        (1, 0)\n    else\
    \ if num < 10\n        (even_odd_count(num / 10), (num % 10) + 1)\n    else\n\
    \        even_odd_count(num / 10) + even_odd_count(num % 10)\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123)\
    \ == (1, 2)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the number\
    \ of digits in an integer.", "    if num < 0 \n        error(\"The input must\
    \ be positive\")\n    elseif num == 0\n        (1, 0)\n    else\n        even_odd_count(num\
    \ / 10) + (num % 10 % 2 == 0 ? 1 : 0)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n\
    </cell>\n<text>\nExercise 3\nWrite a function named even_odd_count_with_memo that\
    \ takes an integer and returns a tuple that has the number of even and odd digits\
    \ respectively. The function should use a dictionary to store the count of each\
    \ digit.", "    if num < 0\n        error(\"The input must be positive\")\n  \
    \  end\n    even, odd = 0, 0\n    while num > 0\n        if num % 2 == 0\n   \
    \         even += 1\n            num /= 2\n        else\n            odd += 1\n\
    \            num /= 2\n        end\n    end\n    return (even, odd)\nend\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(-12)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123)\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ an integer and returns the sum of all positive integers less than or equal to\
    \ that integer.", "    if num < 0 \n        error(\"The input must be positive\"\
    )\n    elseif num == 0\n        return (0, 0)\n    else\n        even, odd = 0,\
    \ 0\n        while num > 0\n            digit = num % 10\n            if digit\
    \ % 2 == 0\n                even += digit\n            else\n                odd\
    \ += digit\n            end\n            num /= 10\n        return (even, odd)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>", "    if num < 0\n        error(\"\
    The input must be positive\")\n    elseif num == 0\n        return (0, 0)\n  \
    \  else\n        even, odd = 0, 0\n        for n in num\n            if n % 2\
    \ == 0\n                even += 1\n            else\n                odd += 1\n\
    \        return (even, odd)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a positive integer and\
    \ returns the number of digits in that number.", "    if num < 0\n        error(\"\
    The given number must be positive\")\n    end\n    even, odd = 0, 0\n    while\
    \ num > 0\n        digit = num % 10\n        if digit % 2 == 0\n            even\
    \ += 1\n        else\n            odd += 1\n        end\n        num /= 10\n \
    \   end\n    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>", " \
    \   if num < 0\n        error(\"The given number must be positive\")\n    elseif\
    \ num == 0\n        (1, 0)\n    else\n        even, odd = 0, 0\n        while\
    \ num > 0\n            digit = num % 10\n            if digit % 2 == 0\n     \
    \           even += 1\n            else\n                odd += 1\n          \
    \  end\n            num /= 10\n        end\n        return (even, odd)\n    end\n\
    end\n</cell>\n<code language=julia-1.3>", "    if num < 0\n        error(\"The\
    \ input must be positive\")\n    end\n    even, odd = 0, 0\n    for n in reverse(split(string(num),\
    \ \"\"))\n        if n % 2 == 0\n            even += 1\n        else\n       \
    \     odd += 1\n        end\n    end\n    return (even, odd)\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123)\
    \ == (1, 2)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the number\
    \ of digits in an integer.", "    if num < 0\n        error(\"The argument must\
    \ be positive\")\n    else\n        even = num % 2 == 0\n        odd = num % 2\
    \ != 0\n        return (even, odd)\n    end\nend\n</cell>\n<text>\nExercise 4\n\
    Write a function that takes an integer and returns the number of digits in it.",
  "    if num < 0\n        error(\"The input must be positive\")\n    end\n    even,\
    \ odd = 0, 0\n    while num > 0\n        if num % 2 == 0\n            even +=\
    \ 1\n        else\n            odd += 1\n        end\n        num /= 10\n    end\n\
    \    return even, odd\nend\n</cell>\n<code language=julia-1.5>\n@assert even_odd_count(-12)\
    \ == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a positive integer and returns the number of\
    \ digits in that number.", "    if num < 0\n        error(\"The input must be\
    \ positive\")\n    elseif num == 0\n        (1, 0)\n    else\n        even, odd\
    \ = 0, 0\n        while num > 0\n            digit = num % 10\n            if\
    \ digit % 2 == 0\n                even += 1\n            else\n              \
    \  odd += 1\n            end\n            num /= 10\n        end\n        return\
    \ (even, odd)\n    end\nend\n</cell>\n<code language=julia-1.5>", "    if num\
    \ < 0\n        error(\"The given number should be positive\")\n    end\n    even,\
    \ odd = 0, 0\n    while num > 0\n        digit = num % 10\n        if digit %\
    \ 2 == 0\n            even += 1\n        else\n            odd += 1\n        end\n\
    \        num /= 10\n    end\n    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>",
  "    if num < 0 \n        error(\"The given number must be positive\")\n    elseif\
    \ num == 0\n        return (0, 0)\n    else\n        even, odd = 0, 0\n      \
    \  while num > 0\n            if num % 2 == 0\n                even += 1\n   \
    \             num -= 2\n            else\n                odd += 1\n         \
    \       num -= 1\n        end\n        return (even, odd)\n    end\nend\n</cell>\n\
    <code language=julia-1.0>\n@time even_odd_count(-12)\n</cell>\n<code language=julia-1.0>\n\
    @time even_odd_count(123)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the number of digits in an integer.", "    if num < 0\n        error(\"\
    The given number should be positive\")\n    end\n    even, odd = 0, 0\n    while\
    \ num > 0\n        digit = num % 10\n        if digit % 2 == 0\n            even\
    \ += 1\n        else\n            odd += 1\n        end\n        num /= 10\n \
    \   end\n    return even, odd\nend\n</cell>\n<code language=julia-1.5>", "   \
    \ if num < 0\n        error(\"The given number must be positive.\")\n    elseif\
    \ num == 0\n        return (0, 0)\n    else\n        even, odd = 0, 0\n      \
    \  while num > 0\n            if num % 2 == 0\n                even += 1\n   \
    \             num = (num / 2)\n            else\n                odd += 1\n  \
    \              num = (num / 2)\n        end\n        return (even, odd)\n    end\n\
    end\n</cell>\n<code language=julia-1.0>", "    if num < 0\n        error(\"The\
    \ given number must be positive\")\n    elseif num == 0\n        return (0, 0)\n\
    \    else\n        even, odd = 0, 0\n        while num > 0\n            digit\
    \ = num % 10\n            if digit % 2 == 0\n                even += digit\n \
    \           else\n                odd += digit\n            end\n            num\
    \ /= 10\n        return (even, odd)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(-12)\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of digits\
    \ in an integer.", "    if num < 0 \n        error(\"The given number must be\
    \ positive.\")\n    elseif num == 0\n        return (0, 0)\n    elseif num < 10\n\
    \        return (num, 0)\n    else\n        even, odd = 0, 0\n        while num\
    \ > 0\n            if num % 2 == 0\n                even += 1\n              \
    \  num -= 2\n            else\n                odd += 1\n                num -=\
    \ 1\n        end\n        return (even, odd)\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if num < 0\n        error(\"The argument must be positive\")\n    end", " \
    \   if num < 0\n        error(\"The input must be positive\")\n    end", "   \
    \ if num < 0\n        error(\"The input must be positive\")\n    elseif num ==\
    \ 0\n        (1, 1)\n    else\n        odd_count = num % 10\n        even_count\
    \ = num - odd_count\n        return (odd_count, even_count)\n    end\nend\n</cell>\n\
    <text>\nExercise 4\nWrite a function that takes an integer and returns the number\
    \ of digits in that integer.", "    if num < 0 \n        error(\"The input must\
    \ be positive\")\n    end\n    even, odd = 0, 0\n    for i in reverse(digits(num))\n\
    \        if i % 2 == 0\n            even += 1\n        else\n            odd +=\
    \ 1\n        end\n    end\n    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(-12)\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of digits\
    \ in an integer.", "    if num < 0\n        error(\"The input must be positive\"\
    )\n    elseif num == 0\n        (1, 0)\n    else\n        even, odd = 0, 0\n \
    \       while num > 0\n            digit = num % 10\n            if digit % 2\
    \ == 0\n                even += 1\n            else\n                odd += 1\n\
    \            end\n            num /= 10\n        return (even, odd)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>", "    if num < 0\n        error(\"The\
    \ input must be positive\")\n    elseif num == 0\n        (1, 0)\n    else\n \
    \       even, odd = 0, 0\n        while num != 0\n            if num % 2 == 0\n\
    \                even += 1\n            else\n                odd += 1\n     \
    \       end\n            num = num / 2\n        end\n        return (even, odd)\n\
    \    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ factorial of a number. \nThe factorial of a number $n$ is defined as:", "  \
    \  if num < 0\n        error(\"The argument must be positive\")\n    else if num\
    \ == 0\n        return (0, 0)\n    else\n        even, odd = 0, 0\n        while\
    \ num > 0\n            if num % 2 == 0\n                even += 1\n          \
    \      num = (num / 2)\n            else\n                odd += 1\n         \
    \       num = (num / 2)\n        end\n        return (even, odd)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert even_odd_count(-12) == (1, 1)\n@assert\
    \ even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the number of digits in an integer.", "    if num < 0\n       \
    \ error(\"Invalid input\")\n    end", "    if num < 0 \n        error(\"The given\
    \ number must be positive.\")\n    elseif num == 0\n        (1, 0)\n    elseif\
    \ num % 2 == 0\n        (num / 2, num / 2)\n    else\n        (num / 2, num /\
    \ 2 + 1)\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert even_odd_count(-12)\
    \ == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of digits in an integer.", "   \
    \ if num < 0\n        error(\"The given number should be positive\")\n    elseif\
    \ num == 0\n        return (0, 0)\n    else\n        even, odd = 0, 0\n      \
    \  for i in 1:num\n            if i mod 2 == 0\n                even += 1\n  \
    \          else\n                odd += 1\n        end\n        return (even,\
    \ odd)\n    end\nend\n</cell>\n<code language=julia-1.5>", "    if num < 0\n \
    \       error(\"The given number should be positive\")\n    end\n    even, odd\
    \ = 0, 0\n    while num > 0\n        if num % 2 == 0\n            even += 1\n\
    \        else\n            odd += 1\n        end\n        num /= 10\n    end\n\
    \    return even, odd\nend\n</cell>\n<code language=julia-1.5>\neven_odd_count(-12)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of digits in an integer.", "   \
    \ if num < 0\n        error(\"The given number must be positive.\")\n    elseif\
    \ num == 0\n        return (0, 0)\n    else\n        even, odd = 0, 0\n      \
    \  while num > 0\n            digit = num % 10\n            if digit % 2 == 0\n\
    \                even += digit\n            else\n                odd += digit\n\
    \            end\n            num /= 10\n        return (even, odd)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>", "    if num < 0 \n        error(\"The\
    \ given number cannot be negative\")\n    elseif num == 0\n        (1, 0)\n  \
    \  elseif num < 10\n        (1, 1)\n    else\n        even_odd_count(num / 10)\
    \ + (num % 10 % 2 == 0, num % 10 % 2 != 0)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of digits\
    \ in an integer.", "    if num < 0\n        error(\"The input must be positive\"\
    )\n    elseif num == 0\n        (1, 0)\n    else\n        even, odd = 0, 0\n \
    \       while num > 0\n            if num % 2 == 0\n                even += 1\n\
    \            else\n                odd += 1\n            end\n            num\
    \ /= 10\n        end\n        return (even, odd)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123)\
    \ == (1, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of digits in an integer.", "    if num < 0\n        error(\"The input must be\
    \ positive\")\n    end\n    even, odd = 0, 0\n    while num > 0\n        if num\
    \ % 2 == 0\n            even += 1\n        else\n            odd += 1\n      \
    \  end\n        num /= 10\n    end\n    return (even, odd)\nend\n</cell>\n<code\
    \ language=julia-1.5>\neven_odd_count(-12)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123)\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns the number of vowels contained in the string.", "    if\
    \ num < 0\n        error(\"The given number must be positive\")\n    end\n   \
    \ even_odd_count = Tuple{Int64, Int64}(0, 0)\n    for n in 1:num\n        if n\
    \ % 2 == 0\n            even_odd_count[1] += n\n        else\n            even_odd_count[0]\
    \ += n\n        end\n    end\n    return even_odd_count\nend\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(-12)\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of digits\
    \ in an integer.", "    if num < 0\n        error(\"The input must be positive\"\
    )\n    elseif num == 0\n        return (0, 0)\n    elseif num % 2 == 0\n     \
    \   return (num / 2, num / 2)\n    else\n        return (num / 2, num / 2 + 1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>", "    if num < 0\n        error(\"\
    The input must be positive\")\n    end\n    even, odd = 0, 0\n    while num >\
    \ 0\n        if num % 2 == 0\n            even += 1\n        else\n          \
    \  odd += 1\n        end\n        num /= 10\n    end\n    return even, odd\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert even_odd_count(-12) == (1, 1)\n@assert\
    \ even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a positive integer and returns the sum of the digits of that integer.\
    \ \nFor example if the input is 123, the function should return 1 + 2 + 3 = 6.",
  "    if num < 0 \n        error(\"The given number must be positive\")\n    elseif\
    \ num == 0\n        (1, 0)\n    else\n        even, odd = 0, 0\n        while\
    \ num > 0\n            digit = num % 10\n            if digit % 2 == 0\n     \
    \           even += 1\n            else\n                odd += 1\n          \
    \  end\n            num /= 10\n        end\n        return (even, odd)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert even_odd_count(-12) == (1, 1)\n\
    @assert even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes an integer and returns the number of digits in that integer.", " \
    \   if num < 0\n        error(\"The given number should be positive\")\n    elseif\
    \ num == 0\n        (1, 0)\n    else\n        odd_count = sum(x % 2 == 1 for x\
    \ in nums)\n        even_count = sum(x % 2 == 0 for x in nums)\n        return\
    \ (even_count, odd_count)\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if num < 0\n        error(\"The given number must be positive\")\n    end\n\
    \    even, odd = 0, 0\n    while num > 0\n        digit = num % 10\n        if\
    \ digit % 2 == 0\n            even += 1\n        else\n            odd += 1\n\
    \        end\n        num /= 10\n    end\n    return even, odd\nend\n</cell>\n\
    <code language=julia-1.5>", "    if num < 0\n        error(\"The given number\
    \ must be positive\")\n    elseif num == 0\n        return (0, 0)\n    else\n\
    \        even, odd = 0, 0\n        while num != 0\n            digit = num % 10\n\
    \            if digit % 2 == 0\n                even += digit\n            else\n\
    \                odd += digit\n            end\n            num /= 10\n      \
    \  return (even, odd)\n    end\nend\n</cell>\n<code language=julia-1.5>", "  \
    \  if num < 0 \n        error(\"The input must be positive\")\n    elseif num\
    \ == 0\n        (1, 1)\n    else\n        even, odd = 0, 0\n        while num\
    \ > 0\n            digit = num % 10\n            if digit % 2 == 0\n         \
    \       even += 1\n            else\n                odd += 1\n            end\n\
    \            num /= 10\n        return (even, odd)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123)\
    \ == (1, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that takes an integer\
    \ and returns the number of digits in that integer.", "    if num < 0 \n     \
    \   error(\"The given number should be positive\")\n    else if num == 0\n   \
    \     (1, 1)\n    else if num % 2 == 0\n        (even_odd_count(num / 2), 1)\n\
    \    else\n        (even_odd_count(num / 2) + 1, even_odd_count(num % 2))\nend\n\
    </cell>\n<code language=julia-1.5>", "    if num < 0\n        error(\"The input\
    \ must be positive\")\n    end\n    even = num % 2 == 0\n    odd = num % 2 !=\
    \ 0\n    return even, odd\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes an integer and returns the number of digits in it.", "    if num\
    \ < 0\n        error(\"The input must be positive\")\n    end\n    even, odd =\
    \ 0, 0\n    for n in reverse(digits(num))\n        if n % 2 == 0\n           \
    \ even += 1\n        else\n            odd += 1\n        end\n    end\n    return\
    \ even, odd\nend\n</cell>\n<code language=julia-1.5>\neven_odd_count(-12)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(123)\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a positive integer and returns the number of digits\
    \ in that integer.", "    if num < 0 \n        error(\"The argument must be positive\"\
    )\n    end\n    even, odd = 0, 0\n    for digit in num\n        if digit % 2 ==\
    \ 0\n            even += 1\n        else\n            odd += 1\n        end\n\
    \    end\n    return even, odd\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n</cell>\n\
    <text>\nExercise 2\nWrite a function named odd_even_count(num::Int64) that returns\
    \ the number of even and odd digits respectively of a given integer.", "    if\
    \ num < 0\n        error(\"Invalid input\")\n    end", "    if num < 0\n     \
    \   error(\"The input must be positive\")\n    elseif num == 0\n        return\
    \ (0, 0)\n    else\n        even, odd = 0, 0\n        for n in num\n         \
    \   if n % 2 == 0\n                even += 1\n            else\n             \
    \   odd += 1\n        return (even, odd)\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    @assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of digits\
    \ in an integer.", "    if num < 0\n        error(\"The argument must be positive\"\
    )\n    end\n    even, odd = 0, 0\n    while num > 0\n        digit = num % 10\n\
    \        if digit % 2 == 0\n            even += digit\n        else\n        \
    \    odd += digit\n        end\n        num /= 10\n    end\n    return (even,\
    \ odd)\nend\n</cell>\n<code language=julia-1.5>\n@assert even_odd_count(-12) ==\
    \ (1, 1)\n@assert even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a positive integer and returns the sum of the squares\
    \ of the digits in that integer.", "    if num < 0\n        error(\"The input\
    \ must be positive\")\n    elseif num == 0\n        return (0, 0)\n    elseif\
    \ num == 1\n        return (1, 0)\n    else\n        odd_count = 0\n        even_count\
    \ = 0\n        while num != 0\n            if num % 2 == 0\n                even_count\
    \ += 1\n            else\n                odd_count += 1\n            end\n  \
    \          num = num / 2\n        end\n        return (even_count, odd_count)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>", "    if num < 0 \n       \
    \ error(\"The given number cannot be negative\")\n    elseif num == 0\n      \
    \  return (0, 0)\n    elseif num % 2 == 0\n        return (num / 2, num / 2)\n\
    \    else\n        return (num / 2, num / 2 + 1)\nend\n</cell>\n<code language=julia-1.5>",
  "    if num < 0\n        error(\"The given number must be positive\")\n    end",
  "    if num < 0 \n        error(\"The given number cannot be negative\")\n    elseif\
    \ num == 0\n        return (0, 0)\n    else\n        even, odd = 0, 0\n      \
    \  for n in num\n            if n % 2 == 0\n                even += 1\n      \
    \      else\n                odd += 1\n        return (even, odd)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert even_odd_count(-12) == (1, 1)\n@assert\
    \ even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes in a list of numbers and returns the sum of the squares of the even\
    \ numbers in the list.", "    if num < 0 \n        error(\"The input must be positive\"\
    )\n    else if num == 0\n        (1, 0)\n    else if num < 10\n        (1, 0)\n\
    \    else\n        even_odd_count(num / 10) + (num % 10 % 2 == 0, num % 10)\n\
    end\n</cell>\n<code language=julia-1.5>\neven_odd_count(-12)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123)\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a positive integer and returns the number of digits in it.", "    if num < 0\n\
    \        error(\"The input must be positive\")\n    else\n        even, odd =\
    \ 0, 0\n        while num > 0\n            if num % 2 == 0\n                even\
    \ += 1\n            else\n                odd += 1\n            end\n        \
    \    num /= 10\n        end\n        return (even, odd)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123)\
    \ == (1, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of digits in an integer.", "    if num < 0\n        error(\"The given number\
    \ should be positive\")\n    elseif num == 0\n        return (0, 0)\n    else\n\
    \        even, odd = 0, 0\n        for i in 1:num\n            if i % 2 == 0\n\
    \                even += 1\n            else\n                odd += 1\n     \
    \   end\n        return (even, odd)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n\
    </cell>\n<text>\nExercise 2\nWrite a function called even_odd_count_with_memoization()\
    \ that has the following signature:", "    if num < 0\n        error(\"The given\
    \ number must be positive.\")\n    end\n    even, odd = 0, 0\n    for x in reverse(split(string(num),\
    \ \"\"))\n        if x % 2 == 0\n            even += 1\n        else\n       \
    \     odd += 1\n        end\n    end\n    return (even, odd)\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123)\
    \ == (1, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of digits in an integer.", "    if num < 0\n        error(\"The input must be\
    \ positive\")\n    elseif num == 0\n        (1, 0)\n    else\n        even, odd\
    \ = 0, 0\n        while num > 0\n            digit = num % 10\n            if\
    \ digit % 2 == 0\n                even += 1\n            else\n              \
    \  odd += 1\n            end\n            num /= 10\n        return (even, odd)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>", "    if num < 0\n        error(\"\
    The input must be positive\")\n    elseif num == 0\n        return (0, 0)\n  \
    \  elseif num % 2 == 0\n        return (1, 1)\n    else\n        return (2, 2)\n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes an integer\
    \ and returns the sum of the digits of that integer. \nFor example if the input\
    \ is 123, the function should return 1 + 2 + 3 = 6.", "    if num < 0\n      \
    \  error(\"The input number should be non-negative\")\n    end\n    even, odd\
    \ = 0, 0\n    while num > 0\n        if num % 2 == 0\n            even += 1\n\
    \        else\n            odd += 1\n        end\n        num /= 10\n    end\n\
    \    return even, odd\nend\n</cell>\n<code language=julia-1.5>\n@assert even_odd_count(-12)\
    \ == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a positive integer $n$ and returns the number\
    \ of digits in $n$ that are even.", "    if num < 0\n        error(\"The input\
    \ must be positive\")\n    elseif num == 0\n        return (0, 0)\n    else\n\
    \        even, odd = 0, 0\n        while num > 0\n            if num % 2 == 0\n\
    \                even += 1\n            else\n                odd += 1\n     \
    \       end\n            num /= 10\n        return (even, odd)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert even_odd_count(-12) == (1, 1)\n@assert\
    \ even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a positive integer and returns the number of digits in that integer.",
  "    if num < 0 \n        error(\"The input must be positive\")\n    else if num\
    \ == 0\n        (1, 0)\n    else if num % 2 == 0\n        (even_odd_count(num\
    \ / 2), 1)\n    else\n        (even_odd_count(num / 2) + 1, 0)\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a number as input and returns\
    \ the number of digits in that number.", "    if num < 0\n        error(\"The\
    \ argument must be positive\")\n    elseif num == 0\n        return (0, 0)\n \
    \   else\n        even, odd = 0, 0\n        while num > 0\n            if num\
    \ % 2 == 0\n                even += 1\n                num -= 2\n            else\n\
    \                odd += 1\n                num -= 1\n        end\n        return\
    \ (even, odd)\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert even_odd_count(-12)\
    \ == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes an integer and returns the number of digits in\
    \ that integer.", "    if num < 0 \n        error(\"The input must be positive\"\
    )\n    elseif num == 0\n        (1, 0)\n    else\n        even, odd = 0, 0\n \
    \       for n in num\n            if n % 2 == 0\n                even += 1\n \
    \           else\n                odd += 1\n        return (even, odd)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert even_odd_count(-12) == (1, 1)\n\
    @assert even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes an integer and returns the number of digits in that integer.", " \
    \   if num < 0 \n        error(\"The input must be positive\")\n    elseif num\
    \ == 0\n        (1, 0)\n    else\n        even, odd = 0, 0\n        for d in digits(num)\n\
    \            if d % 2 == 0\n                even += 1\n            else\n    \
    \            odd += 1\n        return (even, odd)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123)\
    \ == (1, 2)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the number\
    \ of digits in an integer. \nThe function should work for integers greater than\
    \ or equal to 0.", "    if num < 0\n        error(\"The input must be positive\"\
    )\n    elseif num == 0\n        return (0, 0)\n    else\n        even, odd = 0,\
    \ 0\n        while num > 0\n            if num % 2 == 0\n                even\
    \ += 1\n                num /= 2\n            else\n                odd += 1\n\
    \                num /= 2\n        end\n        return (even, odd)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert even_odd_count(-12) == (1, 1)\n\
    @assert even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes an integer and returns the number of digits in it.", "    if num\
    \ < 0\n        error(\"The input must be positive\")\n    elseif num == 0\n  \
    \      return (0, 0)\n    elseif num % 2 == 0\n        return (num / 2, num /\
    \ 2)\n    else\n        return (num / 2, num / 2 + 1)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of digits\
    \ in an integer.", "    if num < 0 \n        error(\"The input number should be\
    \ positive\")\n    else if num == 0\n        return (0, 0)\n    else\n       \
    \ even, odd = 0, 0\n        digits = num % 10\n        while digits > 0\n    \
    \        digits -= 1\n            even += digits\n            digits /= 10\n \
    \       digits = num % 10\n        while digits > 0\n            digits -= 1\n\
    \            odd += digits\n            digits /= 10\n        return (even, odd)\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\neven_odd_count(-12)\n</cell>\n\
    <code language=julia-1.4>\neven_odd_count(123)\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes an integer and returns the number of digits in that\
    \ integer. \nFor example the integer 123 has 3 digits, and the integer 123 has\
    \ 4 digits.", "    if num < 0 \n        error(\"The given number must be positive\"\
    )\n    end\n    even, odd = 0, 0\n    while num > 0\n        if num % 2 == 0\n\
    \            even += 1\n        else\n            odd += 1\n        end\n    \
    \    num /= 10\n    end\n    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(-12)\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of digits\
    \ in an integer.", "    if num < 0 \n        error(\"The input must be positive\"\
    )\n    elseif num == 0\n        (1, 0)\n    else\n        odd_count = num % 10\n\
    \        even_count = num - odd_count\n        return (even_count, odd_count)\n\
    \    end\nend\n</cell>\n<text>\nExercise 4\nWrite a function that takes a positive\
    \ integer and returns the number of digits in it.", "    if num < 0\n        error(\"\
    The input must be positive\")\n    elseif num == 0\n        return (0, 0)\n  \
    \  else\n        even, odd = 0, 0\n        while num > 0\n            digit =\
    \ num % 10\n            if digit % 2 == 0\n                even += digit\n   \
    \         else\n                odd += digit\n            end\n            num\
    \ /= 10\n        return (even, odd)\n    end\nend\n</cell>\n<code language=julia-1.0>",
  "    if num < 0\n        error(\"The given number must be positive\")\n    end\n\
    \    even, odd = 0, 0\n    while num > 0\n        digit = num % 10\n        if\
    \ digit % 2 == 0\n            even += 1\n        else\n            odd += 1\n\
    \        end\n        num /= 10\n    end\n    return (even, odd)\nend\n</cell>\n\
    <code language=julia-1.3>\n@assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123)\
    \ == (1, 2)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the number\
    \ of digits in an integer.", "    if num < 0\n        error(\"The input number\
    \ must be positive\")\n    end\n    even, odd = 0, 0\n    while num > 0\n    \
    \    if num % 2 == 0\n            even += 1\n        else\n            odd +=\
    \ 1\n        end\n        num /= 10\n    end\n    return (even, odd)\nend\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(-12)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the factorial of a given number. \nThe factorial of a number $n$ is defined\
    \ as the product of all positive integers less than or equal to $n$.", "    if\
    \ num < 0\n        error(\"The input must be positive\")\n    elseif num == 0\n\
    \        return (0, 0)\n    elseif num % 2 == 0\n        return (num / 2, num\
    \ / 2)\n    else\n        return (num / 2, num / 2 + 1)\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a positive integer and returns the number\
    \ of digits in that integer.", "    if num < 0\n        error(\"The input must\
    \ be positive\")\n    end\n    even, odd = 0, 0\n    while num > 0\n        digit\
    \ = num % 10\n        if digit % 2 == 0\n            even += digit\n        else\n\
    \            odd += digit\n        end\n        num /= 10\n    end\n    return\
    \ even, odd\nend\n</cell>\n<code language=julia-1.5>\n@assert even_odd_count(-12)\
    \ == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a positive integer and returns the number of\
    \ digits in that integer.", "    if num < 0\n        error(\"The given number\
    \ should be positive\")\n    elseif num == 0\n        (1, 0)\n    else\n     \
    \   even, odd = 0, 0\n        while num != 0\n            digit = num % 10\n \
    \           if digit % 2 == 0\n                even += 1\n            else\n \
    \               odd += 1\n            end\n            num /= 10\n        return\
    \ (even, odd)\n    end\nend\n</cell>\n<code language=julia-1.4>\neven_odd_count(-12)\n\
    </cell>\n<code language=julia-1.4>\neven_odd_count(123)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the number of digits in an integer.", "   \
    \ if num < 0\n        error(\"The given number should be positive\")\n    elseif\
    \ num == 0\n        return (0, 0)\n    else\n        even, odd = 0, 0\n      \
    \  for n in num\n            if n % 2 == 0\n                even += 1\n      \
    \      else\n                odd += 1\n        return (even, odd)\n    end\nend\n\
    </cell>\n<code language=julia-1.4>", "    if num < 0\n        error(\"The given\
    \ number should be positive\")\n    end\n    even = 0\n    odd = 0\n    while\
    \ num > 0\n        if num % 2 == 0\n            even += 1\n        else\n    \
    \        odd += 1\n        end\n        num /= 10\n    end\n    return (even,\
    \ odd)\nend\n</cell>\n<code language=julia-1.5>\n@assert even_odd_count(-12) ==\
    \ (1, 1)\n@assert even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a positive integer and returns the number of digits\
    \ in that number. \nThe function should raise an error if the number is not positive.",
  "    if num < 0 \n        error(\"The input must be positive\")\n    elseif num\
    \ == 0\n        return (0, 0)\n    else\n        even = 0\n        odd = 0\n \
    \       for i in 1:num\n            if num % i == 0\n                even += 1\n\
    \            else\n                odd += 1\n        end\n        return (even,\
    \ odd)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ an integer and returns the sum of all even numbers that are less than or equal\
    \ to that integer.", "    if num < 0 \n        error(\"The input must be positive\"\
    )\n    elseif num == 0\n        (1, 0)\n    else\n        even_odd_count(num /\
    \ 10) + (num % 10 == 0 ? 1 : 0)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of digits\
    \ in an integer.", "    if num < 0\n        error(\"The given number should be\
    \ non-negative\")\n    end\n    even_odd_count_helper(num, 0)\nend", "    if num\
    \ < 0 \n        error(\"The input must be positive\")\n    elseif num == 0\n \
    \       (1, 0)\n    else\n        even, odd = 0, 0\n        while num > 0\n  \
    \          if num % 2 == 0\n                even += 1\n                num -=\
    \ 2\n            else\n                odd += 1\n                num -= 1\n  \
    \      end\n        return (even, odd)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n\
    </cell>\n<text>\nExercise 2\nWrite a function called is_palindrome(num) that takes\
    \ an integer and returns a boolean indicating whether it is a palindrome. \nA\
    \ palindrome is a number that is the same when read from left to right and from\
    \ right to left.", "    if num < 0 \n        error(\"The input must be positive\"\
    )\n    else if num == 0\n        return (0, 0)\n    else if num % 2 == 0\n   \
    \     return (num / 2, num / 2)\n    else\n        return (num / 2, num / 2 +\
    \ 1)\nend\n</cell>\n<code language=julia-1.5>", "    if num < 0 \n        error(\"\
    The given number must be positive.\")\n    else if num == 0\n        (1, 0)\n\
    \    else\n        even, odd = 0, 0\n        while num > 0\n            if num\
    \ % 2 == 0\n                even += 1\n                num -= 2\n            else\n\
    \                odd += 1\n                num -= 1\n        end\n        return\
    \ (even, odd)\n    end\nend\n</cell>\n<code language=julia-1.4>\n@assert even_odd_count(-12)\
    \ == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a number as input and returns the number of digits\
    \ in that number.", "    if num < 0\n        error(\"The input must be positive\"\
    )\n    end\n    even, odd = 0, 0\n    for i in reverse(digits(num))\n        if\
    \ i%2 == 0\n            even += 1\n        else\n            odd += 1\n      \
    \  end\n    end\n    return Tuple{Int64, Int64}(even, odd)\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123)\
    \ == (1, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a positive\
    \ integer and returns the number of digits in that integer.", "    if num < 0\n\
    \        error(\"The given number must be positive.\")\n    end\n    even, odd\
    \ = 0, 0\n    while num > 0\n        if num % 2 == 0\n            even += 1\n\
    \        else\n            odd += 1\n        end\n        num /= 10\n    end\n\
    \    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>", "    if num\
    \ < 0\n        error(\"The input number should be positive\")\n    end\n    even,\
    \ odd = 0, 0\n    for n in reverse(split(string(num), \"\"))\n        if n % 2\
    \ == 0\n            even += 1\n        else\n            odd += 1\n        end\n\
    \    end\n    return (even, odd)\nend\n</cell>\n<code language=julia-1.4>\n@assert\
    \ even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a positive integer and returns\
    \ the number of digits in that number.", "    if num < 0 \n        error(\"The\
    \ given number must be positive\")\n    else if num == 0\n        return (0, 0)\n\
    \    else\n        even, odd = 0, 0\n        while num > 0\n            digit\
    \ = num % 10\n            if digit % 2 == 0\n                even += digit\n \
    \           else\n                odd += digit\n            end\n            num\
    \ /= 10\n        return (even, odd)\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if num < 0\n        error(\"The input must be positive\")\n    elseif num ==\
    \ 0\n        (1, 1)\n    else\n        odd_count = num % 10\n        even_count\
    \ = num / 10\n        return (even_count, odd_count)\n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the factorial of a given number.\
    \ \nThe factorial of a number $n$ is defined as the product of all the integers\
    \ up to and including $n$. \nThe factorial of 0 is 1.", "    if num < 0\n    \
    \    error(\"The input number should be positive\")\n    elseif num == 0\n   \
    \     (1, 0)\n    else\n        odd_count = num % 10\n        even_count = num\
    \ / 10\n        return (odd_count, even_count)\n    end\nend\n</cell>\n<text>\n\
    Exercise 9\nWrite a function that takes a positive integer and returns the sum\
    \ of the digits of that integer.", "    if num < 0 \n        error(\"The input\
    \ must be positive\")\n    elseif num == 0\n        (1, 0)\n    else\n       \
    \ even_odd_count(num / 10) + (num % 10 == 0 ? 1 : 0)\n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes an integer and returns the number\
    \ of digits in that integer.", "    if num < 0 \n        error(\"The input must\
    \ be positive\")\n    elseif num == 0\n        return (0, 0)\n    else\n     \
    \   even, odd = 0, 0\n        digits = num % 10\n        while digits > 0\n  \
    \          if digits % 2 == 0\n                even += 1\n            else\n \
    \               odd += 1\n            digits /= 10\n        return (even, odd)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@assert even_odd_count(-12)\
    \ == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of digits in an integer.", "   \
    \ if num < 0\n        error(\"The given number must be positive\")\n    elseif\
    \ num == 0\n        (1, 0)\n    else\n        odd_count = num % 10\n        even_count\
    \ = num - odd_count\n        return (even_count, odd_count)\n    end\nend\n</cell>\n\
    <code language=julia-1.4>", "    if num < 0\n        error(\"The input must be\
    \ positive\")\n    end\n    even, odd = 0, 0\n    for x in num\n        if x %\
    \ 2 == 0\n            even += 1\n        else\n            odd += 1\n        end\n\
    \    end\n    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>", " \
    \   if num < 0\n        error(\"The input must be positive\")\n    elseif num\
    \ == 0\n        return (0, 0)\n    else\n        even, odd = 0, 0\n        while\
    \ num > 0\n            digit = num % 10\n            if digit % 2 == 0\n     \
    \           even += digit\n            else\n                odd += digit\n  \
    \          end\n            num /= 10\n        return (even, odd)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(-12)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123)\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a positive integer and returns the sum of all digits in that number.", "   \
    \ if num < 0\n        error(\"The input must be positive\")\n    elseif num ==\
    \ 0\n        return (0, 0)\n    elseif num % 2 == 0\n        return (num / 2,\
    \ num / 2)\n    else\n        return (num / 2, num / 2 + 1)\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if num < 0\n        error(\"The input must be positive\"\
    )\n    end\n    even_odd_count_helper(num, 1, 2)\nend", "    if num < 0\n    \
    \    error(\"The given number must be positive.\")\n    end\n    even, odd = 0,\
    \ 0\n    while num > 0\n        if num % 2 == 0\n            even += 1\n     \
    \   else\n            odd += 1\n        end\n        num /= 10\n    end\n    return\
    \ (even, odd)\nend\n</cell>\n<code language=julia-1.0>", "    if num < 0\n   \
    \     error(\"The input must be positive\")\n    end", "    if num < 0 \n    \
    \    error(\"The argument must be positive\")\n    elseif num == 0\n        (1,\
    \ 0)\n    else\n        even, odd = 0, 0\n        while num > 0\n            digit\
    \ = num % 10\n            num = num / 10\n            if digit % 2 == 0\n    \
    \            even += 1\n            else\n                odd += 1\n        end\n\
    \        return (even, odd)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a positive integer and\
    \ returns the number of digits in that integer.", "    if num < 0\n        error(\"\
    The input number must be positive.\")\n    end\n    even = 0\n    odd = 0\n  \
    \  for n in num\n        if n % 2 == 0\n            even += 1\n        else\n\
    \            odd += 1\n        end\n    end\n    return (even, odd)\nend\n</cell>\n\
    <code language=julia-1.4>\neven_odd_count(-12)\n</cell>\n<code language=julia-1.4>\n\
    even_odd_count(123)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of digits in an integer.", "    if num < 0 \n        error(\"The\
    \ given number cannot be negative\")\n    elseif num == 0\n        (1, 0)\n  \
    \  else\n        odd_count = sum(num % 2 == 0 for _ in 1:num)\n        even_count\
    \ = sum(num % 2 == 1 for _ in 1:num)\n        return (even_count, odd_count)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@assert even_odd_count(-12)\
    \ == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the number of digits in an integer.", "   \
    \ if num < 0\n        error(\"The given number must be positive.\")\n    end\n\
    \    even, odd = 0, 0\n    while num > 0\n        digit = num % 10\n        if\
    \ digit % 2 == 0\n            even += digit\n        else\n            odd +=\
    \ digit\n        end\n        num /= 10\n    end\n    return (even, odd)\nend\n\
    </cell>\n<code language=julia-1.5>", "    if num < 0 \n        error(\"The input\
    \ must be positive\")\n    else if num == 0\n        (1, 0)\n    else if num %\
    \ 2 == 0\n        (1, num/2)\n    else\n        (num/2, num/2)\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert even_odd_count(0) == (1, 0)\n@assert even_odd_count(1)\
    \ == (1, 1)\n@assert even_odd_count(2) == (0, 1)\n@assert even_odd_count(3) ==\
    \ (1, 1)\n@assert even_odd_count(4) == (1, 0)\n@assert even_odd_count(5) == (0,\
    \ 1)\n@assert even_odd_count(6) == (1, 1)\n@assert even_odd_count(7) == (1, 0)\n\
    @assert even_odd_count(8) == (0, 1)\n@assert even_odd_count(9) == (1, 1)\n@assert\
    \ even_odd_count(10) == (1, 0)\n@assert even_odd_count(11) == (0, 1)\n@assert\
    \ even_odd_count(12) == (1, 1)\n@assert even_odd_count(13) == (1, 0)\n@assert\
    \ even_odd_count(14) == (0, 1)\n@assert even_odd_count(15) == (1, 1)\n@assert\
    \ even_odd_count(16) == (1, 0)\n@assert even_odd_count(17) == (0, 1)\n@assert\
    \ even_odd_count(18) == (1, 1)\n@assert even_odd_count(19) == (1, 0)\n@assert\
    \ even_odd_count(20) == (0, 1)\n@assert even_odd_count(21) == (1, 1)\n@assert\
    \ even_odd_count(22) == (1, 0)\n@assert even_odd_count(23) == (0, 1)\n@assert\
    \ even_odd_count(24) == (1, 1)\n@assert even_odd_count(25) == (1, 0)\n@assert\
    \ even_odd_count(26) == (0, 1)\n@assert even_odd_count(27) == (1, 1)\n@assert\
    \ even_odd_count(28) == (1, 0)\n@assert even_odd_count(29) == (0, 1)\n@assert\
    \ even_odd_count(30) == (1, 1)\n@assert even_odd_count(31) == (1, 0)\n@assert\
    \ even_odd_count(32) == (0, 1)\n@assert even_odd_count(33) == (1, 1)\n@assert\
    \ even_odd_count(34) == (1, 0)\n@assert even_odd_count(35) == (0, 1)\n@assert\
    \ even_odd_count(36) == (1, 1)\n@assert even_odd_count(37) == (1, 0)\n@assert\
    \ even_odd_count(38) == (0, 1)\n@", "    if num < 0\n        error(\"The input\
    \ must be positive\")\n    end\n    even, odd = 0, 0\n    for i in 1:num\n   \
    \     if num % 2 == 0\n            even += 1\n        else\n            odd +=\
    \ 1\n        end\n    end\n    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a positive integer and\
    \ returns the number of digits in that integer.", "    if num < 0\n        error(\"\
    The input must be positive\")\n    end\n    even_odd_count_helper(num, 1, 0)\n\
    end", "    if num < 0\n        error(\"The input must be positive\")\n    end",
  "    if num < 0\n        error(\"The input must be positive\")\n    end\n    even,\
    \ odd = 0, 0\n    for x in num\n        if x % 2 == 0\n            even += 1\n\
    \        else\n            odd += 1\n        end\n    end\n    return (even, odd)\n\
    end\n</cell>\n<code language=julia-1.4>\n@assert even_odd_count(-12) == (1, 1)\n\
    @assert even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes an integer and returns the number of digits in it.", "    if num\
    \ < 0\n        error(\"The input must be positive\")\n    elseif num == 0\n  \
    \      (1, 0)\n    else\n        even, odd = 0, 0\n        while num > 0\n   \
    \         if num % 2 == 0\n                even += 1\n                num -= 2\n\
    \            else\n                odd += 1\n                num -= 1\n      \
    \  end\n        return (even, odd)\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    @assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of digits\
    \ in an integer.", "    if num < 0\n        error(\"The input must be positive\"\
    )\n    end\n    even, odd = 0, 0\n    while num > 0\n        digit = num % 10\n\
    \        if digit % 2 == 0\n            even += digit\n        else\n        \
    \    odd += digit\n        end\n        num /= 10\n    end\n    return (even,\
    \ odd)\nend\n</cell>\n<code language=julia-1.5>\n@assert even_odd_count(-12) ==\
    \ (1, 1)\n@assert even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes in a list of integers and returns the number of even\
    \ and odd numbers in the list.", "    if num < 0\n        error(\"The input must\
    \ be positive\")\n    elseif num == 0\n        (1, 0)\n    else\n        odd_count\
    \ = num % 10\n        even_count = num - odd_count\n        return (even_count,\
    \ odd_count)\n    end\nend\n</cell>\n<code language=julia-1.5>", "    if num <\
    \ 0\n        error(\"The given number must be positive.\")\n    elseif num ==\
    \ 0\n        return (0, 0)\n    elseif num == 1\n        return (1, 1)\n    else\n\
    \        even, odd = 0, 0\n        digits = num % 10\n        while digits > 0\n\
    \            digits -= 1\n            if digits % 2 == 0\n                even\
    \ += 1\n            else\n                odd += 1\n        end\n        return\
    \ (even, odd)\n    end\nend\n</cell>\n<code language=julia-1.5>", "    if num\
    \ < 0 \n        error(\"The given number cannot be negative\")\n    else if num\
    \ == 0\n        return (0, 0)\n    else\n        even, odd = 0, 0\n        for\
    \ i in 1:num\n            if num % i == 0\n                even += 1\n       \
    \     else\n                odd += 1\n        end\n        return (even, odd)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@assert even_odd_count(-12)\
    \ == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise\
    \ 2.3\nWrite a function called is_palindrome that takes in a number and returns\
    \ true if the number is palindrome and false otherwise.", "    if num < 0\n  \
    \      error(\"The input must be positive\")\n    end\n    even, odd = 0, 0\n\
    \    for x in reverse(digits(num))\n        if x % 2 == 0\n            even +=\
    \ 1\n        else\n            odd += 1\n        end\n    end\n    return even,\
    \ odd\nend\n</cell>\n<code language=julia-1.3>\neven_odd_count(-12)\n</cell>\n\
    <code language=julia-1.3>\neven_odd_count(123)\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a positive integer and returns the sum of the digits\
    \ of that integer. \nThe function should raise an error if the input is not positive.",
  "    if num < 0\n        error(\"The input must be positive\")\n    elseif num ==\
    \ 0\n        (1, 0)\n    else\n        even, odd = 0, 0\n        while num > 0\n\
    \            digit = num % 10\n            num = num / 10\n            if digit\
    \ % 2 == 0\n                even += 1\n            else\n                odd +=\
    \ 1\n        end\n        return (even, odd)\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    @assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes an integer and returns\
    \ the number of digits in that integer.", "    if num < 0\n        error(\"The\
    \ given number must be positive\")\n    elseif num == 0\n        (1, 1)\n    else\n\
    \        odd_count = num % 10\n        even_count = num - odd_count\n        return\
    \ (odd_count, even_count)\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if num < 0\n        error(\"The given number cannot be negative\")\n    elseif\
    \ num == 0\n        return (0, 0)\n    else\n        even, odd = 0, 0\n      \
    \  while num > 0\n            if num % 2 == 0\n                even += 1\n   \
    \             num /= 2\n            else\n                odd += 1\n         \
    \       num /= 2\n        end\n        return (even, odd)\n    end\nend\n</cell>\n\
    <code language=julia-1.4>\n@assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123)\
    \ == (1, 2)\n</cell>\n<text>\nExercise 3.3\nWrite a function is_palindrome(num::Int64)\
    \ which returns true if the given number is a palindrome and false otherwise.",
  "    if num < 0\n        error(\"The given number should be positive\")\n    elseif\
    \ num == 0\n        (1, 0)\n    else\n        odd_count = num % 10\n        even_count\
    \ = num / 10\n        return (even_count, odd_count)\n    end\nend\n</cell>\n\
    <text>\nProblem 3\nWrite a function that takes an integer and returns the sum\
    \ of the digits of that integer.", "    if num < 0\n        error(\"Invalid input:\
    \ even_odd_count expects positive integer\")\n    end\n    even, odd = 0, 0\n\
    \    for x in num\n        if x % 2 == 0\n            even += 1\n        else\n\
    \            odd += 1\n        end\n    end\n    return even, odd\nend\n</cell>\n\
    <code language=julia-1.5>\n@time even_odd_count(-12)\n</cell>\n<code language=julia-1.5>\n\
    @time even_odd_count(123)\n</cell>\n<text>\nExercise: Write a function that takes\
    \ a positive integer and returns the number of digits in that integer.", "   \
    \ if num < 0 \n        error(\"The given number should be positive\")\n    elseif\
    \ num == 0\n        (1, 0)\n    else\n        even, odd = 0, 0\n        while\
    \ num > 0\n            digit = num % 10\n            if digit % 2 == 0\n     \
    \           even += 1\n            else\n                odd += 1\n          \
    \  end\n            num /= 10\n        return (even, odd)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123)\
    \ == (1, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of digits in an integer.", "    if num < 0 \n        error(\"The given number\
    \ should be positive\")\n    else if num == 0\n        return (1, 0)\n    else\n\
    \        even, odd = 0, 0\n        while num > 0\n            digit = num % 10\n\
    \            if digit % 2 == 0\n                even += digit\n            else\n\
    \                odd += digit\n            end\n            num /= 10\n      \
    \  return (even, odd)\n    end\nend\n</cell>\n<code language=julia-1.5>\neven_odd_count(-12)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a positive integer and returns the number of\
    \ digits in that number.", "    if num < 0 \n        error(\"The input must be\
    \ positive\")\n    else if num == 0\n        return (1, 0)\n    else if num %\
    \ 2 == 0\n        return (num / 2, 1)\n    else\n        return (num / 2, num\
    \ % 2)\nend\n</cell>\n<code language=julia-1.5>", "    if num < 0\n        error(\"\
    The input must be positive\")\n    else\n        even = num % 2 == 0\n       \
    \ odd = num % 2 != 0\n        return (even, odd)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.3>\neven_odd_count(-12)\n</cell>\n<code language=julia-1.3>\n\
    even_odd_count(123)\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a number as input and returns the number of digits in that number.", "    if\
    \ num < 0\n        error(\"The input must be positive\")\n    elseif num == 0\n\
    \        return (0, 0)\n    else\n        even, odd = 0, 0\n        for n in num\n\
    \            if n % 2 == 0\n                even += 1\n            else\n    \
    \            odd += 1\n        return (even, odd)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.4>", "    if num < 0 \n        error(\"The given number cannot\
    \ be negative\")\n    end\n    if num == 0\n        return (0, 0)\n    end\n \
    \   even::Int64 = 0\n    odd::Int64 = 0\n    for i in 1:num\n        if num %\
    \ i == 0\n            even += i\n        else\n            odd += i\n        end\n\
    \    end\n    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>", " \
    \   if num < 0\n        error(\"The given number must be positive.\")\n    end\n\
    \    even, odd = 0, 0\n    for n in num\n        if n % 2 == 0\n            even\
    \ += 1\n        else\n            odd += 1\n        end\n    end\n    return (even,\
    \ odd)\nend\n</cell>\n<code language=julia-1.5>\neven_odd_count(-12)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(123)\n</cell>\n<text>\nExercise 3\n\
    Write a function called is_palindrome that takes an integer and returns true if\
    \ the integer is a palindrome and false otherwise.", "    if num < 0\n       \
    \ error(\"The input number should be positive\")\n    end\n    even, odd = 0,\
    \ 0\n    while num > 0\n        digit = num % 10\n        if digit % 2 == 0\n\
    \            even += digit\n        else\n            odd += digit\n        end\n\
    \        num /= 10\n    end\n    return (even, odd)\nend\n</cell>\n<code language=julia-1.3>",
  "    if num < 0\n        error(\"The given number must be positive\")\n    elseif\
    \ num == 0\n        (1, 0)\n    else\n        even, odd = 0, 0\n        while\
    \ num > 0\n            if num % 2 == 0\n                even += 1\n          \
    \      num = (num / 2)\n            else\n                odd += 1\n         \
    \       num = (num / 2)\n        end\n        return (even, odd)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert even_odd_count(-12) == (1, 1)\n@assert\
    \ even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a positive integer and returns the number of digits in that integer.",
  "    if num < 0 \n        error(\"The input must be positive\")\n    elseif num\
    \ == 0\n        (1, 0)\n    else\n        odd_count = num % 10\n        even_count\
    \ = num - odd_count\n        return (even_count, odd_count)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>", "    if num < 0\n        error(\"The input must be\
    \ positive\")\n    elseif num == 0\n        return (0, 0)\n    else\n        even,\
    \ odd = 0, 0\n        for i in 1:num\n            if num % i == 0\n          \
    \      even += 1\n            else\n                odd += 1\n        end\n  \
    \      return (even, odd)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes an integer and returns\
    \ the number of digits in that integer.", "    if num < 0\n        error(\"The\
    \ input number must be positive.\")\n    elseif num == 0\n        return (0, 0)\n\
    \    elseif num % 2 == 0\n        return (num / 2, num / 2)\n    else\n      \
    \  return (num / 2, num / 2 + 1)\n    end\nend\n</cell>\n<code language=julia-1.0>",
  "    if num < 0 \n        error(\"The input must be positive\")\n    else if num\
    \ == 0\n        return (0,0)\n    else if num < 10\n        return (1,0)\n   \
    \ else\n        even, odd = 0, 0\n        for n in num\n            if n % 2 ==\
    \ 0\n                even += 1\n            else\n                odd += 1\n \
    \       return (even, odd)\nend\n</cell>\n<code language=julia-1.5>", "    if\
    \ num < 0\n        error(\"The input must be positive\")\n    end\n    even, odd\
    \ = 0, 0\n    for n in num\n        if n % 2 == 0\n            even += 1\n   \
    \     else\n            odd += 1\n        end\n    end\n    return (even, odd)\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert even_odd_count(-12) == (1, 1)\n\
    @assert even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes an integer $n$ and returns the number of digits in $n$. \nFor $n\
    \ = 10^9$, your function should return $10^9$.", "    if num < 0\n        error(\"\
    The given number should be positive\")\n    end\n    even, odd = 0, 0\n    for\
    \ i in 1:num\n        if num % 2 == 0\n            even += 1\n        else\n \
    \           odd += 1\n        end\n    end\n    return even, odd\nend\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(-12)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123)\n</cell>\n<text>\nExercise 2", "    if num < 0\n        error(\"\
    The given number must be positive\")\n    end\n    even, odd = 0, 0\n    while\
    \ num > 0\n        digit = num % 10\n        if digit % 2 == 0\n            even\
    \ += digit\n        else\n            odd += digit\n        end\n        num /=\
    \ 10\n    end\n    return even, odd\nend\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(-12)\n</cell>\n<code language=julia-1.5>\neven_odd_count(123)\n\
    </cell>\n<text>\nExercise: Write a function that returns the number of digits\
    \ in an integer.", "    if num < 0\n        error(\"The input must be positive\"\
    )\n    elseif num == 0\n        (1, 1)\n    else\n        even, odd = 0, 0\n \
    \       while num != 0\n            even = even + num % 10\n            odd =\
    \ odd + num % 10\n            num = num / 10\n        end\n        return (even,\
    \ odd)\n    end\nend\n</cell>\n<code language=julia-1.5>", "    if num < 0\n \
    \       error(\"The given number should be positive\")\n    elseif num == 0\n\
    \        return (0, 0)\n    else\n        even, odd = 0, 0\n        digits = num\
    \ % 10\n        while digits > 0\n            if digits % 2 == 0\n           \
    \     even += 1\n            else\n                odd += 1\n            digits\
    \ /= 10\n        return (even, odd)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a number as input and\
    \ returns the number of digits in that number. \nThe function should work for\
    \ negative numbers as well."]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
