name: HumanEval_8_sum_product
language: julia
results:
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_ = 0\n    product_ = 1\n    for n in numbers\n        sum_\
    \ += n\n        product_ *= n\n    return (sum_, product_)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a vector of integers and returns the sum of the squares\
    \ of the integers in the vector.\nThe function should raise a TypeError if the\
    \ vector is empty.\nThe function should raise a TypeError if the vector contains\
    \ non-integer values.\nThe function should raise a TypeError if the vector contains\
    \ negative values.\nThe function should raise a TypeError if the vector contains\
    \ values larger than the maximum integer value.\nThe function should raise a TypeError\
    \ if the vector contains values smaller than the minimum integer value.\nThe function\
    \ should raise a TypeError if the vector contains values outside the range of\
    \ Int64.\nThe function should raise a TypeError if the vector contains NaN values.\n\
    The function should raise a TypeError if the vector contains infinities or negative\
    \ infinities.\nThe function should raise a TypeError if the vector contains values\
    \ outside the range of Int64.\nThe function should raise a TypeError if the vector\
    \ contains values outside the range of Int64.\nThe function should raise a TypeError\
    \ if the vector contains values outside the range of Int64.\nThe function should\
    \ raise a TypeError if the vector contains values outside the range of Int64.\n\
    The function should raise a TypeError if the vector contains values outside the\
    \ range of Int64.\nThe function should raise a TypeError if the vector contains\
    \ values outside the range of Int64.\nThe function should raise a TypeError if\
    \ the vector contains values outside the range of Int64.\nThe function should\
    \ raise a TypeError if the vector contains values outside the range of Int64.\n\
    The function should raise a TypeError if the vector contains values outside the\
    \ range of Int64.\nThe function should raise a TypeError if the vector contains\
    \ values outside the range of Int64.\nThe function should raise a TypeError if\
    \ the vector contains values outside the range of Int64.\nThe function should\
    \ raise a TypeError if the vector contains values outside the range of Int64.\n\
    The function should raise a TypeError if the vector contains values outside the\
    \ range of Int64.\nThe function should raise a TypeError if the vector contains\
    \ values outside the range of Int64.\nThe function should raise a TypeError if\
    \ the vector contains values outside the range of Int64.\nThe function should\
    \ raise a TypeError if the vector contains values outside the range of Int64.\n\
    The function should raise a TypeError if the vector contains values outside the\
    \ range of Int64.\nThe function should raise a TypeError if the vector contains\
    \ values outside the range of Int64.\nThe function should raise a TypeError if\
    \ the vector contains values outside the range of Int64.\nThe function should\
    \ raise a TypeError if the vector contains values outside the range of Int\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppp4m5yh9.jl:16\nin expression starting at\
    \ /tmp/tmppp4m5yh9.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        return (0, 1) \n    else \n \
    \       sum_ = numbers[1]\n        prod_ = 1\n        for i in numbers[2:end]\n\
    \            sum_ = sum_ + i\n            prod_ = prod_ * i\n        return (sum_,\
    \ prod_)\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1,\
    \ 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphsbc01jf.jl:20\nin expression starting at\
    \ /tmp/tmphsbc01jf.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_product = 1\n    for i\
    \ in numbers\n        product_product *= i\n    end\n    return (sum_product,\
    \ product_product)\nend\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3,4,5])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the sum of the squares\
    \ of the numbers in a vector.\n    >>> sum_of_squares([1,2,3,4,5])\n    25\n \
    \   >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n    25\n    >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n\
    \    25\n    >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n    25\n    >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n\
    \    25\n    >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n    25\n    >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n\
    \    25\n    >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n    25\n    >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n\
    \    25\n    >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n    25\n    >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n\
    \    25\n    >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n    25\n    >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n\
    \    25\n    >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n    25\n    >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n\
    \    25\n    >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n    25\n    >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n\
    \    25\n    >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n    25\n    >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n\
    \    25\n    >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n    25\n    >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n\
    \    25\n    >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n    25\n    >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n\
    \    25\n    >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n    25\n    >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n\
    \    25\n    >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n    25\n    >>> \nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptc8g9ukc.jl:16\nin expression starting at\
    \ /tmp/tmptc8g9ukc.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        return (0, 1) \n    else \n \
    \       sum_product = numbers[1]\n        product_of_numbers = numbers[1]\n  \
    \      for number in numbers[2:end] \n            sum_product = sum_product +\
    \ number\n            product_of_numbers = product_of_numbers * number\n     \
    \   end\n        return (sum_product, product_of_numbers)\n    end\nend\n</cell>\n\
    <code language=julia-1.4>\nsum_product([1, 2, 3, 4])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the sum of the squares of the integers in a\
    \ given list.\n    >>> sum_square_of_list([])\n    0.0\n    >>> sum_square_of_list([4,\
    \ 9, 16])\n    49.0\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwfheq15c.jl:21\nin expression starting at\
    \ /tmp/tmpwfheq15c.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        return (0, 1) \n    else \n \
    \       sum_ = numbers[1]\n        prod_ = 1\n        for i in numbers[2:end]\n\
    \            sum_ += i\n            prod_ *= i\n        return (sum_, prod_)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@assert sum_product([1, 2,\
    \ 3]) == (6, 3)\n@assert sum_product([1, 2, 3, 4]) == (10, 24)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a list of integers and returns a list\
    \ of all possible permutations of the integers in the list.\nFor example, given\
    \ [1,2,3], the function should return [1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2],\
    \ and [3,2,1].\nThe order of the output does not matter.\nThe function should\
    \ work for lists of any size.\nThe function should work for empty lists as well.\n\
    The function should work for any type of collection that implements length.\n\
    The function should work for any type of collection that implements append.\n\
    The function should work for any type of collection that implements push.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7398nmn3.jl:20\nin expression starting at\
    \ /tmp/tmp7398nmn3.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        return (0, 1) \n    else \n \
    \       sum_product = numbers[1] + numbers[length(numbers)] \n        return (sum_product,\
    \ sum_product * numbers[1]) \nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of integers and returns a vector of integers containing\
    \ the squares of the integers in the vector.\nFor example, given [1,2,3], the\
    \ function should return [1,2,3].\nThe function should return nothing if the vector\
    \ is empty.\nThe function should return nothing if the vector is of length 1.\n\
    The function should return nothing if the vector is of length 2.\nThe function\
    \ should return nothing if the vector is of length 3.\nThe function should return\
    \ nothing if the vector is of length 4.\nThe function should return nothing if\
    \ the vector is of length 5.\nThe function should return nothing if the vector\
    \ is of length 6.\nThe function should return nothing if the vector is of length\
    \ 7.\nThe function should return nothing if the vector is of length 8.\nThe function\
    \ should return nothing if the vector is of length 9.\nThe function should return\
    \ nothing if the vector is of length 10.\nThe function should return nothing if\
    \ the vector is of length 11.\nThe function should return nothing if the vector\
    \ is of length 12.\nThe function should return nothing if the vector is of length\
    \ 13.\nThe function should return nothing if the vector is of length 14.\nThe\
    \ function should return nothing if the vector is of length 15.\nThe function\
    \ should return nothing if the vector is of length 16.\nThe function should return\
    \ nothing if the vector is of length 17.\nThe function should return nothing if\
    \ the vector is of length 18.\nThe function should return nothing if the vector\
    \ is of length 19.\nThe function should return nothing if the vector is of length\
    \ 20.\nThe function should return nothing if the vector is of length 21.\nThe\
    \ function should return nothing if the vector is of length 22.\nThe function\
    \ should return nothing if the vector is of length 23.\nThe function should return\
    \ nothing if the vector is of length 24.\nThe function should return nothing if\
    \ the vector is of length 25.\nThe function should return nothing if the vector\
    \ is of length 26.\nThe function should return nothing if the vector is of length\
    \ 27.\nThe function should return nothing if the vector is of length 28.\nThe\
    \ function should return nothing if the vector is of length 29.\nThe function\
    \ should return nothing if the vector is of length 30.\nThe function should return\
    \ nothing if the vector is of length 31.\nThe function should return nothing if\
    \ the vector is of length 32.\nThe function should return nothing if the vector\
    \ is of length 33.\nThe function should return nothing if the vector is of length\
    \ 34.\nThe function should return nothing if the vector is of length 35.\n\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0ryp382e.jl:15\nin expression starting at\
    \ /tmp/tmp0ryp382e.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_ = 0\n    product_ = 1\n    for n in numbers\n        sum_\
    \ = sum_ + n\n        product_ = product_ * n\n    return (sum_, product_)\nend\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<text>\nExercise\
    \ 7: Write a function that takes a vector of integers and returns the sum of the\
    \ squares of the integers in the vector.\n    >>> sum_of_squares([1,2,3,4])\n\
    \    25\n    >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n    25\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6_cfz3_v.jl:16\nin expression starting at\
    \ /tmp/tmp6_cfz3_v.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_of_numbers = reduce(mul,\
    \ numbers, 1)\n    return (sum_product, product_of_numbers)\nend\n</cell>\n<code\
    \ language=julia-1.0>\nsum_product([1, 2, 3, 4])\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the sum of the squares of the numbers in a given\
    \ list.\n    >>> sum_squares_list([])\n    0.0\n    >>> sum_squares_list([1, 2,\
    \ 3, 4])\n    25.0\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptaxwkqrc.jl:13\nin expression starting at\
    \ /tmp/tmptaxwkqrc.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = zero(Int64)\n    product = one(Int64)\n    for n in numbers\n\
    \        sum += n\n        product *= n\n    return (sum, product)\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2])\
    \ == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2])\
    \ == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2])\
    \ == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2])\
    \ == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2])\
    \ == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2])\
    \ == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2])\
    \ == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2])\
    \ == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2])\
    \ == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2])\
    \ == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2])\
    \ == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2])\
    \ == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2])\
    \ == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2])\
    \ == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2])\
    \ == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2])\
    \ == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2])\
    \ == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2])\
    \ == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2])\
    \ == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2])\
    \ == (3, 6)\n@assert sum_product([1,2,3]\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1,\
    \ 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpavh27w6z.jl:16\nin expression starting at\
    \ /tmp/tmpavh27w6z.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        return (0, 1) \n    else \n \
    \       sum_ = numbers[1]\n        prod_ = 1\n        for i in numbers[2:end]\
    \ \n            sum_ = sum_ + i \n            prod_ = prod_ * i \n        return\
    \ (sum_, prod_)\nend\n</cell>\n<text>\nExercise 4\nWrite a function that takes\
    \ a vector and a number as inputs and returns the sum of the numbers in the vector\
    \ up to and including the number.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1,\
    \ 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp89p0sm8i.jl:19\nin expression starting at\
    \ /tmp/tmp89p0sm8i.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = numbers[1]\n    product_of_numbers = numbers[1]\n\
    \    for number in numbers[2:end]\n        sum_product = sum_product + number\n\
    \        product_of_numbers = product_of_numbers * number\n    end\n    return\
    \ (sum_product, product_of_numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1, 2, 3, 4])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the sum of the squares of the integers in a given list.\n    >>> sum_square([1,\
    \ 2, 3, 4])\n    25\n    >>> sum_square([-1, 2, -3, 4])\n    25\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0bm1ju_n.jl:17\nin expression starting at\
    \ /tmp/tmp0bm1ju_n.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_of_numbers = reduce(mul,\
    \ numbers, 1)\n    return (sum_product, product_of_numbers)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_product([1, 2, 3, 4])\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a vector and returns the dot product of the vector\
    \ with itself. \nThe dot product is defined as:\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t\
    @test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\
    \t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj0_1m209.jl:13\nin expression starting at\
    \ /tmp/tmpj0_1m209.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_of_numbers = reduce(mul,\
    \ numbers, 1)\n    return (sum_product, product_of_numbers)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_product([1, 2, 3, 4])\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the sum of the squares of the numbers in a given\
    \ list.\n    >>> sum_square_of_numbers([1, 2, 3, 4])\n    25\n    >>> sum_square_of_numbers([-1,\
    \ -2, -3, -4])\n    25\n    >>> sum_square_of_numbers([1, 2, -3, 4])\n    25\n\
    \    >>> sum_square_of_numbers([])\n    0\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmdv7lcfh.jl:13\nin expression starting at\
    \ /tmp/tmpmdv7lcfh.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        return (0, 1) \n    else \n \
    \       sum_ = numbers[1] + numbers[2] + numbers[3] + numbers[4] + numbers[5]\
    \ + numbers[6] + numbers[7] + numbers[8] + numbers[9] + numbers[10] + numbers[11]\
    \ + numbers[12] + numbers[13] + numbers[14] + numbers[15] + numbers[16] + numbers[17]\
    \ + numbers[18] + numbers[19] + numbers[20] + numbers[21] + numbers[22] + numbers[23]\
    \ + numbers[24] + numbers[25] + numbers[26] + numbers[27] + numbers[28] + numbers[29]\
    \ + numbers[30] + numbers[31] + numbers[32] + numbers[33] + numbers[34] + numbers[35]\
    \ + numbers[36] + numbers[37] + numbers[38] + numbers[39] + numbers[40] + numbers[41]\
    \ + numbers[42] + numbers[43] + numbers[44] + numbers[45] + numbers[46] + numbers[47]\
    \ + numbers[48] + numbers[49] + numbers[50] + numbers[51] + numbers[52] + numbers[53]\
    \ + numbers[54] + numbers[55] + numbers[56] + numbers[57] + numbers[58] + numbers[59]\
    \ + numbers[60] + numbers[61] + numbers[62] + numbers[63] + numbers[64] + numbers[65]\
    \ + numbers[66] + numbers[67] + numbers[68] + numbers[69] + numbers[70] + numbers[71]\
    \ + numbers[72] + numbers[73] + numbers[74] + numbers[75] + numbers[76] + numbers[77]\
    \ + numbers[78] + numbers[79] + numbers[80] + numbers[81] + numbers[82] + numbers[83]\
    \ + numbers[84] + numbers[85] + numbers[86] + numbers[87] + numbers[88] + numbers[89]\
    \ + numbers[90] + numbers[91] + numbers[92] + numbers[93] + numbers[94] + numbers[95]\
    \ + numbers[96] + numbers[97] + numbers[98] + numbers[99] + numbers[100] + numbers[101]\
    \ + numbers[102] + numbers[103] + numbers[104] + numbers[105] + numbers[106] +\
    \ numbers[107] + numbers[108] + numbers[109] + numbers[110] + numbers[111] + numbers[112]\
    \ + numbers[113] + numbers[114] + numbers[115] + numbers[116] + numbers[117] +\
    \ numbers[118] + numbers[\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpen_hrvvu.jl:1\nin expression starting at /tmp/tmpen_hrvvu.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = numbers[1]\n    product_of_numbers = numbers[1]\n\
    \    for number in numbers[2:end]\n        sum_product = sum_product + number\n\
    \        product_of_numbers = product_of_numbers * number\n    end\n    return\
    \ (sum_product, product_of_numbers)\nend\n</cell>\n<code language=julia-1.0>\n\
    sum_product([1,2,3,4,5])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a list of integers and returns the sum of the squares of the integers in the\
    \ list.\n    >>> square_sum([1,2,3,4,5])\n    25\n    >>> square_sum([1,4,9,16,25])\n\
    \    490\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzydrxarv.jl:17\nin expression starting at\
    \ /tmp/tmpzydrxarv.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_of_numbers = reduce(mul,\
    \ numbers, 1)\n    return (sum_product, product_of_numbers)\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeqki_vzh.jl:13\nin expression starting at\
    \ /tmp/tmpeqki_vzh.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_of_numbers = reduce(mul,\
    \ numbers, 1)\n    return (sum_product, product_of_numbers)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_product([1, 2, 3, 4])\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a list of integers and returns the sum of the squares\
    \ of the integers in the list.\n>>> square_sum([])\n0\n>>> square_sum([1, 2, 3,\
    \ 4])\n25\n>>> square_sum([-1, -2, -3, -4])\n25\n>>> square_sum([1, 2, -3, 4])\n\
    25\n>>> square_sum([-1, -2, -3, -4, 5])\n25\n>>> square_sum([1, 2, -3, 4, 5])\n\
    25\n>>> square_sum([-1, -2, -3, -4, -5, 6])\n25\n>>> square_sum([1, 2, -3, 4,\
    \ -5, 6])\n25\n>>> square_sum([-1, -2, -3, -4, -5, -6, 7])\n25\n>>> square_sum([1,\
    \ 2, -3, 4, -5, -6, 7])\n25\n>>> square_sum([-1, -2, -3, -4, -5, -6, -7, 8])\n\
    25\n>>> square_sum([1, 2, -3, 4, -5, -6, -7, 8])\n25\n>>> square_sum([-1, -2,\
    \ -3, -4, -5, -6, -7, -8])\n25\n>>> square_sum([1, 2, -3, 4, -5, -6, -7, -8])\n\
    25\n>>> square_sum([-1, -2, -3, -4, -5, -6, -7, -8, 9])\n25\n>>> square_sum([1,\
    \ 2, -3, 4, -5, -6, -7, -8, 9])\n25\n>>> square_sum([-1, -2, -3, -4, -5, -6, -7,\
    \ -8, 9, 10])\n25\n>>> square_sum([1, 2, -3, 4, -5, -6, -7, -8, 9, 10])\n25\n\
    >>> square_sum([-1, -2, -3, -4, -5, -6, -7, -8, 9, 10, 11])\n25\n>>> square_sum([1,\
    \ 2, -3, 4, -5, -6, -7, -8, 9, 10, 11])\n25\n>>> square_sum([-1, -2, -3, -4, -5,\
    \ -6, -7, -8, 9, 10, 11, 12])\n25\n>>> square_sum([1, 2, -3, 4, -5, -6, -7, -8,\
    \ 9, 10, 11, 12])\n25\n>>> square_sum([-1, -2, -3, -4, -5, -6, -7, -8, 9, 10,\
    \ 11, 12, 13])\n25\n>>> square_sum([1, 2, -3, 4, -5, -6, -7, -8, 9, 10, 11, 12,\
    \ 13])\n25\n>>> square_sum([-1, -2, -3, -4, -\nusing Test\n\n@testset begin\n\n\
    candidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t\
    @test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\
    \t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjncplsuc.jl:13\nin expression starting at\
    \ /tmp/tmpjncplsuc.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for number in numbers\n        sum\
    \ += number\n        product *= number\n    return (sum, product)\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the sum of the squares of the\
    \ numbers in a list.\nThe function should take a list of integers as an argument,\
    \ and return a list of squared integers.\nThe function should return an empty\
    \ list if the list is empty.\nThe function should raise an error if the list contains\
    \ non-integer values.\n>>> square_sum([])\n[]\n>>> square_sum([1, 2, 3, 4])\n\
    [4, 9, 16, 25]\n>>> square_sum([1, 2, \"3\", 4])\n[4, 9, 16, 25]\n>>> square_sum([1,\
    \ 2, \"3\", 4])\nERROR: TypeMismatch(\"expected Int, got String\")\n\"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqq16a6hx.jl:16\nin expression starting at\
    \ /tmp/tmpqq16a6hx.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        return (0, 1) \n    else \n \
    \       sum_product = numbers[1]\n        prod_product = 1\n        for i in numbers[2:end]\n\
    \            sum_product += i\n            prod_product *= i\n        return (sum_product,\
    \ prod_product)\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert sum_product([1,\
    \ 2, 3]) == (6, 3)\n@assert sum_product([1, 2, 3, 4, 5]) == (20, 120)\n@assert\
    \ sum_product([1, 2, 3, 4, 5]) == (20, 120)\n</cell>\n<text>\nProblem 7\nWrite\
    \ a function that returns the sum of the squares of the first $n$ integers in\
    \ a vector. \nFor example, sum_of_squares([4, 9, 16, 25]) should return 385. \n\
    If there are less than $n$ integers in the vector, return $0$.\nIf there are no\
    \ integers in the vector, return $0$.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1,\
    \ 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2kzw9ofr.jl:20\nin expression starting at\
    \ /tmp/tmp2kzw9ofr.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = Int64(0)\n    prod = Int64(1)\n    for x in numbers\n   \
    \     sum = sum + x\n        prod = prod * x\n    return (sum, prod)\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the sum of the squares of the\
    \ numbers in a list.\nThe function should work for both real and complex numbers.\n\
    The function should work for any number of arguments.\nThe function should work\
    \ for any type of numbers, not just integers and floats.\nThe function should\
    \ work for any type of numbers, not just integers and floats.\nThe function should\
    \ work for any type of numbers, not just integers and floats.\nThe function should\
    \ work for any type of numbers, not just integers and floats.\nThe function should\
    \ work for any type of numbers, not just integers and floats.\nThe function should\
    \ work for any type of numbers, not just integers and floats.\nThe function should\
    \ work for any type of numbers, not just integers and floats.\nThe function should\
    \ work for any type of numbers, not just integers and floats.\nThe function should\
    \ work for any type of numbers, not just integers and floats.\nThe function should\
    \ work for any type of numbers, not just integers and floats.\nThe function should\
    \ work for any type of numbers, not just integers and floats.\nThe function should\
    \ work for any type of numbers, not just integers and floats.\nThe function should\
    \ work for any type of numbers, not just integers and floats.\nThe function should\
    \ work for any type of numbers, not just integers and floats.\nThe function should\
    \ work for any type of numbers, not just integers and floats.\nThe function should\
    \ work for any type of numbers, not just integers and floats.\nThe function should\
    \ work for any type of numbers, not just integers and floats.\nThe function should\
    \ work for any type of numbers, not just integers and floats.\nThe function should\
    \ work for any type of numbers, not just integers and floats.\nThe function should\
    \ work for any type of numbers, not just integers and floats.\nThe function should\
    \ work for any type of numbers, not just integers and floats.\nThe function should\
    \ work for any type of numbers, not just integers and floats.\nThe function should\
    \ work for any type of numbers, not just integers and floats.\nThe function should\
    \ work for any type of numbers, not just integers and floats.\nThe function should\
    \ work for any type of numbers, not just integers and floats.\nThe function should\
    \ work for any type of numbers, not just integers and floats.\nThe function should\
    \ work for any type of numbers, not just integers and floats.\nThe function should\
    \ work for any type of numbers, not just integers and floats.\nThe function should\
    \ work for any type of numbers, not just integers and floats.\n\nusing Test\n\n\
    @testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2wsdg17a.jl:16\nin expression starting at\
    \ /tmp/tmp2wsdg17a.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        return (0, 1) \n    else \n \
    \       sum_product = numbers[1]\n        product = 1\n        for i in numbers[2:end]\n\
    \            product *= i\n            sum_product += product\n        return\
    \ (sum_product, product)\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ sum_product([1, 2, 3]) == (6, 3)\n@assert sum_product([1, 2, 3, 4, 5]) == (24,\
    \ 120)\n@assert sum_product([1, 2, 3, 4, 5]) == (24, 120)\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that returns the sum of the squares of the first $n$ integers\
    \ in a list.\nIf $n$ is less than or equal to 0, return 0.\nIf $n$ is greater\
    \ than the number of integers in the list, raise an error.\nThe function should\
    \ work for any $n$, including negative numbers.\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t\
    @test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\
    \t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0fd74922.jl:20\nin expression starting at\
    \ /tmp/tmp0fd74922.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_ = 0\n    product_ = 1\n    for n in numbers\n        sum_\
    \ = sum_ + n\n        product_ = product_ * n\n    return (sum_, product_)\nend\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3,4,5])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of integers and returns a vector\
    \ of integers containing the first n integers of the vector.\nFor instance, if\
    \ the vector is [1,2,3,4,5,6,7,8,9], the function should return [1,2,3,4,5,6].\n\
    If the vector is empty, the function should return an empty vector.\nThe function\
    \ should work for both vectors of integers and vectors of floats.\nThe function\
    \ should work for both vectors of integers and vectors of floats.\nThe function\
    \ should work for both vectors of integers and vectors of floats.\nThe function\
    \ should work for both vectors of integers and vectors of floats.\nThe function\
    \ should work for both vectors of integers and vectors of floats.\nThe function\
    \ should work for both vectors of integers and vectors of floats.\nThe function\
    \ should work for both vectors of integers and vectors of floats.\nThe function\
    \ should work for both vectors of integers and vectors of floats.\nThe function\
    \ should work for both vectors of integers and vectors of floats.\nThe function\
    \ should work for both vectors of integers and vectors of floats.\nThe function\
    \ should work for both vectors of integers and vectors of floats.\nThe function\
    \ should work for both vectors of integers and vectors of floats.\nThe function\
    \ should work for both vectors of integers and vectors of floats.\nThe function\
    \ should work for both vectors of integers and vectors of floats.\nThe function\
    \ should work for both vectors of integers and vectors of floats.\nThe function\
    \ should work for both vectors of integers and vectors of floats.\nThe function\
    \ should work for both vectors of integers and vectors of floats.\nThe function\
    \ should work for both vectors of integers and vectors of floats.\nThe function\
    \ should work for both vectors of integers and vectors of floats.\nThe function\
    \ should work for both vectors of integers and vectors of floats.\nThe function\
    \ should work for both vectors of integers and vectors of floats.\nThe function\
    \ should work for both vectors of integers and vectors of floats.\nThe function\
    \ should work for both vectors of integers and vectors of floats.\nThe function\
    \ should work for both vectors of integers and vectors of floats.\nThe function\
    \ should work for both vectors of integers and vectors of floats.\nThe function\
    \ should work for both vectors of integers and vectors of floats.\nThe function\
    \ should work for both vectors of integers and vectors of floats.\nThe function\
    \ should work for both vectors of integers and vectors of floats.\nThe function\
    \ should work for both \nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptejdoqm3.jl:16\nin expression starting at\
    \ /tmp/tmptejdoqm3.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_ = 0\n    product_ = 1\n    for number in numbers\n       \
    \ sum_ = sum_ + number\n        product_ = product_ * number\n    return (sum_,\
    \ product_)\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t\
    @test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1]) ==\
    \ (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3, 5,\
    \ 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpfv9oflxn.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfv9oflxn.jl:1\n\
    in expression starting at /tmp/tmpfv9oflxn.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_ = 0\n    product_ = 1\n    for i in numbers\n        sum_\
    \ = sum_ + i\n        product_ = product_ * i\n    return (sum_, product_)\nend\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3,4,5])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,23\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpse8cgp99.jl:16\nin expression starting at\
    \ /tmp/tmpse8cgp99.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_ = 0\n    product_ = 1\n    for n in numbers\n        sum_\
    \ += n\n        product_ *= n\n    return (sum_, product_)\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that returns the sum of the squares of the numbers in a\
    \ given vector.\nThe function should work for both real and complex numbers.\n\
    The function should work for both vectors and matrices.\nThe function should work\
    \ for both scalars and vectors.\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj3snsg0e.jl:16\nin expression starting at\
    \ /tmp/tmpj3snsg0e.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        return (0, 1) \n    else \n \
    \       sum_ = numbers[1] + numbers[2] \n        prod_ = numbers[1] * numbers[2]\
    \ \n        return (sum_, prod_) \nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector and returns the sum of the elements in the vector. \nWrite\
    \ a function that takes a vector and returns the product of the elements in the\
    \ vector. \nWrite a function that takes a vector and returns the sum and product\
    \ of the elements in the vector. \nWrite a function that takes a vector and returns\
    \ the sum and product of the elements in the vector. \nWrite a function that takes\
    \ a vector and returns the sum and product of the elements in the vector. \nWrite\
    \ a function that takes a vector and returns the sum and product of the elements\
    \ in the vector. \nWrite a function that takes a vector and returns the sum and\
    \ product of the elements in the vector. \nWrite a function that takes a vector\
    \ and returns the sum and product of the elements in the vector. \nWrite a function\
    \ that takes a vector and returns the sum and product of the elements in the vector.\
    \ \nWrite a function that takes a vector and returns the sum and product of the\
    \ elements in the vector. \nWrite a function that takes a vector and returns the\
    \ sum and product of the elements in the vector. \nWrite a function that takes\
    \ a vector and returns the sum and product of the elements in the vector. \nWrite\
    \ a function that takes a vector and returns the sum and product of the elements\
    \ in the vector. \nWrite a function that takes a vector and returns the sum and\
    \ product of the elements in the vector. \nWrite a function that takes a vector\
    \ and returns the sum and product of the elements in the vector. \nWrite a function\
    \ that takes a vector and returns the sum and product of the elements in the vector.\
    \ \nWrite a function that takes a vector and returns the sum and product of the\
    \ elements in the vector. \nWrite a function that takes a vector and returns the\
    \ sum and product of the elements in the vector. \nWrite a function that takes\
    \ a vector and returns the sum and product of the elements in the vector. \nWrite\
    \ a function that takes a vector and returns the sum and product of the elements\
    \ in the vector. \nWrite a function that takes a vector and returns the sum and\
    \ product of the elements in the vector. \nWrite a function that takes a vector\
    \ and returns the sum and product of the elements in the vector. \nWrite a function\
    \ that takes a vector and returns the sum and product of the elements in the vector.\
    \ \nWrite a function that takes a vector and returns the sum and product of the\
    \ elements in the vector. \nWrite a function that takes a vector and returns the\
    \ sum and product of the elements in the vector. \nWrite a function that takes\
    \ a vector and returns the sum and product of the elements in the vector. \nWrite\
    \ a function that takes a vector and returns the sum and product of the elements\
    \ in the vector. \nWrite a function that takes a vector and returns the sum and\
    \ product of the elements in the vector. \nWrite a function that takes a vector\
    \ and returns the sum and product of the elements in the vector. \nWrite \nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv9don34g.jl:16\nin expression starting at\
    \ /tmp/tmpv9don34g.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        return (0, 1) \n    else \n \
    \       sum_product = numbers[1] + numbers[0]\n        product_product = 1\n \
    \       for i in 2:length(numbers) \n            sum_product = sum_product + numbers[i]\n\
    \            product_product = product_product * numbers[i]\n        end\n   \
    \     return (sum_product, product_product)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the sum of the squares of the integers in a given list.\n    >>> sum_square([1,2,3,4])\n\
    \    25\n    >>> sum_square([-3,-2,-1,0,1,2,3])\n    25\n    >>> sum_square([-3,-2,-1,0,1,2,3])\n\
    \    25\n    >>> sum_square([-3,-2,-1,0,1,2,3])\n    25\n    >>> sum_square([-3,-2,-1,0,1,2,3])\n\
    \    25\n    >>> sum_square([-3,-2,-1,0,1,2,3])\n    25\n    >>> sum_square([-3,-2,-1,0,1,2,3])\n\
    \    25\n    >>> sum_square([-3,-2,-1,0,1,2,3])\n    25\n    >>> sum_square([-3,-2,-1,0,1,2,3])\n\
    \    25\n    >>> sum_square([-3,-2,-1,0,1,2,3])\n    25\n    >>> sum_square([-3,-2,-1,0,1,2,3])\n\
    \    25\n    >>> sum_square([-3,-2,-1,0,1,2,3])\n    25\n    >>> sum_square([-3,-2,-1,0,1,2,3])\n\
    \    25\n    >>> sum_square([-3,-2,-1,0,1,2,3])\n    25\n    >>> sum_square([-3,-2,-1,0,1,2,3])\n\
    \    25\n    >>> sum_square([-3,-2,-1,0,1,2,3])\n    25\n    >>> sum_square([-3,-2,-1,0,1,2,3])\n\
    \    25\n    >>> sum_square([-3,-2,-1,0,1,2,3])\n    25\n    >>> sum_square([-3,-2,-1,0,1,2,3])\n\
    \    25\n    >>> sum_square([-3,-2,-1,0,1,2,3])\n    25\n    >>> sum_square([-3,-2,-1,0,1,2,3])\n\
    \    25\n    >>> sum_square([-3,-2,-1,0,1,2,3])\n    25\n    >>> sum_square([-3,-2,-1,0,1,2,3])\n\
    \    25\n    >>> sum_square([-3,-2,-1,0,1,2,3])\n    25\n    >>> sum_square([-3,-2,-1,0,1,2,3])\n\
    \    25\n    >>> sum_square([-3,-2,-1,0,1,2,3])\n    25\n    >>> sum_square([-3,-2,-1,0,1,2,3])\n\
    \    25\n    >>> sum_square([-\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9j9hm0in.jl:21\nin expression starting at\
    \ /tmp/tmp9j9hm0in.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_of_numbers = prod(numbers)\n\
    \    return (sum_product, product_of_numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuq35p4v_.jl:13\nin expression starting at\
    \ /tmp/tmpuq35p4v_.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_product = 1\n    for i\
    \ in numbers\n        product_product *= i\n    end\n    return (sum_product,\
    \ product_product)\nend\n</cell>\n<code language=julia-1.5>\nsum_product([1, 2,\
    \ 3, 4])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a list of integers\
    \ and returns the sum of the squares of the integers in the list.\n    >>> square_sum([])\n\
    \    0\n    >>> square_sum([1, 2, 3, 4])\n    25\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7wr_c3yx.jl:16\nin expression starting at\
    \ /tmp/tmp7wr_c3yx.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_of_numbers = reduce(mul,\
    \ numbers, 1)\n    return (sum_product, product_of_numbers)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_product([1, 2, 3, 4])\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a list of integers and returns a list of all unique\
    \ elements in the list.\nThe function should return a list of tuples, where each\
    \ tuple consists of an element in the original list and a boolean indicating whether\
    \ that element was in the original list before.\nThe function should return an\
    \ empty list if the list is empty.\nThe function should return a list of tuples,\
    \ where each tuple consists of an element in the original list and a boolean indicating\
    \ whether that element was in the original list before.\nThe function should return\
    \ an empty list if the list is empty.\nThe function should return a list of tuples,\
    \ where each tuple consists of an element in the original list and a boolean indicating\
    \ whether that element was in the original list before.\nThe function should return\
    \ an empty list if the list is empty.\nThe function should return a list of tuples,\
    \ where each tuple consists of an element in the original list and a boolean indicating\
    \ whether that element was in the original list before.\nThe function should return\
    \ an empty list if the list is empty.\nThe function should return a list of tuples,\
    \ where each tuple consists of an element in the original list and a boolean indicating\
    \ whether that element was in the original list before.\nThe function should return\
    \ an empty list if the list is empty.\nThe function should return a list of tuples,\
    \ where each tuple consists of an element in the original list and a boolean indicating\
    \ whether that element was in the original list before.\nThe function should return\
    \ an empty list if the list is empty.\nThe function should return a list of tuples,\
    \ where each tuple consists of an element in the original list and a boolean indicating\
    \ whether that element was in the original list before.\nThe function should return\
    \ an empty list if the list is empty.\nThe function should return a list of tuples,\
    \ where each tuple consists of an element in the original list and a boolean indicating\
    \ whether that element was in the original list before.\nThe function should return\
    \ an empty list if the list is empty.\nThe function should return a list of tuples,\
    \ where each tuple consists of an element in the original list and a boolean indicating\
    \ whether that element was in the original list before.\nThe function should return\
    \ an empty list if the list is empty.\nThe function should return a list of tuples,\
    \ where each tuple consists of an element in the original list and a boolean indicating\
    \ whether that element was in the original list before.\nThe function should return\
    \ an empty list if the list is empty.\nThe function should return a list of tuples,\
    \ where each tuple consists of an element in the original list and a boolean indicating\
    \ whether that element was in the original list before.\nThe function should return\
    \ an empty list if the list is empty.\nThe function should return a list of tuples,\
    \ where each tuple consist\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu46msd6_.jl:13\nin expression starting at\
    \ /tmp/tmpu46msd6_.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_ = 0\n    product_ = 1\n    for number in numbers\n       \
    \ sum_ = sum_ + number\n        product_ = product_ * number\n    end\n    return\
    \ (sum_, product_)\nend\n</cell>\n<code language=julia-1.5>\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf4x9betq.jl:17\nin expression starting at\
    \ /tmp/tmpf4x9betq.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        return (0, 1) \n    else \n \
    \       sum_product = numbers[1] * numbers[0]\n        sum_product = sum_product\
    \ + sum_product(numbers[2:end])\n        return (sum_product, numbers[1] * numbers[2])\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nsum_product([1, 2, 3, 4])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the sum of the squares\
    \ of the first n integers in a list.\nIf n is greater than the length of the list,\
    \ return 0.\nThe function should work for both positive and negative integers.\n\
    The function should work for both positive and negative integers.\nThe function\
    \ should work for both positive and negative integers.\nThe function should work\
    \ for both positive and negative integers.\nThe function should work for both\
    \ positive and negative integers.\nThe function should work for both positive\
    \ and negative integers.\nThe function should work for both positive and negative\
    \ integers.\nThe function should work for both positive and negative integers.\n\
    The function should work for both positive and negative integers.\nThe function\
    \ should work for both positive and negative integers.\nThe function should work\
    \ for both positive and negative integers.\nThe function should work for both\
    \ positive and negative integers.\nThe function should work for both positive\
    \ and negative integers.\nThe function should work for both positive and negative\
    \ integers.\nThe function should work for both positive and negative integers.\n\
    The function should work for both positive and negative integers.\nThe function\
    \ should work for both positive and negative integers.\nThe function should work\
    \ for both positive and negative integers.\nThe function should work for both\
    \ positive and negative integers.\nThe function should work for both positive\
    \ and negative integers.\nThe function should work for both positive and negative\
    \ integers.\nThe function should work for both positive and negative integers.\n\
    The function should work for both positive and negative integers.\nThe function\
    \ should work for both positive and negative integers.\nThe function should work\
    \ for both positive and negative integers.\nThe function should work for both\
    \ positive and negative integers.\nThe function should work for both positive\
    \ and negative integers.\nThe function should work for both positive and negative\
    \ integers.\nThe function should work for both positive and negative integers.\n\
    The function should work for both positive and negative integers.\nThe function\
    \ should work for both positive and negative integers.\nThe function should work\
    \ for both positive and negative integers.\nThe function should work for both\
    \ positive and negative integers.\nThe function should work for both positive\
    \ and negative integers.\nThe function should work for both positive and negative\
    \ integers.\nThe function should work for both positive and negative integers.\n\
    The function should work for both positive and negative integers.\nThe function\
    \ \nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2gs3xhgk.jl:17\nin expression starting at\
    \ /tmp/tmp2gs3xhgk.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_ = 0\n    product_ = 1\n    for n in numbers\n        sum_\
    \ = sum_ + n\n        product_ = product_ * n\n    return (sum_, product_)\nend\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1, 2, 3, 4])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes in a list of integers and returns the\
    \ sum of the squares of the integers in the list.\nThe function should return\
    \ 0 if the list is empty.\nThe function should return 0 if the list contains only\
    \ integers.\nThe function should return 0 if the list contains only negative integers.\n\
    The function should return 0 if the list contains only positive integers.\nThe\
    \ function should return 0 if the list contains only non-integer values.\nThe\
    \ function should return 0 if the list contains only integers that are not integers.\n\
    The function should return 0 if the list contains only integers that are not integers.\n\
    The function should return 0 if the list contains only integers that are not integers.\n\
    The function should return 0 if the list contains only integers that are not integers.\n\
    The function should return 0 if the list contains only integers that are not integers.\n\
    The function should return 0 if the list contains only integers that are not integers.\n\
    The function should return 0 if the list contains only integers that are not integers.\n\
    The function should return 0 if the list contains only integers that are not integers.\n\
    The function should return 0 if the list contains only integers that are not integers.\n\
    The function should return 0 if the list contains only integers that are not integers.\n\
    The function should return 0 if the list contains only integers that are not integers.\n\
    The function should return 0 if the list contains only integers that are not integers.\n\
    The function should return 0 if the list contains only integers that are not integers.\n\
    The function should return 0 if the list contains only integers that are not integers.\n\
    The function should return 0 if the list contains only integers that are not integers.\n\
    The function should return 0 if the list contains only integers that are not integers.\n\
    The function should return 0 if the list contains only integers that are not integers.\n\
    The function should return 0 if the list contains only integers that are not integers.\n\
    The function should return 0 if the list contains only integers that are not integers.\n\
    The function should return 0 if the list contains only integers that are not integers.\n\
    The function should return 0 if the list contains only integers that are not integers.\n\
    The function should return 0 if the list contains only integers that are not integers.\n\
    The function should return 0 if the list contains only integers that are not integers.\n\
    The function should return 0 if the list contains only integers that are not integers.\n\
    The function should return 0 if the list contains only integers that are not integers.\n\
    \nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpem3a8707.jl:16\nin expression starting at\
    \ /tmp/tmpem3a8707.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        return (0, 1) \n    else \n \
    \       sum_product = numbers[1]\n        product_of_numbers = numbers[1]\n  \
    \      for number in numbers[2:end] \n            sum_product = sum_product +\
    \ number\n            product_of_numbers = product_of_numbers * number\n     \
    \   end\n        return (sum_product, product_of_numbers)\n    end\nend\n</code>\n\
    <|/ a tags=julia,function,for-loop,arrays |>\n<| a tags=julia,function,for-loop,arrays\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo4q1tpcr.jl:21\nin expression starting at\
    \ /tmp/tmpo4q1tpcr.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_of_numbers = prod(numbers)\n\
    \    return (sum_product, product_of_numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9n0wwfdt.jl:13\nin expression starting at\
    \ /tmp/tmp9n0wwfdt.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_of_numbers = prod(numbers)\n\
    \    return (sum_product, product_of_numbers)\nend\n</cell>\n<text>\nExercise\
    \ 3: Write a function that takes a vector of integers and returns a vector of\
    \ sums of all the integers in the vector.\n    Empty sums should be equal to 0.\n\
    \    >>> sum_vector([1, 2, 3])\n    [1, 2, 3]\n    >>> sum_vector([])\n    [0]\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpigvc8yra.jl:13\nin expression starting at\
    \ /tmp/tmpigvc8yra.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_ = 0\n    product_ = 1\n    for number in numbers\n       \
    \ sum_ = sum_ + number\n        product_ = product_ * number\n    return (sum_,\
    \ product_)\nend\n</cell>\n<code language=julia-1.4>\nsum_product([1,2,3])\n</cell>\n\
    <code language=julia-1.4>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.4>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.4>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.4>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.4>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.4>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.4>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.4>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.4>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.4>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.4>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.4>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.4>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.4>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.4>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.4>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.4>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.4>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.4>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.4>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.4>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.4>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.4>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.4>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.4>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.4>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.4>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.4>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.4>\n\
    sum_product([\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_i2ih0xx.jl:16\nin expression starting at\
    \ /tmp/tmp_i2ih0xx.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_of_numbers = reduce(mul,\
    \ numbers, 1)\n    return (sum_product, product_of_numbers)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a list of numbers and returns the sum of the squares of\
    \ the numbers in the list.\nThe squares should be calculated using the formula\
    \ $x^2$\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8napc81_.jl:13\nin expression starting at\
    \ /tmp/tmp8napc81_.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = product = 1\n    for n in numbers\n        sum *= n\n   \
    \     product *= n\n    return (sum, product)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1, 2, 3, 4])\n</cell>\n<text>\nExercise 4\nWrite a function that\
    \ takes in a list of integers and returns the sum of the squares of the integers\
    \ in the list.\nThe function should return 0 if the list is empty.\nThe function\
    \ should return 0 if the list contains only 1 integer.\nThe function should return\
    \ 0 if the list contains only 1 integer.\nThe function should return 0 if the\
    \ list contains only 1 integer.\nThe function should return 0 if the list contains\
    \ only 1 integer.\nThe function should return 0 if the list contains only 1 integer.\n\
    The function should return 0 if the list contains only 1 integer.\nThe function\
    \ should return 0 if the list contains only 1 integer.\nThe function should return\
    \ 0 if the list contains only 1 integer.\nThe function should return 0 if the\
    \ list contains only 1 integer.\nThe function should return 0 if the list contains\
    \ only 1 integer.\nThe function should return 0 if the list contains only 1 integer.\n\
    The function should return 0 if the list contains only 1 integer.\nThe function\
    \ should return 0 if the list contains only 1 integer.\nThe function should return\
    \ 0 if the list contains only 1 integer.\nThe function should return 0 if the\
    \ list contains only 1 integer.\nThe function should return 0 if the list contains\
    \ only 1 integer.\nThe function should return 0 if the list contains only 1 integer.\n\
    The function should return 0 if the list contains only 1 integer.\nThe function\
    \ should return 0 if the list contains only 1 integer.\nThe function should return\
    \ 0 if the list contains only 1 integer.\nThe function should return 0 if the\
    \ list contains only 1 integer.\nThe function should return 0 if the list contains\
    \ only 1 integer.\nThe function should return 0 if the list contains only 1 integer.\n\
    The function should return 0 if the list contains only 1 integer.\nThe function\
    \ should return 0 if the list contains only 1 integer.\nThe function should return\
    \ 0 if the list contains only 1 integer.\nThe function should return 0 if the\
    \ list contains only 1 integer.\nThe function should return 0 if the list contains\
    \ only 1 integer.\nThe function should return 0 if the list contains only 1 integer.\n\
    The function should return 0 if the list contains only 1 integer.\nThe function\
    \ should return 0 if the list contains only 1 integer.\nThe function should return\
    \ 0 if the list contains only 1 integer.\nThe function should return 0 if the\
    \ list contains only 1 integer.\nThe function should return 0 if the list contains\
    \ only 1 integer.\nThe function should return 0 if the list contains only 1 integer.\n\
    The function should return 0 if the list contains only 1 integer.\nThe \nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplvg2a3vu.jl:15\nin expression starting at\
    \ /tmp/tmplvg2a3vu.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_of_numbers = reduce(mul,\
    \ numbers, 1)\n    return (sum_product, product_of_numbers)\nend\n</cell>\n<code\
    \ language=julia-1.3>\nsum_product([1,2,3])\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the sum of the squares of the numbers in a given list.\n\
    \    >>> sum_square_of_numbers([1, 2, 3, 4])\n    25\n    >>> sum_square_of_numbers([-1,\
    \ -2, -3, -4])\n    25\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1,\
    \ 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwynyofiy.jl:13\nin expression starting at\
    \ /tmp/tmpwynyofiy.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_of_numbers = reduce(mul,\
    \ numbers, 1)\n    return (sum_product, product_of_numbers)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyxd3qcdg.jl:13\nin expression starting at\
    \ /tmp/tmpyxd3qcdg.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        return (0, 1) \n    else \n \
    \       sum_product = numbers[1] * numbers[0]\n        sum_product = sum_product\
    \ + sum_product(numbers[2:end])\n        return (sum_product, numbers[1] * numbers[0])\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nsum_product([1, 2, 3, 4])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a list of integers and\
    \ returns the sum of the squares of the integers in the list.\nThe function should\
    \ work for an empty list as well.\nThe function should work for a list of integers\
    \ of any length.\nThe function should work for a list of integers of even length.\n\
    The function should work for a list of integers of odd length.\nThe function should\
    \ work for a list of integers of even length.\nThe function should work for a\
    \ list of integers of odd length.\nThe function should work for a list of integers\
    \ of even length.\nThe function should work for a list of integers of odd length.\n\
    The function should work for a list of integers of even length.\nThe function\
    \ should work for a list of integers of odd length.\nThe function should work\
    \ for a list of integers of even length.\nThe function should work for a list\
    \ of integers of odd length.\nThe function should work for a list of integers\
    \ of even length.\nThe function should work for a list of integers of odd length.\n\
    The function should work for a list of integers of even length.\nThe function\
    \ should work for a list of integers of odd length.\nThe function should work\
    \ for a list of integers of even length.\nThe function should work for a list\
    \ of integers of odd length.\nThe function should work for a list of integers\
    \ of even length.\nThe function should work for a list of integers of odd length.\n\
    The function should work for a list of integers of even length.\nThe function\
    \ should work for a list of integers of odd length.\nThe function should work\
    \ for a list of integers of even length.\nThe function should work for a list\
    \ of integers of odd length.\nThe function should work for a list of integers\
    \ of even length.\nThe function should work for a list of integers of odd length.\n\
    The function should work for a list of integers of even length.\nThe function\
    \ should work for a list of integers of odd length.\nThe function should work\
    \ for a list of integers of even length.\nThe function should work for a list\
    \ of integers of odd length.\nThe function should work for a list of integers\
    \ of even length.\nThe function should work for a list of integers of odd length.\n\
    The function should work for a list of integers of even length.\nThe function\
    \ should work for a list of integers of odd length.\nThe function should work\
    \ for a list of integers of even length.\nThe function should work for a list\
    \ of integers of odd length.\nThe function should work for a list of integers\
    \ of even length.\nThe function should work for a list of integers of odd length.\n\
    The function should work for a list of integers of even length.\nThe function\
    \ should work for a list of integers of odd length.\nThe function should work\
    \ for a list of integers of even length.\nThe function should work for a list\
    \ of integers of odd length.\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyi37m2d7.jl:17\nin expression starting at\
    \ /tmp/tmpyi37m2d7.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for number in numbers\n        sum\
    \ += number\n        product *= number\n    return (sum, product)\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<text>\nExercise 4\n\
    Write a function that returns the sum of the squares of the integers in a given\
    \ list.\n    >>> sum_square_of_list([])\n    0.0\n    >>> sum_square_of_list([1,2,3])\n\
    \    9.0\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqkm8wsjh.jl:16\nin expression starting at\
    \ /tmp/tmpqkm8wsjh.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        return (0, 1) \n    else \n \
    \       sum_product = numbers[1]\n        product_of_numbers = numbers[1]\n  \
    \      for i in 2:length(numbers) \n            sum_product = sum_product + numbers[i]\n\
    \            product_of_numbers = product_of_numbers * numbers[i]\n        end\n\
    \        return (sum_product, product_of_numbers)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9a4o5qbi.jl:21\nin expression starting at\
    \ /tmp/tmp9a4o5qbi.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_ = 0\n    product_ = 1\n    for n in numbers\n        sum_\
    \ += n\n        product_ *= n\n    return (sum_, product_)\nend\n</cell>\n<code\
    \ language=julia-1.3>\nsum_product([1,2,3])\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a vector of integers and returns the sum of the squares\
    \ of the integers in the vector.\nThe squares should be calculated using the formula\
    \ $x^2$\nThe function should return nothing but a tuple consisting of the sum\
    \ of the squares and the sum of the integers in the vector.\nThe function should\
    \ raise an error if the vector is empty.\nThe function should raise an error if\
    \ the vector contains non-integer values.\nThe function should raise an error\
    \ if the vector contains negative values.\nThe function should raise an error\
    \ if the vector contains values greater than $10$\nThe function should raise an\
    \ error if the vector contains values greater than $100$\nThe function should\
    \ raise an error if the vector contains values greater than $1000$\nThe function\
    \ should raise an error if the vector contains values greater than $10000$\nThe\
    \ function should raise an error if the vector contains values greater than $100000$\n\
    The function should raise an error if the vector contains values greater than\
    \ $1000000$\nThe function should raise an error if the vector contains values\
    \ greater than $10000000$\nThe function should raise an error if the vector contains\
    \ values greater than $100000000$\nThe function should raise an error if the vector\
    \ contains values greater than $1000000000$\nThe function should raise an error\
    \ if the vector contains values greater than $10000000000$\nThe function should\
    \ raise an error if the vector contains values greater than $100000000000$\nThe\
    \ function should raise an error if the vector contains values greater than $1000000000000$\n\
    The function should raise an error if the vector contains values greater than\
    \ $10000000000000$\nThe function should raise an error if the vector contains\
    \ values greater than $100000000000000$\nThe function should raise an error if\
    \ the vector contains values greater than $1000000000000000$\nThe function should\
    \ raise an error if the vector contains values greater than $10000000000000000$\n\
    The function should raise an error if the vector contains values greater than\
    \ $100000000000000000$\nThe function should raise an error if the vector contains\
    \ values greater than $1000000000000000000$\nThe function should raise an error\
    \ if the vector contains values greater than $10000000000000000000$\nThe function\
    \ should raise an error if the vector contains values greater than $100000000000000000000$\n\
    The function should raise an error if the vector contains values greater than\
    \ $1000000000000000000000$\nThe function should raise an error if the vector contains\
    \ values greater than $10000000000000000000000$\nThe function should raise an\
    \ error if the vector contains values greater than $100000000000000000000000$\n\
    The function should raise an error if the vector contains values greater than\
    \ $1000000000000000000000000$\nThe function should raise an error if the vector\
    \ contains values \nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_yyyjumt.jl:16\nin expression starting at\
    \ /tmp/tmp_yyyjumt.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        return (0, 1) \n    else \n \
    \       sum_ = numbers[1]\n        prod_ = 1\n        for i in numbers[2:end]\n\
    \            sum_ = sum_ + i\n            prod_ = prod_ * i\n        return (sum_,\
    \ prod_)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a vector and returns the sum of the elements in the vector. \nWrite a function\
    \ that takes a vector and returns the product of the elements in the vector. \n\
    Write a function that takes a vector and returns the sum and product of the elements\
    \ in the vector. \nWrite a function that takes a vector and returns the sum and\
    \ product of the elements in the vector. \nWrite a function that takes a vector\
    \ and returns the sum and product of the elements in the vector. \nWrite a function\
    \ that takes a vector and returns the sum and product of the elements in the vector.\
    \ \nWrite a function that takes a vector and returns the sum and product of the\
    \ elements in the vector. \nWrite a function that takes a vector and returns the\
    \ sum and product of the elements in the vector. \nWrite a function that takes\
    \ a vector and returns the sum and product of the elements in the vector. \nWrite\
    \ a function that takes a vector and returns the sum and product of the elements\
    \ in the vector. \nWrite a function that takes a vector and returns the sum and\
    \ product of the elements in the vector. \nWrite a function that takes a vector\
    \ and returns the sum and product of the elements in the vector. \nWrite a function\
    \ that takes a vector and returns the sum and product of the elements in the vector.\
    \ \nWrite a function that takes a vector and returns the sum and product of the\
    \ elements in the vector. \nWrite a function that takes a vector and returns the\
    \ sum and product of the elements in the vector. \nWrite a function that takes\
    \ a vector and returns the sum and product of the elements in the vector. \nWrite\
    \ a function that takes a vector and returns the sum and product of the elements\
    \ in the vector. \nWrite a function that takes a vector and returns the sum and\
    \ product of the elements in the vector. \nWrite a function that takes a vector\
    \ and returns the sum and product of the elements in the vector. \nWrite a function\
    \ that takes a vector and returns the sum and product of the elements in the vector.\
    \ \nWrite a function that takes a vector and returns the sum and product of the\
    \ elements in the vector. \nWrite a function that takes a vector and returns the\
    \ sum and product of the elements in the vector. \nWrite a function that takes\
    \ a vector and returns the sum and product of the elements in the vector. \nWrite\
    \ a function that takes a vector and returns the sum and product of the elements\
    \ in the vector. \nWrite a function that takes a vector and returns the sum and\
    \ product of the elements in the vector. \nWrite a function that takes a vector\
    \ and returns the sum and product of the elements in the vector. \nWrite a function\
    \ that takes a vector and returns the sum and product of the elements in the vector.\
    \ \nWrite a function that takes a vector and returns the sum and product of the\
    \ elements in the vector. \nWrite a function that takes a vector \nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_z8zrzn2.jl:20\nin expression starting at\
    \ /tmp/tmp_z8zrzn2.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = Int64(0)\n    product_of_numbers = Int64(1)\n   \
    \ for number in numbers\n        sum_product += number\n        product_of_numbers\
    \ = number * product_of_numbers\n    end\n    return (sum_product, product_of_numbers)\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector and returns\
    \ the sum of the absolute values of the elements in the vector. \nThe function\
    \ should work for both real and complex numbers.\nThe function should work for\
    \ both real and complex numbers.\nThe function should work for both real and complex\
    \ numbers.\nThe function should work for both real and complex numbers.\nThe function\
    \ should work for both real and complex numbers.\nThe function should work for\
    \ both real and complex numbers.\nThe function should work for both real and complex\
    \ numbers.\nThe function should work for both real and complex numbers.\nThe function\
    \ should work for both real and complex numbers.\nThe function should work for\
    \ both real and complex numbers.\nThe function should work for both real and complex\
    \ numbers.\nThe function should work for both real and complex numbers.\nThe function\
    \ should work for both real and complex numbers.\nThe function should work for\
    \ both real and complex numbers.\nThe function should work for both real and complex\
    \ numbers.\nThe function should work for both real and complex numbers.\nThe function\
    \ should work for both real and complex numbers.\nThe function should work for\
    \ both real and complex numbers.\nThe function should work for both real and complex\
    \ numbers.\nThe function should work for both real and complex numbers.\nThe function\
    \ should work for both real and complex numbers.\nThe function should work for\
    \ both real and complex numbers.\nThe function should work for both real and complex\
    \ numbers.\nThe function should work for both real and complex numbers.\nThe function\
    \ should work for both real and complex numbers.\nThe function should work for\
    \ both real and complex numbers.\nThe function should work for both real and complex\
    \ numbers.\nThe function should work for both real and complex numbers.\nThe function\
    \ should work for both real and complex numbers.\nThe function should work for\
    \ both real and complex numbers.\nThe function should work for both real and complex\
    \ numbers.\nThe function should work for both real and complex numbers.\nThe function\
    \ should work for both real and complex numbers.\nThe function should work for\
    \ both real and complex numbers.\nThe function should work for both real and complex\
    \ numbers.\nThe function should work for both real and complex numbers.\nThe function\
    \ should work for both real and complex numbers.\nThe function should work for\
    \ both real and complex numbers.\nThe function should work for both real and complex\
    \ numbers.\nThe function should work for both real and complex numbers.\nThe function\
    \ should work for both real and complex numbers.\nThe function should work for\
    \ both real and complex numbers.\nThe function should work for both real and complex\
    \ numbers.\nThe function should work for \nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1,\
    \ 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpptqu5y5t.jl:17\nin expression starting at\
    \ /tmp/tmpptqu5y5t.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        return (0, 1) \n    else \n \
    \       sum_ = numbers[1] + numbers[0] \n        prod_ = 1\n        for i in 2:length(numbers)\
    \ \n            sum_ += numbers[i] \n            prod_ *= i \n        return (sum_,\
    \ prod_) \nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a list\
    \ of integers and returns the sum of the squares of the integers in the list.\n\
    The function should raise an error if the list is empty.\nThe function should\
    \ raise an error if the list contains non-integer elements.\nThe function should\
    \ raise an error if the list contains negative numbers.\nThe function should raise\
    \ an error if the list contains duplicate elements.\nThe function should raise\
    \ an error if the list contains negative numbers.\nThe function should raise an\
    \ error if the list contains non-positive numbers.\nThe function should raise\
    \ an error if the list contains non-positive numbers.\nThe function should raise\
    \ an error if the list contains negative numbers.\nThe function should raise an\
    \ error if the list contains non-positive numbers.\nThe function should raise\
    \ an error if the list contains non-integer elements.\nThe function should raise\
    \ an error if the list contains non-integer elements.\nThe function should raise\
    \ an error if the list contains non-integer elements.\nThe function should raise\
    \ an error if the list contains non-integer elements.\nThe function should raise\
    \ an error if the list contains non-integer elements.\nThe function should raise\
    \ an error if the list contains non-integer elements.\nThe function should raise\
    \ an error if the list contains non-integer elements.\nThe function should raise\
    \ an error if the list contains non-integer elements.\nThe function should raise\
    \ an error if the list contains non-integer elements.\nThe function should raise\
    \ an error if the list contains non-integer elements.\nThe function should raise\
    \ an error if the list contains non-integer elements.\nThe function should raise\
    \ an error if the list contains non-integer elements.\nThe function should raise\
    \ an error if the list contains non-integer elements.\nThe function should raise\
    \ an error if the list contains non-integer elements.\nThe function should raise\
    \ an error if the list contains non-integer elements.\nThe function should raise\
    \ an error if the list contains non-integer elements.\nThe function should raise\
    \ an error if the list contains non-integer elements.\nThe function should raise\
    \ an error if the list contains non-integer elements.\nThe function should raise\
    \ an error if the list contains non-integer elements.\nThe function should raise\
    \ an error if the list contains non-integer elements.\nThe function should raise\
    \ an error if the list contains non-integer elements.\nThe function should raise\
    \ an error if the list contains non-integer elements.\nThe function should raise\
    \ an error if the list contains non-integer elements.\nThe function should raise\
    \ an error if the list contains non-integer elements.\nThe function should raise\
    \ an error if the list contains non-integer elements.\nThe function should raise\
    \ an error if the list contains non-integer elements.\nThe function should raise\
    \ an error if the list contains non-integer elements.\nThe function should raise\
    \ an error if the list contains non-\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1,\
    \ 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbclqcvjs.jl:19\nin expression starting at\
    \ /tmp/tmpbclqcvjs.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_ = 0\n    product_ = 1\n    for n in numbers\n        sum_\
    \ += n\n        product_ *= n\n    return (sum_, product_)\nend\n</cell>\n<code\
    \ language=julia-1.4>\nsum_product([1,2,3])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the sum of the squares of the numbers in a given list.\n\
    \    >>> sum_square_of_list([])\n    0.0\n    >>> sum_square_of_list([1,2,3])\n\
    \    9.0\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp1zwpbpp.jl:16\nin expression starting at\
    \ /tmp/tmpp1zwpbpp.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = numbers[1]\n    product = 1\n    for i in numbers[2:end]\n\
    \        product *= i\n        sum_product += product\n    end\n    return sum_product,\
    \ product\nend\n</cell>\n<code language=julia-1.4>\nsum_product([1,2,3])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the sum of the squares of the\
    \ numbers in a vector.\n>>> sum_square_of_vector([1,2,3])\n25\n>>> sum_square_of_vector([1,4,9])\n\
    49\n>>> sum_square_of_vector([1,4,9,16])\n81\n>>> sum_square_of_vector([1,4,9,16,25])\n\
    1225\n>>> sum_square_of_vector([1,4,9,16,25,36])\n15683\n>>> sum_square_of_vector([1,4,9,16,25,36,49])\n\
    204457\n>>> sum_square_of_vector([1,4,9,16,25,36,49,64])\n2469025\n>>> sum_square_of_vector([1,4,9,16,25,36,49,64,81])\n\
    292581181\n>>> sum_square_of_vector([1,4,9,16,25,36,49,64,81,100])\n4134962825\n\
    >>> sum_square_of_vector([1,4,9,16,25,36,49,64,81,100,121])\n4134962825\n>>> sum_square_of_vector([1,4,9,16,25,36,49,64,81,100,121,144])\n\
    4134962825\n>>> sum_square_of_vector([1,4,9,16,25,36,49,64,81,100,121,144,161])\n\
    4134962825\n>>> sum_square_of_vector([1,4,9,16,25,36,49,64,81,100,121,144,161,189])\n\
    4134962825\n>>> sum_square_of_vector([1,4,9,16,25,36,49,64,81,100,121,144,161,189,225])\n\
    4134962825\n>>> sum_square_of_vector([1,4,9,16,25,36,49,64,81,100,121,144,161,189,225,250])\n\
    4134962825\n>>> sum_square_of_vector([1,4,9,16,25,36,49,64,81,100,121,144,161,189,225,250,289])\n\
    4134962825\n>>> sum_square_of_vector([1,4,9,16,25,36,49,64,81,\nusing Test\n\n\
    @testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb3i7szyk.jl:17\nin expression starting at\
    \ /tmp/tmpb3i7szyk.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        (0, 1) \n    else \n        sum_product(numbers[1:],\
    \ numbers[0]*numbers[1]) \n    end\nend\n</code>\n<|/ a dscore=0 |>\n<| a tags=recursion,julia\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwzchgydj.jl:12\nin expression\
    \ starting at /tmp/tmpwzchgydj.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = Int64(0)\n    product_of_numbers = Int64(1)\n   \
    \ for number in numbers\n        sum_product = sum_product + number\n        product_of_numbers\
    \ = product_of_numbers * number\n    end\n    return (sum_product, product_of_numbers)\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3]) == (6, \nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt7742xo5.jl:17\nin expression starting at\
    \ /tmp/tmpt7742xo5.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        return (0, 1) \n    else \n \
    \       sum_ = numbers[1]\n        prod_ = 1\n        for i in numbers[2:end]\n\
    \            sum_ += i\n            prod_ *= i\n        return (sum_, prod_)\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1,\
    \ 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphqmftvkw.jl:19\nin expression starting at\
    \ /tmp/tmphqmftvkw.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_ = 0\n    product_ = 1\n    for number in numbers\n       \
    \ sum_ = sum_ + number\n        product_ = product_ * number\n    return (sum_,\
    \ product_)\nend\n</cell>\n<code language=julia-1.5>\nsum_product([1, 2, 3, 4])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a list of integers and\
    \ returns the sum of the squares of the integers in the list.\n>>> square_sum([])\n\
    0.0\n>>> square_sum([1, 2, 3, 4])\n25.0\n>>> square_sum([-1, -2, -3, -4])\n25.0\n\
    >>> square_sum([1, 2, -3, 4])\n25.0\n>>> square_sum([-1, -2, -3, -4, 5])\n25.0\n\
    >>> square_sum([1, 2, -3, 4, 5])\n25.0\n>>> square_sum([-1, -2, -3, -4, -5, 6])\n\
    25.0\n>>> square_sum([1, 2, -3, 4, -5, 6])\n25.0\n>>> square_sum([-1, -2, -3,\
    \ -4, -5, -6, 7])\n25.0\n>>> square_sum([1, 2, -3, 4, -5, -6, 7])\n25.0\n>>> square_sum([-1,\
    \ -2, -3, -4, -5, -6, -7, 8])\n25.0\n>>> square_sum([1, 2, -3, 4, -5, -6, -7,\
    \ 8])\n25.0\n>>> square_sum([-1, -2, -3, -4, -5, -6, -7, -8])\n25.0\n>>> square_sum([1,\
    \ 2, -3, 4, -5, -6, -7, -8])\n25.0\n>>> square_sum([-1, -2, -3, -4, -5, -6, -7,\
    \ -8, 9])\n25.0\n>>> square_sum([1, 2, -3, 4, -5, -6, -7, -8, 9])\n25.0\n>>> square_sum([-1,\
    \ -2, -3, -4, -5, -6, -7, -8, 9, 10])\n25.0\n>>> square_sum([1, 2, -3, 4, -5,\
    \ -6, -7, -8, 9, 10])\n25.0\n>>> square_sum([-1, -2, -3, -4, -5, -6, -7, -8, 9,\
    \ -10, 11])\n25.0\n>>> square_sum([1, 2, -3, 4, -5, -6, -7, -8, 9, -10, 11])\n\
    25.0\n>>> square_sum([-1, -2, -3, -4, -5, -6, -7, -8, 9, -10, -12, 13])\n25.0\n\
    >>> square_sum([1, 2, -3, 4, -5, -6, -7, -8, 9, -10, -12, 13])\n25.0\n>>> square_sum([-1,\
    \ -2, -3, -4, -5, -6, -7, -8, 9, -10, -12, 13, 14])\n25.0\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0ouofspo.jl:16\nin expression starting at\
    \ /tmp/tmp0ouofspo.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for number in numbers\n        sum\
    \ = sum + number\n        product = product * number\n    return (sum, product)\n\
    end\n</cell>\n<code language=julia-1.5>\nsum_product([1, 2, 3, 4])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector and returns the sum of\
    \ the absolute values of the elements in the vector. \nThe function should work\
    \ for both real and complex numbers.\nThe function should work for both real and\
    \ complex numbers.\nThe function should work for both real and complex numbers.\n\
    The function should work for both real and complex numbers.\nThe function should\
    \ work for both real and complex numbers.\nThe function should work for both real\
    \ and complex numbers.\nThe function should work for both real and complex numbers.\n\
    The function should work for both real and complex numbers.\nThe function should\
    \ work for both real and complex numbers.\nThe function should work for both real\
    \ and complex numbers.\nThe function should work for both real and complex numbers.\n\
    The function should work for both real and complex numbers.\nThe function should\
    \ work for both real and complex numbers.\nThe function should work for both real\
    \ and complex numbers.\nThe function should work for both real and complex numbers.\n\
    The function should work for both real and complex numbers.\nThe function should\
    \ work for both real and complex numbers.\nThe function should work for both real\
    \ and complex numbers.\nThe function should work for both real and complex numbers.\n\
    The function should work for both real and complex numbers.\nThe function should\
    \ work for both real and complex numbers.\nThe function should work for both real\
    \ and complex numbers.\nThe function should work for both real and complex numbers.\n\
    The function should work for both real and complex numbers.\nThe function should\
    \ work for both real and complex numbers.\nThe function should work for both real\
    \ and complex numbers.\nThe function should work for both real and complex numbers.\n\
    The function should work for both real and complex numbers.\nThe function should\
    \ work for both real and complex numbers.\nThe function should work for both real\
    \ and complex numbers.\nThe function should work for both real and complex numbers.\n\
    The function should work for both real and complex numbers.\nThe function should\
    \ work for both real and complex numbers.\nThe function should work for both real\
    \ and complex numbers.\nThe function should work for both real and complex numbers.\n\
    The function should work for both real and complex numbers.\nThe function should\
    \ work for both real and complex numbers.\nThe function should work for both real\
    \ and complex numbers.\nThe function should work for both real and complex numbers.\n\
    The function should work for both real and complex numbers.\nThe function should\
    \ work for both real and complex numbers.\nThe function should work for both real\
    \ and complex numbers.\nThe function should work for both real and complex numbers.\n\
    The function should work for both real \nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1,\
    \ 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaubvg8s3.jl:16\nin expression starting at\
    \ /tmp/tmpaubvg8s3.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_of_numbers = reduce(mul,\
    \ numbers, 1)\n    return (sum_product, product_of_numbers)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_product([1, 2, 3, 4])\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a list of integers and returns the sum of the squares\
    \ of the integers in the list.\n>>> square_sum([])\n0\n>>> square_sum([1, 2, 3,\
    \ 4])\n25\n>>> square_sum([-1, -2, -3, -4])\n25\n>>> square_sum([1, 2, -3, 4])\n\
    25\n>>> square_sum([1, 2, -3, -4])\n25\n>>> square_sum([1, 2, 3, -4, 5])\n25\n\
    >>> square_sum([1, 2, 3, -4, -5, 6])\n25\n>>> square_sum([1, 2, 3, -4, -5, -6,\
    \ 7])\n25\n>>> square_sum([1, 2, 3, -4, -5, -6, -7, 8])\n25\n>>> square_sum([1,\
    \ 2, 3, -4, -5, -6, -7, -8])\n25\n>>> square_sum([1, 2, 3, -4, -5, -6, -7, -8,\
    \ 9])\n25\n>>> square_sum([1, 2, 3, -4, -5, -6, -7, -8, -9, 10])\n25\n>>> square_sum([1,\
    \ 2, 3, -4, -5, -6, -7, -8, -9, -10, 11])\n25\n>>> square_sum([1, 2, 3, -4, -5,\
    \ -6, -7, -8, -9, -10, -10, 12])\n25\n>>> square_sum([1, 2, 3, -4, -5, -6, -7,\
    \ -8, -9, -10, -10, -10, 13])\n25\n>>> square_sum([1, 2, 3, -4, -5, -6, -7, -8,\
    \ -9, -10, -10, -10, -10, 14])\n25\n>>> square_sum([1, 2, 3, -4, -5, -6, -7, -8,\
    \ -9, -10, -10, -10, -10, -10, 15])\n25\n>>> square_sum([1, 2, 3, -4, -5, -6,\
    \ -7, -8, -9, -10, -10, -10, -10, -10, -10, 16])\n25\n>>> square_sum([1, 2, 3,\
    \ -4, -5, -6, -7, -8, -9, -10, -10, -10, -10, -10, -10, -17])\n25\n>>> square_sum([1,\
    \ 2, 3, -4, -5, -6, -7, -8, -9, -10, -10, -10, -10, -10, -10, -18])\n25\n>>> square_sum([1,\
    \ 2, 3, -4, -5, -6, -7, -8, -9, -10, -10, -10, \nusing Test\n\n@testset begin\n\
    \ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t\
    @test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\
    \t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp833p425t.jl:13\nin expression starting at\
    \ /tmp/tmp833p425t.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_ = 0\n    product_ = 1\n    for number in numbers\n       \
    \ sum_ = sum_ + number\n        product_ = product_ * number\n    return (sum_,\
    \ product_)\nend\n</cell>\n<code language=julia-1.5>\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpirh_jspx.jl:16\nin expression starting at\
    \ /tmp/tmpirh_jspx.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_ = 0\n    product_ = 1\n    for number in numbers\n       \
    \ sum_ += number\n        product_ *= number\n    return (sum_, product_)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpaz616k25.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpaz616k25.jl:1\n\
    in expression starting at /tmp/tmpaz616k25.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_of_numbers = reduce(mul,\
    \ numbers, 1)\n    return (sum_product, product_of_numbers)\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector and returns a new vector with\
    \ the elements of the original vector multiplied by 2.\n    >>> vec = [1, 2, 3,\
    \ 4]\n    >>> vec2 = vectorize_function(vec)\n    >>> vec2\n    [2, 4, 6, 8]\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmkvluti5.jl:13\nin expression starting at\
    \ /tmp/tmpmkvluti5.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_ = 0\n    product_ = 1\n    for n in numbers\n        sum_\
    \ += n\n        product_ *= n\n    return (sum_, product_)\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector of integers and returns the sum\
    \ of the squares of the integers in the vector.\nThe sum of the squares should\
    \ be equal to the sum of the squares of the integers in the vector.\nThe function\
    \ should raise an error if the vector is empty.\nThe function should raise an\
    \ error if the vector contains non-integer values.\nThe function should raise\
    \ an error if the vector contains negative values.\nThe function should raise\
    \ an error if the vector contains duplicate values.\nThe function should raise\
    \ an error if the vector contains negative values.\nThe function should raise\
    \ an error if the vector contains values greater than 100.\nThe function should\
    \ raise an error if the vector contains values less than 0.\nThe function should\
    \ raise an error if the vector contains values greater than or equal to 100.\n\
    The function should raise an error if the vector contains values less than or\
    \ equal to 0.\nThe function should raise an error if the vector contains values\
    \ greater than or equal to 100.\nThe function should raise an error if the vector\
    \ contains values less than or equal to 0.\nThe function should raise an error\
    \ if the vector contains values greater than or equal to 100.\nThe function should\
    \ raise an error if the vector contains values less than or equal to 0.\nThe function\
    \ should raise an error if the vector contains values greater than or equal to\
    \ 100.\nThe function should raise an error if the vector contains values less\
    \ than or equal to 0.\nThe function should raise an error if the vector contains\
    \ values greater than or equal to 100.\nThe function should raise an error if\
    \ the vector contains values less than or equal to 0.\nThe function should raise\
    \ an error if the vector contains values greater than or equal to 100.\nThe function\
    \ should raise an error if the vector contains values less than or equal to 0.\n\
    The function should raise an error if the vector contains values greater than\
    \ or equal to 100.\nThe function should raise an error if the vector contains\
    \ values less than or equal to 0.\nThe function should raise an error if the vector\
    \ contains values greater than or equal to 100.\nThe function should raise an\
    \ error if the vector contains values less than or equal to 0.\nThe function should\
    \ raise an error if the vector contains values greater than or equal to 100.\n\
    The function should raise an error if the vector contains values less than or\
    \ equal to 0.\nThe function should raise an error if the vector contains values\
    \ greater than or equal to 100.\nThe function should raise an error if the vector\
    \ contains values less than or equal to 0.\nThe function should raise an error\
    \ if the vector contains values greater than or equal to 100.\nThe function should\
    \ raise an error if the vector contains values less than or equal to 0.\nThe function\
    \ should raise an error if the vector contains values greater than or equal to\
    \ 100.\nThe function should raise an error if the vector contains values less\
    \ than or equal to 0.\nThe function should raise an error if the vector contains\
    \ values greater than or equal to 100.\nThe function should raise an error if\
    \ the vector contains values less than or equal to 0.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuklpqq0m.jl:16\nin expression starting at\
    \ /tmp/tmpuklpqq0m.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_of_numbers = reduce(mul,\
    \ numbers, 1)\n    return (sum_product, product_of_numbers)\nend\n</code>\n<|/\
    \ a dscore=1 |>\n<| a tags=julia,function,sum,product |>\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphslqyztg.jl:13\nin expression starting at\
    \ /tmp/tmphslqyztg.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        return (0, 1) \n    else \n \
    \       sum_product = numbers[1] + numbers[2]\n        product_product = numbers[1]\
    \ * numbers[2]\n        return (sum_product, product_product)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert sum_product([1, 2, 3]) == (6, 6)\n\
    @assert sum_product([1, 2, 3]) == (6, 6)\n@assert sum_product([1, 2, 3]) == (6,\
    \ 6)\n@assert sum_product([1, 2, 3]) == (6, 6)\n@assert sum_product([1, 2, 3])\
    \ == (6, 6)\n@assert sum_product([1, 2, 3]) == (6, 6)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 6)\n@assert sum_product([1, 2, 3]) == (6, 6)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 6)\n@assert sum_product([1, 2, 3]) == (6, 6)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 6)\n@assert sum_product([1, 2, 3]) == (6, 6)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 6)\n@assert sum_product([1, 2, 3]) == (6, 6)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 6)\n@assert sum_product([1, 2, 3]) == (6, 6)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 6)\n@assert sum_product([1, 2, 3]) == (6, 6)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 6)\n@assert sum_product([1, 2, 3]) == (6, 6)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 6)\n@assert sum_product([1, 2, 3]) == (6, 6)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 6)\n@assert sum_product([1, 2, 3]) == (6, 6)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 6)\n@assert sum_product([1, 2, 3]) == (6, 6)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 6)\n@assert sum_product([1, 2, 3]) == (6, 6)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 6)\n@assert sum_product([1, 2, 3]) == (6, 6)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 6)\n@assert sum_product([1, 2, 3]) == (6, 6)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 6)\n@assert sum_product([1, 2, 3]) == (6, 6)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 6)\n@assert sum_product([1, 2, 3]) == (6, 6)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 6)\n@assert sum_product([1, 2, 3]) == (6, 6)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 6)\n@assert sum_product([1, 2, 3]) == (6, 6)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 6)\n@assert sum_product([1, 2, 3]\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t\
    @test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\
    \t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr2bi4uel.jl:17\nin expression starting at\
    \ /tmp/tmpr2bi4uel.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_ = 0\n    product_ = 1\n    for n in numbers\n        sum_\
    \ = sum_ + n\n        product_ = product_ * n\n    return (sum_, product_)\nend\n\
    </cell>\n<code language=julia-1.0>\n@time sum_product([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector of integers\
    \ and returns the sum of the squares of the integers in the vector.\nThe function\
    \ should work for vectors of any length.\nThe function should work for vectors\
    \ of any type.\nThe function should work for vectors of any element type.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxgo9sp8q.jl:16\nin expression starting at\
    \ /tmp/tmpxgo9sp8q.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        return (0, 1) \n    else \n \
    \       sum_ = numbers[1]\n        prod_ = 1\n        for i in numbers[2:end]\n\
    \            sum_ += i\n            prod_ *= i\n        return (sum_, prod_)\n\
    \    end\nend\n</code>\n<|/ a tags=julia,list |>\n<| c |>\nThanks for your answer.\
    \ Your code is very concise, but I wonder if there is a way to do it without using\
    \ loops.\n<|/ c |>\n<| c |>\nI guess there is, but I haven't found it yet. I'll\
    \ keep looking.\n<|/ c |>\n<| c |>\nI added a solution that doesn't use loops.\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1,\
    \ 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdtlepsvm.jl:20\nin expression starting at\
    \ /tmp/tmpdtlepsvm.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_of_numbers = reduce(mul,\
    \ numbers, 1)\n    return (sum_product, product_of_numbers)\nend\n</cell>\n<code\
    \ language=julia-1.0>\nsum_product([1, 2, 3, 4])\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a vector of integers and returns the sum of the squares\
    \ of the integers in the vector. \nThe function should raise an error if the vector\
    \ is empty.\n>>> sum_squares([])\n0\n>>> sum_squares([1, 2, 3, 4])\n25\n>>> sum_squares([-1,\
    \ 2, -3, 4])\n25\n>>> sum_squares([-1, 2, -3, 4], 0)\n0\n>>> sum_squares([-1,\
    \ 2, -3, 4], 1)\n25\n>>> sum_squares([-1, 2, -3, 4], 2)\n25\n>>> sum_squares([-1,\
    \ 2, -3, 4], 3)\n25\n>>> sum_squares([-1, 2, -3, 4], 4)\n25\n>>> sum_squares([-1,\
    \ 2, -3, 4], 5)\n25\n>>> sum_squares([-1, 2, -3, 4], 6)\n25\n>>> sum_squares([-1,\
    \ 2, -3, 4], 7)\n25\n>>> sum_squares([-1, 2, -3, 4], 8)\n25\n>>> sum_squares([-1,\
    \ 2, -3, 4], 9)\n25\n>>> sum_squares([-1, 2, -3, 4], 10)\n25\n>>> sum_squares([-1,\
    \ 2, -3, 4], 11)\n25\n>>> sum_squares([-1, 2, -3, 4], 12)\n25\n>>> sum_squares([-1,\
    \ 2, -3, 4], 13)\n25\n>>> sum_squares([-1, 2, -3, 4], 14)\n25\n>>> sum_squares([-1,\
    \ 2, -3, 4], 15)\n25\n>>> sum_squares([-1, 2, -3, 4], 16)\n25\n>>> sum_squares([-1,\
    \ 2, -3, 4], 17)\n25\n>>> sum_squares([-1, 2, -3, 4], 18)\n25\n>>> sum_squares([-1,\
    \ 2, -3, 4], 19)\n25\n>>> sum_squares([-1, 2, -3, 4], 20)\n25\n>>> sum_squares([-1,\
    \ 2, -3, 4], 21)\n25\n>>> sum_squares([-1, 2, -3, 4], 22)\n25\n>>> sum_squares([-1,\
    \ 2, -3, 4], 23)\n25\n>>> sum_squares([-1, 2, -3, 4], 24)\n25\n>>> sum_squares([-1,\
    \ 2, -3, 4], 25)\n25\n>>> \nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg1p71z3g.jl:13\nin expression starting at\
    \ /tmp/tmpg1p71z3g.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = Int64(0)\n    product_of_numbers = Int64(1)\n   \
    \ for number in numbers\n        sum_product = sum_product + number\n        product_of_numbers\
    \ = product_of_numbers * number\n    end\n    return (sum_product, product_of_numbers)\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6uh27fws.jl:17\nin expression starting at\
    \ /tmp/tmp6uh27fws.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = numbers[1]\n    product = 1\n    for i in numbers[2:end]\n\
    \        sum_product += i\n        product *= i\n    return (sum_product, product)\n\
    end\n</cell>\n<code language=julia-1.5>\nsum_product([1, 2, 3, 4])\n</cell>\n\
    <text>\nExercise 4\nWrite a function that returns the sum and product of the integers\
    \ in a given list.\nThe function should work for any type of iterable (including\
    \ vectors and matrices).\nThe function should work for both positive and negative\
    \ numbers.\nThe function should work for any type of numbers (including integers\
    \ and floats).\nThe function should work for any type of numbers (including integers\
    \ and floats).\nThe function should work for any type of numbers (including integers\
    \ and floats).\nThe function should work for any type of numbers (including integers\
    \ and floats).\nThe function should work for any type of numbers (including integers\
    \ and floats).\nThe function should work for any type of numbers (including integers\
    \ and floats).\nThe function should work for any type of numbers (including integers\
    \ and floats).\nThe function should work for any type of numbers (including integers\
    \ and floats).\nThe function should work for any type of numbers (including integers\
    \ and floats).\nThe function should work for any type of numbers (including integers\
    \ and floats).\nThe function should work for any type of numbers (including integers\
    \ and floats).\nThe function should work for any type of numbers (including integers\
    \ and floats).\nThe function should work for any type of numbers (including integers\
    \ and floats).\nThe function should work for any type of numbers (including integers\
    \ and floats).\nThe function should work for any type of numbers (including integers\
    \ and floats).\nThe function should work for any type of numbers (including integers\
    \ and floats).\nThe function should work for any type of numbers (including integers\
    \ and floats).\nThe function should work for any type of numbers (including integers\
    \ and floats).\nThe function should work for any type of numbers (including integers\
    \ and floats).\nThe function should work for any type of numbers (including integers\
    \ and floats).\nThe function should work for any type of numbers (including integers\
    \ and floats).\nThe function should work for any type of numbers (including integers\
    \ and floats).\nThe function should work for any type of numbers (including integers\
    \ and floats).\nThe function should work for any type of numbers (including integers\
    \ and floats).\nThe function should work for any type of numbers (including integers\
    \ and floats).\nThe function should work for any type of numbers (including integers\
    \ and floats).\nThe function should work for any type of numbers (including integers\
    \ and floats).\nThe function should work for any type of numbers (including integers\
    \ and floats).\nThe function should work for any type of numbers (including integers\
    \ and floats).\nThe function should work for any type of \nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmper20vgn2.jl:16\nin expression starting at\
    \ /tmp/tmper20vgn2.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_of_numbers = reduce(mul,\
    \ numbers, 1)\n    return (sum_product, product_of_numbers)\nend\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that takes a vector of integers and returns a vector\
    \ of integers containing the squares of the integers in the vector.\nFor example,\
    \ if the input vector is [4, 6, 9], then the output vector should be [16, 25,\
    \ 36].\nThe function should work for vectors of any size.\nThe function should\
    \ work for both positive and negative numbers.\nThe function should work for vectors\
    \ of any type.\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd3kb_0vb.jl:13\nin expression starting at\
    \ /tmp/tmpd3kb_0vb.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        return (0, 1) \n    else \n \
    \       sum_product = numbers[1]\n        product_of_numbers = numbers[2:end]\n\
    \        sum_product += numbers[1]\n        sum_product *= product_of_numbers\n\
    \        return (sum_product, sum_product)\n    end\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a list of integers and returns the sum of the\
    \ squares of the integers in the list.\nThe function should raise an error if\
    \ the list is empty.\nThe function should raise an error if the list contains\
    \ non-integer values.\nThe function should raise an error if the list contains\
    \ negative values.\nThe function should raise an error if the list contains duplicate\
    \ values.\nThe function should raise an error if the list contains negative values.\n\
    The function should raise an error if the list contains values greater than 100.\n\
    The function should raise an error if the list contains values greater than 100.\n\
    The function should raise an error if the list contains values greater than 100.\n\
    The function should raise an error if the list contains values greater than 100.\n\
    The function should raise an error if the list contains values greater than 100.\n\
    The function should raise an error if the list contains values greater than 100.\n\
    The function should raise an error if the list contains values greater than 100.\n\
    The function should raise an error if the list contains values greater than 100.\n\
    The function should raise an error if the list contains values greater than 100.\n\
    The function should raise an error if the list contains values greater than 100.\n\
    The function should raise an error if the list contains values greater than 100.\n\
    The function should raise an error if the list contains values greater than 100.\n\
    The function should raise an error if the list contains values greater than 100.\n\
    The function should raise an error if the list contains values greater than 100.\n\
    The function should raise an error if the list contains values greater than 100.\n\
    The function should raise an error if the list contains values greater than 100.\n\
    The function should raise an error if the list contains values greater than 100.\n\
    The function should raise an error if the list contains values greater than 100.\n\
    The function should raise an error if the list contains values greater than 100.\n\
    The function should raise an error if the list contains values greater than 100.\n\
    The function should raise an error if the list contains values greater than 100.\n\
    The function should raise an error if the list contains values greater than 100.\n\
    The function should raise an error if the list contains values greater than 100.\n\
    The function should raise an error if the list contains values greater than 100.\n\
    The function should raise an error if the list contains values greater than 100.\n\
    The function should raise an error if the list contains values greater than 100.\n\
    The function should raise an error if the list contains values greater than 100.\n\
    The function should raise an error if the list contains values greater than 100.\n\
    The function should raise an error if the list contains values greater than 100.\n\
    The function should raise an error if the list contains values greater than 100.\n\
    The function should raise an error if the list contains values greater than 100.\n\
    The function should \nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbt5gydd5.jl:19\nin expression starting at\
    \ /tmp/tmpbt5gydd5.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for n in numbers\n        sum +=\
    \ n\n        product *= n\n    return (sum, product)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([\nusing Test\n\n\
    @testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6f6_d2kz.jl:16\nin expression starting at\
    \ /tmp/tmp6f6_d2kz.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_ = 0\n    product_ = 1\n    for number in numbers\n       \
    \ sum_ = sum_ + number\n        product_ = product_ * number\n    end\n    return\
    \ (sum_, product_)\nend\n</cell>\n<code language=julia-1.4>\nsum_product([1,2,3])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a list of integers and\
    \ returns the sum of the squares of the integers in the list.\nThe function should\
    \ raise an error if the list is empty.\nThe function should raise an error if\
    \ the list contains non-integer values.\nThe function should raise an error if\
    \ the list contains negative values.\nThe function should raise an error if the\
    \ list contains duplicate values.\nThe function should raise an error if the list\
    \ contains negative values.\nThe function should raise an error if the list contains\
    \ values greater than 100.\nThe function should raise an error if the list contains\
    \ values greater than 100.\nThe function should raise an error if the list contains\
    \ values greater than 100.\nThe function should raise an error if the list contains\
    \ values greater than 100.\nThe function should raise an error if the list contains\
    \ values greater than 100.\nThe function should raise an error if the list contains\
    \ values greater than 100.\nThe function should raise an error if the list contains\
    \ values greater than 100.\nThe function should raise an error if the list contains\
    \ values greater than 100.\nThe function should raise an error if the list contains\
    \ values greater than 100.\nThe function should raise an error if the list contains\
    \ values greater than 100.\nThe function should raise an error if the list contains\
    \ values greater than 100.\nThe function should raise an error if the list contains\
    \ values greater than 100.\nThe function should raise an error if the list contains\
    \ values greater than 100.\nThe function should raise an error if the list contains\
    \ values greater than 100.\nThe function should raise an error if the list contains\
    \ values greater than 100.\nThe function should raise an error if the list contains\
    \ values greater than 100.\nThe function should raise an error if the list contains\
    \ values greater than 100.\nThe function should raise an error if the list contains\
    \ values greater than 100.\nThe function should raise an error if the list contains\
    \ values greater than 100.\nThe function should raise an error if the list contains\
    \ values greater than 100.\nThe function should raise an error if the list contains\
    \ values greater than 100.\nThe function should raise an error if the list contains\
    \ values greater than 100.\nThe function should raise an error if the list contains\
    \ values greater than 100.\nThe function should raise an error if the list contains\
    \ values greater than 100.\nThe function should raise an error if the list contains\
    \ values greater than 100.\nThe function should raise an error if the list contains\
    \ values greater than 100.\nThe function should raise an error if the list contains\
    \ values greater than 100.\nThe function should raise an error if the list contains\
    \ values greater than 100.\nThe function should raise an error if the list contains\
    \ values greater than 100.\nThe function should raise an error if the list contains\
    \ values greater than 100.\nThe function should raise an error if the list contains\
    \ values greater than 100.\nThe function should raise an error if the list \n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgr7v1ppf.jl:17\nin expression starting at\
    \ /tmp/tmpgr7v1ppf.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_of_numbers = prod(numbers)\n\
    \    return (sum_product, product_of_numbers)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t\
    @test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\
    \t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_of_numbers = prod(numbers)\n\
    \    return (sum_product, product_of_numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the sum of the squares of the numbers in a given list.\n>>> sum_square([1,2,3])\n\
    25\n>>> sum_square([1,2,3])\n25\n>>> sum_square([1,2,3])\n25\n>>> sum_square([1,2,3])\n\
    25\n>>> sum_square([1,2,3])\n25\n>>> sum_square([1,2,3])\n25\n>>> sum_square([1,2,3])\n\
    25\n>>> sum_square([1,2,3])\n25\n>>> sum_square([1,2,3])\n25\n>>> sum_square([1,2,3])\n\
    25\n>>> sum_square([1,2,3])\n25\n>>> sum_square([1,2,3])\n25\n>>> sum_square([1,2,3])\n\
    25\n>>> sum_square([1,2,3])\n25\n>>> sum_square([1,2,3])\n25\n>>> sum_square([1,2,3])\n\
    25\n>>> sum_square([1,2,3])\n25\n>>> sum_square([1,2,3])\n25\n>>> sum_square([1,2,3])\n\
    25\n>>> sum_square([1,2,3])\n25\n>>> sum_square([1,2,3])\n25\n>>> sum_square([1,2,3])\n\
    25\n>>> sum_square([1,2,3])\n25\n>>> sum_square([1,2,3])\n25\n>>> sum_square([1,2,3])\n\
    25\n>>> sum_square([1,2,3])\n25\n>>> sum_square([1,2,3])\n25\n>>> sum_square([1,2,3])\n\
    25\n>>> sum_square([1,2,3])\n25\n>>> sum_square([1,2,3])\n25\n>>> sum_square([1,2,3])\n\
    25\n>>> sum_square([1,2,3])\n25\n>>> sum_square([1,2,3])\n25\n>>> sum_square([1,2,3])\n\
    25\n>>> sum_square([1,2,3])\n25\n>>> sum_square([1,2,3])\n25\n>>> sum_square([1,2,3])\n\
    25\n>>> sum_square([1,2,3])\n25\n>>> sum_square([1,2,3])\n25\n>>> sum_square([1,2,3])\n\
    25\n>>> sum_square([1,2,3])\n25\n>>> sum_square([1,2,3])\n25\n>>> sum_square([1,2,3])\n\
    25\n>>> sum_square([\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc9b43d0f.jl:13\nin expression starting at\
    \ /tmp/tmpc9b43d0f.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_product = 1\n    for n\
    \ in numbers\n        product_product *= n\n    end\n    return (sum_product,\
    \ product_product)\nend\n</cell>\n<code language=julia-1.5>\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7wqguytp.jl:16\nin expression starting at\
    \ /tmp/tmp7wqguytp.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_ = numbers[1]\n    prod = numbers[1]\n    for n in numbers[2:end]\n\
    \        sum_ = sum_ + n\n        prod = prod * n\n    return (sum_, prod)\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc210l2jn.jl:16\nin expression starting at\
    \ /tmp/tmpc210l2jn.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_of_numbers = prod(numbers)\n\
    \    return (sum_product, product_of_numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa84a3mu1.jl:13\nin expression starting at\
    \ /tmp/tmpa84a3mu1.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        return (0, 1) \n    else \n \
    \       sum_product = numbers[1] + numbers[2] \n        product = 1\n        for\
    \ i in numbers[2:end] \n            product = product * i \n        \n       \
    \ return (sum_product, product) \nend \n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3,4,5])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector of integers\
    \ and returns the sum of the squares of the integers in the vector.\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptfvvwiim.jl:19\nin expression starting at\
    \ /tmp/tmptfvvwiim.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_of_numbers = reduce(mul,\
    \ numbers, 1)\n    return (sum_product, product_of_numbers)\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3,4,5])\
    \ == (15, 120)\n@assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2])\
    \ == (3, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2])\
    \ == (3, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2])\
    \ == (3, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2])\
    \ == (3, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2])\
    \ == (3, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2])\
    \ == (3, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2])\
    \ == (3, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2])\
    \ == (3, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2])\
    \ == (3, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2])\
    \ == (3, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2])\
    \ == (3, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2])\
    \ == (3, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2])\
    \ == (3, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2])\
    \ == (3, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2])\
    \ == (3, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2])\
    \ == (3, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2])\
    \ == (3, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2])\
    \ == (3, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2])\
    \ == (3, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2])\
    \ == (3, 6)\n@assert sum_product([\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1,\
    \ 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo9qvvqk1.jl:13\nin expression starting at\
    \ /tmp/tmpo9qvvqk1.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        return (0, 1) \n    else \n \
    \       sum_ = numbers[1]\n        product_ = 1\n        for i in 2:length(numbers)\
    \ \n            sum_ = sum_ + numbers[i]\n            product_ = product_ * numbers[i]\n\
    \        end\n        return (sum_, product_)\n    end\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the sum of the squares of the integers\
    \ in a list.\n    >>> sum_square_of_list([])\n    0.0\n    >>> sum_square_of_list([4,\
    \ 9, 16])\n    49.0\n    >>> sum_square_of_list([4, 9, 16, 25])\n    49.0\n  \
    \  \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp5vwa19h.jl:21\nin expression starting at\
    \ /tmp/tmpp5vwa19h.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for n in numbers\n        sum +=\
    \ n\n        product *= n\n    return (sum, product)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpftdesgr9.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpftdesgr9.jl:1\n\
    in expression starting at /tmp/tmpftdesgr9.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = Int64(0)\n    prod = Int64(1)\n    for n in numbers\n   \
    \     sum += n\n        prod *= n\n    return (sum, prod)\nend\n</cell>\n<code\
    \ language=julia-1.0>\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8tf9dqgm.jl:16\nin expression starting at\
    \ /tmp/tmp8tf9dqgm.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = numbers[1]\n    product_of_numbers = numbers[1]\n\
    \    for number in numbers[2:end]\n        sum_product = sum_product + number\n\
    \        product_of_numbers = product_of_numbers * number\n    end\n    return\
    \ (sum_product, product_of_numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the sum of the squares of the integers in a given list.\n    >>> sum_square_of_list([])\n\
    \    0.0\n    >>> sum_square_of_list([1,2,3])\n    9.0\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9qbk3gks.jl:17\nin expression starting at\
    \ /tmp/tmp9qbk3gks.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = numbers[1]\n    product = 1\n    for number in numbers\n\
    \        sum_product += number\n        product *= number\n    return (sum_product,\
    \ product)\nend\n</cell>\n<code language=julia-1.4>\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, \nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp51rjo3bs.jl:16\nin expression starting at\
    \ /tmp/tmp51rjo3bs.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum .(numbers)\n    product_of_numbers = product\
    \ .(numbers)\n    return (sum_product, product_of_numbers)\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time sum_product([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a list of integers and returns the sum\
    \ of the squares of the integers in the list.\nThe squares should be calculated\
    \ using the formula $x^2 = y^2 + z^2$, where $x$ and $y$ are the two numbers in\
    \ the list, and $z$ is the third number in the list.\nThe function should return\
    \ the sum of the squares.\nThe function should return 0 if the list is empty.\n\
    The function should return Inf if the list contains only one number.\nThe function\
    \ should return NaN if the list contains two or more numbers.\nThe function should\
    \ raise an error if the list contains non-integer numbers.\nThe function should\
    \ raise an error if the list contains negative numbers.\nThe function should raise\
    \ an error if the list contains zero, negative or non-integer numbers.\nThe function\
    \ should raise an error if the list contains two or more negative numbers.\nThe\
    \ function should raise an error if the list contains two or more non-integer\
    \ numbers.\nThe function should raise an error if the list contains two or more\
    \ zero, negative or non-integer numbers.\nThe function should raise an error if\
    \ the list contains two or more non-integer numbers.\nThe function should raise\
    \ an error if the list contains two or more non-integer numbers.\nThe function\
    \ should raise an error if the list contains two or more non-integer numbers.\n\
    The function should raise an error if the list contains two or more non-integer\
    \ numbers.\nThe function should raise an error if the list contains two or more\
    \ non-integer numbers.\nThe function should raise an error if the list contains\
    \ two or more non-integer numbers.\nThe function should raise an error if the\
    \ list contains two or more non-integer numbers.\nThe function should raise an\
    \ error if the list contains two or more non-integer numbers.\nThe function should\
    \ raise an error if the list contains two or more non-integer numbers.\nThe function\
    \ should raise an error if the list contains two or more non-integer numbers.\n\
    The function should raise an error if the list contains two or more non-integer\
    \ numbers.\nThe function should raise an error if the list contains two or more\
    \ non-integer numbers.\nThe function should raise an error if the list contains\
    \ two or more non-integer numbers.\nThe function should raise an error if the\
    \ list contains two or more non-integer numbers.\nThe function should raise an\
    \ error if the list contains two or more non-integer numbers.\nThe function should\
    \ raise an error if the list contains two or more non-integer numbers.\nThe function\
    \ should raise an error if the list contains two or more non-integer numbers.\n\
    The function should raise an error if the list contains two or more non-integer\
    \ numbers.\nThe function should raise an error if the list contains two or more\
    \ non-integer \nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \".\" not allowed in \"sum .\" at\
    \ /tmp/tmpymq4ijm0.jl:9\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpymq4ijm0.jl:9\n\
    in expression starting at /tmp/tmpymq4ijm0.jl:9\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_ = 0\n    product_ = 1\n    for n in numbers\n        sum_\
    \ = sum_ + n\n        product_ = product_ * n\n    return (sum_, product_)\nend\n\
    </cell>\n<code language=julia-1.3>\nsum_product([1, 2, 3, 4])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a list of integers and returns the sum\
    \ of the squares of the integers in the list.\nThe function should work for empty\
    \ lists and lists with one or more integers.\nThe function should work for lists\
    \ with negative integers and lists with integers greater than or equal to 0.\n\
    The function should work for lists with integers greater than or equal to 0.\n\
    The function should work for lists with integers less than 0.\nThe function should\
    \ work for lists with integers less than 0.\nThe function should work for lists\
    \ with integers equal to 0.\nThe function should work for lists with integers\
    \ equal to 0.\nThe function should work for lists with integers equal to 0.\n\
    The function should work for lists with integers equal to 0.\nThe function should\
    \ work for lists with integers equal to 0.\nThe function should work for lists\
    \ with integers equal to 0.\nThe function should work for lists with integers\
    \ equal to 0.\nThe function should work for lists with integers equal to 0.\n\
    The function should work for lists with integers equal to 0.\nThe function should\
    \ work for lists with integers equal to 0.\nThe function should work for lists\
    \ with integers equal to 0.\nThe function should work for lists with integers\
    \ equal to 0.\nThe function should work for lists with integers equal to 0.\n\
    The function should work for lists with integers equal to 0.\nThe function should\
    \ work for lists with integers equal to 0.\nThe function should work for lists\
    \ with integers equal to 0.\nThe function should work for lists with integers\
    \ equal to 0.\nThe function should work for lists with integers equal to 0.\n\
    The function should work for lists with integers equal to 0.\nThe function should\
    \ work for lists with integers equal to 0.\nThe function should work for lists\
    \ with integers equal to 0.\nThe function should work for lists with integers\
    \ equal to 0.\nThe function should work for lists with integers equal to 0.\n\
    The function should work for lists with integers equal to 0.\nThe function should\
    \ work for lists with integers equal to 0.\nThe function should work for lists\
    \ with integers equal to 0.\nThe function should work for lists with integers\
    \ equal to 0.\nThe function should work for lists with integers equal to 0.\n\
    The function should work for lists with integers equal to 0.\nThe function should\
    \ work for lists with integers equal to 0.\nThe function should work for lists\
    \ with integers equal to 0.\nThe function should work for lists with integers\
    \ equal to 0.\nThe function should work for lists with integers equal to 0.\n\
    The function should work for lists with integer\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t\
    @test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\
    \t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq6ue36sg.jl:16\nin expression starting at\
    \ /tmp/tmpq6ue36sg.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_of_numbers = reduce(mul,\
    \ numbers, 1)\n    return (sum_product, product_of_numbers)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu2em0woo.jl:13\nin expression starting at\
    \ /tmp/tmpu2em0woo.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        return (0, 1) \n    else \n \
    \       sum_product = numbers[1] + numbers[2] \n        return (sum_product, numbers[1]\
    \ * numbers[2]) \nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis does not provide\
    \ an answer to the question. To critique or request clarification from an author,\
    \ leave a comment below their post. - [From Review](/review/low-quality-posts/28258597)\n\
    <|/ c |>\n<| c |>\nI believe this does answer the question. He wants to know how\
    \ to use recursion to solve this problem. He also asked for help on how to solve\
    \ the problem with recursion. He also asked for help on how to solve the problem\
    \ with recursion. He also asked for help on how to solve the problem with recursion.\
    \ He also asked for help on how to solve the problem with recursion. He also asked\
    \ for help on how to solve the problem with recursion. He also asked for help\
    \ on how to solve the problem with recursion. He also asked for help on how to\
    \ solve the problem with recursion. He also asked for help on how to solve the\
    \ problem with recursion. He also asked for help on how to solve the problem with\
    \ recursion. He also asked for help on how to solve the problem with recursion.\
    \ He also asked for help on how to solve the problem with recursion. He also asked\
    \ for help on how to solve the problem with recursion. He also asked for help\
    \ on how to solve the problem with recursion. He also asked for help on how to\
    \ solve the problem with recursion. He also asked for help on how to solve the\
    \ problem with recursion. He also asked for help on how to solve the problem with\
    \ recursion. He also asked for help on how to solve the problem with recursion.\
    \ He also asked for help on how to solve the problem with recursion. He also asked\
    \ for help on how to solve the problem with recursion. He also asked for help\
    \ on how to solve the problem with recursion. He also asked for help on how to\
    \ solve the problem with recursion. He also asked for help on how to solve the\
    \ problem with recursion. He also asked for help on how to solve the problem with\
    \ recursion. He also asked for help on how to solve the problem with recursion.\
    \ He also asked for help on how to solve the problem with recursion. He also asked\
    \ for help \nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkls02g27.jl:15\nin expression starting at\
    \ /tmp/tmpkls02g27.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_of_numbers = reduce(mul,\
    \ numbers, 1)\n    return (sum_product, product_of_numbers)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_product([1, 2, 3, 4])\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the sum of the squares of the numbers in a given\
    \ vector.\n    >>> sum_square_of_numbers([1, 2, 3, 4])\n    25\n    >>> sum_square_of_numbers([-1,\
    \ -2, -3, -4])\n    25\n    >>> sum_square_of_numbers([])\n    0\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpws1c75oz.jl:13\nin expression starting at\
    \ /tmp/tmpws1c75oz.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_ = 0\n    product_ = 1\n    for n in numbers\n        sum_\
    \ = sum_ + n\n        product_ = product_ * n\n    return (sum_, product_)\nend\n\
    </cell>\n<code language=julia-1.3>\nsum_product([1,2,3,4,5])\n</cell>\n<code language=julia-1.3>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\nsum_product([\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw7iuemwe.jl:16\nin expression starting at\
    \ /tmp/tmpw7iuemwe.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_product = 1\n    for i\
    \ in numbers\n        product_product *= i\n    end\n    return (sum_product,\
    \ product_product)\nend\n</cell>\n<code language=julia-1.5>\nsum_product([1, 2,\
    \ 3, 4])\n</cell>\n<code language=julia-1.5>\nsum_product([-1, -2, -3, -4])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([-1, -2, -3, -4, -5, -6])\n</cell>\n\
    <code language=julia-1.5>\nsum_product([-1, -2, -3, -4, -5, -6, -7, -8])\n</cell>\n\
    <code language=julia-1.5>\nsum_product([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([-1, -2, -3, -4, -5, -6, -7, -8,\
    \ -9, -10, -11])\n</cell>\n<code language=julia-1.5>\nsum_product([-1, -2, -3,\
    \ -4, -5, -6, -7, -8, -9, -10, -11, -12])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13])\n</cell>\n\
    <code language=julia-1.5>\nsum_product([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10,\
    \ -11, -12, -13, -14])\n</cell>\n<code language=julia-1.5>\nsum_product([-1, -2,\
    \ -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15,\
    \ -16])\n</cell>\n<code language=julia-1.5>\nsum_product([-1, -2, -3, -4, -5,\
    \ -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15,\
    \ -16, -17, -18])\n</cell>\n<code language=julia-1.5>\nsum_product([-1, -2, -3,\
    \ -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19])\n\
    </cell>\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxp680wlu.jl:16\nin expression starting at\
    \ /tmp/tmpxp680wlu.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_ = 0\n    product_ = 1\n    for n in numbers\n        sum_\
    \ = sum_ + n\n        product_ = product_ * n\n    return (sum_, product_)\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector of integers\
    \ and returns a vector of integers containing the squares of the integers in the\
    \ vector.\nThe function should work for vectors of any length.\nThe function should\
    \ work for vectors of any type of numbers.\nThe function should work for vectors\
    \ of any type of numbers.\nThe function should work for vectors of any type of\
    \ numbers.\nThe function should work for vectors of any type of numbers.\nThe\
    \ function should work for vectors of any type of numbers.\nThe function should\
    \ work for vectors of any type of numbers.\nThe function should work for vectors\
    \ of any type of numbers.\nThe function should work for vectors of any type of\
    \ numbers.\nThe function should work for vectors of any type of numbers.\nThe\
    \ function should work for vectors of any type of numbers.\nThe function should\
    \ work for vectors of any type of numbers.\nThe function should work for vectors\
    \ of any type of numbers.\nThe function should work for vectors of any type of\
    \ numbers.\nThe function should work for vectors of any type of numbers.\nThe\
    \ function should work for vectors of any type of numbers.\nThe function should\
    \ work for vectors of any type of numbers.\nThe function should work for vectors\
    \ of any type of numbers.\nThe function should work for vectors of any type of\
    \ numbers.\nThe function should work for vectors of any type of numbers.\nThe\
    \ function should work for vectors of any type of numbers.\nThe function should\
    \ work for vectors of any type of numbers.\nThe function should work for vectors\
    \ of any type of numbers.\nThe function should work for vectors of any type of\
    \ numbers.\nThe function should work for vectors of any type of numbers.\nThe\
    \ function should work for vectors of any type of numbers.\nThe function should\
    \ work for vectors of any type of numbers.\nThe function should work for vectors\
    \ of any type of numbers.\nThe function should work for vectors of any type of\
    \ numbers.\nThe function should work for vectors of any type of numbers.\nThe\
    \ function should work for vectors of any type of numbers.\nThe function should\
    \ work for vectors of any type of numbers.\nThe function should work for vectors\
    \ of any type of numbers.\nThe function should work for vectors of any type of\
    \ numbers.\nThe function should work for vectors of any type of numbers.\nThe\
    \ function should work for vectors of any type of numbers.\nThe function should\
    \ work for vectors of any type of numbers.\nThe function should work for vectors\
    \ of any type of numbers.\nThe function should work for vectors of any type of\
    \ numbers.\nThe function should work for vectors of any type of numbers.\nThe\
    \ function should work for vectors of any type of numbers.\nThe function should\
    \ work for vectors of any type of numbers.\nThe function should work for vectors\
    \ of any type of numbers.\nThe function should work for vectors of any type of\
    \ numbers.\nThe function should work for vectors of any type of numbers.\nThe\
    \ \nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_ydhh0fv.jl:16\nin expression starting at\
    \ /tmp/tmp_ydhh0fv.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_of_numbers = prod(numbers)\n\
    \    return (sum_product, product_of_numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3,4,5])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw4ag2q3j.jl:13\nin expression starting at\
    \ /tmp/tmpw4ag2q3j.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_ = 0\n    product_ = 1\n    for n in numbers\n        sum_\
    \ = sum_ + n\n        product_ = product_ * n\n    return (sum_, product_)\nend\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1, 2, 3, 4])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes in a list of integers and returns the\
    \ sum of the integers squared. \nThe function should return 0 if the list is empty.\n\
    The function should return 0 if the list contains only zeros.\nThe function should\
    \ return 0 if the list contains only negative numbers.\nThe function should return\
    \ 0 if the list contains only positive numbers.\nThe function should return 0\
    \ if the list contains only integers less than 10.\nThe function should return\
    \ 0 if the list contains only integers greater than 10.\nThe function should return\
    \ 0 if the list contains only integers less than or equal to 10.\nThe function\
    \ should return 0 if the list contains only integers greater than or equal to\
    \ 10.\nThe function should return 0 if the list contains only integers less than\
    \ or equal to 100 and greater than or equal to 100.\nThe function should return\
    \ 0 if the list contains only integers greater than or equal to 100 and less than\
    \ or equal to 100.\nThe function should return 0 if the list contains only integers\
    \ less than or equal to 1,000 and greater than or equal to 1,000.\nThe function\
    \ should return 0 if the list contains only integers greater than or equal to\
    \ 1,000 and less than or equal to 1,000.\nThe function should return 0 if the\
    \ list contains only integers less than or equal to 10,000 and greater than or\
    \ equal to 10,000.\nThe function should return 0 if the list contains only integers\
    \ greater than or equal to 10,000 and less than or equal to 10,000.\nThe function\
    \ should return 0 if the list contains only integers less than or equal to 100,000\
    \ and greater than or equal to 100,000.\nThe function should return 0 if the list\
    \ contains only integers greater than or equal to 100,000 and less than or equal\
    \ to 100,000.\nThe function should return 0 if the list contains only integers\
    \ less than or equal to 1,000,000 and greater than or equal to 1,000,000.\nThe\
    \ function should return 0 if the list contains only integers greater than or\
    \ equal to 1,000,000 and less than or equal to 1,000,000.\nThe function should\
    \ return 0 if the list contains only integers less than or equal to 10,000,000\
    \ and greater than or equal to 10,000,000.\nThe function should return 0 if the\
    \ list contains only integers greater than or equal to 10,000,000 and less than\
    \ or equal to 10,000,000.\nThe function should return 0 if the list contains only\
    \ integers less than or equal to 100,000,000 and greater than or equal to 100,000,000.\n\
    The function should return 0 if the list contains only integers greater than or\
    \ equal to \nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8_ht3_9d.jl:16\nin expression starting at\
    \ /tmp/tmp8_ht3_9d.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_product = 1\n    for number\
    \ in numbers\n        product_product *= number\n    end\n    return (sum_product,\
    \ product_product)\nend\n</cell>\n<code language=julia-1.5>\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, \nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9sndq_cr.jl:16\nin expression starting at\
    \ /tmp/tmp9sndq_cr.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        return (0, 1)\n    end\n    sum_product\
    \ = numbers[1]\n    product_of_numbers = numbers[1]\n    for n in numbers[2:end]\n\
    \        sum_product = sum_product + n\n        product_of_numbers = product_of_numbers\
    \ * n\n    end\n    return (sum_product, product_of_numbers)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3,4,5])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3,4,5,6])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3,4,5,6,7])\n</cell>\n<code\
    \ language=julia-1.5>\nsum_product([1,2,3,4,5,6,7,8])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3,4,5,6,7,8,9])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3,4,5,6,7,8,9,10,11])\n</cell>\n\
    <code language=julia-1.5>\nsum_product([1,2,3,4,5,6,7,8,9,10,11,12])\n</cell>\n\
    <code language=julia-1.5>\nsum_product([1,2,3,4,5,6,7,8,9,10,11,12,13])\n</cell>\n\
    <code language=julia-1.5>\nsum_product([1,2,3,4,5,6,7,8,9,10,11,12,13,14])\n</cell>\n\
    <code language=julia-1.5>\nsum_product([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpblm5uuui.jl:20\nin expression starting at\
    \ /tmp/tmpblm5uuui.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_of_numbers = reduce(mul,\
    \ numbers, 1)\n    return (sum_product, product_of_numbers)\nend\n</cell>\n<code\
    \ language=julia-1.3>\nsum_product([1,2,3,4,5])\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the sum of the squares of all the integers in a\
    \ given list.\n    >>> sum_square_of_numbers([1, 2, 3, 4])\n    25\n    >>> sum_square_of_numbers([-1,\
    \ -2, -3, -4])\n    25\n    >>> sum_square_of_numbers([1, 2, 3, -4, 5])\n    25\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpra80scr4.jl:13\nin expression starting at\
    \ /tmp/tmpra80scr4.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_product = 1\n    for number\
    \ in numbers\n        product_product *= number\n    end\n    return (sum_product,\
    \ product_product)\nend\n</cell>\n<code language=julia-1.5>\nsum_product([1, 2,\
    \ 3, 4])\n</cell>\n<text>\nExercise 4\nWrite a function that takes a vector and\
    \ a number as inputs and returns the sum of the vector and the number multiplied\
    \ by the sum of the vector.\nThe function should return two values - a sum and\
    \ a product.\nThe function should also return 0 if either of the inputs is 0.\n\
    The function should also return 0 if both inputs are 0.\nThe function should also\
    \ return 0 if either of the inputs is NaN.\nThe function should also return 0\
    \ if both inputs are NaN.\nThe function should also return 0 if either of the\
    \ inputs is Inf.\nThe function should also return 0 if both inputs are Inf.\n\
    The function should also return 0 if either of the inputs is -Inf.\nThe function\
    \ should also return 0 if both inputs are -Inf.\nThe function should also return\
    \ 0 if either of the inputs is +Inf.\nThe function should also return 0 if both\
    \ inputs are +Inf.\nThe function should also return 0 if either of the inputs\
    \ is -Inf or +Inf.\nThe function should also return 0 if both inputs are -Inf\
    \ or +Inf.\nThe function should also return 0 if either of the inputs is Inf or\
    \ -Inf.\nThe function should also return 0 if both inputs are Inf or -Inf.\nThe\
    \ function should also return 0 if either of the inputs is NaN or +Inf or -Inf.\n\
    The function should also return 0 if both inputs are NaN or +Inf or -Inf.\nThe\
    \ function should also return 0 if either of the inputs is NaN or -Inf or +Inf.\n\
    The function should also return 0 if both inputs are NaN or -Inf or +Inf.\nThe\
    \ function should also return 0 if either of the inputs is NaN or +Inf or -Inf\
    \ or -Inf.\nThe function should also return 0 if both inputs are NaN or +Inf or\
    \ -Inf or -Inf.\nThe function should also return 0 if either of the inputs is\
    \ NaN or -Inf or +Inf or +Inf.\nThe function should also return 0 if both inputs\
    \ are NaN or -Inf or +Inf or +Inf.\nThe function should also return 0 if either\
    \ of the inputs is NaN or +Inf or -Inf or -Inf or +Inf.\nThe function should also\
    \ return 0 if both inputs are NaN or -Inf or +Inf or \nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppch5us3o.jl:16\nin expression starting at\
    \ /tmp/tmppch5us3o.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_of_numbers = reduce(mul,\
    \ numbers, 1)\n    return (sum_product, product_of_numbers)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_product([1,2,3,4,5])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    \nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4sf47gyc.jl:13\nin expression starting at\
    \ /tmp/tmp4sf47gyc.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_of_numbers = reduce(mul,\
    \ numbers, 1)\n    return (sum_product, product_of_numbers)\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector and returns a vector consisting\
    \ of the sum of the first and last element of the vector and the product of the\
    \ rest of the elements.\n    >>> sum_and_product(Vector{Int64}([1,2,3]))\n   \
    \ (3, 6)\n    >>> sum_and_product(Vector{Int64}([1,2,3]))\n    (3, 6)\n    >>>\
    \ sum_and_product(Vector{Int64}([1,2,3]))\n    (3, 6)\n    >>> sum_and_product(Vector{Int64}([1,2,3]))\n\
    \    (3, 6)\n    >>> sum_and_product(Vector{Int64}([1,2,3]))\n    (3, 6)\n   \
    \ >>> sum_and_product(Vector{Int64}([1,2,3]))\n    (3, 6)\n    >>> sum_and_product(Vector{Int64}([1,2,3]))\n\
    \    (3, 6)\n    >>> sum_and_product(Vector{Int64}([1,2,3]))\n    (3, 6)\n   \
    \ >>> sum_and_product(Vector{Int64}([1,2,3]))\n    (3, 6)\n    >>> sum_and_product(Vector{Int64}([1,2,3]))\n\
    \    (3, 6)\n    >>> sum_and_product(Vector{Int64}([1,2,3]))\n    (3, 6)\n   \
    \ >>> sum_and_product(Vector{Int64}([1,2,3]))\n    (3, 6)\n    >>> sum_and_product(Vector{Int64}([1,2,3]))\n\
    \    (3, 6)\n    >>> sum_and_product(Vector{Int64}([1,2,3]))\n    (3, 6)\n   \
    \ >>> sum_and_product(Vector{Int64}([1,2,3]))\n    (3, 6)\n    >>> sum_and_product(Vector{Int64}([1,2,3]))\n\
    \    (3, 6)\n    >>> sum_and_product(Vector{Int64}([1,2,3]))\n    (3, 6)\n   \
    \ >>> sum_and_product(Vector{Int64}([1,2,3]))\n    (3, 6)\n    >>> sum_and_product(Vector{Int64}([1,2,3]))\n\
    \    (3, 6)\n    >>> sum_and_product(Vector{Int64}([1,2,3]))\n    (3, 6)\n   \
    \ >>> sum_and_product(Vector{Int64}([1,2,3]))\n    (3, 6)\n    >>> sum_and_product(Vector{Int64}([1,2,3]))\n\
    \    (3, 6)\n    >>> sum_and_product(Vector{Int64}([1,2,3]))\n    (3, 6)\n   \
    \ >>> sum_and_product(Vector{Int64}([1,2,3]))\n    (3, 6)\n    >>> sum_and_product(Vector{Int64}([1,2,3]))\n\
    \    (\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_tzr2s5t.jl:13\nin expression starting at\
    \ /tmp/tmp_tzr2s5t.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_ = 0\n    product_ = 1\n    for i in numbers\n        sum_\
    \ += i\n        product_ *= i\n    return (sum_, product_)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp2zj3d4wx.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2zj3d4wx.jl:1\n\
    in expression starting at /tmp/tmp2zj3d4wx.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        return (0, 1) \n    else \n \
    \       sum_ = numbers[1] + numbers[2] + numbers[3] + numbers[4] + numbers[5]\
    \ + numbers[6] + numbers[7] + numbers[8] + numbers[9] + numbers[10] + numbers[11]\
    \ + numbers[12] + numbers[13] + numbers[14] + numbers[15] + numbers[16] + numbers[17]\
    \ + numbers[18] + numbers[19] + numbers[20] + numbers[21] + numbers[22] + numbers[23]\
    \ + numbers[24] + numbers[25] + numbers[26] + numbers[27] + numbers[28] + numbers[29]\
    \ + numbers[30] + numbers[31] + numbers[32] + numbers[33] + numbers[34] + numbers[35]\
    \ + numbers[36] + numbers[37] + numbers[38] + numbers[39] + numbers[40] + numbers[41]\
    \ + numbers[42] + numbers[43] + numbers[44] + numbers[45] + numbers[46] + numbers[47]\
    \ + numbers[48] + numbers[49] + numbers[50] + numbers[51] + numbers[52] + numbers[53]\
    \ + numbers[54] + numbers[55] + numbers[56] + numbers[57] + numbers[58] + numbers[59]\
    \ + numbers[60] + numbers[61] + numbers[62] + numbers[63] + numbers[64] + numbers[65]\
    \ + numbers[66] + numbers[67] + numbers[68] + numbers[69] + numbers[70] + numbers[71]\
    \ + numbers[72] + numbers[73] + numbers[74] + numbers[75] + numbers[76] + numbers[77]\
    \ + numbers[78] + numbers[79] + numbers[80] + numbers[81] + numbers[82] + numbers[83]\
    \ + numbers[84] + numbers[85] + numbers[86] + numbers[87] + numbers[88] + numbers[89]\
    \ + numbers[90] + numbers[91] + numbers[92] + numbers[93] + numbers[94] + numbers[95]\
    \ + numbers[96] + numbers[97] + numbers[98] + numbers[99] + numbers[100] + numbers[101]\
    \ + numbers[102] + numbers[103] + numbers[104] + numbers[105] + numbers[106] +\
    \ numbers[107] + numbers[108] + numbers[109] + numbers[110] + numbers[111] + numbers[112]\
    \ + numbers[113] + numbers[114] + numbers[115] + numbers[116] + numbers[117] +\
    \ numbers[118] + number\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmptnw19ggs.jl:9 requires\
    \ end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptnw19ggs.jl:1\nin expression\
    \ starting at /tmp/tmptnw19ggs.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_of_numbers = prod(numbers)\n\
    \    return (sum_product, product_of_numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqhp7l3_j.jl:13\nin expression starting at\
    \ /tmp/tmpqhp7l3_j.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        return (0, 1) \n    else \n \
    \       sum_product = numbers[1] + numbers[2]\n        prod_product = numbers[1]\
    \ * numbers[2]\n        return (sum_product, prod_product)\n    end\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of integers and returns\
    \ the sum of the squares of the integers in the vector.\nThe sum of the squares\
    \ should be equal to the sum of the squares of the integers in the vector.\nThe\
    \ function should raise an error if the vector is empty.\nThe function should\
    \ raise an error if the vector contains non-integer values.\nThe function should\
    \ raise an error if the vector contains negative values.\nThe function should\
    \ raise an error if the vector contains duplicate values.\nThe function should\
    \ raise an error if the vector contains negative values.\nThe function should\
    \ raise an error if the vector contains non-integer values.\nThe function should\
    \ raise an error if the vector contains duplicate values.\nThe function should\
    \ raise an error if the vector contains duplicate values.\nThe function should\
    \ raise an error if the vector contains duplicate values.\nThe function should\
    \ raise an error if the vector contains duplicate values.\nThe function should\
    \ raise an error if the vector contains duplicate values.\nThe function should\
    \ raise an error if the vector contains duplicate values.\nThe function should\
    \ raise an error if the vector contains duplicate values.\nThe function should\
    \ raise an error if the vector contains duplicate values.\nThe function should\
    \ raise an error if the vector contains duplicate values.\nThe function should\
    \ raise an error if the vector contains duplicate values.\nThe function should\
    \ raise an error if the vector contains duplicate values.\nThe function should\
    \ raise an error if the vector contains duplicate values.\nThe function should\
    \ raise an error if the vector contains duplicate values.\nThe function should\
    \ raise an error if the vector contains duplicate values.\nThe function should\
    \ raise an error if the vector contains duplicate values.\nThe function should\
    \ raise an error if the vector contains duplicate values.\nThe function should\
    \ raise an error if the vector contains duplicate values.\nThe function should\
    \ raise an error if the vector contains duplicate values.\nThe function should\
    \ raise an error if the vector contains duplicate values.\nThe function should\
    \ raise an error if the vector contains duplicate values.\nThe function should\
    \ raise an error if the vector contains duplicate values.\nThe function should\
    \ raise an error if the vector contains duplicate values.\nThe function should\
    \ raise an error if the vector contains duplicate values.\nThe function should\
    \ raise an error if the vector contains duplicate values.\nThe function should\
    \ raise an error if the vector contains duplicate values.\nThe function should\
    \ raise an error if the vector contains duplicate values.\nThe function should\
    \ raise an error if the vector contains duplicate values.\nThe function should\
    \ raise an error if the vector contains duplicate values.\nThe function should\
    \ raise an error if the vector contains duplicate values.\nThe function should\
    \ raise an error if the vector contains duplicate values.\nThe function should\
    \ raise an error if the vector contains duplicate values.\nThe function should\
    \ raise an error if the vector contains duplicate values.\nThe function should\
    \ raise an error if the vector contains \nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1,\
    \ 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4sdl71ys.jl:17\nin expression starting at\
    \ /tmp/tmp4sdl71ys.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        return (0, 1) \n    else \n \
    \       sum_product = numbers[1] + numbers[2]\n        prod_product = numbers[1]\
    \ * numbers[2]\n        return (sum_product, prod_product)\nend\n</cell>\n<text>\n\
    Exercise 10\nWrite a function that returns the sum of the squares of the numbers\
    \ in a list.\nThe function should take a list of integers and return a number.\n\
    The function should return 0 if the list is empty.\nThe function should return\
    \ 0 if the list contains only zeros.\nThe function should return 0 if the list\
    \ contains only negative numbers.\nThe function should return 0 if the list contains\
    \ only positive numbers.\nThe function should return 0 if the list contains only\
    \ even numbers.\nThe function should return 0 if the list contains only odd numbers.\n\
    The function should return 0 if the list contains only positive integers and 1\
    \ if the list contains only negative integers and -1 if the list contains only\
    \ even numbers and 1 if the list contains only odd numbers.\nThe function should\
    \ return 0 if the list contains only positive integers and -1 if the list contains\
    \ only negative integers and 1 if the list contains only even numbers and -1 if\
    \ the list contains only odd numbers.\nThe function should return 0 if the list\
    \ contains only positive integers and 1 if the list contains only negative integers\
    \ and -1 if the list contains only even numbers and 1 if the list contains only\
    \ odd numbers.\nThe function should return 0 if the list contains only positive\
    \ integers and -1 if the list contains only negative integers and -1 if the list\
    \ contains only even numbers and -1 if the list contains only odd numbers.\nThe\
    \ function should return 0 if the list contains only positive integers and 1 if\
    \ the list contains only negative integers and 1 if the list contains only even\
    \ numbers and 1 if the list contains only odd numbers.\nThe function should return\
    \ 0 if the list contains only positive integers and -1 if the list contains only\
    \ negative integers and -1 if the list contains only even numbers and -1 if the\
    \ list contains only odd numbers.\nThe function should return 0 if the list contains\
    \ only positive integers and 1 if the list contains only negative integers and\
    \ 1 if the list contains only even numbers and 1 if the list contains only odd\
    \ numbers.\nThe function should return 0 if the list contains only positive integers\
    \ and -1 if the list contains only negative integers and -1 if the list contains\
    \ only even numbers and -1 if the list contains only odd numbers.\nThe function\
    \ should return 0 if the list contains only positive integers and 1 if the list\
    \ contains only negative integers and -1 if the list contains only even numbers\
    \ and 1 if the list contains only odd numbers.\nThe function should return 0 if\
    \ the list contains only positive integers and -1 if the list contains only negative\
    \ integers and -1 if the list contains only even numbers and -1 if the list contains\
    \ only odd numbers.\nThe function should return 0 if the list contains \nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv05y58j6.jl:16\nin expression starting at\
    \ /tmp/tmpv05y58j6.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_ = 0\n    product_ = 1\n    for number in numbers\n       \
    \ sum_ = sum_ + number\n        product_ = product_ * number\n    return (sum_,\
    \ product_)\nend\n</cell>\n<code language=julia-1.5>\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3,4,5]) == (15, 120)\n@assert sum_product([1,2])\
    \ == (3, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2])\
    \ == (3, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2])\
    \ == (3, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2])\
    \ == (3, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2])\
    \ == (3, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2])\
    \ == (3, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2])\
    \ == (3, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2])\
    \ == (3, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2])\
    \ == (3, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2])\
    \ == (3, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2])\
    \ == (3, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2])\
    \ == (3, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2])\
    \ == (3, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2])\
    \ == (3, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2])\
    \ == (3, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2])\
    \ == (3, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2])\
    \ == (3, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2])\
    \ == (3, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2])\
    \ == (3, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2])\
    \ == (3, 6)\n@assert sum_product([1,2]) == (3, 6)\n@\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t\
    @test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\
    \t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpypetkqwl.jl:16\nin expression starting at\
    \ /tmp/tmpypetkqwl.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for i in numbers\n        sum = sum\
    \ + i\n        product = product * i\n    return (sum, product)\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3,4,5])\
    \ == (15, 120)\n@assert sum_product([1,2,3,4,5,6,7,8,9,10]) == (120, 3628800)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the sum and product\
    \ of all the integers in a vector, except the integers that come before a specific\
    \ integer in a vector. For example, if the vector is [1,2,3,4,5,6,7,8,9,10], the\
    \ function should return the sum and product of the integers except the integers\
    \ that come before 7 (i.e. the function should return (15, 120).\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2y3272av.jl:16\nin expression starting at\
    \ /tmp/tmp2y3272av.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_ = 0\n    product_ = 1\n    for n in numbers\n        sum_\
    \ += n\n        product_ *= n\n    return (sum_, product_)\nend\n</cell>\n<code\
    \ language=julia-1.3>\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjhimiaek.jl:16\nin expression starting at\
    \ /tmp/tmpjhimiaek.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for n in numbers\n        sum = sum\
    \ + n\n        product = product * n\n    return (sum, product)\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_product([1, 2, 3, 4])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a list of integers and returns the sum of the\
    \ squares of the integers in the list.\nThe sum of the squares should be equal\
    \ to the sum of the integers in the list.\nThe function should return nothing\
    \ if the list is empty.\nThe function should raise an error if the list contains\
    \ non-integer values.\nThe function should raise an error if the list contains\
    \ negative values.\nThe function should raise an error if the list contains values\
    \ greater than 100.\nThe function should raise an error if the list contains values\
    \ greater than or equal to 0.\nThe function should raise an error if the list\
    \ contains values less than 0.\nThe function should raise an error if the list\
    \ contains values less than or equal to 0.\nThe function should raise an error\
    \ if the list contains values greater than or equal to 0.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzt9x2rqf.jl:16\nin expression starting at\
    \ /tmp/tmpzt9x2rqf.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        return (0, 1) \n    else \n \
    \       sum_product = numbers[1] + numbers[2] \n        product_of_numbers = numbers[1]\
    \ * numbers[2] \n        return (sum_product, product_of_numbers) \nend\n</cell>\n\
    <code language=julia-1.5>\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt_dnvjqr.jl:16\nin expression starting at\
    \ /tmp/tmpt_dnvjqr.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = numbers[1]\n    product_of_numbers = numbers[1]\n\
    \    for number in numbers[2:end]\n        sum_product = sum_product + number\n\
    \        product_of_numbers = product_of_numbers * number\n    end\n    return\
    \ (sum_product, product_of_numbers)\nend\n</code>\n<|/ a dscore=0 |>\n<| a tags=julia\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphxh57c5v.jl:17\nin expression starting at\
    \ /tmp/tmphxh57c5v.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        return (0, 1)\n    else \n  \
    \      sum_product = numbers[1]\n        product_of_numbers = numbers[1]\n   \
    \     for i in 2:length(numbers)\n            sum_product = sum_product + numbers[i]\n\
    \            product_of_numbers = product_of_numbers * numbers[i]\n        end\n\
    \        return (sum_product, product_of_numbers)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes as input a vector of integers and returns a vector of\
    \ integers containing the squares of the integers in the input vector.\nThe function\
    \ should work for vectors of any length.\nThe function should work for vectors\
    \ of integers and floats.\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmploegxuo3.jl:21\nin expression starting at\
    \ /tmp/tmploegxuo3.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_ = 0\n    product_ = 1\n    for number in numbers\n       \
    \ sum_ = sum_ + number\n        product_ = product_ * number\n    return (sum_,\
    \ product_)\nend\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3,4,5])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ and returns the sum of the squares of the integers in the vector.\nWrite a function\
    \ that takes a vector of integers and returns the product of the integers in the\
    \ vector.\nWrite a function that takes a vector of integers and returns the sum\
    \ of the squares of the integers in the vector and product of the integers in\
    \ the vector.\nWrite a function that takes a vector of integers and returns the\
    \ sum of the squares of the integers in the vector and product of the integers\
    \ in the vector.\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t\
    @test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1]) ==\
    \ (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3, 5,\
    \ 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjg6mdkh1.jl:16\nin expression starting at\
    \ /tmp/tmpjg6mdkh1.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_ = Int64(0)\n    product_ = Int64(1)\n    for n in numbers\n\
    \        sum_ += n\n        product_ *= n\n    return (sum_, product_)\nend\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj23krlqf.jl:16\nin expression starting at\
    \ /tmp/tmpj23krlqf.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_product = 1\n    for n\
    \ in numbers\n        product_product *= n\n    return (sum_product, product_product)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpkmdmicgi.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpkmdmicgi.jl:1\n\
    in expression starting at /tmp/tmpkmdmicgi.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for n in numbers\n        sum +=\
    \ n\n        product *= n\n    return (sum, product)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector of integers and returns the sum of the squares of the integers in the\
    \ vector.\n    >>> square_sum([])\n    0.0\n    >>> square_sum([1, 2, 3, 4])\n\
    \    25.0\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4ag3h6po.jl:16\nin expression starting at\
    \ /tmp/tmp4ag3h6po.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_ = 0\n    product_ = 1\n    for n in numbers\n        sum_\
    \ = sum_ + n\n        product_ = product_ * n\n    return (sum_, product_)\nend\n\
    </cell>\n<code language=julia-1.4>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.4>\n\
    sum_product([1,2,3,4,5])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the product of all the integers in a vector. \nThe function should work for\
    \ both vectors and matrices.\nThe function should work for both positive and negative\
    \ integers.\nThe function should work for both integers and floating point numbers.\n\
    The function should work for both integers and floating point numbers.\nThe function\
    \ should work for both integers and floating point numbers.\nThe function should\
    \ work for both integers and floating point numbers.\nThe function should work\
    \ for both integers and floating point numbers.\nThe function should work for\
    \ both integers and floating point numbers.\nThe function should work for both\
    \ integers and floating point numbers.\nThe function should work for both integers\
    \ and floating point numbers.\nThe function should work for both integers and\
    \ floating point numbers.\nThe function should work for both integers and floating\
    \ point numbers.\nThe function should work for both integers and floating point\
    \ numbers.\nThe function should work for both integers and floating point numbers.\n\
    The function should work for both integers and floating point numbers.\nThe function\
    \ should work for both integers and floating point numbers.\nThe function should\
    \ work for both integers and floating point numbers.\nThe function should work\
    \ for both integers and floating point numbers.\nThe function should work for\
    \ both integers and floating point numbers.\nThe function should work for both\
    \ integers and floating point numbers.\nThe function should work for both integers\
    \ and floating point numbers.\nThe function should work for both integers and\
    \ floating point numbers.\nThe function should work for both integers and floating\
    \ point numbers.\nThe function should work for both integers and floating point\
    \ numbers.\nThe function should work for both integers and floating point numbers.\n\
    The function should work for both integers and floating point numbers.\nThe function\
    \ should work for both integers and floating point numbers.\nThe function should\
    \ work for both integers and floating point numbers.\nThe function should work\
    \ for both integers and floating point numbers.\nThe function should work for\
    \ both integers and floating point numbers.\nThe function should work for both\
    \ integers and floating point numbers.\nThe function should work for both integers\
    \ and floating point numbers.\nThe function should work for both integers and\
    \ floating point numbers.\nThe function should work for both integers and floating\
    \ point numbers.\nThe function should work for both integers and floating point\
    \ numbers.\nThe function should work for both integers and floating point numbers.\n\
    The function should work for both integers and floating point numbers.\nThe function\
    \ should work for both integers and floating point numbers.\nThe function should\
    \ work for both integers and floating point numbers.\nThe function should work\
    \ for both integers and floating point numbers.\nThe function should work for\
    \ both integers and floating point numbers.\nThe function should work for both\
    \ integers and floating point numbers.\nThe function \nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsw18lqp3.jl:16\nin expression starting at\
    \ /tmp/tmpsw18lqp3.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for n in numbers\n        sum +=\
    \ n\n        product *= n\n    return (sum, product)\nend\n</cell>\n<code language=julia-1.0>\n\
    @assert sum_product([1, 2, 3, 4]) == (10, 24)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the sum of the squares of the integers in a given list.\n\
    \    >>> sum_square([1, 2, 3, 4]) == 14\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t\
    @test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\
    \t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnh3ab5yr.jl:16\nin expression starting at\
    \ /tmp/tmpnh3ab5yr.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        return (0, 1)\n    else \n  \
    \      sum_product = numbers[1]\n        product = 1\n        for i in numbers[2:end]\n\
    \            product *= i\n            sum_product += product\n        return\
    \ (sum_product, product)\n    end\nend\n</cell>\n<code language=julia-1.5>\nsum_product([1,\
    \ 2, 3, 4])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a list of\
    \ integers and returns the sum of the squares of the integers in the list.\n \
    \   >>> square_sum([])\n    0.0\n    >>> square_sum([1, 2, 3, 4])\n    25.0\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplw_ps4y5.jl:20\nin expression starting at\
    \ /tmp/tmplw_ps4y5.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_ = 0\n    product_ = 1\n    for n in numbers\n        sum_\
    \ = sum_ + n\n        product_ = product_ * n\n    return (sum_, product_)\nend\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1, 2, 3, 4])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the sum of the squares of the numbers\
    \ in a given list.\n    >>> sum_square([1, 2, 3, 4])\n    25\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4b0eklta.jl:16\nin expression starting at\
    \ /tmp/tmp4b0eklta.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for n in numbers\n        sum +=\
    \ n\n        product *= n\n    return (sum, product)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1, 2, 3, 4])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the sum of the squares of the integers in a given list.\n    >>> sum_squares_list([])\n\
    \    0\n    >>> sum_squares_list([4, 9, 16])\n    49\n    >>> sum_squares_list([-4,\
    \ 9, 16])\n    -120\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7c3ckfgf.jl:16\nin expression starting at\
    \ /tmp/tmp7c3ckfgf.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_of_numbers = reduce(mul,\
    \ numbers, 1)\n    return (sum_product, product_of_numbers)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_product([1, 2, 3, 4])\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a vector of integers and returns a vector of integers\
    \ containing the first n integers of the vector. \nFor example, if the input vector\
    \ is [1,2,3,4,5,6], then the output vector should be [1,2,3]. \nIf the input vector\
    \ is empty, then the output vector should be an empty vector.\nIf the input vector\
    \ is of length 0, then the output vector should be an empty vector.\nIf the input\
    \ vector is of length 1, then the output vector should be that vector itself.\n\
    If the input vector is of length 2, then the output vector should be [2,3].\n\
    If the input vector is of length 3, then the output vector should be [3,4].\n\
    If the input vector is of length 4, then the output vector should be [4,5].\n\
    If the input vector is of length 5, then the output vector should be [5,6].\n\
    If the input vector is of length 6, then the output vector should be [6,1].\n\
    If the input vector is of length 7, then the output vector should be [6,1,2].\n\
    If the input vector is of length 8, then the output vector should be [6,1,2,3].\n\
    If the input vector is of length 9, then the output vector should be [6,1,2,3,4].\n\
    If the input vector is of length 10, then the output vector should be [6,1,2,3,4].\n\
    If the input vector is of length 11, then the output vector should be [6,1,2,3,4].\n\
    If the input vector is of length 12, then the output vector should be [6,1,2,3,4].\n\
    If the input vector is of length 13, then the output vector should be [6,1,2,3,4].\n\
    If the input vector is of length 14, then the output vector should be [6,1,2,3,4].\n\
    If the input vector is of length 15, then the output vector should be [6,1,2,3,4].\n\
    If the input vector is of length 16, then the output vector should be [6,1,2,3,4].\n\
    If the input vector is of length 17, then the output vector should be [6,1,2,3,4].\n\
    If the input vector is of length 18, then the output vector should be [6,1,2,3,4].\n\
    If the input vector is of length 19, then the output vector should be [6,1,2,3,4].\n\
    If the input vector is of length 20, then the output vector should be [6,1,2,3,4].\n\
    If the input vector is of length 21, then the output vector should be [6,1,2,3,4].\n\
    If the input vector is of length 22, then the output vector should be [6,1,2,3,4].\n\
    If the input vector is of length 23, then the output vector should be [6,1,2,3,4].\n\
    If the input vector is of length 24, \nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1,\
    \ 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph7peoo3x.jl:13\nin expression starting at\
    \ /tmp/tmph7peoo3x.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for n in numbers\n        sum = sum\
    \ + n\n        product = product * n\n    return (sum, product)\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a list of integers and returns\
    \ the sum of the squares of the integers in the list.\nThe function should return\
    \ 0 if the list is empty.\nThe function should return 0 if the list contains only\
    \ zeros.\nThe function should return 0 if the list contains only negative numbers.\n\
    The function should return 0 if the list contains only positive numbers.\nThe\
    \ function should return 0 if the list contains only even numbers.\nThe function\
    \ should return 0 if the list contains only odd numbers.\nThe function should\
    \ return 0 if the list contains only integers less than or equal to 10.\nThe function\
    \ should return 0 if the list contains only integers greater than or equal to\
    \ 10.\nThe function should return 0 if the list contains only integers equal to\
    \ or greater than 10.\nThe function should return 0 if the list contains only\
    \ integers equal to or less than 10.\nThe function should return 0 if the list\
    \ contains only integers equal to or greater than or equal to 10.\nThe function\
    \ should return 0 if the list contains only integers equal to or less than or\
    \ equal to 10.\nThe function should return 0 if the list contains only integers\
    \ equal to or greater than or equal to 10.\nThe function should return 0 if the\
    \ list contains only integers equal to or less than or equal to 10.\nThe function\
    \ should return 0 if the list contains only integers equal to or greater than\
    \ or equal to 10.\nThe function should return 0 if the list contains only integers\
    \ equal to or less than or equal to 10.\nThe function should return 0 if the list\
    \ contains only integers equal to or greater than or equal to 10.\nThe function\
    \ should return 0 if the list contains only integers equal to or less than or\
    \ equal to 10.\nThe function should return 0 if the list contains only integers\
    \ equal to or greater than or equal to 10.\nThe function should return 0 if the\
    \ list contains only integers equal to or less than or equal to 10.\nThe function\
    \ should return 0 if the list contains only integers equal to or greater than\
    \ or equal to 10.\nThe function should return 0 if the list contains only integers\
    \ equal to or less than or equal to 10.\nThe function should return 0 if the list\
    \ contains only integers equal to or greater than or equal to 10.\nThe function\
    \ should return 0 if the list contains only integers equal to or less than or\
    \ equal to 10.\nThe function should return 0 if the list contains only integers\
    \ equal to or greater than or equal to 10.\nThe function should return 0 if the\
    \ list contains only integers equal to or less than or equal to 10.\nThe function\
    \ should return 0 if the list contains only integers equal to or greater than\
    \ or equal to 10.\nThe function should return 0 if the list contains only integers\
    \ equal to or less than \nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_65ihvga.jl:16\nin expression starting at\
    \ /tmp/tmp_65ihvga.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        return (0, 1) \n    else \n \
    \       sum = numbers[1]\n        product = 1\n        for i in numbers[2:end]\
    \ \n            sum = sum + i \n            product = product * i \n        return\
    \ (sum, product) \nend\n</cell>\n<code language=julia-1.4>\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3,4,5]) == (15, 120)\n@assert sum_product([1,2,3,4,5,6,7,8,9,10])\
    \ == (120, 3628800)\n@assert sum_product([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])\
    \ == (3628800, 120)\n</cell>\n<text>\nProblem 7: Write a function that accepts\
    \ a vector of integers and returns the sum of the squares of the integers in the\
    \ vector.\n    >>> sum_of_squares([1,2,3,4])\n    25\n    >>> sum_of_squares([-1,-2,-3,-4])\n\
    \    -1\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1626alpa.jl:19\nin expression starting at\
    \ /tmp/tmp1626alpa.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = Int64(0)\n    prod = Int64(1)\n    for n in numbers\n   \
    \     sum += n\n        prod *= n\n    return (sum, prod)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_product([1, 2, 3, 4])\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the product of a list of integers multiplied by\
    \ their squares.\n    >>> square_product([])\n    1\n    >>> square_product([1,\
    \ 2, 3, 4])\n    24\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7uo_emz4.jl:16\nin expression starting at\
    \ /tmp/tmp7uo_emz4.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        return (0, 1) \n    else \n \
    \       sum = numbers[1]\n        product = 1\n        for i in numbers[2:end]\
    \ \n            sum = sum + i\n            product = product * i\n        end\n\
    \        return (sum, product)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1, 2, 3, 4])\n</cell>\n<text>\nExercise 5\nWrite a function that\
    \ returns the sum of the squares of the integers in a given list.\n    >>> sum_square([1,\
    \ 2, 3, 4])\n    25\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0d0q2cwx.jl:21\nin expression starting at\
    \ /tmp/tmp0d0q2cwx.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_of_numbers = reduce(mul,\
    \ numbers, 1)\n    return (sum_product, product_of_numbers)\nend\n</cell>\n<code\
    \ language=julia-1.0>\nsum_product([1, 2, 3, 4])\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the sum and product of all the integers in a list\
    \ except the first one.\n    >>> sum_except_first([1, 2, 3, 4])\n    (6, 12)\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa12_s6ar.jl:13\nin expression starting at\
    \ /tmp/tmpa12_s6ar.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = Int64(0)\n    product = Int64(1)\n    for n in numbers\n\
    \        sum += n\n        product *= n\n    return (sum, product)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpm006g4cc.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpm006g4cc.jl:1\n\
    in expression starting at /tmp/tmpm006g4cc.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_ = 0\n    product_ = 1\n    for number in numbers\n       \
    \ sum_ = sum_ + number\n        product_ = product_ * number\n    end\n    return\
    \ (sum_, product_)\nend\n</cell>\n<code language=julia-1.5>\nsum_product([1, 2,\
    \ 3, 4])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector of\
    \ integers and returns a vector of integers consisting of the product of all the\
    \ integers in the vector.\nFor example, given [1,2,3,4,5], the function should\
    \ return [1,2,6,24,120].\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpif1_7x3t.jl:17\nin expression starting at\
    \ /tmp/tmpif1_7x3t.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for n in numbers\n        sum +=\
    \ n\n        product *= n\n    return (sum, product)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector of integers and returns the sum of the squares of the integers in the\
    \ vector.\nThe function should return 0 if the vector is empty.\nThe function\
    \ should return Inf if the vector is empty.\nThe function should return Inf if\
    \ the vector is empty.\nThe function should return Inf if the vector is empty.\n\
    The function should return Inf if the vector is empty.\nThe function should return\
    \ Inf if the vector is empty.\nThe function should return Inf if the vector is\
    \ empty.\nThe function should return Inf if the vector is empty.\nThe function\
    \ should return Inf if the vector is empty.\nThe function should return Inf if\
    \ the vector is empty.\nThe function should return Inf if the vector is empty.\n\
    The function should return Inf if the vector is empty.\nThe function should return\
    \ Inf if the vector is empty.\nThe function should return Inf if the vector is\
    \ empty.\nThe function should return Inf if the vector is empty.\nThe function\
    \ should return Inf if the vector is empty.\nThe function should return Inf if\
    \ the vector is empty.\nThe function should return Inf if the vector is empty.\n\
    The function should return Inf if the vector is empty.\nThe function should return\
    \ Inf if the vector is empty.\nThe function should return Inf if the vector is\
    \ empty.\nThe function should return Inf if the vector is empty.\nThe function\
    \ should return Inf if the vector is empty.\nThe function should return Inf if\
    \ the vector is empty.\nThe function should return Inf if the vector is empty.\n\
    The function should return Inf if the vector is empty.\nThe function should return\
    \ Inf if the vector is empty.\nThe function should return Inf if the vector is\
    \ empty.\nThe function should return Inf if the vector is empty.\nThe function\
    \ should return Inf if the vector is empty.\nThe function should return Inf if\
    \ the vector is empty.\nThe function should return Inf if the vector is empty.\n\
    The function should return Inf if the vector is empty.\nThe function should return\
    \ Inf if the vector is empty.\nThe function should return Inf if the vector is\
    \ empty.\nThe function should return Inf if the vector is empty.\nThe function\
    \ should return Inf if the vector is empty.\nThe function should return Inf if\
    \ the vector is empty.\nThe function should return Inf if the vector is empty.\n\
    The function should return Inf if the vector is empty.\nThe function \nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj1y3ng22.jl:16\nin expression starting at\
    \ /tmp/tmpj1y3ng22.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_of_numbers = reduce(mul,\
    \ numbers, 1)\n    return (sum_product, product_of_numbers)\nend\n</cell>\n<code\
    \ language=julia-1.4>\nsum_product([1,2,3])\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the sum of the squares of all the integers in a given\
    \ list.\n    >>> sum_square_of_list([])\n    0.0\n    >>> sum_square_of_list([1,2,3])\n\
    \    9.0\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1qrpamil.jl:13\nin expression starting at\
    \ /tmp/tmp1qrpamil.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_product = 1\n    for number\
    \ in numbers\n        product_product *= number\n    end\n    return (sum_product,\
    \ product_product)\nend\n</cell>\n<code language=julia-1.3>\nsum_product([1, 2,\
    \ 3, 4])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum of\
    \ the squares of the integers in a given list.\n    >>> sum_square([1, 2, 3, 4])\n\
    \    25\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwqdxf22z.jl:16\nin expression starting at\
    \ /tmp/tmpwqdxf22z.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_of_numbers = reduce(mul,\
    \ numbers, 1)\n    return (sum_product, product_of_numbers)\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a list of integers and returns the sum\
    \ of the squares of the integers in the list.\nThe sum of the squares should be\
    \ equal to the sum of the integers squared.\nThe function should raise an error\
    \ if the list is empty.\n>>> square_sum([])\n0\n>>> square_sum([1, 2, 3, 4])\n\
    25\n>>> square_sum([1, 2, 3])\nTraceback (most recent call last):\n  File \"<stdin>\"\
    , line 1, in <module>\n  File \"<stdin>\", line 2, in square_sum\n  File \"<stdin>\"\
    , line 2, in sum\nTypeError: Non-boolean (Int64) argument to sum\n>>> square_sum([1,\
    \ 2, 3])\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n\
    \  File \"<stdin>\", line 2, in square_sum\n  File \"<stdin>\", line 2, in sum\n\
    TypeError: Non-boolean (Int64) argument to sum\n>>> square_sum([1, 2, 3, 4])\n\
    Traceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n\
    \  File \"<stdin>\", line 2, in square_sum\n  File \"<stdin>\", line 2, in sum\n\
    TypeError: Non-boolean (Int64) argument to sum\n>>> square_sum([])\n0\n>>> square_sum([1,\
    \ 2, 3, 4])\n25\n>>> square_sum([1, 2, 3])\nTraceback (most recent call last):\n\
    \  File \"<stdin>\", line 1, in <module>\n  File \"<stdin>\", line 2, in square_sum\n\
    \  File \"<stdin>\", line 2, in sum\nTypeError: Non-boolean (Int64) argument to\
    \ sum\n>>> square_sum([1, 2, 3])\nTraceback (most recent call last):\n  File \"\
    <stdin>\", line 1, in <module>\n  File \"<stdin>\", line 2, in square_sum\n  File\
    \ \"<stdin>\", line 2, in sum\nTypeError: Non-boolean (Int64) argument to sum\n\
    >>> square_sum([])\n0\n>>> square_sum([1, 2, 3, 4])\n25\n>>> square_sum([1, 2,\
    \ 3])\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n\
    \  File \"<stdin>\", line 2, in square_sum\n  File \"<stdin>\", line 2, in sum\n\
    TypeError: Non-boolean (Int64) argument to sum\n>>> square_sum([1, 2, 3])\nTraceback\
    \ (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"\
    <stdin>\", line 2, in square_sum\n  File \"<stdin>\", line 2, in sum\nTypeError:\
    \ Non-boolean (Int64) argument to sum\n>>> square_sum([])\n0\n>>> square_sum([1,\
    \ 2, 3, 4\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1fxraxmk.jl:13\nin expression starting at\
    \ /tmp/tmp1fxraxmk.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        return (0, 1) \n    else \n \
    \       sum_product = numbers[1] + numbers[2]\n        prod_product = numbers[1]\
    \ * numbers[2]\n        return (sum_product, prod_product)\n    end\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the sum of the first n positive\
    \ integers. \nThe function should take an argument n and return the sum of the\
    \ first n positive integers.\nIf the argument n is less than or equal to 0, the\
    \ function should return 0.\nIf the argument n is greater than or equal to 0,\
    \ the function should return the sum of the first n positive integers.\nIf the\
    \ argument n is equal to 0, the function should return 0.\nHint: Use a while loop\
    \ to solve this problem.\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpse60bn23.jl:17\nin expression starting at\
    \ /tmp/tmpse60bn23.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = product = 0\n    for n in numbers\n        sum += n\n   \
    \     product *= n\n    return (sum, product)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t\
    @test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\
    \t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6rd56fo2.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6rd56fo2.jl:1\n\
    in expression starting at /tmp/tmp6rd56fo2.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_product = 1\n    for number\
    \ in numbers\n        product_product *= number\n    end\n    return (sum_product,\
    \ product_product)\nend\n</cell>\n<code language=julia-1.4>\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpue2vy5v0.jl:16\nin expression starting at\
    \ /tmp/tmpue2vy5v0.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_of_numbers = reduce(mul,\
    \ numbers)\n    return (sum_product, product_of_numbers)\nend\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that returns the sum of the squares of the numbers\
    \ in a list.\n    >>> sum_square_of_numbers([1, 2, 3, 4])\n    25\n    >>> sum_square_of_numbers([-1,\
    \ -2, -3, -4])\n    25\n    >>> sum_square_of_numbers([])\n    0\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvpeknp8g.jl:13\nin expression starting at\
    \ /tmp/tmpvpeknp8g.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_ = 0\n    product_ = 1\n    for number in numbers\n       \
    \ sum_ = sum_ + number\n        product_ = product_ * number\n    end\n    return\
    \ (sum_, product_)\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector and returns a vector where each element is the sum of the vector except\
    \ for the first element. For example, if the input vector is [1,2,3,4,5], the\
    \ output vector should be [2,3,6,10,15].\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1,\
    \ 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4r_a6dvj.jl:17\nin expression starting at\
    \ /tmp/tmp4r_a6dvj.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_of_numbers = reduce(mul,\
    \ numbers)\n    return (sum_product, product_of_numbers)\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector and returns a new vector where\
    \ each element is the sum of the vector except for the first element. For example,\
    \ if the vector is [1,2,3], the function should return [2,3,4].\nusing Test\n\n\
    @testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphjifs59k.jl:13\nin expression starting at\
    \ /tmp/tmphjifs59k.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = numbers[1]\n    product_of_numbers = numbers[1]\n\
    \    for number in numbers[2:end]\n        sum_product = sum_product + number\n\
    \        product_of_numbers = product_of_numbers * number\n    end\n    return\
    \ (sum_product, product_of_numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1, 2, 3, 4])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the sum of the squares of the numbers in a given list.\n    >>> sum_square([1,\
    \ 2, 3, 4])\n    25\n    >>> sum_square([-1, -2, -3, -4])\n    25\n    >>> sum_square([-1,\
    \ -2, -3, -4, -5, -6, -7, -8, -9])\n    210\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp60lsrot4.jl:17\nin expression starting at\
    \ /tmp/tmp60lsrot4.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_of_numbers = reduce(mul,\
    \ numbers, 1)\n    return (sum_product, product_of_numbers)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the sum of the squares of the numbers in a given list.\n\
    \    >>> sum_of_squares([1,2,3])\n    25\n    >>> sum_of_squares([-4, -3, -2,\
    \ -1, 0, 1, 2, 3, 4])\n    25\n    >>> sum_of_squares([-4, -3, -2, -1, 0, 1, 2,\
    \ 3, 4])\n    25\n    >>> sum_of_squares([-4, -3, -2, -1, 0, 1, 2, 3, 4])\n  \
    \  25\n    >>> sum_of_squares([-4, -3, -2, -1, 0, 1, 2, 3, 4])\n    25\n    >>>\
    \ sum_of_squares([-4, -3, -2, -1, 0, 1, 2, 3, 4])\n    25\n    >>> sum_of_squares([-4,\
    \ -3, -2, -1, 0, 1, 2, 3, 4])\n    25\n    >>> sum_of_squares([-4, -3, -2, -1,\
    \ 0, 1, 2, 3, 4])\n    25\n    >>> sum_of_squares([-4, -3, -2, -1, 0, 1, 2, 3,\
    \ 4])\n    25\n    >>> sum_of_squares([-4, -3, -2, -1, 0, 1, 2, 3, 4])\n    25\n\
    \    >>> sum_of_squares([-4, -3, -2, -1, 0, 1, 2, 3, 4])\n    25\n    >>> sum_of_squares([-4,\
    \ -3, -2, -1, 0, 1, 2, 3, 4])\n    25\n    >>> sum_of_squares([-4, -3, -2, -1,\
    \ 0, 1, 2, 3, 4])\n    25\n    >>> sum_of_squares([-4, -3, -2, -1, 0, 1, 2, 3,\
    \ 4])\n    25\n    >>> sum_of_squares([-4, -3, -2, -1, 0, 1, 2, 3, 4])\n    25\n\
    \    >>> sum_of_squares([-4, -3, -2, -1, 0, 1, 2, 3, 4])\n    25\n    >>> sum_of_squares([-4,\
    \ -3, -2, -1, 0, 1, 2, 3, 4])\n    25\n    >>> sum_of_squares([-4, -3, -2, -1,\
    \ 0, 1, 2, 3, 4])\n    25\n    >>> sum_of_squares([-4, -3, -2, -1, 0, 1, 2, 3,\
    \ 4])\n    25\n    >>> sum_of_squares([-4, -3, -2, -1, 0, 1, 2, 3, 4])\n    25\n\
    \    >>> sum_of_squares([-4, -3, -2, -1, 0, 1, 2, 3, 4])\n    25\n    >>> sum_of_squares([-4,\
    \ -3, -2, -1, 0, 1, 2, 3, 4])\n    25\n    >>> sum_of_squares([-4, -3, -2, -1,\
    \ 0, 1, 2, 3, 4])\n    25\n    >>> sum_of_squares([-4, -3, -2, -1, 0, 1, 2, 3,\
    \ 4])\n    25\n    >>> sum_of_squares([-4, -3, -2, -1, 0, 1, 2, 3, 4])\n    \n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptjgq1y0m.jl:13\nin expression starting at\
    \ /tmp/tmptjgq1y0m.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_product = 1\n    for i\
    \ in numbers\n        product_product = product_product * i\n    end\n    return\
    \ (sum_product, product_product)\nend\n</cell>\n<code language=julia-1.3>\n@assert\
    \ sum_product([1, 2, 3, 4]) == (10, 24)\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that returns the product of all the integers in a list.\n    >>> product_product([])\n\
    \    1\n    >>> product_product([1, 2, 3, 4])\n    24\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp540r90gy.jl:16\nin expression starting at\
    \ /tmp/tmp540r90gy.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for n in numbers\n        sum +=\
    \ n\n        product *= n\n    return (sum, product)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmptt4nt1tx.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptt4nt1tx.jl:1\n\
    in expression starting at /tmp/tmptt4nt1tx.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        return (0, 1) \n    else \n \
    \       sum_ = numbers[1] + numbers[2] \n        prod_ = 1\n        for i in numbers[2:end]\
    \ \n            prod_ *= i \n        end\n        return (sum_, prod_)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert sum_product([1, 2, 3, 4]) ==\
    \ (10, 24)\n@assert sum_product([-1, -2, -3]) == (0, 0)\n@assert sum_product([-4,\
    \ -5, -6]) == (1, -6)\n@assert sum_product([-7, -8, -9]) == (-7, -36)\n@assert\
    \ sum_product([-10, -11, -12]) == (-36, -144)\n@assert sum_product([-13, -14,\
    \ -15]) == (-144, -252)\n@assert sum_product([-16, -17, -18]) == (-252, -344)\n\
    @assert sum_product([-19, 20, 21]) == (-344, -448)\n@assert sum_product([-20,\
    \ -21, -22]) == (-448, -528)\n@assert sum_product([-23, -24, -25]) == (-528, -624)\n\
    @assert sum_product([-26, -27, -28]) == (-624, -704)\n@assert sum_product([-29,\
    \ -30, -31]) == (-704, -800)\n@assert sum_product([-32, -33, 34]) == (-800, -800)\n\
    @assert sum_product([-34, 35, -36]) == (-800, -800)\n@assert sum_product([-37,\
    \ -38, -39]) == (-800, -800)\n@assert sum_product([-40, -41, -42]) == (-800, -800)\n\
    @assert sum_product([-43, -44, -45]) == (-800, -800)\n@assert sum_product([-46,\
    \ -47, -48]) == (-800, -800)\n@assert sum_product([-49, -50, -51]) == (-800, -800)\n\
    @assert sum_product([-52, -53, -54]) == (-800, -800)\n@assert sum_product([-55,\
    \ -56, -57]) == (-800, -800)\n@assert sum_product([-58, -59, -60]) == (-800, -800)\n\
    @assert sum_product([-61, -62, -63]) == (-800, -800)\n@assert sum_product([-64,\
    \ -65, -66]) == (-800, -800)\n@assert sum_product([-67, -68, -69]) == (-800, -800)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvz7wrde1.jl:20\nin expression starting at\
    \ /tmp/tmpvz7wrde1.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = Int64(0)\n    product_of_numbers = Int64(1)\n   \
    \ for number in numbers\n        sum_product += number\n        product_of_numbers\
    \ *= number\n    return (sum_product, product_of_numbers)\nend\n</cell>\n<code\
    \ language=julia-1.4>\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2])\
    \ == (3, 2)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplkmni86h.jl:16\nin expression starting at\
    \ /tmp/tmplkmni86h.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum .(numbers)\n    product_product = 1\n    for\
    \ i in numbers\n        product_product *= i\n    end\n    return (sum_product,\
    \ product_product)\nend\n</cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_product\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \".\" not allowed in \"sum .\" at\
    \ /tmp/tmp3n31ticp.jl:9\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3n31ticp.jl:9\n\
    in expression starting at /tmp/tmp3n31ticp.jl:9\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = Int64(0)\n    product_of_numbers = Int64(1)\n   \
    \ for number in numbers\n        sum_product = sum_product + number\n        product_of_numbers\
    \ = product_of_numbers * number\n    end\n    return (sum_product, product_of_numbers)\n\
    end\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the sum of the squares of the integers\
    \ in a given list.\n    >>> sum_square_of_numbers([1, 2, 3, 4])\n    25\n    >>>\
    \ sum_square_of_numbers([-1, -2, -3, -4])\n    25\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4rpk_ndi.jl:17\nin expression starting at\
    \ /tmp/tmp4rpk_ndi.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = Int64(0)\n    product = Int64(1)\n    for n in numbers\n\
    \        sum += n\n        product *= n\n    return (sum, product)\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1tkxs1gb.jl:16\nin expression starting at\
    \ /tmp/tmp1tkxs1gb.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        return (0, 1) \n    else \n \
    \       sum_product = numbers[1] + numbers[2] \n        return (sum_product, sum_product\
    \ * numbers[1]) \nend\n</cell>\n<text>\nExercise 4\nWrite a function that takes\
    \ a vector of integers and returns a vector of integers containing the first 3\
    \ integers of the original vector. \nThe function should return the following\
    \ vector:\n[1,2,3]\nHint: Use a for loop to iterate over the vector and append\
    \ the elements to a list.\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdkdhbnvq.jl:15\nin expression starting at\
    \ /tmp/tmpdkdhbnvq.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_ = 0\n    product_ = 1\n    for number in numbers\n       \
    \ sum_ = sum_ + number\n        product_ = product_ * number\n    end\n    return\
    \ (sum_, product_)\nend\n</cell>\n<code language=julia-1.5>\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmz1i8zz0.jl:17\nin expression starting at\
    \ /tmp/tmpmz1i8zz0.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        return (0, 1) \n    else \n \
    \       sum_ = numbers[1] + numbers[2] + numbers[3] + numbers[4] + numbers[5]\
    \ + numbers[6] + numbers[7] + numbers[8] + numbers[9] + numbers[10] + numbers[11]\
    \ + numbers[12] + numbers[13] + numbers[14] + numbers[15] + numbers[16] + numbers[17]\
    \ + numbers[18] + numbers[19] + numbers[20] + numbers[21] + numbers[22] + numbers[23]\
    \ + numbers[24] + numbers[25] + numbers[26] + numbers[27] + numbers[28] + numbers[29]\
    \ + numbers[30] + numbers[31] + numbers[32] + numbers[33] + numbers[34] + numbers[35]\
    \ + numbers[36] + numbers[37] + numbers[38] + numbers[39] + numbers[40] + numbers[41]\
    \ + numbers[42] + numbers[43] + numbers[44] + numbers[45] + numbers[46] + numbers[47]\
    \ + numbers[48] + numbers[49] + numbers[50] + numbers[51] + numbers[52] + numbers[53]\
    \ + numbers[54] + numbers[55] + numbers[56] + numbers[57] + numbers[58] + numbers[59]\
    \ + numbers[60] + numbers[61] + numbers[62] + numbers[63] + numbers[64] + numbers[65]\
    \ + numbers[66] + numbers[67] + numbers[68] + numbers[69] + numbers[70] + numbers[71]\
    \ + numbers[72] + numbers[73] + numbers[74] + numbers[75] + numbers[76] + numbers[77]\
    \ + numbers[78] + numbers[79] + numbers[80] + numbers[81] + numbers[82] + numbers[83]\
    \ + numbers[84] + numbers[85] + numbers[86] + numbers[87] + numbers[88] + numbers[89]\
    \ + numbers[90] + numbers[91] + numbers[92] + numbers[93] + numbers[94] + numbers[95]\
    \ + numbers[96] + numbers[97] + numbers[98] + numbers[99] + numbers[100] + numbers[101]\
    \ + numbers[102] + numbers[103] + numbers[104] + numbers[105] + numbers[106] +\
    \ numbers[107] + numbers[108] + numbers[109] + numbers[110] + numbers[111] + numbers[112]\
    \ + numbers[113] + numbers[114] + numbers[115] + numbers[116] + numbers[117] +\
    \ numbers[118] + numbers[\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoqbkkwoz.jl:1\nin expression starting at /tmp/tmpoqbkkwoz.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_of_numbers = reduce(mul,\
    \ numbers, 1)\n    return (sum_product, product_of_numbers)\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the sum and product of a given list of integers,\
    \ where the product is defined as the product of all the integers in the list.\n\
    The function should work for lists of any length.\nThe function should work for\
    \ lists of integers and floats.\nThe function should work for lists of integers\
    \ and floats where the product is defined as the product of all the integers in\
    \ the list.\nThe function should work for lists of integers and floats where the\
    \ product is defined as the product of all the integers in the list.\nThe function\
    \ should work for lists of integers and floats where the product is defined as\
    \ the product of all the integers in the list.\nThe function should work for lists\
    \ of integers and floats where the product is defined as the product of all the\
    \ integers in the list.\nThe function should work for lists of integers and floats\
    \ where the product is defined as the product of all the integers in the list.\n\
    The function should work for lists of integers and floats where the product is\
    \ defined as the product of all the integers in the list.\nThe function should\
    \ work for lists of integers and floats where the product is defined as the product\
    \ of all the integers in the list.\nThe function should work for lists of integers\
    \ and floats where the product is defined as the product of all the integers in\
    \ the list.\nThe function should work for lists of integers and floats where the\
    \ product is defined as the product of all the integers in the list.\nThe function\
    \ should work for lists of integers and floats where the product is defined as\
    \ the product of all the integers in the list.\nThe function should work for lists\
    \ of integers and floats where the product is defined as the product of all the\
    \ integers in the list.\nThe function should work for lists of integers and floats\
    \ where the product is defined as the product of all the integers in the list.\n\
    The function should work for lists of integers and floats where the product is\
    \ defined as the product of all the integers in the list.\nThe function should\
    \ work for lists of integers and floats where the product is defined as the product\
    \ of all the integers in the list.\nThe function should work for lists of integers\
    \ and floats where the product is defined as the product of all the integers in\
    \ the list.\nThe function should work for lists of integers and floats where the\
    \ product is defined as the product of all the integers in the list.\nThe function\
    \ should work for lists of integers and floats where the product is defined as\
    \ the product of all the integers in the list.\nThe function \nusing Test\n\n\
    @testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1z7z2ael.jl:13\nin expression starting at\
    \ /tmp/tmp1z7z2ael.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = numbers[1]\n    product = 1\n    for i in numbers[2:end]\n\
    \        sum_product = sum_product + i\n        product = product * i\n    return\
    \ (sum_product, product)\nend\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3,4,5])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ and returns the sum of the squares of the integers in the vector.\nThe sum of\
    \ the squares should be equal to the sum of the integers squared.\nThe function\
    \ should work for vectors of any length.\nThe function should work for vectors\
    \ of any type of numbers.\nThe function should work for vectors of any type of\
    \ numbers.\nThe function should work for vectors of any type of numbers.\nThe\
    \ function should work for vectors of any type of numbers.\nThe function should\
    \ work for vectors of any type of numbers.\nThe function should work for vectors\
    \ of any type of numbers.\nThe function should work for vectors of any type of\
    \ numbers.\nThe function should work for vectors of any type of numbers.\nThe\
    \ function should work for vectors of any type of numbers.\nThe function should\
    \ work for vectors of any type of numbers.\nThe function should work for vectors\
    \ of any type of numbers.\nThe function should work for vectors of any type of\
    \ numbers.\nThe function should work for vectors of any type of numbers.\nThe\
    \ function should work for vectors of any type of numbers.\nThe function should\
    \ work for vectors of any type of numbers.\nThe function should work for vectors\
    \ of any type of numbers.\nThe function should work for vectors of any type of\
    \ numbers.\nThe function should work for vectors of any type of numbers.\nThe\
    \ function should work for vectors of any type of numbers.\nThe function should\
    \ work for vectors of any type of numbers.\nThe function should work for vectors\
    \ of any type of numbers.\nThe function should work for vectors of any type of\
    \ numbers.\nThe function should work for vectors of any type of numbers.\nThe\
    \ function should work for vectors of any type of numbers.\nThe function should\
    \ work for vectors of any type of numbers.\nThe function should work for vectors\
    \ of any type of numbers.\nThe function should work for vectors of any type of\
    \ numbers.\nThe function should work for vectors of any type of numbers.\nThe\
    \ function should work for vectors of any type of numbers.\nThe function should\
    \ work for vectors of any type of numbers.\nThe function should work for vectors\
    \ of any type of numbers.\nThe function should work for vectors of any type of\
    \ numbers.\nThe function should work for vectors of any type of numbers.\nThe\
    \ function should work for vectors of any type of numbers.\nThe function should\
    \ work for vectors of any type of numbers.\nThe function should work for vectors\
    \ of any type of numbers.\nThe function should work for vectors of any type of\
    \ numbers.\nThe function should work for vectors of any type of numbers.\nThe\
    \ function should work for vectors of any type of numbers.\nThe function should\
    \ work for vectors of any type of numbers.\nThe function should work for vector\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo5f1kg6j.jl:16\nin expression starting at\
    \ /tmp/tmpo5f1kg6j.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_product = 1\n    for i\
    \ in numbers\n        product_product *= i\n    return (sum_product, product_product)\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a list of integers\
    \ and returns the sum of the squares of the integers in the list.\nThe function\
    \ should raise an error if the list is empty.\nThe function should raise an error\
    \ if the list contains non-integer elements.\nThe function should raise an error\
    \ if the list contains negative numbers.\nThe function should raise an error if\
    \ the list contains duplicate elements.\nThe function should raise an error if\
    \ the list contains negative numbers.\nThe function should raise an error if the\
    \ list contains non-positive numbers.\nThe function should raise an error if the\
    \ list contains non-integer elements.\nThe function should raise an error if the\
    \ list contains negative numbers.\nThe function should raise an error if the list\
    \ contains non-positive numbers.\nThe function should raise an error if the list\
    \ contains non-integer elements.\nThe function should raise an error if the list\
    \ contains negative numbers.\nThe function should raise an error if the list contains\
    \ non-positive numbers.\nThe function should raise an error if the list contains\
    \ non-integer elements.\nThe function should raise an error if the list contains\
    \ negative numbers.\nThe function should raise an error if the list contains non-positive\
    \ numbers.\nThe function should raise an error if the list contains non-integer\
    \ elements.\nThe function should raise an error if the list contains negative\
    \ numbers.\nThe function should raise an error if the list contains non-positive\
    \ numbers.\nThe function should raise an error if the list contains non-integer\
    \ elements.\nThe function should raise an error if the list contains negative\
    \ numbers.\nThe function should raise an error if the list contains non-positive\
    \ numbers.\nThe function should raise an error if the list contains non-integer\
    \ elements.\nThe function should raise an error if the list contains negative\
    \ numbers.\nThe function should raise an error if the list contains non-positive\
    \ numbers.\nThe function should raise an error if the list contains non-integer\
    \ elements.\nThe function should raise an error if the list contains negative\
    \ numbers.\nThe function should raise an error if the list contains non-positive\
    \ numbers.\nThe function should raise an error if the list contains non-integer\
    \ elements.\nThe function should raise an error if the list contains negative\
    \ numbers.\nThe function should raise an error if the list contains non-positive\
    \ numbers.\nThe function should raise an error if the list contains non-integer\
    \ elements.\nThe function should raise an error if the list contains negative\
    \ numbers.\nThe function should raise an error if the list contains non-positive\
    \ numbers.\nThe function should raise an error if the list contains non-integer\
    \ elements.\nThe function should raise an error if the list contains negative\
    \ numbers.\nThe function should raise an error if the list contains non-positive\
    \ numbers.\nThe function should raise an error if the list contains non-integer\
    \ elements.\nThe function should raise an error if the list contains negative\
    \ numbers.\nThe function should raise an error if the list contains non-positive\
    \ numbers.\nThe function should \nusing Test\n\n@testset begin\n\ncandidate =\
    \ sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1,\
    \ 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp307whv8y.jl:15\nin expression starting at\
    \ /tmp/tmp307whv8y.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_product = 1\n    for i\
    \ in numbers\n        product_product *= i\n    return (sum_product, product_product)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdl0mk_si.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdl0mk_si.jl:1\n\
    in expression starting at /tmp/tmpdl0mk_si.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        return (0, 1) \n    else \n \
    \       sum = numbers[1]\n        product = 1\n        for i in 2:length(numbers)\
    \ \n            sum = sum + numbers[i] \n            product = product * numbers[i]\
    \ \n        end\n        return (sum, product)\n    end\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of integers and returns the sum\
    \ of the integers squared. \nThe function should raise an error if the vector\
    \ is empty.\n>>> square_sum([])\n0\n>>> square_sum([1, 2, 3, 4])\n25\n>>> square_sum([1,\
    \ 2, 3, 4, 5])\n25\n>>> square_sum([1, 2, 3, 4, 5])\n25\n>>> square_sum([1, 2,\
    \ 3, 4, 5])\n25\n>>> square_sum([1, 2, 3, 4, 5])\n25\n>>> square_sum([1, 2, 3,\
    \ 4, 5])\n25\n>>> square_sum([1, 2, 3, 4, 5])\n25\n>>> square_sum([1, 2, 3, 4,\
    \ 5])\n25\n>>> square_sum([1, 2, 3, 4, 5])\n25\n>>> square_sum([1, 2, 3, 4, 5])\n\
    25\n>>> square_sum([1, 2, 3, 4, 5])\n25\n>>> square_sum([1, 2, 3, 4, 5])\n25\n\
    >>> square_sum([1, 2, 3, 4, 5])\n25\n>>> square_sum([1, 2, 3, 4, 5])\n25\n>>>\
    \ square_sum([1, 2, 3, 4, 5])\n25\n>>> square_sum([1, 2, 3, 4, 5])\n25\n>>> square_sum([1,\
    \ 2, 3, 4, 5])\n25\n>>> square_sum([1, 2, 3, 4, 5])\n25\n>>> square_sum([1, 2,\
    \ 3, 4, 5])\n25\n>>> square_sum([1, 2, 3, 4, 5])\n25\n>>> square_sum([1, 2, 3,\
    \ 4, 5])\n25\n>>> square_sum([1, 2, 3, 4, 5])\n25\n>>> square_sum([1, 2, 3, 4,\
    \ 5])\n25\n>>> square_sum([1, 2, 3, 4, 5])\n25\n>>> square_sum([1, 2, 3, 4, 5])\n\
    25\n>>> square_sum([1, 2, 3, 4, 5])\n25\n>>> square_sum([1, 2, 3, 4, 5])\n25\n\
    >>> square_sum([1, 2, 3, 4, 5])\n25\n>>> square_sum([1, 2, 3, 4, 5])\n25\n>>>\
    \ square_sum([1, 2, 3, 4, 5])\n25\n>>> square_sum([1, 2, 3, 4, 5])\n25\n>>> square_sum([1,\
    \ 2, 3, 4, 5])\n25\n>>> square_sum([1, 2, 3, 4, 5])\n25\n>>> square_sum([1, 2,\
    \ 3, 4, 5])\n25\n>>> square_sum([1, 2, 3, 4, 5])\n25\n>>> square_sum([1, 2, 3,\
    \ 4, 5])\n25\n>>> square_sum([1, 2, 3, 4, 5])\n25\n>>> square_sum([1, 2, 3, 4,\
    \ 5])\n25\n>>> square_sum([1, 2, 3, 4, 5])\n25\n>>> square_sum([1, 2, 3, 4, 5])\n\
    25\n>>> square_sum([1, 2, 3, 4, 5])\n25\n>>> square_\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t\
    @test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\
    \t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvc7j5wva.jl:21\nin expression starting at\
    \ /tmp/tmpvc7j5wva.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_of_numbers = prod(numbers)\n\
    \    return (sum_product, product_of_numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7o3t_8c8.jl:13\nin expression starting at\
    \ /tmp/tmp7o3t_8c8.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_product = 1\n    for i\
    \ in numbers\n        product_product *= i\n    end\n    return (sum_product,\
    \ product_product)\nend\n</cell>\n<code language=julia-1.5>\nsum_product([1, 2,\
    \ 3, 4])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a list of integers\
    \ and returns the sum of the squares of the integers in the list.\nThe squares\
    \ should be calculated using the formula $x^2 = y^2 + z^2$, where $x, y, z$ are\
    \ integers in the list.\nThe function should return nothing if the list is empty.\n\
    The function should raise an error if the list contains non-integer values.\n\
    The function should raise an error if the list contains negative values.\nThe\
    \ function should raise an error if the list contains duplicate values.\nThe function\
    \ should raise an error if the list contains negative values.\nThe function should\
    \ raise an error if the list contains duplicate values.\nThe function should raise\
    \ an error if the list contains duplicate values.\nThe function should raise an\
    \ error if the list contains duplicate values.\nThe function should raise an error\
    \ if the list contains duplicate values.\nThe function should raise an error if\
    \ the list contains duplicate values.\nThe function should raise an error if the\
    \ list contains duplicate values.\nThe function should raise an error if the list\
    \ contains duplicate values.\nThe function should raise an error if the list contains\
    \ duplicate values.\nThe function should raise an error if the list contains duplicate\
    \ values.\nThe function should raise an error if the list contains duplicate values.\n\
    The function should raise an error if the list contains duplicate values.\nThe\
    \ function should raise an error if the list contains duplicate values.\nThe function\
    \ should raise an error if the list contains duplicate values.\nThe function should\
    \ raise an error if the list contains duplicate values.\nThe function should raise\
    \ an error if the list contains duplicate values.\nThe function should raise an\
    \ error if the list contains duplicate values.\nThe function should raise an error\
    \ if the list contains duplicate values.\nThe function should raise an error if\
    \ the list contains duplicate values.\nThe function should raise an error if the\
    \ list contains duplicate values.\nThe function should raise an error if the list\
    \ contains duplicate values.\nThe function should raise an error if the list contains\
    \ duplicate values.\nThe function should raise an error if the list contains duplicate\
    \ values.\nThe function should raise an error if the list contains duplicate values.\n\
    The function should raise an error if the list contains duplicate values.\nThe\
    \ function should raise an error if the list contains duplicate values.\nThe function\
    \ should raise an error if the list contains duplicate values.\nThe function should\
    \ raise an error if the list contains duplicate values.\nThe function should raise\
    \ an error if the list contains duplicate values.\nThe function should raise an\
    \ error if the list contains duplicate values.\nThe function should raise an error\
    \ if the list contains duplicate values.\nThe function should raise an error if\
    \ the list contains duplicate values.\nThe function should raise an error if the\
    \ list contains duplicate values.\nThe function should raise \nusing Test\n\n\
    @testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi0rajjvp.jl:16\nin expression starting at\
    \ /tmp/tmpi0rajjvp.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_of_numbers = reduce(mul,\
    \ numbers, 1)\n    return (sum_product, product_of_numbers)\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the sum of the squares of the numbers\
    \ in a list.\n    >>> sum_square_of_numbers([1, 2, 3, 4])\n    25\n    >>> sum_square_of_numbers([-1,\
    \ -2, -3, -4])\n    25\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1,\
    \ 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc407wzj5.jl:13\nin expression starting at\
    \ /tmp/tmpc407wzj5.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = product = 1\n    for n in numbers\n        sum += n\n   \
    \     product *= n\n    return (sum, product)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1, 2, 3, 4])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the sum of the squares of the integers in a given list.\n    >>> sum_square([1,\
    \ 2, 3, 4])\n    25\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu1zfj6fl.jl:15\nin expression starting at\
    \ /tmp/tmpu1zfj6fl.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        return (0, 1) \n    else \n \
    \       sum_product = numbers[1] + numbers[2] \n        return (sum_product, numbers[1]\
    \ * numbers[2]) \nend\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the sum of the squares of the integers in a list.\n    >>> sum_square_of_list([])\n\
    \    0.0\n    >>> sum_square_of_list([4, 9, 16])\n    49.0\n    >>> sum_square_of_list([-1,\
    \ 2, -3, 4])\n    0.0\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1,\
    \ 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpap1l3cx2.jl:15\nin expression starting at\
    \ /tmp/tmpap1l3cx2.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        return (0, 1) \n    else \n \
    \       sum = numbers[1]\n        product = 1\n        for i in 2:length(numbers)\
    \ \n            sum = sum + numbers[i] \n            product = product * i \n\
    \        end\n        return (sum, product) \n    end\nend\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that takes a list of numbers and returns the sum\
    \ of the numbers, and the product of the numbers. \nThe function should return\
    \ two values, the sum and the product.\nThe function should raise an error if\
    \ the list is empty.\nThe function should raise an error if the list contains\
    \ non-numeric values.\nThe function should raise an error if the list contains\
    \ negative values.\nThe function should raise an error if the list contains values\
    \ greater than the maximum value of the corresponding type.\nThe function should\
    \ raise an error if the list contains values less than the minimum value of the\
    \ corresponding type.\nThe function should raise an error if the list contains\
    \ values greater than the maximum value of the corresponding type.\nThe function\
    \ should raise an error if the list contains values less than the minimum value\
    \ of the corresponding type.\nThe function should raise an error if the list contains\
    \ values greater than the maximum value of the corresponding type.\nThe function\
    \ should raise an error if the list contains values less than the minimum value\
    \ of the corresponding type.\nThe function should raise an error if the list contains\
    \ values greater than the maximum value of the corresponding type.\nThe function\
    \ should raise an error if the list contains values less than the minimum value\
    \ of the corresponding type.\nThe function should raise an error if the list contains\
    \ values greater than the maximum value of the corresponding type.\nThe function\
    \ should raise an error if the list contains values less than the minimum value\
    \ of the corresponding type.\nThe function should raise an error if the list contains\
    \ values greater than the maximum value of the corresponding type.\nThe function\
    \ should raise an error if the list contains values less than the minimum value\
    \ of the corresponding type.\nThe function should raise an error if the list contains\
    \ values greater than the maximum value of the corresponding type.\nThe function\
    \ should raise an error if the list contains values less than the minimum value\
    \ of the corresponding type.\nThe function should raise an error if the list contains\
    \ values greater than the maximum value of the corresponding type.\nThe function\
    \ should raise an error if the list contains values less than the minimum value\
    \ of the corresponding type.\nThe function should raise an error if the list contains\
    \ values greater than the maximum value of the corresponding type.\nThe function\
    \ should raise an error if the list contains values less than the minimum value\
    \ of the corresponding type.\nThe function should raise an error if the list contains\
    \ values greater than the maximum value of the corresponding type.\nThe function\
    \ should raise an error if the list contains values less than the minimum value\
    \ of the corresponding type.\nThe function should raise an error if the list contains\
    \ values greater than the maximum value of the corresponding type.\nThe function\
    \ should raise an error if the list contains values less than the minimum value\
    \ of the corresponding type.\nThe function should raise an error if the list contains\
    \ values greater than the maximum value of the corresponding type.\nThe function\
    \ should raise an error if the list contains values less than the minimum value\
    \ of the corresponding type.\nThe function should \nusing Test\n\n@testset begin\n\
    \ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t\
    @test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\
    \t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk7q8l9w1.jl:21\nin expression starting at\
    \ /tmp/tmpk7q8l9w1.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for n in numbers\n        sum +=\
    \ n\n        product *= n\n    return (sum, product)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1, 2, 3, 4])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a list of integers and returns the sum of the squares of the integers\
    \ in the list.\nThe squares should be added up and returned as a single integer.\n\
    The function should work for an empty list.\n>>> square_sum([])\n0\n>>> square_sum([1,\
    \ 2, 3, 4])\n25\n>>> square_sum([1, 2, 3])\n6\n>>> square_sum([1, 2, 3, 0])\n\
    25\n>>> square_sum([-1, -2, -3, 0])\n0\n>>> square_sum([-1, -2, -3, 0])\n0\n>>>\
    \ square_sum([-1, -2, -3, 0])\n0\n>>> square_sum([-1, -2, -3, 0])\n0\n>>> square_sum([-1,\
    \ -2, -3, 0])\n0\n>>> square_sum([-1, -2, -3, 0])\n0\n>>> square_sum([-1, -2,\
    \ -3, 0])\n0\n>>> square_sum([-1, -2, -3, 0])\n0\n>>> square_sum([-1, -2, -3,\
    \ 0])\n0\n>>> square_sum([-1, -2, -3, 0])\n0\n>>> square_sum([-1, -2, -3, 0])\n\
    0\n>>> square_sum([-1, -2, -3, 0])\n0\n>>> square_sum([-1, -2, -3, 0])\n0\n>>>\
    \ square_sum([-1, -2, -3, 0])\n0\n>>> square_sum([-1, -2, -3, 0])\n0\n>>> square_sum([-1,\
    \ -2, -3, 0])\n0\n>>> square_sum([-1, -2, -3, 0])\n0\n>>> square_sum([-1, -2,\
    \ -3, 0])\n0\n>>> square_sum([-1, -2, -3, 0])\n0\n>>> square_sum([-1, -2, -3,\
    \ 0])\n0\n>>> square_sum([-1, -2, -3, 0])\n0\n>>> square_sum([-1, -2, -3, 0])\n\
    0\n>>> square_sum([-1, -2, -3, 0])\n0\n>>> square_sum([-1, -2, -3, 0])\n0\n>>>\
    \ square_sum([-1, -2, -3, 0])\n0\n>>> square_sum([-1, -2, -3, 0])\n0\n>>> square_sum([-1,\
    \ -2, -3, 0])\n0\n>>> square_sum([-1, -2, -3, 0])\n0\n>>> square_sum([-1, -2,\
    \ -3, 0])\n0\n>>> square_sum([-1, -2, -3, 0])\n0\n>>> square_sum([-1, -2, -3,\
    \ 0])\n0\n>>> square_sum([-1, -2, -3, 0])\n0\n>>> square_sum([-1, -2, -3, 0])\n\
    0\n>>> square_sum([-1, -2, -3, 0])\n0\n>>> square_sum([-1, -2, -3, 0])\n0\n>>>\
    \ \nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8cpo3u44.jl:16\nin expression starting at\
    \ /tmp/tmp8cpo3u44.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        return (0, 1) \n    else \n \
    \       sum_ = numbers[1] + numbers[2] + numbers[3] + numbers[4] + numbers[5]\
    \ + numbers[6] + numbers[7] + numbers[8] + numbers[9] + numbers[10] + numbers[11]\
    \ + numbers[12] + numbers[13] + numbers[14] + numbers[15] + numbers[16] + numbers[17]\
    \ + numbers[18] + numbers[19] + numbers[20] + numbers[21] + numbers[22] + numbers[23]\
    \ + numbers[24] + numbers[25] + numbers[26] + numbers[27] + numbers[28] + numbers[29]\
    \ + numbers[30] + numbers[31] + numbers[32] + numbers[33] + numbers[34] + numbers[35]\
    \ + numbers[36] + numbers[37] + numbers[38] + numbers[39] + numbers[40] + numbers[41]\
    \ + numbers[42] + numbers[43] + numbers[44] + numbers[45] + numbers[46] + numbers[47]\
    \ + numbers[48] + numbers[49] + numbers[50] + numbers[51] + numbers[52] + numbers[53]\
    \ + numbers[54] + numbers[55] + numbers[56] + numbers[57] + numbers[58] + numbers[59]\
    \ + numbers[60] + numbers[61] + numbers[62] + numbers[63] + numbers[64] + numbers[65]\
    \ + numbers[66] + numbers[67] + numbers[68] + numbers[69] + numbers[70] + numbers[71]\
    \ + numbers[72] + numbers[73] + numbers[74] + numbers[75] + numbers[76] + numbers[77]\
    \ + numbers[78] + numbers[79] + numbers[80] + numbers[81] + numbers[82] + numbers[83]\
    \ + numbers[84] + numbers[85] + numbers[86] + numbers[87] + numbers[88] + numbers[89]\
    \ + numbers[90] + numbers[91] + numbers[92] + numbers[93] + numbers[94] + numbers[95]\
    \ + numbers[96] + numbers[97] + numbers[98] + numbers[99] + numbers[100] + numbers[101]\
    \ + numbers[102] + numbers[103] + numbers[104] + numbers[105] + numbers[106] +\
    \ numbers[107] + numbers[108] + numbers[109] + numbers[110] + numbers[111] + numbers[112]\
    \ + numbers[113] + numbers[114] + numbers[115] + numbers[116] + numbers[117] +\
    \ numbers[118] + numbers[\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcm2w0ymg.jl:1\nin expression starting at /tmp/tmpcm2w0ymg.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_product = 1\n    for n\
    \ in numbers\n        product_product *= n\n    return (sum_product, product_product)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpukci1_sd.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpukci1_sd.jl:1\n\
    in expression starting at /tmp/tmpukci1_sd.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        return (0, 1) \n    else \n \
    \       sum_ = sum(numbers) \n        product_ = 1\n        for n in numbers \n\
    \            product_ *= n \n        return (sum_, product_) \n    end\nend\n\
    </cell>\n<code language=julia-1.4>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.4>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.4>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.4>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.4>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.4>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.4>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.4>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.4>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.4>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.4>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.4>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.4>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.4>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.4>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.4>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.4>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.4>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.4>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.4>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.4>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.4>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.4>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.4>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.4>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.4>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.4>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.4>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.4>\n\
    sum_product([1,2,3])\n</cell>\n<code language=\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t\
    @test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\
    \t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbaztrho6.jl:19\nin expression starting at\
    \ /tmp/tmpbaztrho6.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_of_numbers = reduce(mul,\
    \ numbers, 1)\n    return (sum_product, product_of_numbers)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a vector of integers and returns the sum of the squares\
    \ of the integers in the vector.\n>>> sum_square_of_vector([1, 2, 3])\n25\n>>>\
    \ sum_square_of_vector([-1, -2, -3])\n0\n>>> sum_square_of_vector([4, -2, -6,\
    \ 0])\n0\n>>> sum_square_of_vector([4, -2, -6, 0, 0])\n0\n>>> sum_square_of_vector([4,\
    \ -2, -6, 0, 0, 0])\n0\n>>> sum_square_of_vector([4, -2, -6, 0, 0, 0, 0])\n0\n\
    >>> sum_square_of_vector([4, -2, -6, 0, 0, 0, 0, 0])\n0\n>>> sum_square_of_vector([4,\
    \ -2, -6, 0, 0, 0, 0, 0, 0])\n0\n>>> sum_square_of_vector([4, -2, -6, 0, 0, 0,\
    \ 0, 0, 0, 0])\n0\n>>> sum_square_of_vector([4, -2, -6, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0])\n0\n>>> sum_square_of_vector([4, -2, -6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n\
    0\n>>> sum_square_of_vector([4, -2, -6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n0\n\
    >>> sum_square_of_vector([4, -2, -6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n0\n\
    >>> sum_square_of_vector([4, -2, -6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n\
    0\n>>> sum_square_of_vector([4, -2, -6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0])\n0\n>>> sum_square_of_vector([4, -2, -6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0])\n0\n>>> sum_square_of_vector([4, -2, -6, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0])\n0\n>>> sum_square_of_vector([4, -2, -6, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n0\n>>> sum_square_of_vector([4, -2,\
    \ -6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n0\n>>> sum_square_of_vector([4,\
    \ -2, -6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n0\n>>> sum_square_of_vector([4,\
    \ -2, -6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n0\n>>>\
    \ sum_square_of_vector([4, -2, -6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0])\n0\n>>> sum_square_of_vector([4, -2, -6, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n0\n>>> sum_square_of_vector([4,\
    \ -2, -6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n\
    0\n>>> sum_square_of_vector([4, -2, -6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n0\n>>> sum_square_of_vector([4, -2, -6, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n0\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkx99t2os.jl:13\nin expression starting at\
    \ /tmp/tmpkx99t2os.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum .(numbers)\n    product_of_numbers = product\
    \ .(numbers)\n    return sum_product, product_of_numbers\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_product([1, 2, 3, 4])\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a vector of integers and returns the sum of the squares\
    \ of the integers in the vector.\nThe function should work for vectors of any\
    \ length.\nThe function should work for vectors of any element type.\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \".\" not allowed in \"sum .\" at\
    \ /tmp/tmpnkuxk8lz.jl:9\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpnkuxk8lz.jl:9\n\
    in expression starting at /tmp/tmpnkuxk8lz.jl:9\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_of_numbers = reduce(mul,\
    \ numbers, 1)\n    return (sum_product, product_of_numbers)\nend\n</cell>\n<code\
    \ language=julia-1.0>\nsum_product([1, 2, 3, 4])\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a vector of integers and returns a vector of integers\
    \ containing the square of each of the numbers in the vector.\nFor example, if\
    \ the input vector is [4, 6, 9], then the output vector should be [16, 25, 36].\n\
    The function should work for vectors of any length.\nThe function should work\
    \ for vectors of any type.\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdz5yhuq4.jl:13\nin expression starting at\
    \ /tmp/tmpdz5yhuq4.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_of_numbers = prod(numbers)\n\
    \    return (sum_product, product_of_numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuyflsi0i.jl:13\nin expression starting at\
    \ /tmp/tmpuyflsi0i.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_of_numbers = reduce(mul,\
    \ numbers, 1)\n    return (sum_product, product_of_numbers)\nend\n</code>\n<|/\
    \ a |>\n<| c |>\nThis doesn't answer the question. OP asked for a solution that\
    \ doesn't require any loops.\n<|/ c |>\n<| c |>\nI agree, but I thought it would\
    \ be helpful to show how to solve this problem without loops. I added a solution\
    \ that doesn't require loops.\n<|/ c |>\n<| c |>\nI added a solution that doesn't\
    \ require loops.\n<|/ c |>\n<| c |>\nI added a solution that doesn't require loops.\n\
    <|/ c |>\n<| c |>\nI added a solution that doesn't require loops.\n<|/ c |>\n\
    <| a tags=julia,functional-programming |>\nHere is a solution without loops:\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptx62o7dt.jl:13\nin expression starting at\
    \ /tmp/tmptx62o7dt.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_ = 0\n    product_ = 1\n    for n in numbers\n        sum_\
    \ = sum_ + n\n        product_ = product_ * n\n    return (sum_, product_)\nend\n\
    </cell>\n<code language=julia-1.0>\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4rhqhfgc.jl:16\nin expression starting at\
    \ /tmp/tmp4rhqhfgc.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        return (0, 1) \n    else \n \
    \       sum_product = numbers[1] * numbers[0]\n        product = 1\n        for\
    \ i in 2:length(numbers) \n            product *= numbers[i]\n            sum_product\
    \ += numbers[i]\n        end\n        return (sum_product, product)\n    end\n\
    end\n</cell>\n<code language=julia-1.3>\n@assert sum_product([1, 2, 3]) == (6,\
    \ 6)\n@assert sum_product([1, 2, 3, 4]) == (24, 12)\n@assert sum_product([1, 2,\
    \ 3, 4, 5]) == (120, 120)\n@assert sum_product([1, 2, 3, 4, 5, 6]) == (5040, 5040)\n\
    @assert sum_product([1, 2, 3, 4, 5, 6, 7]) == (5040, 5040)\n@assert sum_product([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) == (5040, 5040)\n@assert sum_product([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9]) == (5040, 5040)\n@assert sum_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\
    \ == (5040, 5040)\n@assert sum_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ (5040, 5040)\n@assert sum_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) ==\
    \ (5040, 5040)\n@assert sum_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\
    \ == (5040, 5040)\n@assert sum_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\
    \ 13, 14]) == (5040, 5040)\n@assert sum_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13, 14, 15]) == (5040, 5040)\n@assert sum_product([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) == (5040, 5040)\n@assert sum_product([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]) == (5040, 5040)\n@assert\
    \ sum_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\
    \ == (5040, 5040)\n@assert sum_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\
    \ 13, 14, 15, 16, 17, 18, 19]) == (5040, 5040)\n@assert sum_product([1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == (5040, 5040)\n\
    @assert sum_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,\
    \ 18, 19, 20, 21]) == (5040, 5040)\n@assert sum_product([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]) == (5040, 5040)\n\
    @assert sum_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,\
    \ 18, 19, 20, 21, 22, 23]) == (5040, 5040)\n@assert sum_product([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, \nusing Test\n\n\
    @testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvack2xfq.jl:21\nin expression starting at\
    \ /tmp/tmpvack2xfq.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = numbers[1]\n    product_of_numbers = numbers[1]\n\
    \    for number in numbers[2:end]\n        sum_product = sum_product + number\n\
    \        product_of_numbers = product_of_numbers * number\n    end\n    return\
    \ (sum_product, product_of_numbers)\nend\n</code>\n<|/ a |>\n<| c |>\nThis answer\
    \ does not take into account the fact that `sum_product` should return `0` and\
    \ `1` when given an empty list. Also, it does not take into account the fact that\
    \ `sum_product` should return `0` and `1` when given an empty list.\n<|/ c |>\n\
    <| c |>\nThe question was about how to implement the function, so I gave the solution\
    \ that I thought would be the most straightforward.\n<|/ c |>\n<| c |>\nThe question\
    \ was about how to implement the function, so I gave the solution that I thought\
    \ would be the most straightforward. Your answer does not take into account the\
    \ fact that `sum_product` should return `0` and `1` when given an empty list.\
    \ Also, it does not take into account the fact that `sum_product` should return\
    \ `0` and `1` when given an empty list.\n<|/ c |>\n<| c |>\nI agree with you,\
    \ my answer does not take into account the fact that `sum_product` should return\
    \ `0` and `1` when given an empty list. Also, it does not take into account the\
    \ fact that `sum_product` should return `0` and `1` when given an empty list.\
    \ Thanks for pointing that out.\n<|/ c |>\n<| c |>\nI agree with you, my answer\
    \ does not take into account the fact that `sum_product` should return `0` and\
    \ `1` when given an empty list. Also, it does not take into account the fact that\
    \ `sum_product` should return `0` and `1` when given an empty list. Thanks for\
    \ pointing that out.\n<|/ c |>\n<| a tags=julia |>\nThe most straightforward way\
    \ is to just use sum and prod functions:\n<code>\njulia> sum([1,2,3])\n6\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq0ejrdmq.jl:17\nin expression starting at\
    \ /tmp/tmpq0ejrdmq.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_of_numbers = reduce(mul,\
    \ numbers, 1)\n    return (sum_product, product_of_numbers)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_product([1, 2, 3, 4])\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a list of integers and returns the sum of the squares\
    \ of the integers in the list.\nThe function should raise a TypeError if the list\
    \ contains non-integer values.\nThe function should raise a TypeError if the list\
    \ contains negative values.\nThe function should raise a TypeError if the list\
    \ contains values greater than $10$.\nThe function should raise a TypeError if\
    \ the list contains values greater than $100$.\nThe function should raise a TypeError\
    \ if the list contains values greater than $1000$.\nThe function should raise\
    \ a TypeError if the list contains values greater than $10000$.\nThe function\
    \ should raise a TypeError if the list contains values greater than $100000$.\n\
    The function should raise a TypeError if the list contains values greater than\
    \ $1000000$.\nThe function should raise a TypeError if the list contains values\
    \ greater than $10000000$.\nThe function should raise a TypeError if the list\
    \ contains values greater than $100000000$.\nThe function should raise a TypeError\
    \ if the list contains values greater than $1000000000$.\nThe function should\
    \ raise a TypeError if the list contains values greater than $10000000000$.\n\
    The function should raise a TypeError if the list contains values greater than\
    \ $100000000000$.\nThe function should raise a TypeError if the list contains\
    \ values greater than $1000000000000$.\nThe function should raise a TypeError\
    \ if the list contains values greater than $10000000000000$.\nThe function should\
    \ raise a TypeError if the list contains values greater than $100000000000000$.\n\
    The function should raise a TypeError if the list contains values greater than\
    \ $1000000000000000$.\nThe function should raise a TypeError if the list contains\
    \ values greater than $10000000000000000$.\nThe function should raise a TypeError\
    \ if the list contains values greater than $100000000000000000$.\nThe function\
    \ should raise a TypeError if the list contains values greater than $1000000000000000000$.\n\
    The function should raise a TypeError if the list contains values greater than\
    \ $10000000000000000000$.\nThe function should raise a TypeError if the list contains\
    \ values greater than $100000000000000000000$.\nThe function should raise a TypeError\
    \ if the list contains values greater than $1000000000000000000000$.\nThe function\
    \ should raise a TypeError if the list contains values greater than $10000000000000000000000$.\n\
    The function should raise a TypeError if the list contains values greater than\
    \ $100000000000000000000000$.\nThe function should raise a TypeError if the list\
    \ contains values greater than $1000000000000000000\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t\
    @test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\
    \t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw65q7_x6.jl:13\nin expression starting at\
    \ /tmp/tmpw65q7_x6.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = numbers[1]\n    product_of_numbers = numbers[1]\n\
    \    for number in numbers[2:end]\n        sum_product = sum_product + number\n\
    \        product_of_numbers = product_of_numbers * number\n    end\n    return\
    \ (sum_product, product_of_numbers)\nend\n</code>\n<|/ a tags=julia |>\n<| a tags=julia\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaz2k7658.jl:17\nin expression starting at\
    \ /tmp/tmpaz2k7658.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        return (0, 1) \n    else \n \
    \       sum_ = numbers[1]\n        prod_ = 1\n        for n in numbers[2:end]\n\
    \            sum_ = sum_ + n\n            prod_ = prod_ * n\n        return (sum_,\
    \ prod_)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a list of integers and returns the sum of the squares of the integers in the\
    \ list.\nThe function should raise an error if the list is empty.\nThe function\
    \ should raise an error if the list contains non-integer values.\nThe function\
    \ should raise an error if the list contains negative values.\nThe function should\
    \ raise an error if the list contains duplicate values.\nThe function should raise\
    \ an error if the list contains any non-integer values.\nThe function should raise\
    \ an error if the list contains any negative values.\nThe function should raise\
    \ an error if the list contains any duplicate values.\nThe function should raise\
    \ an error if the list contains any non-integer values.\nThe function should raise\
    \ an error if the list contains any negative values.\nThe function should raise\
    \ an error if the list contains any duplicate values.\nThe function should raise\
    \ an error if the list contains any non-integer values.\nThe function should raise\
    \ an error if the list contains any negative values.\nThe function should raise\
    \ an error if the list contains any duplicate values.\nThe function should raise\
    \ an error if the list contains any non-integer values.\nThe function should raise\
    \ an error if the list contains any negative values.\nThe function should raise\
    \ an error if the list contains any duplicate values.\nThe function should raise\
    \ an error if the list contains any non-integer values.\nThe function should raise\
    \ an error if the list contains any negative values.\nThe function should raise\
    \ an error if the list contains any duplicate values.\nThe function should raise\
    \ an error if the list contains any non-integer values.\nThe function should raise\
    \ an error if the list contains any negative values.\nThe function should raise\
    \ an error if the list contains any duplicate values.\nThe function should raise\
    \ an error if the list contains any non-integer values.\nThe function should raise\
    \ an error if the list contains any negative values.\nThe function should raise\
    \ an error if the list contains any duplicate values.\nThe function should raise\
    \ an error if the list contains any non-integer values.\nThe function should raise\
    \ an error if the list contains any negative values.\nThe function should raise\
    \ an error if the list contains any duplicate values.\nThe function should raise\
    \ an error if the list contains any non-integer values.\nThe function should raise\
    \ an error if the list contains any negative values.\nThe function should raise\
    \ an error if the list contains any duplicate values.\nThe function should raise\
    \ an error if the list contains any non-integer values.\nThe function should raise\
    \ an error if the list contains any negative values.\nThe function should raise\
    \ an error if the list contains any duplicate values.\nThe function should raise\
    \ an error if the list contains any non-integer values.\nThe function should raise\
    \ an error if the \nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq2zrm0s8.jl:20\nin expression starting at\
    \ /tmp/tmpq2zrm0s8.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = numbers[1]\n    product = 1\n    for i in numbers[2:end]\n\
    \        sum_product += i\n        product *= i\n    return (sum_product, product)\n\
    end\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3,4,5])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a list of integers and returns the sum\
    \ of the squares of the integers in the list.\n>>> square_sum([1,2,3,4,5])\n25\n\
    >>> square_sum([1,2,3])\n6\n>>> square_sum([1,2])\n3\n>>> square_sum([1,2])\n\
    3\n>>> square_sum([1,2])\n3\n>>> square_sum([1,2])\n3\n>>> square_sum([1,2])\n\
    3\n>>> square_sum([1,2])\n3\n>>> square_sum([1,2])\n3\n>>> square_sum([1,2])\n\
    3\n>>> square_sum([1,2])\n3\n>>> square_sum([1,2])\n3\n>>> square_sum([1,2])\n\
    3\n>>> square_sum([1,2])\n3\n>>> square_sum([1,2])\n3\n>>> square_sum([1,2])\n\
    3\n>>> square_sum([1,2])\n3\n>>> square_sum([1,2])\n3\n>>> square_sum([1,2])\n\
    3\n>>> square_sum([1,2])\n3\n>>> square_sum([1,2])\n3\n>>> square_sum([1,2])\n\
    3\n>>> square_sum([1,2])\n3\n>>> square_sum([1,2])\n3\n>>> square_sum([1,2])\n\
    3\n>>> square_sum([1,2])\n3\n>>> square_sum([1,2])\n3\n>>> square_sum([1,2])\n\
    3\n>>> square_sum([1,2])\n3\n>>> square_sum([1,2])\n3\n>>> square_sum([1,2])\n\
    3\n>>> square_sum([1,2])\n3\n>>> square_sum([1,2])\n3\n>>> square_sum([1,2])\n\
    3\n>>> square_sum([1,2])\n3\n>>> square_sum([1,2])\n3\n>>> square_sum([1,2])\n\
    3\n>>> square_sum([1,2])\n3\n>>> square_sum([1,2])\n3\n>>> square_sum([1,2])\n\
    3\n>>> square_sum([1,2])\n3\n>>> square_sum([1,2])\n3\n>>> square_sum([1,2])\n\
    3\n>>> square_sum([1,2])\n3\n>>> square_sum([1,2])\n3\n>>> square_sum([1,2])\n\
    3\n>>> square_sum([1,2])\n3\n>>> square_sum([1,2])\n\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t\
    @test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\
    \t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7chnbbxu.jl:16\nin expression starting at\
    \ /tmp/tmp7chnbbxu.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = numbers[1]\n    product_of_numbers = numbers[1]\n\
    \    for number in numbers[2:end]\n        sum_product = sum_product + number\n\
    \        product_of_numbers = product_of_numbers * number\n    end\n    return\
    \ (sum_product, product_of_numbers)\nend\n</code>\n<|/ a |>\n<| a dscore=0 |>\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp92x3kn3e.jl:17\nin expression starting at\
    \ /tmp/tmp92x3kn3e.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        return (0, 1) \n    else \n \
    \       sum_ = sum(numbers) \n        prod_ = 1\n        for i in numbers \n \
    \           prod_ *= i \n        return (sum_, prod_) \nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of integers and returns the sum\
    \ of the squares of the integers in the vector.\nThe sum of the squares should\
    \ be equal to the product of the squares of the integers in the vector.\nThe function\
    \ should return nothing if the vector is empty.\nThe function should raise an\
    \ error if the vector contains non-integer values.\nThe function should raise\
    \ an error if the vector contains negative values.\nThe function should raise\
    \ an error if the vector contains values greater than the maximum integer value.\n\
    The function should raise an error if the vector contains values less than the\
    \ minimum integer value.\nThe function should raise an error if the vector contains\
    \ values greater than the maximum integer value.\nThe function should raise an\
    \ error if the vector contains values less than the minimum integer value.\nThe\
    \ function should raise an error if the vector contains values greater than the\
    \ maximum integer value.\nThe function should raise an error if the vector contains\
    \ values less than the minimum integer value.\nThe function should raise an error\
    \ if the vector contains values greater than the maximum integer value.\nThe function\
    \ should raise an error if the vector contains values less than the minimum integer\
    \ value.\nThe function should raise an error if the vector contains values greater\
    \ than the maximum integer value.\nThe function should raise an error if the vector\
    \ contains values less than the minimum integer value.\nThe function should raise\
    \ an error if the vector contains values greater than the maximum integer value.\n\
    The function should raise an error if the vector contains values less than the\
    \ minimum integer value.\nThe function should raise an error if the vector contains\
    \ values greater than the maximum integer value.\nThe function should raise an\
    \ error if the vector contains values less than the minimum integer value.\nThe\
    \ function should raise an error if the vector contains values greater than the\
    \ maximum integer value.\nThe function should raise an error if the vector contains\
    \ values less than the minimum integer value.\nThe function should raise an error\
    \ if the vector contains values greater than the maximum integer value.\nThe function\
    \ should raise an error if the vector contains values less than the minimum integer\
    \ value.\nThe function should raise an error if the vector contains values greater\
    \ than the maximum integer value.\nThe function should raise an error if the vector\
    \ contains values less than the minimum integer value.\nThe function should raise\
    \ an error if the vector contains values greater than the maximum integer value.\n\
    The function should raise an error if the vector contains values less than the\
    \ minimum integer value.\nThe function should raise an error if the vector contains\
    \ values greater than the maximum integer value.\nThe function should raise an\
    \ error if the vector contains values less than the minimum integer value.\nThe\
    \ function should raise an error if the vector contains values greater than the\
    \ maximum integer value.\nThe function should raise an error if the vector contains\
    \ values less than the minimum integer value.\nThe function should raise an error\
    \ if the vector contains values \nusing Test\n\n@testset begin\n\ncandidate =\
    \ sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1,\
    \ 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph3z1l07v.jl:18\nin expression starting at\
    \ /tmp/tmph3z1l07v.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_of_numbers = reduce(mul,\
    \ numbers, 1)\n    return (sum_product, product_of_numbers)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_product([1, 2, 3, 4])\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the product of all the integers in a list.\nThe\
    \ function should take one argument, a list of integers, and return one number.\n\
    The function should return the product of all the integers in the list.\nThe function\
    \ should raise an error if the list is empty.\nThe function should raise an error\
    \ if the list contains non-integers.\nThe function should raise an error if the\
    \ list contains negative integers.\nThe function should raise an error if the\
    \ list contains zero, negative or non-integer numbers.\nThe function should raise\
    \ an error if the list contains any non-positive integers.\nThe function should\
    \ raise an error if the list contains any non-integer numbers.\nThe function should\
    \ raise an error if the list contains any negative numbers.\nThe function should\
    \ raise an error if the list contains any non-positive numbers.\nThe function\
    \ should raise an error if the list contains any zero, non-integer or non-positive\
    \ numbers.\nThe function should raise an error if the list contains any non-integer\
    \ numbers.\nThe function should raise an error if the list contains any negative\
    \ numbers.\nThe function should raise an error if the list contains any non-positive\
    \ numbers.\nThe function should raise an error if the list contains any zero,\
    \ non-integer or non-positive numbers.\nThe function should raise an error if\
    \ the list contains any non-integer numbers.\nThe function should raise an error\
    \ if the list contains any negative numbers.\nThe function should raise an error\
    \ if the list contains any non-positive numbers.\nThe function should raise an\
    \ error if the list contains any zero, non-integer or non-positive numbers.\n\
    The function should raise an error if the list contains any non-integer numbers.\n\
    The function should raise an error if the list contains any negative numbers.\n\
    The function should raise an error if the list contains any non-positive numbers.\n\
    The function should raise an error if the list contains any zero, non-integer\
    \ or non-positive numbers.\nThe function should raise an error if the list contains\
    \ any non-integer numbers.\nThe function should raise an error if the list contains\
    \ any negative numbers.\nThe function should raise an error if the list contains\
    \ any non-positive numbers.\nThe function should raise an error if the list contains\
    \ any zero, non-integer or non-positive numbers.\nThe function should raise an\
    \ error if the list contains any non-integer numbers.\nThe function should raise\
    \ an error if the list contains any negative numbers.\nThe function should raise\
    \ an error if the list contains any non-positive numbers.\nThe function should\
    \ raise an error if the list contains any zero, non-integer or non-positive numbers.\n\
    The function should raise an error if the list contains any non-integer numbers.\n\
    The function should raise an error if the list \nusing Test\n\n@testset begin\n\
    \ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t\
    @test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\
    \t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz2ljcent.jl:13\nin expression starting at\
    \ /tmp/tmpz2ljcent.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum .(numbers)\n    product_product = 1\n    for\
    \ number in numbers\n        product_product *= number\n    end\n    return sum_product,\
    \ product_product\nend\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3,4,5])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the sum of the squares of the integers in a given list.\n    >>>\
    \ sum_square_of_list([])\n    0.0\n    >>> sum_square_of_list([1,2,3])\n    9.0\n\
    \    >>> sum_square_of_list([1,2,3,4,5])\n    25.0\n    >>> sum_square_of_list([1,2,3,4,5,6,7,8,9,10])\n\
    \    5025.0\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \".\" not allowed in \"sum .\" at\
    \ /tmp/tmpzoxqdw_8.jl:9\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzoxqdw_8.jl:9\n\
    in expression starting at /tmp/tmpzoxqdw_8.jl:9\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        return (0, 1) \n    else \n \
    \       sum_ = numbers[1] + numbers[2] \n        product = numbers[1] * numbers[2]\
    \ \n        return (sum_, product) \nend\n</cell>\n<text>\nExercise 4\nWrite a\
    \ function that returns the sum of the squares of the integers in a list.\n  \
    \  >>> sum_square([1, 2, 3, 4])\n    25\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t\
    @test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\
    \t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp01lxtrrb.jl:16\nin expression starting at\
    \ /tmp/tmp01lxtrrb.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_of_numbers = reduce(mul,\
    \ numbers, 1)\n    return (sum_product, product_of_numbers)\nend\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that returns the sum of the squares of the numbers\
    \ in a vector.\nThe vector can contain any type of numbers.\nThe function should\
    \ work for vectors of any length.\nThe function should work for vectors of any\
    \ type of numbers.\nThe function should work for vectors of any number of numbers.\n\
    The function should work for vectors of any type of numbers, including vectors\
    \ of vectors.\nThe function should work for vectors of any type of numbers, including\
    \ vectors of vectors.\nThe function should work for vectors of any type of numbers,\
    \ including vectors of vectors.\nThe function should work for vectors of any type\
    \ of numbers, including vectors of vectors.\nThe function should work for vectors\
    \ of any type of numbers, including vectors of vectors.\nThe function should work\
    \ for vectors of any type of numbers, including vectors of vectors.\nThe function\
    \ should work for vectors of any type of numbers, including vectors of vectors.\n\
    The function should work for vectors of any type of numbers, including vectors\
    \ of vectors.\nThe function should work for vectors of any type of numbers, including\
    \ vectors of vectors.\nThe function should work for vectors of any type of numbers,\
    \ including vectors of vectors.\nThe function should work for vectors of any type\
    \ of numbers, including vectors of vectors.\nThe function should work for vectors\
    \ of any type of numbers, including vectors of vectors.\nThe function should work\
    \ for vectors of any type of numbers, including vectors of vectors.\nThe function\
    \ should work for vectors of any type of numbers, including vectors of vectors.\n\
    The function should work for vectors of any type of numbers, including vectors\
    \ of vectors.\nThe function should work for vectors of any type of numbers, including\
    \ vectors of vectors.\nThe function should work for vectors of any type of numbers,\
    \ including vectors of vectors.\nThe function should work for vectors of any type\
    \ of numbers, including vectors of vectors.\nThe function should work for vectors\
    \ of any type of numbers, including vectors of vectors.\nThe function should work\
    \ for vectors of any type of numbers, including vectors of vectors.\nThe function\
    \ should work for vectors of any type of numbers, including vectors of vectors.\n\
    The function should work for vectors of any type of numbers, including vectors\
    \ of vectors.\nThe function should work for vectors of any type of numbers, including\
    \ vectors of vectors.\nThe function should work for vectors of any type of numbers,\
    \ including vectors of vectors.\nThe function should work for vectors of any type\
    \ of numbers, including vectors of vectors.\nThe function should work for vectors\
    \ of any type of numbers, including vectors of vectors.\nThe function should work\
    \ for vectors of \nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t\
    @test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1]) ==\
    \ (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3, 5,\
    \ 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa6f83qy_.jl:13\nin expression starting at\
    \ /tmp/tmpa6f83qy_.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        return (0, 1) \n    else \n \
    \       sum = numbers[1]\n        product = 1\n        for i in 2:length(numbers)\
    \ \n            sum = sum + numbers[i]\n            product = product * numbers[i]\n\
    \        end\n        return (sum, product)\n    end\nend\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that takes a vector of integers and returns a vector of\
    \ integers containing the squares of the integers in the vector.\nFor example,\
    \ square_of_vector([1, 2, 3]) should return [1, 4, 9].\nThe function should work\
    \ for any vector and should return the same vector if the input vector is empty.\n\
    The function should work for any vector and should return the same vector if the\
    \ input vector is empty.\nThe function should work for any vector and should return\
    \ the same vector if the input vector is empty.\nThe function should work for\
    \ any vector and should return the same vector if the input vector is empty.\n\
    The function should work for any vector and should return the same vector if the\
    \ input vector is empty.\nThe function should work for any vector and should return\
    \ the same vector if the input vector is empty.\nThe function should work for\
    \ any vector and should return the same vector if the input vector is empty.\n\
    The function should work for any vector and should return the same vector if the\
    \ input vector is empty.\nThe function should work for any vector and should return\
    \ the same vector if the input vector is empty.\nThe function should work for\
    \ any vector and should return the same vector if the input vector is empty.\n\
    The function should work for any vector and should return the same vector if the\
    \ input vector is empty.\nThe function should work for any vector and should return\
    \ the same vector if the input vector is empty.\nThe function should work for\
    \ any vector and should return the same vector if the input vector is empty.\n\
    The function should work for any vector and should return the same vector if the\
    \ input vector is empty.\nThe function should work for any vector and should return\
    \ the same vector if the input vector is empty.\nThe function should work for\
    \ any vector and should return the same vector if the input vector is empty.\n\
    The function should work for any vector and should return the same vector if the\
    \ input vector is empty.\nThe function should work for any vector and should return\
    \ the same vector if the input vector is empty.\nThe function should work for\
    \ any vector and should return the same vector if the input vector is empty.\n\
    The function should work for any vector and should return the same vector if the\
    \ input vector is empty.\nThe function should work for any vector and should return\
    \ the same vector if the input vector is empty.\nThe function should work for\
    \ any vector and should return the same vector if the input vector is empty.\n\
    The function should work for any vector and should return the same vector if the\
    \ input vector is empty.\nThe function should work for any vector and should return\
    \ the same vector if the input vector is empty.\nThe function should work for\
    \ any vector \nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmysvvbrj.jl:21\nin expression starting at\
    \ /tmp/tmpmysvvbrj.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_product = 1\n    for i\
    \ in numbers\n        product_product *= i\n    return (sum_product, product_product)\n\
    end\n</cell>\n<code language=julia-1.3>\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3]) == (6, \nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf06b81oz.jl:15\nin expression starting at\
    \ /tmp/tmpf06b81oz.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = zero(Int64)\n    product = one(Int64)\n    for number in\
    \ numbers\n        sum += number\n        product *= number\n    return (sum,\
    \ product)\nend\n</cell>\n<code language=julia-1.3>\nsum_product([1,2,3,4,5])\n\
    </cell>\n<text>\nExercise 4\nWrite a function that returns the sum of the squares\
    \ of the numbers in a given vector.\n>>> sum_square_of_numbers([1,2,3,4,5])\n\
    25\n>>> sum_square_of_numbers([1,2,3])\n9\n>>> sum_square_of_numbers([1,2])\n\
    4\n>>> sum_square_of_numbers([1,2])\n4\n>>> sum_square_of_numbers([1,2])\n4\n\
    >>> sum_square_of_numbers([1,2])\n4\n>>> sum_square_of_numbers([1,2])\n4\n>>>\
    \ sum_square_of_numbers([1,2])\n4\n>>> sum_square_of_numbers([1,2])\n4\n>>> sum_square_of_numbers([1,2])\n\
    4\n>>> sum_square_of_numbers([1,2])\n4\n>>> sum_square_of_numbers([1,2])\n4\n\
    >>> sum_square_of_numbers([1,2])\n4\n>>> sum_square_of_numbers([1,2])\n4\n>>>\
    \ sum_square_of_numbers([1,2])\n4\n>>> sum_square_of_numbers([1,2])\n4\n>>> sum_square_of_numbers([1,2])\n\
    4\n>>> sum_square_of_numbers([1,2])\n4\n>>> sum_square_of_numbers([1,2])\n4\n\
    >>> sum_square_of_numbers([1,2])\n4\n>>> sum_square_of_numbers([1,2])\n4\n>>>\
    \ sum_square_of_numbers([1,2])\n4\n>>> sum_square_of_numbers([1,2])\n4\n>>> sum_square_of_numbers([1,2])\n\
    4\n>>> sum_square_of_numbers([1,2])\n4\n>>> sum_square_of_numbers([1,2])\n4\n\
    >>> sum_square_of_numbers([1,2])\n4\n>>> sum_square_of_numbers([1,2])\n4\n>>>\
    \ sum_square_of_numbers([1,2])\n4\n>>> sum_square_of_numbers([1,2])\n4\n>>> sum_square_of_numbers([1,2])\n\
    4\n>>> sum_square_of_numbers([1,2])\n4\n>>> sum_square_of_numbers([1,2])\n4\n\
    >>> sum_square_of_numbers([1,2])\n4\n>>> sum_square_of_numbers([1,2])\n4\n>>>\
    \ sum_square_of_numbers([1,2])\n4\n>>> sum_square\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t\
    @test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\
    \t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsy5ejjp8.jl:16\nin expression starting at\
    \ /tmp/tmpsy5ejjp8.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = numbers[1]\n    prod = 1\n    for i in numbers[2:end]\n\
    \        sum_product += i\n        prod *= i\n    return (sum_product, prod)\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert sum_product([1, 2, 3]) == 10\n\
    @assert sum_product([4, 6, 8]) == 42\n@assert sum_product([10, 20, 30]) == 100\n\
    @assert sum_product([100, 200, 300]) == 10000\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a vector and returns the dot product of the vector with\
    \ itself. \nThe dot product is defined as:\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1,\
    \ 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5fiy6j8b.jl:16\nin expression starting at\
    \ /tmp/tmp5fiy6j8b.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_of_numbers = reduce(mul,\
    \ numbers, 1)\n    return (sum_product, product_of_numbers)\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector of integers and returns a vector\
    \ of integers containing the squares of all the integers in the vector.\nFor example,\
    \ given [1,2,3], the function should return [1,2,3].\n>>> square_of_vector([1,\
    \ 2, 3])\n[1,2,3]\n>>> square_of_vector([4, 9, 16])\n[16, 25, 36]\n>>> square_of_vector([-1,\
    \ -2, -3])\n[-1,-2,-3]\n>>> square_of_vector([0, 0])\n[0, 0]\n>>> square_of_vector([-1])\n\
    []\n>>> square_of_vector([0, 0])\n[]\n>>> square_of_vector([])\n[]\n>>> square_of_vector([0,\
    \ 0])\n[]\n>>> square_of_vector([-1])\n[]\n>>> square_of_vector([0, 0])\n[]\n\
    >>> square_of_vector([0, 0])\n[]\n>>> square_of_vector([0, 0])\n[]\n>>> square_of_vector([0,\
    \ 0])\n[]\n>>> square_of_vector([0, 0])\n[]\n>>> square_of_vector([0, 0])\n[]\n\
    >>> square_of_vector([0, 0])\n[]\n>>> square_of_vector([0, 0])\n[]\n>>> square_of_vector([0,\
    \ 0])\n[]\n>>> square_of_vector([0, 0])\n[]\n>>> square_of_vector([0, 0])\n[]\n\
    >>> square_of_vector([0, 0])\n[]\n>>> square_of_vector([0, 0])\n[]\n>>> square_of_vector([0,\
    \ 0])\n[]\n>>> square_of_vector([0, 0])\n[]\n>>> square_of_vector([0, 0])\n[]\n\
    >>> square_of_vector([0, 0])\n[]\n>>> square_of_vector([0, 0])\n[]\n>>> square_of_vector([0,\
    \ 0])\n[]\n>>> square_of_vector([0, 0])\n[]\n>>> square_of_vector([0, 0])\n[]\n\
    >>> square_of_vector([0, 0])\n[]\n>>> square_of_vector([0, 0])\n[]\n>>> square_of_vector([0,\
    \ 0])\n[]\n>>> square_of_vector([0, 0])\n[]\n>>> square_of_vector([0, 0])\n[]\n\
    >>> square_of_vector([0, 0])\n[]\n>>> square_of_vector([0, 0])\n[]\n>>> square_of_vector([0,\
    \ 0])\n[]\n>>> square_of_vector([0, 0])\n[]\nusing Test\n\n@testset begin\n\n\
    candidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t\
    @test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\
    \t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuqiuti2l.jl:13\nin expression starting at\
    \ /tmp/tmpuqiuti2l.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_of_numbers = reduce(mul,\
    \ numbers, 1)\n    return (sum_product, product_of_numbers)\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the sum of the squares of the integers\
    \ in a list.\nThe sum of the squares should be equal to the product of the squares\
    \ of the integers in the list.\n>>> sum_square_of_numbers([1, 2, 3, 4])\n25\n\
    >>> sum_square_of_numbers([-1, -2, -3, -4])\n25\n>>> sum_square_of_numbers([])\n\
    0\n>>> sum_square_of_numbers([1, 2, 3, 4, 5])\n25\n>>> sum_square_of_numbers([-1,\
    \ -2, -3, -4, -5])\n25\n>>> sum_square_of_numbers([1, 2, 3, 4, 5])\n25\n>>> sum_square_of_numbers([-1,\
    \ -2, -3, -4, -5])\n25\n>>> sum_square_of_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10])\n25\n>>> sum_square_of_numbers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10])\n\
    25\n>>> sum_square_of_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n25\n>>> sum_square_of_numbers([-1,\
    \ -2, -3, -4, -5, -6, -7, -8, -9, -10])\n25\n>>> sum_square_of_numbers([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10])\n25\n>>> sum_square_of_numbers([-1, -2, -3, -4, -5,\
    \ -6, -7, -8, -9, -10])\n25\n>>> sum_square_of_numbers([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10])\n25\n>>> sum_square_of_numbers([-1, -2, -3, -4, -5, -6, -7, -8, -9,\
    \ -10])\n25\n>>> sum_square_of_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n25\n\
    >>> sum_square_of_numbers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10])\n25\n>>>\
    \ sum_square_of_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n25\n>>> sum_square_of_numbers([-1,\
    \ -2, -3, -4, -5, -6, -7, -8, -9, -10])\n25\n>>> sum_square_of_numbers([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10])\n25\n>>> sum_square_of_numbers([-1, -2, -3, -4, -5,\
    \ -6, -7, -8, -9, -10])\n25\n>>> sum_square_of_numbers([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10])\n25\n>>> sum_square_of_numbers([-1, -2, -3, -4, -5, -6, -7, -8, -9,\
    \ -10])\n25\n>>> sum_square_of_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n25\n\
    >>> sum_square\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp259_t9sj.jl:13\nin expression starting at\
    \ /tmp/tmp259_t9sj.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = Int64(0)\n    prod = Int64(1)\n    for n in numbers\n   \
    \     sum += n\n        prod *= n\n    return (sum, prod)\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9e0zckdy.jl:16\nin expression starting at\
    \ /tmp/tmp9e0zckdy.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum = 0\n    product = 1\n    for n in numbers\n        sum +=\
    \ n\n        product *= n\n    return (sum, product)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1, 2, 3, 4])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a vector of integers and returns the sum of the squares of the integers\
    \ in the vector.\nThe function should raise an error if the vector is empty.\n\
    The function should raise an error if the vector contains non-integer values.\n\
    The function should raise an error if the vector contains negative values.\nThe\
    \ function should raise an error if the vector contains duplicate values.\nThe\
    \ function should raise an error if the vector contains any non-positive values.\n\
    The function should raise an error if the vector contains any negative values.\n\
    The function should raise an error if the vector contains any non-integer values.\n\
    The function should raise an error if the vector contains any non-positive values.\n\
    The function should raise an error if the vector contains any duplicate values.\n\
    The function should raise an error if the vector contains any non-integer values.\n\
    The function should raise an error if the vector contains any non-positive values.\n\
    The function should raise an error if the vector contains any duplicate values.\n\
    The function should raise an error if the vector contains any non-integer values.\n\
    The function should raise an error if the vector contains any non-positive values.\n\
    The function should raise an error if the vector contains any duplicate values.\n\
    The function should raise an error if the vector contains any non-integer values.\n\
    The function should raise an error if the vector contains any non-positive values.\n\
    The function should raise an error if the vector contains any duplicate values.\n\
    The function should raise an error if the vector contains any non-integer values.\n\
    The function should raise an error if the vector contains any non-positive values.\n\
    The function should raise an error if the vector contains any duplicate values.\n\
    The function should raise an error if the vector contains any non-integer values.\n\
    The function should raise an error if the vector contains any non-positive values.\n\
    The function should raise an error if the vector contains any duplicate values.\n\
    The function should raise an error if the vector contains any non-integer values.\n\
    The function should raise an error if the vector contains any non-positive values.\n\
    The function should raise an error if the vector contains any duplicate values.\n\
    The function should raise an error if the vector contains any non-integer values.\n\
    The function should raise an error if the vector contains any non-positive values.\n\
    The function should raise an error if the vector contains any duplicate values.\n\
    The function should raise an error if the vector contains any non-integer values.\n\
    The function should raise an error if the vector contains any non-positive values.\n\
    The function should raise an error if the vector contains any duplicate values.\n\
    The function should raise an error if the vector contains any non-integer values.\n\
    The function should raise an error if the vector contains any non-positive values.\n\
    The function should raise \nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdx4vlnb3.jl:16\nin expression starting at\
    \ /tmp/tmpdx4vlnb3.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_ = Int64(0)\n    prod = Int64(1)\n    for n in numbers\n  \
    \      sum_ = sum_ + n\n        prod = prod * n\n    return (sum_, prod)\nend\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1, 2, 3, 4])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a list of integers and returns the sum\
    \ of the squares of the integers in the list.\nThe function should raise an error\
    \ if the list is empty.\nThe function should raise an error if the list contains\
    \ non-integer elements.\nThe function should raise an error if the list contains\
    \ negative numbers.\nThe function should raise an error if the list contains duplicate\
    \ elements.\nThe function should raise an error if the list contains negative\
    \ numbers.\nThe function should raise an error if the list contains duplicate\
    \ elements.\nThe function should raise an error if the list contains negative\
    \ numbers.\nThe function should raise an error if the list contains duplicate\
    \ elements.\nThe function should raise an error if the list contains negative\
    \ numbers.\nThe function should raise an error if the list contains duplicate\
    \ elements.\nThe function should raise an error if the list contains negative\
    \ numbers.\nThe function should raise an error if the list contains duplicate\
    \ elements.\nThe function should raise an error if the list contains negative\
    \ numbers.\nThe function should raise an error if the list contains duplicate\
    \ elements.\nThe function should raise an error if the list contains negative\
    \ numbers.\nThe function should raise an error if the list contains duplicate\
    \ elements.\nThe function should raise an error if the list contains negative\
    \ numbers.\nThe function should raise an error if the list contains duplicate\
    \ elements.\nThe function should raise an error if the list contains negative\
    \ numbers.\nThe function should raise an error if the list contains duplicate\
    \ elements.\nThe function should raise an error if the list contains negative\
    \ numbers.\nThe function should raise an error if the list contains duplicate\
    \ elements.\nThe function should raise an error if the list contains negative\
    \ numbers.\nThe function should raise an error if the list contains duplicate\
    \ elements.\nThe function should raise an error if the list contains negative\
    \ numbers.\nThe function should raise an error if the list contains duplicate\
    \ elements.\nThe function should raise an error if the list contains negative\
    \ numbers.\nThe function should raise an error if the list contains duplicate\
    \ elements.\nThe function should raise an error if the list contains negative\
    \ numbers.\nThe function should raise an error if the list contains duplicate\
    \ elements.\nThe function should raise an error if the list contains negative\
    \ numbers.\nThe function should raise an error if the list contains duplicate\
    \ elements.\nThe function should raise an error if the list contains negative\
    \ numbers.\nThe function should raise an error if the list contains duplicate\
    \ elements.\nThe function should raise an error if the list contains negative\
    \ numbers.\nThe function should raise an error if the list contains duplicate\
    \ elements.\nThe function should raise an error if the list contains negative\
    \ numbers.\nThe function should raise an error if the list contains duplicate\
    \ elements.\nThe function should raise an error if the list contains negative\
    \ numbers.\nThe function should \nusing Test\n\n@testset begin\n\ncandidate =\
    \ sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1,\
    \ 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn1gsd_n4.jl:16\nin expression starting at\
    \ /tmp/tmpn1gsd_n4.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        return (0, 1)\n    end\n    sum_\
    \ = numbers[1]\n    prod = 1\n    for i in numbers[2:end]\n        sum_ += i\n\
    \        prod *= i\n    end\n    return (sum_, prod)\nend\n</cell>\n<code language=julia-1.0>\n\
    @assert sum_product([1, 2, 3]) == (6, 3)\n@assert sum_product([-1, -2, -3]) ==\
    \ (0, 3)\n@assert sum_product([-4, -5, -6]) == (24, 12)\n@assert sum_product([-7,\
    \ -8, -9]) == (120, 27)\n@assert sum_product([-10, -11, -12]) == (720, 144)\n\
    @assert sum_product([-13, -14, -15]) == (5040, 912)\n@assert sum_product([-16,\
    \ -17, -18]) == (362880, 72976)\n@assert sum_product([-19, -20, -21]) == (362880,\
    \ 72976)\n@assert sum_product([-22, -23, -24]) == (362880, 72976)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the sum of the squares of the numbers\
    \ in a given list. \nThe function should work for an empty list as well.\n>>>\
    \ sum_squares([])\n0\n>>> sum_squares([1, 2, 3, 4])\n25\n>>> sum_squares([-1,\
    \ -2, -3])\n0\n>>> sum_squares([-4, -5, -6])\n25\n>>> sum_squares([-7, -8, -9])\n\
    49\n>>> sum_squares([-10, -11, -12])\n49\n>>> sum_squares([-13, -14, -15])\n49\n\
    >>> sum_squares([-16, -17, -18])\n49\n>>> sum_squares([-19, -20, -21])\n49\n>>>\
    \ sum_squares([-22, -23, -24])\n49\n</text>\n<code language=julia-1.0>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1uf56huv.jl:20\nin expression starting at\
    \ /tmp/tmp1uf56huv.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        return (0, 1) \n    else \n \
    \       sum_ = sum(numbers)\n        prod_ = 1\n        for i in numbers \n  \
    \          prod_ *= i \n        return (sum_, prod_)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product\nusing Test\n\n@testset begin\n\ncandidate =\
    \ sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1,\
    \ 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphtx8k7ld.jl:19\nin expression starting at\
    \ /tmp/tmphtx8k7ld.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_product = 1\n    for i\
    \ in numbers\n        product_product *= i\n    return (sum_product, product_product)\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a list of integers\
    \ and returns a list of all the even numbers in the list.\nThe even numbers are\
    \ those that are divisible by 2.\nThe function should return an empty list if\
    \ the list is empty.\nThe function should return a list of integers otherwise.\n\
    The function should return a list of integers even if the list contains non-integer\
    \ elements.\nThe function should return a list of integers even if the list contains\
    \ negative integers.\nThe function should return a list of integers even if the\
    \ list contains non-positive integers.\nThe function should return a list of integers\
    \ even if the list contains negative integers.\nThe function should return a list\
    \ of integers even if the list contains non-positive integers.\nThe function should\
    \ return a list of integers even if the list contains negative integers.\nThe\
    \ function should return a list of integers even if the list contains non-positive\
    \ integers.\nThe function should return a list of integers even if the list contains\
    \ non-integer elements.\nThe function should return a list of integers even if\
    \ the list contains non-positive integers.\nThe function should return a list\
    \ of integers even if the list contains non-integer elements.\nThe function should\
    \ return a list of integers even if the list contains non-positive integers.\n\
    The function should return a list of integers even if the list contains non-integer\
    \ elements.\nThe function should return a list of integers even if the list contains\
    \ non-positive integers.\nThe function should return a list of integers even if\
    \ the list contains non-integer elements.\nThe function should return a list of\
    \ integers even if the list contains non-positive integers.\nThe function should\
    \ return a list of integers even if the list contains non-integer elements.\n\
    The function should return a list of integers even if the list contains non-positive\
    \ integers.\nThe function should return a list of integers even if the list contains\
    \ non-integer elements.\nThe function should return a list of integers even if\
    \ the list contains non-positive integers.\nThe function should return a list\
    \ of integers even if the list contains non-integer elements.\nThe function should\
    \ return a list of integers even if the list contains non-positive integers.\n\
    The function should return a list of integers even if the list contains non-integer\
    \ elements.\nThe function should return a list of integers even if the list contains\
    \ non-positive integers.\nThe function should return a list of integers even if\
    \ the list contains non-integer elements.\nThe function should return a list of\
    \ integers even if the list contains non-positive integers.\nThe function should\
    \ return a list of integers even if the list contains non-integer elements.\n\
    The function should return a list of integers even if the list contains non-positive\
    \ integers.\nThe function should return a list of integers \nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx5vwq009.jl:15\nin expression starting at\
    \ /tmp/tmpx5vwq009.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_product = sum(numbers)\n    product_product = 1\n    for number\
    \ in numbers\n        product_product *= number\n    end\n    return (sum_product,\
    \ product_product)\nend\n</cell>\n<code language=julia-1.0>\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, \nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprlenvv2s.jl:16\nin expression starting at\
    \ /tmp/tmprlenvv2s.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        return (0, 1)\n    end\n    sum_product\
    \ = (sum(numbers), prod(numbers))\n    return sum_product\nend\n</cell>\n<code\
    \ language=julia-1.4>\nsum_product([1, 2, 3, 4])\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the sum of the squares of the numbers in a vector.\n\
    The function should work for both real and complex numbers.\nThe function should\
    \ work for both vectors and matrices.\nThe function should work for both scalars\
    \ and vectors.\nThe function should work for both scalars and matrices.\nThe function\
    \ should work for both scalars and vectors.\nThe function should work for both\
    \ scalars and matrices.\nThe function should work for both scalars and vectors.\n\
    The function should work for both scalars and vectors.\nThe function should work\
    \ for both scalars and vectors.\nThe function should work for both scalars and\
    \ vectors.\nThe function should work for both scalars and vectors.\nThe function\
    \ should work for both scalars and vectors.\nThe function should work for both\
    \ scalars and vectors.\nThe function should work for both scalars and vectors.\n\
    The function should work for both scalars and vectors.\nThe function should work\
    \ for both scalars and vectors.\nThe function should work for both scalars and\
    \ vectors.\nThe function should work for both scalars and vectors.\nThe function\
    \ should work for both scalars and vectors.\nThe function should work for both\
    \ scalars and vectors.\nThe function should work for both scalars and vectors.\n\
    The function should work for both scalars and vectors.\nThe function should work\
    \ for both scalars and vectors.\nThe function should work for both scalars and\
    \ vectors.\nThe function should work for both scalars and vectors.\nThe function\
    \ should work for both scalars and vectors.\nThe function should work for both\
    \ scalars and vectors.\nThe function should work for both scalars and vectors.\n\
    The function should work for both scalars and vectors.\nThe function should work\
    \ for both scalars and vectors.\nThe function should work for both scalars and\
    \ vectors.\nThe function should work for both scalars and vectors.\nThe function\
    \ should work for both scalars and vectors.\nThe function should work for both\
    \ scalars and vectors.\nThe function should work for both scalars and vectors.\n\
    The function should work for both scalars and vectors.\nThe function should work\
    \ for both scalars and vectors.\nThe function should work for both scalars and\
    \ vectors.\nThe function should work for both scalars and vectors.\nThe function\
    \ should work for both scalars and vectors.\nThe function should work for both\
    \ scalars and vectors.\nThe function should work for both scalars and vectors.\n\
    The function should work for both scalars and vectors.\nThe function should work\
    \ for both scalars and vectors.\nThe function should work for both scalar\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy_5n2sx_.jl:15\nin expression starting at\
    \ /tmp/tmpy_5n2sx_.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_ = 0\n    product_ = 1\n    for n in numbers\n        sum_\
    \ += n\n        product_ *= n\n    return (sum_, product_)\nend\n</cell>\n<code\
    \ language=julia-1.0>\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2])\
    \ == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8_h5e18f.jl:16\nin expression starting at\
    \ /tmp/tmp8_h5e18f.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    if length(numbers) == 0 \n        return (0, 1) \n    else \n \
    \       sum_product = numbers[1] + numbers[2]\n        product_product = 1\n \
    \       for i in numbers[2:end]\n            product_product *= i\n        end\n\
    \        return (sum_product, product_product)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9sk2xa4z.jl:20\nin expression starting at\
    \ /tmp/tmp9sk2xa4z.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n    Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0,\
    \ 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
    \ Int64} \n    sum_ = 0\n    product_ = 1\n    for n in numbers\n        sum_\
    \ = sum_ + n\n        product_ = product_ * n\n    return (sum_, product_)\nend\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1, 2, 3, 4])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of integers and returns the sum\
    \ of the squares of the integers in the vector.\nThe function should return nothing\
    \ but a tuple of two Int64 numbers, the first one being the sum of the squares\
    \ and the second one being the product of the squares.\nThe function should raise\
    \ an error if the vector is empty.\n>>> sum_of_squares([])\n(0.0, 0.0)\n>>> sum_of_squares([1,\
    \ 2, 3, 4])\n(25, 25)\n>>> sum_of_squares([-1, -2, -3, -4])\n(0.0, 1.0)\n>>> sum_of_squares([-5,\
    \ -6, -7, -8])\n(0.0, 1.0)\n>>> sum_of_squares([-9, -10, -11, -12])\n(0.0, 1.0)\n\
    >>> sum_of_squares([-13, -14, -15, -16])\n(0.0, 1.0)\n>>> sum_of_squares([-17,\
    \ 18, -19, -20])\n(0.0, 1.0)\n>>> sum_of_squares([-21, -22])\n(0.0, 1.0)\n>>>\
    \ sum_of_squares([-23, -24])\n(0.0, 1.0)\n>>> sum_of_squares([-25, -26])\n(0.0,\
    \ 1.0)\n>>> sum_of_squares([-27, -28])\n(0.0, 1.0)\n>>> sum_of_squares([-29, -30])\n\
    (0.0, 1.0)\n>>> sum_of_squares([-31, -32])\n(0.0, 1.0)\n>>> sum_of_squares([-33,\
    \ -34])\n(0.0, 1.0)\n>>> sum_of_squares([-35, -36])\n(0.0, 1.0)\n>>> sum_of_squares([-37,\
    \ -38])\n(0.0, 1.0)\n>>> sum_of_squares([-39, -40])\n(0.0, 1.0)\n>>> sum_of_squares([-41,\
    \ -42])\n(0.0, 1.0)\n>>> sum_of_squares([-43, -44])\n(0.0, 1.0)\n>>> sum_of_squares([-45,\
    \ -46])\n(0.0, 1.0)\n>>> sum_of_squares([-47, -48])\n(0.0, 1.0)\n>>> sum_of_squares([-49,\
    \ -50])\n(0.0, 1.0)\n>>> sum_of_squares([-51, -52])\n(0.0, 1.0)\n>>> sum_of_squares([-53,\
    \ -54])\n(0.0, 1.0)\n>>> sum_of_squares([-55, -\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t\
    @test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\
    \t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprp72haka.jl:16\nin expression starting at\
    \ /tmp/tmprp72haka.jl:16\n"
  exit_code: 1
  status: SyntaxError
