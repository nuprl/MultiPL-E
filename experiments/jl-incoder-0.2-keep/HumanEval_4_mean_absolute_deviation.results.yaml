name: HumanEval_4_mean_absolute_deviation
language: julia
results:
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum_of_squares = 0.0\n    for x in numbers\n        sum_of_squares +=\
    \ (x-mean(x))^2\n    return sqrt(sum_of_squares/length(numbers))\nend\n</cell>\n\
    <text>\nMean Absolute Deviation is a measure of how far each point is from the\
    \ mean.\nThe mean is calculated using the mean function which calculates the mean\
    \ of the given numbers.\nThe deviation is a measure of how far each point is from\
    \ the mean.\nThe deviation is calculated using the deviation function which calculates\
    \ the deviation from the mean of the given numbers.\nThe mean absolute deviation\
    \ is the average of the absolute value of the deviation.\nThe mean absolute deviation\
    \ is the average of the absolute value of the deviation.\nThe mean absolute deviation\
    \ is the average of the absolute value of the deviation.\nThe mean absolute deviation\
    \ is the average of the absolute value of the deviation.\nThe mean absolute deviation\
    \ is the average of the absolute value of the deviation.\nThe mean absolute deviation\
    \ is the average of the absolute value of the deviation.\nThe mean absolute deviation\
    \ is the average of the absolute value of the deviation.\nThe mean absolute deviation\
    \ is the average of the absolute value of the deviation.\nThe mean absolute deviation\
    \ is the average of the absolute value of the deviation.\nThe mean absolute deviation\
    \ is the average of the absolute value of the deviation.\nThe mean absolute deviation\
    \ is the average of the absolute value of the deviation.\nThe mean absolute deviation\
    \ is the average of the absolute value of the deviation.\nThe mean absolute deviation\
    \ is the average of the absolute value of the deviation.\nThe mean absolute deviation\
    \ is the average of the absolute value of the deviation.\nThe mean absolute deviation\
    \ is the average of the absolute value of the deviation.\nThe mean absolute deviation\
    \ is the average of the absolute value of the deviation.\nThe mean absolute deviation\
    \ is the average of the absolute value of the deviation.\nThe mean absolute deviation\
    \ is the average of the absolute value of the deviation.\nThe mean absolute deviation\
    \ is the average of the absolute value of the deviation.\nThe mean absolute deviation\
    \ is the average of the absolute value of the deviation.\nThe mean absolute deviation\
    \ is the average of the absolute value of the deviation.\nThe mean absolute deviation\
    \ is the average of the absolute value of the deviation.\nThe mean absolute deviation\
    \ is the average of the absolute value of the deviation.\nThe mean absolute deviation\
    \ is the average of the absolute value of the deviation.\nThe mean absolute deviation\
    \ is the average of the absolute value of the deviation.\nThe mean absolute deviation\
    \ is the average of the absolute value of the deviation.\nThe mean absolute deviation\
    \ is the average of the absolute value of the deviation.\nThe mean absolute deviation\
    \ is the average of the absolute value of the deviation.\nThe mean absolute deviation\
    \ is the average of the absolute value of the deviation.\nThe mean absolute deviation\
    \ is the average of the absolute value of the deviation.\nThe mean absolute deviation\
    \ is the average of the absolute value of the deviation.\nThe \nusing Test\n\n\
    @testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2axr61qq.jl:15\nin expression starting at\
    \ /tmp/tmp2axr61qq.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n</cell>\n<text>\nMean Absolute\
    \ Deviation Error\nThe Mean Absolute Deviation Error is the mean of the absolute\
    \ value of the deviations from the mean:\nMADE = average | x - x_mean |\nwhere\
    \ x is the actual value and x_mean is the mean of the dataset.\nThe MADE can be\
    \ calculated using the Mean Absolute Deviation function:\nusing Test\n\n@testset\
    \ begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0])\
    \ == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprf6bfdur.jl:16\nin expression starting at\
    \ /tmp/tmprf6bfdur.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n\
    \    end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute\
    \ Deviation with Stats\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmple05kx44.jl:17\nin expression starting at\
    \ /tmp/tmple05kx44.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd79jgou1.jl:16\nin expression starting at\
    \ /tmp/tmpd79jgou1.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0\n</cell>\n<text>\n\
    Mean Absolute Deviation Error\nThe Mean Absolute Deviation Error is defined as:\n\
    MADE = average | x - x_mean |\nwhere x is the actual value and x_mean is the mean\
    \ of the dataset.\nThe MADE can be calculated as:\nMADE = average | x - x_mean\
    \ |\nwhere x is the actual value and x_mean is the mean of the dataset.\nThe MADE\
    \ can be calculated as:\nMADE = average | x - x_mean |\nwhere x is the actual\
    \ value and x_mean is the mean of the dataset.\nThe MADE can be calculated as:\n\
    MADE = average | x - x_mean |\nwhere x is the actual value and x_mean is the mean\
    \ of the dataset.\nThe MADE can be calculated as:\nMADE = average | x - x_mean\
    \ |\nwhere x is the actual value and x_mean is the mean of the dataset.\nThe MADE\
    \ can be calculated as:\nMADE = average | x - x_mean |\nwhere x is the actual\
    \ value and x_mean is the mean of the dataset.\nThe MADE can be calculated as:\n\
    MADE = average | x - x_mean |\nwhere x is the actual value and x_mean is the mean\
    \ of the dataset.\nThe MADE can be calculated as:\nMADE = average | x - x_mean\
    \ |\nwhere x is the actual value and x_mean is the mean of the dataset.\nThe MADE\
    \ can be calculated as:\nMADE = average | x - x_mean |\nwhere x is the actual\
    \ value and x_mean is the mean of the dataset.\nThe MADE can be calculated as:\n\
    MADE = average | x - x_mean |\nwhere x is the actual value and x_mean is the mean\
    \ of the dataset.\nThe MADE can be calculated as:\nMADE = average | x - x_mean\
    \ |\nwhere x is the actual value and x_mean is the mean of the dataset.\nThe MADE\
    \ can be calculated as:\nMADE = average | x - x_mean |\nwhere x is the actual\
    \ value and x_mean is the mean of the dataset.\nThe MADE can be calculated as:\n\
    MADE = average | x - x_mean |\nwhere x is the actual value and x_mean is the mean\
    \ of the dataset.\nThe MADE can be calculated as:\nMADE = average | x - x_mean\
    \ |\nwhere x is the actual value and x_mean is the mean of the dataset.\nThe MADE\
    \ can be calculated as:\nMADE = average | x - x_mean |\nwhere x is the actual\
    \ \nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv6t2v5wv.jl:16\nin expression starting at\
    \ /tmp/tmpv6t2v5wv.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == 1.2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp2xkwiot8.jl:21\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0]) == 0.5\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmp2xkwiot8.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2xkwiot8.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2xkwiot8.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp2xkwiot8.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0]) == 1.0\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmp2xkwiot8.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2xkwiot8.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2xkwiot8.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp2xkwiot8.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmp2xkwiot8.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2xkwiot8.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2xkwiot8.jl:20\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2xkwiot8.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ with StatsModels\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps4eckoyv.jl:16\nin expression starting at\
    \ /tmp/tmps4eckoyv.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ - Part 2\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy491djx0.jl:16\nin expression starting at\
    \ /tmp/tmpy491djx0.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum_of_squares = 0.0\n    for x in numbers\n        sum_of_squares +=\
    \ pow((x - mean(x)), 2)\n    return sqrt(sum_of_squares / length(numbers))\nend\n\
    </cell>\n<text>\nMean Absolute Deviation Function\nThe mean absolute deviation\
    \ function calculates the mean absolute deviation of a given list of numbers:\n\
    MAD = average | x - x_mean |\nwhere x is the given list of numbers, and x_mean\
    \ is the mean of the given list of numbers.\nThe mean absolute deviation function\
    \ can be used in a variety of ways:\nusing Test\n\n@testset begin\n\ncandidate\
    \ = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7pyo90l0.jl:15\nin expression starting at\
    \ /tmp/tmp7pyo90l0.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum_of_squares = 0.0\n    for n in numbers\n        sum_of_squares +=\
    \ (n - mean(n))^2\n    return sqrt(sum_of_squares/length(numbers))\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that calculates the mean absolute deviation\
    \ for a list of numbers. \nThe function should take a list of numbers and return\
    \ a Float64.\nThe function should calculate the mean of the numbers and then calculate\
    \ the MAD \n(mean absolute deviation) for the list of numbers.\nThe function should\
    \ return the MAD.\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfuctej7s.jl:15\nin expression starting at\
    \ /tmp/tmpfuctej7s.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ with Stats\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqj9osy9t.jl:16\nin expression starting at\
    \ /tmp/tmpqj9osy9t.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a measure of variability of a dataset. \nIt is a good measure of how spread\
    \ out a dataset is. \nIt is a good measure of how far a dataset is from the mean.\n\
    It is a good measure of how far a dataset is from the median.\nIt is a good measure\
    \ of how far a dataset is from the mode.\nIt is a good measure of how far a dataset\
    \ is from the mode.\nIt is a good measure of how far a dataset is from the mode.\n\
    It is a good measure of how far a dataset is from the mode.\nIt is a good measure\
    \ of how far a dataset is from the mode.\nIt is a good measure of how far a dataset\
    \ is from the mode.\nIt is a good measure of how far a dataset is from the mode.\n\
    It is a good measure of how far a dataset is from the mode.\nIt is a good measure\
    \ of how far a dataset is from the mode.\nIt is a good measure of how far a dataset\
    \ is from the mode.\nIt is a good measure of how far a dataset is from the mode.\n\
    It is a good measure of how far a dataset is from the mode.\nIt is a good measure\
    \ of how far a dataset is from the mode.\nIt is a good measure of how far a dataset\
    \ is from the mode.\nIt is a good measure of how far a dataset is from the mode.\n\
    It is a good measure of how far a dataset is from the mode.\nIt is a good measure\
    \ of how far a dataset is from the mode.\nIt is a good measure of how far a dataset\
    \ is from the mode.\nIt is a good measure of how far a dataset is from the mode.\n\
    It is a good measure of how far a dataset is from the mode.\nIt is a good measure\
    \ of how far a dataset is from the mode.\nIt is a good measure of how far a dataset\
    \ is from the mode.\nIt is a good measure of how far a dataset is from the mode.\n\
    It is a good measure of how far a dataset is from the mode.\nIt is a good measure\
    \ of how far a dataset is from the mode.\nIt is a good measure of how far a dataset\
    \ is from the mode.\nIt is a good measure of how far a dataset is from the mode.\n\
    It is a good measure of how far a dataset is from the mode.\nIt is a good measure\
    \ of how far a dataset is from the mode.\nIt is a good measure of how far a dataset\
    \ is from the mode.\nIt is a good measure of how far a dataset is from the mode.\n\
    It is a good measure of how far a dataset is from the mode.\nIt is a good measure\
    \ of how \nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3tl_03qg.jl:16\nin expression starting at\
    \ /tmp/tmp3tl_03qg.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ - Part 2\nThe second part of the Mean Absolute Deviation algorithm is more complicated\
    \ and requires us to calculate the standard deviation for each input number. \n\
    The standard deviation is the square root of the average of the squared deviations\
    \ from the mean:\n    SD = sqrt(average | x - x_mean |)\n    SD = sqrt(average\
    \ | x - x_mean |)\n    SD = sqrt(average | x - x_mean |)\n    SD = sqrt(average\
    \ | x - x_mean |)\n    SD = sqrt(average | x - x_mean |)\n    SD = sqrt(average\
    \ | x - x_mean |)\n    SD = sqrt(average | x - x_mean |)\n    SD = sqrt(average\
    \ | x - x_mean |)\n    SD = sqrt(average | x - x_mean |)\n    SD = sqrt(average\
    \ | x - x_mean |)\n    SD = sqrt(average | x - x_mean |)\n    SD = sqrt(average\
    \ | x - x_mean |)\n    SD = sqrt(average | x - x_mean |)\n    SD = sqrt(average\
    \ | x - x_mean |)\n    SD = sqrt(average | x - x_mean |)\n    SD = sqrt(average\
    \ | x - x_mean |)\n    SD = sqrt(average | x - x_mean |)\n    SD = sqrt(average\
    \ | x - x_mean |)\n    SD = sqrt(average | x - x_mean |)\n    SD = sqrt(average\
    \ | x - x_mean |)\n    SD = sqrt(average | x - x_mean |)\n    SD = sqrt(average\
    \ | x - x_mean |)\n    SD = sqrt(average | x - x_mean |)\n    SD = sqrt(average\
    \ | x - x_mean |)\n    SD = sqrt(average | x - x_mean |)\n    SD = sqrt(average\
    \ | x - x_mean |)\n    SD = sqrt(average | x - x_mean |)\n    SD = sqrt(average\
    \ | x - x_mean |)\n    SD = sqrt(average | x - x_mean |)\n    SD = sqrt(average\
    \ | x - x_mean |)\n    SD = sqrt(average | x - x_mean |)\n    SD = sqrt(average\
    \ | x - x_mean |)\n    SD = sqrt(average | x - x_mean |)\n    SD = sqrt(average\
    \ | x - x_mean |)\n    SD = sqrt(average | x - x_mean |)\n    SD = sqrt(average\
    \ | x - \nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg2r52a_i.jl:16\nin expression starting at\
    \ /tmp/tmpg2r52a_i.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ - Part 2\nThe second part of the Mean Absolute Deviation calculation is the\
    \ Mean Absolute Deviation squared:\n    MAD_Squared = average | x - x_mean | ^\
    \ 2\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nusing Test\n\n@testset\
    \ begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0])\
    \ == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd5zmxwiq.jl:16\nin expression starting at\
    \ /tmp/tmpd5zmxwiq.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0\n</cell>\n<text>\n\
    Mean Absolute Deviation Error\nThe Mean Absolute Deviation Error is defined as:\n\
    MADE = average | x - x_mean |\nwhere x is the actual value and x_mean is the mean\
    \ of the dataset.\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp66k2lpq.jl:16\nin expression starting at\
    \ /tmp/tmpp66k2lpq.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a good metric for evaluating outliers in our dataset. Let's see how it works\
    \ on our dataset.\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt2q451pw.jl:16\nin expression starting at\
    \ /tmp/tmpt2q451pw.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == 1.2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpqq1kptvi.jl:21\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0]) == 0.5\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpqq1kptvi.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqq1kptvi.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqq1kptvi.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpqq1kptvi.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0]) == 1.0\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpqq1kptvi.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqq1kptvi.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqq1kptvi.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpqq1kptvi.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpqq1kptvi.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqq1kptvi.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqq1kptvi.jl:20\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqq1kptvi.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ with Stats\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp83u14vf7.jl:16\nin expression starting at\
    \ /tmp/tmp83u14vf7.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a good measure of how far away each element is\nfrom the mean.\nusing Test\n\
    \n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3xc14atl.jl:16\nin expression starting at\
    \ /tmp/tmp3xc14atl.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    \n    sum = 0.0\n    for i in numbers\n        sum += abs(i - mean)\n\
    \    end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0])\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0])\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0])\n</cell>\n<code\
    \ language=julia-1.5>\nmean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0,\
    \ 7.0, 8.0, 9.0])\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0])\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0])\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0,\
    \ 12.0, 13.0])\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0])\n</cell>\n\
    <code language=julia-1.5>\nmean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0,\
    \ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0])\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0,\
    \ 12.0, 13.0, 14.0, 15.0, 16.0])\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0,\
    \ 16.0, 17.0])\n</cell>\n<code language=julia-\nusing Test\n\n@testset begin\n\
    \ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9mwwsaib.jl:17\nin expression starting at\
    \ /tmp/tmp9mwwsaib.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a measure of how far from mean a dataset is. It is a good measure of how\
    \ far from a mean a dataset is. It is also called Mean Absolute Error (MAE).\n\
    using Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp06g60axt.jl:16\nin expression starting at\
    \ /tmp/tmp06g60axt.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a measure of how far from mean a dataset is. It is a good measure of outliers,\
    \ as outliers can have different magnitudes depending on the dataset.\nusing Test\n\
    \n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvxb0v7df.jl:16\nin expression starting at\
    \ /tmp/tmpvxb0v7df.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ - Part 2\nThe second part of this problem is to calculate the mean absolute\
    \ deviation for a set of numbers. \nThe formula for calculating MAD is:\nMAD =\
    \ average | x - x_mean |\nwhere x is the input number, x_mean is the mean of the\
    \ input numbers, and average is the mean of the MAD calculations.\nWrite a function\
    \ that takes in a list of numbers and returns the mean absolute deviation for\
    \ each number.\nFor example, if the input numbers are [1.0, 2.0, 3.0, 4.0], the\
    \ output should be [1.0, 1.0, 1.0, 1.0].\nThe function should return an array\
    \ of numbers of length equal to the number of input numbers.\nThe function should\
    \ return an array of numbers of length equal to the number of input numbers.\n\
    For example, if the input numbers are [1.0, 2.0, 3.0, 4.0], the output should\
    \ be [1.0, 1.0, 1.0, 1.0].\nThe function should return an array of numbers of\
    \ length equal to the number of input numbers.\nFor example, if the input numbers\
    \ are [1.0, 2.0, 3.0, 4.0], the output should be [1.0, 1.0, 1.0, 1.0].\nThe function\
    \ should return an array of numbers of length equal to the number of input numbers.\n\
    For example, if the input numbers are [1.0, 2.0, 3.0, 4.0], the output should\
    \ be [1.0, 1.0, 1.0, 1.0].\nThe function should return an array of numbers of\
    \ length equal to the number of input numbers.\nFor example, if the input numbers\
    \ are [1.0, 2.0, 3.0, 4.0], the output should be [1.0, 1.0, 1.0, 1.0].\nThe function\
    \ should return an array of numbers of length equal to the number of input numbers.\n\
    For example, if the input numbers are [1.0, 2.0, 3.0, 4.0], the output should\
    \ be [1.0, 1.0, 1.0, 1.0].\nThe function should return an array of numbers of\
    \ length equal to the number of input numbers.\nFor example, if the input numbers\
    \ are [1.0, 2.0, 3.0, 4.0], the output should be [1.0, 1.0, 1.0, 1.0].\nThe function\
    \ should return an array of numbers of length equal to the number of input numbers.\n\
    For example, if the input numbers are [1.0, 2.0, 3.0, 4.0], the output should\
    \ be [1.0, 1.0, 1.0, 1.0].\nThe function should return an array of numbers of\
    \ length equal to the number of input numbers.\nFor example, if the input numbers\
    \ are [1.0, 2.0, 3.0, 4.0], the output should be [1.0, 1.0, 1.0, 1.0].\nThe function\
    \ should return an array of numbers of length equal to the number of input numbers.\n\
    For example, if the input numbers are [1.0, 2.0, 3.0, 4.0], the output should\
    \ be [1.0, 1.0, 1.0, 1.0].\nThe function should return an array of numbers of\
    \ length equal to the number of input numbers.\nFor example, if the input numbers\
    \ are [1.0, 2.0, 3.0, 4.0], the output should be [1.0, 1.0, 1.0, 1.0].\nThe function\
    \ should return an array of numbers of length equal to the number of input numbers.\n\
    For example, if the input numbers are [1.0, 2.0, 3.0, 4.0], the output should\
    \ be [1.0, 1.0, 1.0, 1.0]\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7zr702ro.jl:16\nin expression starting at\
    \ /tmp/tmp7zr702ro.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a measure of how far from a mean a data point is. It is calculated as the\
    \ average of the absolute difference between each element and a centerpoint (mean\
    \ in this case):\nMAD = average | x - x_mean |\nMean Absolute Deviation is the\
    \ average absolute difference between each element and a centerpoint (mean in\
    \ this case):\nMAD = average | x - x_mean |\nMean Absolute Deviation is the average\
    \ absolute difference between each element and a centerpoint (mean in this case):\n\
    MAD = average | x - x_mean |\nMean Absolute Deviation is the average absolute\
    \ difference between each element and a centerpoint (mean in this case):\nMAD\
    \ = average | x - x_mean |\nMean Absolute Deviation is the average absolute difference\
    \ between each element and a centerpoint (mean in this case):\nMAD = average |\
    \ x - x_mean |\nMean Absolute Deviation is the average absolute difference between\
    \ each element and a centerpoint (mean in this case):\nMAD = average | x - x_mean\
    \ |\nMean Absolute Deviation is the average absolute difference between each element\
    \ and a centerpoint (mean in this case):\nMAD = average | x - x_mean |\nMean Absolute\
    \ Deviation is the average absolute difference between each element and a centerpoint\
    \ (mean in this case):\nMAD = average | x - x_mean |\nMean Absolute Deviation\
    \ is the average absolute difference between each element and a centerpoint (mean\
    \ in this case):\nMAD = average | x - x_mean |\nMean Absolute Deviation is the\
    \ average absolute difference between each element and a centerpoint (mean in\
    \ this case):\nMAD = average | x - x_mean |\nMean Absolute Deviation is the average\
    \ absolute difference between each element and a centerpoint (mean in this case):\n\
    MAD = average | x - x_mean |\nMean Absolute Deviation is the average absolute\
    \ difference between each element and a centerpoint (mean in this case):\nMAD\
    \ = average | x - x_mean |\nMean Absolute Deviation is the average absolute difference\
    \ between each element and a centerpoint (mean in this case):\nMAD = average |\
    \ x - x_mean |\nMean Absolute Deviation is the average absolute difference between\
    \ each element and a centerpoint (mean in this case):\nMAD = average | x - x_mean\
    \ |\nMean Absolute Deviation is the average absolute difference between each element\
    \ and a centerpoint (\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp17h4jru_.jl:16\nin expression starting at\
    \ /tmp/tmp17h4jru_.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum_of_squares = 0.0\n    for n in numbers\n        sum_of_squares +=\
    \ (n - mean(n))^2 \n    return sqrt(sum_of_squares/length(numbers))\nend\n</cell>\n\
    <text>\nMean Absolute Deviation Function\nusing Test\n\n@testset begin\n\ncandidate\
    \ = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp52_p8uqh.jl:15\nin expression starting at\
    \ /tmp/tmp52_p8uqh.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ - Part 2\nThe second part of this exercise is to use Julia's built-in statistics\
    \ functions to calculate the mean absolute deviation for a list of numbers.\n\
    using Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt8ok_dns.jl:16\nin expression starting at\
    \ /tmp/tmpt8ok_dns.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ Function\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjlg1xiuq.jl:16\nin expression starting at\
    \ /tmp/tmpjlg1xiuq.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0\n</cell>\n<text>\n\
    Mean Absolute Deviation Error\nThe Mean Absolute Deviation Error is defined as:\n\
    MADE = average | x - x_mean |\nwhere x is the actual value and x_mean is the mean\
    \ of the dataset.\nThe MADE can be calculated as:\nMADE = |x - x_mean|\nwhere\
    \ x is the actual value and x_mean is the mean of the dataset.\nThe MADE Error\
    \ is defined as:\nMADE_error = MADE / MAD\nwhere MAD is the Mean Absolute Deviation\
    \ of the dataset.\nThe MADE_error can be calculated as:\nMADE_error = MADE / MAD\n\
    where MAD is the Mean Absolute Deviation of the dataset.\nThe MADE_error can be\
    \ calculated as:\nMADE_error = MADE / MAD\nwhere MAD is the Mean Absolute Deviation\
    \ of the dataset.\nThe MADE_error can be calculated as:\nMADE_error = MADE / MAD\n\
    where MAD is the Mean Absolute Deviation of the dataset.\nThe MADE_error can be\
    \ calculated as:\nMADE_error = MADE / MAD\nwhere MAD is the Mean Absolute Deviation\
    \ of the dataset.\nThe MADE_error can be calculated as:\nMADE_error = MADE / MAD\n\
    where MAD is the Mean Absolute Deviation of the dataset.\nThe MADE_error can be\
    \ calculated as:\nMADE_error = MADE / MAD\nwhere MAD is the Mean Absolute Deviation\
    \ of the dataset.\nThe MADE_error can be calculated as:\nMADE_error = MADE / MAD\n\
    where MAD is the Mean Absolute Deviation of the dataset.\nThe MADE_error can be\
    \ calculated as:\nMADE_error = MADE / MAD\nwhere MAD is the Mean Absolute Deviation\
    \ of the dataset.\nThe MADE_error can be calculated as:\nMADE_error = MADE / MAD\n\
    where MAD is the Mean Absolute Deviation of the dataset.\nThe MADE_error can be\
    \ calculated as:\nMADE_error = MADE / MAD\nwhere MAD is the Mean Absolute Deviation\
    \ of the dataset.\nThe MADE_error can be calculated as:\nMADE_error = MADE / MAD\n\
    where MAD is the Mean Absolute Deviation of the \nusing Test\n\n@testset begin\n\
    \ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6wzhjjri.jl:16\nin expression starting at\
    \ /tmp/tmp6wzhjjri.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for i in numbers\n        sum += abs(i - mean)\n    end\n\
    \    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2iy4c_fa.jl:16\nin expression starting at\
    \ /tmp/tmp2iy4c_fa.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ with StatsModels\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1cwcinek.jl:16\nin expression starting at\
    \ /tmp/tmp1cwcinek.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for i in numbers\n        sum += abs(i - mean)\n    end\n\
    \    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ - Part 2\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp10o50nif.jl:16\nin expression starting at\
    \ /tmp/tmp10o50nif.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a measure of how far each point is from the mean.\nIt is a good measure of\
    \ outliers and is often used in conjunction with other measures.\nIt is a good\
    \ measure of how far each point is from the mean.\nIt is a good measure of how\
    \ far each point is from the mean.\nIt is a good measure of how far each point\
    \ is from the mean.\nIt is a good measure of how far each point is from the mean.\n\
    It is a good measure of how far each point is from the mean.\nIt is a good measure\
    \ of how far each point is from the mean.\nIt is a good measure of how far each\
    \ point is from the mean.\nIt is a good measure of how far each point is from\
    \ the mean.\nIt is a good measure of how far each point is from the mean.\nIt\
    \ is a good measure of how far each point is from the mean.\nIt is a good measure\
    \ of how far each point is from the mean.\nIt is a good measure of how far each\
    \ point is from the mean.\nIt is a good measure of how far each point is from\
    \ the mean.\nIt is a good measure of how far each point is from the mean.\nIt\
    \ is a good measure of how far each point is from the mean.\nIt is a good measure\
    \ of how far each point is from the mean.\nIt is a good measure of how far each\
    \ point is from the mean.\nIt is a good measure of how far each point is from\
    \ the mean.\nIt is a good measure of how far each point is from the mean.\nIt\
    \ is a good measure of how far each point is from the mean.\nIt is a good measure\
    \ of how far each point is from the mean.\nIt is a good measure of how far each\
    \ point is from the mean.\nIt is a good measure of how far each point is from\
    \ the mean.\nIt is a good measure of how far each point is from the mean.\nIt\
    \ is a good measure of how far each point is from the mean.\nIt is a good measure\
    \ of how far each point is from the mean.\nIt is a good measure of how far each\
    \ point is from the mean.\nIt is a good measure of how far each point is from\
    \ the mean.\nIt is a good measure of how far each point is from the mean.\nIt\
    \ is a good measure of how far each point is from the mean.\nIt is a good measure\
    \ of how far each point is from the mean.\nIt is a good measure of how far each\
    \ point \nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7btc0n3p.jl:16\nin expression starting at\
    \ /tmp/tmp7btc0n3p.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpve2txn58.jl:16\nin expression starting at\
    \ /tmp/tmpve2txn58.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ Function\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1rkggjge.jl:16\nin expression starting at\
    \ /tmp/tmp1rkggjge.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum_of_squares = 0.0\n    for x in numbers\n        sum_of_squares +=\
    \ (x - mean(x))^2 \n    return sqrt(sum_of_squares/length(numbers))\nend\n</cell>\n\
    <text>\nMean Absolute Deviation is a measure of how far a point is from the mean\
    \ of its dataset. \nIt is a good measure of outliers and is often used in machine\
    \ learning to determine how far a point is from the mean.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0])\
    \ == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdlkrcbxk.jl:15\nin expression starting at\
    \ /tmp/tmpdlkrcbxk.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    # Test the function\nmean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n</cell>\n\
    <text>\nMean Absolute Deviation Error\nThe Mean Absolute Deviation Error is defined\
    \ as:\nMADE = average | x - x_mean |\nwhere x is the input vector and x_mean is\
    \ the mean of the input vector.\nThe MADE can be calculated using the Mean Absolute\
    \ Deviation function defined above:\nMADE = mean_absolute_deviation([1.0, 2.0,\
    \ 3.0, 4.0])\nThe MADE Error is defined as:\nMADE_Error = MADE / MAD\nwhere MAD\
    \ is the Mean Absolute Deviation calculated above.\nThe MADE_Error can be calculated\
    \ using the Mean Absolute Deviation Error function defined above:\nMADE_Error\
    \ = mean_absolute_error([1.0, 2.0, 3.0, 4.0])\nThe MADE_Error Error is defined\
    \ as:\nMADE_Error = MADE_Error / MAD\nwhere MAD is the Mean Absolute Deviation\
    \ calculated above.\nThe MADE_Error Error is defined as:\nMADE_Error = MADE_Error\
    \ / MAD\nwhere MAD is the Mean Absolute Deviation calculated above.\nThe MADE_Error\
    \ Error is defined as:\nMADE_Error = MADE_Error / MAD\nwhere MAD is the Mean Absolute\
    \ Deviation calculated above.\nThe MADE_Error Error is defined as:\nMADE_Error\
    \ = MADE_Error / MAD\nwhere MAD is the Mean Absolute Deviation calculated above.\n\
    The MADE_Error Error is defined as:\nMADE_Error = MADE_Error / MAD\nwhere MAD\
    \ is the Mean Absolute Deviation calculated above.\nThe MADE_Error Error is defined\
    \ as:\nMADE_Error = MADE_Error / MAD\nwhere MAD is the Mean Absolute Deviation\
    \ calculated above.\nThe MADE_Error Error is defined as:\nMADE_Error = MADE_Error\
    \ / MAD\nwhere MAD is the Mean Absolute Deviation calculated above.\nThe MADE_Error\
    \ Error is defined as:\nMADE_Error = MADE_Error / MAD\nwhere MAD is the Mean Absolute\
    \ Deviation calculated above.\nThe MADE_Error Error is defined as:\nMADE_Error\
    \ = MADE_Error / MAD\nwhere MAD is the Mean Absolute De\nusing Test\n\n@testset\
    \ begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0])\
    \ == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm04zpec9.jl:16\nin expression starting at\
    \ /tmp/tmpm04zpec9.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for i in numbers\n        sum += abs(i - mean)\n    end\n\
    \    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ - Part 2\nNow let's calculate the mean absolute deviation for the entire dataset.\n\
    using Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplqzyfm25.jl:16\nin expression starting at\
    \ /tmp/tmplqzyfm25.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ - Part 2\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8axwwclc.jl:16\nin expression starting at\
    \ /tmp/tmp8axwwclc.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp38mjrozo.jl:16\nin expression starting at\
    \ /tmp/tmp38mjrozo.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n</cell>\n<text>\nMean Absolute\
    \ Deviation with Stats\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyaa6shd2.jl:16\nin expression starting at\
    \ /tmp/tmpyaa6shd2.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum_of_squared_deviations = 0.0\n    for n in numbers\n        sum_of_squared_deviations\
    \ += ((n - mean(n))^2)\n    return sqrt(sum_of_squared_deviations / length(numbers))\n\
    end\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n</cell>\n<text>\nThe Median Absolute Deviation\nThe median absolute deviation\
    \ (MAD) is a robust measure of statistical dispersion.\nIt is a robust measure\
    \ of dispersion that is robust to outliers.\nThe median absolute deviation is\
    \ calculated as:\nMAD = median | x - x_median |\nwhere x_median is the median\
    \ of all input numbers:\nx_median = median(numbers)\nThe median absolute deviation\
    \ is a robust measure of dispersion.\nIt is a robust measure of dispersion that\
    \ is robust to outliers.\nThe median absolute deviation is calculated as:\nMAD\
    \ = median | x - x_median |\nwhere x_median is the median of all input numbers:\n\
    x_median = median(numbers)\nThe median absolute deviation is a robust measure\
    \ of dispersion.\nIt is a robust measure of dispersion that is robust to outliers.\n\
    The median absolute deviation is calculated as:\nMAD = median | x - x_median |\n\
    where x_median is the median of all input numbers:\nx_median = median(numbers)\n\
    The median absolute deviation is a robust measure of dispersion.\nIt is a robust\
    \ measure of dispersion that is robust to outliers.\nThe median absolute deviation\
    \ is calculated as:\nMAD = median | x - x_median |\nwhere x_median is the median\
    \ of all input numbers:\nx_median = median(numbers)\nThe median absolute deviation\
    \ is a robust measure of dispersion.\nIt is a robust measure of dispersion that\
    \ is robust to outliers.\nThe median absolute deviation is calculated as:\nMAD\
    \ = median | x - x_median |\nwhere x_median is the median of all input numbers:\n\
    x_median = median(numbers)\nThe median absolute deviation is a robust measure\
    \ of dispersion.\nIt is a robust measure of dispersion that is robust to outliers.\n\
    The median absolute deviation is calculated as:\nMAD = median | x - x_median |\n\
    where x_median is the median of all input numbers:\nx_median = median(numbers)\n\
    The median absolute deviation is a robust measure of dispersion.\nIt is a robust\
    \ measure \nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph6rprh4k.jl:15\nin expression starting at\
    \ /tmp/tmph6rprh4k.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgl8hcqk9.jl:16\nin expression starting at\
    \ /tmp/tmpgl8hcqk9.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoehpt5pq.jl:16\nin expression starting at\
    \ /tmp/tmpoehpt5pq.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n</cell>\n<text>\nMean Absolute\
    \ Deviation with Weights\nThe mean absolute deviation is a good measure of how\
    \ far away a point is from the mean.\nIt can be used for outlier detection.\n\
    It can be used for outlier detection.\nIt can be used for outlier detection.\n\
    It can be used for outlier detection.\nIt can be used for outlier detection.\n\
    It can be used for outlier detection.\nIt can be used for outlier detection.\n\
    It can be used for outlier detection.\nIt can be used for outlier detection.\n\
    It can be used for outlier detection.\nIt can be used for outlier detection.\n\
    It can be used for outlier detection.\nIt can be used for outlier detection.\n\
    It can be used for outlier detection.\nIt can be used for outlier detection.\n\
    It can be used for outlier detection.\nIt can be used for outlier detection.\n\
    It can be used for outlier detection.\nIt can be used for outlier detection.\n\
    It can be used for outlier detection.\nIt can be used for outlier detection.\n\
    It can be used for outlier detection.\nIt can be used for outlier detection.\n\
    It can be used for outlier detection.\nIt can be used for outlier detection.\n\
    It can be used for outlier detection.\nIt can be used for outlier detection.\n\
    It can be used for outlier detection.\nIt can be used for outlier detection.\n\
    It can be used for outlier detection.\nIt can be used for outlier detection.\n\
    It can be used for outlier detection.\nIt can be used for outlier detection.\n\
    It can be used for outlier detection.\nIt can be used for outlier detection.\n\
    It can be used for outlier detection.\nIt can be used for outlier detection.\n\
    It can be used for outlier detection.\nIt can be used for outlier detection.\n\
    It can be used for outlier detection.\nIt can be used for outlier detection.\n\
    It can be used for outlier detection.\nIt can be used for outlier detection.\n\
    It can be used for outlier detection.\nIt can be used for outlier detection.\n\
    It can be used for outlier detection.\nIt can be used for outlier detection.\n\
    It can be used for outlier detection.\nIt can be used for outlier detection.\n\
    It can be used for outlier detection.\nIt can be used for outlier detection.\n\
    It can be used for outlier detection.\nIt can be used for outlier detection.\n\
    It can be used for outli\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy9751_0t.jl:16\nin expression starting at\
    \ /tmp/tmpy9751_0t.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ - Part 2\nNow let's look at another metric that can be used to measure the quality\
    \ of our predictions. This is called the Mean Squared Error (MSE).\nusing Test\n\
    \n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvl05fisx.jl:16\nin expression starting at\
    \ /tmp/tmpvl05fisx.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0\n</cell>\n<text>\n\
    The median is another useful statistic to know:\nusing Test\n\n@testset begin\n\
    \ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphhkefyhd.jl:16\nin expression starting at\
    \ /tmp/tmphhkefyhd.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ with Stats\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt2z4bczh.jl:16\nin expression starting at\
    \ /tmp/tmpt2z4bczh.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n</cell>\n<text>\nThe function above\
    \ is very simple, yet it works very well. Let's now implement the function above\
    \ to calculate the mean absolute deviation for a list of numbers. We will use\
    \ the function above to calculate the mean absolute deviation for a list of numbers.\
    \ We will use the function above to calculate the mean absolute deviation for\
    \ a list of numbers. We will use the function above to calculate the mean absolute\
    \ deviation for a list of numbers. We will use the function above to calculate\
    \ the mean absolute deviation for a list of numbers. We will use the function\
    \ above to calculate the mean absolute deviation for a list of numbers. We will\
    \ use the function above to calculate the mean absolute deviation for a list of\
    \ numbers. We will use the function above to calculate the mean absolute deviation\
    \ for a list of numbers. We will use the function above to calculate the mean\
    \ absolute deviation for a list of numbers. We will use the function above to\
    \ calculate the mean absolute deviation for a list of numbers. We will use the\
    \ function above to calculate the mean absolute deviation for a list of numbers.\
    \ We will use the function above to calculate the mean absolute deviation for\
    \ a list of numbers. We will use the function above to calculate the mean absolute\
    \ deviation for a list of numbers. We will use the function above to calculate\
    \ the mean absolute deviation for a list of numbers. We will use the function\
    \ above to calculate the mean absolute deviation for a list of numbers. We will\
    \ use the function above to calculate the mean absolute deviation for a list of\
    \ numbers. We will use the function above to calculate the mean absolute deviation\
    \ for a list of numbers. We will use the function above to calculate the mean\
    \ absolute deviation for a list of numbers. We will use the function above to\
    \ calculate the mean absolute deviation for a list of numbers. We will use the\
    \ function above to calculate the mean absolute deviation for a list of numbers.\
    \ We will use the function above to calculate the mean absolute deviation for\
    \ a list of numbers. We will use the function above to calculate the mean absolute\
    \ deviation for a list of numbers. We will use the function above to calculate\
    \ the mean absolute deviation for a list of numbers. We will use the function\
    \ above to calculate the mean absolute deviation for a list of numbers. We will\
    \ use the function above to calculate the mean absolute deviation for a list of\
    \ numbers. We will use the function above to calculate the mean absolute deviation\
    \ for a list of numbers. We will use the function above to calculate the mean\
    \ absolute deviation for a list of numbers. We will use the function above to\
    \ calculate the mean absolute deviation for a list of numbers. We will use the\
    \ function above to calculate the mean absolute deviation for a list of numbers.\
    \ We will use the function above to calculate the mean \nusing Test\n\n@testset\
    \ begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0])\
    \ == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpearsy0_y.jl:16\nin expression starting at\
    \ /tmp/tmpearsy0_y.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_l1nqhfx.jl:16\nin expression starting at\
    \ /tmp/tmp_l1nqhfx.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ - Part 2\nThe mean absolute deviation is a useful metric to evaluate a regression\
    \ model. \nIt is a good idea to compare the mean absolute deviation to the standard\
    \ deviation. \nThe standard deviation is a measure of variability and is a measure\
    \ of how spread out a distribution is \nfrom its mean. \nThe mean absolute deviation\
    \ is the average of the absolute values of the differences between \neach data\
    \ point and the mean of the dataset. \nThe mean absolute deviation is a good metric\
    \ to evaluate a regression model. \nIt is a good idea to compare the mean absolute\
    \ deviation to the standard deviation. \nThe standard deviation is a measure of\
    \ variability and is a measure of how spread out a distribution is \nfrom its\
    \ mean. \nThe mean absolute deviation is the average of the absolute values of\
    \ the differences between \neach data point and the mean of the dataset. \nThe\
    \ mean absolute deviation is a good metric to evaluate a regression model. \n\
    It is a good idea to compare the mean absolute deviation to the standard deviation.\
    \ \nThe standard deviation is a measure of variability and is a measure of how\
    \ spread out a distribution is \nfrom its mean. \nThe mean absolute deviation\
    \ is the average of the absolute values of the differences between \neach data\
    \ point and the mean of the dataset. \nThe mean absolute deviation is a good metric\
    \ to evaluate a regression model. \nIt is a good idea to compare the mean absolute\
    \ deviation to the standard deviation. \nThe standard deviation is a measure of\
    \ variability and is a measure of how spread out a distribution is \nfrom its\
    \ mean. \nThe mean absolute deviation is the average of the absolute values of\
    \ the differences between \neach data point and the mean of the dataset. \nThe\
    \ mean absolute deviation is a good metric to evaluate a regression model. \n\
    It is a good idea to compare the mean absolute deviation to the standard deviation.\
    \ \nThe standard deviation is a measure of variability and is a measure of how\
    \ spread out a distribution is \nfrom its mean. \nThe mean absolute deviation\
    \ is the average of the absolute values of the differences between \neach data\
    \ point and the mean of the dataset. \nThe mean absolute deviation is a good metric\
    \ to evaluate a regression model. \nIt is a good idea to compare the mean absolute\
    \ deviation to the standard deviation. \nThe standard deviation is a measure of\
    \ variability and is a measure of how spread out a distribution is \nfrom its\
    \ mean. \nThe mean absolute deviation is the average of the absolute values of\
    \ the differences between \neach data point and the mean of the dataset. \nThe\
    \ \nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmply0g5cik.jl:16\nin expression starting at\
    \ /tmp/tmply0g5cik.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a good metric to evaluate how well a model has learned the data.\nusing Test\n\
    \n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0r_y_lxd.jl:16\nin expression starting at\
    \ /tmp/tmp0r_y_lxd.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for i in numbers\n        sum += abs(i - mean(i))\n   \
    \ end\n    return sum / length(numbers)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == 1.2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpyqicul2h.jl:21\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0]) == 0.5\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpyqicul2h.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyqicul2h.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyqicul2h.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpyqicul2h.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0]) == 1.0\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpyqicul2h.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyqicul2h.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyqicul2h.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpyqicul2h.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpyqicul2h.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyqicul2h.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyqicul2h.jl:20\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyqicul2h.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nThe function above\
    \ calculates the mean absolute deviation of a given list of numbers. Let's see\
    \ how it works:\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps6yf7ksa.jl:16\nin expression starting at\
    \ /tmp/tmps6yf7ksa.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0\n</cell>\n<text>\n\
    Mean Absolute Deviation Error\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2mv_pfsu.jl:16\nin expression starting at\
    \ /tmp/tmp2mv_pfsu.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ with Stats\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4dmmh5b6.jl:16\nin expression starting at\
    \ /tmp/tmp4dmmh5b6.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum_of_squared_deviations = 0.0\n    for x in numbers\n        sum_of_squared_deviations\
    \ += pow((x - mean), 2)\n    return sqrt(sum_of_squared_deviations / length(numbers))\n\
    end\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 6.0])\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0])\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0])\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0])\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0])\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0,\
    \ 12.0])\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0])\n</cell>\n<code\
    \ language=julia-1.5>\nmean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0,\
    \ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0])\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0,\
    \ 12.0, 13.0, 14.0, 15.0])\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0,\
    \ 16.0])\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0,\
    \ 17.0])\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1.0, \n\
    using Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm0vjzcjj.jl:15\nin expression starting at\
    \ /tmp/tmpm0vjzcjj.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a good metric to evaluate how well a model has learned the data.\nusing Test\n\
    \n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb76taypq.jl:16\nin expression starting at\
    \ /tmp/tmpb76taypq.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum_of_squares = 0.0\n    for x in numbers\n        sum_of_squares +=\
    \ pow(x-mean(numbers), 2)\n    return sqrt(sum_of_squares/length(numbers))\nend\n\
    </cell>\n<text>\nMean Absolute Deviation - Part 2\nNow let's calculate the mean\
    \ absolute deviation for a dataset with outliers:\nusing Test\n\n@testset begin\n\
    \ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgqvxs6ld.jl:15\nin expression starting at\
    \ /tmp/tmpgqvxs6ld.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ - Part 2\nNow let's try it out on some real data!\nusing Test\n\n@testset begin\n\
    \ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9lw5bl6j.jl:16\nin expression starting at\
    \ /tmp/tmp9lw5bl6j.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a measure of variability of a set of numbers. \nIt is a measure of how spread\
    \ out a dataset is. \nIt is a good measure of how outliers vary from one dataset\
    \ to another.\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppo7mx38y.jl:16\nin expression starting at\
    \ /tmp/tmppo7mx38y.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum_of_squares = 0.0\n    for number in numbers\n        sum_of_squares\
    \ += (number - mean(number))^2\n    end\n    return sqrt(sum_of_squares/length(numbers))\n\
    end\n</cell>\n<text>\nMean Absolute Deviation - Part 2\nNow let's implement the\
    \ Mean Absolute Deviation function using Julia's built-in functions. We'll start\
    \ by defining a function that calculates the mean of a given list of numbers:\n\
    using Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprypscub1.jl:16\nin expression starting at\
    \ /tmp/tmprypscub1.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprp53cbxz.jl:16\nin expression starting at\
    \ /tmp/tmprp53cbxz.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n</cell>\n<text>\nMean Absolute\
    \ Deviation with StatsModels\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwxkihwa7.jl:16\nin expression starting at\
    \ /tmp/tmpwxkihwa7.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ with Stats\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyokvcqfg.jl:16\nin expression starting at\
    \ /tmp/tmpyokvcqfg.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ Function\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaqbf50yo.jl:16\nin expression starting at\
    \ /tmp/tmpaqbf50yo.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ - Part 2\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvnx8dxkh.jl:16\nin expression starting at\
    \ /tmp/tmpvnx8dxkh.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a metric that measures how far from a mean a sample deviates from its mean.\n\
    The higher the MAD, the better the prediction. \nThe MAD can be calculated using\
    \ the Mean Absolute Deviation function.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzjzogo2g.jl:16\nin expression starting at\
    \ /tmp/tmpzjzogo2g.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for i in numbers\n        sum += abs(i - mean(i))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    # Test the function\nmean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n</cell>\n\
    <text>\nMean Absolute Deviation Error\nusing Test\n\n@testset begin\n\ncandidate\
    \ = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_q9azu6i.jl:16\nin expression starting at\
    \ /tmp/tmp_q9azu6i.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a good measure of how far a dataset is from its mean.\nIt can be used for\
    \ outlier detection.\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxpsn6oy_.jl:16\nin expression starting at\
    \ /tmp/tmpxpsn6oy_.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum_of_squares = 0.0\n    for x in numbers\n        sum_of_squares +=\
    \ pow((x - mean(x)), 2)\n    return sqrt(sum_of_squares / length(numbers))\nend\n\
    </cell>\n<text>\nMean Absolute Deviation is a measure of how far each point is\
    \ from the mean of its group.\nIt is a good measure of outliers and is often used\
    \ in machine learning to determine how far each point is from the mean of its\
    \ group.\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsf_p5l52.jl:15\nin expression starting at\
    \ /tmp/tmpsf_p5l52.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ Function\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkqvrz0bi.jl:16\nin expression starting at\
    \ /tmp/tmpkqvrz0bi.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n\
    \    end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute\
    \ Deviation Function\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9dhctsaw.jl:17\nin expression starting at\
    \ /tmp/tmp9dhctsaw.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n</cell>\n<text>\nMean Absolute\
    \ Deviation with StatsModels\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsbhr8849.jl:16\nin expression starting at\
    \ /tmp/tmpsbhr8849.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ - Part 2\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6pjunoh2.jl:16\nin expression starting at\
    \ /tmp/tmp6pjunoh2.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a measure of how far each point is from the mean of its group.\nusing Test\n\
    \n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj2bsf6xj.jl:16\nin expression starting at\
    \ /tmp/tmpj2bsf6xj.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ - Part 2\nThe second part of the Mean Absolute Deviation calculation is the\
    \ variance of the dataset. \nThe variance is the average of the squared deviations\
    \ from the mean:\n    Variance = average | x - x_mean |^2\n    Variance = average\
    \ | x - x_mean |^2\n    Variance = average | x - x_mean |^2\n    Variance = average\
    \ | x - x_mean |^2\n    Variance = average | x - x_mean |^2\n    Variance = average\
    \ | x - x_mean |^2\n    Variance = average | x - x_mean |^2\n    Variance = average\
    \ | x - x_mean |^2\n    Variance = average | x - x_mean |^2\n    Variance = average\
    \ | x - x_mean |^2\n    Variance = average | x - x_mean |^2\n    Variance = average\
    \ | x - x_mean |^2\n    Variance = average | x - x_mean |^2\n    Variance = average\
    \ | x - x_mean |^2\n    Variance = average | x - x_mean |^2\n    Variance = average\
    \ | x - x_mean |^2\n    Variance = average | x - x_mean |^2\n    Variance = average\
    \ | x - x_mean |^2\n    Variance = average | x - x_mean |^2\n    Variance = average\
    \ | x - x_mean |^2\n    Variance = average | x - x_mean |^2\n    Variance = average\
    \ | x - x_mean |^2\n    Variance = average | x - x_mean |^2\n    Variance = average\
    \ | x - x_mean |^2\n    Variance = average | x - x_mean |^2\n    Variance = average\
    \ | x - x_mean |^2\n    Variance = average | x - x_mean |^2\n    Variance = average\
    \ | x - x_mean |^2\n    Variance = average | x - x_mean |^2\n    Variance = average\
    \ | x - x_mean |^2\n    Variance = average | x - x_mean |^2\n    Variance = average\
    \ | x - x_mean |^2\n    Variance = average | x - x_mean |^2\n    Variance = average\
    \ | x - x_mean |^2\n    Variance = average | x - x_mean |^2\n    Variance = average\
    \ | x - x_mean |^2\n    Variance = average | x - \nusing Test\n\n@testset begin\n\
    \ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpavmiimmk.jl:16\nin expression starting at\
    \ /tmp/tmpavmiimmk.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum_of_squares = 0.0\n    for n in numbers\n        sum_of_squares +=\
    \ (n - mean(n))^2\n    return sqrt(sum_of_squares/length(numbers))\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptptjxmqg.jl:15\nin expression starting at\
    \ /tmp/tmptptjxmqg.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    \n    sum_of_squares = 0.0\n    for number in numbers\n        sum_of_squares\
    \ += (number - mean(numbers))^2\n    end\n    return sqrt(sum_of_squares/length(numbers))\n\
    end\n</cell>\n<text>\nMean Absolute Deviation with StatsModels\nusing Test\n\n\
    @testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplm6xo68r.jl:17\nin expression starting at\
    \ /tmp/tmplm6xo68r.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for i in numbers\n        sum += abs(i - mean)\n    end\n\
    \    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ with Stats\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp64nroens.jl:16\nin expression starting at\
    \ /tmp/tmp64nroens.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ - Part 2\nNow let's try it out on some real data.\nusing Test\n\n@testset begin\n\
    \ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4lgd5o2w.jl:16\nin expression starting at\
    \ /tmp/tmp4lgd5o2w.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ - Part 2\nThe second part of the Mean Absolute Deviation algorithm is more involved.\
    \ \nIt calculates the standard deviation for each input number and then calculates\
    \ the mean of those standard deviations. \nThis new mean is then subtracted from\
    \ the original input number to get the new mean deviation. \nThis new mean deviation\
    \ is then compared to the original input number to calculate the MAD.\nusing Test\n\
    \n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg8k5vh5c.jl:16\nin expression starting at\
    \ /tmp/tmpg8k5vh5c.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a measure of how far from a mean a dataset is. It is a good measure of how\
    \ far a dataset is from its mean.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj3iur2gq.jl:16\nin expression starting at\
    \ /tmp/tmpj3iur2gq.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ Function\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp799uav75.jl:16\nin expression starting at\
    \ /tmp/tmp799uav75.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == 1.2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpbwynb5to.jl:21\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0]) == 0.5\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpbwynb5to.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbwynb5to.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbwynb5to.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpbwynb5to.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0]) == 1.0\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpbwynb5to.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbwynb5to.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbwynb5to.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpbwynb5to.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpbwynb5to.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbwynb5to.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbwynb5to.jl:20\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbwynb5to.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for i in numbers\n        sum += abs(i - mean)\n    end\n\
    \    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ with StatsModels\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv48049_o.jl:16\nin expression starting at\
    \ /tmp/tmpv48049_o.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ - Part 2\nThe second part of the Mean Absolute Deviation algorithm is now complete.\
    \ \nIt calculates the mean of the absolute deviations from the mean.\nThis new\
    \ mean is then subtracted from the original mean to give the new mean.\nThis new\
    \ mean is then divided by the number of elements in the dataset to give the new\
    \ standard deviation.\nThe standard deviation is the square root of the new standard\
    \ deviation.\nThe new standard deviation is then multiplied by 100 to give the\
    \ new standard deviation in percentages.\nThe new standard deviation is then rounded\
    \ to the nearest integer.\nThe new standard deviation is then returned as a string.\n\
    The new standard deviation is then printed in the console.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0])\
    \ == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp41naytg_.jl:16\nin expression starting at\
    \ /tmp/tmp41naytg_.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ - Part 2\nNow let's implement the Mean Absolute Deviation function using Julia's\
    \ built-in functionality.\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpongtxwb5.jl:16\nin expression starting at\
    \ /tmp/tmpongtxwb5.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for i in numbers\n        sum += abs(i - mean)\n    end\n\
    \    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ - Part 2\nThe second part of the Mean Absolute Deviation calculation is the\
    \ Mean Absolute Deviation Prior to each data point. \nThis can be calculated using\
    \ the function defined above:\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7jebjf5a.jl:16\nin expression starting at\
    \ /tmp/tmp7jebjf5a.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ with StatsModels\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzzojem10.jl:16\nin expression starting at\
    \ /tmp/tmpzzojem10.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a good metric to evaluate a model's performance.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0])\
    \ == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp22zh37g0.jl:16\nin expression starting at\
    \ /tmp/tmp22zh37g0.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == 1.2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpsunhx6e9.jl:21\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0]) == 0.5\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpsunhx6e9.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsunhx6e9.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsunhx6e9.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpsunhx6e9.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0]) == 1.0\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpsunhx6e9.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsunhx6e9.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsunhx6e9.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpsunhx6e9.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpsunhx6e9.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsunhx6e9.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsunhx6e9.jl:20\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsunhx6e9.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum_of_squares = 0.0\n    for number in numbers\n        sum_of_squares\
    \ += (number - mean(numbers))^2\n    end\n    return sqrt(sum_of_squares/length(numbers))\n\
    end\n</cell>\n<text>\nMean Absolute Deviation Function\nThe mean absolute deviation\
    \ function calculates the mean absolute deviation of a set of numbers. \nIt takes\
    \ in a list of numbers and returns the mean absolute deviation of this set of\
    \ numbers. \nThe mean absolute deviation is the average absolute difference between\
    \ each element and a centerpoint (mean in this case):\nMAD = average | x - x_mean\
    \ |\nMean Absolute Deviation Function\nThe mean absolute deviation function calculates\
    \ the mean absolute deviation of a set of numbers. \nIt takes in a list of numbers\
    \ and returns the mean absolute deviation of this set of numbers. \nThe mean absolute\
    \ deviation is the average absolute difference between each element and a centerpoint\
    \ (mean in this case):\nMAD = average | x - x_mean |\nMean Absolute Deviation\
    \ Function\nThe mean absolute deviation function calculates the mean absolute\
    \ deviation of a set of numbers. \nIt takes in a list of numbers and returns the\
    \ mean absolute deviation of this set of numbers. \nThe mean absolute deviation\
    \ is the average absolute difference between each element and a centerpoint (mean\
    \ in this case):\nMAD = average | x - x_mean |\nMean Absolute Deviation Function\n\
    The mean absolute deviation function calculates the mean absolute deviation of\
    \ a set of numbers. \nIt takes in a list of numbers and returns the mean absolute\
    \ deviation of this set of numbers. \nThe mean absolute deviation is the average\
    \ absolute difference between each element and a centerpoint (mean in this case):\n\
    MAD = average | x - x_mean |\nMean Absolute Deviation Function\nThe mean absolute\
    \ deviation function calculates the mean absolute deviation of a set of numbers.\
    \ \nIt takes in a list of numbers and returns the mean absolute deviation of this\
    \ set of numbers. \nThe mean absolute deviation is the average absolute difference\
    \ between each element and a centerpoint (mean in this case):\nMAD = average |\
    \ x - x_mean |\nMean Absolute Deviation Function\nThe mean absolute deviation\
    \ function calculates the mean absolute deviation of a set of numbers. \nIt takes\
    \ in a list of numbers and returns the mean absolute deviation of this set of\
    \ numbers. \nThe mean absolute deviation is the average absolute difference between\
    \ each element and a centerpoint (mean in this case):\nMAD = average | x - x_mean\
    \ |\nMean Absolute Deviation Function\nThe mean absolute deviation function calculates\
    \ the mean absolute deviation of a set of numbers. \nIt takes in a list of numbers\
    \ and returns the mean absolute \nusing Test\n\n@testset begin\n\ncandidate =\
    \ mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9a1q98xl.jl:16\nin expression starting at\
    \ /tmp/tmp9a1q98xl.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for i in numbers\n        sum += abs(i - mean)\n    end\n\
    \    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a good metric for evaluating outliers in your dataset. Let's try it out on\
    \ our dataset.\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyntqycc7.jl:16\nin expression starting at\
    \ /tmp/tmpyntqycc7.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == 1.2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp_m7af64_.jl:21\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0]) == 0.5\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmp_m7af64_.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_m7af64_.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_m7af64_.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp_m7af64_.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0]) == 1.0\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmp_m7af64_.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_m7af64_.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_m7af64_.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp_m7af64_.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmp_m7af64_.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_m7af64_.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_m7af64_.jl:20\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_m7af64_.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for i in numbers\n        sum += abs(i - mean(i))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n</cell>\n<text>\nMean Absolute\
    \ Deviation with StatsModels\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_hzqaxyi.jl:16\nin expression starting at\
    \ /tmp/tmp_hzqaxyi.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a measure of how far each point is from the mean.\nIt is a good measure of\
    \ outliers and is often used in machine learning to determine how far each point\
    \ is from the mean.\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi8_acqbj.jl:16\nin expression starting at\
    \ /tmp/tmpi8_acqbj.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a measure of how far each point is from the mean.\nIt is a good measure of\
    \ outliers and is often used in statistical applications.\nThe mean absolute deviation\
    \ of a set of numbers is calculated as:\nMAD = average | x - x_mean |\nwhere x\
    \ is the set of numbers and x_mean is the mean of x.\nThe mean absolute deviation\
    \ is calculated as:\nMAD = average | x - x_mean |\nwhere x is the set of numbers\
    \ and x_mean is the mean of x.\nThe mean absolute deviation is the average absolute\
    \ difference between each\nelement and a centerpoint (mean in this case):\nMAD\
    \ = average | x - x_mean |\nwhere x is the set of numbers and x_mean is the mean\
    \ of x.\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpabjwgvzt.jl:16\nin expression starting at\
    \ /tmp/tmpabjwgvzt.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ - Part 2\nThe second part of the Mean Absolute Deviation calculation is the\
    \ mean of the absolute differences between each element and the mean of the entire\
    \ dataset. \nThis can be calculated using the mean_absolute_deviation function\
    \ we defined above:\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoqwntcte.jl:16\nin expression starting at\
    \ /tmp/tmpoqwntcte.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n</cell>\n<text>\nMean Absolute\
    \ Deviation with Julia\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxtl_tgjk.jl:16\nin expression starting at\
    \ /tmp/tmpxtl_tgjk.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for i in numbers\n        sum += abs(i - mean)\n    end\n\
    \    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ with Stats\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9rsq8hsu.jl:16\nin expression starting at\
    \ /tmp/tmp9rsq8hsu.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n</cell>\n<text>\nThe mean absolute\
    \ deviation function above is very similar to the mean function we saw earlier.\
    \ Let's compare the two functions to see which one performs better:\nusing Test\n\
    \n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp93er9kk5.jl:16\nin expression starting at\
    \ /tmp/tmp93er9kk5.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for i in numbers\n        sum += abs(i - mean(i))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a measure of how far each point is from the mean of the dataset. \nThe smaller\
    \ the MAD, the more distant the point is from the mean.\nThe MAD can be calculated\
    \ using the function mean_absolute_deviation.\nusing Test\n\n@testset begin\n\n\
    candidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphso45quq.jl:16\nin expression starting at\
    \ /tmp/tmphso45quq.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for i in numbers\n        sum += abs(i - mean(i))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n</cell>\n<text>\nThe above\
    \ function takes ~1 second on my laptop. We can do better!\nusing Test\n\n@testset\
    \ begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0])\
    \ == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg6ke7q_o.jl:16\nin expression starting at\
    \ /tmp/tmpg6ke7q_o.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a measure of how far each point is from the mean of the dataset. \nIt is\
    \ a good measure of how far each point is from the mean of the dataset. \nIt is\
    \ a good measure of how far each point is from the mean of the dataset.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbsv3rjq6.jl:16\nin expression starting at\
    \ /tmp/tmpbsv3rjq6.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpip01tnzu.jl:16\nin expression starting at\
    \ /tmp/tmpip01tnzu.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum_of_squares = 0.0\n    for n in numbers\n        sum_of_squares +=\
    \ (n - mean(n))^2\n    return sqrt(sum_of_squares/length(numbers))\nend\n</cell>\n\
    <text>\nMean Absolute Deviation is a measure of how far from a mean a dataset\
    \ is. It is a good measure to compare datasets because it is independent of the\
    \ distribution of the dataset. For example, a dataset of random numbers may have\
    \ a mean of 0, but a MAD of 1 would be indistinguishable from a dataset of random\
    \ numbers with a mean of 1.\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaib4bvsq.jl:15\nin expression starting at\
    \ /tmp/tmpaib4bvsq.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ - Part 2\nThe second part of the Mean Absolute Deviation algorithm is more complicated\
    \ and requires us to calculate the standard deviation for each data point in the\
    \ dataset. Standard deviation is the square root of the average of the squared\
    \ differences between each data point and the mean.\nusing Test\n\n@testset begin\n\
    \ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbuwrg0me.jl:16\nin expression starting at\
    \ /tmp/tmpbuwrg0me.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj5hp1yg8.jl:16\nin expression starting at\
    \ /tmp/tmpj5hp1yg8.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    \n    sum_of_squared_deviations = 0.0\n    for number in numbers\n   \
    \     sum_of_squared_deviations += math.pow(number - mean(numbers), 2)\n    end\n\
    \    return math.sqrt(sum_of_squared_deviations)\nend\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0])\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0])\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0])\n</cell>\n<code\
    \ language=julia-1.5>\nmean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0,\
    \ 7.0, 8.0, 9.0])\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0])\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0])\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0,\
    \ 12.0, 13.0])\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0])\n</cell>\n\
    <code language=julia-1.5>\nmean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0,\
    \ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0])\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0,\
    \ 12.0, 13.0, 14.0, 15.0, 16.0])\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, \nusing Test\n\n@testset\
    \ begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0])\
    \ == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp19kms8o8.jl:17\nin expression starting at\
    \ /tmp/tmp19kms8o8.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ - Part 2\nNow let's try and implement the Mean Absolute Deviation function using\
    \ Julia's built-in functionality.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo45fbfvn.jl:16\nin expression starting at\
    \ /tmp/tmpo45fbfvn.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ - Part 2\nThe second part of the Mean Absolute Deviation calculation is the\
    \ Mean Absolute Deviation Prior to each data point. \nThe Mean Absolute Deviation\
    \ Prior to each data point is the average of the absolute difference between each\
    \ element and the mean of the entire dataset.\nThe Mean Absolute Deviation Prior\
    \ to each data point is calculated using the following formula:\nMAD_PRIOR = average\
    \ | x - x_mean |\nWhere x is the current data point and x_mean is the mean of\
    \ the entire dataset.\nThe Mean Absolute Deviation Prior to each data point is\
    \ calculated using the following formula:\nMAD_PRIOR = average | x - x_mean |\n\
    Where x is the current data point and x_mean is the mean of the entire dataset.\n\
    The Mean Absolute Deviation Prior to each data point is calculated using the following\
    \ formula:\nMAD_PRIOR = average | x - x_mean |\nWhere x is the current data point\
    \ and x_mean is the mean of the entire dataset.\nThe Mean Absolute Deviation Prior\
    \ to each data point is calculated using the following formula:\nMAD_PRIOR = average\
    \ | x - x_mean |\nWhere x is the current data point and x_mean is the mean of\
    \ the entire dataset.\nThe Mean Absolute Deviation Prior to each data point is\
    \ calculated using the following formula:\nMAD_PRIOR = average | x - x_mean |\n\
    Where x is the current data point and x_mean is the mean of the entire dataset.\n\
    The Mean Absolute Deviation Prior to each data point is calculated using the following\
    \ formula:\nMAD_PRIOR = average | x - x_mean |\nWhere x is the current data point\
    \ and x_mean is the mean of the entire dataset.\nThe Mean Absolute Deviation Prior\
    \ to each data point is calculated using the following formula:\nMAD_PRIOR = average\
    \ | x - x_mean |\nWhere x is the current data point and x_mean is the mean of\
    \ the entire dataset.\nThe Mean Absolute Deviation Prior to each data point is\
    \ calculated using the following formula:\nMAD_PRIOR = average | x - x_mean |\n\
    Where x is the current data point and x_mean is the mean of the entire dataset.\n\
    The Mean Absolute Deviation Prior to each data point is calculated using the following\
    \ formula:\nMAD_PRIOR = average | x - x_mean |\n\nusing Test\n\n@testset begin\n\
    \ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7oqop0q6.jl:16\nin expression starting at\
    \ /tmp/tmp7oqop0q6.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n</cell>\n<text>\nMean Absolute\
    \ Deviation with StatsModels\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpic8_droy.jl:16\nin expression starting at\
    \ /tmp/tmpic8_droy.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ Function\nThe Mean Absolute Deviation Function (MAD) is a measure of how far\
    \ a point is from the mean.\nThe MAD function calculates the MAD value for a list\
    \ of numbers:\nMAD = average | x - x_mean |\nThe MAD function calculates the MAD\
    \ value for a list of numbers:\nMAD = average | x - x_mean |\nThe MAD function\
    \ calculates the MAD value for a list of numbers:\nMAD = average | x - x_mean\
    \ |\nThe MAD function calculates the MAD value for a list of numbers:\nMAD = average\
    \ | x - x_mean |\nThe MAD function calculates the MAD value for a list of numbers:\n\
    MAD = average | x - x_mean |\nThe MAD function calculates the MAD value for a\
    \ list of numbers:\nMAD = average | x - x_mean |\nThe MAD function calculates\
    \ the MAD value for a list of numbers:\nMAD = average | x - x_mean |\nThe MAD\
    \ function calculates the MAD value for a list of numbers:\nMAD = average | x\
    \ - x_mean |\nThe MAD function calculates the MAD value for a list of numbers:\n\
    MAD = average | x - x_mean |\nThe MAD function calculates the MAD value for a\
    \ list of numbers:\nMAD = average | x - x_mean |\nThe MAD function calculates\
    \ the MAD value for a list of numbers:\nMAD = average | x - x_mean |\nThe MAD\
    \ function calculates the MAD value for a list of numbers:\nMAD = average | x\
    \ - x_mean |\nThe MAD function calculates the MAD value for a list of numbers:\n\
    MAD = average | x - x_mean |\nThe MAD function calculates the MAD value for a\
    \ list of numbers:\nMAD = average | x - x_mean |\nThe MAD function calculates\
    \ the MAD value for a list of numbers:\nMAD = average | x - x_mean |\nThe MAD\
    \ function calculates the MAD value for a list of numbers:\nMAD = average | x\
    \ - x_mean |\nThe MAD function calculates the MAD value for a list of numbers:\n\
    MAD = average | x - x_mean |\nThe MAD function calcul\nusing Test\n\n@testset\
    \ begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0])\
    \ == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2ua__xym.jl:16\nin expression starting at\
    \ /tmp/tmp2ua__xym.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for i in numbers\n        sum += abs(i - mean(i))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0])\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0])\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0])\n</cell>\n<code\
    \ language=julia-1.5>\nmean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0,\
    \ 7.0, 8.0, 9.0])\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0])\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0])\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0,\
    \ 12.0, 13.0])\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0])\n</cell>\n\
    <code language=julia-1.5>\nmean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0,\
    \ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0])\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0,\
    \ 12.0, 13.0, 14.0, 15.0, 16.0])\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0,\
    \ 16.0, 17.0])\n</cell>\n<code language=julia-1.5\nusing Test\n\n@testset begin\n\
    \ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvxyj9kkm.jl:16\nin expression starting at\
    \ /tmp/tmpvxyj9kkm.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum_of_squared_deviations = 0.0\n    for number in numbers\n        sum_of_squared_deviations\
    \ += math.pow(number - mean(numbers), 2)\n    return math.sqrt(sum_of_squared_deviations\
    \ / length(numbers))\nend\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmptbiv3owo.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptbiv3owo.jl:1\n\
    in expression starting at /tmp/tmptbiv3owo.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ with Stats\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnn0hpv9d.jl:16\nin expression starting at\
    \ /tmp/tmpnn0hpv9d.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ - Part 2\nThe second part of this assignment is to write a function which calculates\
    \ the mean absolute deviation for a list of numbers. Your function should take\
    \ in two numbers, x and x_mean, and return the mean absolute deviation of x from\
    \ x_mean.\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiqvp2p88.jl:16\nin expression starting at\
    \ /tmp/tmpiqvp2p88.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a good measure of how far numbers are from their mean.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0])\
    \ == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyafbzqxb.jl:16\nin expression starting at\
    \ /tmp/tmpyafbzqxb.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum_of_squares = 0.0\n    for n in numbers\n        sum_of_squares +=\
    \ (n - mean(n))^2\n    end\n    return sqrt(sum_of_squares/length(numbers))\n\
    end\n</cell>\n<text>\nMean Absolute Deviation - Part 2\nThe second part of the\
    \ Mean Absolute Deviation algorithm is more complicated and requires us to calculate\
    \ the standard deviation for each data point before we calculate the MAD. \nThe\
    \ standard deviation is the square root of the average of the squared differences\
    \ between each data point and the mean.\nThe standard deviation is the square\
    \ root of the average of the squared differences between each data point and the\
    \ mean.\nThe standard deviation is the square root of the average of the squared\
    \ differences between each data point and the mean.\nThe standard deviation is\
    \ the square root of the average of the squared differences between each data\
    \ point and the mean.\nThe standard deviation is the square root of the average\
    \ of the squared differences between each data point and the mean.\nThe standard\
    \ deviation is the square root of the average of the squared differences between\
    \ each data point and the mean.\nThe standard deviation is the square root of\
    \ the average of the squared differences between each data point and the mean.\n\
    The standard deviation is the square root of the average of the squared differences\
    \ between each data point and the mean.\nThe standard deviation is the square\
    \ root of the average of the squared differences between each data point and the\
    \ mean.\nThe standard deviation is the square root of the average of the squared\
    \ differences between each data point and the mean.\nThe standard deviation is\
    \ the square root of the average of the squared differences between each data\
    \ point and the mean.\nThe standard deviation is the square root of the average\
    \ of the squared differences between each data point and the mean.\nThe standard\
    \ deviation is the square root of the average of the squared differences between\
    \ each data point and the mean.\nThe standard deviation is the square root of\
    \ the average of the squared differences between each data point and the mean.\n\
    The standard deviation is the square root of the average of the squared differences\
    \ between each data point and the mean.\nThe standard deviation is the square\
    \ root of the average of the squared differences between each data point and the\
    \ mean.\nThe standard deviation is the square root of the average of the squared\
    \ differences between each data point and the mean.\nThe standard deviation is\
    \ the square root of the average of the squared differences between each data\
    \ point and the mean.\nThe standard deviation is the square root of the average\
    \ of the squared differences between each data point and the mean.\nThe standard\
    \ deviation is the square root of the average of the squared differences between\
    \ each data point and the mean.\nThe standard deviation is the square root of\
    \ the average of the squared differences between each data point and the mean.\n\
    The standard deviation is the square root of the \nusing Test\n\n@testset begin\n\
    \ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg924ktnk.jl:16\nin expression starting at\
    \ /tmp/tmpg924ktnk.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a good metric for evaluating outliers in our dataset. Let's see how it works\
    \ on our dataset.\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqwc0inbx.jl:16\nin expression starting at\
    \ /tmp/tmpqwc0inbx.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a measure of how far each point is from the mean.\nThe smaller the MAD, the\
    \ more spread out each point is.\nThe MAD can be interpreted as the average distance\
    \ between each point and the\nmean.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp32rn6wo3.jl:16\nin expression starting at\
    \ /tmp/tmp32rn6wo3.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ - Part 2\nNow let's calculate the mean absolute deviation for a set of numbers.\
    \ We will use the same data as before, but this time we will calculate the mean\
    \ absolute deviation for each of the numbers in the dataset.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0])\
    \ == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6bbsetti.jl:16\nin expression starting at\
    \ /tmp/tmp6bbsetti.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ - Part 2\nThe second part of the Mean Absolute Deviation algorithm is more complicated\
    \ and requires us to calculate the mean and standard deviation for each data point.\
    \ We'll start by defining a function which calculates the mean and standard deviation\
    \ of a given data point:\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnshaneny.jl:16\nin expression starting at\
    \ /tmp/tmpnshaneny.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a measure of variability in a dataset. \nIt is a good measure of how spread\
    \ out a dataset is. \nIt is a good measure of how far a dataset is from the mean.\n\
    using Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsym0algr.jl:16\nin expression starting at\
    \ /tmp/tmpsym0algr.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for i in numbers\n        sum += abs(i - mean)\n    end\n\
    \    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ with Stats\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6plgz2wz.jl:16\nin expression starting at\
    \ /tmp/tmp6plgz2wz.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    \n    sum_of_squared_deviations = 0.0\n    for number in numbers\n   \
    \     sum_of_squared_deviations += math.pow(number - mean(numbers), 2)\n    end\n\
    \    return math.sqrt(sum_of_squared_deviations / length(numbers))\nend\n</cell>\n\
    <text>\nMean Absolute Deviation - Part 2\nThe second part of the Mean Absolute\
    \ Deviation algorithm is more complicated and requires some more mathematical\
    \ calculations. We will implement it here and compare it to the previous part.\n\
    using Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl95w2ic6.jl:17\nin expression starting at\
    \ /tmp/tmpl95w2ic6.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a measure of how far from a mean a number is. It can be used for outlier\
    \ detection.\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprrfovvva.jl:16\nin expression starting at\
    \ /tmp/tmprrfovvva.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a metric that measures how far a dataset is from its mean.\nIt is a good\
    \ way to measure the variability of a dataset.\nIt is a good way to compare how\
    \ different datasets compare with each other.\nIt is a good way to compare how\
    \ different datasets compare with each other.\nIt is a good way to compare how\
    \ different datasets compare with each other.\nIt is a good way to compare how\
    \ different datasets compare with each other.\nIt is a good way to compare how\
    \ different datasets compare with each other.\nIt is a good way to compare how\
    \ different datasets compare with each other.\nIt is a good way to compare how\
    \ different datasets compare with each other.\nIt is a good way to compare how\
    \ different datasets compare with each other.\nIt is a good way to compare how\
    \ different datasets compare with each other.\nIt is a good way to compare how\
    \ different datasets compare with each other.\nIt is a good way to compare how\
    \ different datasets compare with each other.\nIt is a good way to compare how\
    \ different datasets compare with each other.\nIt is a good way to compare how\
    \ different datasets compare with each other.\nIt is a good way to compare how\
    \ different datasets compare with each other.\nIt is a good way to compare how\
    \ different datasets compare with each other.\nIt is a good way to compare how\
    \ different datasets compare with each other.\nIt is a good way to compare how\
    \ different datasets compare with each other.\nIt is a good way to compare how\
    \ different datasets compare with each other.\nIt is a good way to compare how\
    \ different datasets compare with each other.\nIt is a good way to compare how\
    \ different datasets compare with each other.\nIt is a good way to compare how\
    \ different datasets compare with each other.\nIt is a good way to compare how\
    \ different datasets compare with each other.\nIt is a good way to compare how\
    \ different datasets compare with each other.\nIt is a good way to compare how\
    \ different datasets compare with each other.\nIt is a good way to compare how\
    \ different datasets compare with each other.\nIt is a good way to compare how\
    \ different datasets compare with each other.\nIt is a good way to compare how\
    \ different datasets compare with each other.\nIt is a good way to compare how\
    \ different datasets compare with each other.\nIt is a good way to compare how\
    \ different datasets compare with each other.\nIt is a good way to compare how\
    \ different datasets compare with each other.\nIt is a good way to compare how\
    \ different datasets compare with each other.\nIt is a good way to compare how\
    \ different datasets compare with each other.\n\nusing Test\n\n@testset begin\n\
    \ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9vftkxlv.jl:16\nin expression starting at\
    \ /tmp/tmp9vftkxlv.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    \n    sum = 0.0\n    for i in numbers\n        sum += abs(i - mean)\n\
    \    end\n    return sum / length(numbers)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmppngp2mob.jl:22\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0]) == 0.5\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmppngp2mob.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppngp2mob.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppngp2mob.jl:21\ntest set:\
    \ Error During Test at /tmp/tmppngp2mob.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0]) == 1.0\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmppngp2mob.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppngp2mob.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppngp2mob.jl:21\ntest set:\
    \ Error During Test at /tmp/tmppngp2mob.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmppngp2mob.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppngp2mob.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppngp2mob.jl:21\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppngp2mob.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ - Part 2\nNow let's try and implement the Mean Absolute Deviation function using\
    \ Julia's built-in functions. We'll start by defining a function that calculates\
    \ the mean of a given vector:\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_if8yi3n.jl:16\nin expression starting at\
    \ /tmp/tmp_if8yi3n.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ with Stats\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx4ajz92c.jl:16\nin expression starting at\
    \ /tmp/tmpx4ajz92c.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n</cell>\n<text>\nThe median is\
    \ another useful statistic to know:\nusing Test\n\n@testset begin\n\ncandidate\
    \ = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmvlmqxlb.jl:16\nin expression starting at\
    \ /tmp/tmpmvlmqxlb.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0\n</cell>\n<text>\n\
    Mean Absolute Deviation Error\nThe Mean Absolute Deviation Error is defined as:\n\
    MADE = average | x - x_mean |\nwhere x is the actual value and x_mean is the mean\
    \ of the dataset.\nThe MADE can be calculated as:\nMADE = |x - x_mean|\nwhere\
    \ x is the actual value and x_mean is the mean of the dataset.\nThe MADE can be\
    \ calculated as:\nMADE = |x - x_mean|\nwhere x is the actual value and x_mean\
    \ is the mean of the dataset.\nThe MADE can be calculated as:\nMADE = |x - x_mean|\n\
    where x is the actual value and x_mean is the mean of the dataset.\nThe MADE can\
    \ be calculated as:\nMADE = |x - x_mean|\nwhere x is the actual value and x_mean\
    \ is the mean of the dataset.\nThe MADE can be calculated as:\nMADE = |x - x_mean|\n\
    where x is the actual value and x_mean is the mean of the dataset.\nThe MADE can\
    \ be calculated as:\nMADE = |x - x_mean|\nwhere x is the actual value and x_mean\
    \ is the mean of the dataset.\nThe MADE can be calculated as:\nMADE = |x - x_mean|\n\
    where x is the actual value and x_mean is the mean of the dataset.\nThe MADE can\
    \ be calculated as:\nMADE = |x - x_mean|\nwhere x is the actual value and x_mean\
    \ is the mean of the dataset.\nThe MADE can be calculated as:\nMADE = |x - x_mean|\n\
    where x is the actual value and x_mean is the mean of the dataset.\nThe MADE can\
    \ be calculated as:\nMADE = |x - x_mean|\nwhere x is the actual value and x_mean\
    \ is the mean of the dataset.\nThe MADE can be calculated as:\nMADE = |x - x_mean|\n\
    where x is the actual value and x_mean is the mean of the dataset.\nThe MADE can\
    \ be calculated as:\nMADE = |x - x_mean|\nwhere x is the actual value and x_mean\
    \ is the mean of the dataset.\nThe MADE can be calculated as:\nMADE = |x - x_mean|\n\
    where x is the actual value and x_mean is the mean of the dataset.\nThe MADE can\
    \ be calculated as:\nMADE = |x - x_mean|\nwhere x is the actual value and x_mean\
    \ is the mean of the dataset.\nThe MADE can be calculated \nusing Test\n\n@testset\
    \ begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0])\
    \ == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppt9guojj.jl:16\nin expression starting at\
    \ /tmp/tmppt9guojj.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that calculates the mean absolute deviation for a list of numbers.\
    \ \nThe function should take a list of numbers as an argument and return the mean\
    \ absolute deviation\nof the numbers in the list.\nThe function should return\
    \ the mean absolute deviation for the numbers in the list.\nThe function should\
    \ raise an error if the input list is empty.\nThe function should raise an error\
    \ if the input list contains non-numbers.\nThe function should raise an error\
    \ if the input list contains numbers that are not numbers.\nThe function should\
    \ raise an error if the input list contains numbers that are not numbers.\nThe\
    \ function should raise an error if the input list contains numbers that are not\
    \ numbers.\nThe function should raise an error if the input list contains numbers\
    \ that are not numbers.\nThe function should raise an error if the input list\
    \ contains numbers that are not numbers.\nThe function should raise an error if\
    \ the input list contains numbers that are not numbers.\nThe function should raise\
    \ an error if the input list contains numbers that are not numbers.\nThe function\
    \ should raise an error if the input list contains numbers that are not numbers.\n\
    The function should raise an error if the input list contains numbers that are\
    \ not numbers.\nThe function should raise an error if the input list contains\
    \ numbers that are not numbers.\nThe function should raise an error if the input\
    \ list contains numbers that are not numbers.\nThe function should raise an error\
    \ if the input list contains numbers that are not numbers.\nThe function should\
    \ raise an error if the input list contains numbers that are not numbers.\nThe\
    \ function should raise an error if the input list contains numbers that are not\
    \ numbers.\nThe function should raise an error if the input list contains numbers\
    \ that are not numbers.\nThe function should raise an error if the input list\
    \ contains numbers that are not numbers.\nThe function should raise an error if\
    \ the input list contains numbers that are not numbers.\nThe function should raise\
    \ an error if the input list contains numbers that are not numbers.\nThe function\
    \ should raise an error if the input list contains numbers that are not numbers.\n\
    The function should raise an error if the input list contains numbers that are\
    \ not numbers.\nThe function should raise an error if the input list contains\
    \ numbers that are not numbers.\nThe function should raise an error if the input\
    \ list contains numbers that are not numbers.\nThe function should raise an error\
    \ if the input list contains numbers that are not numbers.\nThe function should\
    \ raise an error if the input list contains numbers that are not numbers.\nThe\
    \ function should raise an error if the input list contains numbers that are not\
    \ numbers.\nThe function should raise an error if the input list contains numbers\
    \ that are not numbers.\nThe function should raise an error if the input list\
    \ contains numbers that are not numbers.\nThe function should raise an error if\
    \ the input list contains numbers that are not numbers.\nThe function should raise\
    \ an error if the input list contains numbers that are not numbers.\nusing Test\n\
    \n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt0_uryk1.jl:16\nin expression starting at\
    \ /tmp/tmpt0_uryk1.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n\
    \    end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0])\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0])\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0])\n</cell>\n<code\
    \ language=julia-1.5>\nmean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0,\
    \ 7.0, 8.0, 9.0])\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0])\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0])\n\
    </cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0])\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0,\
    \ 12.0, 13.0])\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0])\n</cell>\n\
    <code language=julia-1.5>\nmean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0,\
    \ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0])\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0,\
    \ 12.0, 13.0, 14.0, 15.0, 16.0])\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0,\
    \ 16.0, 17.0])\n</cell>\n<code language=juli\nusing Test\n\n@testset begin\n\n\
    candidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpagm0qclq.jl:17\nin expression starting at\
    \ /tmp/tmpagm0qclq.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum_of_squares = 0.0\n    for number in numbers\n        sum_of_squares\
    \ += (number - mean(number))^2 \n    end\n    return sqrt(sum_of_squares/length(numbers))\n\
    end\n</cell>\n<text>\nMean Absolute Deviation with Stats\nusing Test\n\n@testset\
    \ begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0])\
    \ == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfo6jznwj.jl:16\nin expression starting at\
    \ /tmp/tmpfo6jznwj.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ - Part 2\nNow let's implement the mean absolute deviation function using Julia's\
    \ built-in functionality.\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3wm5kyna.jl:16\nin expression starting at\
    \ /tmp/tmp3wm5kyna.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for i in numbers\n        sum += abs(i - mean)\n    end\n\
    \    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n</cell>\n<text>\nMean Absolute Deviation Error\nThe Mean Absolute\
    \ Deviation Error is defined as:\nMADE = average | x - x_mean |\nwhere x is the\
    \ actual value and x_mean is the mean of the dataset.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0])\
    \ == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppi3poz10.jl:16\nin expression starting at\
    \ /tmp/tmppi3poz10.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == 1.2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp2bfnwjrw.jl:21\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0]) == 0.5\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmp2bfnwjrw.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2bfnwjrw.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2bfnwjrw.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp2bfnwjrw.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0]) == 1.0\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmp2bfnwjrw.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2bfnwjrw.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2bfnwjrw.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp2bfnwjrw.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmp2bfnwjrw.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2bfnwjrw.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2bfnwjrw.jl:20\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2bfnwjrw.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n</cell>\n<text>\nMean Absolute\
    \ Deviation is a measure of variability (spread) in a set of numbers. It is defined\
    \ as the average of the absolute values of the deviations from the mean.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvn5ksqni.jl:16\nin expression starting at\
    \ /tmp/tmpvn5ksqni.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    \n    sum_of_squares = 0.0\n    for number in numbers\n        sum_of_squares\
    \ += (number - mean(number))^2\n    end\n    return sqrt(sum_of_squares/length(numbers))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t\
    @test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) ==\
    \ 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmprx76n0z6.jl:22\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0]) == 0.5\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmprx76n0z6.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprx76n0z6.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprx76n0z6.jl:21\ntest set:\
    \ Error During Test at /tmp/tmprx76n0z6.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0]) == 1.0\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmprx76n0z6.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprx76n0z6.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprx76n0z6.jl:21\ntest set:\
    \ Error During Test at /tmp/tmprx76n0z6.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmprx76n0z6.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprx76n0z6.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprx76n0z6.jl:21\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprx76n0z6.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ - Part 2\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpffyfrkb0.jl:16\nin expression starting at\
    \ /tmp/tmpffyfrkb0.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0\n</cell>\n<text>\n\
    Exercise: Calculate the mean absolute deviation for a list of numbers, using Julia's\
    \ built-in mean function.\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkes42cf8.jl:16\nin expression starting at\
    \ /tmp/tmpkes42cf8.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a metric that measures how far a dataset is from the mean.\nIt is a good\
    \ way to measure the variability of a dataset.\nThe mean is often used as a centerpoint\
    \ for calculating MAD.\nThe MAD value can be calculated using the Mean Absolute\
    \ Deviation function.\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp02ojtxgd.jl:16\nin expression starting at\
    \ /tmp/tmp02ojtxgd.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ - Part 2\nNow let's calculate the mean absolute deviation for a set of numbers.\
    \ We'll do this by first calculating the mean and then calculating the deviation\
    \ for each number in the set.\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpos60wt79.jl:16\nin expression starting at\
    \ /tmp/tmpos60wt79.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphk7z8aja.jl:16\nin expression starting at\
    \ /tmp/tmphk7z8aja.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ - Part 2\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph0xgnmko.jl:16\nin expression starting at\
    \ /tmp/tmph0xgnmko.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n</cell>\n<text>\nMean Absolute\
    \ Deviation with StatsModels\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxxhng09h.jl:16\nin expression starting at\
    \ /tmp/tmpxxhng09h.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n\
    \    end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute\
    \ Deviation - Part 2\nThe mean absolute deviation function above is actually a\
    \ special case of mean absolute deviation. \nThe mean absolute deviation function\
    \ above is actually a special case of mean absolute deviation. \nThe mean absolute\
    \ deviation function above is actually a special case of mean absolute deviation.\
    \ \nThe mean absolute deviation function above is actually a special case of mean\
    \ absolute deviation. \nThe mean absolute deviation function above is actually\
    \ a special case of mean absolute deviation. \nThe mean absolute deviation function\
    \ above is actually a special case of mean absolute deviation. \nThe mean absolute\
    \ deviation function above is actually a special case of mean absolute deviation.\
    \ \nThe mean absolute deviation function above is actually a special case of mean\
    \ absolute deviation. \nThe mean absolute deviation function above is actually\
    \ a special case of mean absolute deviation. \nThe mean absolute deviation function\
    \ above is actually a special case of mean absolute deviation. \nThe mean absolute\
    \ deviation function above is actually a special case of mean absolute deviation.\
    \ \nThe mean absolute deviation function above is actually a special case of mean\
    \ absolute deviation. \nThe mean absolute deviation function above is actually\
    \ a special case of mean absolute deviation. \nThe mean absolute deviation function\
    \ above is actually a special case of mean absolute deviation. \nThe mean absolute\
    \ deviation function above is actually a special case of mean absolute deviation.\
    \ \nThe mean absolute deviation function above is actually a special case of mean\
    \ absolute deviation. \nThe mean absolute deviation function above is actually\
    \ a special case of mean absolute deviation. \nThe mean absolute deviation function\
    \ above is actually a special case of mean absolute deviation. \nThe mean absolute\
    \ deviation function above is actually a special case of mean absolute deviation.\
    \ \nThe mean absolute deviation function above is actually a special case of mean\
    \ absolute deviation. \nThe mean absolute deviation function above is actually\
    \ a special case of mean absolute deviation. \nThe mean absolute deviation function\
    \ above is actually a special case of mean absolute deviation. \nThe mean absolute\
    \ deviation function above is actually a special case of mean absolute deviation.\
    \ \nThe mean absolute deviation function above is actually a special case of mean\
    \ absolute deviation. \nThe mean absolute deviation function above is actually\
    \ a special case of mean absolute deviation. \nThe mean absolute deviation function\
    \ above is actually a special case of mean absolute deviation. \nusing Test\n\n\
    @testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz2n9udh0.jl:17\nin expression starting at\
    \ /tmp/tmpz2n9udh0.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ Function\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqibusw1b.jl:16\nin expression starting at\
    \ /tmp/tmpqibusw1b.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n\
    \    end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n</cell>\n<text>\nMean Absolute\
    \ Deviation with StatsModels\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphkgtz_5n.jl:17\nin expression starting at\
    \ /tmp/tmphkgtz_5n.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nThe Mean Absolute\
    \ Deviation function above is called mean_absolute_deviation. Now let's use it\
    \ to calculate the mean absolute deviation for a list of numbers:\nusing Test\n\
    \n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn20t6b7y.jl:16\nin expression starting at\
    \ /tmp/tmpn20t6b7y.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a measure of how far each point is from the mean.\nIt is a good measure of\
    \ outliers and is often used in machine learning to determine how far a point\
    \ is from the mean.\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyq19th0c.jl:16\nin expression starting at\
    \ /tmp/tmpyq19th0c.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ with Stats\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_2b5adi6.jl:16\nin expression starting at\
    \ /tmp/tmp_2b5adi6.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ - Part 2\nNow let's calculate the mean absolute deviation for a set of numbers\
    \ that were\ngenerated using the normal distribution:\nusing Test\n\n@testset\
    \ begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0])\
    \ == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpidqols7l.jl:16\nin expression starting at\
    \ /tmp/tmpidqols7l.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for i in numbers\n        sum += abs(i - mean(i))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ - Part 2\nThe second part of the Mean Absolute Deviation calculation is the\
    \ variance of the dataset. \nThe variance is the average of the squared deviations\
    \ from the mean:\n    Variance = average | x - x_mean |^2\n    Variance = average\
    \ | x - x_mean |^2\n    Variance = average | x - x_mean |^2\n    Variance = average\
    \ | x - x_mean |^2\n    Variance = average | x - x_mean |^2\n    Variance = average\
    \ | x - x_mean |^2\n    Variance = average | x - x_mean |^2\n    Variance = average\
    \ | x - x_mean |^2\n    Variance = average | x - x_mean |^2\n    Variance = average\
    \ | x - x_mean |^2\n    Variance = average | x - x_mean |^2\n    Variance = average\
    \ | x - x_mean |^2\n    Variance = average | x - x_mean |^2\n    Variance = average\
    \ | x - x_mean |^2\n    Variance = average | x - x_mean |^2\n    Variance = average\
    \ | x - x_mean |^2\n    Variance = average | x - x_mean |^2\n    Variance = average\
    \ | x - x_mean |^2\n    Variance = average | x - x_mean |^2\n    Variance = average\
    \ | x - x_mean |^2\n    Variance = average | x - x_mean |^2\n    Variance = average\
    \ | x - x_mean |^2\n    Variance = average | x - x_mean |^2\n    Variance = average\
    \ | x - x_mean |^2\n    Variance = average | x - x_mean |^2\n    Variance = average\
    \ | x - x_mean |^2\n    Variance = average | x - x_mean |^2\n    Variance = average\
    \ | x - x_mean |^2\n    Variance = average | x - x_mean |^2\n    Variance = average\
    \ | x - x_mean |^2\n    Variance = average | x - x_mean |^2\n    Variance = average\
    \ | x - x_mean |^2\n    Variance = average | x - x_mean |^2\n    Variance = average\
    \ | x - x_mean |^2\n    Variance = average | x - x_mean |^2\n    Variance = average\
    \ | x - x_mean |^2\n    Variance = average | x - x_\nusing Test\n\n@testset begin\n\
    \ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk5gpgbt_.jl:16\nin expression starting at\
    \ /tmp/tmpk5gpgbt_.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ - Part 2\nNow let's look at how we can use our new function with our new dataset!\n\
    using Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpodpzb3hn.jl:16\nin expression starting at\
    \ /tmp/tmpodpzb3hn.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum_of_squares = 0.0\n    for number in numbers\n        sum_of_squares\
    \ += (number - mean(number))^2\n    end\n    return sqrt(sum_of_squares/length(numbers))\n\
    end\n</cell>\n<text>\nMean Absolute Deviation is a measure of how far from mean\
    \ a dataset is. It is a good measure of outliers. We will use it later to determine\
    \ how many outliers we have.\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2ktjzyni.jl:16\nin expression starting at\
    \ /tmp/tmp2ktjzyni.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a measure of how far from mean a dataset is. It can be used for outlier detection.\n\
    using Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8a6r54vp.jl:16\nin expression starting at\
    \ /tmp/tmp8a6r54vp.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for i in numbers\n        sum += abs(i - mean(i))\n   \
    \ end\n    return sum / length(numbers)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == 1.2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp7n5em3hf.jl:21\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0]) == 0.5\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmp7n5em3hf.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7n5em3hf.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7n5em3hf.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp7n5em3hf.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0]) == 1.0\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmp7n5em3hf.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7n5em3hf.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7n5em3hf.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp7n5em3hf.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmp7n5em3hf.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7n5em3hf.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7n5em3hf.jl:20\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7n5em3hf.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a measure of how far a data point is from the mean of its group. For example,\
    \ if you have data points that are all greater than the mean of their group, then\
    \ the mean absolute deviation will be zero. On the other hand, if you have data\
    \ points that are all less than the mean of their group, then the mean absolute\
    \ deviation will be equal to the mean of the group.\nusing Test\n\n@testset begin\n\
    \ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmt9zc_fw.jl:16\nin expression starting at\
    \ /tmp/tmpmt9zc_fw.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ with Stats\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphztvxz5q.jl:16\nin expression starting at\
    \ /tmp/tmphztvxz5q.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n</cell>\n<text>\nMean Absolute\
    \ Deviation with StatsModels\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwsg7jlpq.jl:16\nin expression starting at\
    \ /tmp/tmpwsg7jlpq.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum_of_squared_deviations = 0.0\n    for x in numbers\n        sum_of_squared_deviations\
    \ += pow((x - mean(x)), 2)\n    return sqrt(sum_of_squared_deviations / length(numbers))\n\
    end\n</cell>\n<text>\nMean Absolute Deviation - Part 2\nNow let's calculate the\
    \ mean absolute deviation for a list of numbers. We'll do this by first calculating\
    \ the mean of the numbers, then calculating the MAD around that mean.\nusing Test\n\
    \n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk2pgidy1.jl:15\nin expression starting at\
    \ /tmp/tmpk2pgidy1.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum_of_squares = 0.0\n    for n in numbers\n        sum_of_squares +=\
    \ (n - mean(n))^2\n    return sqrt(sum_of_squares/length(numbers))\nend\n</cell>\n\
    <text>\nMean Absolute Deviation Function\nThe mean absolute deviation function\
    \ calculates the mean absolute deviation of a given list of numbers. \nThe mean\
    \ absolute deviation function calculates the mean absolute deviation of a given\
    \ list of numbers. \nThe mean absolute deviation function calculates the mean\
    \ absolute deviation of a given list of numbers. \nThe mean absolute deviation\
    \ function calculates the mean absolute deviation of a given list of numbers.\
    \ \nThe mean absolute deviation function calculates the mean absolute deviation\
    \ of a given list of numbers. \nThe mean absolute deviation function calculates\
    \ the mean absolute deviation of a given list of numbers. \nThe mean absolute\
    \ deviation function calculates the mean absolute deviation of a given list of\
    \ numbers. \nThe mean absolute deviation function calculates the mean absolute\
    \ deviation of a given list of numbers. \nThe mean absolute deviation function\
    \ calculates the mean absolute deviation of a given list of numbers. \nThe mean\
    \ absolute deviation function calculates the mean absolute deviation of a given\
    \ list of numbers. \nThe mean absolute deviation function calculates the mean\
    \ absolute deviation of a given list of numbers. \nThe mean absolute deviation\
    \ function calculates the mean absolute deviation of a given list of numbers.\
    \ \nThe mean absolute deviation function calculates the mean absolute deviation\
    \ of a given list of numbers. \nThe mean absolute deviation function calculates\
    \ the mean absolute deviation of a given list of numbers. \nThe mean absolute\
    \ deviation function calculates the mean absolute deviation of a given list of\
    \ numbers. \nThe mean absolute deviation function calculates the mean absolute\
    \ deviation of a given list of numbers. \nThe mean absolute deviation function\
    \ calculates the mean absolute deviation of a given list of numbers. \nThe mean\
    \ absolute deviation function calculates the mean absolute deviation of a given\
    \ list of numbers. \nThe mean absolute deviation function calculates the mean\
    \ absolute deviation of a given list of numbers. \nThe mean absolute deviation\
    \ function calculates the mean absolute deviation of a given list of numbers.\
    \ \nThe mean absolute deviation function calculates the mean absolute deviation\
    \ of a given list of numbers. \nThe mean absolute deviation function calculates\
    \ the mean absolute deviation of a given list of numbers. \nThe mean absolute\
    \ deviation function calculates the mean absolute deviation of a given list of\
    \ numbers. \nThe mean absolute deviation function calculates the mean absolute\
    \ deviation of a given list of numbers. \nThe mean absolute deviation function\
    \ calculates the mean absolute deviation of a given list of numbers. \nThe mean\
    \ absolute deviation function calculates the mean absolute deviation \nusing Test\n\
    \n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplvoin0ig.jl:15\nin expression starting at\
    \ /tmp/tmplvoin0ig.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a good metric to evaluate a model's performance. \nIt measures the average\
    \ distance between each point and the mean.\nIt is a good way to evaluate a model's\
    \ performance when you have an unbiased dataset.\nIt can be calculated using the\
    \ Mean Absolute Deviation function.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7e0t42uw.jl:16\nin expression starting at\
    \ /tmp/tmp7e0t42uw.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a measure of how far from mean a dataset is. It is a good measure of outliers,\
    \ as outliers can have large deviations from the mean.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0])\
    \ == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt68va2u1.jl:16\nin expression starting at\
    \ /tmp/tmpt68va2u1.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a good measure of how far numbers are from their mean.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0])\
    \ == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6xq8yvn0.jl:16\nin expression starting at\
    \ /tmp/tmp6xq8yvn0.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.0>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n</cell>\n<text>\nMean Absolute\
    \ Deviation with weights\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_i27p0k2.jl:16\nin expression starting at\
    \ /tmp/tmp_i27p0k2.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a measure of how far each element deviates from the mean.\nIt is a good measure\
    \ of how far each element deviates from the mean because it\ntells you how far\
    \ each element deviates from the mean of the dataset.\nIt is a good measure of\
    \ how far each element deviates from the mean because it\ntells you how far each\
    \ element deviates from the mean of the dataset.\nIt is a good measure of how\
    \ far each element deviates from the mean because it\ntells you how far each element\
    \ deviates from the mean of the dataset.\nIt is a good measure of how far each\
    \ element deviates from the mean because it\ntells you how far each element deviates\
    \ from the mean of the dataset.\nIt is a good measure of how far each element\
    \ deviates from the mean because it\ntells you how far each element deviates from\
    \ the mean of the dataset.\nIt is a good measure of how far each element deviates\
    \ from the mean because it\ntells you how far each element deviates from the mean\
    \ of the dataset.\nIt is a good measure of how far each element deviates from\
    \ the mean because it\ntells you how far each element deviates from the mean of\
    \ the dataset.\nIt is a good measure of how far each element deviates from the\
    \ mean because it\ntells you how far each element deviates from the mean of the\
    \ dataset.\nIt is a good measure of how far each element deviates from the mean\
    \ because it\ntells you how far each element deviates from the mean of the dataset.\n\
    It is a good measure of how far each element deviates from the mean because it\n\
    tells you how far each element deviates from the mean of the dataset.\nIt is a\
    \ good measure of how far each element deviates from the mean because it\ntells\
    \ you how far each element deviates from the mean of the dataset.\nIt is a good\
    \ measure of how far each element deviates from the mean because it\ntells you\
    \ how far each element deviates from the mean of the dataset.\nIt is a good measure\
    \ of how far each element deviates from the mean because it\ntells you how far\
    \ each element deviates from the mean of the dataset.\nIt is a good measure of\
    \ how far each element deviates from the mean because it\ntells you how far each\
    \ element deviates from the mean of the dataset.\nIt is a good measure of how\
    \ far each element deviates from the mean because it\ntells you how far each element\
    \ deviates from the mean of the dataset.\nIt is a good measure of how far each\
    \ element deviates from the mean because it\ntells you how far each element deviates\
    \ from the \nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp41ez3atd.jl:16\nin expression starting at\
    \ /tmp/tmp41ez3atd.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum_of_squares = 0.0\n    for n in numbers\n        sum_of_squares +=\
    \ (n - mean(n))^2\n    end\n    return sqrt(sum_of_squares/length(numbers))\n\
    end\n</cell>\n<code language=julia-1.0>\nmean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n</cell>\n<text>\nThe mean absolute deviation function above is very simple,\
    \ and it only works on vectors of numbers. But what if we want to calculate the\
    \ MAD for a list of vectors of numbers?\nusing Test\n\n@testset begin\n\ncandidate\
    \ = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoz4z_wn_.jl:16\nin expression starting at\
    \ /tmp/tmpoz4z_wn_.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ - Part 2\nThe second part of the Mean Absolute Deviation algorithm is more complicated.\
    \ \nIt uses the mean of the absolute deviations around the mean.\nThe mean of\
    \ the absolute deviations around the mean is given by:\n\\begin{equation}\n\\\
    mu = \\frac{1}{n}\\sum_{i=1}^n |x_i - \\mu|\n\\end{equation}\nThe mean of the\
    \ absolute deviations around the mean is given by:\n\\begin{equation}\n\\mu =\
    \ \\frac{1}{n}\\sum_{i=1}^n |x_i - \\mu|\n\\end{equation}\nThe mean of the absolute\
    \ deviations around the mean is given by:\n\\begin{equation}\n\\mu = \\frac{1}{n}\\\
    sum_{i=1}^n |x_i - \\mu|\n\\end{equation}\nThe mean of the absolute deviations\
    \ around the mean is given by:\n\\begin{equation}\n\\mu = \\frac{1}{n}\\sum_{i=1}^n\
    \ |x_i - \\mu|\n\\end{equation}\nThe mean of the absolute deviations around the\
    \ mean is given by:\n\\begin{equation}\n\\mu = \\frac{1}{n}\\sum_{i=1}^n |x_i\
    \ - \\mu|\n\\end{equation}\nThe mean of the absolute deviations around the mean\
    \ is given by:\n\\begin{equation}\n\\mu = \\frac{1}{n}\\sum_{i=1}^n |x_i - \\\
    mu|\n\\end{equation}\nThe mean of the absolute deviations around the mean is given\
    \ by:\n\\begin{equation}\n\\mu = \\frac{1}{n}\\sum_{i=1}^n |x_i - \\mu|\n\\end{equation}\n\
    The mean of the absolute deviations around the mean is given by:\n\\begin{equation}\n\
    \\mu = \\frac{1}{n}\\sum_{i=1}^n |x_i - \\mu|\n\\end{equation}\nThe mean of the\
    \ absolute deviations around the mean is given by:\n\\begin{equation}\n\\mu =\
    \ \\frac{1}{n}\\sum_{i=1}^n |x_i - \\mu|\n\\end{equation}\nThe mean of the absolute\
    \ deviations around the mean is given by:\n\\begin{equation}\n\\mu = \\frac{1}{n}\\\
    sum_{i=1}^n |x_i - \\mu|\n\\end{equation}\nThe mean of the absolute deviations\
    \ around the mean is given by:\n\nusing Test\n\n@testset begin\n\ncandidate =\
    \ mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw_fi4vbs.jl:16\nin expression starting at\
    \ /tmp/tmpw_fi4vbs.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ with Stats\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8i6cih5c.jl:16\nin expression starting at\
    \ /tmp/tmp8i6cih5c.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for i in numbers\n        sum += abs(i - mean)\n    end\n\
    \    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a good measure of how far away a point is from the mean.\nIt is a good way\
    \ to measure the spread of data around a mean.\nIt is a good way to measure the\
    \ variability of a set of data.\nIt is a good way to measure the variability of\
    \ a set of data.\nIt is a good way to measure the variability of a set of data.\n\
    It is a good way to measure the variability of a set of data.\nIt is a good way\
    \ to measure the variability of a set of data.\nIt is a good way to measure the\
    \ variability of a set of data.\nIt is a good way to measure the variability of\
    \ a set of data.\nIt is a good way to measure the variability of a set of data.\n\
    It is a good way to measure the variability of a set of data.\nIt is a good way\
    \ to measure the variability of a set of data.\nIt is a good way to measure the\
    \ variability of a set of data.\nIt is a good way to measure the variability of\
    \ a set of data.\nIt is a good way to measure the variability of a set of data.\n\
    It is a good way to measure the variability of a set of data.\nIt is a good way\
    \ to measure the variability of a set of data.\nIt is a good way to measure the\
    \ variability of a set of data.\nIt is a good way to measure the variability of\
    \ a set of data.\nIt is a good way to measure the variability of a set of data.\n\
    It is a good way to measure the variability of a set of data.\nIt is a good way\
    \ to measure the variability of a set of data.\nIt is a good way to measure the\
    \ variability of a set of data.\nIt is a good way to measure the variability of\
    \ a set of data.\nIt is a good way to measure the variability of a set of data.\n\
    It is a good way to measure the variability of a set of data.\nIt is a good way\
    \ to measure the variability of a set of data.\nIt is a good way to measure the\
    \ variability of a set of data.\nIt is a good way to measure the variability of\
    \ a set of data.\nIt is a good way to measure the variability of a set of data.\n\
    It is a good way to measure the variability of a set of data.\nIt is a good way\
    \ to measure the variability of a set of data.\nIt is a good way to measure the\
    \ variability of a set of data.\nIt is a good way to measure the variability of\
    \ a set of data.\nIt is a good way to measure the variability of a set of data.\n\
    It is a good way to measure the variability of a set of data.\nIt is a good way\
    \ to measure the variability of a set of data.\nIt is a good way to measure the\
    \ variability of a set of data.\nIt is a good way to measure the variability of\
    \ a set of data.\nIt is a \nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3zk6uguu.jl:16\nin expression starting at\
    \ /tmp/tmp3zk6uguu.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkxuawokd.jl:16\nin expression starting at\
    \ /tmp/tmpkxuawokd.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4vtua09o.jl:16\nin expression starting at\
    \ /tmp/tmp4vtua09o.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ with Stats\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsa95d2y2.jl:16\nin expression starting at\
    \ /tmp/tmpsa95d2y2.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ Function\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnh9xqlal.jl:16\nin expression starting at\
    \ /tmp/tmpnh9xqlal.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for i in numbers\n        sum += abs(i - mean)\n    end\n\
    \    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0])\
    \ == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq5kx3hyc.jl:16\nin expression starting at\
    \ /tmp/tmpq5kx3hyc.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a good measure of how far away a point is from the mean.\nusing Test\n\n\
    @testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc23gybi9.jl:16\nin expression starting at\
    \ /tmp/tmpc23gybi9.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ - Part 2\nNow let's implement the Mean Absolute Deviation function using Julia's\
    \ built-in functionality.\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmikef65m.jl:16\nin expression starting at\
    \ /tmp/tmpmikef65m.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum_of_squared_deviations = 0.0\n    for number in numbers\n        sum_of_squared_deviations\
    \ += math.pow(number - mean(numbers), 2)\n    return math.sqrt(sum_of_squared_deviations)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t\
    @test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) ==\
    \ 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwmao2xcl.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwmao2xcl.jl:1\n\
    in expression starting at /tmp/tmpwmao2xcl.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for i in numbers\n        sum += abs(i - mean(i))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.0>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n</cell>\n<text>\nMean Absolute\
    \ Deviation with StatsModels\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp53qmsc51.jl:16\nin expression starting at\
    \ /tmp/tmp53qmsc51.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n\
    \    end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute\
    \ Deviation with Stats\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpun25hylk.jl:17\nin expression starting at\
    \ /tmp/tmpun25hylk.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum_of_squares = 0.0\n    for n in numbers\n        sum_of_squares +=\
    \ (n - mean(n))^2\n    return sqrt(sum_of_squares/length(numbers))\nend\n</cell>\n\
    <text>\nMean Absolute Deviation - Part 2\nNow let's calculate the mean absolute\
    \ deviation for a list of numbers. We'll start by defining a function which calculates\
    \ the mean of a list of numbers:\nusing Test\n\n@testset begin\n\ncandidate =\
    \ mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4_w88uoi.jl:15\nin expression starting at\
    \ /tmp/tmp4_w88uoi.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n</cell>\n<text>\nMean Absolute\
    \ Deviation with Weights\nThe mean absolute deviation is the average of the absolute\
    \ difference between each element and the mean of the dataset:\n    MAD = average\
    \ | x - x_mean |\n    Where x is the element and x_mean is the mean.\n    \n \
    \   Weights are a vector of weights to apply to each element in the dataset\n\
    \    \n    Weights are applied to the dataset before calculating the mean absolute\
    \ deviation\n    \n    Weights are applied to the dataset before calculating the\
    \ mean absolute deviation\n    \n    Weights are applied to the dataset before\
    \ calculating the mean absolute deviation\n    \n    Weights are applied to the\
    \ dataset before calculating the mean absolute deviation\n    \n    Weights are\
    \ applied to the dataset before calculating the mean absolute deviation\n    \n\
    \    Weights are applied to the dataset before calculating the mean absolute deviation\n\
    \    \n    Weights are applied to the dataset before calculating the mean absolute\
    \ deviation\n    \n    Weights are applied to the dataset before calculating the\
    \ mean absolute deviation\n    \n    Weights are applied to the dataset before\
    \ calculating the mean absolute deviation\n    \n    Weights are applied to the\
    \ dataset before calculating the mean absolute deviation\n    \n    Weights are\
    \ applied to the dataset before calculating the mean absolute deviation\n    \n\
    \    Weights are applied to the dataset before calculating the mean absolute deviation\n\
    \    \n    Weights are applied to the dataset before calculating the mean absolute\
    \ deviation\n    \n    Weights are applied to the dataset before calculating the\
    \ mean absolute deviation\n    \n    Weights are applied to the dataset before\
    \ calculating the mean absolute deviation\n    \n    Weights are applied to the\
    \ dataset before calculating the mean absolute deviation\n    \n    Weights are\
    \ applied to the dataset before calculating the mean absolute deviation\n    \n\
    \    Weights are applied to the dataset before calculating the mean absolute deviation\n\
    \    \n    Weights are applied to the dataset before calculating the mean absolute\
    \ deviation\n    \n    Weights are applied to the dataset before calculating the\
    \ mean absolute deviation\n    \n    Weights are applied to the dataset before\
    \ calculating the mean absolute deviation\n    \n    Weights are applied to the\
    \ dataset before calculating the mean absolute deviation\n    \n    Weights are\
    \ applied to the dataset before calculating the mean absolute deviation\n    \n\
    \    Weights are applied to the dataset before calculating the mean absolute deviation\n\
    \    \n    Weights are applied to the \nusing Test\n\n@testset begin\n\ncandidate\
    \ = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyc8ajohf.jl:16\nin expression starting at\
    \ /tmp/tmpyc8ajohf.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum_of_squared_deviations = 0.0\n    for x in numbers\n        sum_of_squared_deviations\
    \ += ((x - mean(x))^2)\n    return sqrt(sum_of_squared_deviations / length(numbers))\n\
    end\n</cell>\n<text>\nMean Absolute Deviation - Part 2\nNow let's implement the\
    \ Mean Absolute Deviation function using Julia's built-in functionality.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3rrlelmc.jl:15\nin expression starting at\
    \ /tmp/tmp3rrlelmc.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for i in numbers\n        sum += abs(i - mean)\n    end\n\
    \    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a measure of how far from a mean a number is. It is a good measure of how\
    \ far from a mean a number is. It can be used for outlier detection.\nusing Test\n\
    \n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_mdnujbv.jl:16\nin expression starting at\
    \ /tmp/tmp_mdnujbv.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for i in numbers\n        sum += abs(i - mean(i))\n   \
    \ end\n    return sum / length(numbers)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == 1.2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpxn6glr0a.jl:21\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0]) == 0.5\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpxn6glr0a.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxn6glr0a.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxn6glr0a.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpxn6glr0a.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0]) == 1.0\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpxn6glr0a.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxn6glr0a.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxn6glr0a.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpxn6glr0a.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpxn6glr0a.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxn6glr0a.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxn6glr0a.jl:20\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxn6glr0a.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ with Stats\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfl9wigtj.jl:16\nin expression starting at\
    \ /tmp/tmpfl9wigtj.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == 1.2)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpjqi0l_1r.jl:21\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0]) == 0.5\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpjqi0l_1r.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjqi0l_1r.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjqi0l_1r.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpjqi0l_1r.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0]) == 1.0\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpjqi0l_1r.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjqi0l_1r.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjqi0l_1r.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpjqi0l_1r.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpjqi0l_1r.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjqi0l_1r.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjqi0l_1r.jl:20\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjqi0l_1r.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ - Part 2\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl44e51xj.jl:16\nin expression starting at\
    \ /tmp/tmpl44e51xj.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a measure of how far each data point is from the mean.\nIt is a good measure\
    \ of outliers and is often used in machine learning to determine how far a data\
    \ point is from the mean.\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx5osurg5.jl:16\nin expression starting at\
    \ /tmp/tmpx5osurg5.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for i in numbers\n        sum += abs(i - mean(i))\n   \
    \ return sum / length(numbers)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpibojbsco.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpibojbsco.jl:1\n\
    in expression starting at /tmp/tmpibojbsco.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a good metric to evaluate a model's performance.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0])\
    \ == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi3lnsjit.jl:16\nin expression starting at\
    \ /tmp/tmpi3lnsjit.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a metric that measures the average distance between a point and the mean\
    \ of the dataset. \nIt is a good way to measure the variability of a dataset and\
    \ to evaluate how well a model generalizes.\nusing Test\n\n@testset begin\n\n\
    candidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3s4jdv0i.jl:16\nin expression starting at\
    \ /tmp/tmp3s4jdv0i.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ with Stats\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpswi5zihr.jl:16\nin expression starting at\
    \ /tmp/tmpswi5zihr.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ with Stats\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyvmi9gt2.jl:16\nin expression starting at\
    \ /tmp/tmpyvmi9gt2.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.3>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n</cell>\n<text>\nMean Absolute\
    \ Deviation with Weights\nThe mean absolute deviation function above is sensitive\
    \ to outliers. To avoid this, we can weight the deviations by the number of observations.\n\
    using Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpux2e5qtm.jl:16\nin expression starting at\
    \ /tmp/tmpux2e5qtm.jl:16\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for i in numbers\n        sum += abs(i - mean(i))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ with StatsModels\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsempbztg.jl:16\nin expression starting at\
    \ /tmp/tmpsempbztg.jl:16\n"
  exit_code: 1
  status: SyntaxError
