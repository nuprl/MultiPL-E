name: HumanEval_75_is_multiply_prime
language: julia
prompt: "\"\"\"Write a function that returns true if the given number is the multiplication\
  \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
  \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n \
  \   \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n"
tests: "using Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
  \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
  \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t\
  @test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
  \ == false)\n\t@test(candidate(1001) == true)\nend\n"
completions: ["    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    if a < 100\n        true\n    else\n  \
    \      false\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert is_multiply_prime(30)\
    \ == true\n@assert is_multiply_prime(31) == false\n@assert is_multiply_prime(32)\
    \ == false\n@assert is_multiply_prime(33) == false\n@assert is_multiply_prime(34)\
    \ == false\n@assert is_multiply_prime(35) == false\n@assert is_multiply_prime(36)\
    \ == false\n@assert is_multiply_prime(37) == false\n@assert is_multiply_prime(38)\
    \ == false\n@assert is_multiply_prime(39) == false\n@assert is_multiply_prime(40)\
    \ == false\n@assert is_multiply_prime(41) == false\n@assert is_multiply_prime(42)\
    \ == false\n@assert is_multiply_prime(43) == false\n@assert is_multiply_prime(44)\
    \ == false\n@assert is_multiply_prime(45) == false\n@assert is_multiply_prime(46)\
    \ == false\n@assert is_multiply_prime(47) == false\n@assert is_multiply_prime(48)\
    \ == false\n@assert is_multiply_prime(49) == false\n@assert is_multiply_prime(50)\
    \ == false\n@assert is_multiply_prime(51) == false\n@assert is_multiply_prime(52)\
    \ == false\n@assert is_multiply_prime(53) == false\n@assert is_multiply_prime(54)\
    \ == false\n@assert is_multiply_prime(55) == false\n@assert is_multiply_prime(56)\
    \ == false\n@assert is_multiply_prime(57) == false\n@assert is_multiply_prime(58)\
    \ == false\n@assert is_multiply_prime(59) == false\n@assert is_multiply_prime(60)\
    \ == false\n@assert is_multiply_prime(61) == false\n@assert is_multiply_prime(62)\
    \ == false\n@assert is_multiply_prime(63) == false\n@assert is_multiply_prime(64)\
    \ == false\n@assert is_multiply_prime(65) == false\n@assert is_multiply_prime(66)\
    \ == false\n@assert is_multiply_prime(67) == false\n@assert is_multiply_prime(68)\
    \ == false\n@assert is_multiply_prime(69) == false\n@assert is_multiply_prime(70)\
    \ == false\n@assert is_multiply_prime(71) == false\n@assert is_multiply_prime(72)\
    \ == false\n@assert is_multiply_prime(73) == false\n@", "    if a < 100\n    \
    \    return false\n    \n    primes = primes_list(100)\n    \n    for i in primes\n\
    \        if a % i == 0\n            return false\n    \n    return true\nend\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(200)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(300)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(400)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(500)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(600)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(700)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(800)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(900)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1200)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1400)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1500)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1600)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1700)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1800)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1900)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(2000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(2100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(2200)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(2300)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(2400)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(2500)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(2600)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(2700)\n</cell>\n<code language=julia-1.5>\nis_", "    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    if a < 100\n        false\n\
    \    else\n        true\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ is_multiply_prime(30) == true\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns true if the given number is the multiplication of 3 prime numbers\n\
    \    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n\
    \    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"", "    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    if a < 100\n        true\n\
    \    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @code_", "    if a < 100\n        true\n    else\n        false\n    end\nend",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if a < 100\n  \
    \      true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype is_multiply_prime(30)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns true if the given number is a prime number and false otherwise.\n\
    Knowing that (a) is less then 100. \nExample: \nis_prime(30) == True\n30 = 2 *\
    \ 3 * 5\nHint: \nThe first step is to write a function that returns true if the\
    \ given number is a prime number and false otherwise.\nThe second step is to write\
    \ a function that returns true if the given number is a multiplication of 3 prime\
    \ numbers and false otherwise.", "    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    if a < 100\n        true\n    else\n\
    \        false\n    end\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns true if the given number\
    \ is a prime number and false otherwise.\nKnowing that (a) is less then 100. \n\
    Example: \nis_prime(30) == True\n30 = 2 * 3 * 5\n\"\"\"", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    prime_numbers = primes(100)\n\
    \    \n    for i in prime_numbers\n        if a % i == 0\n            return false\n\
    \        end\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    \    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n\
    \    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"", "    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    if a < 100\n        true\n\
    \    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.4>\n@code_warntype\
    \ is_multiply_prime(30)\n</cell>\n<code language=julia-1.4>\n@code_warntype is_multiply_prime(100)\n\
    </cell>\n<code language=julia-1.4>\n@code_warntype is_multiply_prime(1000)\n</cell>\n\
    <code language=julia-1.4>\n@code_warntype is_multiply_prime(10000)\n</cell>\n\
    <code language=julia-1.4>\n@code_warntype is_multiply_prime(100000)\n</cell>\n\
    <code language=julia-1.4>\n@code_warntype is_multiply_prime(1000000)\n</cell>\n\
    <code language=julia-1.4>\n@code_warntype is_multiply_prime(10000000)\n</cell>\n\
    <code language=julia-1.4>\n@code_warntype is_multiply_prime(100000000)\n</cell>\n\
    <code language=julia-1.4>\n@code_warntype is_multiply_prime(1000000000)\n</cell>\n\
    <code language=julia-1.4>\n@code_warntype is_multiply_prime(10000000000)\n</cell>\n\
    <code language=julia-1.4>\n@code_warntype is_multiply_prime(100000000000)\n</cell>\n\
    <code language=julia-1.4>\n@code_warntype is_multiply_prime(1000000000000)\n</cell>\n\
    <code language=julia-1.4>\n@code_warntype is_multiply_prime(10000000000000)\n\
    </cell>\n<code language=julia-1.4>\n@code_warntype is_multiply_prime(100000000000000)\n\
    </cell>\n<code language=julia-1.4>\n@code_warntype is_multiply_prime(1000000000000000)\n\
    </cell>\n<code language=julia-1.4>\n@code_warntype is_multiply_prime(10000000000000000)\n\
    </cell>\n<code language=julia-1.4>\n@code_warntype is_multiply_prime(100000000000000000)\n\
    </cell>\n<code language=julia-1.4>\n@code_warntype is_multiply_prime(1000000000000000000)\n\
    </cell>\n<code language=julia-1.4>\n@code_warntype is_multiply_prime(10000000000000000000)\n\
    </cell>\n<code language=julia-1.4>\n@code_warntype is_multiply_prime(100000000000000000000)\n\
    </cell>\n<code language=julia-1.4>\n@code_warntype is_multiply_prime(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.4>\n@code_warntype is_multiply_", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    if a < 100\n        true\n    else\n  \
    \      false\n    end\nend\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    prime_numbers\
    \ = primes(a)\n    \n    prime_numbers_set = Set(prime_numbers)\n    \n    for\
    \ n in prime_numbers_set\n        if n % 3 == 0 || n % 5 == 0\n            return\
    \ false\n        end\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(10000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(10000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(1000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(10000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100000000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000000000)\n\
    </cell>\n", "    \n    prime_numbers = primes(100)\n    \n    for i in prime_numbers\n\
    \        if a % i == 0\n            return false\n    end\n    return true\nend\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    prime_numbers = primes(a)\n    \n    \n    for p in prime_numbers\n\
    \        if p > 100\n            return false\n        end\n    end\n    \n  \
    \  for p in prime_numbers\n        if p > 100\n            return false\n    \
    \    end\n    end\n    \n    for p in prime_numbers\n        if p > 100\n    \
    \        return false\n        end\n    end\n    \n    return true\nend\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(100000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(1000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(10000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(10000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(100000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100000000000000001)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000002)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000003)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100000000000000004)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(100000000000000005)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(", "    if a < 100\n        true\n    else\n        false\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@assert is_multiply_prime(30)\
    \ == true\n@assert is_multiply_prime(31) == false\n@assert is_multiply_prime(32)\
    \ == false\n@assert is_multiply_prime(33) == false\n@assert is_multiply_prime(34)\
    \ == false\n@assert is_multiply_prime(35) == false\n@assert is_multiply_prime(36)\
    \ == false\n@assert is_multiply_prime(37) == false\n@assert is_multiply_prime(38)\
    \ == false\n@assert is_multiply_prime(39) == false\n@assert is_multiply_prime(40)\
    \ == false\n@assert is_multiply_prime(41) == false\n@assert is_multiply_prime(42)\
    \ == false\n@assert is_multiply_prime(43) == false\n@assert is_multiply_prime(44)\
    \ == false\n@assert is_multiply_prime(45) == false\n@assert is_multiply_prime(46)\
    \ == false\n@assert is_multiply_prime(47) == false\n@assert is_multiply_prime(48)\
    \ == false\n@assert is_multiply_prime(49) == false\n@assert is_multiply_prime(50)\
    \ == false\n@assert is_multiply_prime(51) == false\n@assert is_multiply_prime(52)\
    \ == false\n@assert is_multiply_prime(53) == false\n@assert is_multiply_prime(54)\
    \ == false\n@assert is_multiply_prime(55) == false\n@assert is_multiply_prime(56)\
    \ == false\n@assert is_multiply_prime(57) == false\n@assert is_multiply_prime(58)\
    \ == false\n@assert is_multiply_prime(59) == false\n@assert is_multiply_prime(60)\
    \ == false\n@assert is_multiply_prime(61) == false\n@assert is_multiply_prime(62)\
    \ == false\n@assert is_multiply_prime(63) == false\n@assert is_multiply_prime(64)\
    \ == false\n@assert is_multiply_prime(65) == false\n@assert is_multiply_prime(66)\
    \ == false\n@assert is_multiply_prime(67) == false\n@assert is_multiply_prime(68)\
    \ == false\n@assert is_multiply_prime(69) == false\n@assert is_multiply_prime(70)\
    \ == false\n@assert is_multiply_prime(71) == false\n@assert is_multiply_prime(72)\
    \ == false\n@assert is_multiply_prime(73) == false\n@", "    \n    prime_numbers\
    \ = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    for i in prime_numbers\n        if a % i == 0\n            return false\n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(50)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ true if the given number is a perfect square, false otherwise.\nExample: \n\
    \    perfect_square(25) == true\n    perfect_square(25) == false\n    perfect_square(25)\
    \ == true\n    perfect_square(25) == false\n    perfect_square(25) == true\n \
    \   perfect_square(25) == false\n    perfect_square(25) == true\n    perfect_square(25)\
    \ == false\n    perfect_square(25) == true\n    perfect_square(25) == false\n\
    \    perfect_square(25) == true\n    perfect_square(25) == false\n    perfect_square(25)\
    \ == true\n    perfect_square(25) == false\n    perfect_square(25) == true\n \
    \   perfect_square(25) == false\n    perfect_square(25) == true\n    perfect_square(25)\
    \ == false\n    perfect_square(25) == true\n    perfect_square(25) == false\n\
    \    perfect_square(25) == true\n    perfect_square(25) == false\n    perfect_square(25)\
    \ == true\n    perfect_square(25) == false\n    perfect_square(25) == true\n \
    \   perfect_square(25) == false\n    perfect_square(25) == true\n    perfect_square(25)\
    \ == false\n    perfect_square(25) == true\n    perfect_square(25) == false\n\
    \    perfect_square(25) == true\n    perfect_square(25) == false\n    perfect_square(25)\
    \ == true\n    perfect_square(25) == false\n    perfect_square(25) == true\n \
    \   perfect_square(25) == false\n    perfect_square(25) == true\n    perfect_square(25)\
    \ == false\n    perfect_square(25) == true\n    perfect_square(25) == false\n\
    \    perfect_square(25) == true\n    perfect_square(25) == false\n    perfect_square(25)\
    \ == true\n    perfect_square(25) == false\n    perfect_square(25) == true\n \
    \   perfect_square(25", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    if a < 100\n        return false\n    \n    primes = primes_list(100)\n\
    \    \n    for i in primes\n        if a % i == 0\n            return false\n\
    \    \n    return true\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_", "    if a < 100\n\
    \        return false\n    \n    primes = prime_numbers(a)\n    \n    for i in\
    \ primes\n        if a % i == 0\n            return false\n    \n    return true\n\
    end\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns true if the given number is\
    \ a power of 3 and\nfalse otherwise.\nKnowing that (a) is less then 100. \nExample:\
    \ \nis_power_of_3(30) == True\n30 = 2 * 3 * 5\n\"\"\"", "    if a < 100\n    \
    \    true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_", "    \n    if a < 100\n        true\n    else\n\
    \        false\n    end\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(50)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(200)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(300)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(400)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(500)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(600)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(700)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(800)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(900)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1200)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1300)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1400)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1500)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1600)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1700)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1800)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1900)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(2100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(2200)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(2300)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(2400)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(2500)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(2600)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    prime_numbers\
    \ = primes(a)\n    \n    for p in prime_numbers\n        if p*p > a\n        \
    \    return false\n        end\n    end\n    return true\nend\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the multiplication\
    \ of 2 prime numbers. \n    Example:\n    mult_primes(30) == 2 * 3 * 5\n    \"\
    \"\"", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    prime_numbers = primes(100)\n    \n    for i in prime_numbers\n        if\
    \ a % i == 0\n            return false\n    end\n    return true\nend\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns true if the given number is a prime number\
    \ and false otherwise.\nKnowing that (a) is less then 100. \nExample: \nis_prime(30)\
    \ == true\n30 = 2 * 3 * 5\n\"\"\"", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    if a < 100\n        return false\n    \n    primes\
    \ = primes_list(100)\n    \n    for i in primes\n        if a % i == 0\n     \
    \       return false\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ true if the given number is a power of 3 prime number and false otherwise.\n\
    Knowing that (a) is less then 100. \nExample: \nis_power_of_3_prime(30) == True\n\
    30 = 2 * 3 * 5\n\"\"\"", "    \n    prime_numbers = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    for i in prime_numbers\n        if a % i == 0\n            return false\n\
    \    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if the given number\
    \ is a perfect square, false otherwise.\nExample: \nis_perfect_square(25) == True\n\
    25 = 25 * 25\n25 = 25 * 25 * 25\n25 = 25 * 25 * 25 * 25\n25 = 25 * 25 * 25 * 25\
    \ * 25\n25 = 25 * 25 * 25 * 25 * 25 * 25\n25 = 25 * 25 * 25 * 25 * 25 * 25 * 25\n\
    25 = 25 * 25 * 25 * 25 * 25 * 25 * 25 * 25\n25 = 25 * 25 * 25 * 25 * 25 * 25 *\
    \ 25 * 25 * 25\n25 = 25 * 25 * 25 * 25 * 25 * 25 * 25 * 25 * 25 * 25\n25 = 25\
    \ * 25 * 25 * 25 * 25 * 25 * 25 * 25 * 25 * 25 * 25\n25 = 25 * 25 * 25 * 25 *\
    \ 25 * 25 * 25 * 25 * 25 * 25 * 25 * 25\n25 = 25 * 25 * 25 * 25 * 25 * 25 * 25\
    \ * 25 * 25 * 25 * 25 * 25 * 25\n25 = 25 * 25 * 25 * 25 * 25 * 25 * 25 * 25 *\
    \ 25 * 25 * 25 * 25 * 25 * 25\n25 = 25 * 25 * 25 * 25 * 25 * 25 * 25 * 25 * 25\
    \ * 25 * 25 * 25 * 25 * 25 * 25\n25 = 25 * 25 * 25 * 25 * 25 * 25 * 25 * 25 *\
    \ 25 * 25 * 25 * 25 * 25 * 25 * 25 * 25\n25 = 25 * 25 * 25 * 25 * 25 * 25 * 25\
    \ * 25 * 25 * 25 * 25 * 25 * 25 * 25 * 25 * 25 * 25\n25 = 25 * 25 * 25 * 25 *\
    \ 25 * 25 * 25 * 25 * 25 * 25 * 25 * 25 * 25 * 25 * 25 * 25 * 25 * 25\n25 = 25\
    \ * 25 * 25 * 25 * 25 * 25 * 25", "    if is_multiply_prime_helper(a, 3, 100)\
    \ == true\n    else \n        return false\n    end\nend", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    prime_numbers = primes(100)\n\
    \    \n    for i in prime_numbers\n        if a % i == 0\n            return false\n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(50)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100)\n</cell>\n<text>\nExercise\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \"\"\"", "    \n    primes = primes_list(100)\n\
    \    \n    for i in primes\n        if a % i == 0\n            return false\n\
    \    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing\
    \ that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n\
    \    30 = 2 * 3 * 5\n    \"\"\"", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    prime_numbers = primes(a)\n    \n    for i in prime_numbers\n\
    \        if a % i == 0\n            return False\n    \n    return True\nend\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(50)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(200)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(300)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(400)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(500)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(600)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(700)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(800)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(900)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1100)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1200)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1300)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1400)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1500)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1600)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1700)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1800)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1900)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(2100)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(2200)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(2300)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(2400)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(2500)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(2600)\n\
    </cell", "    \n    prime_numbers = primes(100)\n    \n    for i in prime_numbers\n\
    \        if a % i == 0\n            return false\n    end\n    return true\nend\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns true if the given number is a prime number\
    \ and false otherwise.\nKnowing that (a) is less then 100. \nExample: \nis_prime(30)\
    \ == True\n30 = 2 * 3 * 5\n\"\"\"", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    if a < 100\n        return true\n    else \n        prime_numbers\
    \ = prime_numbers(a)\n        for i in prime_numbers\n            if a % i ==\
    \ 0\n                return false\n        return true\nend\n</cell>\n<code language=julia-1.0>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.0>\nis_multiply_prime(100)\n\
    </cell>\n<code language=julia-1.0>\nis_multiply_prime(1000)\n</cell>\n<code language=julia-1.0>\n\
    is_multiply_prime(10000)\n</cell>\n<code language=julia-1.0>\nis_multiply_prime(100000)\n\
    </cell>\n<code language=julia-1.0>\nis_multiply_prime(1000000)\n</cell>\n<code\
    \ language=julia-1.0>\nis_multiply_prime(10000000)\n</cell>\n<code language=julia-1.0>\n\
    is_multiply_prime(100000000)\n</cell>\n<code language=julia-1.0>\nis_multiply_prime(1000000000)\n\
    </cell>\n<code language=julia-1.0>\nis_multiply_prime(10000000000)\n</cell>\n\
    <code language=julia-1.0>\nis_multiply_prime(100000000000)\n</cell>\n<code language=julia-1.0>\n\
    is_multiply_prime(1000000000000)\n</cell>\n<code language=julia-1.0>\nis_multiply_prime(10000000000000)\n\
    </cell>\n<code language=julia-1.0>\nis_multiply_prime(100000000000000)\n</cell>\n\
    <code language=julia-1.0>\nis_multiply_prime(1000000000000000)\n</cell>\n<code\
    \ language=julia-1.0>\nis_multiply_prime(10000000000000000)\n</cell>\n<code language=julia-1.0>\n\
    is_multiply_prime(100000000000000000)\n</cell>\n<code language=julia-1.0>\nis_multiply_prime(1000000000000000000)\n\
    </cell>\n<code language=julia-1.0>\nis_multiply_prime(10000000000000000000)\n\
    </cell>\n<code language=julia-1.0>\nis_multiply_prime(100000000000000000000)\n\
    </cell>\n<code language=julia-1.0>\nis_multiply_prime(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.0>\nis_multiply_prime(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.0>\nis_multiply_prime(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.0>\nis_multiply_prime(1000000000000000000000000)\n\
    </cell>\n<code language=julia-1.0>\nis_multiply_prime(1000000000000000000000000",
  "    \n    prime_numbers = primes(a)\n    \n    for p in prime_numbers\n       \
    \ if p*p > a\n            return false\n        end\n    end\n    \n    return\
    \ true\nend\n</cell>\n<code language=julia-1.5>\n@assert is_multiply_prime(30)\
    \ == true\n@assert is_multiply_prime(31) == false\n@assert is_multiply_prime(100)\
    \ == true\n</cell>\n<text>\nExercise 3\nWrite a function that returns true if\
    \ the given number is a prime number and false otherwise.\nKnowing that (a) is\
    \ less then 100. \nExample: \nis_prime(30) == true\n30 = 3 * 7 * 11 * 13 * 17\
    \ * 19 * 23 * 29 * 31 * 37 * 41 * 43 * 47 * 51 * 53 * 53 \nHint: \nUse a for loop\
    \ to iterate over all numbers from 2 to a/2.\nUse a if statement to check if a\
    \ is divisible by any number between 2 and a/2.\nUse a return statement to return\
    \ true or false.", "    \n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    \n    for i in\
    \ primes\n        if a % i == 0\n            return false\n    return true\nend\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ true if the given number is a prime number and false otherwise.\n    \n    \n\
    \    Example:\n    is_prime(30) == true\n    30 = 2 * 3 * 5\n    \"\"\"", "  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    if a < 100\n        return false\n    \n    primes\
    \ = primes_list(100)\n    \n    for i in primes\n        if a % i == 0\n     \
    \       return false\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(200)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(300)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(400)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(500)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(600)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(700)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(800)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(900)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1100)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1200)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1300)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1400)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1500)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1600)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1700)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1800)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1900)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(2000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(2100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(2200)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(2300)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(2400)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(2500)\n\
    </cell>\n<code language=julia-1.5>\nis_", "    if is_multiply_prime_helper(a)\
    \ == true\n    else \n        false\n    end\nend\n\"\"\"\n    Write a function\
    \ that returns true if the given number is the multiplication of 3 prime numbers\n\
    \    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n\
    \    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"", "    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    if a < 100\n        true\n\
    \    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell", "    if is_multiply_prime_helper(a,\
    \ 3, 100) == true\n    else \n        false\n    end\nend", "    \n    prime_numbers\
    \ = primes(100)\n    \n    prime_numbers_set = Set(prime_numbers)\n    \n    prime_numbers_set.add(a)\n\
    \    \n    prime_numbers_set = Set(prime_numbers_set)\n    \n    for element in\
    \ prime_numbers_set\n        if element == a\n            return true\n      \
    \  end\n    end\n    return false\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(50)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(200)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(300)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(400)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(500)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(600)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(700)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(800)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(900)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1200)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1300)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1400)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1500)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1600)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1700)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1800)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1900)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(2000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(2100)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(2200)\n</cell>\n<code language=julia-1.5>\n", "    if a < 100\n\
    \        return true\n    \n    primes = prime_numbers(a)\n    \n    for p in\
    \ primes\n        if p * 3 == a\n            return true\n        end\n    end\n\
    \    return false\nend\n</cell>\n<code language=julia-1.5>\n@assert is_multiply_prime(30)\
    \ == true\n@assert is_multiply_prime(31) == false\n@assert is_multiply_prime(33)\
    \ == true\n</cell>\n<code language=julia-1.5>\n\"\"\"Write a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \"\"\"", "    \n    prime_numbers = primes(a)\n\
    \    \n    for n in prime_numbers\n        if n % 3 == 0\n            return false\n\
    \        end\n    end\n    \n    return true\nend\n</cell>\n<code language=julia-1.3>\n\
    is_multiply_prime(30)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ true if the given number is a prime number and false otherwise.\nKnowing that\
    \ (a) is less then 100. \nExample: \nis_prime(30) == True\n30 = 2 * 3 * 5\nHint:\
    \ \nUse a for loop to iterate through the prime numbers and test each one to see\
    \ if it divides your number.", "    \n    prime_numbers = primes(100)\n    \n\
    \    prime_numbers_array = [prime_numbers[i] | i <- 1:100]\n    \n    prime_numbers_array\
    \ = [prime_numbers[i] | i <- 1:100]\n    \n    prime_numbers_array = [prime_numbers[i]\
    \ | i <- 1:100]\n    \n    prime_numbers_array = [prime_numbers[i] | i <- 1:100]\n\
    \    \n    prime_numbers_array = [prime_numbers[i] | i <- 1:100]\n    \n    prime_numbers_array\
    \ = [prime_numbers[i] | i <- 1:100]\n    \n    prime_numbers_array = [prime_numbers[i]\
    \ | i <- 1:100]\n    \n    prime_numbers_array = [prime_numbers[i] | i <- 1:100]\n\
    \    \n    prime_numbers_array = [prime_numbers[i] | i <- 1:100]\n    \n    prime_numbers_array\
    \ = [prime_numbers[i] | i <- 1:100]\n    \n    prime_numbers_array = [prime_numbers[i]\
    \ | i <- 1:100]\n    \n    prime_numbers_array = [prime_numbers[i] | i <- 1:100]\n\
    \    \n    prime_numbers_array = [prime_numbers[i] | i <- 1:100]\n    \n    prime_numbers_array\
    \ = [prime_numbers[i] | i <- 1:100]\n    \n    prime_numbers_array = [prime_numbers[i]\
    \ | i <- 1:100]\n    \n    prime_numbers_array = [prime_numbers[i] | i <- 1:100]\n\
    \    \n    prime_numbers_array = [prime_numbers[i] | i <- 1:100]\n    \n    prime_numbers_array\
    \ = [prime_numbers[i] | i <- 1:100]\n    \n    prime_numbers_array = [prime_numbers[i]\
    \ | i <- 1:100]\n    \n    prime_numbers_array = [prime_numbers[i] | i <- 1:100]\n\
    \    \n    prime_numbers_array = [prime_numbers[i] | i <- 1:100]\n    \n    prime_numbers_array\
    \ = [prime_numbers[i] | i <- 1:100]\n    \n    prime_numbers_array = [prime_numbers[i]\
    \ | i <- 1:100]\n    \n    prime_numbers_array = [prime_numbers[i] | i <- 1:100]\n\
    \    \n    prime_numbers_array = [prime_numbers[i] | i <- 1:100]\n    ", "   \
    \ if is_multiply_prime_helper(a, 3, 100) == true\n    else false\nend", "    \n\
    \    prime_numbers = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    for i in prime_numbers\n        if a % i == 0\n            return false\n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns true if the given number is a power\
    \ of 3 \n    and false otherwise.\n    Example:\n    is_power_of_3(3) == true\n\
    \    3 = 2 * 3\n    \"\"\"", "    \n    if a < 100\n        \n        prime_numbers\
    \ = prime_numbers(a)\n        \n        for p in prime_numbers\n            \n\
    \            if p * 3 == a\n                \n                return true\n  \
    \          \n            end\n        end\n    end\n    \n    return false\nend\n\
    </cell>\n<code language=julia-1.3>\nis_multiply_prime(30)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns true if the given number is a prime number\
    \ and false otherwise.\nKnowing that (a) is less then 100. \nExample: \nis_prime(30)\
    \ == True\n30 = 2 * 3 * 5\n\"\"\"", "    \n    prime_numbers = primes(100)\n \
    \   \n    for i in prime_numbers\n        if a % i == 0\n            return false\n\
    \    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>", "    \n    primes = primes_list(100)\n    \n    for i in primes\n  \
    \      if a % i == 0\n            return false\n    end\n    return true\nend\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(50)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(10000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(10000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(1000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(10000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100000000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\n", "    if is_prime(a) == False \n       \
    \ return false \n    else \n        for b in primes \n            if a % b ==\
    \ 0 \n                return false \n        return true \nend\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns true if the given number is a power of 3 prime number\
    \ and false otherwise.\nKnowing that (a) is less then 100. \nExample: \nis_power_of_3_prime(30)\
    \ == True\n30 = 3^2 * 5\n30 = 3^2 * 3^1\n30 = 3^2 * 3^0\n30 = 3^0 * 3^0\n30 =\
    \ 3^0 * 3^1\n30 = 3^0 * 3^2\n30 = 3^0 * 3^3\n30 = 3^1 * 3^0\n30 = 3^1 * 3^1\n\
    30 = 3^1 * 3^2\n30 = 3^1 * 3^3\n30 = 3^2 * 3^0\n30 = 3^2 * 3^1\n30 = 3^2 * 3^2\n\
    30 = 3^2 * 3^3\n30 = 3^3 * 3^0\n30 = 3^3 * 3^1\n30 = 3^3 * 3^2\n30 = 3^3 * 3^3\n\
    30 = 3^4 * 3^0\n30 = 3^4 * 3^1\n30 = 3^4 * 3^2\n30 = 3^4 * 3^3\n30 = 3^5 * 3^0\n\
    30 = 3^5 * 3^1\n30 = 3^5 * 3^2\n30 = 3^5 * 3^3\n30 = 3^6 * 3^0\n30 = 3^6 * 3^1\n\
    30 = 3^6 * 3^2\n30 = 3^6 * 3^3\n30 = 3^7 * 3^0\n30 = 3^7 * 3^1\n30 = 3^7 * 3^2\n\
    30 = 3^7 * 3^3\n30 = 3^8 * 3^0\n30 = 3^8 * 3^1\n30 = 3^8 * 3^2\n30 = 3^8 * 3^3\n\
    30 = 3^9 * 3^0\n30 = 3^9 * 3^1\n30 = 3^9 * 3^2\n30 = 3^9 * 3^3\n30 = 3^10 * 3^0\n\
    30 = 3^10 * 3^1\n30 = 3^10 * 3^2\n30 = 3^10 * 3^3\n30 = 3^11 * 3^0\n30 = 3^11\
    \ * 3^1\n30 = 3^11 * 3^2\n30 = 3^11 * 3", "    if is_multiply_prime_helper(a,\
    \ 3, 100) == true\n    else \n        false\n    end\nend", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    if a < 100\n        false\n\
    \    else\n        true\n    end\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n", "    \n    if a\
    \ < 100\n        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype is_multiply_prime(30)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns true if the given number is a prime number and false otherwise.\n\
    Knowing that (a) is less then 100. \nExample: \nis_prime(30) == True\n30 = 2 *\
    \ 3 * 5\nHint: \nUse a for loop to iterate over all numbers from 2 to 100.\nUse\
    \ a if statement to check if a number is prime or not.", "    \n    prime_numbers\
    \ = primes(a)\n    \n    for i in prime_numbers\n        if a % i == 0\n     \
    \       return false\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(10000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(10000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(1000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(10000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100000000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000000000)\n\
    </cell>\n<code language=julia-", "    \n    if a < 100\n        true\n    else\n\
    \        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n",
  "    if a < 100\n        false\n    else\n        true\n    end\nend\n</cell>\n\
    <code language=julia-1.3>\nis_multiply_prime(30)\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns true if the given number is the multiplication of\
    \ 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"", "    \n    if a < 100\n        return false\n    \n    primes =\
    \ primes(a)\n    \n    for p in primes\n        if a % p == 0\n            return\
    \ false\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns true if the given number is a prime\
    \ number and false otherwise.\nKnowing that (a) is less then 100. \nExample: \n\
    is_prime(30) == True\n30 = 2 * 3 * 5\n\"\"\"", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    if a < 100\n        false\n    else\n       \
    \ true\n    end\nend\n</cell>\n<code language=julia-1.3>\nis_multiply_prime(30)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns true if the given number\
    \ is a prime number and false otherwise.\nKnowing that (a) is less then 100. \n\
    Example: \nis_prime(30) == True\n30 = 2 * 3 * 5\n\"\"\"", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    if a < 100\n        return\
    \ true\n    \n    primes = primes_list(100)\n    \n    for i in primes\n     \
    \   if a % i == 0\n            return false\n    \n    return true\nend\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns true if the given number is the multiplication of\
    \ 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   if a < 100\n        return false\n    \n    primes = primes_list(100)\n  \
    \  \n    for i in primes\n        if a % i == 0\n            return false\n  \
    \  \n    return true\nend\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if the given number\
    \ is a prime number and false otherwise.\nKnowing that (a) is less then 100. \n\
    Example: \nis_prime(30) == True\n30 = 3 * 7 * 11\nHint: \nThe first thing you\
    \ should do is to write a function that returns true if the given number is a\
    \ prime number and false otherwise.\nThe second thing you should do is to write\
    \ a function that returns true if the given number is a multiply of 3 prime numbers\
    \ and false otherwise.\nThe third thing you should do is to write a function that\
    \ returns true if the given number is a multiply of 5 prime numbers and false\
    \ otherwise.\nThe fourth thing you should do is to write a function that returns\
    \ true if the given number is a multiply of 7 prime numbers and false otherwise.\n\
    The fifth thing you should do is to write a function that returns true if the\
    \ given number is a multiply of 11 prime numbers and false otherwise.\nThe sixth\
    \ thing you should do is to write a function that returns true if the given number\
    \ is a multiply of 13 prime numbers and false otherwise.\nThe seventh thing you\
    \ should do is to write a function that returns true if the given number is a\
    \ multiply of 17 prime numbers and false otherwise.\nThe eighth thing you should\
    \ do is to write a function that returns true if the given number is a multiply\
    \ of 19 prime numbers and false otherwise.\nThe ninth thing you should do is to\
    \ write a function that returns true if the given number is a multiply of 23 prime\
    \ numbers and false otherwise.\nThe tenth thing you should do is to write a function\
    \ that returns true if the given number is a multiply of 29 prime numbers and\
    \ false otherwise.\nThe eleventh thing you should do is to write a function that\
    \ returns true if the given number is a multiply of 31 prime numbers and false\
    \ otherwise.\nThe twelfth thing you should do is to write a function that returns\
    \ true if the given number is a multiply of 37 prime numbers and false otherwise.\n\
    The thirteenth thing you should do is to write a function that returns true if\
    \ the given number is a multiply of 41 prime numbers and false otherwise.\nThe\
    \ fourteenth thing you should do is to write a function that returns true if the\
    \ given number is a multiply of 43 prime numbers and false otherwise.\nThe fifteenth\
    \ thing you should do is to write a function that returns true if the given number\
    \ is a multiply of 47 prime numbers and false otherwise.\nThe sixteenth thing\
    \ you should do is to write a function that returns true if the given number is\
    \ a multiply ", "    \n    prime_numbers = primes(a)\n    \n    for i in prime_numbers\n\
    \        if a % i == 0\n            return false\n    return true\nend\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns true if the given number is a perfect square,\
    \ false otherwise.\nExample:\nis_perfect_square(25) == true\n25 = 4 * 7\n25 =\
    \ 2 * 3 * 5\n25 = 2 * 3 * 5 * 7\n25 = 2 * 3 * 5 * 7 * 11\n25 = 2 * 3 * 5 * 7 *\
    \ 11 * 13\n25 = 2 * 3 * 5 * 7 * 11 * 13 * 17\n25 = 2 * 3 * 5 * 7 * 11 * 13 * 17\
    \ * 19\n25 = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23\n25 = 2 * 3 * 5 * 7 * 11 *\
    \ 13 * 17 * 19 * 23 * 29\n25 = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31\n\
    25 = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37\n25 = 2 * 3 * 5 * 7\
    \ * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41\n25 = 2 * 3 * 5 * 7 * 11 * 13 *\
    \ 17 * 19 * 23 * 29 * 31 * 37 * 41 * 43\n25 = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19\
    \ * 23 * 29 * 31 * 37 * 41 * 43 * 47\n25 = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 *\
    \ 23 * 29 * 31 * 37 * 41 * 43 * 47 * 53\n25 = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19\
    \ * 23 * 29 * 31 * 37 * 41 * 43 * 47 * 53 * 59\n25 = 2 * 3 * 5 * 7 * 11 * 13 *\
    \ 17 * 19 * 23 * 29 * 31 * 37 * 41 * 43 * 47 * 53 * 59 * 61\n25 = 2 * 3 * 5 *\
    \ 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41 * 43 * 47 * 53 * 59 * 61 * 67\n\
    25 = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41 * 43 * 47 * 53\
    \ * 59 * 61 * 67 * 71\n25 = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 *\
    \ 37 * ", "    \n    if a < 100\n        \n        for n in 2..a\n           \
    \ if a % n == 0\n                return false\n        end\n        return true\n\
    \    end\n    return false\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing\
    \ that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n\
    \    30 = 2 * 3 * 5\n    \"\"\"", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    prime_numbers = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    \n    for i in prime_numbers\n        if a % i == 0\n            return\
    \ false\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if the given number\
    \ is a prime number and false otherwise.\nKnowing that (a) is less then 100. \n\
    Example: \nis_prime(30) == True\n30 = 2 * 3 * 5\n\"\"\"", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    if a < 100\n        return false\n    else if a % 3\
    \ == 0 && a % 5 == 0\n        return true\n    else\n        return false\n  \
    \  end\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(50)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(200)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(300)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(400)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(500)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(600)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(700)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(800)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(900)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1200)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1300)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1400)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1500)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1600)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1700)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1800)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1900)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(2100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(2200)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(2300)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(2400)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(2500)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(2600)\n</cell>", "    if a < 100\n        true\n    else\n \
    \       false\n    end\nend\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @code_", "    \n    prime_numbers = primes(100)\n    \n    for i in prime_numbers\n\
    \        if a % i == 0\n            return false\n    end\n    return true\nend\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell", "    \n  \
    \  if a < 100\n        \n        primes = primes(a)\n        \n        for p in\
    \ primes\n            if p*p > a\n                return false\n            end\n\
    \        end\n        return true\n    end\n    return false\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<text>\nExercise\n\
    Write a function that returns true if the given number is a prime number and false\
    \ otherwise.\nKnowing that (a) is less then 100. \nExample: \nis_prime(30) ==\
    \ True\n30 = 2 * 3 * 5\nHint: \nThe first number that does not divide 3 is a prime\
    \ number. \nThe second number that does not divide 5 is a prime number. \nThe\
    \ third number that does not divide 7 is a prime number. \nThe fourth number that\
    \ does not divide 11 is a prime number. \nThe fifth number that does not divide\
    \ 13 is a prime number. \nThe sixth number that does not divide 17 is a prime\
    \ number. \nThe seventh number that does not divide 19 is a prime number. \nThe\
    \ eighth number that does not divide 21 is a prime number. \nThe ninth number\
    \ that does not divide 23 or a prime number. \nThe tenth number that does not\
    \ divide 25 is a prime number. \nThe eleventh number that does not divide 27 is\
    \ a prime number. \nThe twelfth number that does not divide 29 is a prime number.\
    \ \nThe thirteenth number that does not divide 31 is a prime number. \nThe fourteenth\
    \ number that does not divide 33 is a prime number. \nThe fifteenth number that\
    \ does not divide 35 is a prime number. \nThe sixteenth number that does not divide\
    \ 37 is a prime number. \nThe seventeenth number that does not divide 39 is a\
    \ prime number. \nThe eighteenth number that does not divide 41 is a prime number.\
    \ \nThe nineteenth number that does not divide 43 is a prime number. \nThe twentieth\
    \ number that does not divide 45 is a prime number. \nThe thirtieth number that\
    \ does not divide 47 is a prime number. \nThe fortieth number that does not divide\
    \ 49 is a prime number. \nThe fiftieth number that does not divide 51 is a prime\
    \ number. \nThe sixtieth number that does not divide 53 is a prime number. \n\
    The seventieth number that does not divide 55 is a prime number. \nThe eightieth\
    \ number that does not divide 57 is a prime number. \nThe ninetieth number that\
    \ does not divide 59 is a prime number. \nThe twentyeth number that does not divide\
    \ 61 is a ", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    prime_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    \n    \n    for i in prime_numbers\n\
    \        if a % i == 0\n            return false\n    end\n    return true\nend\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(100000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(1000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(10000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(10000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(100000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000000000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime", "    if a < 100\n    \
    \    return false\n    else \n        primes = primes(a)\n        primes_count\
    \ = length(primes)\n        if primes_count > 3\n            return false\n  \
    \      else\n            primes_count = length(primes)\n            primes_count\
    \ = primes_count - 1\n            primes_count = primes_count - 1\n          \
    \  primes_count = primes_count - 1\n            primes_count = primes_count -\
    \ 1\n            primes_count = primes_count - 1\n            primes_count = primes_count\
    \ - 1\n            primes_count = primes_count - 1\n            primes_count =\
    \ primes_count - 1\n            primes_count = primes_count - 1\n            primes_count\
    \ = primes_count - 1\n            primes_count = primes_count - 1\n          \
    \  primes_count = primes_count - 1\n            primes_count = primes_count -\
    \ 1\n            primes_count = primes_count - 1\n            primes_count = primes_count\
    \ - 1\n            primes_count = primes_count - 1\n            primes_count =\
    \ primes_count - 1\n            primes_count = primes_count - 1\n            primes_count\
    \ = primes_count - 1\n            primes_count = primes_count - 1\n          \
    \  primes_count = primes_count - 1\n            primes_count = primes_count -\
    \ 1\n            primes_count = primes_count - 1\n            primes_count = primes_count\
    \ - 1\n            primes_count = primes_count - 1\n            primes_count =\
    \ primes_count - 1\n            primes_count = primes_count - 1\n            primes_count\
    \ = primes_count - 1\n            primes_count = primes_count - 1\n          \
    \  primes_count = primes_count - 1\n            primes_count = primes_count -\
    \ 1\n            primes_count = primes_count - 1\n            primes_count = primes_count\
    \ - 1\n            primes_count = primes_count - 1\n            primes_count =\
    \ primes_count - 1\n            primes_count = primes_count - 1\n            primes_count\
    \ = primes_count - 1\n            primes_count = primes_count - 1\n          \
    \  primes_count = primes_count - 1\n            primes_count = primes_count -\
    \ 1\n            primes_count = primes_count - 1\n            primes_count = primes_count\
    \ - 1\n            primes_count = primes_count - 1\n            primes_count =\
    \ primes_count - 1\n            primes_count = primes_count - 1\n            primes_count\
    \ = primes_count - 1\n            primes_count = primes_count - 1\n          \
    \  primes_count = primes_count - 1\n            primes_count = primes_count -\
    \ 1\n            primes_count = primes_count - 1\n            primes_count = primes_count\
    \ - 1\n            primes_count = primes_count ", "    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    if a < 100\n        false\n    else\n        true\n    end\n\
    end\n</cell>\n<code language=julia-1.1>\nis_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.1>\nis_multiply_prime(100)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns true if the given number is a prime number and false\
    \ otherwise.\nKnowing that (a) is less then 100. \nExample: \nis_prime(30) ==\
    \ True\n30 = 2 * 3 * 5\n\"\"\"", "    \n    prime_numbers = prime_numbers(a)\n\
    \    \n    for n in prime_numbers\n        if n % 3 == 0\n            return false\n\
    \        end\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(10000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(10000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(1000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(10000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100000000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000000000)\n\
    </", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    if a < 100\n        return\
    \ false\n    else if a == 2\n        return true\n    else if a == 3\n       \
    \ return true\n    else if a == 5\n        return true\n    else if a == 7\n \
    \       return true\n    else if a == 11\n        return true\n    else if a ==\
    \ 13\n        return true\n    else if a == 17\n        return true\n    else\
    \ if a == 19\n        return true\n    else if a == 23\n        return true\n\
    \    else if a == 29\n        return true\n    else if a == 31\n        return\
    \ true\n    else if a == 37\n        return true\n    else if a == 41\n      \
    \  return true\n    else if a == 43\n        return true\n    else if a == 47\n\
    \        return true\n    else if a == 53\n        return true\n    else if a\
    \ == 59\n        return true\n    else if a == 61\n        return true\n    else\
    \ if a == 67\n        return true\n    else if a == 71\n        return true\n\
    \    else if a == 73\n        return true\n    else if a == 79\n        return\
    \ true\n    else if a == 83\n        return true\n    else if a == 89\n      \
    \  return true\n    else if a == 97\n        return true\n    else\n        return\
    \ false\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Write a function that\
    \ returns true if the given number is the multiplication of 5 prime numbers\n\
    \    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n\
    \    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"", "    \n \
    \   primes = prime_numbers(a)\n    \n    for i in primes\n        if a % i ==\
    \ 0\n            return false\n        end\n    end\n    return true\nend\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(100000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(1000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(10000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(10000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(100000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000000000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000000000)\n\
    </cell>\n", "    if is_multiply_prime_helper(a, 3, 100) == true\n    else \n \
    \       false\n    end\nend\n\"\"\"\nWrite a function that returns true if the\
    \ given number is the multiplication of 5 prime numbers\n    and false otherwise.\n\
    \    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5 * 7\n    \"\"\"", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    if a < 100\n        return false\n    \n\
    \    primes = prime_numbers(a)\n    \n    for p in primes\n        if p * 3 ==\
    \ a\n            return true\n        end\n    end\n    return false\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert is_multiply_prime(30) == true\n@assert is_multiply_prime(31)\
    \ == false\n@assert is_multiply_prime(100) == false\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns true if the given number is divisible by 3\
    \ prime numbers and false otherwise.\nKnowing that (a) is less then 100. \nExample:\
    \ \nis_divisible_prime(30) == true\n30 = 2 * 3 * 5\n\"\"\"", "    if a < 100\n\
    \        return false\n    \n    primes = prime_numbers(a)\n    \n    for p in\
    \ primes\n        if p * 3 == a\n            return true\n        end\n    end\n\
    \    return false\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns true if the given number is a prime\
    \ number and false otherwise.\nKnowing that (a) is less then 100. \nExample: \n\
    is_prime(30) == true\n30 = 2 * 3 * 5\n\"\"\"", "    if is_multiply_prime_helper(a,\
    \ 3, 100) == true\n    else false\nend\n\"\"\"\n    Write a function that returns\
    \ true if the given number is the multiplication of 5 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5 * 7\n    \"\"\"", "    if a < 100\n        true\n\
    \    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.3>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.3>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.3>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.3>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.3>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.3>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.3>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.3>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.3>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.3>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.3>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.3>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.3>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.3>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.3>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.3>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.3>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.3>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.3>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.3>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.3>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.3>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.3>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.3>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.3>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.3>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.3>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.3>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.3>\nis_multiply_prime(30)\n</cell", "    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    prime_numbers =\
    \ primes(100)\n    \n    for i in prime_numbers\n        if a % i == 0\n     \
    \       return false\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell", "    \n    prime_numbers = primes(a)\n    \n \
    \   prime_numbers.is_empty()\n    \n    prime_numbers.head == 3\n    \n    prime_numbers.tail\
    \ == prime_numbers.tail.tail\n    \n    prime_numbers.tail.head == 5\n    \n \
    \   prime_numbers.tail.tail == prime_numbers.tail.tail.tail\n    \n    prime_numbers.tail.tail.head\
    \ == 7\n    \n    prime_numbers.tail.tail.tail == prime_numbers.tail.tail.tail.tail\n\
    \    \n    prime_numbers.tail.tail.tail.head == 11\n    \n    prime_numbers.tail.tail.tail.tail\
    \ == prime_numbers.tail.tail.tail.tail.tail\n    \n    prime_numbers.tail.tail.tail.tail.head\
    \ == 13\n    \n    prime_numbers.tail.tail.tail.tail.tail == prime_numbers.tail.tail.tail.tail.tail.tail\n\
    \    \n    prime_numbers.tail.tail.tail.tail.tail.head == 17\n    \n    prime_numbers.tail.tail.tail.tail.tail.tail\
    \ == prime_numbers.tail.tail.tail.tail.tail.tail.tail\n    \n    prime_numbers.tail.tail.tail.tail.tail.tail.head\
    \ == 19\n    \n    prime_numbers.tail.tail.tail.tail.tail.tail.tail == prime_numbers.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \    \n    prime_numbers.tail.tail.tail.tail.tail.tail.tail.head == 23\n    \n\
    \    prime_numbers.tail.tail.tail.tail.tail.tail.tail == prime_numbers.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \    \n    prime_numbers.tail.tail.tail.tail.tail.tail.tail.tail.head == 29\n\
    \    \n    prime_numbers.tail.tail.tail.tail.tail.tail.tail.tail.tail == prime_numbers.tail.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \    \n    prime_numbers.tail.tail.tail.tail.tail.tail.tail.tail.tail.head ==\
    \ 31\n    \n    prime_numbers.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\
    \ == 37\n", "    \n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    \n    for i in primes\n\
    \        if a % i == 0\n            return False\n    \n    for i in primes\n\
    \        if a % i == 0\n            return True\n    \n    return false\nend\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(50)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(10000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(10000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(1000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(10000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100000000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>", "    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    if a < 100\n        return false\n    \n    primes\
    \ = prime_numbers(a)\n    \n    for i in primes\n        if a % i == 0\n     \
    \       return false\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(10000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(10000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(1000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(10000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100000000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100", "    \n    if a <\
    \ 100\n        return false\n    \n    primes = prime_numbers(a)\n    \n    for\
    \ p in primes\n        if p % 3 == 0\n            return false\n    \n    return\
    \ true\nend\n</cell>\n<code language=julia-1.5>\n@assert is_multiply_prime(30)\
    \ == true\n@assert is_multiply_prime(31) == false\n@assert is_multiply_prime(99)\
    \ == false\n</cell>\n<text>\nExercise 3\nWrite a function that returns true if\
    \ the given number is a perfect square, false otherwise.\n    \n    Example:\n\
    \    is_perfect_square(25) == true\n    25 = 2 * 3 * 5\n    25 = 2 * 3 * 5 * 7\n\
    \    25 = 2 * 3 * 5 * 7 * 11\n    25 = 2 * 3 * 5 * 7 * 11 * 13\n    25 = 2 * 3\
    \ * 5 * 7 * 11 * 13 * 17\n    25 = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19\n    25 =\
    \ 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23\n    25 = 2 * 3 * 5 * 7 * 11 * 13 * 17\
    \ * 19 * 23 * 29\n    25 = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31\n\
    \    25 = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37\n    25 = 2 *\
    \ 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41\n    25 = 2 * 3 * 5 *\
    \ 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41 * 43\n    25 = 2 * 3 * 5 * 7\
    \ * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41 * 43 * 47\n    25 = 2 * 3 * 5 *\
    \ 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41 * 43 * 47 * 53\n    25 = 2 *\
    \ 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41 * 43 * 47 * 53 * 59\n\
    \    25 = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41 * 43 * 47\
    \ * 53 * 59 * 61\n    25 = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 *\
    \ 37 * 41 * 43 * 47 * 53 * 59 * 61 * 67\n    25 = 2 * 3 * 5 * 7 * 11 * 13", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    if a < 100\n\
    \        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_multiply_prime(30) == true\n@assert is_multiply_prime(10) == false\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns true if the given number\
    \ is a prime number and false otherwise.\n    \n    Example:\n    is_prime(30)\
    \ == true\n    30 = 3 * 7 * 11\n    \"\"\"", "    if a < 100\n        true\n \
    \   else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if the given number\
    \ is a prime number and false otherwise.\nKnowing that (a) is less then 100. \n\
    Example: \nis_prime(30) == True\n30 = 2 * 3 * 5\n\"\"\"", "    \n    if a < 100\n\
    \        return false\n    \n    prime_numbers = prime_numbers(a)\n    \n    for\
    \ i in prime_numbers\n        if a % i == 0\n            return false\n    \n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\n@assert is_multiply_prime(30)\
    \ == true\n@assert is_multiply_prime(31) == false\n@assert is_multiply_prime(100)\
    \ == false\n</cell>\n<text>\nExercise 2\nWrite a function that returns the multiplication\
    \ of 3 prime numbers. \n    Example:\n    mult_3_primes(30) == 60\n    30 = 2\
    \ * 3 * 5\n    \"\"\"", "    \n    if a < 100\n        true\n    else\n      \
    \  false\n    end\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing\
    \ that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n\
    \    30 = 2 * 3 * 5\n    \"\"\"", "    \n    if a < 100\n        return false\n\
    \    \n    primes = primes_list(100)\n    \n    for p in primes\n        if p*p\
    \ > a\n            return false\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(200)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(300)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(400)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(500)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(600)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(700)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(800)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(900)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1100)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1200)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1300)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1400)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1500)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1600)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1700)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1800)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1900)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(2000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(2100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(2200)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(2300)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(2400)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(2500)\n\
    </cell>\n<code language=julia-", "    \n    primes = prime_numbers(a)\n    \n\
    \    for prime in primes\n        if prime == 3\n            return true\n   \
    \     else\n            return false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the multiplication\
    \ of 2 prime numbers. \n    Example:\n    multiply_primes(30) == 30 * 2\n    \"\
    \"\"", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    prime_numbers = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    for i in prime_numbers\n        if a % i == 0\n            return false\n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns true if the given number is a power\
    \ of 3 or false otherwise.\n    Example:\n    is_power_of_3(3) == true\n    is_power_of_3(5)\
    \ == false\n    \"\"\"", "    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    if a < 100\n        true\n    else\n        false\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(100000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(1000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(10000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(10000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(100000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000000000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000000000000)\n\
    </cell", "    \n    prime_numbers = prime_numbers(a)\n    \n    for prime in prime_numbers\n\
    \        if a % prime == 0\n            return false\n        end\n    end\n \
    \   return true\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(10000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(1000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(10000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(1000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(10000000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(10000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(1000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(10000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(1000000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(1000000000000000000000000", "   \
    \ \n    prime_numbers = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    for i in prime_numbers\n        if a % i == 0\n            return false\n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if the given number\
    \ is a prime number and false otherwise.\nKnowing that (a) is less then 100. \n\
    Example: \nis_prime(30) == True\n30 = 2 * 3 * 5\n\"\"\"", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    prime_numbers = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    for i in prime_numbers\n        if a % i == 0\n            return false\n\
    \    return true\nend\n</cell>\n<code language=julia-1.0>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.0>\nis_multiply_prime(100)\n</cell>\n<code language=julia-1.0>\n\
    is_multiply_prime(1000)\n</cell>\n<code language=julia-1.0>\nis_multiply_prime(10000)\n\
    </cell>\n<code language=julia-1.0>\nis_multiply_prime(100000)\n</cell>\n<code\
    \ language=julia-1.0>\nis_multiply_prime(1000000)\n</cell>\n<code language=julia-1.0>\n\
    is_multiply_prime(10000000)\n</cell>\n<code language=julia-1.0>\nis_multiply_prime(100000000)\n\
    </cell>\n<code language=julia-1.0>\nis_multiply_prime(1000000000)\n</cell>\n<code\
    \ language=julia-1.0>\nis_multiply_prime(10000000000)\n</cell>\n<code language=julia-1.0>\n\
    is_multiply_prime(100000000000)\n</cell>\n<code language=julia-1.0>\nis_multiply_prime(1000000000000)\n\
    </cell>\n<code language=julia-1.0>\nis_multiply_prime(10000000000000)\n</cell>\n\
    <code language=julia-1.0>\nis_multiply_prime(100000000000000)\n</cell>\n<code\
    \ language=julia-1.0>\nis_multiply_prime(1000000000000000)\n</cell>\n<code language=julia-1.0>\n\
    is_multiply_prime(10000000000000000)\n</cell>\n<code language=julia-1.0>\nis_multiply_prime(100000000000000000)\n\
    </cell>\n<code language=julia-1.0>\nis_multiply_prime(1000000000000000000)\n</cell>\n\
    <code language=julia-1.0>\nis_multiply_prime(10000000000000000000)\n</cell>\n\
    <code language=julia-1.0>\nis_multiply_prime(100000000000000000000)\n</cell>\n\
    <code language=julia-1.0>\nis_multiply_prime(1000000000000000000000)\n</cell>\n\
    <code language=julia-1.0>\nis_multiply_prime(10000000000000000000000)\n</cell>\n\
    <code language=julia-1.0>\nis_multiply_prime(100000000000000000000000)\n</cell>\n\
    <code language=julia-1.0>\nis_multi", "    \n    primes = primes_list(100)\n \
    \   \n    primes_set = Set(primes)\n    \n    primes_set = primes_set - Set(primes_list(a\
    \ % primes_set))\n    \n    return primes_set == Set(primes)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns true if the given number is a prime number and false\
    \ otherwise.\nKnowing that (a) is less then 100. \nExample: \nis_prime(30) ==\
    \ True\n30 = 2 * 3 * 5\n\"\"\"", "    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    if a < 100\n        true\n    else\n        false\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype is_multiply_prime(100)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns true if the given number is\
    \ a prime number and false otherwise.\n    \n    Example:\n    is_prime(30) ==\
    \ True\n    30 = 3 * 7 * 11 * 13 * 17 * 19\n    \"\"\"", "    \n    prime_numbers\
    \ = primes(100)\n    \n    for num in prime_numbers\n        if a % num == 0\n\
    \            return false\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n", "    \n    prime_numbers = primes(a)\n    \n    prime_numbers_product\
    \ = prod(prime_numbers)\n    \n    return prime_numbers_product == a\nend\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(100000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(1000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(10000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(10000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(100000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000000000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000000000)\n",
  "    \n    if a < 100\n        return false\n    \n    primes = prime_numbers(a)\n\
    \    \n    for i in primes\n        if a % i == 0\n            return false\n\
    \    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(100)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns true if the given number is a prime\
    \ number and false otherwise.\nKnowing that (a) is less then 100. \nExample: \n\
    is_prime(30) == true\n30 = 2 * 3 * 5\n\"\"\"", "    \n    prime_numbers = primes(a)\n\
    \    \n    prime_numbers_2 = primes(a)\n    \n    prime_numbers_3 = primes(a)\n\
    \    \n    prime_numbers_4 = primes(a)\n    \n    prime_numbers_5 = primes(a)\n\
    \    \n    prime_numbers_6 = primes(a)\n    \n    prime_numbers_7 = primes(a)\n\
    \    \n    prime_numbers_8 = primes(a)\n    \n    prime_numbers_9 = primes(a)\n\
    \    \n    prime_numbers_10 = primes(a)\n    \n    prime_numbers_11 = primes(a)\n\
    \    \n    prime_numbers_12 = primes(a)\n    \n    prime_numbers_13 = primes(a)\n\
    \    \n    prime_numbers_14 = primes(a)\n    \n    prime_numbers_15 = primes(a)\n\
    \    \n    prime_numbers_16 = primes(a)\n    \n    prime_numbers_17 = primes(a)\n\
    \    \n    prime_numbers_18 = primes(a)\n    \n    prime_numbers_19 = primes(a)\n\
    \    \n    prime_numbers_20 = primes(a)\n    \n    prime_numbers_21 = primes(a)\n\
    \    \n    prime_numbers_22 = primes(a)\n    \n    prime_numbers_23 = primes(a)\n\
    \    \n    prime_numbers_24 = primes(a)\n    \n    prime_numbers_25 = primes(a)\n\
    \    \n    prime_numbers_26 = primes(a)\n    \n    prime_numbers_27 = primes(a)\n\
    \    \n    prime_numbers_28 = primes(a)\n    \n    prime_numbers_29 = primes(a)\n\
    \    \n    prime_numbers_30 = primes(a)\n    \n    prime_numbers_31 = primes(a)\n\
    \    \n    prime_numbers_32 = primes(a)\n    \n    prime_numbers_33 = primes(a)\n\
    \    \n    prime_numbers_34 = primes(a)\n    \n    prime_numbers_35 = primes(a)\n\
    \    \n    prime_numbers_36 = primes(a)\n    \n    prime_numbers_37 = primes(a)\n\
    \    \n    prime_numbers_38 = primes(a)\n    \n    prime_numbers_39 = primes(a)\n\
    \    \n    prime_numbers_40 = primes(a)\n    \n    prime_", "    if a < 100\n\
    \        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n\
    </cell>\n<text>\nExercise\nWrite a function that returns true if the given number\
    \ is a prime number and false otherwise.\nKnowing that (a) is less then 100. \n\
    Example: \nis_prime(30) == True\n30 = 2 * 3 * 5\n\"\"\"", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    prime_numbers = primes(100)\n\
    \    \n    for i in prime_numbers\n        if a % i == 0\n            return false\n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns true if the given number is a prime\
    \ number and false otherwise.\nKnowing that (a) is less then 100. \nExample: \n\
    is_prime(30) == True\n30 = 2 * 3 * 5\n\"\"\"", "    if a < 100\n        return\
    \ false\n    else \n        return true\nend\n</cell>\n<code language=julia-1.0>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.0>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.0>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.0>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.0>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.0>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.0>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.0>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.0>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.0>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.0>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.0>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.0>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.0>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.0>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.0>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.0>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.0>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.0>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.0>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.0>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.0>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.0>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.0>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.0>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.0>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.0>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.0>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.0>\nis_multiply_prime(30)\n\
    </cell>", "    \n    prime_numbers = primes(100)\n    \n    prime_numbers_array\
    \ = [i for i in prime_numbers if i < a]\n    \n    for i in prime_numbers_array:\n\
    \        if a % i == 0:\n            return False\n    return True\nend\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns true if the given number is the multiplication of\
    \ 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"", "    \n    if a < 100\n        true\n    else\n        false\n \
    \   end\nend\n</cell>\n<code language=julia-1.0>\n@code_warntype is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.0>\n@code_warntype is_multiply_prime(100)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns true if the given number is\
    \ the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing\
    \ that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n\
    \    30 = 2 * 3 * 5\n    \"\"\"", "    if a < 100\n        true\n    else\n  \
    \      false\n    end\nend\n</cell>\n<code language=julia-1.3>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.3>\nis_multiply_prime(50)\n</cell>\n<code language=julia-1.3>\n\
    is_multiply_prime(100)\n</cell>\n<code language=julia-1.3>\nis_multiply_prime(200)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if the given number\
    \ is a power of 3 and\n    false otherwise.\n    Example:\n    is_power_of_3(5)\
    \ == True\n    5 = 2 * 3\n    \"\"\"", "    \n    prime_numbers = primes(a)\n\
    \    \n    for i in prime_numbers\n        if a % i == 0\n            return false\n\
    \        end\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(50)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(200)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(300)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(400)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(500)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(600)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(700)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(800)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(900)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1200)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1300)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1400)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1500)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1600)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1700)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1800)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1900)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(2000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(2100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(2200)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(2300)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(2400)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(2500", "    \n    prime_numbers\
    \ = primes(100)\n    \n    for n in prime_numbers\n        if a % n == 0\n   \
    \         return false\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<text>\nExercise: Write a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \"\"\"", "    if a < 100\n        true\n  \
    \  else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell", "    if a\
    \ < 100\n        false\n    else\n        true\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_multiply_prime(30) == true\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns true if the given number is a prime number and false otherwise.\n\
    \    \n    Example:\n    is_prime(30) == true\n    30 = 3 * 7 * 11 * 13 * 17 *\
    \ 19\n    \"\"\"", "    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    prime_numbers = primes(a)\n    \n    for num in prime_numbers:\n    \
    \    if num > a:\n            break\n        if a % num == 0:\n            return\
    \ False\n    return True\nend\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if the given number\
    \ is a perfect power of 2 and false otherwise.\nExample:\nis_perfect_power(2)\
    \ == True\nis_perfect_power(3) == False\nis_perfect_power(5) == True\nis_perfect_power(10)\
    \ == True\nis_perfect_power(15) == False\nis_perfect_power(20) == True\nis_perfect_power(25)\
    \ == False\nis_perfect_power(30) == True\nis_perfect_power(35) == False\nis_perfect_power(40)\
    \ == True\nis_perfect_power(45) == False\nis_perfect_power(50) == True\nis_perfect_power(55)\
    \ == False\nis_perfect_power(60) == True\nis_perfect_power(65) == False\nis_perfect_power(70)\
    \ == True\nis_perfect_power(75) == False\nis_perfect_power(80) == True\nis_perfect_power(85)\
    \ == False\nis_perfect_power(90) == True\nis_perfect_power(95) == False\nis_perfect_power(100)\
    \ == True\nis_perfect_power(105) == False\nis_perfect_power(110) == True\nis_perfect_power(115)\
    \ == False\nis_perfect_power(120) == True\nis_perfect_power(125) == False\nis_perfect_power(130)\
    \ == True\nis_perfect_power(135) == False\nis_perfect_power(140) == True\nis_perfect_power(145)\
    \ == False\nis_perfect_power(150) == True\nis_perfect_power(155) == False\nis_perfect_power(160)\
    \ == True\nis_perfect_power(165) == False\nis_perfect_power(170) == True\nis_perfect_power(175)\
    \ == False\nis_perfect_power(180) == True\nis_perfect_power(185) == False\nis_perfect_power(190)\
    \ == True\nis_perfect_power(195) == False\nis_perfect_power(200) == True\nis_perfect_power(205)\
    \ == False\nis_perfect_power(210) == True\nis_perfect_power(215) == False\nis_perfect_power(220)\
    \ == True\nis_perfect_power(225) == False\nis_perfect_power(230) == True\nis_perfect_power(235)\
    \ == False\nis_perfect_power(240) == True\nis_perfect_power(245) == False\nis_perfect_power(250)\
    \ == True\nis_perfect_power(255) == False\n", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    if a < 100\n        true\n    else\n        false\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype is_multiply_prime(100)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype is_multiply_prime(200)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype is_multiply_prime(300)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ is_multiply_prime(400)\n</cell>\n<code language=julia-1.5>\n@code_warntype is_multiply_prime(500)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype is_multiply_prime(600)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype is_multiply_prime(700)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype is_multiply_prime(800)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype is_multiply_prime(900)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ is_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ is_multiply_prime(1100)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ is_multiply_prime(1200)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ is_multiply_prime(1300)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ is_multiply_prime(1400)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ is_multiply_prime(1500)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ is_multiply_prime(1600)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ is_multiply_prime(1700)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ is_multiply_prime(1800)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ is_multiply_prime(1900)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ is_multiply_prime(2000)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ is_multiply_prime(2100)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ is_multiply_prime", "    if is_multiply_prime_helper(a, 3, 100) == true\n  \
    \  else false\nend", "    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if a < 100\n  \
    \      false\n    else\n        true\n    end\nend\n</cell>\n<code language=julia-1.1>\n\
    @assert is_multiply_prime(30) == true\n@assert is_multiply_prime(31) == false\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns true if the given number\
    \ is a prime number and false otherwise.\n    \n    \n    Example:\n    is_prime(30)\
    \ == true\n    30 = 2 * 3 * 5\n    \"\"\"", "    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    if a < 100\n        return false\n    \n\
    \    primes = prime_numbers(a)\n    \n    for p in primes\n        if p > 100\n\
    \            return false\n        \n        if p == a % p\n            return\
    \ false\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if the given number\
    \ is a prime number or false otherwise.\n    \n    Example:\n    is_prime(30)\
    \ == true\n    30 = 3 * 7 * 11 * 13 * 17 * 19\n    \"\"\"", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    prime_numbers = primes(a)\n\
    \    \n    \n    for i in prime_numbers\n        if a % i == 0\n            return\
    \ false\n        end\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(10000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(10000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(1000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(10000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100000000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000000000)\n\
    </", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if a < 100\n\
    \        return true\n    else \n        return false\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_multiply_prime(30) == true\n@assert is_multiply_prime(30) == false\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if the given number\
    \ is a prime number and false otherwise.\nKnowing that (a) is less then 100.\n\
    Example: \nis_prime(30) == true\n30 = 2 * 3 * 5\n\"\"\"", "    if a < 100\n  \
    \      true\n    else\n        false\n    end\nend", "    \n    if a < 100\n \
    \       return false\n    \n    prime_numbers = primes(a)\n    \n    for p in\
    \ prime_numbers\n        if p > 2\n            return false\n    \n    return\
    \ true\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100)\n</cell>\n<text>\nExercise\n\
    Write a function that returns true if the given number is the multiplication of\
    \ 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n\
    \    \"\"\"", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    prime_numbers = primes(100)\n    \n    for p in prime_numbers\n    \
    \    if a % p == 0\n            return false\n        end\n    end\n    return\
    \ true\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if a < 100\n  \
    \      return false\n    \n    primes = prime_numbers(a)\n    \n    for p in primes\n\
    \        if p*p > a\n            return false\n        end\n    end\n    \n  \
    \  return true\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(200)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(300)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(400)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(500)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(600)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(700)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(800)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(900)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1200)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1300)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1400)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1500)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1600)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1700)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1800)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1900)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(2100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(2200)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(2300)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(2400)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(2500)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(2600)\n</cell>\n", "   \
    \ \n    if a < 100\n        return false\n    \n    prime_numbers = primes(a)\n\
    \    \n    for prime in prime_numbers\n        if a % prime == 0\n           \
    \ return false\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(100)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(1000)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(10000)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(100000)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(1000000)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(10000000)\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(100000000)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(1000000000)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(10000000000)\n</cell>\n<code language=julia-1.5>\n@time\
    \ is_multiply_prime(100000000000)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(1000000000001)\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(1000000000002)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(1000000000003)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(1000000000004)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(1000000000005)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(1000000000006)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(1000000000007)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(1000000000008)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(1000000000009)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(1000000000010)\n</cell>\n", " \
    \   \n    primes = prime_numbers(a)\n    \n    for i in primes\n        if a %\
    \ i == 0\n            return false\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    \    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n\
    \    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"", "    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    if a < 100\n        return\
    \ true\n    \n    primes = prime_numbers(a)\n    \n    for p in primes\n     \
    \   if p * p > a\n            return false\n        end\n    end\n    return true\n\
    end\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns true if the given number is\
    \ a prime and false otherwise.\nKnowing that (a) is less then 100. \nExample:\
    \ \nis_prime(30) == True\n30 = 2 * 3 * 5\n\"\"\"", "    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    if a < 100\n        true\n    else\n  \
    \      false\n    end\nend\n</cell>\n<code language=julia-1.0>\n@assert is_multiply_prime(30)\
    \ == true\n@assert is_multiply_prime(31) == false\n@assert is_multiply_prime(33)\
    \ == false\n@assert is_multiply_prime(101) == false\n@assert is_multiply_prime(101)\
    \ == false\n@assert is_multiply_prime(101) == false\n@assert is_multiply_prime(101)\
    \ == false\n@assert is_multiply_prime(101) == false\n@assert is_multiply_prime(101)\
    \ == false\n@assert is_multiply_prime(101) == false\n@assert is_multiply_prime(101)\
    \ == false\n@assert is_multiply_prime(101) == false\n@assert is_multiply_prime(101)\
    \ == false\n@assert is_multiply_prime(101) == false\n@assert is_multiply_prime(101)\
    \ == false\n@assert is_multiply_prime(101) == false\n@assert is_multiply_prime(101)\
    \ == false\n@assert is_multiply_prime(101) == false\n@assert is_multiply_prime(101)\
    \ == false\n@assert is_multiply_prime(101) == false\n@assert is_multiply_prime(101)\
    \ == false\n@assert is_multiply_prime(101) == false\n@assert is_multiply_prime(101)\
    \ == false\n@assert is_multiply_prime(101) == false\n@assert is_multiply_prime(101)\
    \ == false\n@assert is_multiply_prime(101) == false\n@assert is_multiply_prime(101)\
    \ == false\n@assert is_multiply_prime(101) == false\n@assert is_multiply_prime(101)\
    \ == false\n@assert is_multiply_prime(101) == false\n@assert is_multiply_prime(101)\
    \ == false\n@assert is_multiply_prime(101) == false\n@assert is_multiply_prime(101)\
    \ == false\n@assert is_multiply_prime(101) == false\n@assert is_multiply_prime(101)\
    \ == false\n@assert is_multiply_prime(101) == false\n@assert is_multiply_prime(101)\
    \ == false\n@assert is_multiply_prime(101) == false\n@assert is_multiply_prime(101)\
    \ == false\n@assert is_multiply_prime(101) == false\n@assert is_multiply_prime(101)\
    \ == false\n@assert is_multiply_prime(101) == false\n@assert is_multiply_prime(101)\
    \ == false\n@assert is_multiply_prime(101) == false\n@", "    \n    if a < 100\n\
    \        return false\n    \n    primes = prime_numbers(a)\n    \n    for i in\
    \ primes\n        if i == 2\n            continue\n        \n        for j in\
    \ primes\n            if j == 2\n                continue\n            \n    \
    \        if i % j == 0\n                return false\n            \n    return\
    \ true\nend\n</cell>\n<code language=julia-1.5>\n@assert is_multiply_prime(30)\
    \ == true\n@assert is_multiply_prime(31) == false\n@assert is_multiply_prime(100)\
    \ == false\n@assert is_multiply_prime(101) == true\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns true if the given number is a perfect square,\
    \ false otherwise.\nExample: \n    25 is a perfect square\n    25 = 9 + 25\n \
    \   25 = 25 + 25\n    25 = 25 + 25 + 25\n    25 = 25 + 25 + 25 + 25\n    25 =\
    \ 25 + 25 + 25 + 25 + 25\n    25 = 25 + 25 + 25 + 25 + 25 + 25\n    25 = 25 +\
    \ 25 + 25 + 25 + 25 + 25 + 25\n    25 = 25 + 25 + 25 + 25 + 25 + 25 + 25 + 25\n\
    \    25 = 25 + 25 + 25 + 25 + 25 + 25 + 25 + 25 + 25\n    25 = 25 + 25 + 25 +\
    \ 25 + 25 + 25 + 25 + 25 + 25 + 25\n    25 = 25 + 25 + 25 + 25 + 25 + 25 + 25\
    \ + 25 + 25 + 25 + 25\n    25 = 25 + 25 + 25 + 25 + 25 + 25 + 25 + 25 + 25 + 25\
    \ + 25 + 25\n    25 = 25 + 25 + 25 + 25 + 25 + 25 + 25 + 25 + 25 + 25 + 25 + 25\
    \ + 25\n    25 = 25 + 25 + 25 + 25 + 25 + 25 + 25 + 25 + 25 + 25 + 25 + 25 + 25\
    \ + 25 + 25\n    25 = 25 + 25 + 25 + 25 + 25 + 25 + 25 + 25 + 25 + 25 + 25 + 25\
    \ + 25 + 25 + 25 + 25\n    25 = 25 + 25 + 25 + 25 + 25 + 25 + 25 + 25 + 25 + 25\
    \ + 25 + 25 + 25 + 25 + 25 + 25 + 25\n    25 = 25 + 25 + 25 + 25 + 25 + 25 + 25\
    \ + 25 + 25 + 25 + 25 + 25 + 25 + 25 + 25", "    \n    if a < 100\n        return\
    \ false\n    \n    primes = prime_numbers(a)\n    \n    for p in primes\n    \
    \    if p == 3 || p == 5\n            return true\n        \n    return false\n\
    end\n</cell>\n<code language=julia-1.4>\n@time is_multiply_prime(30)\n</cell>\n\
    <code language=julia-1.4>\n@time is_multiply_prime(100)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns true if the given number is a power of 3 prime\
    \ and false otherwise.\nKnowing that (a) is less then 100. \nExample: \nis_power_of_3_prime(30)\
    \ == True\n30 = 2 * 3 * 5\n\"\"\"", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    prime_numbers = primes(100)\n    \n    for p in prime_numbers\n\
    \        if p*p*p == a\n            return true\n        end\n    end\n    return\
    \ false\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(10000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(1000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(10000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(1000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(10000000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(10000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(1000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(1000000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(10000000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(100000000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(100000000000000000000", "    \n    if\
    \ a < 100\n        return false\n    \n    prime_numbers = primes(a)\n    \n \
    \   for n in prime_numbers\n        if n % 3 == 0\n            return false\n\
    \    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(100)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(10000)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(100000)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(1000000)\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(10000000)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(100000000)\n</cell>\n<code language=julia-1.5>\n@time\
    \ is_multiply_prime(1000000000)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(10000000000)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(100000000000)\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(1000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(10000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(100000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(1000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(10000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(100000000000000000)\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(1000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(10000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(100000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(1000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\n@", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    if a < 100\n        return false\n    \n    primes\
    \ = prime_numbers(a)\n    \n    for p in primes\n        if p > 100\n        \
    \    return false\n        \n        if p == a % p\n            return false\n\
    \        \n    return true\nend\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(100)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns true if the given number is a prime\
    \ number and false otherwise.\nKnowing that (a) is less then 100. \nExample: \n\
    is_prime(30) == True\n30 = 2 * 3 * 5\n\"\"\"", "    if a < 100\n        true\n\
    \    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(50)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(200)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(300)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(400)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(500)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(600)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(700)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(800)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(900)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1200)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1300)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1400)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1500)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1600)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1700)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1800)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1900)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(2100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(2200)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(2300)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(2400)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(2500)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(2600)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(2700)",
  "    \n    if a < 100\n        return false\n    \n    primes = prime_numbers(a)\n\
    \    \n    for p in primes\n        if p * 3 == a\n            return true\n \
    \       end\n    end\n    \n    return false\nend\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(100)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing\
    \ that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n\
    \    30 = 2 * 3 * 5\n    \"\"\"", "    \n    primes = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  \
    \  \n    for i in primes\n        if a % i == 0\n            return false\n  \
    \  end\n    return true\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(10000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(1000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(10000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(1000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(10000000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(10000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(1000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(10000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(1000000000000000000000000)", "  \
    \  \n    prime_numbers = primes(100)\n    \n    for p in prime_numbers\n     \
    \   if a % p == 0\n            return false\n    end\n    return true\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert is_multiply_prime(30) == true\n@assert is_multiply_prime(31)\
    \ == false\n</cell>\n<text>\nExercise 2\nWrite a function that returns true if\
    \ the given number is a power of 3 prime and false otherwise.\nKnowing that (a)\
    \ is less then 100. \nExample: \nis_power_of_3_prime(30) == true\n30 = 2 * 3 *\
    \ 5\n\"\"\"", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   if a < 100\n        return true\n    else \n        primes = prime_numbers(a)\n\
    \        prime_3 = primes[3]\n        prime_5 = primes[5]\n        prime_7 = primes[7]\n\
    \        prime_11 = primes[11]\n        prime_13 = primes[13]\n        prime_17\
    \ = primes[17]\n        prime_19 = primes[19]\n        prime_31 = primes[31]\n\
    \        prime_33 = primes[33]\n        prime_37 = primes[37]\n        prime_39\
    \ = primes[39]\n        prime_71 = primes[71]\n        prime_73 = primes[73]\n\
    \        prime_79 = primes[79]\n        prime_83 = primes[83]\n        prime_89\
    \ = primes[89]\n        prime_97 = primes[97]\n        prime_101 = primes[101]\n\
    \        prime_103 = primes[103]\n        prime_107 = primes[107]\n        prime_109\
    \ = primes[109]\n        prime_113 = primes[113]\n        prime_121 = primes[121]\n\
    \        prime_123 = primes[123]\n        prime_127 = primes[127]\n        prime_131\
    \ = primes[131]\n        prime_137 = primes[137]\n        prime_139 = primes[139]\n\
    \        prime_149 = primes[149]\n        prime_151 = primes[151]\n        prime_157\
    \ = primes[157]\n        prime_159 = primes[159]\n        prime_163 = primes[163]\n\
    \        prime_167 = primes[167]\n        prime_173 = primes[173]\n        prime_175\
    \ = primes[175]\n        prime_177 = primes[177]\n        prime_179 = primes[179]\n\
    \        prime_181 = primes[181]\n        prime_191 = primes[191]\n        prime_193\
    \ = primes[193]\n        prime_195 = primes[195]\n        prime_197 = primes[197]\n\
    \        prime_199 = primes[199]\n        prime_201 = primes[201]\n        prime_203\
    \ = primes[203]\n        prime_205 = primes[205]\n        prime_207 = primes[207]\n\
    \        prime_209 = primes[209]\n        prime_211 = primes[211]\n        prime",
  "    if a < 100\n        true\n    else\n        false\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(50)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(200)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(300)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(400)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(500)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(600)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(700)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(800)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(900)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1200)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1400)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1600)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1800)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(2000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(2200)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(2400)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(2600)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(2800)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(3000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(3200)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(3400)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(3600)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(3800)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(4000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(4200)", "    \n    if a\
    \ < 100\n        return false\n    \n    primes = primes_list(100)\n    \n   \
    \ for i in primes\n        if a % i == 0\n            return false\n    \n   \
    \ return true\nend\n</cell>\n<code language=julia-1.5>\n@assert is_multiply_prime(30)\
    \ == true\n@assert is_multiply_prime(31) == false\n@assert is_multiply_prime(32)\
    \ == false\n@assert is_multiply_prime(33) == false\n@assert is_multiply_prime(34)\
    \ == false\n@assert is_multiply_prime(35) == false\n@assert is_multiply_prime(36)\
    \ == false\n@assert is_multiply_prime(37) == false\n@assert is_multiply_prime(38)\
    \ == false\n@assert is_multiply_prime(39) == false\n@assert is_multiply_prime(40)\
    \ == false\n@assert is_multiply_prime(41) == false\n@assert is_multiply_prime(42)\
    \ == false\n@assert is_multiply_prime(43) == false\n@assert is_multiply_prime(44)\
    \ == false\n@assert is_multiply_prime(45) == false\n@assert is_multiply_prime(46)\
    \ == false\n@assert is_multiply_prime(47) == false\n@assert is_multiply_prime(48)\
    \ == false\n@assert is_multiply_prime(49) == false\n@assert is_multiply_prime(50)\
    \ == false\n@assert is_multiply_prime(51) == false\n@assert is_multiply_prime(52)\
    \ == false\n@assert is_multiply_prime(53) == false\n@assert is_multiply_prime(54)\
    \ == false\n@assert is_multiply_prime(55) == false\n@assert is_multiply_prime(56)\
    \ == false\n@assert is_multiply_prime(57) == false\n@assert is_multiply_prime(58)\
    \ == false\n@assert is_multiply_prime(59) == false\n@assert is_multiply_prime(60)\
    \ == false\n@assert is_multiply_prime(61) == false\n@assert is_multiply_prime(62)\
    \ == false\n@assert is_multiply_prime(63) == false\n@assert is_multiply_prime(64)\
    \ == false\n@assert is_multiply_prime(65) == false\n@assert is_multiply_prime(66)\
    \ == false\n@assert is_multiply_prime(67) == false\n@assert is_multiply_prime(68)\
    \ == false\n@assert is_multiply_prime(69) == false\n@assert is_multiply_prime(70)\
    \ == false\n@assert is_multiply_prime(71) == ", "    if a < 100\n        true\n\
    \    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing\
    \ that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n\
    \    30 = 2 * 3 * 5\n    \"\"\"", "    \n    if a < 100\n        true\n    else\n\
    \        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert @is_multiply_prime(30)\
    \ == true\n@assert @is_multiply_prime(31) == false\n@assert @is_multiply_prime(100)\
    \ == false\n</cell>\n<code language=julia-1.5>\n\"\"\"Write a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30)\
    \ == True\n    30 = 2 * 3 * 5\n    \"\"\"", "    \n    prime_numbers = prime_numbers(a)\n\
    \    \n    for p in prime_numbers\n        if p*p > a\n            return false\n\
    \        end\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(200)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(300)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(400)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(500)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(600)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(700)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(800)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(900)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1100)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1200)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1300)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1400)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1500)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1600)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1700)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1800)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1900)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(2000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(2100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(2200)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(2300)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(2400)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(2500)\n\
    </cell>\n<code language=julia-1.5>\nis_", "    if a < 100\n        true\n    else\n\
    \        false\n    end\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing\
    \ that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n\
    \    30 = 2 * 3 * 5\n    \"\"\""]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
