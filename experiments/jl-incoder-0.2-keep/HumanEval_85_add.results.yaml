name: HumanEval_85_add
language: julia
results:
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-1)]\n\
    \    odd = lst[2:end]\n    even.+=(odd.*2)\n    return even\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert add([1]) == 1 \n@assert add([4, 2, 6, 7]) == 2\
    \ \n@assert add([4, 2, 6, 7]) == 4 \n@assert add([4, 2, 6, 7]) == 8 \n@assert\
    \ add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 12 \n@assert add([4,\
    \ 2, 6, 7]) == 14 \n@assert add([4, 2, 6, 7]) == 16 \n@assert add([4, 2, 6, 7])\
    \ == 18 \n@assert add([4, 2, 6, 7]) == 20 \n@assert add([4, 2, 6, 7]) == 22 \n\
    @assert add([4, 2, 6, 7]) == 24 \n@assert add([4, 2, 6, 7]) == 26 \n@assert add([4,\
    \ 2, 6, 7]) == 28 \n@assert add([4, 2, 6, 7]) == 30 \n@assert add([4, 2, 6, 7])\
    \ == 32 \n@assert add([4, 2, 6, 7]) == 34 \n@assert add([4, 2, 6, 7]) == 36 \n\
    @assert add([4, 2, 6, 7]) == 38 \n@assert add([4, 2, 6, 7]) == 40 \n@assert add([4,\
    \ 2, 6, 7]) == 42 \n@assert add([4, 2, 6, 7]) == 44 \n@assert add([4, 2, 6, 7])\
    \ == 46 \n@assert add([4, 2, 6, 7]) == 48 \n@assert add([4, 2, 6, 7]) == 50 \n\
    @assert add([4, 2, 6, 7]) == 52 \n@assert add([4, 2, 6, 7]) == 54 \n@assert add([4,\
    \ 2, 6, 7]) == 56 \n@assert add([4, 2, 6, 7]) == 58 \n@assert add([4, 2, 6, 7])\
    \ == 60 \n@assert add([4, 2, 6, 7]) == 62 \n@assert add([4, 2, 6, 7]) == 64 \n\
    @assert add([4, 2, 6, 7]) == 66 \n@assert add([4, 2, 6, 7]) == 68 \n@assert add([4,\
    \ 2, 6, 7]) == 70 \n@assert add([4, 2, 6, 7]) == 72 \n@assert add([4, 2, 6, 7])\
    \ == 74 \n@assert add([4, 2, 6, 7]) == 76 \n@assert add([4, 2, 6, 7]) == 78 \n\
    @assert add([4, 2, 6, 7]) == 80 \n@assert add([4, 2, 6, 7]) == 82 \n@assert add([4,\
    \ \nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88])\
    \ == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3i14zsg7.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3i14zsg7.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1::2]\n\
    \    odd = lst[1::2]\n    even.+=(odd.-even)\n    return even\nend\n</cell>\n\
    <code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 3.2\n\
    Write a function that returns the sum of all the elements of a vector. \nWrite\
    \ a function that returns the product of all elements of a vector. \nWrite a function\
    \ that returns the maximum of a vector. \nWrite a function that returns the minimum\
    \ of a vector. \nWrite a function that returns the absolute value of a vector.\
    \ \nWrite a function that returns the sign of a vector. \nWrite a function that\
    \ returns the absolute value of a vector. \nWrite a function that returns the\
    \ sign of a vector. \nWrite a function that returns the sign of a vector. \nWrite\
    \ a function that returns the sign of a vector. \nWrite a function that returns\
    \ the sign of a vector. \nWrite a function that returns the sign of a vector.\
    \ \nWrite a function that returns the sign of a vector. \nWrite a function that\
    \ returns the sign of a vector. \nWrite a function that returns the sign of a\
    \ vector. \nWrite a function that returns the sign of a vector. \nWrite a function\
    \ that returns the sign of a vector. \nWrite a function that returns the sign\
    \ of a vector. \nWrite a function that returns the sign of a vector. \nWrite a\
    \ function that returns the sign of a vector. \nWrite a function that returns\
    \ the sign of a vector. \nWrite a function that returns the sign of a vector.\
    \ \nWrite a function that returns the sign of a vector. \nWrite a function that\
    \ returns the sign of a vector. \nWrite a function that returns the sign of a\
    \ vector. \nWrite a function that returns the sign of a vector. \nWrite a function\
    \ that returns the sign of a vector. \nWrite a function that returns the sign\
    \ of a vector. \nWrite a function that returns the sign of a vector. \nWrite a\
    \ function that returns the sign of a vector. \nWrite a function that returns\
    \ the sign of a vector. \nWrite a function that returns the sign of a vector.\
    \ \nWrite a function that returns the sign of a vector. \nWrite a function that\
    \ returns the sign of a vector. \nWrite a function that returns the sign of a\
    \ vector. \nWrite a function that returns the sign of a vector. \nWrite a function\
    \ that returns the sign of a vector. \nWrite a function that returns the sign\
    \ of a vector. \nWrite a function that returns the sign of a vector. \nWrite a\
    \ function that returns the sign of a vector. \nWrite a function that returns\
    \ the sign of a vector. \nWrite a function that returns the sign of a vector.\
    \ \nWrite a function that returns the sign of a vector. \nWrite a function that\
    \ returns the sign of a vector. \nWrite a function that returns the sign of a\
    \ vector. \nWrite a function that returns the sign of a vector. \nWrite a function\
    \ that returns the sign of a vector. \nWrite a function that returns the sign\
    \ of a vector. \nWrite a function that returns the sign of a vector. \nWrite a\
    \ function that returns the sign \nusing Test\n\n@testset begin\n\ncandidate =\
    \ add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122])\
    \ == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6,\
    \ 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3z8fn2wh.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3z8fn2wh.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    odd = lst[findall(x -> x % 2 != 0, lst)]\n    sum(even)\
    \ + sum(odd)\nend\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n\
    <text>\nExercise: Write a function that returns the sum of the squares of the\
    \ even numbers in a given list.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\
    \t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) ==\
    \ 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8])\
    \ == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmc2sb10c.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmc2sb10c.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :end]\n\
    \    odd = lst[2 :end]\n    even.+=(odd.*2)\n    return even\nend\n</cell>\n<code\
    \ language=julia-1.5>\nadd(lst)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ called mul that multiplies all the elements in a list. \nGiven a non-empty list\
    \ of integers lst. multiply the even elements that are at odd indices..\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\
    \t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7])\
    \ == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdv3wurw1.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdv3wurw1.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x->x%2==0,\
    \ lst)]\n    evens = evens[2:end]\n    return sum(evens)\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the sum of the even numbers in a list.\n\
    using Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) ==\
    \ 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpayeqmqn1.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpayeqmqn1.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-lst)]\n\
    \    odd = lst[2 : end]\n    even.+=(odd.*2)\n    return even\nend\n</cell>\n\
    <code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nGiven\
    \ a non-empty list of integers lst. add the odd elements that are at even indices..\n\
    using Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) ==\
    \ 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmvmy4241.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmvmy4241.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1::2]\n\
    \    odds = lst[1::2]\n    evens = evens[evens .!= 0]\n    evens = sum(evens)\n\
    \    odds = sum(odds)\n    return evens + odds\nend\n</cell>\n<code language=julia-1.5>\n\
    add([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the product of all the numbers in a given vector. \nFor example, prod([1, 2,\
    \ 3]) should return 6. \nHint: use the reduce function.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpo6wo4crm.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpo6wo4crm.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n    evens = evens[findall(x\
    \ -> x != 0, evens)]\n    evens = sum(evens)\n    return evens\nend\n</cell>\n\
    <code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 3\nGiven\
    \ a non-empty list of integers lst. add the odd elements that are at even indices..\n\
    using Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) ==\
    \ 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxdr9z71y.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxdr9z71y.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x\
    \ -> mod(x,2)==0, lst)]\n    return sum(evens)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert add([1]) == 1 \n@assert add([1,2,3]) == 6 \n@assert add([1,2,3,4,5]) ==\
    \ 10 \n@assert add([1,2,3,4,5,6,7,8,9,10]) == 20 \n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the sum of the numbers in the list lst that are\
    \ divisible by 3.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnqhq9eya.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpnqhq9eya.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :] \n\
    \    odd = lst[2 :] \n    even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+\
    \ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+\
    \ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+\
    \ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+\
    \ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+\
    \ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+\
    \ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+\
    \ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+\
    \ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+\
    \ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+\
    \ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+\
    \ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+\
    \ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+\
    \ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+\
    \ even\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp8bo41dqt.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp8bo41dqt.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp8bo41dqt.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :end]\
    \ \n    odd = lst[2 :end] \n    even.+ odd.+ \nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the sum of the even numbers in a list.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\
    \t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7])\
    \ == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmplxac1tjg.jl:11\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmplxac1tjg.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1::2]\n\
    \    odd = lst[2::2]\n    even.+=(odd.+0)/2\n    return even\nend\n</cell>\n<code\
    \ language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the sum of the even elements of an array. \nWrite a function\
    \ that returns the sum of the odd elements of an array. \nWrite a function that\
    \ returns the sum of the even and odd elements of an array. \nWrite a function\
    \ that returns the sum of the even and odd elements of a vector. \nWrite a function\
    \ that returns the sum of the even and odd elements of a matrix. \nusing Test\n\
    \n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvki_i7y7.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvki_i7y7.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1::2]\n\
    \    odd = lst[1::2]\n    even.+=(odd.+0)/2\n    return even\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 2 \n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the sum of the elements of a\
    \ vector. \nWrite a function that returns the product of the elements of a vector.\
    \ \nWrite a function that returns the maximum of a vector. \nWrite a function\
    \ that returns the minimum of a vector. \nWrite a function that returns the sum\
    \ of the squares of the elements of a vector. \nWrite a function that returns\
    \ the product of the squares of the elements of a vector. \nWrite a function that\
    \ returns the maximum of the squares of the elements of a vector. \nWrite a function\
    \ that returns the minimum of the squares of the elements of a vector. \nWrite\
    \ a function that returns the sum of the cubes of the elements of a vector. \n\
    Write a function that returns the product of the cubes of the elements of a vector.\
    \ \nWrite a function that returns the maximum of the cubes of the elements of\
    \ a vector. \nWrite a function that returns the minimum of the cubes of the elements\
    \ of a vector. \nWrite a function that returns the sum of the exponential of the\
    \ elements of a vector. \nWrite a function that returns the product of the exponential\
    \ of the elements of a vector. \nWrite a function that returns the maximum of\
    \ the exponential of the elements of a vector. \nWrite a function that returns\
    \ the minimum of the exponential of the elements of a vector. \nWrite a function\
    \ that returns the sum of the natural logarithms of the elements of a vector.\
    \ \nWrite a function that returns the product of the natural logarithms of the\
    \ elements of a vector. \nWrite a function that returns the maximum of the natural\
    \ logarithms of the elements of a vector. \nWrite a function that returns the\
    \ minimum of the natural logarithms of the elements of a vector. \nWrite a function\
    \ that returns the sum of the reciprocals of the elements of a vector. \nWrite\
    \ a function that returns the product of the reciprocals of the elements of a\
    \ vector. \nWrite a function that returns the maximum of the reciprocals of the\
    \ elements of a vector. \nWrite a function that returns the minimum of the reciprocals\
    \ of the elements of a vector. \nWrite a function that returns the sum of the\
    \ squares of the elements of a vector. \nWrite a function that returns the product\
    \ of the squares of the elements of a vector. \nWrite a function that returns\
    \ the maximum of the squares of the elements of a vector. \nWrite a function that\
    \ returns the minimum of the squares of the elements of a vector. \nWrite a function\
    \ that returns the sum of the cubes of the elements of a vector. \nWrite a function\
    \ that returns the product of the cubes of the elements of a vector. \nWrite a\
    \ function that returns the maximum of the cubes of the elements of a vector.\
    \ \nWrite a function that returns the minimum of the cubes of the elements of\
    \ a vector. \nWrite a function that returns the sum of the exponential of the\
    \ elements of a vector. \nWrite a function that returns the product of the exponential\
    \ of the elements of a vector\nusing Test\n\n@testset begin\n\ncandidate = add;\n\
    \t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) ==\
    \ 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8])\
    \ == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp04luffjx.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp04luffjx.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1 : (end-1)]\n\
    \    odds = lst[2:end]\n    evens = filter(x -> x % 2 == 0, evens)\n    odds =\
    \ filter(x -> x % 2 != 0, odds)\n    evens = map(x -> x + 2, evens)\n    odds\
    \ = map(x -> x + 1, odds)\n    return sum(evens) + sum(odds)\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time add(lst)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the sum of all the even numbers in a given list. \nWrite a function\
    \ that returns the sum of all the odd numbers in a given list. \nWrite a function\
    \ that returns the product of all the numbers in a given list. \nWrite a function\
    \ that returns the maximum of a given list. \nWrite a function that returns the\
    \ minimum of a given list. \nWrite a function that returns the product of all\
    \ the numbers in a given list that are divisible by 7. \nWrite a function that\
    \ returns the product of all the numbers in a given list that are divisible by\
    \ 3. \nWrite a function that returns the product of all the numbers in a given\
    \ list that are divisible by 5. \nWrite a function that returns the product of\
    \ all the numbers in a given list that are divisible by 2. \nWrite a function\
    \ that returns the product of all the numbers in a given list that are divisible\
    \ by 1. \nWrite a function that returns the product of all the numbers in a given\
    \ list that are divisible by 0. \nWrite a function that returns the product of\
    \ all the numbers in a given list that are divisible by 6. \nWrite a function\
    \ that returns the product of all the numbers in a given list that are divisible\
    \ by 4. \nWrite a function that returns the product of all the numbers in a given\
    \ list that are divisible by 8. \nWrite a function that returns the product of\
    \ all the numbers in a given list that are divisible by 2. \nWrite a function\
    \ that returns the product of all the numbers in a given list that are divisible\
    \ by 6. \nWrite a function that returns the product of all the numbers in a given\
    \ list that are divisible by 8. \nWrite a function that returns the product of\
    \ all the numbers in a given list that are divisible by 4. \nWrite a function\
    \ that returns the product of all the numbers in a given list that are divisible\
    \ by 2. \nWrite a function that returns the product of all the numbers in a given\
    \ list that are divisible by 4. \nWrite a function that returns the product of\
    \ all the numbers in a given list that are divisible by 2. \nWrite a function\
    \ that returns the product of all the numbers in a given list that are divisible\
    \ by 2. \nWrite a function that returns the product of all the numbers in a given\
    \ list that are divisible by 2. \nWrite a function that returns the product of\
    \ all the numbers in a given list that are divisible by 2. \nWrite a function\
    \ that returns the product of all the numbers in a given list that are divisible\
    \ by 2. \nWrite a function that returns the product \nusing Test\n\n@testset begin\n\
    \ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5,\
    \ 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjx9dtv3r.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpjx9dtv3r.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1 : (end-1)]\n\
    \    odds = lst[2:end]\n    evens = filter(x -> x % 2 == 0, evens)\n    odds =\
    \ filter(x -> x % 2 == 1, odds)\n    evens = map(x -> x + 1, evens)\n    odds\
    \ = map(x -> x + 1, odds)\n    return sum(evens) + sum(odds)\nend\n</cell>\n<code\
    \ language=julia-1.0>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nGiven a\
    \ non-empty list of integers lst. add the odd elements that are at even indices..\n\
    using Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) ==\
    \ 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0be76oak.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp0be76oak.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n    evens = sum(evens)\n   \
    \ return evens\nend\n</cell>\n<code language=julia-1.5>\n@assert add([1]) == 1\
    \ \n@assert add([4, 2, 6, 7]) == 2 \n@assert add([4, 2, 6, 7]) == 2 \n@assert\
    \ add([4, 2, 6, 7]) == 2 \n@assert add([4, 2, 6, 7]) == 2 \n@assert add([4, 2,\
    \ 6, 7]) == 2 \n@assert add([4, 2, 6, 7]) == 2 \n@assert add([4, 2, 6, 7]) ==\
    \ 2 \n@assert add([4, 2, 6, 7]) == 2 \n@assert add([4, 2, 6, 7]) == 2 \n@assert\
    \ add([4, 2, 6, 7]) == 2 \n@assert add([4, 2, 6, 7]) == 2 \n@assert add([4, 2,\
    \ 6, 7]) == 2 \n@assert add([4, 2, 6, 7]) == 2 \n@assert add([4, 2, 6, 7]) ==\
    \ 2 \n@assert add([4, 2, 6, 7]) == 2 \n@assert add([4, 2, 6, 7]) == 2 \n@assert\
    \ add([4, 2, 6, 7]) == 2 \n@assert add([4, 2, 6, 7]) == 2 \n@assert add([4, 2,\
    \ 6, 7]) == 2 \n@assert add([4, 2, 6, 7]) == 2 \n@assert add([4, 2, 6, 7]) ==\
    \ 2 \n@assert add([4, 2, 6, 7]) == 2 \n@assert add([4, 2, 6, 7]) == 2 \n@assert\
    \ add([4, 2, 6, 7]) == 2 \n@assert add([4, 2, 6, 7]) == 2 \n@assert add([4, 2,\
    \ 6, 7]) == 2 \n@assert add([4, 2, 6, 7]) == 2 \n@assert add([4, 2, 6, 7]) ==\
    \ 2 \n@assert add([4, 2, 6, 7]) == 2 \n@assert add([4, 2, 6, 7]) == 2 \n@assert\
    \ add([4, 2, 6, 7]) == 2 \n@assert add([4, 2, 6, 7]) == 2 \n@assert add([4, 2,\
    \ 6, 7]) == 2 \n@assert add([4, 2, 6, 7]) == 2 \n@assert add([4, 2, 6, 7]) ==\
    \ 2 \n@assert add([4, 2, 6, 7]) == 2 \n@assert add([4, 2, 6, 7]) == 2 \n@assert\
    \ add([4, 2, 6, 7]) == 2 \n@assert add([4, 2, 6, 7]) == 2 \n@assert add([4, 2,\
    \ 6, 7]) == 2 \n@assert add([4, 2, 6, 7]) == 2 \n@assert add([4, 2, 6, 7]\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\
    \t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7])\
    \ == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5yueu3wd.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5yueu3wd.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1::2]\n\
    \    odd = lst[1::2]\n    even.+=(odd.+0)\n    return even\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 2 \n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the sum of the numbers in a\
    \ given list. \nThe function should work for both vectors and matrices.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\
    \t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7])\
    \ == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbx3u957e.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbx3u957e.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :] \n\
    \    odd = lst[2 :] \n    even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+\
    \ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+\
    \ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+\
    \ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+\
    \ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+\
    \ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+\
    \ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+\
    \ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+\
    \ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+\
    \ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+\
    \ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+\
    \ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+\
    \ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+\
    \ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+\
    \ even\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp1rsuc3ih.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp1rsuc3ih.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp1rsuc3ih.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x->x%2==0,\
    \ lst)]\n    evens = evens[2:end]\n    return sum(evens)\nend\n</cell>\n<code\
    \ language=julia-1.0>\n@assert add([1]) == 1 \n@assert add([1,2,3]) == 6 \n@assert\
    \ add([4,2,6,7]) == 10 \n@assert add([4,2,6,7,8,9,10,11,12,13,14,15]) == 25 \n\
    </cell>\n<text>\nProblem 7\nGiven a non-empty list of integers lst, return a list\
    \ where each element is the sum of the elements at the corresponding index in\
    \ the original list lst.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t\
    @test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\
    \t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxorcwjn1.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxorcwjn1.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1 : (end-lst)]\n\
    \    evens = filter(x -> x % 2 == 0, evens)\n    evens = map(x -> x + 2, evens)\n\
    \    return sum(evens)\nend\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6,\
    \ 7])\n</cell>\n<text>\nExercise 3\nWrite a function that returns the sum of the\
    \ even numbers in a given list of integers. \nGiven a non-empty list of integers\
    \ lst. add the even elements that are at odd indices..\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3gwexaqg.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3gwexaqg.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    return sum(evens)\nend\n</cell>\n<code language=julia-1.5>\n\
    add(lst)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the sum of\
    \ all the numbers in a given list.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2,\
    \ 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4rh761mi.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4rh761mi.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    evens = evens[findall(x -> x % 2 != 0, evens)]\n \
    \   return sum(evens)\nend\n</cell>\n<code language=julia-1.5>\n@assert add([1])\
    \ == 1 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n\
    @assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4,\
    \ 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7])\
    \ == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n\
    @assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4,\
    \ 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7])\
    \ == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n\
    @assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4,\
    \ 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7])\
    \ == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n\
    @assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4,\
    \ 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7])\
    \ == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n\
    @assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4,\
    \ 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7])\
    \ == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n\
    @assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4,\
    \ 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, \nusing\
    \ Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\
    \t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7])\
    \ == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprog3hi9x.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprog3hi9x.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    odd = lst[findall(x -> x % 2 != 0, lst)]\n    even.+=(odd.+=0)\n\
    \    return even\nend\n</cell>\n<code language=julia-1.0>\nadd([4, 2, 6, 7])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a list of integers and\
    \ returns the sum of the even elements and the sum of the odd elements. \nWrite\
    \ a function that takes a list of integers and returns the sum of the even elements\
    \ and the sum of the odd elements. \nWrite a function that takes a list of integers\
    \ and returns the sum of the even elements and the sum of the odd elements. \n\
    Write a function that takes a list of integers and returns the sum of the even\
    \ elements and the sum of the odd elements. \nWrite a function that takes a list\
    \ of integers and returns the sum of the even elements and the sum of the odd\
    \ elements. \nWrite a function that takes a list of integers and returns the sum\
    \ of the even elements and the sum of the odd elements. \nWrite a function that\
    \ takes a list of integers and returns the sum of the even elements and the sum\
    \ of the odd elements. \nWrite a function that takes a list of integers and returns\
    \ the sum of the even elements and the sum of the odd elements. \nWrite a function\
    \ that takes a list of integers and returns the sum of the even elements and the\
    \ sum of the odd elements. \nWrite a function that takes a list of integers and\
    \ returns the sum of the even elements and the sum of the odd elements. \nWrite\
    \ a function that takes a list of integers and returns the sum of the even elements\
    \ and the sum of the odd elements. \nWrite a function that takes a list of integers\
    \ and returns the sum of the even elements and the sum of the odd elements. \n\
    Write a function that takes a list of integers and returns the sum of the even\
    \ elements and the sum of the odd elements. \nWrite a function that takes a list\
    \ of integers and returns the sum of the even elements and the sum of the odd\
    \ elements. \nWrite a function that takes a list of integers and returns the sum\
    \ of the even elements and the sum of the odd elements. \nWrite a function that\
    \ takes a list of integers and returns the sum of the even elements and the sum\
    \ of the odd elements. \nWrite a function that takes a list of integers and returns\
    \ the sum of the even elements and the sum of the odd elements. \nWrite a function\
    \ that takes a list of integers and returns the sum of the even elements and the\
    \ sum of the odd elements. \nWrite a function that takes a list of integers and\
    \ returns the sum of the even elements and the sum of the odd elements. \nWrite\
    \ a function that takes a list of integers and returns the sum of the even elements\
    \ and the sum of the odd elements. \nWrite a function that takes a list of integers\
    \ and returns the sum of the even elements and the sum of the odd elements. \n\
    Write a function that takes a list of integers and returns the sum of the even\
    \ elements and the sum of the odd elements. \nWrite a function that takes a list\
    \ of integers and returns the sum of the even elements and the sum of the odd\
    \ elements. \nWrite a \nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpo_cnbr_o.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpo_cnbr_o.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n    evens = sum(evens)\n   \
    \ return evens\nend\n</cell>\n<code language=julia-1.5>\n@assert add([1]) == 1\
    \ \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert\
    \ add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4,\
    \ 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7])\
    \ == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n\
    @assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4,\
    \ 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7])\
    \ == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n\
    @assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4,\
    \ 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7])\
    \ == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n\
    @assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4,\
    \ 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7])\
    \ == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n\
    @assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4,\
    \ 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7])\
    \ == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n\
    @assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4,\
    \ 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]\n\
    using Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) ==\
    \ 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmvhxvoe2.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmvhxvoe2.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1::2]\n\
    \    odd = lst[1::2]\n    even.+=(odd.+0)/2\n    return even\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 2 \n</cell>\n\
    <text>\nExercise 3\nGiven a non-empty list of integers lst. add the odd elements\
    \ that are at even indices..\nusing Test\n\n@testset begin\n\ncandidate = add;\n\
    \t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) ==\
    \ 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8])\
    \ == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpookizebt.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpookizebt.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1::2]\n\
    \    odd = lst[1::2]\n    even.+=(odd.+=0)\n    return even\nend\n</cell>\n<code\
    \ language=julia-1.0>\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 5\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the sum of the numbers in the\
    \ list lst that have even indices. \nFor example, sum([4, 2, 6, 7]) == 5\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\
    \t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7])\
    \ == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4nb2l7lp.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4nb2l7lp.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    odd = lst[findall(x -> x % 2 != 0, lst)]\n    even.+(odd.-even)\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector and returns\
    \ the sum of the even elements. \nWrite a function that takes a vector and returns\
    \ the sum of the odd elements. \nWrite a function that takes a vector and returns\
    \ the sum of the even and odd elements. \nWrite a function that takes a vector\
    \ and returns the sum of the even and odd elements. \nWrite a function that takes\
    \ a vector and returns the sum of the even and odd elements. \nWrite a function\
    \ that takes a vector and returns the sum of the even and odd elements. \nWrite\
    \ a function that takes a vector and returns the sum of the even and odd elements.\
    \ \nWrite a function that takes a vector and returns the sum of the even and odd\
    \ elements. \nWrite a function that takes a vector and returns the sum of the\
    \ even and odd elements. \nWrite a function that takes a vector and returns the\
    \ sum of the even and odd elements. \nWrite a function that takes a vector and\
    \ returns the sum of the even and odd elements. \nWrite a function that takes\
    \ a vector and returns the sum of the even and odd elements. \nWrite a function\
    \ that takes a vector and returns the sum of the even and odd elements. \nWrite\
    \ a function that takes a vector and returns the sum of the even and odd elements.\
    \ \nWrite a function that takes a vector and returns the sum of the even and odd\
    \ elements. \nWrite a function that takes a vector and returns the sum of the\
    \ even and odd elements. \nWrite a function that takes a vector and returns the\
    \ sum of the even and odd elements. \nWrite a function that takes a vector and\
    \ returns the sum of the even and odd elements. \nWrite a function that takes\
    \ a vector and returns the sum of the even and odd elements. \nWrite a function\
    \ that takes a vector and returns the sum of the even and odd elements. \nWrite\
    \ a function that takes a vector and returns the sum of the even and odd elements.\
    \ \nWrite a function that takes a vector and returns the sum of the even and odd\
    \ elements. \nWrite a function that takes a vector and returns the sum of the\
    \ even and odd elements. \nWrite a function that takes a vector and returns the\
    \ sum of the even and odd elements. \nWrite a function that takes a vector and\
    \ returns the sum of the even and odd elements. \nWrite a function that takes\
    \ a vector and returns the sum of the even and odd elements. \nWrite a function\
    \ that takes a vector and returns the sum of the even and odd elements. \nWrite\
    \ a function that takes a vector and returns the sum of the even and odd elements.\
    \ \nWrite a function that takes a vector and returns the sum of the even and odd\
    \ elements. \nWrite a function that takes a vector and returns the sum of the\
    \ even and odd elements. \nWrite a function that takes a vector and returns the\
    \ sum of the even and odd element\nusing Test\n\n@testset begin\n\ncandidate =\
    \ add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122])\
    \ == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6,\
    \ 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmstapcnz.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmstapcnz.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-1)]\n\
    \    odd = lst[2:end]\n    even.+=(odd.*2)\n    return even\nend\n</cell>\n<code\
    \ language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function called multiply that takes in a list of integers and returns the product\
    \ of the even elements that are at odd indices.\nusing Test\n\n@testset begin\n\
    \ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5,\
    \ 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpt9goo5uf.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpt9goo5uf.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-lst)]\n\
    \    odd = lst[2 : end]\n    even.+=(odd.*2)\n    return even\nend\n</cell>\n\
    <code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nGiven\
    \ a non-empty list of integers lst. add the odd elements that are at even indices..\n\
    using Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) ==\
    \ 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfqqumd4d.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfqqumd4d.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n    return sum(evens)\nend\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(lst)\n</cell>\n<code language=julia-1.5>\n@code_warntype \n\
    using Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) ==\
    \ 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpiea834ok.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpiea834ok.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-1)]\n\
    \    odd = lst[2:end]\n    even.+=(odd.*2)\n    return even\nend\n</cell>\n<code\
    \ language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function called multiply that multiplies each element of a vector by its index.\n\
    using Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) ==\
    \ 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_jtgnziw.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_jtgnziw.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-lst)]\n\
    \    odd = lst[2 : end]\n    even.+=(odd.*2)\n    return even\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpw5n1xu_t.jl:18\n  Test threw exception\n\
    \  Expression: candidate([4, 88]) == 88\n  MethodError: no method matching -(::Int64,\
    \ ::Array{Int64,1})\n  Closest candidates are:\n    -(::Union{Int128, Int16, Int32,\
    \ Int64, Int8, UInt128, UInt16, UInt32, UInt64, UInt8}) at int.jl:51\n    -(::T,\
    \ !Matched::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128, UInt16,\
    \ UInt32, UInt64, UInt8} at int.jl:52\n    -(::Union{Int16, Int32, Int64, Int8},\
    \ !Matched::BigInt) at gmp.jl:530\n    ...\n  Stacktrace:\n   [1] add(::Array{Int64,1})\
    \ at /tmp/tmpw5n1xu_t.jl:8\n   [2] top-level scope at /tmp/tmpw5n1xu_t.jl:18\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpw5n1xu_t.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmpw5n1xu_t.jl:19\n  Test threw exception\n  Expression: candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n  MethodError: no method matching -(::Int64, ::Array{Int64,1})\n\
    \  Closest candidates are:\n    -(::Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8}) at int.jl:51\n    -(::T, !Matched::T) where\
    \ T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128, UInt16, UInt32, UInt64,\
    \ UInt8} at int.jl:52\n    -(::Union{Int16, Int32, Int64, Int8}, !Matched::BigInt)\
    \ at gmp.jl:530\n    ...\n  Stacktrace:\n   [1] add(::Array{Int64,1}) at /tmp/tmpw5n1xu_t.jl:8\n\
    \   [2] top-level scope at /tmp/tmpw5n1xu_t.jl:19\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpw5n1xu_t.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmpw5n1xu_t.jl:20\n  Test threw exception\n  Expression: candidate([4,\
    \ 0, 6, 7]) == 0\n  MethodError: no method matching -(::Int64, ::Array{Int64,1})\n\
    \  Closest candidates are:\n    -(::Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8}) at int.jl:51\n    -(::T, !Matched::T) where\
    \ T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128, UInt16, UInt32, UInt64,\
    \ UInt8} at int.jl:52\n    -(::Union{Int16, Int32, Int64, Int8}, !Matched::BigInt)\
    \ at gmp.jl:530\n    ...\n  Stacktrace:\n   [1] add(::Array{Int64,1}) at /tmp/tmpw5n1xu_t.jl:8\n\
    \   [2] top-level scope at /tmp/tmpw5n1xu_t.jl:20\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpw5n1xu_t.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmpw5n1xu_t.jl:21\n  Test threw exception\n  Expression: candidate([4,\
    \ 4, 6, 8]) == 12\n  MethodError: no method matching -(::Int64, ::Array{Int64,1})\n\
    \  Closest candidates are:\n    -(::Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8}) at int.jl:51\n    -(::T, !Matched::T) where\
    \ T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128, UInt16, UInt32, UInt64,\
    \ UInt8} at int.jl:52\n    -(::Union{Int16, Int32, Int64, Int8}, !Matched::BigInt)\
    \ at gmp.jl:530\n    ...\n  Stacktrace:\n   [1] add(::Array{Int64,1}) at /tmp/tmpw5n1xu_t.jl:8\n\
    \   [2] top-level scope at /tmp/tmpw5n1xu_t.jl:21\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpw5n1xu_t.jl:17\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw5n1xu_t.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x\
    \ -> mod(x,2)==0, lst)]\n    evens = evens[2:end]\n    return sum(evens)\nend\n\
    </cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the sum of the squares of the numbers in the\
    \ given list.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9pvth_q8.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9pvth_q8.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1 : (end-1)]\n\
    \    evens = filter(x -> x % 2 == 0, evens)\n    evens = map(x -> x + 1, evens)\n\
    \    evens = reduce(+, evens)\n    return evens\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert add([1]) == 1 \n@assert add([4, 2, 6, 7]) == 2 \n@assert add([4, 2, 6,\
    \ 7]) == 4 \n@assert add([4, 2, 6, 7]) == 6 \n@assert add([4, 2, 6, 7]) == 8 \n\
    @assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 12 \n@assert add([4,\
    \ 2, 6, 7]) == 14 \n@assert add([4, 2, 6, 7]) == 16 \n@assert add([4, 2, 6, 7])\
    \ == 18 \n@assert add([4, 2, 6, 7]) == 20 \n@assert add([4, 2, 6, 7]) == 22 \n\
    @assert add([4, 2, 6, 7]) == 24 \n@assert add([4, 2, 6, 7]) == 26 \n@assert add([4,\
    \ 2, 6, 7]) == 28 \n@assert add([4, 2, 6, 7]) == 30 \n@assert add([4, 2, 6, 7])\
    \ == 32 \n@assert add([4, 2, 6, 7]) == 34 \n@assert add([4, 2, 6, 7]) == 36 \n\
    @assert add([4, 2, 6, 7]) == 38 \n@assert add([4, 2, 6, 7]) == 40 \n@assert add([4,\
    \ 2, 6, 7]) == 42 \n@assert add([4, 2, 6, 7]) == 44 \n@assert add([4, 2, 6, 7])\
    \ == 46 \n@assert add([4, 2, 6, 7]) == 48 \n@assert add([4, 2, 6, 7]) == 50 \n\
    @assert add([4, 2, 6, 7]) == 52 \n@assert add([4, 2, 6, 7]) == 54 \n@assert add([4,\
    \ 2, 6, 7]) == 56 \n@assert add([4, 2, 6, 7]) == 58 \n@assert add([4, 2, 6, 7])\
    \ == 60 \n@assert add([4, 2, 6, 7]) == 62 \n@assert add([4, 2, 6, 7]) == 64 \n\
    @assert add([4, 2, 6, 7]) == 66 \n@assert add([4, 2, 6, 7]) == 68 \n@assert add([4,\
    \ 2, 6, 7]) == 70 \n@assert add([4, 2, 6, 7]) == 72 \n@assert add([4, 2, 6, 7])\
    \ == 74 \n@assert add([4, 2, 6, 7]) == 76 \n@assert add([4, 2, 6, 7]) == 78 \n\
    \nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88])\
    \ == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_ewpa9c6.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_ewpa9c6.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1 : (end-1)]\n\
    \    odds = lst[2:end]\n    evens = filter(x -> x % 2 == 0, evens)\n    odds =\
    \ filter(x -> x % 2 != 0, odds)\n    evens = map(x -> x + 1, evens)\n    odds\
    \ = map(x -> x + 1, odds)\n    return sum(evens) + sum(odds)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nadd(lst)\n</cell>\n<text>\nExercise 3\nGiven a non-empty\
    \ list of integers lst. add the even elements that are at odd indices..\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\
    \t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7])\
    \ == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvr8cd8ha.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvr8cd8ha.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-lst)]\n\
    \    odd = lst[(end-lst)+1 : (end-lst)]\n    even.+=(odd.*2)\n    return even\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88])\
    \ == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpec9sd_65.jl:18\n  Test threw exception\n\
    \  Expression: candidate([4, 88]) == 88\n  MethodError: no method matching -(::Int64,\
    \ ::Array{Int64,1})\n  Closest candidates are:\n    -(::Union{Int128, Int16, Int32,\
    \ Int64, Int8, UInt128, UInt16, UInt32, UInt64, UInt8}) at int.jl:51\n    -(::T,\
    \ !Matched::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128, UInt16,\
    \ UInt32, UInt64, UInt8} at int.jl:52\n    -(::Union{Int16, Int32, Int64, Int8},\
    \ !Matched::BigInt) at gmp.jl:530\n    ...\n  Stacktrace:\n   [1] add(::Array{Int64,1})\
    \ at /tmp/tmpec9sd_65.jl:8\n   [2] top-level scope at /tmp/tmpec9sd_65.jl:18\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpec9sd_65.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmpec9sd_65.jl:19\n  Test threw exception\n  Expression: candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n  MethodError: no method matching -(::Int64, ::Array{Int64,1})\n\
    \  Closest candidates are:\n    -(::Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8}) at int.jl:51\n    -(::T, !Matched::T) where\
    \ T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128, UInt16, UInt32, UInt64,\
    \ UInt8} at int.jl:52\n    -(::Union{Int16, Int32, Int64, Int8}, !Matched::BigInt)\
    \ at gmp.jl:530\n    ...\n  Stacktrace:\n   [1] add(::Array{Int64,1}) at /tmp/tmpec9sd_65.jl:8\n\
    \   [2] top-level scope at /tmp/tmpec9sd_65.jl:19\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpec9sd_65.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmpec9sd_65.jl:20\n  Test threw exception\n  Expression: candidate([4,\
    \ 0, 6, 7]) == 0\n  MethodError: no method matching -(::Int64, ::Array{Int64,1})\n\
    \  Closest candidates are:\n    -(::Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8}) at int.jl:51\n    -(::T, !Matched::T) where\
    \ T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128, UInt16, UInt32, UInt64,\
    \ UInt8} at int.jl:52\n    -(::Union{Int16, Int32, Int64, Int8}, !Matched::BigInt)\
    \ at gmp.jl:530\n    ...\n  Stacktrace:\n   [1] add(::Array{Int64,1}) at /tmp/tmpec9sd_65.jl:8\n\
    \   [2] top-level scope at /tmp/tmpec9sd_65.jl:20\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpec9sd_65.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmpec9sd_65.jl:21\n  Test threw exception\n  Expression: candidate([4,\
    \ 4, 6, 8]) == 12\n  MethodError: no method matching -(::Int64, ::Array{Int64,1})\n\
    \  Closest candidates are:\n    -(::Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8}) at int.jl:51\n    -(::T, !Matched::T) where\
    \ T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128, UInt16, UInt32, UInt64,\
    \ UInt8} at int.jl:52\n    -(::Union{Int16, Int32, Int64, Int8}, !Matched::BigInt)\
    \ at gmp.jl:530\n    ...\n  Stacktrace:\n   [1] add(::Array{Int64,1}) at /tmp/tmpec9sd_65.jl:8\n\
    \   [2] top-level scope at /tmp/tmpec9sd_65.jl:21\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpec9sd_65.jl:17\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpec9sd_65.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1 : (end-1)]\n\
    \    evens = filter(x -> x % 2 == 0, evens)\n    evens = map(x -> x + 1, evens)\n\
    \    evens = map(x -> x % 2 == 0, evens)\n    evens = filter(x -> x != false,\
    \ evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x % 2 == 0,\
    \ evens)\n    evens = filter(x -> x != false, evens)\n    evens = map(x -> x +\
    \ 1, evens)\n    evens = map(x -> x % 2 == 0, evens)\n    evens = filter(x ->\
    \ x != false, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x ->\
    \ x % 2 == 0, evens)\n    evens = filter(x -> x != false, evens)\n    evens =\
    \ map(x -> x + 1, evens)\n    evens = map(x -> x % 2 == 0, evens)\n    evens =\
    \ filter(x -> x != false, evens)\n    evens = map(x -> x + 1, evens)\n    evens\
    \ = map(x -> x % 2 == 0, evens)\n    evens = filter(x -> x != false, evens)\n\
    \    evens = map(x -> x + 1, evens)\n    evens = map(x -> x % 2 == 0, evens)\n\
    \    evens = filter(x -> x != false, evens)\n    evens = map(x -> x + 1, evens)\n\
    \    evens = map(x -> x % 2 == 0, evens)\n    evens = filter(x -> x != false,\
    \ evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x % 2 == 0,\
    \ evens)\n    evens = filter(x -> x != false, evens)\n    evens = map(x -> x +\
    \ 1, evens)\n    evens = map(x -> x % 2 == 0, evens)\n    evens = filter(x ->\
    \ x != false, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x ->\
    \ x % 2 == 0, evens)\n    evens = filter(x -> x != false, evens)\n    evens =\
    \ map(x -> x + 1, evens)\n    evens = map(x -> x % 2 == 0, evens)\n    evens =\
    \ filter(x -> x != false, evens)\n    evens = map(x -> x + 1, evens)\n    evens\
    \ = map(x -> x % 2 == 0, evens)\n    evens = filter(x -> x != false, evens)\n\
    \    evens = map(x -> x + 1, evens)\n    evens = map(x -> x % 2 == \nusing Test\n\
    \n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpyrzjtjjp.jl:53\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpyrzjtjjp.jl:53\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-1)]\n\
    \    odd = lst[2:end]\n    return sum(even) + sum(odd)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert add([1]) == 1 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6,\
    \ 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10\
    \ \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert\
    \ add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4,\
    \ 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7])\
    \ == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n\
    @assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4,\
    \ 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7])\
    \ == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n\
    @assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4,\
    \ 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7])\
    \ == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n\
    @assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4,\
    \ 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7])\
    \ == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n\
    @assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4,\
    \ 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7])\
    \ == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n\
    @assert add([4, 2, 6, 7]) == 10 \n@assert add([4, \nusing Test\n\n@testset begin\n\
    \ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5,\
    \ 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpu3zadns6.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpu3zadns6.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1::2]\n\
    \    odd = lst[1::2]\n    even.+=(odd.+0)/2\n    return even\nend\n</cell>\n<code\
    \ language=julia-1.5>\nadd(lst)\n</cell>\n<text>\nExercise 2\nGiven a non-empty\
    \ list of integers lst. add the odd elements that are at even indices..\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\
    \t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7])\
    \ == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphq13f7p2.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphq13f7p2.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1::2]\n\
    \    odd = lst[1::2]\n    even.+=(odd.+0)\n    return even\nend\n</cell>\n<code\
    \ language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the sum of the even numbers in a given list.\nusing Test\n\
    \n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzt1lft30.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzt1lft30.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n    return sum(evens)\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert add([1]) == 1 \n@assert add([2, 3])\
    \ == 5 \n@assert add([4, 5, 6]) == 10 \n@assert add([7, 8, 9]) == 17 \n@assert\
    \ add([10, 11, 12, 13, 14]) == 26 \n@assert add([15, 16, 17, 18, 19, 20]) == 42\
    \ \n@assert add([21, 22, 23, 24, 25, 26]) == 63 \n@assert add([27, 28, 29, 30,\
    \ 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,\
    \ 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68,\
    \ 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87,\
    \ 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]) == 101 \n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the sum of the squares of the even numbers\
    \ in a given list.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpra82x6jc.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpra82x6jc.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    evens = evens[findall(x -> x % 2 != 0, evens)]\n \
    \   return sum(evens)\nend\n</cell>\n<code language=julia-1.5>\n@assert add([1])\
    \ == 1 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of elements\
    \ in a list that are less than a given value.\nusing Test\n\n@testset begin\n\n\
    candidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5,\
    \ 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnc2uac9n.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpnc2uac9n.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-1)]\n\
    \    odd = lst[(end-1):end]\n    even.+=(odd.*2)\n    return even\nend\n</cell>\n\
    <code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function called sub that subtracts the even elements that are at odd indices\
    \ from the odd elements that are at even indices.\nusing Test\n\n@testset begin\n\
    \ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5,\
    \ 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppo39xs9a.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppo39xs9a.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1 : (end-1)]\n\
    \    odds = lst[(end-1) : (end)]\n    evens = evens[findall(x -> x % 2 == 0, evens)]\n\
    \    odds = odds[findall(x -> x % 2 == 1, odds)]\n    evens = sum(evens)\n   \
    \ odds = sum(odds)\n    return evens + odds\nend\n</cell>\n<code language=julia-1.5>\n\
    add([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the sum of the even numbers in a given list. \nWrite a function that returns\
    \ the sum of the odd numbers in a given list. \nWrite a function that returns\
    \ the product of the even numbers in a given list. \nWrite a function that returns\
    \ the product of the odd numbers in a given list. \nWrite a function that returns\
    \ the maximum of a given list. \nWrite a function that returns the minimum of\
    \ a given list. \nWrite a function that returns the product of the squares of\
    \ the even numbers in a given list. \nWrite a function that returns the product\
    \ of the squares of the odd numbers in a given list. \nWrite a function that returns\
    \ the sum of the squares of the even numbers in a given list. \nWrite a function\
    \ that returns the sum of the squares of the odd numbers in a given list. \nWrite\
    \ a function that returns the product of the squares of the even numbers in a\
    \ given list. \nWrite a function that returns the product of the squares of the\
    \ odd numbers in a given list. \nWrite a function that returns the sum of the\
    \ cubes of the even numbers in a given list. \nWrite a function that returns the\
    \ sum of the cubes of the odd numbers in a given list. \nWrite a function that\
    \ returns the product of the cubes of the even numbers in a given list. \nWrite\
    \ a function that returns the product of the cubes of the odd numbers in a given\
    \ list. \nWrite a function that returns the sum of the reciprocals of the even\
    \ numbers in a given list. \nWrite a function that returns the sum of the reciprocals\
    \ of the odd numbers in a given list. \nWrite a function that returns the product\
    \ of the reciprocals of the even numbers in a given list. \nWrite a function that\
    \ returns the product of the reciprocals of the odd numbers in a given list. \n\
    Write a function that returns the sum of the reciprocals of the squares of the\
    \ even numbers in a given list. \nWrite a function that returns the sum of the\
    \ reciprocals of the squares of the odd numbers in a given list. \nWrite a function\
    \ that returns the product of the reciprocals of the squares of the even numbers\
    \ in a given list. \nWrite a function that returns the product of the reciprocals\
    \ of the squares of the odd numbers in a given list. \nWrite a function that returns\
    \ the sum of the reciprocals of the cubes of the even numbers in a given list.\
    \ \nWrite a function that returns the sum of the reciprocals of the cubes of the\
    \ odd numbers in a given list. \nWrite a function that returns the product of\
    \ the reci\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjcpcx_c5.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpjcpcx_c5.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1 : (end-lst)]\n\
    \    evens = filter(x -> x % 2 == 0, evens)\n    evens = map(x -> x + 1, evens)\n\
    \    evens = reduce(+, evens)\n    return evens\nend\n</cell>\n<code language=julia-1.5>\n\
    add([4, 2, 6, 7])\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the sum of the even numbers in a given list.\nusing Test\n\n@testset begin\n\
    \ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5,\
    \ 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpw3cb3kib.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpw3cb3kib.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-1)]\n\
    \    odd = lst[2:end]\n    return sum(even) + sum(odd)\nend\n</cell>\n<code language=julia-1.3>\n\
    add(lst)\n</cell>\n<text>\nExercise 2\nWrite a function called evens that takes\
    \ a vector and returns the even indices of the vector.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp86dqzd74.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp86dqzd74.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-1)]\n\
    \    odd = lst[(end-2):end]\n    even.+=(odd.+0)\n    return even\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 2 \n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the sum of the numbers in a\
    \ vector. \nThe function should work for both real and integer vectors.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\
    \t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7])\
    \ == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpux6g3bif.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpux6g3bif.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1::2]\n\
    \    odd = lst[1::2]\n    even.+=(odd.+=0)\n    return even\nend\n</cell>\n<code\
    \ language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function called evensum that takes in a list of integers and returns the sum\
    \ of all the even integers in the list.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2,\
    \ 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpk2x363om.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpk2x363om.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :end]\
    \ \n    odd = lst[2 :end] \n    even.+ odd.+ sum(even)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert add([1]) == 1 \n@assert add([4, 2, 6, 7]) == 7 \n@assert add([4, 2, 6,\
    \ 7]) == 7 \n</cell>\n<text>\nExercise 2\nGiven a non-empty list of integers lst.\
    \ add the odd elements that are at even indices..\nusing Test\n\n@testset begin\n\
    \ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5,\
    \ 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9_nxt0vs.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9_nxt0vs.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-1)]\n\
    \    odd = lst[2 : end]\n    return sum(even) + sum(odd)\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector and returns the sum of the squares\
    \ of the elements of the vector.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122])\
    \ == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6,\
    \ 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjxrjka94.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpjxrjka94.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :end]\
    \ \n    odd = lst[2 :end] \n    return sum(even .+ odd) \nend\n</cell>\n<code\
    \ language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the product of all the numbers in a given list.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\
    \t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7])\
    \ == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2fvu7ca6.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2fvu7ca6.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n    return sum(evens)\nend\n\
    </cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function called sub that subtracts the even elements that are at\
    \ odd indices.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2fpwrlfw.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2fpwrlfw.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-lst)]\n\
    \    odd = lst[(end-lst) : (end-lst+1)]\n    return sum(even) + sum(odd)\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert add([1]) == 1 \n@assert add([4, 2,\
    \ 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) ==\
    \ 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert\
    \ add([4, 2, 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert add([4, 2,\
    \ 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) ==\
    \ 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert\
    \ add([4, 2, 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert add([4, 2,\
    \ 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) ==\
    \ 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert\
    \ add([4, 2, 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert add([4, 2,\
    \ 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) ==\
    \ 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert\
    \ add([4, 2, 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert add([4, 2,\
    \ 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) ==\
    \ 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert\
    \ add([4, 2, 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert add([4, 2,\
    \ 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) ==\
    \ 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert\
    \ add([4, 2, 6, 7]) == 7 \n@assert add([4, 2, \nusing Test\n\n@testset begin\n\
    \ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5,\
    \ 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpciwm0pah.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpciwm0pah.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-1)]\n\
    \    odd = lst[2:end]\n    even.+=(odd.*2)\n    return even\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 2 \n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the sum of the numbers in a\
    \ vector. \nWrite a function that returns the product of the numbers in a vector.\
    \ \nWrite a function that returns the maximum of the numbers in a vector. \nWrite\
    \ a function that returns the minimum of the numbers in a vector. \nWrite a function\
    \ that returns the number of positive numbers in a vector. \nWrite a function\
    \ that returns the number of negative numbers in a vector. \nWrite a function\
    \ that returns the number of zeros in a vector. \nWrite a function that returns\
    \ the number of ones in a vector. \nWrite a function that returns the sum of the\
    \ squares of the numbers in a vector. \nWrite a function that returns the product\
    \ of the squares of the numbers in a vector. \nWrite a function that returns the\
    \ sum of the cubes of the numbers in a vector. \nWrite a function that returns\
    \ the product of the cubes of the numbers in a vector. \nWrite a function that\
    \ returns the sum of the exponential of the numbers in a vector. \nWrite a function\
    \ that returns the product of the exponential of the numbers in a vector. \nWrite\
    \ a function that returns the sum of the logarithms of the numbers in a vector.\
    \ \nWrite a function that returns the product of the logarithms of the numbers\
    \ in a vector. \nWrite a function that returns the sum of the absolute values\
    \ of the numbers in a vector. \nWrite a function that returns the product of the\
    \ absolute values of the numbers in a vector. \nWrite a function that returns\
    \ the sum of the natural logarithms of the numbers in a vector. \nWrite a function\
    \ that returns the product of the natural logarithms of the numbers in a vector.\
    \ \nWrite a function that returns the sum of the reciprocals of the numbers in\
    \ a vector. \nWrite a function that returns the product of the reciprocals of\
    \ the numbers in a vector. \nWrite a function that returns the sum of the natural\
    \ logarithms of the squares of the numbers in a vector. \nWrite a function that\
    \ returns the product of the natural logarithms of the squares of the numbers\
    \ in a vector. \nWrite a function that returns the sum of the reciprocals of the\
    \ squares of the numbers in a vector. \nWrite a function that returns the product\
    \ of the reciprocals of the squares of the numbers in a vector. \nWrite a function\
    \ that returns the sum of the squares of the squares of the numbers in a vector.\
    \ \nWrite a function that returns the product of the squares of the squares of\
    \ the numbers in a vector. \nWrite a function that returns the sum of the cubes\
    \ of the cubes of the numbers in a vector. \nWrite a function that returns the\
    \ product of the cubes of the cubes of the numbers in a vector. \nWrite a function\
    \ that returns the sum of the exponential of the cubes of the numbers in a vector.\
    \ \nWrite a function that returns the product of the exponential of the cubes\
    \ of the numbers in a vector. \nWrite a function that returns the sum of the logarith\n\
    using Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) ==\
    \ 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxdn7xhsv.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxdn7xhsv.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-1)]\n\
    \    odd = lst[2:end]\n    even.+=(odd.*2)\n    return even\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 6\n</cell>\n\
    <text>\nExercise 3.3\nWrite a function called subtract that takes two vectors\
    \ and subtracts one vector from the other. \nWrite a test that passes when the\
    \ subtract function works as expected.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2,\
    \ 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpb56cmbwv.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpb56cmbwv.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1 : (end-1)]\n\
    \    odds = lst[(end-1) : (end)]\n    evens = evens[evens .% 2 == 0]\n    evens\
    \ = evens[evens .!= 0]\n    evens = evens[evens .!= 0]\n    evens = evens[evens\
    \ .!= 0]\n    evens = evens[evens .!= 0]\n    evens = evens[evens .!= 0]\n   \
    \ evens = evens[evens .!= 0]\n    evens = evens[evens .!= 0]\n    evens = evens[evens\
    \ .!= 0]\n    evens = evens[evens .!= 0]\n    evens = evens[evens .!= 0]\n   \
    \ evens = evens[evens .!= 0]\n    evens = evens[evens .!= 0]\n    evens = evens[evens\
    \ .!= 0]\n    evens = evens[evens .!= 0]\n    evens = evens[evens .!= 0]\n   \
    \ evens = evens[evens .!= 0]\n    evens = evens[evens .!= 0]\n    evens = evens[evens\
    \ .!= 0]\n    evens = evens[evens .!= 0]\n    evens = evens[evens .!= 0]\n   \
    \ evens = evens[evens .!= 0]\n    evens = evens[evens .!= 0]\n    evens = evens[evens\
    \ .!= 0]\n    evens = evens[evens .!= 0]\n    evens = evens[evens .!= 0]\n   \
    \ evens = evens[evens .!= 0]\n    evens = evens[evens .!= 0]\n    evens = evens[evens\
    \ .!= 0]\n    evens = evens[evens .!= 0]\n    evens = evens[evens .!= 0]\n   \
    \ evens = evens[evens .!= 0]\n    evens = evens[evens .!= 0]\n    evens = evens[evens\
    \ .!= 0]\n    evens = evens[evens .!= 0]\n    evens = evens[evens .!= 0]\n   \
    \ evens = evens[evens .!= 0]\n    evens = evens[evens .!= 0]\n    evens = evens[evens\
    \ .!= 0]\n    evens = evens[evens .!= 0]\n    evens = evens[evens .!= 0]\n   \
    \ evens = evens[evens .!= 0]\n    evens = evens[evens .!= 0]\n    evens = evens[evens\
    \ .!= 0]\n    evens = evens[evens .!= 0]\n    evens = evens[evens .!= 0]\n   \
    \ evens = evens[evens .!= 0]\n    evens = evens[evens .!= 0]\n    evens = evens[evens\
    \ .!= 0]\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp2m_56waa.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp2m_56waa.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp2m_56waa.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1 : (end-1)]\n\
    \    evens = filter(x -> x % 2 == 0, evens)\n    evens = map(x -> x + 1, evens)\n\
    \    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens\
    \ = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x\
    \ -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x\
    \ + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1,\
    \ evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n\
    \    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens\
    \ = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x\
    \ -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x\
    \ + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1,\
    \ evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n\
    \    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens\
    \ = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x\
    \ -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x\
    \ + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1,\
    \ evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n\
    \    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens\
    \ = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x\
    \ -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x\
    \ + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1,\
    \ evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(\nusing Test\n\n\
    @testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjy_sffce.jl:57\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpjy_sffce.jl:57\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1 : (end-1)]\n\
    \    odds = lst[(end-1) : (end)]\n    return sum(evens) + sum(odds)\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert add([1]) == 1 \n@assert add([4, 2, 6, 7]) ==\
    \ 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert\
    \ add([4, 2, 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert add([4, 2,\
    \ 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) ==\
    \ 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert\
    \ add([4, 2, 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert add([4, 2,\
    \ 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) ==\
    \ 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert\
    \ add([4, 2, 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert add([4, 2,\
    \ 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) ==\
    \ 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert\
    \ add([4, 2, 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert add([4, 2,\
    \ 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) ==\
    \ 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert\
    \ add([4, 2, 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert add([4, 2,\
    \ 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) ==\
    \ 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert\
    \ add([4, 2, 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert add([4, 2,\
    \ 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n@\nusing Test\n\n@testset begin\n\
    \ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5,\
    \ 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpw_p2_0f8.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpw_p2_0f8.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1::2]\n\
    \    odd = lst[1::2]\n    even.+=(odd.-even)\n    return even\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 5\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the sum of the even numbers\
    \ in a given list.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpp06sy4js.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpp06sy4js.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1 : (end-1)]\n\
    \    odds = lst[2 : end]\n    evens = filter(x -> x % 2 == 0, evens)\n    odds\
    \ = filter(x -> x % 2 == 1, odds)\n    evens = map(x -> x + 1, evens)\n    odds\
    \ = map(x -> x + 1, odds)\n    return sum(evens) + sum(odds)\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 5\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the sum of the squares of the\
    \ even numbers in a given list of integers. \nWrite a function that returns the\
    \ sum of the squares of the odd numbers in a given list of integers. \nWrite a\
    \ function that returns the sum of the squares of the numbers in a given list\
    \ of integers. \nWrite a function that returns the sum of the squares of the numbers\
    \ in a given list of integers where the even numbers are at odd indices and the\
    \ odd numbers are at even indices.\nWrite a function that returns the sum of the\
    \ squares of the numbers in a given list of integers where the even numbers are\
    \ at even indices and the odd numbers are at odd indices.\nWrite a function that\
    \ returns the sum of the squares of the numbers in a given list of integers where\
    \ the even numbers are at even indices and the odd numbers are at odd indices.\n\
    Write a function that returns the sum of the squares of the numbers in a given\
    \ list of integers where the even numbers are at odd indices and the odd numbers\
    \ are at even indices.\nWrite a function that returns the sum of the squares of\
    \ the numbers in a given list of integers where the even numbers are at even indices\
    \ and the odd numbers are at odd indices.\nWrite a function that returns the sum\
    \ of the squares of the numbers in a given list of integers where the even numbers\
    \ are at odd indices and the odd numbers are at even indices.\nWrite a function\
    \ that returns the sum of the squares of the numbers in a given list of integers\
    \ where the even numbers are at even indices and the odd numbers are at odd indices.\n\
    Write a function that returns the sum of the squares of the numbers in a given\
    \ list of integers where the even numbers are at odd indices and the odd numbers\
    \ are at even indices.\nWrite a function that returns the sum of the squares of\
    \ the numbers in a given list of integers where the even numbers are at even indices\
    \ and the odd numbers are at odd indices.\nWrite a function that returns the sum\
    \ of the squares of the numbers in a given list of integers where the even numbers\
    \ are at odd indices and the odd numbers are at even indices.\nWrite a function\
    \ that returns the sum of the squares of the numbers in a given list of integers\
    \ where the even numbers are at even indices and the odd numbers are at odd indices.\n\
    Write a function that returns the sum of the squares of the numbers in a given\
    \ list of integers where the even numbers are at odd indices and the odd numbers\
    \ are at even indices.\nWrite a function that returns the \nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppvzcb3u8.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppvzcb3u8.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1 : (end-lst)]\n\
    \    evens = filter(x -> x % 2 == 0, evens)\n    evens = map(x -> x + 1, evens)\n\
    \    evens = map(x -> x + lst[1], evens)\n    return sum(evens)\nend\n</cell>\n\
    <code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a list of integers and returns the sum of the even elements\
    \ in the list. \nWrite a function that takes a list of integers and returns the\
    \ sum of the odd elements in the list. \nWrite a function that takes a list of\
    \ integers and returns the sum of the even and odd elements in the list. \nWrite\
    \ a function that takes a list of integers and returns the sum of the even and\
    \ odd elements in the list using recursion. \nusing Test\n\n@testset begin\n\n\
    candidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5,\
    \ 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7la5xbth.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7la5xbth.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n    return sum(evens)\nend\n\
    </cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the sum of the squares of the even numbers\
    \ in a given list.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7s78aecr.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7s78aecr.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    odd = lst[findall(x -> x % 2 != 0, lst)]\n    even.+\
    \ odd.\nend\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n\
    <text>\nExercise 2\nWrite a function called multiply that multiplies a list of\
    \ integers lst by an integer.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\
    \t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) ==\
    \ 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8])\
    \ == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_t7tq65b.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_t7tq65b.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    odd = lst[findall(x -> x % 2 != 0, lst)]\n    even.+(odd.-even)\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector and returns\
    \ the sum of the squares of the elements in the vector. \nFor example, add([4,\
    \ 2, 6, 7]) == 50.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8715s65d.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8715s65d.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n    evens = sum(evens)\n   \
    \ return evens\nend\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n\
    <text>\nExercise 2\nGiven a non-empty list of integers lst. add the odd elements\
    \ that are at even indices..\nusing Test\n\n@testset begin\n\ncandidate = add;\n\
    \t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) ==\
    \ 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8])\
    \ == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpawfk3t_o.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpawfk3t_o.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-1)]\n\
    \    odd = lst[(end-1) : (end)]\n    even = sum(even)\n    odd = sum(odd)\n  \
    \  return even + odd\nend\n</cell>\n<code language=julia-1.5>\n@assert add([1])\
    \ == 1 \n@assert add([4, 2, 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert\
    \ add([4, 2, 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert add([4, 2,\
    \ 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) ==\
    \ 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert\
    \ add([4, 2, 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert add([4, 2,\
    \ 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) ==\
    \ 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert\
    \ add([4, 2, 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert add([4, 2,\
    \ 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) ==\
    \ 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert\
    \ add([4, 2, 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert add([4, 2,\
    \ 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) ==\
    \ 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert\
    \ add([4, 2, 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert add([4, 2,\
    \ 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) ==\
    \ 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert\
    \ add([4, 2, 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n@assert add([4, 2,\
    \ 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n@\nusing Test\n\n@testset begin\n\
    \ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5,\
    \ 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6vek7w_d.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6vek7w_d.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1 : (end-lst)]\n\
    \    odds = lst[2 : end]\n    evens + sum(odds)\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector and returns the sum of the squares of\
    \ the elements of the vector.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\
    \t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) ==\
    \ 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8])\
    \ == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgnhwg7og.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgnhwg7og.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1::2]\n\
    \    odd = lst[1::2]\n    even.+=(odd.-even)\n    return even\nend\n</cell>\n\
    <code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the sum of the even elements in a list. \nWrite a function\
    \ that returns the sum of the odd elements in a list. \nWrite a function that\
    \ returns the product of the even elements in a list. \nWrite a function that\
    \ returns the product of the odd elements in a list. \nWrite a function that returns\
    \ the maximum of a list. \nWrite a function that returns the minimum of a list.\
    \ \nWrite a function that returns the product of the squares of the even elements\
    \ in a list. \nWrite a function that returns the product of the squares of the\
    \ odd elements in a list. \nWrite a function that returns the sum of the squares\
    \ of the even elements in a list. \nWrite a function that returns the sum of the\
    \ squares of the odd elements in a list. \nWrite a function that returns the product\
    \ of the cubes of the even elements in a list. \nWrite a function that returns\
    \ the product of the cubes of the odd elements in a list. \nWrite a function that\
    \ returns the sum of the cubes of the even elements in a list. \nWrite a function\
    \ that returns the sum of the cubes of the odd elements in a list. \nWrite a function\
    \ that returns the product of the fifth powers of the even elements in a list.\
    \ \nWrite a function that returns the product of the fifth powers of the odd elements\
    \ in a list. \nWrite a function that returns the sum of the fifth powers of the\
    \ even elements in a list. \nWrite a function that returns the sum of the fifth\
    \ powers of the odd elements in a list. \nWrite a function that returns the product\
    \ of the seventh powers of the even elements in a list. \nWrite a function that\
    \ returns the product of the seventh powers of the odd elements in a list. \n\
    Write a function that returns the sum of the seventh powers of the even elements\
    \ in a list. \nWrite a function that returns the sum of the seventh powers of\
    \ the odd elements in a list. \nWrite a function that returns the product of the\
    \ ninth powers of the even elements in a list. \nWrite a function that returns\
    \ the product of the ninth powers of the odd elements in a list. \nWrite a function\
    \ that returns the sum of the ninth powers of the even elements in a list. \n\
    Write a function that returns the sum of the ninth powers of the odd elements\
    \ in a list. \nWrite a function that returns the product of the tenth powers of\
    \ the even elements in a list. \nWrite a function that returns the product of\
    \ the tenth powers of the odd elements in a list. \nWrite a function that returns\
    \ the sum of the tenth powers of the even elements in a list. \nWrite a function\
    \ that returns the sum of the tenth powers of the odd elements in a list. \nWrite\
    \ a function that returns the product of the twentieth power\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6ktsv484.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6ktsv484.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-1)]\n\
    \    odd = lst[2:end]\n    even.+=(odd.*2)\n    return even\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 6\n</cell>\n\
    <text>\nExercise 3\nWrite a function called multiply that takes in a list of integers\
    \ and returns the product of the even elements that are at odd indices.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\
    \t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7])\
    \ == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpiu5kek6i.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpiu5kek6i.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1::2]\n\
    \    odd = lst[1::2]\n    even.+=(odd.-even)\n    return even\nend\n</cell>\n\
    <code language=julia-1.3>\nadd(lst)\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the sum of the numbers in a vector. \nGiven a vector v = [1, 2,\
    \ 3, 4] your function should return 10. \nWrite a function that returns the sum\
    \ of the numbers in a vector. \nGiven a vector v = [1, 2, 3, 4] your function\
    \ should return 10. \nWrite a function that returns the sum of the numbers in\
    \ a vector. \nGiven a vector v = [1, 2, 3, 4] your function should return 10.\
    \ \nWrite a function that returns the sum of the numbers in a vector. \nGiven\
    \ a vector v = [1, 2, 3, 4] your function should return 10. \nWrite a function\
    \ that returns the sum of the numbers in a vector. \nGiven a vector v = [1, 2,\
    \ 3, 4] your function should return 10. \nWrite a function that returns the sum\
    \ of the numbers in a vector. \nGiven a vector v = [1, 2, 3, 4] your function\
    \ should return 10. \nWrite a function that returns the sum of the numbers in\
    \ a vector. \nGiven a vector v = [1, 2, 3, 4] your function should return 10.\
    \ \nWrite a function that returns the sum of the numbers in a vector. \nGiven\
    \ a vector v = [1, 2, 3, 4] your function should return 10. \nWrite a function\
    \ that returns the sum of the numbers in a vector. \nGiven a vector v = [1, 2,\
    \ 3, 4] your function should return 10. \nWrite a function that returns the sum\
    \ of the numbers in a vector. \nGiven a vector v = [1, 2, 3, 4] your function\
    \ should return 10. \nWrite a function that returns the sum of the numbers in\
    \ a vector. \nGiven a vector v = [1, 2, 3, 4] your function should return 10.\
    \ \nWrite a function that returns the sum of the numbers in a vector. \nGiven\
    \ a vector v = [1, 2, 3, 4] your function should return 10. \nWrite a function\
    \ that returns the sum of the numbers in a vector. \nGiven a vector v = [1, 2,\
    \ 3, 4] your function should return 10. \nWrite a function that returns the sum\
    \ of the numbers in a vector. \nGiven a vector v = [1, 2, 3, 4] your function\
    \ should return 10. \nWrite a function that returns the sum of the numbers in\
    \ a vector. \nGiven a vector v = [1, 2, 3, 4] your function should return 10.\
    \ \nWrite a function that returns the sum of the numbers in a vector. \nGiven\
    \ a vector v = [1, 2, 3, 4] your function should return 10. \nWrite a function\
    \ that returns the sum of the numbers in a vector. \nGiven a vector v = [1, 2,\
    \ 3, 4] your function should return 10. \nWrite a function that returns the sum\
    \ of the numbers in a vector. \nGiven a vector \nusing Test\n\n@testset begin\n\
    \ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5,\
    \ 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnkmpbgdl.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpnkmpbgdl.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-1)]\n\
    \    odd = lst[(end-2):end]\n    even.+=(odd.*2)\n    return even\nend\n</cell>\n\
    <code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the sum of the numbers in a vector. \nWrite a function\
    \ that returns the sum of the numbers in a vector. \nWrite a function that returns\
    \ the sum of the numbers in a vector. \nWrite a function that returns the sum\
    \ of the numbers in a vector. \nWrite a function that returns the sum of the numbers\
    \ in a vector. \nWrite a function that returns the sum of the numbers in a vector.\
    \ \nWrite a function that returns the sum of the numbers in a vector. \nWrite\
    \ a function that returns the sum of the numbers in a vector. \nWrite a function\
    \ that returns the sum of the numbers in a vector. \nWrite a function that returns\
    \ the sum of the numbers in a vector. \nWrite a function that returns the sum\
    \ of the numbers in a vector. \nWrite a function that returns the sum of the numbers\
    \ in a vector. \nWrite a function that returns the sum of the numbers in a vector.\
    \ \nWrite a function that returns the sum of the numbers in a vector. \nWrite\
    \ a function that returns the sum of the numbers in a vector. \nWrite a function\
    \ that returns the sum of the numbers in a vector. \nWrite a function that returns\
    \ the sum of the numbers in a vector. \nWrite a function that returns the sum\
    \ of the numbers in a vector. \nWrite a function that returns the sum of the numbers\
    \ in a vector. \nWrite a function that returns the sum of the numbers in a vector.\
    \ \nWrite a function that returns the sum of the numbers in a vector. \nWrite\
    \ a function that returns the sum of the numbers in a vector. \nWrite a function\
    \ that returns the sum of the numbers in a vector. \nWrite a function that returns\
    \ the sum of the numbers in a vector. \nWrite a function that returns the sum\
    \ of the numbers in a vector. \nWrite a function that returns the sum of the numbers\
    \ in a vector. \nWrite a function that returns the sum of the numbers in a vector.\
    \ \nWrite a function that returns the sum of the numbers in a vector. \nWrite\
    \ a function that returns the sum of the numbers in a vector. \nWrite a function\
    \ that returns the sum of the numbers in a vector. \nWrite a function that returns\
    \ the sum of the numbers in a vector. \nWrite a function that returns the sum\
    \ of the numbers in a vector. \nWrite a function that returns the sum of the numbers\
    \ in a vector. \nWrite a function that returns the sum of the numbers in a vector.\
    \ \nWrite a function that returns the sum of the numbers in a vector. \nWrite\
    \ a function that returns the sum of the numbers in a vector. \nWrite a function\
    \ that returns the sum of the numbers in a vector. \nWrite a function that returns\
    \ the sum of the numbers in a vector. \nWrite a function that returns the sum\
    \ of the numbers in a vector. \nWrite a function that returns the sum of the numbers\
    \ in a vector. \nWrite a function that returns the sum of the numbers in a vector\n\
    using Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) ==\
    \ 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppx0biyrt.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppx0biyrt.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    odd = lst[findall(x -> x % 2 != 0, lst)]\n    even.+=(odd.-even)\n\
    \    return even\nend\n</cell>\n<code language=julia-1.5>\nadd(lst)\n</cell>\n\
    <text>\nExercise 2\nGiven a non-empty list of integers lst. add the odd elements\
    \ that are at even indices..\nusing Test\n\n@testset begin\n\ncandidate = add;\n\
    \t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) ==\
    \ 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8])\
    \ == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1r_ej2og.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1r_ej2og.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-1)]\n\
    \    odd = lst[2:end]\n    even.+=(odd.*2)\n    return even\nend\n</cell>\n<code\
    \ language=julia-1.0>\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 4\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the sum of the numbers in the\
    \ list lst that are divisible by 3.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2,\
    \ 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1c96_337.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1c96_337.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n    evens = collect(evens)\n\
    \    evens = collect(evens)\n    return sum(evens)\nend\n</cell>\n<code language=julia-1.0>\n\
    @assert add([1]) == 1 \n@assert add([3]) == 3 \n@assert add([4, 2, 6, 7]) == 10\
    \ \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert\
    \ add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4,\
    \ 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7])\
    \ == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n\
    @assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4,\
    \ 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7])\
    \ == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n\
    @assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4,\
    \ 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7])\
    \ == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n\
    @assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4,\
    \ 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7])\
    \ == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n\
    @assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4,\
    \ 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7])\
    \ == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n\
    @assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@\nusing Test\n\
    \n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpf8w_pgl8.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpf8w_pgl8.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1 : (end-1)]\n\
    \    odds = lst[(end-1) : end]\n    evens = filter(x -> x % 2 == 0, evens)\n \
    \   odds = filter(x -> x % 2 == 1, odds)\n    evens = map(x -> x + 2, evens)\n\
    \    odds = map(x -> x - 2, odds)\n    evens = reduce(+, evens)\n    odds = reduce(+,\
    \ odds)\n    return evens + odds\nend\n</cell>\n<code language=julia-1.5>\nadd([4,\
    \ 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ v and returns a vector of the same size with only the even elements of the original\
    \ vector. For example, v = [1, 2, 3, 4] should return [2, 4].\nusing Test\n\n\
    @testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0n0ef4pu.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp0n0ef4pu.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-1)]\n\
    \    odd = lst[2:end]\n    even.+=(odd.+0)\n    return even\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpov90hwt8.jl:18\n  Test threw exception\n\
    \  Expression: candidate([4, 88]) == 88\n  MethodError: Cannot `convert` an object\
    \ of type Array{Int64,1} to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T},\
    \ !Matched::Number) where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr)\
    \ where T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] add(::Array{Int64,1})\
    \ at /tmp/tmpov90hwt8.jl:11\n   [2] top-level scope at /tmp/tmpov90hwt8.jl:18\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpov90hwt8.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmpov90hwt8.jl:19\n  Test threw exception\n  Expression: candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n  MethodError: Cannot `convert` an object of type\
    \ Array{Int64,1} to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] add(::Array{Int64,1})\
    \ at /tmp/tmpov90hwt8.jl:11\n   [2] top-level scope at /tmp/tmpov90hwt8.jl:19\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpov90hwt8.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmpov90hwt8.jl:20\n  Test threw exception\n  Expression: candidate([4,\
    \ 0, 6, 7]) == 0\n  MethodError: Cannot `convert` an object of type Array{Int64,1}\
    \ to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] add(::Array{Int64,1})\
    \ at /tmp/tmpov90hwt8.jl:11\n   [2] top-level scope at /tmp/tmpov90hwt8.jl:20\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpov90hwt8.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmpov90hwt8.jl:21\n  Test threw exception\n  Expression: candidate([4,\
    \ 4, 6, 8]) == 12\n  MethodError: Cannot `convert` an object of type Array{Int64,1}\
    \ to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] add(::Array{Int64,1})\
    \ at /tmp/tmpov90hwt8.jl:11\n   [2] top-level scope at /tmp/tmpov90hwt8.jl:21\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpov90hwt8.jl:17\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpov90hwt8.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :end]\
    \ \n    odd = lst[2 :end] \n    even.+ odd.+ \nend\n</cell>\n<text>\nExercise\
    \ 7\nWrite a function that returns the sum of the even elements of a list of integers\
    \ lst. \nGiven a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp8zrjmpyq.jl:11\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmp8zrjmpyq.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1::2]\n\
    \    odd = lst[1::2]\n    even.+=(odd.+=0)\n    return even\nend\n</cell>\n<code\
    \ language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nGiven a\
    \ non-empty list of integers lst. add the odd elements that are at even indices..\n\
    using Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) ==\
    \ 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdykolguf.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdykolguf.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x->x%2==0,\
    \ lst)]\n    return sum(evens)\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ add([1]) == 1 \n@assert add([1,2,3]) == 6 \n@assert add([1,2,3,4,5]) == 10 \n\
    @assert add([1,2,3,4,5,6,7,8,9,10]) == 15 \n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the sum of the squares of the numbers in a given list.\n\
    using Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) ==\
    \ 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_w00hdjv.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_w00hdjv.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    evens = evens[findall(x -> x % 2 != 0, evens)]\n \
    \   evens = evens[2:end]\n    return sum(evens)\nend\n</cell>\n<code language=julia-1.5>\n\
    add([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the sum of all odd numbers in a given list\nusing Test\n\n@testset begin\n\n\
    candidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5,\
    \ 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjxxpyyds.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpjxxpyyds.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-1)]\n\
    \    odd = lst[2 : end]\n    even.+=(odd.*2)\n    return even\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp_ys14rws.jl:18\n  Test threw exception\n\
    \  Expression: candidate([4, 88]) == 88\n  MethodError: Cannot `convert` an object\
    \ of type Array{Int64,1} to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T},\
    \ !Matched::Number) where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr)\
    \ where T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] add(::Array{Int64,1})\
    \ at /tmp/tmp_ys14rws.jl:11\n   [2] top-level scope at /tmp/tmp_ys14rws.jl:18\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp_ys14rws.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmp_ys14rws.jl:19\n  Test threw exception\n  Expression: candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n  MethodError: Cannot `convert` an object of type\
    \ Array{Int64,1} to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] add(::Array{Int64,1})\
    \ at /tmp/tmp_ys14rws.jl:11\n   [2] top-level scope at /tmp/tmp_ys14rws.jl:19\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp_ys14rws.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmp_ys14rws.jl:20\n  Test threw exception\n  Expression: candidate([4,\
    \ 0, 6, 7]) == 0\n  MethodError: Cannot `convert` an object of type Array{Int64,1}\
    \ to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] add(::Array{Int64,1})\
    \ at /tmp/tmp_ys14rws.jl:11\n   [2] top-level scope at /tmp/tmp_ys14rws.jl:20\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp_ys14rws.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmp_ys14rws.jl:21\n  Test threw exception\n  Expression: candidate([4,\
    \ 4, 6, 8]) == 12\n  MethodError: Cannot `convert` an object of type Array{Int64,1}\
    \ to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] add(::Array{Int64,1})\
    \ at /tmp/tmp_ys14rws.jl:11\n   [2] top-level scope at /tmp/tmp_ys14rws.jl:21\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp_ys14rws.jl:17\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_ys14rws.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n    return sum(evens)\nend\n\
    </cell>\n<code language=julia-1.5>\nadd(lst)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the sum of the even numbers in a given list.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\
    \t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7])\
    \ == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp02_3acfv.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp02_3acfv.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1 : (end-1)]\n\
    \    evens = filter(x -> x % 2 == 0, evens)\n    evens = map(x -> x + 1, evens)\n\
    \    evens = reduce(+, evens)\n    return evens\nend\n</cell>\n<code language=julia-1.5>\n\
    add(lst)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector and\
    \ returns the sum of the squares of the elements of the vector.\nusing Test\n\n\
    @testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp55zykvb6.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp55zykvb6.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-1)]\n\
    \    odd = lst[2:end]\n    even.+=(odd.*2)\n    return even\nend\n</cell>\n<code\
    \ language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that returns the sum of the numbers in a given list. \nThe function\
    \ should work for any type of list. \nThe function should work for empty lists\
    \ as well. \nThe function should work for lists of any length. \nThe function\
    \ should work for lists of any type of elements. \nThe function should work for\
    \ lists of any type of elements. \nThe function should work for lists of any type\
    \ of elements. \nThe function should work for lists of any type of elements. \n\
    The function should work for lists of any type of elements. \nThe function should\
    \ work for lists of any type of elements. \nThe function should work for lists\
    \ of any type of elements. \nThe function should work for lists of any type of\
    \ elements. \nThe function should work for lists of any type of elements. \nThe\
    \ function should work for lists of any type of elements. \nThe function should\
    \ work for lists of any type of elements. \nThe function should work for lists\
    \ of any type of elements. \nThe function should work for lists of any type of\
    \ elements. \nThe function should work for lists of any type of elements. \nThe\
    \ function should work for lists of any type of elements. \nThe function should\
    \ work for lists of any type of elements. \nThe function should work for lists\
    \ of any type of elements. \nThe function should work for lists of any type of\
    \ elements. \nThe function should work for lists of any type of elements. \nThe\
    \ function should work for lists of any type of elements. \nThe function should\
    \ work for lists of any type of elements. \nThe function should work for lists\
    \ of any type of elements. \nThe function should work for lists of any type of\
    \ elements. \nThe function should work for lists of any type of elements. \nThe\
    \ function should work for lists of any type of elements. \nThe function should\
    \ work for lists of any type of elements. \nThe function should work for lists\
    \ of any type of elements. \nThe function should work for lists of any type of\
    \ elements. \nThe function should work for lists of any type of elements. \nThe\
    \ function should work for lists of any type of elements. \nThe function should\
    \ work for lists of any type of elements. \nThe function should work for lists\
    \ of any type of elements. \nThe function should work for lists of any type of\
    \ elements. \nThe function should work for lists of any type of elements. \nThe\
    \ function should work for lists of any type of elements. \nThe function should\
    \ work for lists of any type of elements. \nThe function should work for lists\
    \ of any type of elements. \nThe function should work for lists of any type of\
    \ elements. \nThe function should work for lists of any type of elements. \nThe\
    \ function should work for lists of any type of elements. \nThe function should\
    \ work for lists of any type of elements. \nThe function \nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsbrk1cu0.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpsbrk1cu0.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    return sum(evens)\nend\n</cell>\n<code language=julia-1.5>\n\
    add([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nGiven a non-empty list of integers\
    \ lst. add the odd elements that are at even indices..\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4g052k7w.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4g052k7w.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    odd = lst[findall(x -> x % 2 != 0, lst)]\n    even.+=(odd.+0)\n\
    \    return even\nend\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n\
    </cell>\n<text>\nExercise 3\nGiven a non-empty list of integers lst, return the\
    \ sum of the factorials of the integers in lst. Factorial of x is defined as x!.\n\
    using Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) ==\
    \ 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwt71fiti.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpwt71fiti.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-1)]\n\
    \    odd = lst[2 : end]\n    even.+=(odd.*2)\n    return even\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp4fkldzv2.jl:18\n  Test threw exception\n\
    \  Expression: candidate([4, 88]) == 88\n  MethodError: Cannot `convert` an object\
    \ of type Array{Int64,1} to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T},\
    \ !Matched::Number) where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr)\
    \ where T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] add(::Array{Int64,1})\
    \ at /tmp/tmp4fkldzv2.jl:11\n   [2] top-level scope at /tmp/tmp4fkldzv2.jl:18\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp4fkldzv2.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmp4fkldzv2.jl:19\n  Test threw exception\n  Expression: candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n  MethodError: Cannot `convert` an object of type\
    \ Array{Int64,1} to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] add(::Array{Int64,1})\
    \ at /tmp/tmp4fkldzv2.jl:11\n   [2] top-level scope at /tmp/tmp4fkldzv2.jl:19\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp4fkldzv2.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmp4fkldzv2.jl:20\n  Test threw exception\n  Expression: candidate([4,\
    \ 0, 6, 7]) == 0\n  MethodError: Cannot `convert` an object of type Array{Int64,1}\
    \ to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] add(::Array{Int64,1})\
    \ at /tmp/tmp4fkldzv2.jl:11\n   [2] top-level scope at /tmp/tmp4fkldzv2.jl:20\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp4fkldzv2.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmp4fkldzv2.jl:21\n  Test threw exception\n  Expression: candidate([4,\
    \ 4, 6, 8]) == 12\n  MethodError: Cannot `convert` an object of type Array{Int64,1}\
    \ to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] add(::Array{Int64,1})\
    \ at /tmp/tmp4fkldzv2.jl:11\n   [2] top-level scope at /tmp/tmp4fkldzv2.jl:21\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp4fkldzv2.jl:17\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4fkldzv2.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1 : (end-1)]\n\
    \    odds = lst[(end-1) : end]\n    evens = filter(x -> x % 2 == 0, evens)\n \
    \   odds = filter(x -> x % 2 == 1, odds)\n    return sum(evens) + sum(odds)\n\
    end\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the product of the even numbers in a\
    \ given list.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5v1l8283.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5v1l8283.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1::2]\n\
    \    odd = lst[1::2]\n    even.+=(odd.+0)\n    return even\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 2 \n</cell>\n\
    <text>\nExercise 3.2\nWrite a function called multiply that takes in a list of\
    \ integers and returns the product of the even elements that are at odd indices.\n\
    using Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) ==\
    \ 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppqylk4m_.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppqylk4m_.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1 : (end-1)]\n\
    \    odds = lst[2:end]\n    evens + sum(odds)\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector v and returns the sum of the squares\
    \ of the elements in the vector. \nWrite a function that takes a vector v and\
    \ returns the sum of the squares of the elements in the vector. \nWrite a function\
    \ that takes a vector v and returns the sum of the squares of the elements in\
    \ the vector. \nWrite a function that takes a vector v and returns the sum of\
    \ the squares of the elements in the vector. \nWrite a function that takes a vector\
    \ v and returns the sum of the squares of the elements in the vector. \nWrite\
    \ a function that takes a vector v and returns the sum of the squares of the elements\
    \ in the vector. \nWrite a function that takes a vector v and returns the sum\
    \ of the squares of the elements in the vector. \nWrite a function that takes\
    \ a vector v and returns the sum of the squares of the elements in the vector.\
    \ \nWrite a function that takes a vector v and returns the sum of the squares\
    \ of the elements in the vector. \nWrite a function that takes a vector v and\
    \ returns the sum of the squares of the elements in the vector. \nWrite a function\
    \ that takes a vector v and returns the sum of the squares of the elements in\
    \ the vector. \nWrite a function that takes a vector v and returns the sum of\
    \ the squares of the elements in the vector. \nWrite a function that takes a vector\
    \ v and returns the sum of the squares of the elements in the vector. \nWrite\
    \ a function that takes a vector v and returns the sum of the squares of the elements\
    \ in the vector. \nWrite a function that takes a vector v and returns the sum\
    \ of the squares of the elements in the vector. \nWrite a function that takes\
    \ a vector v and returns the sum of the squares of the elements in the vector.\
    \ \nWrite a function that takes a vector v and returns the sum of the squares\
    \ of the elements in the vector. \nWrite a function that takes a vector v and\
    \ returns the sum of the squares of the elements in the vector. \nWrite a function\
    \ that takes a vector v and returns the sum of the squares of the elements in\
    \ the vector. \nWrite a function that takes a vector v and returns the sum of\
    \ the squares of the elements in the vector. \nWrite a function that takes a vector\
    \ v and returns the sum of the squares of the elements in the vector. \nWrite\
    \ a function that takes a vector v and returns the sum of the squares of the elements\
    \ in the vector. \nWrite a function that takes a vector v and returns the sum\
    \ of the squares of the elements in the vector. \nWrite a function that takes\
    \ a vector v and returns the sum of the squares of the elements in the vector.\
    \ \nWrite a function that takes a vector v and returns the sum of the squares\
    \ of the elements in the vector. \nWrite a function that takes a vector v and\
    \ returns the sum of the squares of the elements in the vector. \nWrite a function\
    \ that takes a vector v and returns the sum of the squares of the elements in\
    \ the vector. \nWrite a function that takes a vector v and returns the sum of\
    \ the squares of the elements in the vector. \nusing Test\n\n@testset begin\n\n\
    candidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5,\
    \ 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzw85lvyg.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzw85lvyg.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1 : (end-lst)]\n\
    \    evens = filter(x -> x % 2 == 0, evens)\n    return sum(evens)\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the sum of the even numbers\
    \ in a given list.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpl5wm6lrh.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpl5wm6lrh.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x->x%2==0,\
    \ lst)]\n    evens = evens[2:end]\n    return sum(evens)\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert add([1]) == 1 \n@assert add([4, 2, 6, 7]) == 5\
    \ \n@assert add([4, 2, 6, 7]) == 5 \n</cell>\n<text>\nExercise 3\nWrite a function\
    \ called sub that takes two vectors v1 and v2 as arguments and returns the vector\
    \ that is the difference between v1 and v2.\nusing Test\n\n@testset begin\n\n\
    candidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5,\
    \ 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmph2dd2pd0.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmph2dd2pd0.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x->x%2==0,\
    \ lst)]\n    evens = evens[2:end]\n    evens = sum(evens)\n    return evens\n\
    end\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the sum of the even numbers in a given\
    \ list of integers. \nGiven a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\nusing Test\n\n@testset begin\n\ncandidate = add;\n\
    \t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) ==\
    \ 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8])\
    \ == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_6htoh3u.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_6htoh3u.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n    return sum(evens)\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert add([1]) == 1 \n@assert add([4, 2,\
    \ 6, 7]) == 7 \n@assert add([4, 2, 6, 7]) == 7 \n</cell>\n<text>\nExercise 2\n\
    Write a function called sub that returns the difference between the sum of all\
    \ even integers in lst and the sum of all odd integers in lst. \nWrite a test\
    \ that passes if sub([4, 2, 6, 7]) == -3 \nWrite a test that passes if sub([4,\
    \ 2, 6, 7]) == -3 \nWrite a test that passes if sub([4, 2, 6, 7]) == -3 \nWrite\
    \ a test that passes if sub([4, 2, 6, 7]) == -3 \nWrite a test that passes if\
    \ sub([4, 2, 6, 7]) == -3 \nWrite a test that passes if sub([4, 2, 6, 7]) == -3\
    \ \nWrite a test that passes if sub([4, 2, 6, 7]) == -3 \nWrite a test that passes\
    \ if sub([4, 2, 6, 7]) == -3 \nWrite a test that passes if sub([4, 2, 6, 7]) ==\
    \ -3 \nWrite a test that passes if sub([4, 2, 6, 7]) == -3 \nWrite a test that\
    \ passes if sub([4, 2, 6, 7]) == -3 \nWrite a test that passes if sub([4, 2, 6,\
    \ 7]) == -3 \nWrite a test that passes if sub([4, 2, 6, 7]) == -3 \nWrite a test\
    \ that passes if sub([4, 2, 6, 7]) == -3 \nWrite a test that passes if sub([4,\
    \ 2, 6, 7]) == -3 \nWrite a test that passes if sub([4, 2, 6, 7]) == -3 \nWrite\
    \ a test that passes if sub([4, 2, 6, 7]) == -3 \nWrite a test that passes if\
    \ sub([4, 2, 6, 7]) == -3 \nWrite a test that passes if sub([4, 2, 6, 7]) == -3\
    \ \nWrite a test that passes if sub([4, 2, 6, 7]) == -3 \nWrite a test that passes\
    \ if sub([4, 2, 6, 7]) == -3 \nWrite a test that passes if sub([4, 2, 6, 7]) ==\
    \ -3 \nWrite a test that passes if sub([4, 2, 6, 7]) == -3 \nWrite a test that\
    \ passes if sub([4, 2, 6, 7]) == -3 \nWrite a test that passes if sub([4, 2, 6,\
    \ 7]) == -3 \nWrite a test that passes if sub([4, \nusing Test\n\n@testset begin\n\
    \ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5,\
    \ 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpeas1j7ft.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpeas1j7ft.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :end]\n\
    \    odd = lst[2 :end]\n    even.+=(odd.*2)\n    return even\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 6\n</cell>\n\
    <text>\nExercise 3\nWrite a function called multiply that takes in a list of integers\
    \ lst. and returns the product of the even elements that are at odd indices.\n\
    using Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) ==\
    \ 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp96u91k7r.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp96u91k7r.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1 : (end-1)]\n\
    \    evens = filter(x -> x % 2 == 0, evens)\n    evens = map(x -> x + 1, evens)\n\
    \    evens = reduce(+, evens)\n    return evens\nend\n</cell>\n<code language=julia-1.5>\n\
    add([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nGiven a non-empty list of integers\
    \ lst. add the odd elements that are at even indices..\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpyim3lg1t.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpyim3lg1t.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    odd = lst[findall(x -> x % 2 != 0, lst)]\n    return\
    \ sum(even + odd)\nend\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the squares\
    \ of the numbers in a given list.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122])\
    \ == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6,\
    \ 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpouti_5ay.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpouti_5ay.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1 : (end-lst)]\n\
    \    odds = lst[(end-lst):end]\n    evens = filter(x -> x % 2 == 0, evens)\n \
    \   odds = filter(x -> x % 2 == 1, odds)\n    evens = map(x -> x + 1, evens)\n\
    \    odds = map(x -> x + 1, odds)\n    evens = reduce(add, evens)\n    odds =\
    \ reduce(add, odds)\n    return evens + odds\nend\n</cell>\n<code language=julia-1.5>\n\
    add(lst)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector of\
    \ integers and returns the sum of the even elements and the sum of the odd elements.\
    \ \nFor example, add([4, 2, 6, 7]) == (2, 3)\nusing Test\n\n@testset begin\n\n\
    candidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5,\
    \ 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkv6al14p.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpkv6al14p.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n    evens = map(add, evens)\n\
    \    return sum(evens)\nend\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6,\
    \ 7])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector and returns\
    \ the sum of the even elements in the vector.\nusing Test\n\n@testset begin\n\n\
    candidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5,\
    \ 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmph9ed_q_x.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmph9ed_q_x.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1 : (end-1)]\n\
    \    evens = filter(x -> x % 2 == 0, evens)\n    evens = map(x -> x + 1, evens)\n\
    \    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens\
    \ = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x\
    \ -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x\
    \ + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1,\
    \ evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n\
    \    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens\
    \ = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x\
    \ -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x\
    \ + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1,\
    \ evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n\
    \    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens\
    \ = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x\
    \ -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x\
    \ + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1,\
    \ evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n\
    \    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens\
    \ = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x\
    \ -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x\
    \ + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1,\
    \ evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(\nusing Test\n\n\
    @testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmptulkofo7.jl:57\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmptulkofo7.jl:57\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1 : (end-lst)]\n\
    \    evens = filter(x -> x % 2 == 0, evens)\n    return sum(evens)\nend\n</cell>\n\
    <code language=julia-1.3>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 3\nGiven\
    \ a non-empty list of integers lst. add the odd elements that are at even indices..\n\
    using Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) ==\
    \ 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpu95jrdd8.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpu95jrdd8.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-1)]\n\
    \    odd = lst[2:end]\n    even.+=(odd.*2)\n    return even\nend\n</cell>\n<code\
    \ language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function called subtract that takes two vectors of integers and returns the\
    \ difference of the two vectors.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122])\
    \ == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6,\
    \ 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4g26qb3q.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4g26qb3q.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-1)]\n\
    \    odd = lst[2 : end]\n    even.+=(odd.+=0)\n    return even\nend\n</cell>\n\
    <code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function called multiply that takes in a list of integers and returns the\
    \ product of all the numbers in the list. \nWrite a test that passes when the\
    \ function returns 24 and fails otherwise.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2,\
    \ 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplpxe7kzm.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplpxe7kzm.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1::2]\n\
    \    odd = lst[1::2]\n    even.+=(odd.-even)\n    return even\nend\n</cell>\n\
    <code language=julia-1.3>\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 6\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the product of a list of integers\
    \ lst. \nThe function should work for lists of any length.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1mxi9rw_.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1mxi9rw_.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-1)]\n\
    \    odd = lst[(end-2):end]\n    even.+=(odd.+0)\n    return even\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\
    \t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7])\
    \ == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpxqs6bgu1.jl:18\n  Test threw exception\n\
    \  Expression: candidate([4, 88]) == 88\n  BoundsError: attempt to access 2-element\
    \ Array{Int64,1} at index [0:2]\n  Stacktrace:\n   [1] throw_boundserror(::Array{Int64,1},\
    \ ::Tuple{UnitRange{Int64}}) at ./abstractarray.jl:537\n   [2] checkbounds at\
    \ ./abstractarray.jl:502 [inlined]\n   [3] getindex at ./array.jl:794 [inlined]\n\
    \   [4] add(::Array{Int64,1}) at /tmp/tmpxqs6bgu1.jl:9\n   [5] top-level scope\
    \ at /tmp/tmpxqs6bgu1.jl:18\n   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpxqs6bgu1.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmpxqs6bgu1.jl:19\n  Test threw exception\n  Expression: candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n  DimensionMismatch(\"array could not be broadcast\
    \ to match destination\")\n  Stacktrace:\n   [1] check_broadcast_shape at ./broadcast.jl:509\
    \ [inlined]\n   [2] check_broadcast_axes at ./broadcast.jl:512 [inlined]\n   [3]\
    \ check_broadcast_axes at ./broadcast.jl:516 [inlined]\n   [4] instantiate at\
    \ ./broadcast.jl:259 [inlined]\n   [5] materialize! at ./broadcast.jl:823 [inlined]\n\
    \   [6] add(::Array{Int64,1}) at /tmp/tmpxqs6bgu1.jl:10\n   [7] top-level scope\
    \ at /tmp/tmpxqs6bgu1.jl:19\n   [8] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [9] top-level scope at /tmp/tmpxqs6bgu1.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmpxqs6bgu1.jl:20\n  Test threw exception\n  Expression: candidate([4,\
    \ 0, 6, 7]) == 0\n  MethodError: Cannot `convert` an object of type Array{Int64,1}\
    \ to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] add(::Array{Int64,1})\
    \ at /tmp/tmpxqs6bgu1.jl:11\n   [2] top-level scope at /tmp/tmpxqs6bgu1.jl:20\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpxqs6bgu1.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmpxqs6bgu1.jl:21\n  Test threw exception\n  Expression: candidate([4,\
    \ 4, 6, 8]) == 12\n  MethodError: Cannot `convert` an object of type Array{Int64,1}\
    \ to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] add(::Array{Int64,1})\
    \ at /tmp/tmpxqs6bgu1.jl:11\n   [2] top-level scope at /tmp/tmpxqs6bgu1.jl:21\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpxqs6bgu1.jl:17\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxqs6bgu1.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    odd = lst[findall(x -> x % 2 != 0, lst)]\n    even\
    \ = even[findall(x -> x % 2 == 0, even)]\n    odd = odd[findall(x -> x % 2 !=\
    \ 0, odd)]\n    return sum(even) + sum(odd)\nend\n</cell>\n<code language=julia-1.5>\n\
    add([4, 2, 6, 7])\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the sum of the squares of the even numbers in a given list. \nWrite a function\
    \ that returns the sum of the squares of the odd numbers in a given list. \nWrite\
    \ a function that returns the sum of the squares of the even numbers in a given\
    \ list. \nWrite a function that returns the sum of the squares of the odd numbers\
    \ in a given list. \nWrite a function that returns the sum of the squares of the\
    \ even numbers in a given list. \nWrite a function that returns the sum of the\
    \ squares of the odd numbers in a given list. \nWrite a function that returns\
    \ the sum of the squares of the even numbers in a given list. \nWrite a function\
    \ that returns the sum of the squares of the odd numbers in a given list. \nWrite\
    \ a function that returns the sum of the squares of the even numbers in a given\
    \ list. \nWrite a function that returns the sum of the squares of the odd numbers\
    \ in a given list. \nWrite a function that returns the sum of the squares of the\
    \ even numbers in a given list. \nWrite a function that returns the sum of the\
    \ squares of the odd numbers in a given list. \nWrite a function that returns\
    \ the sum of the squares of the even numbers in a given list. \nWrite a function\
    \ that returns the sum of the squares of the odd numbers in a given list. \nWrite\
    \ a function that returns the sum of the squares of the even numbers in a given\
    \ list. \nWrite a function that returns the sum of the squares of the odd numbers\
    \ in a given list. \nWrite a function that returns the sum of the squares of the\
    \ even numbers in a given list. \nWrite a function that returns the sum of the\
    \ squares of the odd numbers in a given list. \nWrite a function that returns\
    \ the sum of the squares of the even numbers in a given list. \nWrite a function\
    \ that returns the sum of the squares of the odd numbers in a given list. \nWrite\
    \ a function that returns the sum of the squares of the even numbers in a given\
    \ list. \nWrite a function that returns the sum of the squares of the odd numbers\
    \ in a given list. \nWrite a function that returns the sum of the squares of the\
    \ even numbers in a given list. \nWrite a function that returns the sum of the\
    \ squares of the odd numbers in a given list. \nWrite a function that returns\
    \ the sum of the squares of the even numbers in a given list. \nWrite a function\
    \ that returns the sum of the squares of the odd numbers in a given list. \nWrite\
    \ a function that returns the sum of the squares of the even numbers in a given\
    \ list. \nWrite a function that returns the sum of the square\nusing Test\n\n\
    @testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1zh425vs.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1zh425vs.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-lst)]\n\
    \    odd = lst[2 : end]\n    even.+=(odd.*2)\n    return even\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 5\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the sum of the numbers in the\
    \ list lst that are divisible by 3.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2,\
    \ 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1f4ra89f.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1f4ra89f.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1::2]\n\
    \    odd = lst[1::2]\n    even.+=(odd.+0)/2\n    return even\nend\n</cell>\n<code\
    \ language=julia-1.4>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that returns the sum of the even numbers in a given list. \nWrite a\
    \ function that returns the sum of the odd numbers in a given list. \nWrite a\
    \ function that returns the product of the even numbers in a given list. \nWrite\
    \ a function that returns the product of the odd numbers in a given list. \nWrite\
    \ a function that returns the maximum of a given list. \nWrite a function that\
    \ returns the minimum of a given list. \nWrite a function that returns the product\
    \ of the squares of the even numbers in a given list. \nWrite a function that\
    \ returns the product of the squares of the odd numbers in a given list. \nWrite\
    \ a function that returns the sum of all the numbers in a given list. \nWrite\
    \ a function that returns the product of the numbers in a given list. \nWrite\
    \ a function that returns the product of the squares of the numbers in a given\
    \ list. \nWrite a function that returns the product of the cubes of the numbers\
    \ in a given list. \nWrite a function that returns the sum of all the squares\
    \ of the numbers in a given list. \nWrite a function that returns the sum of all\
    \ the cubes of the numbers in a given list. \nWrite a function that returns the\
    \ product of the squares of the cubes of the numbers in a given list. \nWrite\
    \ a function that returns the product of the cubes of the squares of the numbers\
    \ in a given list. \nWrite a function that returns the product of the cubes of\
    \ the cubes of the numbers in a given list. \nWrite a function that returns the\
    \ product of the cubes of the cubes of the squares of the numbers in a given list.\
    \ \nWrite a function that returns the product of the cubes of the cubes of the\
    \ cubes of the numbers in a given list. \nWrite a function that returns the product\
    \ of the cubes of the cubes of the cubes of the squares of the numbers in a given\
    \ list. \nWrite a function that returns the product of the cubes of the cubes\
    \ of the cubes of the cubes of the numbers in a given list. \nWrite a function\
    \ that returns the product of the cubes of the cubes of the cubes of the cubes\
    \ of the numbers in a given list. \nWrite a function that returns the product\
    \ of the cubes of the cubes of the cubes of the cubes of the squares of the numbers\
    \ in a given list. \nWrite a function that returns the product of the cubes of\
    \ the cubes of the cubes of the cubes of the cubes of the numbers in a given list.\
    \ \nWrite a function that returns the product of the cubes of the cubes of the\
    \ cubes of the cubes of the cubes of the numbers in a given list. \nWrite a function\
    \ that returns the product of the cubes of the cubes of the cubes of the cubes\
    \ of the cubes of the squares of the numbers in a given list. \nWrite a function\
    \ that returns the product of the cubes of the cubes of the cubes of the cubes\
    \ of the cubes of the cubes of the numbers in a given list. \nWrite a function\
    \ that returns the product of the cubes of the cubes of the cubes of the cube\n\
    using Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) ==\
    \ 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdytxynzc.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdytxynzc.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n    evens = sum(evens)\n   \
    \ return evens\nend\n</cell>\n<code language=julia-1.5>\n@assert add([1]) == 1\
    \ \n@assert add([4, 2, 6, 7]) == 5 \n@assert add([4, 2, 6, 7]) == 5 \n@assert\
    \ add([4, 2, 6, 7]) == 5 \n@assert add([4, 2, 6, 7]) == 5 \n@assert add([4, 2,\
    \ 6, 7]) == 5 \n@assert add([4, 2, 6, 7]) == 5 \n@assert add([4, 2, 6, 7]) ==\
    \ 5 \n@assert add([4, 2, 6, 7]) == 5 \n@assert add([4, 2, 6, 7]) == 5 \n@assert\
    \ add([4, 2, 6, 7]) == 5 \n@assert add([4, 2, 6, 7]) == 5 \n@assert add([4, 2,\
    \ 6, 7]) == 5 \n@assert add([4, 2, 6, 7]) == 5 \n@assert add([4, 2, 6, 7]) ==\
    \ 5 \n@assert add([4, 2, 6, 7]) == 5 \n@assert add([4, 2, 6, 7]) == 5 \n@assert\
    \ add([4, 2, 6, 7]) == 5 \n@assert add([4, 2, 6, 7]) == 5 \n@assert add([4, 2,\
    \ 6, 7]) == 5 \n@assert add([4, 2, 6, 7]) == 5 \n@assert add([4, 2, 6, 7]) ==\
    \ 5 \n@assert add([4, 2, 6, 7]) == 5 \n@assert add([4, 2, 6, 7]) == 5 \n@assert\
    \ add([4, 2, 6, 7]) == 5 \n@assert add([4, 2, 6, 7]) == 5 \n@assert add([4, 2,\
    \ 6, 7]) == 5 \n@assert add([4, 2, 6, 7]) == 5 \n@assert add([4, 2, 6, 7]) ==\
    \ 5 \n@assert add([4, 2, 6, 7]) == 5 \n@assert add([4, 2, 6, 7]) == 5 \n@assert\
    \ add([4, 2, 6, 7]) == 5 \n@assert add([4, 2, 6, 7]) == 5 \n@assert add([4, 2,\
    \ 6, 7]) == 5 \n@assert add([4, 2, 6, 7]) == 5 \n@assert add([4, 2, 6, 7]) ==\
    \ 5 \n@assert add([4, 2, 6, 7]) == 5 \n@assert add([4, 2, 6, 7]) == 5 \n@assert\
    \ add([4, 2, 6, 7]) == 5 \n@assert add([4, 2, 6, 7]) == 5 \n@assert add([4, 2,\
    \ 6, 7]) == 5 \n@assert add([4, 2, 6, 7]) == 5 \n@assert add([4, 2, 6, 7]\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\
    \t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7])\
    \ == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpupy5rhqn.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpupy5rhqn.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-1)]\n\
    \    odd = lst[(end-1) : (end)]\n    even.+=(odd.+0)\n    return even\nend\n</cell>\n\
    <code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nGiven\
    \ a non-empty list of integers lst. add the odd elements that are at even indices..\n\
    using Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) ==\
    \ 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcdt2yinr.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpcdt2yinr.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-1)]\n\
    \    odd = lst[2 : end]\n    even.+=(odd.*2)\n    return even\nend\n</cell>\n\
    <code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nGiven\
    \ a non-empty list of integers lst. add the odd elements that are at even indices..\n\
    using Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) ==\
    \ 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppjs12387.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppjs12387.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1::2]\n\
    \    odd = lst[1::2]\n    even.+=(odd.-even)\n    return even\nend\n</cell>\n\
    <code language=julia-1.0>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the sum of the even elements of an array. \nGiven a\
    \ non-empty array of integers lst. return the sum of the even elements that are\
    \ at odd indices..\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsvpx2z8j.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpsvpx2z8j.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1::2]\n\
    \    odd = lst[1::2]\n    even.+=(odd.-even)\n    return even\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpdk4dmbn4.jl:18\n  Test threw exception\n\
    \  Expression: candidate([4, 88]) == 88\n  TypeError: in typeassert, expected\
    \ Type, got Int64\n  Stacktrace:\n   [1] add(::Array{Int64,1}) at /tmp/tmpdk4dmbn4.jl:8\n\
    \   [2] top-level scope at /tmp/tmpdk4dmbn4.jl:18\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpdk4dmbn4.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmpdk4dmbn4.jl:19\n  Test threw exception\n  Expression: candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n  TypeError: in typeassert, expected Type, got Int64\n\
    \  Stacktrace:\n   [1] add(::Array{Int64,1}) at /tmp/tmpdk4dmbn4.jl:8\n   [2]\
    \ top-level scope at /tmp/tmpdk4dmbn4.jl:19\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpdk4dmbn4.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmpdk4dmbn4.jl:20\n  Test threw exception\n  Expression: candidate([4,\
    \ 0, 6, 7]) == 0\n  TypeError: in typeassert, expected Type, got Int64\n  Stacktrace:\n\
    \   [1] add(::Array{Int64,1}) at /tmp/tmpdk4dmbn4.jl:8\n   [2] top-level scope\
    \ at /tmp/tmpdk4dmbn4.jl:20\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpdk4dmbn4.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmpdk4dmbn4.jl:21\n  Test threw exception\n  Expression: candidate([4,\
    \ 4, 6, 8]) == 12\n  TypeError: in typeassert, expected Type, got Int64\n  Stacktrace:\n\
    \   [1] add(::Array{Int64,1}) at /tmp/tmpdk4dmbn4.jl:8\n   [2] top-level scope\
    \ at /tmp/tmpdk4dmbn4.jl:21\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpdk4dmbn4.jl:17\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdk4dmbn4.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-1)]\n\
    \    odd = lst[(end-1) : end]\n    even.+ odd.+\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function called subtract that takes two vectors and subtracts the\
    \ even elements that are at odd indices from the odd elements that are at even\
    \ indices.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpe1unfpb6.jl:11\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpe1unfpb6.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n    evens = sum(evens)\n   \
    \ return evens\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpftx0zozn.jl:19\n  Expression: candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n   Evaluated: 130 == 122\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpftx0zozn.jl:19\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpftx0zozn.jl:17\ntest set: Test Failed at /tmp/tmpftx0zozn.jl:20\n\
    \  Expression: candidate([4, 0, 6, 7]) == 0\n   Evaluated: 6 == 0\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpftx0zozn.jl:20\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpftx0zozn.jl:17\ntest set: Test Failed at /tmp/tmpftx0zozn.jl:21\n\
    \  Expression: candidate([4, 4, 6, 8]) == 12\n   Evaluated: 18 == 12\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpftx0zozn.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpftx0zozn.jl:17\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpftx0zozn.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1 : (end-lst)]\n\
    \    evens = filter(x -> x % 2 == 0, evens)\n    evens = map(x -> x + 1, evens)\n\
    \    evens = reduce(+, evens)\n    return evens\nend\n</cell>\n<code language=julia-1.5>\n\
    add(lst)\n</cell>\n<text>\nExercise 3\nGiven a non-empty list of integers lst.\
    \ add the odd elements that are at even indices..\nusing Test\n\n@testset begin\n\
    \ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5,\
    \ 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmptx52_p0y.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmptx52_p0y.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-1)]\n\
    \    odd = lst[2:end]\n    even.+=(odd.*2)\n    return even\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmphtlrw4zp.jl:18\n  Test threw exception\n\
    \  Expression: candidate([4, 88]) == 88\n  MethodError: Cannot `convert` an object\
    \ of type Array{Int64,1} to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T},\
    \ !Matched::Number) where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr)\
    \ where T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] add(::Array{Int64,1})\
    \ at /tmp/tmphtlrw4zp.jl:11\n   [2] top-level scope at /tmp/tmphtlrw4zp.jl:18\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmphtlrw4zp.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmphtlrw4zp.jl:19\n  Test threw exception\n  Expression: candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n  MethodError: Cannot `convert` an object of type\
    \ Array{Int64,1} to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] add(::Array{Int64,1})\
    \ at /tmp/tmphtlrw4zp.jl:11\n   [2] top-level scope at /tmp/tmphtlrw4zp.jl:19\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmphtlrw4zp.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmphtlrw4zp.jl:20\n  Test threw exception\n  Expression: candidate([4,\
    \ 0, 6, 7]) == 0\n  MethodError: Cannot `convert` an object of type Array{Int64,1}\
    \ to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] add(::Array{Int64,1})\
    \ at /tmp/tmphtlrw4zp.jl:11\n   [2] top-level scope at /tmp/tmphtlrw4zp.jl:20\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmphtlrw4zp.jl:17\n  \ntest set: Error During\
    \ Test at /tmp/tmphtlrw4zp.jl:21\n  Test threw exception\n  Expression: candidate([4,\
    \ 4, 6, 8]) == 12\n  MethodError: Cannot `convert` an object of type Array{Int64,1}\
    \ to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] add(::Array{Int64,1})\
    \ at /tmp/tmphtlrw4zp.jl:11\n   [2] top-level scope at /tmp/tmphtlrw4zp.jl:21\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmphtlrw4zp.jl:17\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphtlrw4zp.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1::2]\n\
    \    odd = lst[1::2]\n    even = sum(even)\n    odd = sum(odd)\n    return even\
    \ + odd\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp8awnv66o.jl:19\n  Test threw exception\n\
    \  Expression: candidate([4, 88]) == 88\n  TypeError: in typeassert, expected\
    \ Type, got Int64\n  Stacktrace:\n   [1] add(::Array{Int64,1}) at /tmp/tmp8awnv66o.jl:8\n\
    \   [2] top-level scope at /tmp/tmp8awnv66o.jl:19\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp8awnv66o.jl:18\n  \ntest set: Error During\
    \ Test at /tmp/tmp8awnv66o.jl:20\n  Test threw exception\n  Expression: candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n  TypeError: in typeassert, expected Type, got Int64\n\
    \  Stacktrace:\n   [1] add(::Array{Int64,1}) at /tmp/tmp8awnv66o.jl:8\n   [2]\
    \ top-level scope at /tmp/tmp8awnv66o.jl:20\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp8awnv66o.jl:18\n  \ntest set: Error During\
    \ Test at /tmp/tmp8awnv66o.jl:21\n  Test threw exception\n  Expression: candidate([4,\
    \ 0, 6, 7]) == 0\n  TypeError: in typeassert, expected Type, got Int64\n  Stacktrace:\n\
    \   [1] add(::Array{Int64,1}) at /tmp/tmp8awnv66o.jl:8\n   [2] top-level scope\
    \ at /tmp/tmp8awnv66o.jl:21\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp8awnv66o.jl:18\n  \ntest set: Error During\
    \ Test at /tmp/tmp8awnv66o.jl:22\n  Test threw exception\n  Expression: candidate([4,\
    \ 4, 6, 8]) == 12\n  TypeError: in typeassert, expected Type, got Int64\n  Stacktrace:\n\
    \   [1] add(::Array{Int64,1}) at /tmp/tmp8awnv66o.jl:8\n   [2] top-level scope\
    \ at /tmp/tmp8awnv66o.jl:22\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp8awnv66o.jl:18\n  \nTest Summary: | Error \
    \ Total\ntest set      |     4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8awnv66o.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1 : (end-1)]\n\
    \    odds = lst[(end-1) : end]\n    return sum(evens) + sum(odds)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\
    \t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7])\
    \ == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphbu5ikxo.jl:17\n  Expression: candidate([4,\
    \ 88]) == 88\n   Evaluated: 96 == 88\nStacktrace:\n [1] top-level scope at /tmp/tmphbu5ikxo.jl:17\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphbu5ikxo.jl:16\ntest set: Test Failed at /tmp/tmphbu5ikxo.jl:18\n\
    \  Expression: candidate([4, 5, 6, 7, 2, 122]) == 122\n   Evaluated: 148 == 122\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmphbu5ikxo.jl:18\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphbu5ikxo.jl:16\ntest set: Test Failed at /tmp/tmphbu5ikxo.jl:19\n\
    \  Expression: candidate([4, 0, 6, 7]) == 0\n   Evaluated: 23 == 0\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphbu5ikxo.jl:19\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphbu5ikxo.jl:16\ntest set: Test Failed at /tmp/tmphbu5ikxo.jl:20\n\
    \  Expression: candidate([4, 4, 6, 8]) == 12\n   Evaluated: 28 == 12\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphbu5ikxo.jl:20\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphbu5ikxo.jl:16\nTest Summary: | Fail  Total\n\
    test set      |    4      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphbu5ikxo.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :end]\n\
    \    odd = lst[2 :end]\n    even = collect(filter(x -> x % 2 == 0, even))\n  \
    \  odd = collect(filter(x -> x % 2 == 1, odd))\n    return sum(even) + sum(odd)\n\
    end\n</cell>\n<code language=julia-1.5>\nadd(lst)\n</cell>\n<text>\nExercise 2\n\
    Given a non-empty list of integers lst. add the even elements that are at odd\
    \ indices..\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3s3bfni6.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3s3bfni6.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x->x%2==0,\
    \ lst)]\n    evens = evens[2:end]\n    return sum(evens)\nend\n</cell>\n<code\
    \ language=julia-1.0>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nGiven a\
    \ non-empty list of integers lst. add the odd elements that are at even indices..\n\
    using Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) ==\
    \ 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjw0zgu70.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpjw0zgu70.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    evens = evens[findall(x -> x % 2 != 0, evens)]\n \
    \   return sum(evens)\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the product of a list of integers lst. \nThe function should work for\
    \ lists of any length.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmptrn20s0j.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmptrn20s0j.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-1)]\n\
    \    odd = lst[2:end]\n    even.+=(odd.*2)\n    return even\nend\n</cell>\n<code\
    \ language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nGiven a\
    \ non-empty list of integers lst. add the odd elements that are at even indices..\n\
    using Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) ==\
    \ 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3fgn16iz.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3fgn16iz.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1::2]\n\
    \    odd = lst[1::2]\n    even.+=(odd.-even)\n    return even\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 2 \n</cell>\n\
    <text>\nExercise 3\nWrite a function called sub that subtracts the even elements\
    \ that are at odd indices from the odd elements that are at even indices.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\
    \t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7])\
    \ == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6xmnfq3z.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6xmnfq3z.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1 : (end-1)]\n\
    \    evens = filter(x -> x % 2 == 0, evens)\n    evens = map(x -> x + 1, evens)\n\
    \    evens = reduce(+, evens)\n    return evens\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert add([1]) == 1 \n@assert add([1]) == 1 \n@assert add([1,2]) == 3 \n@assert\
    \ add([1,2,3]) == 6 \n@assert add([1,2,3,4,5]) == 10 \n@assert add([1,2,3,4,5,6])\
    \ == 15 \n@assert add([1,2,3,4,5,6,7]) == 21 \n@assert add([1,2,3,4,5,6,7,8])\
    \ == 28 \n@assert add([1,2,3,4,5,6,7,8,9]) == 36 \n@assert add([1,2,3,4,5,6,7,8,9,10])\
    \ == 45 \n@assert add([1,2,3,4,5,6,7,8,9,10,11]) == 54 \n@assert add([1,2,3,4,5,6,7,8,9,10,11,12])\
    \ == 63 \n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13]) == 72 \n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14])\
    \ == 81 \n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) == 90 \n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16])\
    \ == 99 \n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]) == 108 \n@assert\
    \ add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]) == 117 \n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19])\
    \ == 126 \n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) ==\
    \ 135 \n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]) ==\
    \ 144 \n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22])\
    \ == 153 \n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23])\
    \ == 162 \n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24])\
    \ == 171 \n@assert add\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpecy3u07k.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpecy3u07k.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-lst)]\n\
    \    odd = lst[2 : end]\n    even.+=(odd.*2)\n    return even\nend\n</cell>\n\
    <code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nGiven\
    \ a non-empty list of integers lst. add the odd elements that are at even indices..\n\
    using Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) ==\
    \ 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsjz1zgwa.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpsjz1zgwa.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-1)]\n\
    \    odd = lst[2:end]\n    even.+=(odd.*2)\n    return even\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 6\n</cell>\n\
    <text>\nExercise 2\nWrite a function called sub that takes in a list of integers\
    \ lst and subtracts the even elements that are at odd indices.\nusing Test\n\n\
    @testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpm4_3eza0.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpm4_3eza0.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n    evens = sum(evens)\n   \
    \ return evens\nend\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpthnvxdw9.jl:19\n  Expression: candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122\n   Evaluated: 130 == 122\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpthnvxdw9.jl:19\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpthnvxdw9.jl:17\ntest set: Test Failed at /tmp/tmpthnvxdw9.jl:20\n\
    \  Expression: candidate([4, 0, 6, 7]) == 0\n   Evaluated: 6 == 0\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpthnvxdw9.jl:20\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpthnvxdw9.jl:17\ntest set: Test Failed at /tmp/tmpthnvxdw9.jl:21\n\
    \  Expression: candidate([4, 4, 6, 8]) == 12\n   Evaluated: 18 == 12\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpthnvxdw9.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpthnvxdw9.jl:17\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     3      4\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpthnvxdw9.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1 : (end-1)]\n\
    \    odds = lst[(end-1) : (end)]\n    evens = filter(x -> x % 2 == 0, evens)\n\
    \    odds = filter(x -> x % 2 == 1, odds)\n    evens = map(x -> x + 1, evens)\n\
    \    odds = map(x -> x + 1, odds)\n    evens = reduce(+, evens)\n    odds = reduce(+,\
    \ odds)\n    return evens + odds\nend\n</cell>\n<code language=julia-1.5>\n@time\
    \ add([4, 2, 6, 7])\n</cell>\n<text>\nExercise 3\nGiven a non-empty list of integers\
    \ lst. add the even elements that are at odd indices..\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpe0ln2air.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpe0ln2air.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1 : (end-lst)]\n\
    \    evens = filter(x -> x % 2 == 0, evens)\n    evens = map(x -> x + 1, evens)\n\
    \    evens = reduce(+, evens)\n    return evens\nend\n</cell>\n<code language=julia-1.5>\n\
    add([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite a function called sub that\
    \ subtracts the even elements that are at odd indices.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpz55yb22d.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpz55yb22d.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1 : (end-1)]\n\
    \    odds = lst[2:end]\n    evens = filter(x -> x % 2 == 0, evens)\n    odds =\
    \ filter(x -> x % 2 != 0, odds)\n    evens = map(x -> x + 1, evens)\n    odds\
    \ = map(x -> x - 1, odds)\n    evens = map(x -> x + 1, evens)\n    odds = map(x\
    \ -> x - 1, odds)\n    evens = map(x -> x + 1, evens)\n    odds = map(x -> x -\
    \ 1, odds)\n    evens = map(x -> x + 1, evens)\n    odds = map(x -> x - 1, odds)\n\
    \    evens = map(x -> x + 1, evens)\n    odds = map(x -> x - 1, odds)\n    evens\
    \ = map(x -> x + 1, evens)\n    odds = map(x -> x - 1, odds)\n    evens = map(x\
    \ -> x + 1, evens)\n    odds = map(x -> x - 1, odds)\n    evens = map(x -> x +\
    \ 1, evens)\n    odds = map(x -> x - 1, odds)\n    evens = map(x -> x + 1, evens)\n\
    \    odds = map(x -> x - 1, odds)\n    evens = map(x -> x + 1, evens)\n    odds\
    \ = map(x -> x - 1, odds)\n    evens = map(x -> x + 1, evens)\n    odds = map(x\
    \ -> x - 1, odds)\n    evens = map(x -> x + 1, evens)\n    odds = map(x -> x -\
    \ 1, odds)\n    evens = map(x -> x + 1, evens)\n    odds = map(x -> x - 1, odds)\n\
    \    evens = map(x -> x + 1, evens)\n    odds = map(x -> x - 1, odds)\n    evens\
    \ = map(x -> x + 1, evens)\n    odds = map(x -> x - 1, odds)\n    evens = map(x\
    \ -> x + 1, evens)\n    odds = map(x -> x - 1, odds)\n    evens = map(x -> x +\
    \ 1, evens)\n    odds = map(x -> x - 1, odds)\n    evens = map(x -> x + 1, evens)\n\
    \    odds = map(x -> x - 1, odds)\n    evens = map(x -> x + 1, evens)\n    odds\
    \ = map(x -> x - 1, odds)\n    evens = map(x -> x + 1, evens)\n    odds = map(x\
    \ -> x - 1, odds)\n    evens = map(x -> x + 1, evens)\n    odds = map(x -> x -\
    \ 1, odds)\n    evens = map(x \nusing Test\n\n@testset begin\n\ncandidate = add;\n\
    \t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) ==\
    \ 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8])\
    \ == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbdrlm7ww.jl:55\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbdrlm7ww.jl:55\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n    evens = sum(evens)\n   \
    \ return evens\nend\n</cell>\n<code language=julia-1.5>\n@time add([4, 2, 6, 7])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the even\
    \ elements of a given list of integers. \nWrite a function that returns the sum\
    \ of the even elements of a given vector of integers. \nWrite a function that\
    \ returns the sum of the even elements of a given matrix of integers. \nWrite\
    \ a function that returns the sum of the even elements of a given array of integers.\
    \ \nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88])\
    \ == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpk1rc1sck.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpk1rc1sck.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    evens = evens[findall(x -> x % 2 != 0, evens)]\n \
    \   evens = evens[2:end]\n    evens = map(x -> x + 2, evens)\n    return sum(evens)\n\
    end\n</cell>\n<code language=julia-1.4>\nadd([4, 2, 6, 7])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of integers and returns the sum\
    \ of the even elements that are at odd indices.\nusing Test\n\n@testset begin\n\
    \ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5,\
    \ 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpf3w1ury7.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpf3w1ury7.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1 : (end-lst)]\n\
    \    evens = filter(x -> x % 2 == 0, evens)\n    evens = map(x -> x + 1, evens)\n\
    \    evens = map(x -> x + lst[end], evens)\n    evens = reduce(+, evens)\n   \
    \ return evens\nend\n</cell>\n<code language=julia-1.0>\n@code_warntype add(lst)\n\
    </cell>\n<code language=julia-1.0>\n@code_warntype add(lst)\n</cell>\n<code language=julia-1.0>\n\
    @code_warntype add(lst)\n</cell>\n<code language=julia-1.0>\n@code_warntype add(lst)\n\
    </cell>\n<code language=julia-1.0>\n@code_warntype add(lst)\n</cell>\n<code language=julia-1.0>\n\
    @code_warntype add(lst)\n</cell>\n<code language=julia-1.0>\n@code_warntype add(lst)\n\
    </cell>\n<code language=julia-1.0>\n@code_warntype add(lst)\n</cell>\n<code language=julia-1.0>\n\
    @code_warntype add(lst)\n</cell>\n<code language=julia-1.0>\n@code_warntype add(lst)\n\
    </cell>\n<code language=julia-1.0>\n@code_warntype add(lst)\n</cell>\n<code language=julia-1.0>\n\
    @code_warntype add(lst)\n</cell>\n<code language=julia-1.0>\n@code_warntype add(lst)\n\
    </cell>\n<code language=julia-1.0>\n@code_warntype add(lst)\n</cell>\n<code language=julia-1.0>\n\
    @code_warntype add(lst)\n</cell>\n<code language=julia-1.0>\n@code_warntype add(lst)\n\
    </cell>\n<code language=julia-1.0>\n@code_warntype add(lst)\n</cell>\n<code language=julia-1.0>\n\
    @code_warntype add(lst)\n</cell>\n<code language=julia-1.0>\n@code_warntype add(lst)\n\
    </cell>\n<code language=julia-1.0>\n@code_warntype add(lst)\n</cell>\n<code language=julia-1.0>\n\
    @code_warntype add(lst)\n</cell>\n<code language=julia-1.0>\n@code_warntype add(lst)\n\
    </cell>\n<code language=julia-1.0>\n@code_warntype add(lst)\n</cell>\n<code language=julia-1.0>\n\
    @code_warntype add(lst)\n</cell>\n<code language=julia-1.0>\n@code_warntype add(\n\
    using Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) ==\
    \ 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppr72my35.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppr72my35.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 :end]\n\
    \    odd = lst[2 :end]\n    even.+=(odd.*2)\n    return even\nend\n</cell>\n<code\
    \ language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nGiven a\
    \ non-empty list of integers lst. add the odd elements that are at even indices..\n\
    using Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) ==\
    \ 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxxgsl23s.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxxgsl23s.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    evens = evens[findall(x -> x % 2 != 0, evens)]\n \
    \   return sum(evens)\nend\n</cell>\n<code language=julia-1.5>\n@assert add([1])\
    \ == 1 \n@assert add([4, 2, 6, 7]) == 5 \n@assert add([4, 2, 6, 7, 8]) == 10 \n\
    @assert add([4, 2, 6, 7, 8, 9]) == 16 \n@assert add([4, 2, 6, 7, 8, 10, 11]) ==\
    \ 21 \n@assert add([4, 2, 6, 7, 8, 10, 11, 12]) == 28 \n@assert add([4, 2, 6,\
    \ 7, 8, 10, 11, 12, 13]) == 36 \n@assert add([4, 2, 6, 7, 8, 10, 11, 12, 13, 14])\
    \ == 45 \n@assert add([4, 2, 6, 7, 8, 10, 11, 12, 13, 14, 15]) == 54 \n@assert\
    \ add([4, 2, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16]) == 63 \n@assert add([4, 2,\
    \ 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17]) == 72 \n@assert add([4, 2, 6, 7, 8,\
    \ 10, 11, 12, 13, 14, 15, 16, 17, 18]) == 81 \n@assert add([4, 2, 6, 7, 8, 10,\
    \ 11, 12, 13, 14, 15, 16, 17, 18, 19]) == 90 \n@assert add([4, 2, 6, 7, 8, 10,\
    \ 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 99 \n</cell>\n<text>\nExercise 3\n\
    Write a function called multiply that takes a list of integers and returns the\
    \ product of the integers. \nMultiply each element of the list by each element\
    \ of the list. \nFor example multiply([1, 2, 3]) should return [3, 6, 9]. \nMultiply\
    \ each element of the list by each element of the list. \nFor example multiply([1,\
    \ 2, 3]) should return [3, 6, 9]. \nMultiply each element of the list by each\
    \ element of the list. \nFor example multiply([1, 2, 3]) should return [3, 6,\
    \ 9]. \nMultiply each element of the list by each element of the list. \nFor example\
    \ multiply([1, 2, 3]) should return [3, 6, 9]. \nMultiply each element of the\
    \ list by each element of the list. \nFor example multiply([1, 2, 3]) should return\
    \ [3, 6, 9]. \nMultiply each element of the list by each element of the list.\
    \ \nFor example multiply([1, 2, 3]) should return [3, 6, 9]. \nMultiply each element\
    \ of the list by each element of the list. \nFor example multiply([1, 2, 3]) should\
    \ return [3, 6, 9]. \nMultiply each element of the list \nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8olyylnw.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8olyylnw.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1::2]\n\
    \    odd = lst[1::2]\n    even.+=(odd.-even)\n    return even\nend\n</cell>\n\
    <code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a vector of integers and returns the sum of the even elements\
    \ of the vector.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzl2pzqh5.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzl2pzqh5.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    evens = evens[findall(x -> x % 2 != 0, evens)]\n \
    \   evens = evens[2:end]\n    return sum(evens)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert add([1]) == 1 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6,\
    \ 7]) == 10 \n</cell>\n<text>\nExercise 3\nWrite a function called multiply that\
    \ takes in a list of integers and returns the product of all the integers in the\
    \ list. \nMultiply each element in the list by each element in the list. \nFor\
    \ example, multiply([4, 2, 6, 7]) == 24\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2,\
    \ 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfwxmycv1.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfwxmycv1.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1 : (end-1)]\n\
    \    odds = lst[(end-1):end]\n    evens = filter(x -> x % 2 == 0, evens)\n   \
    \ odds = filter(x -> x % 2 == 1, odds)\n    return sum(evens) + sum(odds)\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert add(Vector{Int64}([4, 2, 6, 7])) ==\
    \ 6\n</cell>\n<text>\nExercise 3\nWrite a function called subtract that takes\
    \ two vectors and subtracts the even elements that are at odd indices from the\
    \ even elements that are at even indices.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2,\
    \ 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkh0dg8ve.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpkh0dg8ve.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1 : (end-lst)]\n\
    \    odds = lst[(end-lst):end]\n    evens = filter(x -> x % 2 == 0, evens)\n \
    \   odds = filter(x -> x % 2 != 0, odds)\n    evens = map(x -> x + 1, evens)\n\
    \    odds = map(x -> x - 1, odds)\n    return sum(evens) + sum(odds)\nend\n</cell>\n\
    <code language=julia-1.5>\nadd(lst)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector and returns the sum of the squares of the even elements\
    \ of the vector.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpv1xv19tf.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpv1xv19tf.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n    return sum(evens)\nend\n\
    </cell>\n<code language=julia-1.4>\n@code_warntype add(lst)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector and returns the sum of the even\
    \ elements. \nWrite a function that takes a vector and returns the sum of the\
    \ odd elements. \nWrite a function that takes a vector and returns the sum of\
    \ the even and odd elements. \nWrite a function that takes a vector and returns\
    \ the sum of the even and odd elements. \nWrite a function that takes a vector\
    \ and returns the sum of the even and odd elements. \nWrite a function that takes\
    \ a vector and returns the sum of the even and odd elements. \nWrite a function\
    \ that takes a vector and returns the sum of the even and odd elements. \nWrite\
    \ a function that takes a vector and returns the sum of the even and odd elements.\
    \ \nWrite a function that takes a vector and returns the sum of the even and odd\
    \ elements. \nWrite a function that takes a vector and returns the sum of the\
    \ even and odd elements. \nWrite a function that takes a vector and returns the\
    \ sum of the even and odd elements. \nWrite a function that takes a vector and\
    \ returns the sum of the even and odd elements. \nWrite a function that takes\
    \ a vector and returns the sum of the even and odd elements. \nWrite a function\
    \ that takes a vector and returns the sum of the even and odd elements. \nWrite\
    \ a function that takes a vector and returns the sum of the even and odd elements.\
    \ \nWrite a function that takes a vector and returns the sum of the even and odd\
    \ elements. \nWrite a function that takes a vector and returns the sum of the\
    \ even and odd elements. \nWrite a function that takes a vector and returns the\
    \ sum of the even and odd elements. \nWrite a function that takes a vector and\
    \ returns the sum of the even and odd elements. \nWrite a function that takes\
    \ a vector and returns the sum of the even and odd elements. \nWrite a function\
    \ that takes a vector and returns the sum of the even and odd elements. \nWrite\
    \ a function that takes a vector and returns the sum of the even and odd elements.\
    \ \nWrite a function that takes a vector and returns the sum of the even and odd\
    \ elements. \nWrite a function that takes a vector and returns the sum of the\
    \ even and odd elements. \nWrite a function that takes a vector and returns the\
    \ sum of the even and odd elements. \nWrite a function that takes a vector and\
    \ returns the sum of the even and odd elements. \nWrite a function that takes\
    \ a vector and returns the sum of the even and odd elements. \nWrite a function\
    \ that takes a vector and returns the sum of the even and odd elements. \nWrite\
    \ a function that takes a vector and returns the sum of the even and odd elements.\
    \ \nWrite a function that takes a vector and returns the sum of the even and odd\
    \ elements. \nWrite a function that takes a vector and returns the sum\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\
    \t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7])\
    \ == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdw2x4ovk.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdw2x4ovk.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1::2]\n\
    \    odds = lst[1::2]\n    evens = map(x -> x + 1, evens)\n    odds = map(x ->\
    \ x - 1, odds)\n    evens = filter(x -> x % 2 == 0, evens)\n    odds = filter(x\
    \ -> x % 2 == 1, odds)\n    evens = map(x -> x + 1, evens)\n    odds = map(x ->\
    \ x - 1, odds)\n    evens = filter(x -> x % 2 == 0, evens)\n    odds = filter(x\
    \ -> x % 2 == 1, odds)\n    evens = map(x -> x + 1, evens)\n    odds = map(x ->\
    \ x - 1, odds)\n    evens = filter(x -> x % 2 == 0, evens)\n    odds = filter(x\
    \ -> x % 2 == 1, odds)\n    evens = map(x -> x + 1, evens)\n    odds = map(x ->\
    \ x - 1, odds)\n    evens = filter(x -> x % 2 == 0, evens)\n    odds = filter(x\
    \ -> x % 2 == 1, odds)\n    evens = map(x -> x + 1, evens)\n    odds = map(x ->\
    \ x - 1, odds)\n    evens = filter(x -> x % 2 == 0, evens)\n    odds = filter(x\
    \ -> x % 2 == 1, odds)\n    evens = map(x -> x + 1, evens)\n    odds = map(x ->\
    \ x - 1, odds)\n    evens = filter(x -> x % 2 == 0, evens)\n    odds = filter(x\
    \ -> x % 2 == 1, odds)\n    evens = map(x -> x + 1, evens)\n    odds = map(x ->\
    \ x - 1, odds)\n    evens = filter(x -> x % 2 == 0, evens)\n    odds = filter(x\
    \ -> x % 2 == 1, odds)\n    evens = map(x -> x + 1, evens)\n    odds = map(x ->\
    \ x - 1, odds)\n    evens = filter(x -> x % 2 == 0, evens)\n    odds = filter(x\
    \ -> x % 2 == 1, odds)\n    evens = map(x -> x + 1, evens)\n    odds = map(x ->\
    \ x - 1, odds)\n    evens = filter(x -> x % 2 == 0, evens)\n    odds = filter(x\
    \ -> x % 2 == 1, odds)\n    evens = map(x -> x + 1, evens)\n    odds = map(x ->\
    \ x - 1, odds)\n    evens = filter(x -> x % 2 == 0, evens)\n    odds = filter(x\
    \ -> x % 2 == 1, odds)\n    evens = map(x -> x + 1, evens)\n    odds = map(x \n\
    using Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) ==\
    \ 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpoobr6t7y.jl:52\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpoobr6t7y.jl:52\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-1)]\n\
    \    odd = lst[2:end]\n    return sum(even) + sum(odd)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert add(Vector{Int64}([4, 2, 6, 7])) == 6\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the sum of the squares of the integers in lst. For example,\
    \ add([4, 2, 6, 7]) == 25\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t\
    @test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\
    \t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnan_3a51.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpnan_3a51.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    evens = evens[findall(x -> x % 2 != 0, evens)]\n \
    \   return sum(evens)\nend\n</cell>\n<code language=julia-1.5>\nadd(lst)\n</cell>\n\
    <text>\nExercise 2\nGiven a non-empty list of integers lst. add the odd elements\
    \ that are at even indices..\nusing Test\n\n@testset begin\n\ncandidate = add;\n\
    \t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) ==\
    \ 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8])\
    \ == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzlep0d5i.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzlep0d5i.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1 : (end-1)]\n\
    \    odds = lst[(end-1) : end]\n    evens = filter(x -> x % 2 == 0, evens)\n \
    \   odds = filter(x -> x % 2 == 1, odds)\n    return sum(evens) + sum(odds)\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert add(Vector{Int64}([4, 2, 6, 7]))\
    \ == 6\n</cell>\n<text>\nExercise 2\nGiven a non-empty list of integers lst. add\
    \ the odd elements that are at even indices..\nusing Test\n\n@testset begin\n\n\
    candidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5,\
    \ 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpuqkn_i7s.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpuqkn_i7s.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    odd = lst[findall(x -> x % 2 != 0, lst)]\n    even.+(odd.-even)\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert add([1]) == 1 \n@assert add([4,\
    \ 2, 6, 7]) == 2 \n@assert add([4, 2, 6, 7]) == 2 \n@assert add([4, 2, 6, 7])\
    \ == 2 \n@assert add([4, 2, 6, 7]) == 2 \n@assert add([4, 2, 6, 7]) == 2 \n@assert\
    \ add([4, 2, 6, 7]) == 2 \n@assert add([4, 2, 6, 7]) == 2 \n@assert add([4, 2,\
    \ 6, 7]) == 2 \n@assert add([4, 2, 6, 7]) == 2 \n@assert add([4, 2, 6, 7]) ==\
    \ 2 \n@assert add([4, 2, 6, 7]) == 2 \n@assert add([4, 2, 6, 7]) == 2 \n@assert\
    \ add([4, 2, 6, 7]) == 2 \n@assert add([4, 2, 6, 7]) == 2 \n@assert add([4, 2,\
    \ 6, 7]) == 2 \n@assert add([4, 2, 6, 7]) == 2 \n@assert add([4, 2, 6, 7]) ==\
    \ 2 \n@assert add([4, 2, 6, 7]) == 2 \n@assert add([4, 2, 6, 7]) == 2 \n@assert\
    \ add([4, 2, 6, 7]) == 2 \n@assert add([4, 2, 6, 7]) == 2 \n@assert add([4, 2,\
    \ 6, 7]) == 2 \n@assert add([4, 2, 6, 7]) == 2 \n@assert add([4, 2, 6, 7]) ==\
    \ 2 \n@assert add([4, 2, 6, 7]) == 2 \n@assert add([4, 2, 6, 7]) == 2 \n@assert\
    \ add([4, 2, 6, 7]) == 2 \n@assert add([4, 2, 6, 7]) == 2 \n@assert add([4, 2,\
    \ 6, 7]) == 2 \n@assert add([4, 2, 6, 7]) == 2 \n@assert add([4, 2, 6, 7]) ==\
    \ 2 \n@assert add([4, 2, 6, 7]) == 2 \n@assert add([4, 2, 6, 7]) == 2 \n@assert\
    \ add([4, 2, 6, 7]) == 2 \n@assert add([4, 2, 6, 7]) == 2 \n@assert add([4, 2,\
    \ 6, 7]) == 2 \n@assert add([4, 2, 6, 7]) == 2 \n@assert add([4, 2, 6, 7]) ==\
    \ 2 \n@assert add([4, 2, 6, 7]) == 2 \n@assert add([4, 2, 6, 7]) == 2 \n@assert\
    \ add([4, 2, 6, 7]) == 2 \n@\nusing Test\n\n@testset begin\n\ncandidate = add;\n\
    \t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) ==\
    \ 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8])\
    \ == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpx5an322i.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpx5an322i.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-1)]\n\
    \    odd = lst[2:end]\n    even.+=(odd.*2)\n    return even\nend\n</cell>\n<code\
    \ language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the sum of the even numbers in a given list. \nGiven a\
    \ non-empty list of integers lst. add the even elements that are at odd indices..\n\
    using Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) ==\
    \ 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpj9b61r8b.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpj9b61r8b.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1 : (end-1)]\n\
    \    odds = lst[2:end]\n    evens = filter(x -> x % 2 == 0, evens)\n    odds =\
    \ filter(x -> x % 2 != 0, odds)\n    evens = map(x -> x + 1, evens)\n    odds\
    \ = map(x -> x + 1, odds)\n    return sum(evens) + sum(odds)\nend\n</cell>\n<code\
    \ language=julia-1.3>\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 6\n</cell>\n\
    <text>\nExercise 2\nWrite a function called sub that subtracts the even elements\
    \ that are at odd indices.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\
    \t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) ==\
    \ 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8])\
    \ == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdu5ckknp.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdu5ckknp.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1 : (end-1)]\n\
    \    odds = lst[(end-1) : end]\n    evens = filter(x -> x % 2 == 0, evens)\n \
    \   odds = filter(x -> x % 2 != 0, odds)\n    evens = map(x -> x + 1, evens)\n\
    \    odds = map(x -> x + 1, odds)\n    evens = map(x -> x + 1, evens)\n    odds\
    \ = map(x -> x + 1, odds)\n    evens = map(x -> x + 1, evens)\n    odds = map(x\
    \ -> x + 1, odds)\n    evens = map(x -> x + 1, evens)\n    odds = map(x -> x +\
    \ 1, odds)\n    evens = map(x -> x + 1, evens)\n    odds = map(x -> x + 1, odds)\n\
    \    evens = map(x -> x + 1, evens)\n    odds = map(x -> x + 1, odds)\n    evens\
    \ = map(x -> x + 1, evens)\n    odds = map(x -> x + 1, odds)\n    evens = map(x\
    \ -> x + 1, evens)\n    odds = map(x -> x + 1, odds)\n    evens = map(x -> x +\
    \ 1, evens)\n    odds = map(x -> x + 1, odds)\n    evens = map(x -> x + 1, evens)\n\
    \    odds = map(x -> x + 1, odds)\n    evens = map(x -> x + 1, evens)\n    odds\
    \ = map(x -> x + 1, odds)\n    evens = map(x -> x + 1, evens)\n    odds = map(x\
    \ -> x + 1, odds)\n    evens = map(x -> x + 1, evens)\n    odds = map(x -> x +\
    \ 1, odds)\n    evens = map(x -> x + 1, evens)\n    odds = map(x -> x + 1, odds)\n\
    \    evens = map(x -> x + 1, evens)\n    odds = map(x -> x + 1, odds)\n    evens\
    \ = map(x -> x + 1, evens)\n    odds = map(x -> x + 1, odds)\n    evens = map(x\
    \ -> x + 1, evens)\n    odds = map(x -> x + 1, odds)\n    evens = map(x -> x +\
    \ 1, evens)\n    odds = map(x -> x + 1, odds)\n    evens = map(x -> x + 1, evens)\n\
    \    odds = map(x -> x + 1, odds)\n    evens = map(x -> x + 1, evens)\n    odds\
    \ = map(x -> x + 1, odds)\n    evens = map(x -> x + 1, evens)\n    odds = map(x\
    \ -> x + 1, odds)\n    even\nusing Test\n\n@testset begin\n\ncandidate = add;\n\
    \t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) ==\
    \ 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8])\
    \ == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7phuqffb.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp7phuqffb.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp7phuqffb.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n    return sum(evens)\nend\n\
    </cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the sum of the even numbers in a given list.\n\
    using Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) ==\
    \ 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpn4hnqf0a.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpn4hnqf0a.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1 : (end-1)]\n\
    \    odds = lst[(end-1) : end]\n    evens = filter(x -> x % 2 == 0, evens)\n \
    \   odds = filter(x -> x % 2 == 1, odds)\n    evens = map(x -> x + 1, evens)\n\
    \    odds = map(x -> x + 1, odds)\n    return sum(evens) + sum(odds)\nend\n</cell>\n\
    <code language=julia-1.5>\nadd(lst)\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of integers and returns the sum of the squares of the even\
    \ numbers. \nWrite a function that takes a vector of integers and returns the\
    \ sum of the squares of the odd numbers. \nWrite a function that takes a vector\
    \ of integers and returns the sum of the squares of the even and odd numbers.\
    \ \nWrite a function that takes a vector of integers and returns the sum of the\
    \ squares of the even and odd numbers. \nWrite a function that takes a vector\
    \ of integers and returns the sum of the squares of the even and odd numbers.\
    \ \nWrite a function that takes a vector of integers and returns the sum of the\
    \ squares of the even and odd numbers. \nWrite a function that takes a vector\
    \ of integers and returns the sum of the squares of the even and odd numbers.\
    \ \nWrite a function that takes a vector of integers and returns the sum of the\
    \ squares of the even and odd numbers. \nWrite a function that takes a vector\
    \ of integers and returns the sum of the squares of the even and odd numbers.\
    \ \nWrite a function that takes a vector of integers and returns the sum of the\
    \ squares of the even and odd numbers. \nWrite a function that takes a vector\
    \ of integers and returns the sum of the squares of the even and odd numbers.\
    \ \nWrite a function that takes a vector of integers and returns the sum of the\
    \ squares of the even and odd numbers. \nWrite a function that takes a vector\
    \ of integers and returns the sum of the squares of the even and odd numbers.\
    \ \nWrite a function that takes a vector of integers and returns the sum of the\
    \ squares of the even and odd numbers. \nWrite a function that takes a vector\
    \ of integers and returns the sum of the squares of the even and odd numbers.\
    \ \nWrite a function that takes a vector of integers and returns the sum of the\
    \ squares of the even and odd numbers. \nWrite a function that takes a vector\
    \ of integers and returns the sum of the squares of the even and odd numbers.\
    \ \nWrite a function that takes a vector of integers and returns the sum of the\
    \ squares of the even and odd numbers. \nWrite a function that takes a vector\
    \ of integers and returns the sum of the squares of the even and odd numbers.\
    \ \nWrite a function that takes a vector of integers and returns the sum of the\
    \ squares of the even and odd numbers. \nWrite a function that takes a vector\
    \ of integers and returns the sum of the squares of the even and odd numbers.\
    \ \nWrite a function that takes a vector of integers and returns the sum of the\
    \ squares of the even and odd numbers. \nWrite a function that takes a vector\
    \ of integers and returns the sum of the squares of the even and odd numbers.\
    \ \nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88])\
    \ == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmph_p_2mvx.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmph_p_2mvx.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-1)]\n\
    \    odd = lst[2 : end]\n    even.+ odd.\nend\n</cell>\n<text>\nExercise 7\nWrite\
    \ a function that takes a vector and returns the sum of the elements in the vector.\n\
    using Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) ==\
    \ 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_ebqtclz.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_ebqtclz.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1 : (end-1)]\n\
    \    evens = filter(x -> x % 2 == 0, evens)\n    evens = map(x -> x + 1, evens)\n\
    \    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens\
    \ = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x\
    \ -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x\
    \ + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1,\
    \ evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n\
    \    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens\
    \ = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x\
    \ -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x\
    \ + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1,\
    \ evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n\
    \    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens\
    \ = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x\
    \ -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x\
    \ + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1,\
    \ evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n\
    \    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens\
    \ = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x\
    \ -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x\
    \ + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1,\
    \ evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(\nusing Test\n\n\
    @testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprnokai9r.jl:57\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprnokai9r.jl:57\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1::2]\n\
    \    odd = lst[1::2]\n    even.+=(odd.-even)\n    return even\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the sum of the numbers in the\
    \ list lst. \nWrite a function that returns the sum of the numbers in the list\
    \ lst that are divisible by 3.\nWrite a function that returns the sum of the numbers\
    \ in the list lst that are divisible by 5 and are less than 100.\nWrite a function\
    \ that returns the sum of the numbers in the list lst that are divisible by 5\
    \ and are between 100 and 200.\nWrite a function that returns the sum of the numbers\
    \ in the list lst that are divisible by 5 and are greater than 200.\nWrite a function\
    \ that returns the sum of the numbers in the list lst that are divisible by 5\
    \ and are greater than 100 and less than 200.\nWrite a function that returns the\
    \ sum of the numbers in the list lst that are divisible by 5 and are greater than\
    \ 100 and less than 200 and are less than 300.\nWrite a function that returns\
    \ the sum of the numbers in the list lst that are divisible by 5 and are greater\
    \ than 100 and less than 200 and are between 300 and 400.\nWrite a function that\
    \ returns the sum of the numbers in the list lst that are divisible by 5 and are\
    \ greater than 100 and less than 200 and are between 300 and 400 and are less\
    \ than 500.\nWrite a function that returns the sum of the numbers in the list\
    \ lst that are divisible by 5 and are greater than 100 and less than 200 and are\
    \ between 300 and 400 and are between 500 and 600.\nWrite a function that returns\
    \ the sum of the numbers in the list lst that are divisible by 5 and are greater\
    \ than 100 and less than 200 and are between 300 and 400 and are between 500 and\
    \ 600 and are less than 700.\nWrite a function that returns the sum of the numbers\
    \ in the list lst that are divisible by 5 and are greater than 100 and less than\
    \ 200 and are between 300 and 400 and are between 500 and 600 and are between\
    \ 700 and 800.\nWrite a function that returns the sum of the numbers in the list\
    \ lst that are divisible by 5 and are greater than 100 and less than 200 and are\
    \ between 300 and 400 and are between 500 and 600 and are between 700 and 800\
    \ and are less than 900.\nWrite a function that returns the sum of the numbers\
    \ in the list lst that are divisible by 5 and are greater than 100 and less than\
    \ 200 and are between 300 and 400 and are between 500 and 600 and are between\
    \ 700 and 800 and are between 900 and 1000.\nWrite a function that returns the\
    \ sum of the numbers in the list lst that are divisible by 5 and are greater than\
    \ 100 and less than 200 and are between 300 and 400 and are between 500 and 600\
    \ and are between \nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1e36fwb4.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1e36fwb4.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1 : (end-1)]\n\
    \    evens = filter(x -> x % 2 == 0, evens)\n    evens = map(x -> x + 1, evens)\n\
    \    evens = reduce(+, evens)\n    return evens\nend\n</cell>\n<code language=julia-1.5>\n\
    add([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ vector and returns the sum of the squares of the even elements. \nFor example,\
    \ add([4, 2, 6, 7]) should return 50.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2,\
    \ 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_8x9zg1q.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_8x9zg1q.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1::2]\n\
    \    odd = lst[1::2]\n    even.+=(odd.+0)/2\n    return even\nend\n</cell>\n<code\
    \ language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the sum of the numbers in the list lst. \nIf the list\
    \ is empty return 0.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcs6kennk.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpcs6kennk.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1 : (end-1)]\n\
    \    odds = lst[2:end]\n    evens = filter(x -> x % 2 == 0, evens)\n    odds =\
    \ filter(x -> x % 2 == 1, odds)\n    evens = map(x -> x + 1, evens)\n    odds\
    \ = map(x -> x + 1, odds)\n    evens = reduce(+, evens)\n    odds = reduce(+,\
    \ odds)\n    return evens + odds\nend\n</cell>\n<code language=julia-1.5>\nadd(lst)\n\
    </cell>\n<text>\nExercise 2\nGiven a non-empty list of integers lst. add the odd\
    \ elements that are at even indices..\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2,\
    \ 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmptakf7o3_.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmptakf7o3_.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n    return sum(evens)\nend\n\
    </cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function called subtract that takes two vectors v1 and v2 as arguments\
    \ and returns the vector that is the difference between v1 and v2. \nFor example,\
    \ subtract [4, 2, 6, 7] and [4, 2, 6, 7] should return [2, 4, 0, 0]. \nWrite a\
    \ test that passes when the function subtract returns the correct result. \nWrite\
    \ a test that fails when the function subtract returns the incorrect result. \n\
    using Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) ==\
    \ 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2gdqvepd.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2gdqvepd.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1 : (end-1)]\n\
    \    odds = lst[(end-2):end]\n    return sum(evens) + sum(odds)\nend\n</cell>\n\
    <code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function called subtract that takes two vectors of integers and returns the\
    \ difference between the two vectors.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2,\
    \ 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpku_nu5tj.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpku_nu5tj.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-1)]\n\
    \    odd = lst[(end-1) : (end)]\n    even.+=(odd.*2)\n    return even\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 2 \n</cell>\n\
    <text>\nExercise 3.2\nWrite a function called multiply that multiplies every element\
    \ in a vector by 2.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpox4fjh_u.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpox4fjh_u.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1::2]\n\
    \    odd = lst[1::2]\n    even.+=(odd.+0)/2\n    return even\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 2 \n</cell>\n\
    <text>\nExercise 3\nWrite a function called sub that subtracts the even elements\
    \ that are at odd indices from the even elements that are at even indices.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\
    \t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7])\
    \ == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5epayy9m.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5epayy9m.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1 : (end-1)]\n\
    \    odds = lst[(end-1) : end]\n    evens = filter(x -> x % 2 == 0, evens)\n \
    \   odds = filter(x -> x % 2 == 1, odds)\n    return sum(evens) + sum(odds)\n\
    end\n</cell>\n<text>\nExercise 4\nWrite a function that returns the sum of the\
    \ squares of the even numbers in a given list.\nusing Test\n\n@testset begin\n\
    \ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5,\
    \ 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp72syl2a8.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp72syl2a8.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x\
    \ -> mod(x,2)==0, lst)]\n    return sum(evens)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert add([1]) == 1 \n@assert add([2]) == 2 \n@assert add([3]) == 3 \n@assert\
    \ add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4,\
    \ 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7])\
    \ == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n\
    @assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4,\
    \ 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7])\
    \ == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n\
    @assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4,\
    \ 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7])\
    \ == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n\
    @assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4,\
    \ 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7])\
    \ == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n\
    @assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4,\
    \ 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7])\
    \ == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n\
    @assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4,\
    \ 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7])\
    \ == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, \nusing Test\n\n\
    @testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3a1twko4.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3a1twko4.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1 : (end-1)]\n\
    \    evens = filter(x -> x % 2 == 0, evens)\n    evens = map(x -> x + 1, evens)\n\
    \    return sum(evens)\nend\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6,\
    \ 7])\n</cell>\n<text>\nExercise 2\nGiven a non-empty list of integers lst. add\
    \ the odd elements that are at even indices..\nusing Test\n\n@testset begin\n\n\
    candidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5,\
    \ 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpb2c9wt8s.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpb2c9wt8s.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1::2]\n\
    \    evens = filter(x -> x % 2 == 0, evens)\n    evens = collect(evens)\n    return\
    \ sum(evens)\nend\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n\
    <text>\nExercise 2\nGiven a non-empty list of integers lst. add the odd elements\
    \ that are at even indices..\nusing Test\n\n@testset begin\n\ncandidate = add;\n\
    \t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) ==\
    \ 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8])\
    \ == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1psfvthw.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1psfvthw.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1 : (end-lst)]\n\
    \    evens = filter(x -> x % 2 == 0, evens)\n    evens = map(x -> x + 1, evens)\n\
    \    evens = reduce(+, evens)\n    return evens\nend\n</cell>\n<code language=julia-1.5>\n\
    add([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nGiven a non-empty list of integers\
    \ lst. add the odd elements that are at even indices..\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9mgw_pxo.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9mgw_pxo.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-1)]\n\
    \    odd = lst[2:end]\n    even.+=(odd.*2)\n    return even\nend\n</cell>\n<code\
    \ language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function called subtract that takes two vectors of integers and returns the\
    \ difference of the two vectors.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122])\
    \ == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6,\
    \ 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2bgtvegz.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2bgtvegz.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1::2]\n\
    \    odd = lst[1::2]\n    return sum(even) + sum(odd)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert add(Vector{Int64}([4, 2, 6, 7])) == 10\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the sum of the numbers in the list lst that are\
    \ divisible by 3.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmps33qdi5h.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmps33qdi5h.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1 : (end-1)]\n\
    \    odds = lst[(end-1):end]\n    evens = filter(x -> x % 2 == 0, evens)\n   \
    \ odds = filter(x -> x % 2 != 0, odds)\n    evens = map(x -> x + 2, evens)\n \
    \   odds = map(x -> x - 2, odds)\n    evens = reduce(+, evens)\n    odds = reduce(+,\
    \ odds)\n    return evens + odds\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ add([1]) == 1 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7])\
    \ == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n\
    @assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4,\
    \ 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7])\
    \ == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n\
    @assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4,\
    \ 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7])\
    \ == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n\
    @assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4,\
    \ 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7])\
    \ == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n\
    @assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4,\
    \ 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7])\
    \ == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n\
    @assert add([4, 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([4,\
    \ 2, 6, 7]) == 10 \n@assert add([4, 2, 6, 7]) == 10 \n@assert add([\nusing Test\n\
    \n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpv8gvfnyn.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpv8gvfnyn.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1 : (end-lst)]\n\
    \    odds = lst[(end-lst):end]\n    evens = filter(x -> x % 2 == 0, evens)\n \
    \   odds = filter(x -> x % 2 != 0, odds)\n    return sum(evens) + sum(odds)\n\
    end\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\n\
    Exercise 2\nGiven a non-empty list of integers lst. add the odd elements that\
    \ are at even indices..\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t\
    @test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\
    \t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp06g318ip.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp06g318ip.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-1)]\n\
    \    odd = lst[2:end]\n    return sum(even) + sum(odd)\nend\n</cell>\n<code language=julia-1.5>\n\
    add([4, 2, 6, 7])\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the sum of the even numbers in a given list. \nWrite a function that returns\
    \ the sum of the odd numbers in a given list. \nWrite a function that returns\
    \ the product of the even numbers in a given list. \nWrite a function that returns\
    \ the product of the odd numbers in a given list. \nWrite a function that returns\
    \ the maximum of the even numbers in a given list. \nWrite a function that returns\
    \ the maximum of the odd numbers in a given list. \nWrite a function that returns\
    \ the minimum of the even numbers in a given list. \nWrite a function that returns\
    \ the minimum of the odd numbers in a given list. \nWrite a function that returns\
    \ the sum of the squares of the even numbers in a given list. \nWrite a function\
    \ that returns the sum of the squares of the odd numbers in a given list. \nWrite\
    \ a function that returns the product of the squares of the even numbers in a\
    \ given list. \nWrite a function that returns the product of the squares of the\
    \ odd numbers in a given list. \nWrite a function that returns the maximum of\
    \ the squares of the even numbers in a given list. \nWrite a function that returns\
    \ the maximum of the squares of the odd numbers in a given list. \nWrite a function\
    \ that returns the minimum of the squares of the even numbers in a given list.\
    \ \nWrite a function that returns the minimum of the squares of the odd numbers\
    \ in a given list. \nWrite a function that returns the sum of the cubes of the\
    \ even numbers in a given list. \nWrite a function that returns the sum of the\
    \ cubes of the odd numbers in a given list. \nWrite a function that returns the\
    \ product of the cubes of the even numbers in a given list. \nWrite a function\
    \ that returns the product of the cubes of the odd numbers in a given list. \n\
    Write a function that returns the maximum of the cubes of the even numbers in\
    \ a given list. \nWrite a function that returns the maximum of the cubes of the\
    \ odd numbers in a given list. \nWrite a function that returns the minimum of\
    \ the cubes of the even numbers in a given list. \nWrite a function that returns\
    \ the minimum of the cubes of the odd numbers in a given list. \nWrite a function\
    \ that returns the sum of the squares of the squares of the even numbers in a\
    \ given list. \nWrite a function that returns the sum of the squares of the squares\
    \ of the odd numbers in a given list. \nWrite a function that returns the product\
    \ of the squares of the squares of the even numbers in a given list. \nWrite a\
    \ function that returns the product of the squares of the squares of the odd numbers\
    \ in a given list. \nWrite a function that returns the maximum of the squares\
    \ of the squares of the even numbers in a given list. \nWrite a function that\
    \ returns the maximum of the squares of the squares of the odd numbers in a given\
    \ list. \nWrite a function that returns the minimum of the squares of the squares\
    \ of the even \nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvwx8x33m.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvwx8x33m.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-1)]\n\
    \    odd = lst[2:end]\n    even.+=(odd.+0)/2\n    return even\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 4\n@assert\
    \ add(Vector{Int64}([4, 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4, 2, 6, 7]))\
    \ == 4\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4,\
    \ 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4,\
    \ 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4,\
    \ 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4,\
    \ 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4,\
    \ 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4,\
    \ 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4,\
    \ 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4,\
    \ 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4,\
    \ 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4,\
    \ 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4,\
    \ 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4,\
    \ 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4,\
    \ 2, 6, 7])) == 4\n@assert add(Vector\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2,\
    \ 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1syrpvn3.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1syrpvn3.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1::2]\n\
    \    odd = lst[1::2]\n    even.+=(odd.+0)\n    return even\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 2 \n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the sum of the numbers in a\
    \ given list. \nThe function should work for both vectors and matrices.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\
    \t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7])\
    \ == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6iz3y6ey.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6iz3y6ey.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    return sum(evens)\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the sum of the even numbers in a given list.\n\
    using Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) ==\
    \ 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqfraadlf.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqfraadlf.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    evens = evens[findall(x -> x % 2 != 0, evens)]\n \
    \   evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6khvf8ou.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp6khvf8ou.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp6khvf8ou.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1 : (end-1)]\n\
    \    evens = evens[findall(x -> x % 2 == 0, evens)]\n    evens = sum(evens)\n\
    \    return evens\nend\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n\
    </cell>\n<text>\nExercise 2\nGiven a non-empty list of integers lst. add the odd\
    \ elements that are at even indices..\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2,\
    \ 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_a7ydu64.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_a7ydu64.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1::2]\n\
    \    odd = lst[1::2]\n    even.+=(odd.-even)\n    return even\nend\n</cell>\n\
    <code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the sum of the numbers in a vector. \nIf the vector\
    \ is empty, return 0.\nIf the vector has one element, return that element.\nIf\
    \ the vector has two or more elements, return the sum of the elements in the vector.\n\
    using Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) ==\
    \ 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp71_9ve38.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp71_9ve38.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1 : (end-lst)]\n\
    \    evens = filter(x -> x % 2 == 0, evens)\n    evens = map(x -> x + 1, evens)\n\
    \    return sum(evens)\nend\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6,\
    \ 7])\n</cell>\n<text>\nExercise 2\nGiven a non-empty list of integers lst. add\
    \ the odd elements that are at even indices..\nusing Test\n\n@testset begin\n\n\
    candidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5,\
    \ 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp96ojwyxk.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp96ojwyxk.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    evens = evens[findall(x -> x % 2 != 0, evens)]\n \
    \   evens = evens[2:end]\n    evens = map(add, evens)\n    return sum(evens)\n\
    end\n</cell>\n<code language=julia-1.4>\nadd([4, 2, 6, 7])\n</cell>\n<text>\n\
    Exercise 2\nGiven a non-empty list of integers lst. add the odd elements that\
    \ are at even indices..\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t\
    @test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\
    \t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmptagw1jab.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmptagw1jab.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1::2]\n\
    \    odd = lst[1::2]\n    even.+=(odd.+0)\n    return even\nend\n</cell>\n<code\
    \ language=julia-1.5>\nadd(lst)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a list of integers and returns the sum of the even elements that\
    \ are at odd indices.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmbp_28m5.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmbp_28m5.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n    evens = sum(evens)\n   \
    \ return evens\nend\n</cell>\n<code language=julia-1.5>\nadd(lst)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the sum of the even numbers in a given\
    \ list.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkqojmupv.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpkqojmupv.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-1)]\n\
    \    odd = lst[(end-1) : end]\n    even.+=(odd.+0)\n    return even\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 5\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of integers and returns\
    \ the sum of the even elements in the vector. \nWrite a function that takes a\
    \ vector of integers and returns the sum of the odd elements in the vector. \n\
    Write a function that takes a vector of integers and returns the sum of the even\
    \ and odd elements in the vector. \nWrite a function that takes a vector of integers\
    \ and returns the sum of the even and odd elements in the vector. \nWrite a function\
    \ that takes a vector of integers and returns the sum of the even and odd elements\
    \ in the vector. \nWrite a function that takes a vector of integers and returns\
    \ the sum of the even and odd elements in the vector. \nWrite a function that\
    \ takes a vector of integers and returns the sum of the even and odd elements\
    \ in the vector. \nWrite a function that takes a vector of integers and returns\
    \ the sum of the even and odd elements in the vector. \nWrite a function that\
    \ takes a vector of integers and returns the sum of the even and odd elements\
    \ in the vector. \nWrite a function that takes a vector of integers and returns\
    \ the sum of the even and odd elements in the vector. \nWrite a function that\
    \ takes a vector of integers and returns the sum of the even and odd elements\
    \ in the vector. \nWrite a function that takes a vector of integers and returns\
    \ the sum of the even and odd elements in the vector. \nWrite a function that\
    \ takes a vector of integers and returns the sum of the even and odd elements\
    \ in the vector. \nWrite a function that takes a vector of integers and returns\
    \ the sum of the even and odd elements in the vector. \nWrite a function that\
    \ takes a vector of integers and returns the sum of the even and odd elements\
    \ in the vector. \nWrite a function that takes a vector of integers and returns\
    \ the sum of the even and odd elements in the vector. \nWrite a function that\
    \ takes a vector of integers and returns the sum of the even and odd elements\
    \ in the vector. \nWrite a function that takes a vector of integers and returns\
    \ the sum of the even and odd elements in the vector. \nWrite a function that\
    \ takes a vector of integers and returns the sum of the even and odd elements\
    \ in the vector. \nWrite a function that takes a vector of integers and returns\
    \ the sum of the even and odd elements in the vector. \nWrite a function that\
    \ takes a vector of integers and returns the sum of the even and odd elements\
    \ in the vector. \nWrite a function that takes a vector of integers and returns\
    \ the sum of the even and odd elements in the vector. \nWrite a function that\
    \ takes a vector of integers and returns the sum of the even and odd elements\
    \ in the vector. \nWrite a function that takes a vector of integers and returns\
    \ the sum of the even and odd elements in the vector. \nWrite a function that\
    \ takes a vector of integers and returns the sum of the even and \nusing Test\n\
    \n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdlt03zdt.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdlt03zdt.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-1)]\n\
    \    odd = lst[2:end]\n    even.+=(odd.+0)\n    return even\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 5\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of integers and returns\
    \ the sum of the even elements that are at odd indices.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp60n45b2o.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp60n45b2o.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    evens = evens[findall(x -> x % 2 != 0, evens)]\n \
    \   evens = evens[2:end]\n    evens = sum(evens)\n    return evens\nend\n</cell>\n\
    <code language=julia-1.5>\nadd(lst)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of integers and returns the sum of the even elements that\
    \ are at odd indices.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1awceqsm.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1awceqsm.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    evens = evens[findall(x -> x % 2 != 0, evens)]\n \
    \   evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    evens = evens[2:end]\n    evens = evens[2:end]\n    evens = evens[2:end]\n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpfp6fqgdu.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpfp6fqgdu.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpfp6fqgdu.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1::2]\n\
    \    odd = lst[1::2]\n    even = even.+even\n    odd = odd.+odd\n    return even.+odd\n\
    end\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the sum of the even elements in a given\
    \ list. \nWrite a function that returns the sum of the odd elements in a given\
    \ list.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplujy0mez.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplujy0mez.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1::2]\n\
    \    odds = lst[1::2]\n    evens = filter(x -> x % 2 == 0, evens)\n    odds =\
    \ filter(x -> x % 2 != 0, odds)\n    return sum(evens) + sum(odds)\nend\n</cell>\n\
    <code language=julia-1.5>\nadd(lst)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the sum of the even elements of a given list. \nWrite a function\
    \ that returns the sum of the odd elements of a given list. \nWrite a function\
    \ that returns the product of the even elements of a given list. \nWrite a function\
    \ that returns the product of the odd elements of a given list. \nWrite a function\
    \ that returns the maximum of a given list. \nWrite a function that returns the\
    \ minimum of a given list. \nWrite a function that returns the product of the\
    \ even elements of a given list multiplied by the square of the odd elements of\
    \ a given list. \nWrite a function that returns the product of the odd elements\
    \ of a given list multiplied by the square of the even elements of a given list.\
    \ \nWrite a function that returns the product of the even elements of a given\
    \ list multiplied by the square of the odd elements of a given list multiplied\
    \ by the square of the even elements of a given list. \nWrite a function that\
    \ returns the product of the odd elements of a given list multiplied by the square\
    \ of the even elements of a given list multiplied by the square of the odd elements\
    \ of a given list. \nWrite a function that returns the product of the even elements\
    \ of a given list multiplied by the square of the odd elements of a given list\
    \ multiplied by the square of the even elements of a given list multiplied by\
    \ the square of the odd elements of a given list. \nusing Test\n\n@testset begin\n\
    \ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5,\
    \ 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6owwzt_o.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6owwzt_o.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-1)]\n\
    \    odd = lst[(end-2):end]\n    even.+=(odd.*2)\n    return even\nend\n</cell>\n\
    <code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the sum of the numbers in a given list.\nusing Test\n\
    \n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpyztzh8da.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpyztzh8da.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1 : (end-1)]\n\
    \    odd = lst[2:end]\n    even.+=(odd.*2)\n    return even\nend\n</cell>\n<code\
    \ language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the sum of the numbers in a vector. \nWrite a function\
    \ that returns the sum of the squares of the numbers in a vector. \nWrite a function\
    \ that returns the product of the numbers in a vector. \nWrite a function that\
    \ returns the product of the squares of the numbers in a vector. \nWrite a function\
    \ that returns the maximum of the numbers in a vector. \nWrite a function that\
    \ returns the minimum of the numbers in a vector. \nWrite a function that returns\
    \ the product of the numbers in a vector and squares. \nWrite a function that\
    \ returns the product of the squares of the numbers in a vector and squares. \n\
    Write a function that returns the maximum of the numbers in a vector and squares.\
    \ \nWrite a function that returns the minimum of the numbers in a vector and squares.\
    \ \nWrite a function that returns the product of the numbers in a vector and cubes.\
    \ \nWrite a function that returns the product of the squares of the numbers in\
    \ a vector and cubes. \nWrite a function that returns the maximum of the numbers\
    \ in a vector and cubes. \nWrite a function that returns the minimum of the numbers\
    \ in a vector and cubes. \nWrite a function that returns the product of the numbers\
    \ in a vector and cubes and squares\nWrite a function that returns the product\
    \ of the squares of the numbers in a vector and cubes and squares. \nWrite a function\
    \ that returns the maximum of the numbers in a vector and cubes and squares. \n\
    Write a function that returns the minimum of the numbers in a vector and cubes\
    \ and squares. \nWrite a function that returns the product of the numbers in a\
    \ vector and cubes and cubes. \nWrite a function that returns the product of the\
    \ squares of the numbers in a vector and cubes and cubes. \nWrite a function that\
    \ returns the product of the cubes of the numbers in a vector and cubes and cubes.\
    \ \nWrite a function that returns the product of the cubes of the squares of the\
    \ numbers in a vector and cubes and cubes. \nWrite a function that returns the\
    \ product of the cubes of the cubes of the numbers in a vector and cubes and cubes.\
    \ \nWrite a function that returns the product of the cubes of the cubes of the\
    \ squares of the numbers in a vector and cubes and cubes. \nWrite a function that\
    \ returns the product of the cubes of the cubes of the cubes of the numbers in\
    \ a vector and cubes and cubes. \nWrite a function that returns the product of\
    \ the cubes of the cubes of the cubes of the squares of the numbers in a vector\
    \ and cubes and cubes. \nWrite a function that returns the product of the cubes\
    \ of the cubes of the cubes of the cubes of the numbers in a vector and cubes\
    \ and cubes. \nWrite a function that returns the product of the cubes of the cubes\
    \ of the cubes of the cubes of the numbers in a vector and cubes and cubes. \n\
    Write a function that returns the product of the cubes of the cubes of the cubes\
    \ of the cubes of the \nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpyfb9io71.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpyfb9io71.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1::2]\n\
    \    odd = lst[1::2]\n    even.+=(odd.-even)\n    return even\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 5\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the sum of the numbers in a\
    \ vector. \nThe function should work for both real and complex numbers. \nThe\
    \ function should work for both real and complex numbers. \nThe function should\
    \ work for both real and complex numbers. \nThe function should work for both\
    \ real and complex numbers. \nThe function should work for both real and complex\
    \ numbers. \nThe function should work for both real and complex numbers. \nThe\
    \ function should work for both real and complex numbers. \nThe function should\
    \ work for both real and complex numbers. \nThe function should work for both\
    \ real and complex numbers. \nThe function should work for both real and complex\
    \ numbers. \nThe function should work for both real and complex numbers. \nThe\
    \ function should work for both real and complex numbers. \nThe function should\
    \ work for both real and complex numbers. \nThe function should work for both\
    \ real and complex numbers. \nThe function should work for both real and complex\
    \ numbers. \nThe function should work for both real and complex numbers. \nThe\
    \ function should work for both real and complex numbers. \nThe function should\
    \ work for both real and complex numbers. \nThe function should work for both\
    \ real and complex numbers. \nThe function should work for both real and complex\
    \ numbers. \nThe function should work for both real and complex numbers. \nThe\
    \ function should work for both real and complex numbers. \nThe function should\
    \ work for both real and complex numbers. \nThe function should work for both\
    \ real and complex numbers. \nThe function should work for both real and complex\
    \ numbers. \nThe function should work for both real and complex numbers. \nThe\
    \ function should work for both real and complex numbers. \nThe function should\
    \ work for both real and complex numbers. \nThe function should work for both\
    \ real and complex numbers. \nThe function should work for both real and complex\
    \ numbers. \nThe function should work for both real and complex numbers. \nThe\
    \ function should work for both real and complex numbers. \nThe function should\
    \ work for both real and complex numbers. \nThe function should work for both\
    \ real and complex numbers. \nThe function should work for both real and complex\
    \ numbers. \nThe function should work for both real and complex numbers. \nThe\
    \ function should work for both real and complex numbers. \nThe function should\
    \ work for both real and complex numbers. \nThe function should work for both\
    \ real and complex numbers. \nThe function should work for \nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp13g0opjf.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp13g0opjf.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n    evens = map(add, evens)\n\
    \    return sum(evens)\nend\n</cell>\n<code language=julia-1.3>\nadd([4, 2, 6,\
    \ 7])\n</cell>\n<text>\nExercise 2\nGiven a non-empty list of integers lst. add\
    \ the odd elements that are at even indices..\nusing Test\n\n@testset begin\n\n\
    candidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5,\
    \ 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpewnrtzbj.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpewnrtzbj.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[findall(x\
    \ -> mod(x,2) == 0, lst)]\n    return sum(evens)\nend\n</cell>\n<code language=julia-1.3>\n\
    add([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite a function called sub that\
    \ subtracts the even elements that are at odd indices.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4,\
    \ 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4,\
    \ 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpik66219h.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpik66219h.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1::2]\n\
    \    odd = lst[1::2]\n    return sum(even) + sum(odd)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert add(Vector{Int64}([4, 2, 6, 7])) == 10\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the sum of the even numbers in a given list.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\
    \t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7])\
    \ == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpeshazpxp.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpeshazpxp.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1 : (end-1)]\n\
    \    odds = lst[(end-1) : end]\n    evens = filter(x -> x % 2 == 0, evens)\n \
    \   odds = filter(x -> x % 2 == 1, odds)\n    return sum(evens) + sum(odds)\n\
    end\n</cell>\n<code language=julia-1.4>\n@assert add(Vector{Int64}([4, 2, 6, 7]))\
    \ == 6\n</cell>\n<text>\nExercise 3\nWrite a function that returns the product\
    \ of all the numbers in a vector. For example, prod([4, 2, 6, 7]) == 24.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) == 88)\n\
    \t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4, 0, 6, 7])\
    \ == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzpk_uq_q.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzpk_uq_q.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1::2]\n\
    \    odd = lst[1::2]\n    even.+=(odd.+=0)\n    return even\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 6\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the sum of the even elements\
    \ of an array. \nWrite a function that returns the sum of the even elements of\
    \ an array. \nWrite a function that returns the sum of the even elements of an\
    \ array. \nWrite a function that returns the sum of the even elements of an array.\
    \ \nWrite a function that returns the sum of the even elements of an array. \n\
    Write a function that returns the sum of the even elements of an array. \nWrite\
    \ a function that returns the sum of the even elements of an array. \nWrite a\
    \ function that returns the sum of the even elements of an array. \nWrite a function\
    \ that returns the sum of the even elements of an array. \nWrite a function that\
    \ returns the sum of the even elements of an array. \nWrite a function that returns\
    \ the sum of the even elements of an array. \nWrite a function that returns the\
    \ sum of the even elements of an array. \nWrite a function that returns the sum\
    \ of the even elements of an array. \nWrite a function that returns the sum of\
    \ the even elements of an array. \nWrite a function that returns the sum of the\
    \ even elements of an array. \nWrite a function that returns the sum of the even\
    \ elements of an array. \nWrite a function that returns the sum of the even elements\
    \ of an array. \nWrite a function that returns the sum of the even elements of\
    \ an array. \nWrite a function that returns the sum of the even elements of an\
    \ array. \nWrite a function that returns the sum of the even elements of an array.\
    \ \nWrite a function that returns the sum of the even elements of an array. \n\
    Write a function that returns the sum of the even elements of an array. \nWrite\
    \ a function that returns the sum of the even elements of an array. \nWrite a\
    \ function that returns the sum of the even elements of an array. \nWrite a function\
    \ that returns the sum of the even elements of an array. \nWrite a function that\
    \ returns the sum of the even elements of an array. \nWrite a function that returns\
    \ the sum of the even elements of an array. \nWrite a function that returns the\
    \ sum of the even elements of an array. \nWrite a function that returns the sum\
    \ of the even elements of an array. \nWrite a function that returns the sum of\
    \ the even elements of an array. \nWrite a function that returns the sum of the\
    \ even elements of an array. \nWrite a function that returns the sum of the even\
    \ elements of an array. \nWrite a function that returns the sum of the even elements\
    \ of an array. \nWrite a function that returns the sum of the even elements of\
    \ an array. \nWrite a function that returns the sum of the even elements of an\
    \ array. \nWrite a function that returns the sum of the even elements of an array.\
    \ \nWrite a function that returns the sum of the even elements of an array. \n\
    Write \nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9xophhfq.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9xophhfq.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1 : (end-lst)]\n\
    \    evens = filter(x -> x % 2 == 0, evens)\n    evens = map(x -> x + 1, evens)\n\
    \    evens = map(x -> x + 1, evens)\n    return sum(evens)\nend\n</cell>\n<code\
    \ language=julia-1.4>\nadd(lst)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the product of the even elements of a given list. \nFor example,\
    \ prod([4, 2, 6, 7]) == 24\nusing Test\n\n@testset begin\n\ncandidate = add;\n\
    \t@test(candidate([4, 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) ==\
    \ 122)\n\t@test(candidate([4, 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8])\
    \ == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpi1ztd9tj.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpi1ztd9tj.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1 : (end-lst)]\n\
    \    evens = filter(x -> x % 2 == 0, evens)\n    evens = map(x -> x + 1, evens)\n\
    \    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    return\
    \ sum(evens)\nend\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector v of length n and returns\
    \ a vector where each element is the sum of the elements at odd indices and even\
    \ indices.\nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1k__uy1l.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1k__uy1l.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1 : (end-1)]\n\
    \    odds = lst[2:end]\n    evens = filter(x -> x % 2 == 0, evens)\n    odds =\
    \ filter(x -> x % 2 == 1, odds)\n    return sum(evens) + sum(odds)\nend\n</cell>\n\
    <code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nGiven\
    \ a non-empty list of integers lst. add the odd elements that are at even indices..\n\
    using Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) ==\
    \ 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpelefi1rh.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpelefi1rh.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    even = lst[1::2]\n\
    \    odd = lst[1::2]\n    even.+=(odd.+0)/2\n    return even\nend\n</cell>\n<code\
    \ language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function called sub that subtracts the even elements that are at odd indices.\n\
    using Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88]) ==\
    \ 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp94lqetoo.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp94lqetoo.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n\
    \    \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n    evens = lst[1 : (end-lst)]\n\
    \    evens = filter(x -> x % 2 == 0, evens)\n    return sum(evens)\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 6\n</cell>\n\
    <text>\nExercise 3.3\nWrite a function that returns the sum of the even numbers\
    \ in a given list. \nWrite a function that returns the sum of the even numbers\
    \ in a given vector. \nWrite a function that returns the sum of the even numbers\
    \ in a given matrix. \nWrite a function that returns the sum of the even numbers\
    \ in a given tensor. \nusing Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4,\
    \ 88]) == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
    \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwrjr_79a.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpwrjr_79a.jl:12\n"
  exit_code: 1
  status: Exception
