name: HumanEval_44_change_base
language: julia
results:
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 10\n        throw(ArgumentError(\"\
    base must be between 2 and 10\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x * base)\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that converts a number to a string in base 10.\nThe function\
    \ should throw an error if the number is not positive.\nThe function should throw\
    \ an error if the number is not an integer.\nThe function should throw an error\
    \ if the number is negative.\nThe function should throw an error if the base is\
    \ out of range.\nThe function should throw an error if the base is 2.\nThe function\
    \ should throw an error if the base is 10.\nThe function should throw an error\
    \ if the base is 8.\nThe function should throw an error if the base is 7.\nThe\
    \ function should throw an error if the base is 6.\nThe function should throw\
    \ an error if the base is 5.\nThe function should throw an error if the base is\
    \ 4.\nThe function should throw an error if the base is 3.\nThe function should\
    \ throw an error if the base is 2.\nThe function should throw an error if the\
    \ base is 1.\nThe function should throw an error if the base is 0.\nThe function\
    \ should throw an error if the base is -1.\nThe function should throw an error\
    \ if the base is -10.\nThe function should throw an error if the base is -8.\n\
    The function should throw an error if the base is -7.\nThe function should throw\
    \ an error if the base is -6.\nThe function should throw an error if the base\
    \ is -5.\nThe function should throw an error if the base is -4.\nThe function\
    \ should throw an error if the base is -3.\nThe function should throw an error\
    \ if the base is -2.\nThe function should throw an error if the base is -1.\n\
    The function should throw an error if the base is -0.\nThe function should throw\
    \ an error if the base is -10.\nThe function should throw an error if the base\
    \ is -8.\nThe function should throw an error if the base is -7.\nThe function\
    \ should throw an error if the base is -6.\nThe function should throw an error\
    \ if the base is -5.\nThe function should throw an error if the base is -4.\n\
    The function should throw an error if the base is -3.\nThe function should throw\
    \ an error if the base is -2.\nThe function should throw an error if the base\
    \ is -1.\nThe function should throw an error if the base is -0.\nThe function\
    \ should throw an error if the base is -10.\nThe function should throw an error\
    \ if the base is -8.\nThe function should throw an error if the base is -7.\n\
    The function should throw an error if the base is -6.\nThe function should throw\
    \ an error if the base is -5.\nThe function should throw an error if the base\
    \ is -4.\nThe function should throw an error if the base is -3.\nThe function\
    \ should throw an error if the base \nusing Test\n\n@testset begin\n\ncandidate\
    \ = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3)\
    \ == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg0e3vjrb.jl:19\nin expression starting at\
    \ /tmp/tmpg0e3vjrb.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x/base^base*base)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphyajvgud.jl:19\nin expression starting at\
    \ /tmp/tmphyajvgud.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        error(\"Invalid\
    \ base\")\n    elseif base == 10\n        return toString(x)\n    else\n     \
    \   return toString(x*base^digits(x))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3)\
    \ == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpveyfnf6f.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpveyfnf6f.jl:1\n\
    in expression starting at /tmp/tmpveyfnf6f.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10\n        return string(x)\n    else\n\
    \        return string(x/base)*base\nend\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 3)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that converts a number from one base to another.\nThe input number\
    \ x is represented in base base and output number y is represented in base too.\n\
    The input number x is less than 10^9.\nThe output number y is less than 10^9.\n\
    The input number x is greater than 10^9.\nThe output number y is greater than\
    \ 10^9.\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb1uyslq8.jl:17\nin expression starting at\
    \ /tmp/tmpb1uyslq8.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    \n    if base == 10\n        return toString(x)\n\
    \    \n    if base == 2\n        return toString(x * 2)\n    \n    if base ==\
    \ 3\n        return toString(x * 3)\n    \n    if base == 4\n        return toString(x\
    \ * 4)\n    \n    if base == 5\n        return toString(x * 5)\n    \n    if base\
    \ == 6\n        return toString(x * 6)\n    \n    if base == 7\n        return\
    \ toString(x * 7)\n    \n    if base == 8\n        return toString(x * 8)\n  \
    \  \n    if base == 9\n        return toString(x * 9)\n    \n    if base == 10\n\
    \        return toString(x * 10)\n    \n    if base == 11\n        return toString(x\
    \ * 11)\n    \n    if base == 12\n        return toString(x * 12)\n    \n    if\
    \ base == 13\n        return toString(x * 13)\n    \n    if base == 14\n     \
    \   return toString(x * 14)\n    \n    if base == 15\n        return toString(x\
    \ * 15)\n    \n    if base == 16\n        return toString(x * 16)\n    \n    if\
    \ base == 17\n        return toString(x * 17)\n    \n    if base == 18\n     \
    \   return toString(x * 18)\n    \n    if base == 19\n        return toString(x\
    \ * 19)\n    \n    if base == 20\n        return toString(x * 20)\n    \n    if\
    \ base == 21\n        return toString(x * 21)\n    \n    if base == 22\n     \
    \   return toString(x * 22)\n    \n    if base == 23\n        return toString(x\
    \ * 23)\n    \n    if base == 24\n        return toString(x * 24)\n    \n    if\
    \ base == 25\n        return toString(x * 25)\n    \n    if base == 26\n     \
    \   return toString(x * 26)\n    \n    if base == 27\n        return toString(x\
    \ * 27)\n    \n    if base == 28\n        return toString(x * 28)\n    \n    if\
    \ base == 29\n        return toString(x * 29)\n    \n    if base == 30\n     \
    \   return toString(x * 30)\n    \n    if base == 31\n        return toString(x\
    \ * 31)\n    \n    if base == 32\n        return toString(x * 32)\n    \n    if\
    \ base == 33\n        return toString(x * 33)\n    \n    if base == 34\n     \
    \   return toString(x * 34)\n    \n    if base == 35\n        return toString(x\
    \ * 35)\n    \n    if base == 36\n        return toString(x * 36)\n    \n    if\
    \ base == 37\n        return toString(x * 37)\n\nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsxhszvqf.jl:1\nin expression starting at /tmp/tmpsxhszvqf.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        digits = string(x)\n        digits = digits[2:end]\n      \
    \  digits = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        \nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpmcunlj3i.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmcunlj3i.jl:1\n\
    in expression starting at /tmp/tmpmcunlj3i.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    \n    if base == 2\n        return string(x)\n\
    \    \n    digits = string(x)\n    \n    if base == 10\n        return digits\n\
    \    \n    if base == 36\n        return digits[2:]\n    \n    digits = digits[2:]\n\
    \    \n    if base == 8\n        return digits[2:]\n    \n    digits = digits[2:]\n\
    \    \n    if base == 16\n        return digits[2:]\n    \n    digits = digits[2:]\n\
    \    \n    if base == 32\n        return digits[2:]\n    \n    digits = digits[2:]\n\
    \    \n    if base == 64\n        return digits[2:]\n    \n    digits = digits[2:]\n\
    \    \n    if base == 128\n        return digits[2:]\n    \n    digits = digits[2:]\n\
    \    \n    if base == 256\n        return digits[2:]\n    \n    digits = digits[2:]\n\
    \    \n    if base == 512\n        return digits[2:]\n    \n    digits = digits[2:]\n\
    \    \n    if base == 1024\n        return digits[2:]\n    \n    digits = digits[2:]\n\
    \    \n    if base == 2048\n        return digits[2:]\n    \n    digits = digits[2:]\n\
    \    \n    if base == 4096\n        return digits[2:]\n    \n    digits = digits[2:]\n\
    \    \n    if base == 8192\n        return digits[2:]\n    \n    digits = digits[2:]\n\
    \    \n    if base == 16384\n        return digits[2:]\n    \n    digits = digits[2:]\n\
    \    \n    if base == 32768\n        return digits[2:]\n    \n    digits = digits[2:]\n\
    \    \n    if base == 65536\n        return digits[2:]\n    \n    digits = digits[2:]\n\
    \    \n    if base == 131072\n        return digits[2:]\n    \n    digits = digits[2:]\n\
    \    \n    if base == 262144\n        return digits[2:]\n    \n    digits = digits[2:]\n\
    \    \n    if base == 524288\n        return digits[2:]\n    \n    digits = digits[2:]\n\
    \    \n    if base == 1048576\n        return digits[2:]\n    \n    digits = digits[2:]\n\
    \    \n    if base == 2097152\n        return digits[2:\nusing Test\n\n@testset\
    \ begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9981v10s.jl:24\nin expression\
    \ starting at /tmp/tmp9981v10s.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base == 10 \n        digits = digits(x)\n    \
    \    digits[digits.length-1] = digits[digits.length-1].to_string()\n        digits\
    \ = digits.reverse\n        digits = digits.reverse\n        digits = digits.reverse\n\
    \        digits = digits.reverse\n        digits = digits.reverse\n        digits\
    \ = digits.reverse\n        digits = digits.reverse\n        digits = digits.reverse\n\
    \        digits = digits.reverse\n        digits = digits.reverse\n        digits\
    \ = digits.reverse\n        digits = digits.reverse\n        digits = digits.reverse\n\
    \        digits = digits.reverse\n        digits = digits.reverse\n        digits\
    \ = digits.reverse\n        digits = digits.reverse\n        digits = digits.reverse\n\
    \        digits = digits.reverse\n        digits = digits.reverse\n        digits\
    \ = digits.reverse\n        digits = digits.reverse\n        digits = digits.reverse\n\
    \        digits = digits.reverse\n        digits = digits.reverse\n        digits\
    \ = digits.reverse\n        digits = digits.reverse\n        digits = digits.reverse\n\
    \        digits = digits.reverse\n        digits = digits.reverse\n        digits\
    \ = digits.reverse\n        digits = digits.reverse\n        digits = digits.reverse\n\
    \        digits = digits.reverse\n        digits = digits.reverse\n        digits\
    \ = digits.reverse\n        digits = digits.reverse\n        digits = digits.reverse\n\
    \        digits = digits.reverse\n        digits = digits.reverse\n        digits\
    \ = digits.reverse\n        digits = digits.reverse\n        digits = digits.reverse\n\
    \        digits = digits.reverse\n        digits = digits.reverse\n        digits\
    \ = digits.reverse\n        digits = digits.reverse\n        digits = digits.reverse\n\
    \        digits = digits.reverse\n        digits = digits.reverse\n        digits\
    \ = digits.reverse\n        digits = digits.reverse\n        digits = digits.reverse\n\
    \        digits = digits.reverse\n        digits = digits.reverse\n        digits\
    \ = digits.reverse\n        digits = digits.reverse\n        digits = digits.reverse\n\
    \        digits = digits.reverse\n        digits = digits.reverse\n        digits\
    \ = digits.reverse\n        digits = digits.reverse\n        digits = digits.reverse\n\
    \        digits = digits.reverse\n        digits = digits.reverse\n        digits\
    \ = digits.reverse\n        digits = digits.reverse\n        digits = digits.reverse\n\
    \        digits = digits.reverse\n        digits = digits.reverse\n        digits\
    \ = digits.reverse\n        digits = digits.reverse\n        digits = digits.reverse\n\
    \        digits = digits.reverse\n        digits = digits.reverse\n        digits\
    \ = digits.reverse\n        digits = digits.reverse\n        digits = digits.reverse\n\
    \        digits = digits.reverse\n        digits = digits.reverse\n        digits\
    \ = digits.\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"Test\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpjwni141l.jl:96\nin expression starting at /tmp/tmpjwni141l.jl:96\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    Invalid base\"))\n    elseif base == 10\n        return toString(x)\n    else\n\
    \        return toString(toBase(x, base))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpzbrrshhm.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzbrrshhm.jl:1\n\
    in expression starting at /tmp/tmpzbrrshhm.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 10 \n        error(\"Base must\
    \ be between 2 and 10\")\n    elseif base == 2 \n        return string(x)\n  \
    \  elseif base == 10 \n        return string(x)\n    else\n        return string(x*base)\n\
    end\n</code>\n<|/ a tags=julia,string |>\n<| a tags=julia,string |>\nI wrote a\
    \ package for this: \nhttps://github.com/greghendershott/stringutils\n<code>\n\
    julia> using StringUtils\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp92ks54qg.jl:21\nin expression starting at\
    \ /tmp/tmp92ks54qg.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        error(\"Base must\
    \ be between 2 and 36\")\n    elseif base == 2\n        return string(x)\n   \
    \ elseif base == 36\n        return string(x * 10)\n    else\n        digits =\
    \ digits(x)\n        digits = digits[digits.length - digits.length % base + 1:digits.length]\n\
    \        digits = reverse(digits)\n        digits = digits[digits.length - digits.length\
    \ % base + 1:digits.length]\n        digits = reverse(digits)\n        digits\
    \ = digits[digits.length - digits.length % base + 1:digits.length]\n        digits\
    \ = reverse(digits)\n        digits = digits[digits.length - digits.length % base\
    \ + 1:digits.length]\n        digits = reverse(digits)\n        digits = digits[digits.length\
    \ - digits.length % base + 1:digits.length]\n        digits = reverse(digits)\n\
    \        digits = digits[digits.length - digits.length % base + 1:digits.length]\n\
    \        digits = reverse(digits)\n        digits = digits[digits.length - digits.length\
    \ % base + 1:digits.length]\n        digits = reverse(digits)\n        digits\
    \ = digits[digits.length - digits.length % base + 1:digits.length]\n        digits\
    \ = reverse(digits)\n        digits = digits[digits.length - digits.length % base\
    \ + 1:digits.length]\n        digits = reverse(digits)\n        digits = digits[digits.length\
    \ - digits.length % base + 1:digits.length]\n        digits = reverse(digits)\n\
    \        digits = digits[digits.length - digits.length % base + 1:digits.length]\n\
    \        digits = reverse(digits)\n        digits = digits[digits.length - digits.length\
    \ % base + 1:digits.length]\n        digits = reverse(digits)\n        digits\
    \ = digits[digits.length - digits.length % base + 1:digits.length]\n        digits\
    \ = reverse(digits)\n        digits = digits[digits.length - digits.length % base\
    \ + 1:digits.length]\n        digits = reverse(digits)\n        digits = digits[digits.length\
    \ - digits.length % base + 1:digits.length]\n        digits = reverse(digits)\n\
    \        digits = digits[digits.length - digits.length % base + 1:digits.length]\n\
    \        digits = reverse(digits)\n        digits = digits[digits.length - digits.length\
    \ % base + 1:digits.length]\n        digits = reverse(digits)\n        digits\
    \ = digits[digits.length - digits.length % base + 1:digits.length]\n        digits\
    \ = reverse(digits)\n        digits = digits[digits.length - digits.length % base\
    \ + \nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_xybdj0t.jl:1\nin expression starting at /tmp/tmp_xybdj0t.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        digits = string(x%base)\n        digits = digits[2:end]\n \
    \       digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t\
    @test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpw35c87hf.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpw35c87hf.jl:1\n\
    in expression starting at /tmp/tmpw35c87hf.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base == 10 \n        digits = \"0123456789\"\n\
    \    else \n        digits = \"0123456789abcdefghijklmnopqrstuvwxyz\"\n    digits\
    \ = digits[base:end]\n    return digits[x]\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp516z3va0.jl:19\nin expression starting at\
    \ /tmp/tmp516z3va0.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10 \n        error(\"base must be greater\
    \ than or equal to 10\")\n    else if base == 10 \n        return toString(x)\n\
    \    else \n        return toString(changeBase(x, base))\nend\n</cell>\n<code\
    \ language=julia-1.4>\nchange_base(8, 3)\n</cell>\n<text>\nExercise\nWrite a function\
    \ that converts a number from base 10 to base 16. \nThe function should take two\
    \ arguments: the first is the number to be converted, and the second is the base\
    \ of the number to be converted.\nThe function should return a string representation\
    \ of the number in base 16.\nThe function should raise an error if the base is\
    \ not 10 or 16.\nThe function should raise an error if the number is negative.\n\
    The function should raise an error if the number is zero.\nThe function should\
    \ raise an error if the number is too large.\nThe function should raise an error\
    \ if the number is too small.\nThe function should raise an error if the number\
    \ is too large.\nThe function should raise an error if the number is too small.\n\
    The function should raise an error if the number is too large.\nThe function should\
    \ raise an error if the number is too small.\nThe function should raise an error\
    \ if the number is too large.\nThe function should raise an error if the number\
    \ is too small.\nThe function should raise an error if the number is too large.\n\
    The function should raise an error if the number is too small.\nThe function should\
    \ raise an error if the number is too large.\nThe function should raise an error\
    \ if the number is too small.\nThe function should raise an error if the number\
    \ is too large.\nThe function should raise an error if the number is too small.\n\
    The function should raise an error if the number is too large.\nThe function should\
    \ raise an error if the number is too small.\nThe function should raise an error\
    \ if the number is too large.\nThe function should raise an error if the number\
    \ is too small.\nThe function should raise an error if the number is too large.\n\
    The function should raise an error if the number is too small.\nThe function should\
    \ raise an error if the number is too large.\nThe function should raise an error\
    \ if the number is too small.\nThe function should raise an error if the number\
    \ is too large.\nThe function should raise an error if the number is too small.\n\
    The function should raise an error if the number is too large.\nThe function should\
    \ raise an error if the number is too small.\nThe function should raise an error\
    \ if the number is too large.\nThe function should raise an error if the number\
    \ is too small.\nThe function should raise an error if the number is too large.\n\
    The function should raise an error if the number is too small.\nThe function should\
    \ raise an error if the number is too large.\nThe function should raise an error\
    \ if the number is too small.\nThe function should raise an error if the number\
    \ is too large.\nThe function should raise an error if the number is \nusing Test\n\
    \n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\"\
    )\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\"\
    )\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\"\
    )\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t\
    @test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5,\
    \ 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) ==\
    \ \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd6dyq_jc.jl:14\nin expression starting at\
    \ /tmp/tmpd6dyq_jc.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    elseif base == 10\n        return string(x*10)\n    else\n        digits\
    \ = string(x)\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpalow0zj4.jl:1\nin expression starting at /tmp/tmpalow0zj4.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    Base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x * base^2)\nend\n</cell>\n<text>\nExercise 2\n\
    Write a function that converts a number to a string in base 10. Your function\
    \ should throw an error if the base is invalid.\nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb3tt8zuz.jl:19\nin expression starting at\
    \ /tmp/tmpb3tt8zuz.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 10\n        throw(ArgumentError(\"\
    base must be between 2 and 10\"))\n    else if base == 2\n        return string(x)\n\
    \    else\n        digits = string(x)\n        digits = digits[2:end]\n      \
    \  digits = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpppo40v1a.jl:14\nin expression starting at\
    \ /tmp/tmpppo40v1a.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        error(\"Base must\
    \ be between 2 and 36\")\n    end\n    if base == 2\n        return string(x)\n\
    \    elseif base == 3\n        return string(x * 1000 + 100)\n    elseif base\
    \ == 4\n        return string(x * 10000 + 1000)\n    elseif base == 5\n      \
    \  return string(x * 100000 + 10000)\n    elseif base == 6\n        return string(x\
    \ * 1000000 + 100000)\n    elseif base == 7\n        return string(x * 10000000\
    \ + 1000000)\n    elseif base == 8\n        return string(x * 100000000 + 10000000)\n\
    \    elseif base == 9\n        return string(x * 1000000000 + 100000000)\n   \
    \ elseif base == 10\n        return string(x * 10000000000 + 1000000000)\n   \
    \ elseif base == 11\n        return string(x * 100000000000 + 10000000000)\n \
    \   elseif base == 12\n        return string(x * 1000000000000 + 100000000000)\n\
    \    elseif base == 13\n        return string(x * 10000000000000 + 10000000000000)\n\
    \    elseif base == 14\n        return string(x * 100000000000000 + 100000000000000)\n\
    \    elseif base == 15\n        return string(x * 1000000000000000 + 1000000000000000)\n\
    \    elseif base == 16\n        return string(x * 10000000000000000 + 10000000000000000)\n\
    \    elseif base == 17\n        return string(x * 100000000000000000 + 100000000000000000)\n\
    \    elseif base == 18\n        return string(x * 1000000000000000000 + 100000000000000000)\n\
    \    elseif base == 19\n        return string(x * 10000000000000000000 + 10000000000000000)\n\
    \    elseif base == 20\n        return string(x * 100000000000000000000 + 100000000000000000)\n\
    \    elseif base == 21\n        return string(x * 1000000000000000000000 + 10000000000000000)\n\
    \    elseif base == 22\n        return string(x * 10000000000000000000000 + 100000000000000000)\n\
    \    elseif base == 23\n        return string(x * 100000000000000000000000 + 10000000000000000)\n\
    \    elseif base == 24\n        return string(x * 1000000000000000000000000 +\
    \ 100000000000000000)\n    elseif base == 25\n        return string(x * 10000000000000000000000000\
    \ + 10000000000000000)\n    elseif base == 26\n        return string(x * 100000000000000000000000000\
    \ + 100000000000000000)\n    elseif base == 27\n        return string(x * 1000000000000000000000000000\
    \ + 10000000000000000)\n    elseif base == 28\n        return string(x * 10000000000000000000000000000\
    \ + 100000000000000000)\n    elseif base == 29\n        return string(x * 100000000000000000000000000000\
    \ + 10000000000000000)\n    elseif \nusing Test\n\n@testset begin\n\ncandidate\
    \ = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3)\
    \ == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing condition in \"elseif\" at /tmp/tmp5gf9jqnm.jl:71\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmp5gf9jqnm.jl:72\nin expression\
    \ starting at /tmp/tmp5gf9jqnm.jl:72\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base == 10 \n        return toString(x)\n    else\
    \ \n        return toString(change_base(x / base, base * base))\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_s5fknr3.jl:17\nin expression starting at\
    \ /tmp/tmp_s5fknr3.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 10 \n        error(\"Invalid\
    \ base\")\n    else \n        if base == 10 \n            return toString(x)\n\
    \        else \n            digits = toString(x)\n            digits = digits[digits.length\
    \ - digits.length % base]\n            digits = digits[0 : digits.length - digits.length\
    \ % base]\n            digits = digits * base\n            return toString(digits)\n\
    end\n</cell>\n<code language=julia-1.4>\nchange_base(8, 3)\n</cell>\n<code language=julia-1.4>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.4>\nchange_base(7, 2)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that converts binary numbers to decimal.\n\
    The input is a string that consists of 0s and 1s.\nThe output is the decimal number\
    \ represented by the string.\nThe function should raise an error if the input\
    \ string is not valid.\nThe function should raise an error if the input string\
    \ contains invalid characters.\nThe function should raise an error if the input\
    \ string contains invalid characters.\nThe function should raise an error if the\
    \ input string contains invalid characters.\nThe function should raise an error\
    \ if the input string contains invalid characters.\nThe function should raise\
    \ an error if the input string contains invalid characters.\nThe function should\
    \ raise an error if the input string contains invalid characters.\nThe function\
    \ should raise an error if the input string contains invalid characters.\nThe\
    \ function should raise an error if the input string contains invalid characters.\n\
    The function should raise an error if the input string contains invalid characters.\n\
    The function should raise an error if the input string contains invalid characters.\n\
    The function should raise an error if the input string contains invalid characters.\n\
    The function should raise an error if the input string contains invalid characters.\n\
    The function should raise an error if the input string contains invalid characters.\n\
    The function should raise an error if the input string contains invalid characters.\n\
    The function should raise an error if the input string contains invalid characters.\n\
    The function should raise an error if the input string contains invalid characters.\n\
    The function should raise an error if the input string contains invalid characters.\n\
    The function should raise an error if the input string contains invalid characters.\n\
    The function should raise an error if the input string contains invalid characters.\n\
    The function should raise an error if the input string contains invalid characters.\n\
    The function should raise an error if the input string contains invalid characters.\n\
    The function should raise an error if the input string contains invalid characters.\n\
    The function should raise an error if the input string contains invalid characters.\n\
    The function should raise an error if the input string contains invalid characters.\n\
    The function should raise an error if the input string contains invalid characters.\n\
    The function should raise an error if the input string contains invalid characters.\n\
    The function should raise an error if the input string contains invalid characters.\n\
    The function should raise an error if the input string contains invalid characters.\n\
    \nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqzkiy78f.jl:24\nin expression starting at\
    \ /tmp/tmpqzkiy78f.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base == 10 \n        digits = digits(x)\n    \
    \    digits = digits[2:end]\n        digits = digits[digits[1] == 1]\n       \
    \ digits = digits[digits[2] == 1]\n        digits = digits[digits[3] == 1]\n \
    \       digits = digits[digits[4] == 1]\n        digits = digits[digits[5] ==\
    \ 1]\n        digits = digits[digits[6] == 1]\n        digits = digits[digits[7]\
    \ == 1]\n        digits = digits[digits[8] == 1]\n        digits = digits[digits[9]\
    \ == 1]\n        return join(digits)\n    else \n        digits = digits(x)\n\
    \        digits = digits[2:end]\n        digits = digits[digits[1] == 1]\n   \
    \     digits = digits[digits[2] == 1]\n        digits = digits[digits[3] == 1]\n\
    \        digits = digits[digits[4] == 1]\n        digits = digits[digits[5] ==\
    \ 1]\n        digits = digits[digits[6] == 1]\n        digits = digits[digits[7]\
    \ == 1]\n        digits = digits[digits[8] == 1]\n        digits = digits[digits[9]\
    \ == 1]\n        digits = digits[digits[10] == 1]\n        digits = digits[digits[11]\
    \ == 1]\n        digits = digits[digits[12] == 1]\n        digits = digits[digits[13]\
    \ == 1]\n        digits = digits[digits[14] == 1]\n        digits = digits[digits[15]\
    \ == 1]\n        digits = digits[digits[16] == 1]\n        digits = digits[digits[17]\
    \ == 1]\n        digits = digits[digits[18] == 1]\n        digits = digits[digits[19]\
    \ == 1]\n        digits = digits[digits[20] == 1]\n        digits = digits[digits[21]\
    \ == 1]\n        digits = digits[digits[22] == 1]\n        digits = digits[digits[23]\
    \ == 1]\n        digits = digits[digits[24] == 1]\n        digits = digits[digits[25]\
    \ == 1]\n        digits = digits[digits[26] == 1]\n        digits = digits[digits[27]\
    \ == 1]\n        digits = digits[digits[28] == 1]\n        digits = digits[digits[29]\
    \ == 1]\n        digits = digits[digits[30] == 1]\n        digits = digits[digits[31]\
    \ == 1]\n        digits = digits[digits[32] == 1]\n        digits = digits[digits[33]\
    \ == 1]\n        digits = digits[digits[34] == 1]\n        \nusing Test\n\n@testset\
    \ begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmp6znc_99_.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6znc_99_.jl:1\n\
    in expression starting at /tmp/tmp6znc_99_.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base == 10 \n        digits = \"0123456789\"\n\
    \    else \n        digits = \"0123456789abcdefghijklmnopqrstuvwxyz\"\n    return\
    \ digits[base-1] + digits[x % base]\nend\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 3)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that converts a number from base 10 to base 16. \nThe function should\
    \ take two arguments: \na number x and a base b. \nThe function should return\
    \ a string representing the number in base b. \nThe function should return an\
    \ error if b is not a base 2 number.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3)\
    \ == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9c3gmfyx.jl:18\nin expression starting at\
    \ /tmp/tmp9c3gmfyx.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    \n    if base == 2\n        return str((x\
    \ % 10) + 1)\n    \n    digits = digits(x)\n    digits = digits[2:end]\n    \n\
    \    digits = digits[digits.length - base:end]\n    \n    digits = digits[digits.length\
    \ - base:end]\n    \n    digits = digits[digits.length - base:end]\n    \n   \
    \ digits = digits[digits.length - base:end]\n    \n    digits = digits[digits.length\
    \ - base:end]\n    \n    digits = digits[digits.length - base:end]\n    \n   \
    \ digits = digits[digits.length - base:end]\n    \n    digits = digits[digits.length\
    \ - base:end]\n    \n    digits = digits[digits.length - base:end]\n    \n   \
    \ digits = digits[digits.length - base:end]\n    \n    digits = digits[digits.length\
    \ - base:end]\n    \n    digits = digits[digits.length - base:end]\n    \n   \
    \ digits = digits[digits.length - base:end]\n    \n    digits = digits[digits.length\
    \ - base:end]\n    \n    digits = digits[digits.length - base:end]\n    \n   \
    \ digits = digits[digits.length - base:end]\n    \n    digits = digits[digits.length\
    \ - base:end]\n    \n    digits = digits[digits.length - base:end]\n    \n   \
    \ digits = digits[digits.length - base:end]\n    \n    digits = digits[digits.length\
    \ - base:end]\n    \n    digits = digits[digits.length - base:end]\n    \n   \
    \ digits = digits[digits.length - base:end]\n    \n    digits = digits[digits.length\
    \ - base:end]\n    \n    digits = digits[digits.length - base:end]\n    \n   \
    \ digits = digits[digits.length - base:end]\n    \n    digits = digits[digits.length\
    \ - base:end]\n    \n    digits = digits[digits.length - base:end]\n    \n   \
    \ digits = digits[digits.length - base:end]\n    \n    digits = digits[digits.length\
    \ - base:end]\n    \n    digits = digits[digits.length - base:end]\n    \n   \
    \ digits = digits[digits.length - base:end]\n    \n    digits = digits[digits.length\
    \ - base:end]\n    \n    digits = digits[digits.length - \nusing Test\n\n@testset\
    \ begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp756u489k.jl:1\nin expression starting at /tmp/tmp756u489k.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10\n        return str(x)\n    else\n \
    \       return change_base(x / base, base) + str(x % base)\nend\n</code>\n<|/\
    \ a tags=julia,string |>\n<| a tags=julia,string |>\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaf735czw.jl:17\nin expression starting at\
    \ /tmp/tmpaf735czw.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        error(\"Invalid\
    \ base\")\n    elseif base == 10\n        return toString(x)\n    else\n     \
    \   digits = digits(x)\n        digits = digits[digits.length - base]\n      \
    \  digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[\nusing Test\n\n@testset begin\n\ncandidate\
    \ = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3)\
    \ == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuuol5giy.jl:1\nin expression starting at /tmp/tmpuuol5giy.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x * base^digits(x))\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5vc8qdjl.jl:19\nin expression starting at\
    \ /tmp/tmp5vc8qdjl.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base == 10 \n        digits = digits(x)\n    \
    \    return digits[digits.length-1]\n    digits = digits(x)\n    digits = digits[digits.length-1]\n\
    \    digits = digits[digits.length-1]\n    digits = digits[digits.length-1]\n\
    \    digits = digits[digits.length-1]\n    digits = digits[digits.length-1]\n\
    \    digits = digits[digits.length-1]\n    digits = digits[digits.length-1]\n\
    \    digits = digits[digits.length-1]\n    digits = digits[digits.length-1]\n\
    \    digits = digits[digits.length-1]\n    digits = digits[digits.length-1]\n\
    \    digits = digits[digits.length-1]\n    digits = digits[digits.length-1]\n\
    \    digits = digits[digits.length-1]\n    digits = digits[digits.length-1]\n\
    \    digits = digits[digits.length-1]\n    digits = digits[digits.length-1]\n\
    \    digits = digits[digits.length-1]\n    digits = digits[digits.length-1]\n\
    \    digits = digits[digits.length-1]\n    digits = digits[digits.length-1]\n\
    \    digits = digits[digits.length-1]\n    digits = digits[digits.length-1]\n\
    \    digits = digits[digits.length-1]\n    digits = digits[digits.length-1]\n\
    \    digits = digits[digits.length-1]\n    digits = digits[digits.length-1]\n\
    \    digits = digits[digits.length-1]\n    digits = digits[digits.length-1]\n\
    \    digits = digits[digits.length-1]\n    digits = digits[digits.length-1]\n\
    \    digits = digits[digits.length-1]\n    digits = digits[digits.length-1]\n\
    \    digits = digits[digits.length-1]\n    digits = digits[digits.length-1]\n\
    \    digits = digits[digits.length-1]\n    digits = digits[digits.length-1]\n\
    \    digits = digits[digits.length-1]\n    digits = digits[digits.length-1]\n\
    \    digits = digits[digits.length-1]\n    digits = digits[digits.length-1]\n\
    \    digits = digits[digits.length-1]\n    digits = digits[digits.length-1]\n\
    \    digits = digits[digits.length-1]\n    digits = digits[digits.length-1]\n\
    \    digits = digits[digits.length-1]\n    digits = digits[digits.length-1]\n\
    \    digits = digits[digits.length-1]\n    digits = digits[digits.length-1]\n\
    \    digits = digits[digits.length-1]\n    digits = digits[digits.length-1]\n\
    \    digits = digits[digits.length-1]\n    digits = digits[digits.length-1]\n\
    \    digits = digits[digits.length-1]\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3)\
    \ == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx25i3w8a.jl:1\nin expression starting at /tmp/tmpx25i3w8a.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base == 10 \n        digits = \"0123456789\"\n\
    \    else \n        digits = \"0123456789abcdefghijklmnopqrstuvwxyz\"\n    digits\
    \ = digits[base]\n    return digits[x % base]\nend\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 3)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n<text>\nExercise: Write\
    \ a function that converts binary numbers to decimal numbers. \nThe function should\
    \ take two arguments: a string of binary digits and an integer base. \nThe function\
    \ should return the decimal number represented by the binary number. \nThe function\
    \ should raise an error if the base is less than 2 or greater than 36. \nThe function\
    \ should raise an error if the string contains non-binary digits. \nThe function\
    \ should raise an error if the string contains more than 10 binary digits. \n\
    The function should raise an error if the string contains more than 10 decimal\
    \ digits. \nThe function should raise an error if the string contains more than\
    \ 10 binary digits. \nThe function should raise an error if the string contains\
    \ more than 10 decimal digits. \nThe function should raise an error if the string\
    \ contains more than 10 binary digits. \nThe function should raise an error if\
    \ the string contains more than 10 decimal digits. \nThe function should raise\
    \ an error if the string contains more than 10 binary digits. \nThe function should\
    \ raise an error if the string contains more than 10 decimal digits. \nThe function\
    \ should raise an error if the string contains more than 10 binary digits. \n\
    The function should raise an error if the string contains more than 10 decimal\
    \ digits. \nThe function should raise an error if the string contains more than\
    \ 10 binary digits. \nThe function should raise an error if the string contains\
    \ more than 10 decimal digits. \nThe function should raise an error if the string\
    \ contains more than 10 binary digits. \nThe function should raise an error if\
    \ the string contains more than 10 decimal digits. \nThe function should raise\
    \ an error if the string contains more than 10 binary digits. \nThe function should\
    \ raise an error if the string contains more than 10 decimal digits. \nThe function\
    \ should raise an error if the string contains more than 10 binary digits. \n\
    The function should raise an error if the string contains more than 10 decimal\
    \ digits. \nThe function should raise an error if the string contains more than\
    \ 10 binary digits. \nThe function should raise an error if the string contains\
    \ more than 10 decimal digits. \nThe function should raise an error if the string\
    \ contains more than 10 binary digits. \nThe function should raise an error if\
    \ the string contains more than 10 decimal digits. \nThe function should raise\
    \ an error if the string contains more than 10 binary digits. \nThe function should\
    \ raise an error if the string contains more than 10 decimal digits. \nThe function\
    \ should raise an error if the \nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8rnya88n.jl:19\nin expression starting at\
    \ /tmp/tmp8rnya88n.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    elseif base == 36\n        return string(x * 10)\n    else\n        return\
    \ string(x * pow(base, floor(log10(abs(x))))) \nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6yz75xx7.jl:21\nin expression starting at\
    \ /tmp/tmp6yz75xx7.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10\n        return str((x % base) + base)\n\
    \    else\n        return str((x % base) / base)\nend\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 3)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that converts a number from base 10 to base 16 (hexadecimal).\nThe\
    \ function should take two positional arguments: the first is the number to be\
    \ converted, and the second is the base of the number.\nThe function should return\
    \ a string containing the hexadecimal representation of the number.\nThe function\
    \ should raise an error if the base is not 10 or 16.\nThe function should raise\
    \ an error if the number is negative.\nThe function should raise an error if the\
    \ number is too big.\nThe function should raise an error if the number is too\
    \ small.\nThe function should raise an error if the number is too close to 0.\n\
    The function should raise an error if the number is too close to 1.\nThe function\
    \ should raise an error if the number is too close to 2.\nThe function should\
    \ raise an error if the number is too close to 3.\nThe function should raise an\
    \ error if the number is too close to 4.\nThe function should raise an error if\
    \ the number is too close to 5.\nThe function should raise an error if the number\
    \ is too close to 6.\nThe function should raise an error if the number is too\
    \ close to 7.\nThe function should raise an error if the number is too close to\
    \ 8.\nThe function should raise an error if the number is too close to 9.\nThe\
    \ function should raise an error if the number is too close to 10.\nThe function\
    \ should raise an error if the number is too close to 11.\nThe function should\
    \ raise an error if the number is too close to 12.\nThe function should raise\
    \ an error if the number is too close to 13.\nThe function should raise an error\
    \ if the number is too close to 14.\nThe function should raise an error if the\
    \ number is too close to 15.\nThe function should raise an error if the number\
    \ is too close to 16.\nThe function should raise an error if the number is too\
    \ close to 17.\nThe function should raise an error if the number is too close\
    \ to 18.\nThe function should raise an error if the number is too close to 19.\n\
    The function should raise an error if the number is too close to 20.\nThe function\
    \ should raise an error if the number is too close to 21.\nThe function should\
    \ raise an error if the number is too close to 22.\nThe function should raise\
    \ an error if the number is too close to 23.\nThe function should raise an error\
    \ if the number is too close to 24.\nThe function should raise an error if the\
    \ number is too close to 25.\nThe function should raise an error if the number\
    \ is too close to 26.\nThe function should raise an error if the number is too\
    \ close to 27.\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqf6eisjg.jl:17\nin expression starting at\
    \ /tmp/tmpqf6eisjg.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base == 10 \n        then return toString(x)\n\
    \    else if base == 2 \n        then return toString(x * 10)\n    else if base\
    \ == 3 \n        then return toString(x * 100)\n    else if base == 4 \n     \
    \   then return toString(x * 1000)\n    else if base == 5 \n        then return\
    \ toString(x * 10000)\n    else if base == 6 \n        then return toString(x\
    \ * 100000)\n    else if base == 7 \n        then return toString(x * 1000000)\n\
    \    else if base == 8 \n        then return toString(x * 10000000)\n    else\
    \ if base == 9 \n        then return toString(x * 100000000)\n    else return\
    \ \"Invalid base\"\nend\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\"\
    )\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\"\
    )\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\"\
    )\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t\
    @test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5,\
    \ 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) ==\
    \ \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpuvbvqls1.jl:13\nin expression starting at /tmp/tmpuvbvqls1.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10\n        error(\"Base must be less than\
    \ 10\")\n    elseif base > 36\n        error(\"Base must be less than 36\")\n\
    \    elseif base == 10\n        return string(x)\n    else\n        return string(x/base^base)\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3)\
    \ == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvw338uba.jl:21\nin expression starting at\
    \ /tmp/tmpvw338uba.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x*base)\nend\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzcqxzvx6.jl:19\nin expression starting at\
    \ /tmp/tmpzcqxzvx6.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        error(\"Invalid\
    \ base\")\n    end\n    \n    if base == 10\n        return string(x)\n    end\n\
    \    \n    digits = string(x)\n    digits = digits[2:end]\n    \n    if base ==\
    \ 2\n        digits = digits[2:end]\n    end\n    \n    if base == 3\n       \
    \ digits = digits[2:end]\n    end\n    \n    if base == 4\n        digits = digits[2:end]\n\
    \    end\n    \n    if base == 5\n        digits = digits[2:end]\n    end\n  \
    \  \n    if base == 6\n        digits = digits[2:end]\n    end\n    \n    if base\
    \ == 7\n        digits = digits[2:end]\n    end\n    \n    if base == 8\n    \
    \    digits = digits[2:end]\n    end\n    \n    if base == 9\n        digits =\
    \ digits[2:end]\n    end\n    \n    if base == 10\n        digits = digits[2:end]\n\
    \    end\n    \n    if base == 11\n        digits = digits[2:end]\n    end\n \
    \   \n    if base == 12\n        digits = digits[2:end]\n    end\n    \n    if\
    \ base == 13\n        digits = digits[2:end]\n    end\n    \n    if base == 14\n\
    \        digits = digits[2:end]\n    end\n    \n    if base == 15\n        digits\
    \ = digits[2:end]\n    end\n    \n    if base == 16\n        digits = digits[2:end]\n\
    \    end\n    \n    if base == 17\n        digits = digits[2:end]\n    end\n \
    \   \n    if base == 18\n        digits = digits[2:end]\n    end\n    \n    if\
    \ base == 19\n        digits = digits[2:end]\n    end\n    \n    if base == 20\n\
    \        digits = digits[2:end]\n    end\n    \n    if base == 21\n        digits\
    \ = digits[2:end]\n    end\n    \n    if base == 22\n        digits = digits[2:end]\n\
    \    end\n    \n    if base == 23\n        digits = digits[2:end]\n    end\n \
    \   \n    if base == 24\n        digits = digits[2:end]\n    end\n    \n    if\
    \ base == 25\n        digits = digits[2:end]\n    end\n    \n    if base == 26\n\
    \        digits = digits[2:end]\n    end\n    \n    if base == 27\n        digits\
    \ = digits[2:end]\n    end\n    \n    if base == 28\n        digits = digits[2:end]\n\
    \    end\n    \n    if base == 29\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3)\
    \ == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn3en98nn.jl:1\nin expression starting at /tmp/tmpn3en98nn.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        error(\"Base must\
    \ be between 2 and 36.\")\n    elseif base == 2\n        return string(x)\n  \
    \  elseif base == 36\n        return string(x * 10)\n    else\n        return\
    \ string(x * pow(base, floor(log10(abs(x))))) \nend\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 3)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that converts a string to a number.\nThe function should accept a\
    \ string and return the number it represents.\nThe function should raise an error\
    \ if the string cannot be converted to a number.\nThe function should accept a\
    \ number as input and return the string representation of that number.\nThe function\
    \ should raise an error if the input is not a number.\nThe function should accept\
    \ a number as input and return the string representation of that number.\nThe\
    \ function should raise an error if the input is not a number.\nThe function should\
    \ accept a number as input and return the string representation of that number.\n\
    The function should raise an error if the input is not a number.\nThe function\
    \ should accept a number as input and return the string representation of that\
    \ number.\nThe function should raise an error if the input is not a number.\n\
    The function should accept a number as input and return the string representation\
    \ of that number.\nThe function should raise an error if the input is not a number.\n\
    The function should accept a number as input and return the string representation\
    \ of that number.\nThe function should raise an error if the input is not a number.\n\
    The function should accept a number as input and return the string representation\
    \ of that number.\nThe function should raise an error if the input is not a number.\n\
    The function should accept a number as input and return the string representation\
    \ of that number.\nThe function should raise an error if the input is not a number.\n\
    The function should accept a number as input and return the string representation\
    \ of that number.\nThe function should raise an error if the input is not a number.\n\
    The function should accept a number as input and return the string representation\
    \ of that number.\nThe function should raise an error if the input is not a number.\n\
    The function should accept a number as input and return the string representation\
    \ of that number.\nThe function should raise an error if the input is not a number.\n\
    The function should accept a number as input and return the string representation\
    \ of that number.\nThe function should raise an error if the input is not a number.\n\
    The function should accept a number as input and return the string representation\
    \ of that number.\nThe function should raise an error if the input is not a number.\n\
    The function should accept a number as input and return the string representation\
    \ of that number.\nThe function should raise an error if the input is not a number.\n\
    The function should accept a number as input and return the string representation\
    \ of that number.\nThe function should raise an error if the input is not a number.\n\
    The function should accept a number \nusing Test\n\n@testset begin\n\ncandidate\
    \ = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3)\
    \ == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1cq82uxl.jl:21\nin expression starting at\
    \ /tmp/tmp1cq82uxl.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    elseif base == 10\n        return string(x * 10)\n    else\n        return\
    \ string(x * 10^floor(log10(base))) + change_base(floor(x/base), base-1)\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3)\
    \ == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv023xbpt.jl:21\nin expression starting at\
    \ /tmp/tmpv023xbpt.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x, base)\nend\n</cell>\n<text>\nExercise 4\n\
    Write a function that converts a number to a string in base 10.\nThe function\
    \ should throw an error if the number is not positive.\nThe function should throw\
    \ an error if the number is not an integer.\nThe function should throw an error\
    \ if the base is not between 2 and 36.\nThe function should throw an error if\
    \ the base is 2.\nThe function should throw an error if the base is 3.\nThe function\
    \ should throw an error if the base is 4.\nThe function should throw an error\
    \ if the base is 5.\nThe function should throw an error if the base is 6.\nThe\
    \ function should throw an error if the base is 7.\nThe function should throw\
    \ an error if the base is 8.\nThe function should throw an error if the base is\
    \ 9.\nThe function should throw an error if the base is 10.\nThe function should\
    \ throw an error if the base is 11.\nThe function should throw an error if the\
    \ base is 12.\nThe function should throw an error if the base is 13.\nThe function\
    \ should throw an error if the base is 14.\nThe function should throw an error\
    \ if the base is 15.\nThe function should throw an error if the base is 16.\n\
    The function should throw an error if the base is 17.\nThe function should throw\
    \ an error if the base is 18.\nThe function should throw an error if the base\
    \ is 19.\nThe function should throw an error if the base is 20.\nThe function\
    \ should throw an error if the base is 21.\nThe function should throw an error\
    \ if the base is 22.\nThe function should throw an error if the base is 23.\n\
    The function should throw an error if the base is 24.\nThe function should throw\
    \ an error if the base is 25.\nThe function should throw an error if the base\
    \ is 26.\nThe function should throw an error if the base is 27.\nThe function\
    \ should throw an error if the base is 28.\nThe function should throw an error\
    \ if the base is 29.\nThe function should throw an error if the base is 30.\n\
    The function should throw an error if the base is 31.\nThe function should throw\
    \ an error if the base is 32.\nThe function should throw an error if the base\
    \ is 33.\nThe function should throw an error if the base is 34.\nThe function\
    \ should throw an error if the base is 35.\nThe function should throw an error\
    \ if the base is 36.\nThe function should throw an error if the base is 37.\n\
    The function should throw an error if the base is 38.\nThe function should throw\
    \ an error if the base is 39.\nThe function should throw an error if the base\
    \ is 40.\nThe function should throw an error if the base is 41.\nThe function\
    \ should throw an error if the base is 42.\nThe function should \nusing Test\n\
    \n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\"\
    )\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\"\
    )\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\"\
    )\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t\
    @test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5,\
    \ 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) ==\
    \ \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmpd0gynu.jl:19\nin expression starting at\
    \ /tmp/tmpmpd0gynu.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    elseif base == 10\n        return string(x*10)\n    else\n        digits\
    \ = string(x)\n        digits = digits[2:end]\n        digits = digits[digits.length-base+1:end]\n\
    \        return digits[end]\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\"\
    )\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\"\
    )\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\"\
    )\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t\
    @test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5,\
    \ 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) ==\
    \ \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu9a802uu.jl:24\nin expression starting at\
    \ /tmp/tmpu9a802uu.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10\n        error(\"base must be greater\
    \ than or equal to 10\")\n    elseif base > 64\n        error(\"base must be less\
    \ than or equal to 64\")\n    elseif base == 10\n        error(\"base must not\
    \ be equal to 10\")\n    else\n        digits = string(x)\n        digits = digits[digits.length\
    \ - digits.length % base:digits.length]\n        digits = digits[digits.length\
    \ - base:digits.length]\n        digits = digits[digits.length - base:digits.length]\n\
    \        digits = digits[digits.length - base:digits.length]\n        digits =\
    \ digits[digits.length - base:digits.length]\n        digits = digits[digits.length\
    \ - base:digits.length]\n        digits = digits[digits.length - base:digits.length]\n\
    \        digits = digits[digits.length - base:digits.length]\n        digits =\
    \ digits[digits.length - base:digits.length]\n        digits = digits[digits.length\
    \ - base:digits.length]\n        digits = digits[digits.length - base:digits.length]\n\
    \        digits = digits[digits.length - base:digits.length]\n        digits =\
    \ digits[digits.length - base:digits.length]\n        digits = digits[digits.length\
    \ - base:digits.length]\n        digits = digits[digits.length - base:digits.length]\n\
    \        digits = digits[digits.length - base:digits.length]\n        digits =\
    \ digits[digits.length - base:digits.length]\n        digits = digits[digits.length\
    \ - base:digits.length]\n        digits = digits[digits.length - base:digits.length]\n\
    \        digits = digits[digits.length - base:digits.length]\n        digits =\
    \ digits[digits.length - base:digits.length]\n        digits = digits[digits.length\
    \ - base:digits.length]\n        digits = digits[digits.length - base:digits.length]\n\
    \        digits = digits[digits.length - base:digits.length]\n        digits =\
    \ digits[digits.length - base:digits.length]\n        digits = digits[digits.length\
    \ - base:digits.length]\n        digits = digits[digits.length - base:digits.length]\n\
    \        digits = digits[digits.length - base:digits.length]\n        digits =\
    \ digits[digits.length - base:digits.length]\n        digits = digits[digits.length\
    \ - base:digits.length]\n        digits = digits[digits.length - base:digits.length]\n\
    \        digits = digits[digits.length - base:digits.length]\n        digits =\
    \ digits[digits.length - \nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn_z024co.jl:1\nin expression starting at /tmp/tmpn_z024co.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x/base^base)\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that converts binary to decimal.\nThe function should take\
    \ two arguments: binary string and base (between 2 and 36).\nThe function should\
    \ return the decimal number represented by the binary string.\nThe function should\
    \ throw an error if the base is not between 2 and 36.\nThe function should throw\
    \ an error if the binary string is not of length 2.\nThe function should throw\
    \ an error if the binary string contains any character other than 0 or 1.\nThe\
    \ function should throw an error if the binary string contains any character other\
    \ than 0 or 1.\nThe function should throw an error if the binary string contains\
    \ any character other than 0 or 1.\nThe function should throw an error if the\
    \ binary string contains any character other than 0 or 1.\nThe function should\
    \ throw an error if the binary string contains any character other than 0 or 1.\n\
    The function should throw an error if the binary string contains any character\
    \ other than 0 or 1.\nThe function should throw an error if the binary string\
    \ contains any character other than 0 or 1.\nThe function should throw an error\
    \ if the binary string contains any character other than 0 or 1.\nThe function\
    \ should throw an error if the binary string contains any character other than\
    \ 0 or 1.\nThe function should throw an error if the binary string contains any\
    \ character other than 0 or 1.\nThe function should throw an error if the binary\
    \ string contains any character other than 0 or 1.\nThe function should throw\
    \ an error if the binary string contains any character other than 0 or 1.\nThe\
    \ function should throw an error if the binary string contains any character other\
    \ than 0 or 1.\nThe function should throw an error if the binary string contains\
    \ any character other than 0 or 1.\nThe function should throw an error if the\
    \ binary string contains any character other than 0 or 1.\nThe function should\
    \ throw an error if the binary string contains any character other than 0 or 1.\n\
    The function should throw an error if the binary string contains any character\
    \ other than 0 or 1.\nThe function should throw an error if the binary string\
    \ contains any character other than 0 or 1.\nThe function should throw an error\
    \ if the binary string contains any character other than 0 or 1.\nThe function\
    \ should throw an error if the binary string contains any character other than\
    \ 0 or 1.\nThe function should throw an error if the binary string contains any\
    \ character other than 0 or 1.\nThe function should throw an error if the binary\
    \ string contains any character other than 0 or 1.\nThe function should throw\
    \ an error if the binary string contains any character other than 0 or 1.\nThe\
    \ function should throw an error if the binary string contains any character other\
    \ than 0 or 1.\nThe function should throw an error if the binary string contains\
    \ any character other than 0 or 1.\nThe function should throw an error if the\
    \ binary string contains any character other than 0 or 1.\nThe function should\
    \ throw an error if the \nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxzvm69lt.jl:19\nin expression starting at\
    \ /tmp/tmpxzvm69lt.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    elseif base == 3\n        return string(x * 1000 + 100)\n    elseif base\
    \ == 4\n        return string(x * 10000 + 1000)\n    elseif base == 5\n      \
    \  return string(x * 100000 + 10000)\n    elseif base == 6\n        return string(x\
    \ * 1000000 + 100000)\n    elseif base == 7\n        return string(x * 10000000\
    \ + 1000000)\n    elseif base == 8\n        return string(x * 100000000 + 10000000)\n\
    \    elseif base == 9\n        return string(x * 1000000000 + 100000000)\n   \
    \ elseif base == 10\n        return string(x * 10000000000 + 1000000000)\n   \
    \ elseif base == 11\n        return string(x * 100000000000 + 10000000000)\n \
    \   elseif base == 12\n        return string(x * 1000000000000 + 100000000000)\n\
    \    elseif base == 13\n        return string(x * 10000000000000 + 10000000000000)\n\
    \    elseif base == 14\n        return string(x * 100000000000000 + 100000000000000)\n\
    \    elseif base == 15\n        return string(x * 1000000000000000 + 1000000000000000)\n\
    \    elseif base == 16\n        return string(x * 10000000000000000 + 10000000000000000)\n\
    \    elseif base == 17\n        return string(x * 100000000000000000 + 100000000000000000)\n\
    \    elseif base == 18\n        return string(x * 1000000000000000000 + 100000000000000000)\n\
    \    elseif base == 19\n        return string(x * 10000000000000000000 + 10000000000000000)\n\
    \    elseif base == 20\n        return string(x * 100000000000000000000 + 100000000000000000)\n\
    \    elseif base == 21\n        return string(x * 1000000000000000000000 + 10000000000000000)\n\
    \    elseif base == 22\n        return string(x * 10000000000000000000000 + 100000000000000000)\n\
    \    elseif base == 23\n        return string(x * 100000000000000000000000 + 10000000000000000)\n\
    \    elseif base == 24\n        return string(x * 1000000000000000000000000 +\
    \ 100000000000000000)\n    elseif base == 25\n        return string(x * 10000000000000000000000000\
    \ + 10000000000000000)\n    elseif base == 26\n        return string(x * 100000000000000000000000000\
    \ + 100000000000000000)\n    elseif base == 27\n        return string(x * 1000000000000000000000000000\
    \ + 10000000000000000)\n    elseif base == 28\n        return string(x * 10000000000000000000000000000\
    \ + 100000000000000000)\n    elseif base == 29\n        return string(x * 100000000000000000000000000000\
    \ + 10000000000000000)\n\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6ahxcir1.jl:1\nin expression starting at /tmp/tmp6ahxcir1.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x * base^2)\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    convert_base(x::Int64, base::Int64)::Int64\n    convert x to base\
    \ base\n    \n    x is converted to base base if base is between 2 and 36\n  \
    \  otherwise x is returned unchanged.\n    \n    base numbers are less than 10.\n\
    \    >>> convert_base(8, 3)\n    22\n    >>> convert_base(8, 2)\n    1000\n  \
    \  >>> convert_base(7, 2)\n    111\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphxt1qbxd.jl:19\nin expression starting at\
    \ /tmp/tmphxt1qbxd.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        digits = digits(x)\n        digits = digits[digits.length -\
    \ digits.length % base]\n        digits = digits[0 : digits.length - digits.length\
    \ % base]\n        digits = digits[digits.length / base - 1]\n        digits =\
    \ digits[0 : digits.length / base]\n        digits = digits[digits.length - digits.length\
    \ % base]\n        digits = digits[0 : digits.length]\n        digits = digits[digits.length\
    \ - digits.length % base]\n        digits = digits[0 : digits.length]\n      \
    \  digits = digits[digits.length - digits.length % base]\n        digits = digits[0\
    \ : digits.length]\n        digits = digits[digits.length - digits.length % base]\n\
    \        digits = digits[0 : digits.length]\n        digits = digits[digits.length\
    \ - digits.length % base]\n        digits = digits[0 : digits.length]\n      \
    \  digits = digits[digits.length - digits.length % base]\n        digits = digits[0\
    \ : digits.length]\n        digits = digits[digits.length - digits.length % base]\n\
    \        digits = digits[0 : digits.length]\n        digits = digits[digits.length\
    \ - digits.length % base]\n        digits = digits[0 : digits.length]\n      \
    \  digits = digits[digits.length - digits.length % base]\n        digits = digits[0\
    \ : digits.length]\n        digits = digits[digits.length - digits.length % base]\n\
    \        digits = digits[0 : digits.length]\n        digits = digits[digits.length\
    \ - digits.length % base]\n        digits = digits[0 : digits.length]\n      \
    \  digits = digits[digits.length - digits.length % base]\n        digits = digits[0\
    \ : digits.length]\n        digits = digits[digits.length - digits.length % base]\n\
    \        digits = digits[0 : digits.length]\n        digits = digits[digits.length\
    \ - digits.length % base]\n        digits = digits[0 : digits.length]\n      \
    \  digits = digits[digits.length - digits.length % base]\n        digits = digits[0\
    \ : digits.length]\n        digits = digits[digits.length - digits.length % base]\n\
    \        digits = digits[0 : digits.length]\n        digits = digits[digits.length\
    \ - digits.length % base]\n        digits = digits[0 : digits.length]\n      \
    \  digits = digits[digits.length - digits.length % \nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp56sf2w8u.jl:1\nin expression starting at /tmp/tmp56sf2w8u.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x * base^2)\nend\n</cell>\n<code language=julia-1.3>\n\
    change_base(8, 3)\n</cell>\n<text>\nExercise 3\nWrite a function that converts\
    \ a string to a number.\nThe string can contain any characters, including non-numeric\
    \ characters.\nThe function should throw an error if the string does not contain\
    \ a valid number.\nThe function should throw an error if the string contains more\
    \ than one valid number.\nThe function should throw an error if the string contains\
    \ any non-numeric characters.\nThe function should throw an error if the string\
    \ contains more than one non-numeric character.\nThe function should throw an\
    \ error if the string contains any non-numeric characters after the first valid\
    \ number.\nThe function should throw an error if the string contains more than\
    \ one non-numeric character after the first valid number.\nThe function should\
    \ throw an error if the string contains any non-numeric characters after the first\
    \ valid number.\nThe function should throw an error if the string contains more\
    \ than one non-numeric character after the first valid number.\nThe function should\
    \ throw an error if the string contains any non-numeric characters after the first\
    \ valid number.\nThe function should throw an error if the string contains more\
    \ than one non-numeric character after the first valid number.\nThe function should\
    \ throw an error if the string contains any non-numeric characters after the first\
    \ valid number.\nThe function should throw an error if the string contains more\
    \ than one non-numeric character after the first valid number.\nThe function should\
    \ throw an error if the string contains any non-numeric characters after the first\
    \ valid number.\nThe function should throw an error if the string contains more\
    \ than one non-numeric character after the first valid number.\nThe function should\
    \ throw an error if the string contains any non-numeric characters after the first\
    \ valid number.\nThe function should throw an error if the string contains more\
    \ than one non-numeric character after the first valid number.\nThe function should\
    \ throw an error if the string contains any non-numeric characters after the first\
    \ valid number.\nThe function should throw an error if the string contains more\
    \ than one non-numeric character after the first valid number.\nThe function should\
    \ throw an error if the string contains any non-numeric characters after the first\
    \ valid number.\nThe function should throw an error if the string contains more\
    \ than one non-numeric character after the first valid number.\nThe function should\
    \ throw an error if the string contains any non-numeric characters after the first\
    \ valid number.\nThe function should throw an error if the string contains more\
    \ than one non-numeric character after the first valid number.\nThe function should\
    \ throw an error if the string contains any non-numeric characters after the first\
    \ valid number.\nThe function should throw an error if the string contains more\
    \ than one non-numeric character after the first valid number.\nThe function should\
    \ throw an error if the string contains any non-numeric characters after the first\
    \ valid number.\nThe function should throw an error if the string contains more\
    \ than one non-numeric character after the first valid number.\nusing Test\n\n\
    @testset begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\"\
    )\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\"\
    )\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\"\
    )\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t\
    @test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5,\
    \ 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) ==\
    \ \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpla23xy_r.jl:19\nin expression starting at\
    \ /tmp/tmpla23xy_r.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x, base)\nend\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 3)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n<text>\nExercise\nWrite\
    \ a function that converts binary numbers to decimal.\nThe input is a string that\
    \ consists of 0s and 1s.\nThe output is a decimal number.\nThe function should\
    \ throw an error if the input is not binary or if the input contains more than\
    \ 1 1.\nThe function should throw an error if the input contains more than 1 0.\n\
    The function should throw an error if the input contains more than 1 0.\nThe function\
    \ should throw an error if the input contains more than 1 0.\nThe function should\
    \ throw an error if the input contains more than 1 0.\nThe function should throw\
    \ an error if the input contains more than 1 0.\nThe function should throw an\
    \ error if the input contains more than 1 0.\nThe function should throw an error\
    \ if the input contains more than 1 0.\nThe function should throw an error if\
    \ the input contains more than 1 0.\nThe function should throw an error if the\
    \ input contains more than 1 0.\nThe function should throw an error if the input\
    \ contains more than 1 0.\nThe function should throw an error if the input contains\
    \ more than 1 0.\nThe function should throw an error if the input contains more\
    \ than 1 0.\nThe function should throw an error if the input contains more than\
    \ 1 0.\nThe function should throw an error if the input contains more than 1 0.\n\
    The function should throw an error if the input contains more than 1 0.\nThe function\
    \ should throw an error if the input contains more than 1 0.\nThe function should\
    \ throw an error if the input contains more than 1 0.\nThe function should throw\
    \ an error if the input contains more than 1 0.\nThe function should throw an\
    \ error if the input contains more than 1 0.\nThe function should throw an error\
    \ if the input contains more than 1 0.\nThe function should throw an error if\
    \ the input contains more than 1 0.\nThe function should throw an error if the\
    \ input contains more than 1 0.\nThe function should throw an error if the input\
    \ contains more than 1 0.\nThe function should throw an error if the input contains\
    \ more than 1 0.\nThe function should throw an error if the input contains more\
    \ than 1 0.\nThe function should throw an error if the input contains more than\
    \ 1 0.\nThe function should throw an error if the input contains more than 1 0.\n\
    The function should throw an error if the input contains more than 1 0.\nThe function\
    \ should throw an error if the input contains more than 1 0.\nThe function should\
    \ throw an error if the input contains more than 1 0.\nThe function should throw\
    \ an error if the input contains more than 1 0.\n\nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp49x5esx8.jl:19\nin expression starting at\
    \ /tmp/tmp49x5esx8.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        error(\"Base must\
    \ be between 2 and 36\")\n    elseif base == 2\n        return string(x)\n   \
    \ else\n        return string(x*base)\nend\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 3)\n</cell>\n<text>\nExercise: Write a function that converts a\
    \ number from base 10 to base 36 (a-z). \nThe function should take two arguments:\
    \ x is the number to be converted, and base is the base of the number.\nThe function\
    \ should return a string representing the number in base 36 (a-z).\nThe function\
    \ should raise an error if the base is not between 2 and 36.\nThe function should\
    \ raise an error if the number is not an integer.\nThe function should raise an\
    \ error if the number is negative.\nThe function should raise an error if the\
    \ number is zero.\nThe function should raise an error if the number is greater\
    \ than 36.\nThe function should raise an error if the number is less than 2.\n\
    The function should raise an error if the number is greater than 36.\nThe function\
    \ should raise an error if the number is less than 2.\nThe function should raise\
    \ an error if the number is greater than 36.\nThe function should raise an error\
    \ if the number is less than 2.\nThe function should raise an error if the number\
    \ is greater than 36.\nThe function should raise an error if the number is less\
    \ than 2.\nThe function should raise an error if the number is greater than 36.\n\
    The function should raise an error if the number is less than 2.\nThe function\
    \ should raise an error if the number is greater than 36.\nThe function should\
    \ raise an error if the number is less than 2.\nThe function should raise an error\
    \ if the number is greater than 36.\nThe function should raise an error if the\
    \ number is less than 2.\nThe function should raise an error if the number is\
    \ greater than 36.\nThe function should raise an error if the number is less than\
    \ 2.\nThe function should raise an error if the number is greater than 36.\nThe\
    \ function should raise an error if the number is less than 2.\nThe function should\
    \ raise an error if the number is greater than 36.\nThe function should raise\
    \ an error if the number is less than 2.\nThe function should raise an error if\
    \ the number is greater than 36.\nThe function should raise an error if the number\
    \ is less than 2.\nThe function should raise an error if the number is greater\
    \ than 36.\nThe function should raise an error if the number is less than 2.\n\
    The function should raise an error if the number is greater than 36.\nThe function\
    \ should raise an error if the number is less than 2.\nThe function should raise\
    \ an error if the number is greater than 36.\nThe function should raise an error\
    \ if the number is less than 2.\nThe function should raise an error if the number\
    \ is greater than 36.\nThe function should raise an error if the number is less\
    \ than 2.\nThe function should raise an error if the number is greater than 36.\n\
    The function should raise an error if the number is less than 2.\nThe function\
    \ should raise an error if the number is greater than 36.\nThe function should\
    \ raise an error if the number is less than 2.\nThe function should raise an error\
    \ if the number is greater than 36.\nThe function should raise an error if the\
    \ number is less than \nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppx0x9w8j.jl:19\nin expression starting at\
    \ /tmp/tmppx0x9w8j.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base == 10 \n        digits = \"0123456789\"\n\
    \    else \n        digits = \"0123456789abcdefghijklmnopqrstuvwxyz\"\n    return\
    \ digits[base-1] + digits[x % base]\nend\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 3)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that converts a binary number to a decimal number.\nusing Test\n\n\
    @testset begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\"\
    )\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\"\
    )\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\"\
    )\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t\
    @test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5,\
    \ 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) ==\
    \ \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjpdvhca9.jl:18\nin expression starting at\
    \ /tmp/tmpjpdvhca9.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 10\n        throw(ArgumentError(\"\
    Base must be between 2 and 10\"))\n    else\n        return toString(x::Int64,\
    \ base)\nend\n</cell>\n<text>\nExercise 2\nWrite a function that converts a number\
    \ to a string in base 10. \nThe function should throw an error if the base is\
    \ out of range.\nHint: use toString(x::Int64, base::Int64).\nusing Test\n\n@testset\
    \ begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpskojj3qg.jl:17\nin expression starting at\
    \ /tmp/tmpskojj3qg.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10\n        return str(x)\n    else\n \
    \       return change_base(x / base, base) + str(x % base)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nchange_base(8, 3)\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that converts binary numbers to decimal.\nThe input is a string containing\
    \ only 0s and 1s.\nThe output is a decimal number.\nThe function should raise\
    \ an error if the input is not valid.\nThe function should ignore leading zeros.\n\
    The function should ignore trailing zeros.\nThe function should ignore leading\
    \ or trailing whitespace.\nThe function should ignore leading or trailing whitespace.\n\
    The function should ignore leading or trailing whitespace.\nThe function should\
    \ ignore leading or trailing whitespace.\nThe function should ignore leading or\
    \ trailing whitespace.\nThe function should ignore leading or trailing whitespace.\n\
    The function should ignore leading or trailing whitespace.\nThe function should\
    \ ignore leading or trailing whitespace.\nThe function should ignore leading or\
    \ trailing whitespace.\nThe function should ignore leading or trailing whitespace.\n\
    The function should ignore leading or trailing whitespace.\nThe function should\
    \ ignore leading or trailing whitespace.\nThe function should ignore leading or\
    \ trailing whitespace.\nThe function should ignore leading or trailing whitespace.\n\
    The function should ignore leading or trailing whitespace.\nThe function should\
    \ ignore leading or trailing whitespace.\nThe function should ignore leading or\
    \ trailing whitespace.\nThe function should ignore leading or trailing whitespace.\n\
    The function should ignore leading or trailing whitespace.\nThe function should\
    \ ignore leading or trailing whitespace.\nThe function should ignore leading or\
    \ trailing whitespace.\nThe function should ignore leading or trailing whitespace.\n\
    The function should ignore leading or trailing whitespace.\nThe function should\
    \ ignore leading or trailing whitespace.\nThe function should ignore leading or\
    \ trailing whitespace.\nThe function should ignore leading or trailing whitespace.\n\
    The function should ignore leading or trailing whitespace.\nThe function should\
    \ ignore leading or trailing whitespace.\nThe function should ignore leading or\
    \ trailing whitespace.\nThe function should ignore leading or trailing whitespace.\n\
    The function should ignore leading or trailing whitespace.\nThe function should\
    \ ignore leading or trailing whitespace.\nThe function should ignore leading or\
    \ trailing whitespace.\nThe function should ignore leading or trailing whitespace.\n\
    The function should ignore leading or trailing whitespace.\nThe function should\
    \ ignore leading or trailing whitespace.\nThe function should ignore leading or\
    \ trailing whitespace.\nThe function should ignore leading or trailing whitespace.\n\
    The function should ignore leading or trailing whitespace.\nThe function should\
    \ ignore leading or trailing whitespace.\nThe function should ignore leading or\
    \ trailing whitespace\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa6jv7exc.jl:17\nin expression starting at\
    \ /tmp/tmpa6jv7exc.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    else if base == 2\n        return string(x)\n\
    \    else if base == 10\n        return string(x*x)\n    else if base == 16\n\
    \        return string(x*x*x)\n    else if base == 8\n        return string(x*x*x*x)\n\
    \    else if base == 36\n        return string(x*x*x*x*x)\n    else if base ==\
    \ 62\n        return string(x*x*x*x*x*x*x)\n    else if base == 64\n        return\
    \ string(x*x*x*x*x*x*x*x*x)\n    else if base == 96\n        return string(x*x*x*x*x*x*x*x*x*x*x)\n\
    \    else if base == 128\n        return string(x*x*x*x*x*x*x*x*x*x*x*x*x)\n \
    \   else if base == 256\n        return string(x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*\n\
    using Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw4n0kyd1.jl:14\nin expression starting at\
    \ /tmp/tmpw4n0kyd1.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 10 \n        throw(ArgumentError(\"\
    base must be between 2 and 10\"))\n    else if base == 2 \n        return string(x)\n\
    \    else \n        return string(x/base^base*base)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy3nd0tnw.jl:14\nin expression starting at\
    \ /tmp/tmpy3nd0tnw.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10\n        return string(x)\n    else\n\
    \        return string(x/base^base)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert change_base(8, 3) == \"22\"\n@assert change_base(8, 2) == \"1000\"\n@assert\
    \ change_base(7, 2) == \"111\"\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that converts a number to a string with leading zeros if necessary.\nusing Test\n\
    \n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\"\
    )\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\"\
    )\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\"\
    )\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t\
    @test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5,\
    \ 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) ==\
    \ \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5o5lrnfg.jl:17\nin expression starting at\
    \ /tmp/tmp5o5lrnfg.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 10 \n        throw(ArgumentError(\"\
    base must be between 2 and 10\"))\n    else if base == 2 \n        return string(x)\n\
    \    else \n        return string(x/base*base) + string(mod(x, base))\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert change_base(8, 3) == \"22\"\n@assert change_base(8,\
    \ 2) == \"1000\"\n@assert change_base(7, 2) == \"111\"\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that converts a number to a string representation of its\
    \ binary representation.\nThe function should accept a single argument x of type\
    \ Int64 and return a string representation of its binary representation.\nThe\
    \ function should throw an error if the argument x is not of type Int64.\nThe\
    \ function should throw an error if the argument x is less than 0.\nThe function\
    \ should throw an error if the argument x is greater than or equal to 0.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3)\
    \ == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2) ==\
    \ \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx9r93pgo.jl:14\nin expression starting at\
    \ /tmp/tmpx9r93pgo.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    else if base == 2\n        return string(x)\n\
    \    else if base == 36\n        return string(x*x)\n    else\n        return\
    \ string(x*base^(x-1))\nend\n</cell>\n<code language=julia-1.3>\nchange_base(8,\
    \ 3)\n</cell>\n<text>\nExercise 2\nWrite a function that converts a binary number\
    \ to a decimal number. \nThe input is a string containing only 0s and 1s.\nThe\
    \ output is a string containing the decimal number in base 10.\nThe function should\
    \ throw an error if the input is not valid binary number.\nThe function should\
    \ throw an error if the input contains more than 1 '1'.\nThe function should throw\
    \ an error if the input contains more than 1 '0'.\nThe function should throw an\
    \ error if the input contains more than 8 bits.\nThe function should throw an\
    \ error if the input contains more than 8 bits.\nThe function should throw an\
    \ error if the input contains more than 8 bits.\nThe function should throw an\
    \ error if the input contains more than 8 bits.\nThe function should throw an\
    \ error if the input contains more than 8 bits.\nThe function should throw an\
    \ error if the input contains more than 8 bits.\nThe function should throw an\
    \ error if the input contains more than 8 bits.\nThe function should throw an\
    \ error if the input contains more than 8 bits.\nThe function should throw an\
    \ error if the input contains more than 8 bits.\nThe function should throw an\
    \ error if the input contains more than 8 bits.\nThe function should throw an\
    \ error if the input contains more than 8 bits.\nThe function should throw an\
    \ error if the input contains more than 8 bits.\nThe function should throw an\
    \ error if the input contains more than 8 bits.\nThe function should throw an\
    \ error if the input contains more than 8 bits.\nThe function should throw an\
    \ error if the input contains more than 8 bits.\nThe function should throw an\
    \ error if the input contains more than 8 bits.\nThe function should throw an\
    \ error if the input contains more than 8 bits.\nThe function should throw an\
    \ error if the input contains more than 8 bits.\nThe function should throw an\
    \ error if the input contains more than 8 bits.\nThe function should throw an\
    \ error if the input contains more than 8 bits.\nThe function should throw an\
    \ error if the input contains more than 8 bits.\nThe function should throw an\
    \ error if the input contains more than 8 bits.\nThe function should throw an\
    \ error if the input contains more than 8 bits.\nThe function should throw an\
    \ error if the input contains more than 8 bits.\nThe function should throw an\
    \ error if the input contains more than 8 bits.\nThe function should throw an\
    \ error if the input contains more than 8 bits.\nThe function should throw an\
    \ error if the input contains more than 8 bits.\nThe function should throw \n\
    using Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpftqaj_wb.jl:14\nin expression starting at\
    \ /tmp/tmpftqaj_wb.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10\n        return str((x % base) + base)\n\
    \    else\n        return str((x % base) + base)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nchange_base(8, 3)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that converts a number to a binary string.\n\
    The function should take one argument, x, and return a string.\nThe function should\
    \ convert x to a binary string and return the string.\nThe function should convert\
    \ x to a binary string and return the string.\nThe function should convert x to\
    \ a binary string and return the string.\nThe function should convert x to a binary\
    \ string and return the string.\nThe function should convert x to a binary string\
    \ and return the string.\nThe function should convert x to a binary string and\
    \ return the string.\nThe function should convert x to a binary string and return\
    \ the string.\nThe function should convert x to a binary string and return the\
    \ string.\nThe function should convert x to a binary string and return the string.\n\
    The function should convert x to a binary string and return the string.\nThe function\
    \ should convert x to a binary string and return the string.\nThe function should\
    \ convert x to a binary string and return the string.\nThe function should convert\
    \ x to a binary string and return the string.\nThe function should convert x to\
    \ a binary string and return the string.\nThe function should convert x to a binary\
    \ string and return the string.\nThe function should convert x to a binary string\
    \ and return the string.\nThe function should convert x to a binary string and\
    \ return the string.\nThe function should convert x to a binary string and return\
    \ the string.\nThe function should convert x to a binary string and return the\
    \ string.\nThe function should convert x to a binary string and return the string.\n\
    The function should convert x to a binary string and return the string.\nThe function\
    \ should convert x to a binary string and return the string.\nThe function should\
    \ convert x to a binary string and return the string.\nThe function should convert\
    \ x to a binary string and return the string.\nThe function should convert x to\
    \ a binary string and return the string.\nThe function should convert x to a binary\
    \ string and return the string.\nThe function should convert x to a binary string\
    \ and return the string.\nThe function should convert x to a binary string and\
    \ return the string.\nThe function should convert x to a binary string and return\
    \ the string.\nThe function should convert x to a binary string and return the\
    \ string.\nThe function should convert x to a binary string and return the string.\n\
    The function should convert x to a binary string and return the string.\nThe function\
    \ should convert x to a binary string and return the string.\nThe function should\
    \ convert x to a binary string and return the \nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwxzcrhl9.jl:18\nin expression starting at\
    \ /tmp/tmpwxzcrhl9.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10\n        return str(x)\n    else\n \
    \       digits = digits(x)\n        digits = digits[digits.length - base]\n  \
    \      digits = digits[0 : digits.length - base]\n        digits = digits + digits[digits.length\
    \ - base]\n        return digits\nend\n</cell>\n<code language=julia-1.5>\nchange_base(8,\
    \ 3)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    change_base(7, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that converts\
    \ binary to decimal.\nThe function should take a string of binary digits and return\
    \ the decimal equivalent of the binary number.\nThe function should raise an error\
    \ if the input string is not in binary form.\nThe function should raise an error\
    \ if the input string contains more than 10 binary digits.\nThe function should\
    \ raise an error if the input string contains more than 10 decimal digits.\nThe\
    \ function should raise an error if the input string contains more than 10 binary\
    \ digits.\nThe function should raise an error if the input string contains more\
    \ than 10 decimal digits.\nThe function should raise an error if the input string\
    \ contains more than 10 binary digits.\nThe function should raise an error if\
    \ the input string contains more than 10 decimal digits.\nThe function should\
    \ raise an error if the input string contains more than 10 binary digits.\nThe\
    \ function should raise an error if the input string contains more than 10 decimal\
    \ digits.\nThe function should raise an error if the input string contains more\
    \ than 10 binary digits.\nThe function should raise an error if the input string\
    \ contains more than 10 decimal digits.\nThe function should raise an error if\
    \ the input string contains more than 10 binary digits.\nThe function should raise\
    \ an error if the input string contains more than 10 decimal digits.\nThe function\
    \ should raise an error if the input string contains more than 10 binary digits.\n\
    The function should raise an error if the input string contains more than 10 decimal\
    \ digits.\nThe function should raise an error if the input string contains more\
    \ than 10 binary digits.\nThe function should raise an error if the input string\
    \ contains more than 10 decimal digits.\nThe function should raise an error if\
    \ the input string contains more than 10 binary digits.\nThe function should raise\
    \ an error if the input string contains more than 10 decimal digits.\nThe function\
    \ should raise an error if the input string contains more than 10 binary digits.\n\
    The function should raise an error if the input string contains more than 10 decimal\
    \ digits.\nThe function should raise an error if the input string contains more\
    \ than 10 binary digits.\nThe function should raise an error if the input string\
    \ contains more than 10 decimal digits.\nThe function should raise an error if\
    \ the input string contains more than 10 binary digits.\nThe function should raise\
    \ an error if the input string contains more than 10 decimal digits.\nThe function\
    \ should raise an error if the input string contains more than 10 binary digits.\n\
    The function should raise an error if the input string contains \nusing Test\n\
    \n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\"\
    )\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\"\
    )\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\"\
    )\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t\
    @test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5,\
    \ 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) ==\
    \ \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnehb2vup.jl:21\nin expression starting at\
    \ /tmp/tmpnehb2vup.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 10 \n        throw(ArgumentError(\"\
    base must be between 2 and 10\"))\n    elseif base == 2 \n        return string(x)\n\
    \    else\n        return string(x*base)\nend\n</cell>\n<code language=julia-1.4>\n\
    change_base(8, 3)\n</cell>\n<code language=julia-1.4>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.4>\nchange_base(7, 2)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that converts binary numbers to decimal numbers. \nThe input is a\
    \ string that consists of 0s and 1s.\nThe output is a decimal number.\nThe function\
    \ should throw an error if the input string is not valid.\nThe function should\
    \ throw an error if the input string contains invalid characters.\nThe function\
    \ should throw an error if the input string contains invalid characters.\nThe\
    \ function should throw an error if the input string contains invalid characters.\n\
    The function should throw an error if the input string contains invalid characters.\n\
    The function should throw an error if the input string contains invalid characters.\n\
    The function should throw an error if the input string contains invalid characters.\n\
    The function should throw an error if the input string contains invalid characters.\n\
    The function should throw an error if the input string contains invalid characters.\n\
    The function should throw an error if the input string contains invalid characters.\n\
    The function should throw an error if the input string contains invalid characters.\n\
    The function should throw an error if the input string contains invalid characters.\n\
    The function should throw an error if the input string contains invalid characters.\n\
    The function should throw an error if the input string contains invalid characters.\n\
    The function should throw an error if the input string contains invalid characters.\n\
    The function should throw an error if the input string contains invalid characters.\n\
    The function should throw an error if the input string contains invalid characters.\n\
    The function should throw an error if the input string contains invalid characters.\n\
    The function should throw an error if the input string contains invalid characters.\n\
    The function should throw an error if the input string contains invalid characters.\n\
    The function should throw an error if the input string contains invalid characters.\n\
    The function should throw an error if the input string contains invalid characters.\n\
    The function should throw an error if the input string contains invalid characters.\n\
    The function should throw an error if the input string contains invalid characters.\n\
    The function should throw an error if the input string contains invalid characters.\n\
    The function should throw an error if the input string contains invalid characters.\n\
    The function should throw an error if the input string contains invalid characters.\n\
    The function should throw an error if the input string contains invalid characters.\n\
    The function should throw an error if the input string contains invalid characters.\n\
    The function should throw an error if the input string contains invalid characters.\n\
    The function should throw an error if the input string contains invalid characters.\n\
    The function should throw an error if the input string contains invalid characters.\n\
    The function should \nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwfu46jih.jl:19\nin expression starting at\
    \ /tmp/tmpwfu46jih.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        error(\"Base must\
    \ be between 2 and 36.\")\n    elseif base == 2\n        return string(x)\n  \
    \  else\n        return string(x * base^2)\nend\n</cell>\n<text>\nExercise 7\n\
    Write a function that converts binary numbers to decimal.\nThe input is a string\
    \ that consists of 0s and 1s.\nThe output is an integer that is the decimal equivalent\
    \ of the binary number.\nThe function should raise an error if the input string\
    \ is not in binary form.\nThe function should raise an error if the input string\
    \ contains more than 32 bits.\nThe function should raise an error if the input\
    \ string contains more than 32 bits.\nThe function should raise an error if the\
    \ input string contains more than 32 bits.\nThe function should raise an error\
    \ if the input string contains more than 32 bits.\nThe function should raise an\
    \ error if the input string contains more than 32 bits.\nThe function should raise\
    \ an error if the input string contains more than 32 bits.\nThe function should\
    \ raise an error if the input string contains more than 32 bits.\nThe function\
    \ should raise an error if the input string contains more than 32 bits.\nThe function\
    \ should raise an error if the input string contains more than 32 bits.\nThe function\
    \ should raise an error if the input string contains more than 32 bits.\nThe function\
    \ should raise an error if the input string contains more than 32 bits.\nThe function\
    \ should raise an error if the input string contains more than 32 bits.\nThe function\
    \ should raise an error if the input string contains more than 32 bits.\nThe function\
    \ should raise an error if the input string contains more than 32 bits.\nThe function\
    \ should raise an error if the input string contains more than 32 bits.\nThe function\
    \ should raise an error if the input string contains more than 32 bits.\nThe function\
    \ should raise an error if the input string contains more than 32 bits.\nThe function\
    \ should raise an error if the input string contains more than 32 bits.\nThe function\
    \ should raise an error if the input string contains more than 32 bits.\nThe function\
    \ should raise an error if the input string contains more than 32 bits.\nThe function\
    \ should raise an error if the input string contains more than 32 bits.\nThe function\
    \ should raise an error if the input string contains more than 32 bits.\nThe function\
    \ should raise an error if the input string contains more than 32 bits.\nThe function\
    \ should raise an error if the input string contains more than 32 bits.\nThe function\
    \ should raise an error if the input string contains more than 32 bits.\nThe function\
    \ should raise an error if the input string contains more than 32 bits.\nThe function\
    \ should raise an error if the input string contains more than 32 bits.\nThe function\
    \ should raise an error if the input string contains more than 32 bits.\nThe function\
    \ should raise an error if the input string contains more than 32 bits.\nThe function\
    \ should raise an error if the input string \nusing Test\n\n@testset begin\n\n\
    candidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy_bgx8qg.jl:19\nin expression starting at\
    \ /tmp/tmpy_bgx8qg.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 10 \n        error(\"Base must\
    \ be between 2 and 10\")\n    else \n        if base == 2 \n            return\
    \ string(x)\n        else \n            digits = string(x)\n            digits\
    \ = digits[2:end]\n            digits = digits[digits.length - digits.length %\
    \ base]\n            digits = digits[digits.length - digits.length % base]\n \
    \           digits = digits[digits.length - digits.length % base]\n          \
    \  digits = digits[digits.length - digits.length % base]\n            digits =\
    \ digits[digits.length - digits.length % base]\n            digits = digits[digits.length\
    \ - digits.length % base]\n            digits = digits[digits.length - digits.length\
    \ % base]\n            digits = digits[digits.length - digits.length % base]\n\
    \            digits = digits[digits.length - digits.length % base]\n         \
    \   digits = digits[digits.length - digits.length % base]\n            digits\
    \ = digits[digits.length - digits.length % base]\n            digits = digits[digits.length\
    \ - digits.length % base]\n            digits = digits[digits.length - digits.length\
    \ % base]\n            digits = digits[digits.length - digits.length % base]\n\
    \            digits = digits[digits.length - digits.length % base]\n         \
    \   digits = digits[digits.length - digits.length % base]\n            digits\
    \ = digits[digits.length - digits.length % base]\n            digits = digits[digits.length\
    \ - digits.length % base]\n            digits = digits[digits.length - digits.length\
    \ % base]\n            digits = digits[digits.length - digits.length % base]\n\
    \            digits = digits[digits.length - digits.length % base]\n         \
    \   digits = digits[digits.length - digits.length % base]\n            digits\
    \ = digits[digits.length - digits.length % base]\n            digits = digits[digits.length\
    \ - digits.length % base]\n            digits = digits[digits.length - digits.length\
    \ % base]\n            digits = digits[digits.length - digits.length % base]\n\
    \            digits = digits[digits.length - digits.length % base]\n         \
    \   digits = digits[digits.length - digits.length % base]\n            digits\
    \ = digits[digits.length - digits.length % base]\n            digits = digits[digits.length\
    \ - digits.length % base]\n            digits = digits[digits.length - digits.length\
    \ % base]\n            digits = digits[digits.length - digits.length % base]\n\
    \            digits = digits[digits.length - digits.length % base]\n         \
    \   digits = digit\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmp7a9ogjpa.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7a9ogjpa.jl:1\n\
    in expression starting at /tmp/tmp7a9ogjpa.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base == 10 \n        digits = \"0123456789\"\n\
    \    else \n        digits = \"0123456789abcdefghijklmnopqrstuvwxyz\"\n    \n\
    \    digits = digits[base-1:end]\n    \n    return digits[x]\nend\n</cell>\n<code\
    \ language=julia-1.5>\nchange_base(8, 3)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that converts a number from base 10 to base\
    \ 16. \nThe function should take two arguments: an integer and a base (between\
    \ 2 and 16).\nThe function should return the string representation of the number\
    \ in base 16.\nThe function should raise an error if the base is out of range.\n\
    The function should raise an error if the number is negative.\nThe function should\
    \ raise an error if the number is too large.\nThe function should raise an error\
    \ if the number is too small.\nThe function should raise an error if the number\
    \ is zero.\nThe function should raise an error if the number is negative.\nThe\
    \ function should raise an error if the number is too large.\nThe function should\
    \ raise an error if the number is too small.\nThe function should raise an error\
    \ if the number is zero.\nThe function should raise an error if the number is\
    \ negative.\nThe function should raise an error if the number is too large.\n\
    The function should raise an error if the number is too small.\nThe function should\
    \ raise an error if the number is zero.\nThe function should raise an error if\
    \ the number is negative.\nThe function should raise an error if the number is\
    \ too large.\nThe function should raise an error if the number is too small.\n\
    The function should raise an error if the number is zero.\nThe function should\
    \ raise an error if the number is negative.\nThe function should raise an error\
    \ if the number is too large.\nThe function should raise an error if the number\
    \ is too small.\nThe function should raise an error if the number is zero.\nThe\
    \ function should raise an error if the number is negative.\nThe function should\
    \ raise an error if the number is too large.\nThe function should raise an error\
    \ if the number is too small.\nThe function should raise an error if the number\
    \ is zero.\nThe function should raise an error if the number is negative.\nThe\
    \ function should raise an error if the number is too large.\nThe function should\
    \ raise an error if the number is too small.\nThe function should raise an error\
    \ if the number is zero.\nThe function should raise an error if the number is\
    \ negative.\nThe function should raise an error if the number is too large.\n\
    The function should raise an error if the number is too small.\nThe function should\
    \ raise an error if the number is zero.\nThe function should raise an error if\
    \ the number is negative.\nThe function should raise an error if the number is\
    \ too large.\nThe function should raise an error \nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyjijxw17.jl:21\nin expression starting at\
    \ /tmp/tmpyjijxw17.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x * base^2)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuvjcthzz.jl:19\nin expression starting at\
    \ /tmp/tmpuvjcthzz.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 10\n        throw(ArgumentError(\"\
    base must be between 2 and 10\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x * base)\nend\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphs178ztw.jl:19\nin expression starting at\
    \ /tmp/tmphs178ztw.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x, base)\nend\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 3)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that converts binary to decimal.\nThe function should take a string\
    \ as input and return an integer.\nThe function should throw an error if the input\
    \ is not binary.\nThe function should throw an error if the input is not of length\
    \ 2.\nThe function should throw an error if the input contains any character other\
    \ than 0 or 1.\nThe function should throw an error if the input contains any character\
    \ other than 0 or 1.\nThe function should throw an error if the input contains\
    \ any character other than 0 or 1.\nThe function should throw an error if the\
    \ input contains any character other than 0 or 1.\nThe function should throw an\
    \ error if the input contains any character other than 0 or 1.\nThe function should\
    \ throw an error if the input contains any character other than 0 or 1.\nThe function\
    \ should throw an error if the input contains any character other than 0 or 1.\n\
    The function should throw an error if the input contains any character other than\
    \ 0 or 1.\nThe function should throw an error if the input contains any character\
    \ other than 0 or 1.\nThe function should throw an error if the input contains\
    \ any character other than 0 or 1.\nThe function should throw an error if the\
    \ input contains any character other than 0 or 1.\nThe function should throw an\
    \ error if the input contains any character other than 0 or 1.\nThe function should\
    \ throw an error if the input contains any character other than 0 or 1.\nThe function\
    \ should throw an error if the input contains any character other than 0 or 1.\n\
    The function should throw an error if the input contains any character other than\
    \ 0 or 1.\nThe function should throw an error if the input contains any character\
    \ other than 0 or 1.\nThe function should throw an error if the input contains\
    \ any character other than 0 or 1.\nThe function should throw an error if the\
    \ input contains any character other than 0 or 1.\nThe function should throw an\
    \ error if the input contains any character other than 0 or 1.\nThe function should\
    \ throw an error if the input contains any character other than 0 or 1.\nThe function\
    \ should throw an error if the input contains any character other than 0 or 1.\n\
    The function should throw an error if the input contains any character other than\
    \ 0 or 1.\nThe function should throw an error if the input contains any character\
    \ other than 0 or 1.\nThe function should throw an error if the input contains\
    \ any character other than 0 or 1.\nThe function should throw an error if the\
    \ input contains any character other than 0 or 1.\nThe function should throw an\
    \ error if the input contains any character other than 0 or 1.\nThe function should\
    \ throw an error if the input contains any \nusing Test\n\n@testset begin\n\n\
    candidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplnr3yycn.jl:19\nin expression starting at\
    \ /tmp/tmplnr3yycn.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        digits = string(x%base)\n        x /= base\n        while x\
    \ > 1\n            digits = string(x%base) + digits\n            x /= base\n \
    \       return digits + digits\nend\n</cell>\n<code language=julia-1.5>\nchange_base(8,\
    \ 3)\n</cell>\n<text>\nExercise 2\nWrite a function that converts a number from\
    \ base 10 to base 36. \nThe function should throw an error if the base is out\
    \ of range.\nThe function should throw an error if the number is negative.\nThe\
    \ function should throw an error if the number is zero.\nThe function should throw\
    \ an error if the number is out of range.\nThe function should throw an error\
    \ if the number is too large.\nThe function should throw an error if the number\
    \ is too small.\nThe function should throw an error if the number is too large.\n\
    The function should throw an error if the number is too small.\nThe function should\
    \ throw an error if the number is too large.\nThe function should throw an error\
    \ if the number is too small.\nThe function should throw an error if the number\
    \ is too large.\nThe function should throw an error if the number is too small.\n\
    The function should throw an error if the number is too large.\nThe function should\
    \ throw an error if the number is too small.\nThe function should throw an error\
    \ if the number is too large.\nThe function should throw an error if the number\
    \ is too small.\nThe function should throw an error if the number is too large.\n\
    The function should throw an error if the number is too small.\nThe function should\
    \ throw an error if the number is too large.\nThe function should throw an error\
    \ if the number is too small.\nThe function should throw an error if the number\
    \ is too large.\nThe function should throw an error if the number is too small.\n\
    The function should throw an error if the number is too large.\nThe function should\
    \ throw an error if the number is too small.\nThe function should throw an error\
    \ if the number is too large.\nThe function should throw an error if the number\
    \ is too small.\nThe function should throw an error if the number is too large.\n\
    The function should throw an error if the number is too small.\nThe function should\
    \ throw an error if the number is too large.\nThe function should throw an error\
    \ if the number is too small.\nThe function should throw an error if the number\
    \ is too large.\nThe function should throw an error if the number is too small.\n\
    The function should throw an error if the number is too large.\nThe function should\
    \ throw an error if the number is too small.\nThe function should throw an error\
    \ if the number is too large.\nThe function should throw an error if the number\
    \ is too small.\nThe function should throw an error if the number is too large\n\
    using Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptnfiwqi5.jl:24\nin expression starting at\
    \ /tmp/tmptnfiwqi5.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    Invalid base\"))\n    elseif base == 10\n        return toString(x)\n    else\n\
    \        digits = digits(x)\n        digits = digits[digits.length - digits.length\
    \ % base]\n        digits = digits[0 : digits.length - digits.length % base]\n\
    \        digits = digits[0 : digits.length + base]\n        digits = digits[digits.length\
    \ + base - 1]\n        digits = digits[0 : digits.length - base]\n        digits\
    \ = digits[0 : digits.length + base]\n        digits = digits[digits.length -\
    \ base + 1]\n        digits = digits[0 : digits.length + base]\n        digits\
    \ = digits[0 : digits.length + base]\n        digits = digits[digits.length +\
    \ base - 1]\n        digits = digits[0 : digits.length + base]\n        digits\
    \ = digits[0 : digits.length + base]\n        digits = digits[digits.length +\
    \ base - 1]\n        digits = digits[0 : digits.length + base]\n        digits\
    \ = digits[0 : digits.length + base]\n        digits = digits[digits.length +\
    \ base - 1]\n        digits = digits[0 : digits.length + base]\n        digits\
    \ = digits[0 : digits.length + base]\n        digits = digits[digits.length +\
    \ base - 1]\n        digits = digits[0 : digits.length + base]\n        digits\
    \ = digits[0 : digits.length + base]\n        digits = digits[digits.length +\
    \ base - 1]\n        digits = digits[0 : digits.length + base]\n        digits\
    \ = digits[0 : digits.length + base]\n        digits = digits[digits.length +\
    \ base - 1]\n        digits = digits[0 : digits.length + base]\n        digits\
    \ = digits[0 : digits.length + base]\n        digits = digits[digits.length +\
    \ base - 1]\n        digits = digits[0 : digits.length + base]\n        digits\
    \ = digits[0 : digits.length + base]\n        digits = digits[digits.length +\
    \ base - 1]\n        digits = digits[0 : digits.length + base]\n        digits\
    \ = digits[0 : digits.length + base]\n        digits = digits[digits.length +\
    \ base - 1]\n        digits = digits[0 : digits.length + base]\n        digits\
    \ = digits[0 : digits.length + base]\n        digits = digits[digits.length +\
    \ base - 1]\n        digits = digits[0 : digits.length + base]\n        digits\
    \ = digits[0 : digits.length + base]\n        digit\nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmp34aoodvb.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp34aoodvb.jl:1\n\
    in expression starting at /tmp/tmp34aoodvb.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base == 10 \n        return \"0\"\n    else \n\
    \        return string(x%base) + change_base(x/base, base)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nchange_base(8, 3)\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that converts a number to a string with leading zeros.\nThe function\
    \ should take two arguments: an input number x and an optional argument base.\n\
    The function should return a string representation of the number with leading\
    \ zeros.\nIf the optional argument base is omitted, the function should use the\
    \ default base of 10.\nIf the input number x is less than 10, the function should\
    \ return \"0\".\nIf the input number x is greater than or equal to 10, the function\
    \ should return the string representation of x with leading zeros.\nFor example,\
    \ if the input number is 12, the function should return \"0012\".\nIf the input\
    \ number is 13, the function should return \"013\".\nIf the input number is 14,\
    \ the function should return \"0014\".\nIf the input number is 15, the function\
    \ should return \"015\".\nIf the input number is 16, the function should return\
    \ \"0016\".\nIf the input number is 17, the function should return \"0017\".\n\
    If the input number is 18, the function should return \"0018\".\nIf the input\
    \ number is 19, the function should return \"0019\".\nIf the input number is 20,\
    \ the function should return \"0020\".\nIf the input number is 21, the function\
    \ should return \"0021\".\nIf the input number is 22, the function should return\
    \ \"0022\".\nIf the input number is 23, the function should return \"0023\".\n\
    If the input number is 24, the function should return \"0024\".\nIf the input\
    \ number is 25, the function should return \"0025\".\nIf the input number is 26,\
    \ the function should return \"0026\".\nIf the input number is 27, the function\
    \ should return \"0027\".\nIf the input number is 28, the function should return\
    \ \"0028\".\nIf the input number is 29, the function should return \"0029\".\n\
    If the input number is 30, the function should return \"0030\".\nIf the input\
    \ number is 31, the function should return \"0031\".\nIf the input number is 32,\
    \ the function should return \"0032\".\nIf the input number is 33, the function\
    \ should return \"0033\".\nIf the input number is 34, the function should return\
    \ \"0034\".\nIf the input number is 35, the function should return \"0035\".\n\
    If the input number is 36, the function should return \"0036\".\nIf the input\
    \ number is 37, the function should return \"0037\".\nIf the input number is 38,\
    \ the function should return \"0038\".\nIf the input number is 39, the function\
    \ should return \"0039\".\nIf the input number is 40, \nusing Test\n\n@testset\
    \ begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdita0jlv.jl:17\nin expression starting at\
    \ /tmp/tmpdita0jlv.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10\n        return str(x)\n    \n    digits\
    \ = digits(x)\n    digits = digits[digits.length-1::digits.length-base]\n    digits\
    \ = digits[digits.length-1::digits.length-base]\n    digits = digits[digits.length-1::digits.length-base]\n\
    \    digits = digits[digits.length-1::digits.length-base]\n    digits = digits[digits.length-1::digits.length-base]\n\
    \    digits = digits[digits.length-1::digits.length-base]\n    digits = digits[digits.length-1::digits.length-base]\n\
    \    digits = digits[digits.length-1::digits.length-base]\n    digits = digits[digits.length-1::digits.length-base]\n\
    \    digits = digits[digits.length-1::digits.length-base]\n    digits = digits[digits.length-1::digits.length-base]\n\
    \    digits = digits[digits.length-1::digits.length-base]\n    digits = digits[digits.length-1::digits.length-base]\n\
    \    digits = digits[digits.length-1::digits.length-base]\n    digits = digits[digits.length-1::digits.length-base]\n\
    \    digits = digits[digits.length-1::digits.length-base]\n    digits = digits[digits.length-1::digits.length-base]\n\
    \    digits = digits[digits.length-1::digits.length-base]\n    digits = digits[digits.length-1::digits.length-base]\n\
    \    digits = digits[digits.length-1::digits.length-base]\n    digits = digits[digits.length-1::digits.length-base]\n\
    \    digits = digits[digits.length-1::digits.length-base]\n    digits = digits[digits.length-1::digits.length-base]\n\
    \    digits = digits[digits.length-1::digits.length-base]\n    digits = digits[digits.length-1::digits.length-base]\n\
    \    digits = digits[digits.length-1::digits.length-base]\n    digits = digits[digits.length-1::digits.length-base]\n\
    \    digits = digits[digits.length-1::digits.length-base]\n    digits = digits[digits.length-1::digits.length-base]\n\
    \    digits = digits[digits.length-1::digits.length-base]\n    digits = digits[digits.length-1::digits.length-base]\n\
    \    digits = digits[digits.length-1::digits.length-base]\n    digits = digits[digits.length-1::digits.length-base]\n\
    using Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0qm6thpv.jl:1\nin expression starting at /tmp/tmp0qm6thpv.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x/base^base, base = base)\nend\n</cell>\n<code\
    \ language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpahmvw6r4.jl:19\nin expression starting at\
    \ /tmp/tmpahmvw6r4.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 10\n        throw(ArgumentError(\"\
    base must be between 2 and 10\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x/base^0, base*base^1)\nend\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7idznvr2.jl:19\nin expression starting at\
    \ /tmp/tmp7idznvr2.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x, base)\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    convert_base(x::Int64, base::Int64)::Int64\n    Convert x from base\
    \ to base numbers are less than 10.\n    base numbers are less than 10.\n    >>>\
    \ convert_base(8, 3)\n    22\n    >>> convert_base(8, 2)\n    1000\n    >>> convert_base(7,\
    \ 2)\n    111\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0fpccn46.jl:19\nin expression starting at\
    \ /tmp/tmp0fpccn46.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        error(\"Invalid\
    \ base\")\n    elseif base == 10\n        return toString(x)\n    else\n     \
    \   return toString(toBase(x, base))\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that converts a binary number to a decimal number. \nThe input number\
    \ x is represented as a binary string in the form '01001101'.\nThe output number\
    \ y is represented as a decimal string in the form '5'.\nThe input number x is\
    \ represented as a binary string in the form '01001101'.\nThe output number y\
    \ is represented as a decimal string in the form '5'.\nThe input number x is represented\
    \ as a binary string in the form '01001101'.\nThe output number y is represented\
    \ as a decimal string in the form '5'.\nThe input number x is represented as a\
    \ binary string in the form '01001101'.\nThe output number y is represented as\
    \ a decimal string in the form '5'.\nThe input number x is represented as a binary\
    \ string in the form '01001101'.\nThe output number y is represented as a decimal\
    \ string in the form '5'.\nThe input number x is represented as a binary string\
    \ in the form '01001101'.\nThe output number y is represented as a decimal string\
    \ in the form '5'.\nThe input number x is represented as a binary string in the\
    \ form '01001101'.\nThe output number y is represented as a decimal string in\
    \ the form '5'.\nThe input number x is represented as a binary string in the form\
    \ '01001101'.\nThe output number y is represented as a decimal string in the form\
    \ '5'.\nThe input number x is represented as a binary string in the form '01001101'.\n\
    The output number y is represented as a decimal string in the form '5'.\nThe input\
    \ number x is represented as a binary string in the form '01001101'.\nThe output\
    \ number y is represented as a decimal string in the form '5'.\nThe input number\
    \ x is represented as a binary string in the form '01001101'.\nThe output number\
    \ y is represented as a decimal string in the form '5'.\nThe input number x is\
    \ represented as a binary string in the form '01001101'.\nThe output number y\
    \ is represented as a decimal string in the form '5'.\nThe input number x is represented\
    \ as a binary string in the form '01001101'.\nThe output number y is represented\
    \ as a decimal string in the form '5'.\nThe input number x is represented as a\
    \ binary string in the \nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo2w6uuax.jl:19\nin expression starting at\
    \ /tmp/tmpo2w6uuax.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        error(\"Base must\
    \ be between 2 and 36\")\n    elseif base == 2\n        return string(x)\n   \
    \ else\n        return string(x*base^digits(x))\nend\n</code>\n<|/ a tags=julia\
    \ |>\n<| a dscore=0 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl8x0i74f.jl:19\nin expression starting at\
    \ /tmp/tmpl8x0i74f.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10\n        return str((x % base) + base)\n\
    \    else\n        return str((x % base) / base)\nend\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 3)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 1)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 0)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(8, -1)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, -2)\n</cell>\n<code language=julia-1.5>\nchange_base(8, -3)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(8, -4)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, -5)\n</cell>\n<code language=julia-1.5>\nchange_base(8, -6)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(8, -7)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, -8)\n</cell>\n<code language=julia-1.5>\nchange_base(8, -9)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(8, -10)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, -100)\n</cell>\n<code language=julia-1.5>\nchange_base(8, -1000)\n\
    </cell>\n<code language=julia-1.5>\nchange_base(8, -10000)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, -100000)\n</cell>\n<code language=julia-1.5>\nchange_base(8, -1000000)\n\
    </cell>\n<code language=julia-1.5>\nchange_base(8, -10000000)\n</cell>\n<code\
    \ language=julia-1.5>\nchange_base(8, -100000000)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, -1000000000)\n</cell>\n<code language=julia-1.5>\nchange_base(8,\
    \ -10000000000)\n</cell>\n<code language=julia-1.5>\nchange_base(8, -100000000000)\n\
    </cell>\n<code language=julia-1.5>\nchange_base(8, -1000000000000)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(8, -10000000000000)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, -100000000000000)\n</cell>\n<code language=julia-1.5>\nchange_base(8,\
    \ -1000000000000000)\n</cell>\n<code language=julia-1.5>\nchange_base(8, \nusing\
    \ Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3)\
    \ == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2) ==\
    \ \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqzuh99zl.jl:17\nin expression starting at\
    \ /tmp/tmpqzuh99zl.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 10\n        throw(ArgumentError(\"\
    Base must be between 2 and 10\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x * base)\nend\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 3)\n</cell>\n<text>\nExercise: Write a function that converts a\
    \ string to a number.\nThe string can contain any characters, including digits\
    \ and letters.\nThe function should throw an error if the string contains anything\
    \ other than digits.\nThe function should ignore any leading or trailing whitespace.\n\
    The function should ignore any leading or trailing minus sign.\nThe function should\
    \ ignore any leading or trailing plus sign.\nThe function should ignore any leading\
    \ or trailing decimal point.\nThe function should ignore any leading or trailing\
    \ e or E or f or F letters.\nThe function should ignore any leading or trailing\
    \ minus sign.\nThe function should ignore any leading or trailing plus sign.\n\
    The function should ignore any leading or trailing decimal point.\nThe function\
    \ should ignore any leading or trailing e or E or f or F letters.\nThe function\
    \ should ignore any leading or trailing minus sign.\nThe function should ignore\
    \ any leading or trailing plus sign.\nThe function should ignore any leading or\
    \ trailing decimal point.\nThe function should ignore any leading or trailing\
    \ e or E or f or F letters.\nThe function should ignore any leading or trailing\
    \ minus sign.\nThe function should ignore any leading or trailing plus sign.\n\
    The function should ignore any leading or trailing decimal point.\nThe function\
    \ should ignore any leading or trailing e or E or f or F letters.\nThe function\
    \ should ignore any leading or trailing minus sign.\nThe function should ignore\
    \ any leading or trailing plus sign.\nThe function should ignore any leading or\
    \ trailing decimal point.\nThe function should ignore any leading or trailing\
    \ e or E or f or F letters.\nThe function should ignore any leading or trailing\
    \ minus sign.\nThe function should ignore any leading or trailing plus sign.\n\
    The function should ignore any leading or trailing decimal point.\nThe function\
    \ should ignore any leading or trailing e or E or f or F letters.\nThe function\
    \ should ignore any leading or trailing minus sign.\nThe function should ignore\
    \ any leading or trailing plus sign.\nThe function should ignore any leading or\
    \ trailing decimal point.\nThe function should ignore any leading or trailing\
    \ e or E or f or F letters.\nThe function should ignore any leading or trailing\
    \ minus sign.\nThe function should ignore any leading or trailing plus sign.\n\
    The function should ignore any leading or trailing decimal point.\nThe function\
    \ should ignore \nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t\
    @test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp72u68fuk.jl:19\nin expression starting at\
    \ /tmp/tmp72u68fuk.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    Base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x * base^2)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn72r5bcp.jl:19\nin expression starting at\
    \ /tmp/tmpn72r5bcp.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base == 10 \n        return toString(x)\n    else\
    \ \n        return toString(change_base(x, base-1))\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert change_base(8, 3) == \"22\"\n@assert change_base(8, 2) == \"1000\"\n@assert\
    \ change_base(7, 2) == \"111\"\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that converts a string to a number.\nThe function should take a string as input\
    \ and return a number.\nThe function should raise an error if the string cannot\
    \ be converted to a number.\nThe function should ignore leading whitespace.\n\
    The function should ignore trailing whitespace.\nThe function should ignore any\
    \ whitespace.\nThe function should ignore non-numeric characters.\nThe function\
    \ should ignore leading plus signs.\nThe function should ignore trailing plus\
    \ signs.\nThe function should ignore leading minus signs.\nThe function should\
    \ ignore trailing minus signs.\nThe function should ignore leading zeros.\nThe\
    \ function should ignore trailing zeros.\nThe function should ignore leading decimal\
    \ points.\nThe function should ignore trailing decimal points.\nThe function should\
    \ ignore any non-numeric characters.\nThe function should ignore leading plus\
    \ signs.\nThe function should ignore trailing plus signs.\nThe function should\
    \ ignore leading minus signs.\nThe function should ignore trailing minus signs.\n\
    The function should ignore leading zeros.\nThe function should ignore trailing\
    \ zeros.\nThe function should ignore leading decimal points.\nThe function should\
    \ ignore trailing decimal points.\nThe function should ignore any non-numeric\
    \ characters.\nThe function should ignore leading plus signs.\nThe function should\
    \ ignore trailing plus signs.\nThe function should ignore leading minus signs.\n\
    The function should ignore trailing minus signs.\nThe function should ignore leading\
    \ zeros.\nThe function should ignore trailing zeros.\nThe function should ignore\
    \ leading decimal points.\nThe function should ignore trailing decimal points.\n\
    The function should ignore any non-numeric characters.\nThe function should ignore\
    \ leading plus signs.\nThe function should ignore trailing plus signs.\nThe function\
    \ should ignore leading minus signs.\nThe function should ignore trailing minus\
    \ signs.\nThe function should ignore leading zeros.\nThe function should ignore\
    \ trailing zeros.\nThe function should ignore leading decimal points.\nThe function\
    \ should ignore trailing decimal points.\nThe function should ignore any non-numeric\
    \ characters.\nThe function should ignore leading plus signs.\nThe function should\
    \ ignore trailing plus signs.\nThe function should ignore leading minus signs.\n\
    The function should ignore trailing minus signs.\nThe function should ignore leading\
    \ zeros.\nThe function should ignore trailing zeros.\nThe function should ignore\
    \ leading decimal points.\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe2k72itk.jl:17\nin expression starting at\
    \ /tmp/tmpe2k72itk.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 10\n        throw(ArgumentError(\"\
    base must be between 2 and 10\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x/base^0, base^0)\nend\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that converts a number to a binary string.\nThe function\
    \ should take one argument, the number, and return a string containing the binary\
    \ representation of that number.\nThe function should throw an error if the argument\
    \ is not an integer.\nThe function should throw an error if the argument is not\
    \ between 2 and 10.\nThe function should throw an error if the argument is not\
    \ an integer.\nThe function should throw an error if the argument is not between\
    \ 2 and 10.\nThe function should throw an error if the argument is not an integer.\n\
    The function should throw an error if the argument is not between 2 and 10.\n\
    The function should throw an error if the argument is not an integer.\nThe function\
    \ should throw an error if the argument is not between 2 and 10.\nThe function\
    \ should throw an error if the argument is not an integer.\nThe function should\
    \ throw an error if the argument is not between 2 and 10.\nThe function should\
    \ throw an error if the argument is not an integer.\nThe function should throw\
    \ an error if the argument is not between 2 and 10.\nThe function should throw\
    \ an error if the argument is not an integer.\nThe function should throw an error\
    \ if the argument is not between 2 and 10.\nThe function should throw an error\
    \ if the argument is not an integer.\nThe function should throw an error if the\
    \ argument is not between 2 and 10.\nThe function should throw an error if the\
    \ argument is not an integer.\nThe function should throw an error if the argument\
    \ is not between 2 and 10.\nThe function should throw an error if the argument\
    \ is not an integer.\nThe function should throw an error if the argument is not\
    \ between 2 and 10.\nThe function should throw an error if the argument is not\
    \ an integer.\nThe function should throw an error if the argument is not between\
    \ 2 and 10.\nThe function should throw an error if the argument is not an integer.\n\
    The function should throw an error if the argument is not between 2 and 10.\n\
    The function should throw an error if the argument is not an integer.\nThe function\
    \ should throw an error if the argument is not between 2 and 10.\nThe function\
    \ should throw an error if the argument is not an integer.\nThe function should\
    \ throw an error if the argument is not between 2 and 10.\nThe function should\
    \ throw an error if the argument is not an integer.\nThe function should throw\
    \ an error if the argument is not between 2 and 10.\nThe function should throw\
    \ an error if the argument is not an integer.\nThe function should throw an error\
    \ if the argument is not between 2 and 10.\nThe function should throw an error\
    \ if the argument is not an integer.\nThe function should throw an error if the\
    \ argument is not between 2 and 10.\nThe function should throw an error if the\
    \ argument is not an integer.\nThe function should throw an error if the argument\
    \ is not between 2 and 10.\nThe function should throw an error if the argument\
    \ is not an integer.\nThe function should throw \nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq26p9vij.jl:19\nin expression starting at\
    \ /tmp/tmpq26p9vij.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        error(\"Base must\
    \ be between 2 and 36.\")\n    end\n    \n    if base == 10\n        return toString(x)\n\
    \    end\n    \n    if base == 2\n        if x == 0\n            return \"\"\n\
    \        end\n        \n        if x == 1\n            return \"2\"\n        end\n\
    \        \n        if x == 2\n            return \"10\"\n        end\n       \
    \ \n        if x == 3\n            return \"100\"\n        end\n        \n   \
    \     if x == 4\n            return \"1000\"\n        end\n        \n        if\
    \ x == 5\n            return \"10000\"\n        end\n        \n        if x ==\
    \ 6\n            return \"100000\"\n        end\n        \n        if x == 7\n\
    \            return \"1000000\"\n        end\n        \n        if x == 8\n  \
    \          return \"10000000\"\n        end\n        \n        if x == 9\n   \
    \         return \"100000000\"\n        end\n        \n        if x == 10\n  \
    \          return \"1000000000\"\n        end\n        \n        if x == 11\n\
    \            return \"10000000000\"\n        end\n        \n        if x == 12\n\
    \            return \"100000000000\"\n        end\n        \n        if x == 13\n\
    \            return \"1000000000000\"\n        end\n        \n        if x ==\
    \ 14\n            return \"10000000000000\"\n        end\n        \n        if\
    \ x == 15\n            return \"100000000000000\"\n        end\n        \n   \
    \     if x == 16\n            return \"1000000000000000\"\n        end\n     \
    \   \n        if x == 17\n            return \"10000000000000000\"\n        end\n\
    \        \n        if x == 18\n            return \"100000000000000000\"\n   \
    \     end\n        \n        if x == 19\n            return \"1000000000000000000\"\
    \n        end\n        \n        if x == 20\n            return \"10000000000000000000\"\
    \n        end\n        \n        if x == 21\n            return \"100000000000000000000\"\
    \n        end\n        \n        if x == 22\n            return \"1000000000000000000000\"\
    \n        end\n        \n        if x == 23\n            return \"10000000000000000000000\"\
    \n        end\n        \n        if x == 24\n            return \"100000000000000000000000\"\
    \n        end\n        \n        if x == 25\n            return \"1000000000000000000000000\"\
    \n        end\n        \n        if x == 26\n            return \"10000000000000000000000000\"\
    \n        end\n        \n        if x == 27\n            return \"100000000000000000000000000\"\
    \n        end\n        \n        if x == 28\n            return \"1000000000000000000000000000\"\
    \n        end\n        \n        if x == 29\n            return \"10000000000000000000000000000\"\
    \n        end\n        \n        if x == 30\n            return \"100000000000000000000000000000\"\
    \n        end\n        \n        if x == 31\n            return \"1000000000000000000000000000000\"\
    \n        end\n        \n        if x == 32\n            return \"10000000000000000000000000000000\"\
    \n        end\n        \n        if x == 33\n            return \"100000000000000000000000000000000\"\
    \n        end\n        \n        if x == 34\n            return \"1000000000000000000000000000000000\"\
    \n        end\n        \n        if x == 35\n\nusing Test\n\n@testset begin\n\n\
    candidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt6qwq783.jl:1\nin expression starting at /tmp/tmpt6qwq783.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base == 10 \n        digits = digits(x)\n    \
    \    return digits[digits.length-1]\n    digits = digits(x)\n    digits = digits[digits.length-1]\n\
    \    digits = digits[digits.length-1]\n    digits = digits[digits.length-1]\n\
    \    digits = digits[digits.length-1]\n    digits = digits[digits.length-1]\n\
    \    digits = digits[digits.length-1]\n    digits = digits[digits.length-1]\n\
    \    digits = digits[digits.length-1]\n    digits = digits[digits.length-1]\n\
    \    digits = digits[digits.length-1]\n    digits = digits[digits.length-1]\n\
    \    digits = digits[digits.length-1]\n    digits = digits[digits.length-1]\n\
    \    digits = digits[digits.length-1]\n    digits = digits[digits.length-1]\n\
    \    digits = digits[digits.length-1]\n    digits = digits[digits.length-1]\n\
    \    digits = digits[digits.length-1]\n    digits = digits[digits.length-1]\n\
    \    digits = digits[digits.length-1]\n    digits = digits[digits.length-1]\n\
    \    digits = digits[digits.length-1]\n    digits = digits[digits.length-1]\n\
    \    digits = digits[digits.length-1]\n    digits = digits[digits.length-1]\n\
    \    digits = digits[digits.length-1]\n    digits = digits[digits.length-1]\n\
    \    digits = digits[digits.length-1]\n    digits = digits[digits.length-1]\n\
    \    digits = digits[digits.length-1]\n    digits = digits[digits.length-1]\n\
    \    digits = digits[digits.length-1]\n    digits = digits[digits.length-1]\n\
    \    digits = digits[digits.length-1]\n    digits = digits[digits.length-1]\n\
    \    digits = digits[digits.length-1]\n    digits = digits[digits.length-1]\n\
    \    digits = digits[digits.length-1]\n    digits = digits[digits.length-1]\n\
    \    digits = digits[digits.length-1]\n    digits = digits[digits.length-1]\n\
    \    digits = digits[digits.length-1]\n    digits = digits[digits.length-1]\n\
    \    digits = digits[digits.length-1]\n    digits = digits[digits.length-1]\n\
    \    digits = digits[digits.length-1]\n    digits = digits[digits.length-1]\n\
    \    digits = digits[digits.length-1]\n    digits = digits[digits.length-1]\n\
    \    digits = digits[digits.length-1]\n    digits = digits[digits.length-1]\n\
    \    digits = digits[digits.length-1]\n    digits = digits[digits.length-1]\n\
    \    digits = digits[digits.length-1]\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3)\
    \ == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnbvqcd1d.jl:1\nin expression starting at /tmp/tmpnbvqcd1d.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    elseif base == 10\n        return string(x, base)\n    else\n        digits\
    \ = string(x, base)\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt17gp7lz.jl:1\nin expression starting at /tmp/tmpt17gp7lz.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x * base^2)\nend\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 3)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n<text>\nExercise\nWrite\
    \ a function that converts binary numbers to decimal numbers. \nThe function should\
    \ accept a binary number as input and return its decimal equivalent.\nThe function\
    \ should throw an error if the input is not a binary number.\nThe function should\
    \ throw an error if the input contains more than 32 bits.\nThe function should\
    \ throw an error if the input contains more than 32 bits.\nThe function should\
    \ throw an error if the input contains more than 32 bits.\nThe function should\
    \ throw an error if the input contains more than 32 bits.\nThe function should\
    \ throw an error if the input contains more than 32 bits.\nThe function should\
    \ throw an error if the input contains more than 32 bits.\nThe function should\
    \ throw an error if the input contains more than 32 bits.\nThe function should\
    \ throw an error if the input contains more than 32 bits.\nThe function should\
    \ throw an error if the input contains more than 32 bits.\nThe function should\
    \ throw an error if the input contains more than 32 bits.\nThe function should\
    \ throw an error if the input contains more than 32 bits.\nThe function should\
    \ throw an error if the input contains more than 32 bits.\nThe function should\
    \ throw an error if the input contains more than 32 bits.\nThe function should\
    \ throw an error if the input contains more than 32 bits.\nThe function should\
    \ throw an error if the input contains more than 32 bits.\nThe function should\
    \ throw an error if the input contains more than 32 bits.\nThe function should\
    \ throw an error if the input contains more than 32 bits.\nThe function should\
    \ throw an error if the input contains more than 32 bits.\nThe function should\
    \ throw an error if the input contains more than 32 bits.\nThe function should\
    \ throw an error if the input contains more than 32 bits.\nThe function should\
    \ throw an error if the input contains more than 32 bits.\nThe function should\
    \ throw an error if the input contains more than 32 bits.\nThe function should\
    \ throw an error if the input contains more than 32 bits.\nThe function should\
    \ throw an error if the input contains more than 32 bits.\nThe function should\
    \ throw an error if the input contains more than 32 bits.\nThe function should\
    \ throw an error if the input contains more than 32 bits.\nThe function should\
    \ throw an error if the input contains more than 32 bits.\nThe function should\
    \ throw an error if the input contains more than 32 bits.\nThe function should\
    \ throw an error if the input contains more than 32 bits.\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuf2_6699.jl:19\nin expression starting at\
    \ /tmp/tmpuf2_6699.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    Base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x * base^2)\nend\n</cell>\n<text>\nExercise 4\n\
    Write a function that converts binary numbers to decimal.\nThe function should\
    \ accept a binary string as input and return a decimal number.\nThe function should\
    \ throw an error if the input is not binary.\nThe function should throw an error\
    \ if the input contains non-binary digits.\nThe function should throw an error\
    \ if the input contains more than 32 bits.\nThe function should throw an error\
    \ if the input contains negative numbers.\nThe function should throw an error\
    \ if the input contains non-numeric characters.\nThe function should throw an\
    \ error if the input contains leading zeros.\nThe function should throw an error\
    \ if the input contains trailing zeros.\nThe function should throw an error if\
    \ the input contains leading or trailing zeros.\nThe function should throw an\
    \ error if the input contains non-numeric characters.\nThe function should throw\
    \ an error if the input contains leading zeros.\nThe function should throw an\
    \ error if the input contains trailing zeros.\nThe function should throw an error\
    \ if the input contains leading or trailing zeros.\nThe function should throw\
    \ an error if the input contains non-numeric characters.\nThe function should\
    \ throw an error if the input contains leading zeros.\nThe function should throw\
    \ an error if the input contains trailing zeros.\nThe function should throw an\
    \ error if the input contains leading or trailing zeros.\nThe function should\
    \ throw an error if the input contains non-numeric characters.\nThe function should\
    \ throw an error if the input contains leading zeros.\nThe function should throw\
    \ an error if the input contains trailing zeros.\nThe function should throw an\
    \ error if the input contains leading or trailing zeros.\nThe function should\
    \ throw an error if the input contains non-numeric characters.\nThe function should\
    \ throw an error if the input contains leading zeros.\nThe function should throw\
    \ an error if the input contains trailing zeros.\nThe function should throw an\
    \ error if the input contains leading or trailing zeros.\nThe function should\
    \ throw an error if the input contains non-numeric characters.\nThe function should\
    \ throw an error if the input contains leading zeros.\nThe function should throw\
    \ an error if the input contains trailing zeros.\nThe function should throw an\
    \ error if the input contains leading or trailing zeros.\nThe function should\
    \ throw an error if the input contains non-numeric characters.\nThe function should\
    \ throw an error if the input contains leading zeros.\nThe function should throw\
    \ an error if the input contains trailing zeros.\nThe function should throw an\
    \ error if the input contains leading or trailing zeros.\nThe function should\
    \ throw an error if the input contains non-numeric characters.\nThe function should\
    \ throw an error if the input contains leading zeros.\nThe function should throw\
    \ an error if the input contains trailing zeros.\nThe function \nusing Test\n\n\
    @testset begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\"\
    )\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\"\
    )\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\"\
    )\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t\
    @test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5,\
    \ 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) ==\
    \ \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqq71ehjs.jl:19\nin expression starting at\
    \ /tmp/tmpqq71ehjs.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10 \n        error(\"Base must be greater\
    \ than or equal to 10\")\n    elseif base == 10 \n        return toString(x)\n\
    \    elseif base == 2 \n        return toString(x * 10)\n    elseif base == 3\
    \ \n        return toString(x * 100)\n    elseif base == 4 \n        return toString(x\
    \ * 1000)\n    elseif base == 5 \n        return toString(x * 10000)\n    elseif\
    \ base == 6 \n        return toString(x * 100000)\n    elseif base == 7 \n   \
    \     return toString(x * 1000000)\n    elseif base == 8 \n        return toString(x\
    \ * 10000000)\n    elseif base == 9 \n        return toString(x * 100000000)\n\
    \    else\n        error(\"Base must be between 2 and 9\")\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv82_dkag.jl:36\nin expression starting at\
    \ /tmp/tmpv82_dkag.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x * base^2)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8nlryrxe.jl:19\nin expression starting at\
    \ /tmp/tmp8nlryrxe.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10\n        return str(x)\n    \n    digits\
    \ = digits(x)\n    digits = digits[digits.length - base]\n    digits = digits[0\
    \ : digits.length - base]\n    \n    return digits + str(x)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nchange_base(8, 3)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n\
    <text>\nExercise: Write a function that converts a number from base 10 to base\
    \ 16 (hexadecimal).\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_oji6o9t.jl:21\nin expression starting at\
    \ /tmp/tmp_oji6o9t.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base == 10 \n        digits = \"0123456789\"\n\
    \    else \n        digits = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    return\
    \ digits[base-1] + digits[x % base]\nend\n</cell>\n<code language=julia-1.1>\n\
    change_base(8, 3)\n</cell>\n<code language=julia-1.1>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.1>\nchange_base(7, 2)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that converts a number to a string with leading zeroes.\nusing Test\n\
    \n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\"\
    )\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\"\
    )\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\"\
    )\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t\
    @test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5,\
    \ 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) ==\
    \ \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn6u0olxg.jl:18\nin expression starting at\
    \ /tmp/tmpn6u0olxg.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        error(\"Base must\
    \ be between 2 and 36\")\n    elseif base == 2\n        return string(x)\n   \
    \ else\n        return string(x * base^2)\nend\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 3)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that converts a binary number to its decimal equivalent (base 10).\
    \ \nThe function should accept a binary number as its first argument and return\
    \ a string representation of its decimal equivalent (base 10). \nThe function\
    \ should raise an error if the binary number is not of length 2.\nThe function\
    \ should raise an error if the binary number is not of length 1 or if the first\
    \ character is not a '1' or '0'.\nThe function should raise an error if the binary\
    \ number is not of length 2 or if the first two characters are not '10' or '01'.\n\
    The function should raise an error if the binary number is not of length 3 or\
    \ if the first three characters are not '110' or '010'.\nThe function should raise\
    \ an error if the binary number is not of length 4 or if the first four characters\
    \ are not '1110' or '0110'.\nThe function should raise an error if the binary\
    \ number is not of length 5 or if the first five characters are not '1111' or\
    \ '0111'.\nThe function should raise an error if the binary number is not of length\
    \ 6 or if the first six characters are not '11110' or '01110'.\nThe function should\
    \ raise an error if the binary number is not of length 7 or if the first seven\
    \ characters are not '11111' or '011110'.\nThe function should raise an error\
    \ if the binary number is not of length 8 or if the first eight characters are\
    \ not '111110' or '0111101'.\nThe function should raise an error if the binary\
    \ number is not of length 9 or if the first nine characters are not '1111110'\
    \ or '0111100'.\nThe function should raise an error if the binary number is not\
    \ of length 10 or if the first ten characters are not '11111110' or '01111000'.\n\
    The function should raise an error if the binary number is not of length 11 or\
    \ if the first eleven characters are not '111111110' or '011110000'.\nThe function\
    \ should raise an error if the binary number is not of length 12 or if the first\
    \ twelve characters are not '1111111101' or '0111100000'.\nThe function should\
    \ raise an error if the binary number is not of length 13 or if the first thirteen\
    \ characters are not '11111111010' or '01111000000'.\nThe function should raise\
    \ an error if the binary number is not of length \nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp9io6u8z.jl:19\nin expression starting at\
    \ /tmp/tmpp9io6u8z.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 10 \n        error(\"Base must\
    \ be between 2 and 10\")\n    else if base == 2 \n        return string(x)\n \
    \   else \n        return string(x*base^2)\nend\n</code>\n<|/ a |>\n<| c |>\n\
    I like your solution, however it only works for base 10. I'm looking for a solution\
    \ that works for base 2 as well. Thanks though!\n<|/ c |>\n<| c |>\nI updated\
    \ my answer to include a solution for base 2 as well\n<|/ c |>\n<| c |>\nThanks\
    \ so much! This works perfectly. I'm going to accept this as the answer as soon\
    \ as I can.\n<|/ c |>\n<| c |>\nI added a solution for base 2 as well\n<|/ c |>\n\
    <| a |>\nI wrote a function that converts base to base 10 and vice versa. \n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiqlvyv9a.jl:14\nin expression starting at\
    \ /tmp/tmpiqlvyv9a.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10\n        error(\"base must be greater\
    \ than or equal to 10\")\n    elseif base > 36\n        error(\"base must be less\
    \ than or equal to 36\")\n    else\n        return toString(base * x)\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyeydj8tq.jl:19\nin expression starting at\
    \ /tmp/tmpyeydj8tq.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x * base^2)\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that converts binary numbers to decimal numbers. \nThe function\
    \ should accept a binary string as input and return a decimal number.\nThe binary\
    \ string may contain leading zeros.\nThe function should throw an error if the\
    \ input string is not in binary format.\nThe function should throw an error if\
    \ the input string contains more than 32 bits.\nThe function should throw an error\
    \ if the input string contains more than 32 bits.\nThe function should throw an\
    \ error if the input string contains more than 32 bits.\nThe function should throw\
    \ an error if the input string contains more than 32 bits.\nThe function should\
    \ throw an error if the input string contains more than 32 bits.\nThe function\
    \ should throw an error if the input string contains more than 32 bits.\nThe function\
    \ should throw an error if the input string contains more than 32 bits.\nThe function\
    \ should throw an error if the input string contains more than 32 bits.\nThe function\
    \ should throw an error if the input string contains more than 32 bits.\nThe function\
    \ should throw an error if the input string contains more than 32 bits.\nThe function\
    \ should throw an error if the input string contains more than 32 bits.\nThe function\
    \ should throw an error if the input string contains more than 32 bits.\nThe function\
    \ should throw an error if the input string contains more than 32 bits.\nThe function\
    \ should throw an error if the input string contains more than 32 bits.\nThe function\
    \ should throw an error if the input string contains more than 32 bits.\nThe function\
    \ should throw an error if the input string contains more than 32 bits.\nThe function\
    \ should throw an error if the input string contains more than 32 bits.\nThe function\
    \ should throw an error if the input string contains more than 32 bits.\nThe function\
    \ should throw an error if the input string contains more than 32 bits.\nThe function\
    \ should throw an error if the input string contains more than 32 bits.\nThe function\
    \ should throw an error if the input string contains more than 32 bits.\nThe function\
    \ should throw an error if the input string contains more than 32 bits.\nThe function\
    \ should throw an error if the input string contains more than 32 bits.\nThe function\
    \ should throw an error if the input string contains more than 32 bits.\nThe function\
    \ should throw an error if the input string contains more than 32 bits.\nThe function\
    \ should throw an error if the input string contains more than 32 bits.\nThe function\
    \ should throw an error if the input string contains more than 32 bits.\nThe function\
    \ should throw an error if the input string contains more than 32 bits.\nThe function\
    \ should throw an error if the input string contains more than 32 bits.\nThe function\
    \ should throw an error if the \nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxffafsfh.jl:19\nin expression starting at\
    \ /tmp/tmpxffafsfh.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 10\n        throw(ArgumentError(\"\
    base must be between 2 and 10\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x*base)\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that converts binary to decimal.\nThe function should take a string\
    \ as input, and return a string as output.\nThe function should throw an error\
    \ if the input is not binary.\nThe function should throw an error if the input\
    \ contains more than 1 '1'.\nThe function should throw an error if the input contains\
    \ more than 1 '0'.\nThe function should throw an error if the input contains more\
    \ than 2 characters.\nThe function should throw an error if the input contains\
    \ more than 2 characters.\nThe function should throw an error if the input contains\
    \ more than 2 characters.\nThe function should throw an error if the input contains\
    \ more than 2 characters.\nThe function should throw an error if the input contains\
    \ more than 2 characters.\nThe function should throw an error if the input contains\
    \ more than 2 characters.\nThe function should throw an error if the input contains\
    \ more than 2 characters.\nThe function should throw an error if the input contains\
    \ more than 2 characters.\nThe function should throw an error if the input contains\
    \ more than 2 characters.\nThe function should throw an error if the input contains\
    \ more than 2 characters.\nThe function should throw an error if the input contains\
    \ more than 2 characters.\nThe function should throw an error if the input contains\
    \ more than 2 characters.\nThe function should throw an error if the input contains\
    \ more than 2 characters.\nThe function should throw an error if the input contains\
    \ more than 2 characters.\nThe function should throw an error if the input contains\
    \ more than 2 characters.\nThe function should throw an error if the input contains\
    \ more than 2 characters.\nThe function should throw an error if the input contains\
    \ more than 2 characters.\nThe function should throw an error if the input contains\
    \ more than 2 characters.\nThe function should throw an error if the input contains\
    \ more than 2 characters.\nThe function should throw an error if the input contains\
    \ more than 2 characters.\nThe function should throw an error if the input contains\
    \ more than 2 characters.\nThe function should throw an error if the input contains\
    \ more than 2 characters.\nThe function should throw an error if the input contains\
    \ more than 2 characters.\nThe function should throw an error if the input contains\
    \ more than 2 characters.\nThe function should throw an error if the input contains\
    \ more than 2 characters.\nThe function should throw an error if the input contains\
    \ more than 2 characters.\nThe function should throw an error if the input contains\
    \ more than 2 characters.\nThe function should throw an error if the input contains\
    \ more than 2 characters.\nThe function should throw an error if the input contains\
    \ more than 2 characters.\nThe function should throw an error if the input contains\
    \ more than 2 characters.\nThe function should throw an error if the input contains\
    \ more than 2 characters.\nThe function should throw an error if the input contains\
    \ more than 2 characters.\nThe function should throw an error if the input contains\
    \ more than 2 characters.\nThe function should \nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkxbem1ek.jl:19\nin expression starting at\
    \ /tmp/tmpkxbem1ek.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    else if base == 2\n        return string(x)\n\
    \    else\n        return string(x * base^2)\nend\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplym_00xh.jl:14\nin expression starting at\
    \ /tmp/tmplym_00xh.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10\n        return str((x % base) + base)\n\
    \    else\n        return str((x % base) / base)\nend\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 3)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of characters in the string.\n\
    The function should ignore all non-alphabetic characters and return the number\
    \ of characters in the string.\nThe function should ignore all spaces.\nThe function\
    \ should ignore all punctuation.\nThe function should ignore all numbers.\nThe\
    \ function should ignore all non-alphabetic characters and spaces.\nThe function\
    \ should ignore all punctuation and spaces.\nThe function should ignore all numbers.\n\
    The function should ignore all non-alphabetic characters, spaces, and punctuation.\n\
    The function should ignore all punctuation and spaces.\nThe function should ignore\
    \ all numbers.\nThe function should ignore all non-alphabetic characters, spaces,\
    \ and punctuation.\nThe function should ignore all punctuation and spaces.\nThe\
    \ function should ignore all numbers.\nThe function should ignore all non-alphabetic\
    \ characters, spaces, and punctuation.\nThe function should ignore all punctuation\
    \ and spaces.\nThe function should ignore all numbers.\nThe function should ignore\
    \ all non-alphabetic characters, spaces, and punctuation.\nThe function should\
    \ ignore all punctuation and spaces.\nThe function should ignore all numbers.\n\
    The function should ignore all non-alphabetic characters, spaces, and punctuation.\n\
    The function should ignore all punctuation and spaces.\nThe function should ignore\
    \ all numbers.\nThe function should ignore all non-alphabetic characters, spaces,\
    \ and punctuation.\nThe function should ignore all punctuation and spaces.\nThe\
    \ function should ignore all numbers.\nThe function should ignore all non-alphabetic\
    \ characters, spaces, and punctuation.\nThe function should ignore all punctuation\
    \ and spaces.\nThe function should ignore all numbers.\nThe function should ignore\
    \ all non-alphabetic characters, spaces, and punctuation.\nThe function should\
    \ ignore all punctuation and spaces.\nThe function should ignore all numbers.\n\
    The function should ignore all non-alphabetic characters, spaces, and punctuation.\n\
    The function should ignore all punctuation and spaces.\nThe function should ignore\
    \ all numbers.\nThe function should ignore all non-alphabetic characters, spaces,\
    \ and punctuation.\nThe function should ignore all punctuation and spaces.\nThe\
    \ function should ignore all numbers.\nThe function should ignore all non-alphabetic\
    \ characters, spaces, and punctuation.\nThe \nusing Test\n\n@testset begin\n\n\
    candidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoq2tmtld.jl:17\nin expression starting at\
    \ /tmp/tmpoq2tmtld.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        error(\"Base must\
    \ be between 2 and 36\")\n    elseif base == 2\n        return string(x)\n   \
    \ else\n        return string(x * base)\nend\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 3)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that converts binary numbers to decimal.\nThe input is a string containing\
    \ only 0s and 1s.\nThe output is a string containing the decimal representation\
    \ of the binary number.\nThe function should raise an error if the input is not\
    \ valid.\nThe function should raise an error if the input contains more than 32\
    \ bits.\nThe function should raise an error if the input contains more than 32\
    \ bits.\nThe function should raise an error if the input contains more than 32\
    \ bits.\nThe function should raise an error if the input contains more than 32\
    \ bits.\nThe function should raise an error if the input contains more than 32\
    \ bits.\nThe function should raise an error if the input contains more than 32\
    \ bits.\nThe function should raise an error if the input contains more than 32\
    \ bits.\nThe function should raise an error if the input contains more than 32\
    \ bits.\nThe function should raise an error if the input contains more than 32\
    \ bits.\nThe function should raise an error if the input contains more than 32\
    \ bits.\nThe function should raise an error if the input contains more than 32\
    \ bits.\nThe function should raise an error if the input contains more than 32\
    \ bits.\nThe function should raise an error if the input contains more than 32\
    \ bits.\nThe function should raise an error if the input contains more than 32\
    \ bits.\nThe function should raise an error if the input contains more than 32\
    \ bits.\nThe function should raise an error if the input contains more than 32\
    \ bits.\nThe function should raise an error if the input contains more than 32\
    \ bits.\nThe function should raise an error if the input contains more than 32\
    \ bits.\nThe function should raise an error if the input contains more than 32\
    \ bits.\nThe function should raise an error if the input contains more than 32\
    \ bits.\nThe function should raise an error if the input contains more than 32\
    \ bits.\nThe function should raise an error if the input contains more than 32\
    \ bits.\nThe function should raise an error if the input contains more than 32\
    \ bits.\nThe function should raise an error if the input contains more than 32\
    \ bits.\nThe function should raise an error if the input contains more than 32\
    \ bits.\nThe function should raise an error if the input contains more than 32\
    \ bits.\nThe function should raise an error if the input contains more than 32\
    \ bits.\nThe function should raise an error if the input contains more than 32\
    \ bits.\nThe function should raise an error if the input contains more than 32\
    \ bits.\n\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4aprfh46.jl:19\nin expression starting at\
    \ /tmp/tmp4aprfh46.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base == 10 \n        return toString(x::Int64)\n\
    \    else \n        return toString(x::Int64 / base::Int64 * base::Int64 + base::Int64\
    \ % base)\nend\n</cell>\n<code language=julia-1.3>\nchange_base(8, 3)\n</cell>\n\
    <code language=julia-1.3>\nchange_base(8, 2)\n</cell>\n<code language=julia-1.3>\n\
    change_base(7, 2)\n</cell>\n<text>\nExercise\nWrite a function that converts binary\
    \ numbers to decimal numbers.\nThe function should accept a binary string as input\
    \ and return a decimal string.\nThe function should accept a binary string as\
    \ input and return a decimal string.\nThe function should accept a binary string\
    \ as input and return a decimal string.\nThe function should accept a binary string\
    \ as input and return a decimal string.\nThe function should accept a binary string\
    \ as input and return a decimal string.\nThe function should accept a binary string\
    \ as input and return a decimal string.\nThe function should accept a binary string\
    \ as input and return a decimal string.\nThe function should accept a binary string\
    \ as input and return a decimal string.\nThe function should accept a binary string\
    \ as input and return a decimal string.\nThe function should accept a binary string\
    \ as input and return a decimal string.\nThe function should accept a binary string\
    \ as input and return a decimal string.\nThe function should accept a binary string\
    \ as input and return a decimal string.\nThe function should accept a binary string\
    \ as input and return a decimal string.\nThe function should accept a binary string\
    \ as input and return a decimal string.\nThe function should accept a binary string\
    \ as input and return a decimal string.\nThe function should accept a binary string\
    \ as input and return a decimal string.\nThe function should accept a binary string\
    \ as input and return a decimal string.\nThe function should accept a binary string\
    \ as input and return a decimal string.\nThe function should accept a binary string\
    \ as input and return a decimal string.\nThe function should accept a binary string\
    \ as input and return a decimal string.\nThe function should accept a binary string\
    \ as input and return a decimal string.\nThe function should accept a binary string\
    \ as input and return a decimal string.\nThe function should accept a binary string\
    \ as input and return a decimal string.\nThe function should accept a binary string\
    \ as input and return a decimal string.\nThe function should accept a binary string\
    \ as input and return a decimal string.\nThe function should accept a binary string\
    \ as input and return a decimal string.\nThe function should accept a binary string\
    \ as input and return a decimal string.\nThe function should accept a binary string\
    \ as input and return a decimal string.\nThe function should accept a binary string\
    \ as input and return a decimal string.\nThe function should accept a binary string\
    \ as input and return a decimal string.\nThe function should accept a binary string\
    \ as input and return a decimal string.\nThe function should \nusing Test\n\n\
    @testset begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\"\
    )\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\"\
    )\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\"\
    )\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t\
    @test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5,\
    \ 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) ==\
    \ \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy3z3mh1a.jl:17\nin expression starting at\
    \ /tmp/tmpy3z3mh1a.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 10\n        error(\"Invalid\
    \ base\")\n    elseif base == 2\n        return string(x)\n    else\n        return\
    \ string(x, base)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9woh559z.jl:19\nin expression starting at\
    \ /tmp/tmp9woh559z.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    \n    digits = zeros(Int, 36)\n    digits[base]\
    \ = 1;\n    \n    digits = digits[digits]\n    \n    digits = digits[digits]\n\
    \    \n    digits = digits[digits]\n    \n    digits = digits[digits]\n    \n\
    \    digits = digits[digits]\n    \n    digits = digits[digits]\n    \n    digits\
    \ = digits[digits]\n    \n    digits = digits[digits]\n    \n    digits = digits[digits]\n\
    \    \n    digits = digits[digits]\n    \n    digits = digits[digits]\n    \n\
    \    digits = digits[digits]\n    \n    digits = digits[digits]\n    \n    digits\
    \ = digits[digits]\n    \n    digits = digits[digits]\n    \n    digits = digits[digits]\n\
    \    \n    digits = digits[digits]\n    \n    digits = digits[digits]\n    \n\
    \    digits = digits[digits]\n    \n    digits = digits[digits]\n    \n    digits\
    \ = digits[digits]\n    \n    digits = digits[digits]\n    \n    digits = digits[digits]\n\
    \    \n    digits = digits[digits]\n    \n    digits = digits[digits]\n    \n\
    \    digits = digits[digits]\n    \n    digits = digits[digits]\n    \n    digits\
    \ = digits[digits]\n    \n    digits = digits[digits]\n    \n    digits = digits[digits]\n\
    \    \n    digits = digits[digits]\n    \n    digits = digits[digits]\n    \n\
    \    digits = digits[digits]\n    \n    digits = digits[digits]\n    \n    digits\
    \ = digits[digits]\n    \n    digits = digits[digits]\n    \n    digits = digits[digits]\n\
    \    \n    digits = digits[digits]\n    \n    digits = digits[digits]\n    \n\
    \    digits = digits[digits]\n    \n    digits = digits[digits]\n    \n    digits\
    \ = digits[digits]\n    \n    digits = digits[digits]\n    \n    digits = digits[digits]\n\
    \    \n    digits = digits[digits]\n    \n    digits = digits[digits]\n    \n\
    \    digits = digits[digits]\n    \n    \nusing Test\n\n@testset begin\n\ncandidate\
    \ = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3)\
    \ == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmponpkjxwq.jl:1\nin expression starting at /tmp/tmponpkjxwq.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10 \n        return str((x % base) + base)\n\
    \    else \n        return str((x / base) + base)\nend\n</cell>\n<code language=julia-1.3>\n\
    change_base(8, 3)\n</cell>\n<code language=julia-1.3>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.3>\nchange_base(7, 2)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that converts binary numbers to decimal numbers. \nThe function should\
    \ take a string as input and return an Int64.\nThe input string should contain\
    \ only 0s and 1s.\nThe function should return 0 if the input string contains no\
    \ 1s.\nThe function should return -1 if the input string contains at least one\
    \ 0.\nThe function should return an error if the input string contains more than\
    \ one 0.\nThe function should return an error if the input string contains more\
    \ than one 1.\nThe function should return an error if the input string contains\
    \ more than one 0.\nThe function should return an error if the input string contains\
    \ more than one 1.\nThe function should return an error if the input string contains\
    \ more than one 0.\nThe function should return an error if the input string contains\
    \ more than one 1.\nThe function should return an error if the input string contains\
    \ more than one 0.\nThe function should return an error if the input string contains\
    \ more than one 1.\nThe function should return an error if the input string contains\
    \ more than one 0.\nThe function should return an error if the input string contains\
    \ more than one 1.\nThe function should return an error if the input string contains\
    \ more than one 0.\nThe function should return an error if the input string contains\
    \ more than one 1.\nThe function should return an error if the input string contains\
    \ more than one 0.\nThe function should return an error if the input string contains\
    \ more than one 1.\nThe function should return an error if the input string contains\
    \ more than one 0.\nThe function should return an error if the input string contains\
    \ more than one 1.\nThe function should return an error if the input string contains\
    \ more than one 0.\nThe function should return an error if the input string contains\
    \ more than one 1.\nThe function should return an error if the input string contains\
    \ more than one 0.\nThe function should return an error if the input string contains\
    \ more than one 1.\nThe function should return an error if the input string contains\
    \ more than one 0.\nThe function should return an error if the input string contains\
    \ more than one 1.\nThe function should return an error if the input string contains\
    \ more than one 0.\nThe function should return an error if the input string contains\
    \ more than one 1.\nThe function should return an error if the input string contains\
    \ more than one 0.\nThe function should return an error if the input string contains\
    \ more than one 1.\nThe function should return an error if the input string contains\
    \ more than one 0.\nThe function should return an error if the input string contains\
    \ more than one 1.\nThe function should return an error if the input string contains\
    \ more than one 0.\nThe function should return an error if the input string contains\
    \ more than one 1.\nThe function should return an error if the input string contains\
    \ more than one \nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t\
    @test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpggrafo37.jl:17\nin expression starting at\
    \ /tmp/tmpggrafo37.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10\n        return show(base * x)\n   \
    \ else\n        return show(base * x / 10)\nend\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 3)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that converts a binary number to its decimal equivalent. \nThe function\
    \ should take a single argument that is a binary number represented as a string.\n\
    The function should return the decimal equivalent of the binary number as a string.\n\
    The function should raise an error if the binary number is not valid.\nThe function\
    \ should raise an error if the binary number contains more than 32 bits.\nThe\
    \ function should raise an error if the binary number contains less than 8 bits.\n\
    The function should raise an error if the binary number contains more than 8 bits.\n\
    The function should raise an error if the binary number contains less than 8 bits.\n\
    The function should raise an error if the binary number contains more than 8 bits.\n\
    The function should raise an error if the binary number contains more than 32\
    \ bits.\nThe function should raise an error if the binary number contains less\
    \ than 8 bits.\nThe function should raise an error if the binary number contains\
    \ less than 8 bits.\nThe function should raise an error if the binary number contains\
    \ less than 8 bits.\nThe function should raise an error if the binary number contains\
    \ less than 8 bits.\nThe function should raise an error if the binary number contains\
    \ less than 8 bits.\nThe function should raise an error if the binary number contains\
    \ less than 8 bits.\nThe function should raise an error if the binary number contains\
    \ less than 8 bits.\nThe function should raise an error if the binary number contains\
    \ less than 8 bits.\nThe function should raise an error if the binary number contains\
    \ less than 8 bits.\nThe function should raise an error if the binary number contains\
    \ less than 8 bits.\nThe function should raise an error if the binary number contains\
    \ less than 8 bits.\nThe function should raise an error if the binary number contains\
    \ less than 8 bits.\nThe function should raise an error if the binary number contains\
    \ less than 8 bits.\nThe function should raise an error if the binary number contains\
    \ less than 8 bits.\nThe function should raise an error if the binary number contains\
    \ less than 8 bits.\nThe function should raise an error if the binary number contains\
    \ less than 8 bits.\nThe function should raise an error if the binary number contains\
    \ less than 8 bits.\nThe function should raise an error if the binary number contains\
    \ less than 8 bits.\nThe function should raise an error if the binary number contains\
    \ less than 8 bits.\nThe function should raise an error if the binary number contains\
    \ less than 8 bits.\nThe function should raise an error if the binary number contains\
    \ less than 8 bits.\nThe function should raise an error if the binary \nusing\
    \ Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3)\
    \ == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2) ==\
    \ \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcr3v4gwl.jl:17\nin expression starting at\
    \ /tmp/tmpcr3v4gwl.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10\n        return str(x)\n    else\n \
    \       return change_base(x/base, base)*base\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp58e_6ujr.jl:17\nin expression starting at\
    \ /tmp/tmp58e_6ujr.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base == 10 \n        digits = digits(x)\n    \
    \    digits = digits[2:end]\n        digits = digits[2:end]\n        digits =\
    \ digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digit\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpean739tl.jl:1\nin expression starting at /tmp/tmpean739tl.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        digits = string(x)\n        digits = digits[2:end]\n      \
    \  digits = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        \nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpogatzoec.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpogatzoec.jl:1\n\
    in expression starting at /tmp/tmpogatzoec.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10\n        return str(x)\n    else\n \
    \       return change_base(x / base, base) + str(x % base)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nchange_base(8, 3)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that converts binary numbers to decimal numbers.\n\
    The function should take two arguments: a string representing a binary number\
    \ and a base between 2 and 64.\nThe function should return the decimal number\
    \ represented by the binary number in the specified base.\nThe function should\
    \ raise an error if the base is out of range.\nThe function should raise an error\
    \ if the binary number has more than 64 bits.\nThe function should raise an error\
    \ if the binary number has less than 2 bits.\nThe function should raise an error\
    \ if the binary number has any leading zeros.\nThe function should raise an error\
    \ if the binary number has any trailing zeros.\nThe function should raise an error\
    \ if the binary number has any leading or trailing zeros.\nThe function should\
    \ raise an error if the binary number has any leading or trailing zeros.\nThe\
    \ function should raise an error if the binary number has any leading or trailing\
    \ zeros.\nThe function should raise an error if the binary number has any leading\
    \ or trailing zeros.\nThe function should raise an error if the binary number\
    \ has any leading or trailing zeros.\nThe function should raise an error if the\
    \ binary number has any leading or trailing zeros.\nThe function should raise\
    \ an error if the binary number has any leading or trailing zeros.\nThe function\
    \ should raise an error if the binary number has any leading or trailing zeros.\n\
    The function should raise an error if the binary number has any leading or trailing\
    \ zeros.\nThe function should raise an error if the binary number has any leading\
    \ or trailing zeros.\nThe function should raise an error if the binary number\
    \ has any leading or trailing zeros.\nThe function should raise an error if the\
    \ binary number has any leading or trailing zeros.\nThe function should raise\
    \ an error if the binary number has any leading or trailing zeros.\nThe function\
    \ should raise an error if the binary number has any leading or trailing zeros.\n\
    The function should raise an error if the binary number has any leading or trailing\
    \ zeros.\nThe function should raise an error if the binary number has any leading\
    \ or trailing zeros.\nThe function should raise an error if the binary number\
    \ has any leading or trailing zeros.\nThe function should raise an error if the\
    \ binary number has any leading or trailing zeros.\nThe function should raise\
    \ an error if the binary number has any leading or trailing zeros.\nThe function\
    \ should raise an error if the binary number has any leading or trailing zeros.\n\
    The function \nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp71o0_cxb.jl:17\nin expression starting at\
    \ /tmp/tmp71o0_cxb.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base == 10 \n        digits = digits(x)\n    \
    \    return digits[1]\n    else \n        digits = digits(x)\n        digits[1]\
    \ = digits[1] * base\n        return join(digits)\nend\n</cell>\n<code language=julia-1.3>\n\
    change_base(8, 3)\n</cell>\n<text>\nExercise 2\nWrite a function that converts\
    \ a number to a string with leading zeros.\nIf the number is negative, add \"\
    -\" to the front of the string.\nIf the number is zero, return \"0\".\nIf the\
    \ number is positive, return the string with leading zeros.\nFor example, \n \
    \   convert_base(-3, 2)\nshould return \"-003\".\n    convert_base(3, 2)\nshould\
    \ return \"003\".\n    convert_base(3, 10)\nshould return \"0003\".\n    convert_base(-3,\
    \ 10)\nshould return \"-0003\".\n    convert_base(-3, 0)\nshould return \"-00\"\
    .\n    convert_base(0, 0)\nshould return \"0\".\n    convert_base(3, 0)\nshould\
    \ return \"3\".\n    convert_base(-3, 0)\nshould return \"-00\".\n    convert_base(-3,\
    \ 10)\nshould return \"-0003\".\n    convert_base(-3, 20)\nshould return \"-003\"\
    .\n    convert_base(-3, 30)\nshould return \"-0003\".\n    convert_base(-3, 40)\n\
    should return \"-003\".\n    convert_base(-3, 50)\nshould return \"-003\".\n \
    \   convert_base(-3, 60)\nshould return \"-0003\".\n    convert_base(-3, 70)\n\
    should return \"-003\".\n    convert_base(-3, 80)\nshould return \"-0003\".\n\
    \    convert_base(-3, 90)\nshould return \"-003\".\n    convert_base(-3, 100)\n\
    should return \"-0003\".\n    convert_base(-3, 110)\nshould return \"-003\".\n\
    \    convert_base(-3, 120)\nshould return \"-0003\".\n    convert_base(-3, 130)\n\
    should return \"-003\".\n    convert_base(-3, 140)\nshould return \"-0003\".\n\
    \    convert_base(-3, 150)\nshould return \"-003\".\n    convert_base(-3, 160)\n\
    should return \"-0003\".\n    convert_base(-3, 170)\nshould return \"-003\".\n\
    \    convert_base(-3, 180)\nshould return \"-0003\".\n    convert_base(-3, 190)\n\
    should return \"\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t\
    @test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp037pgjag.jl:20\nin expression starting at\
    \ /tmp/tmp037pgjag.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x * base^2)\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"\n    convert_base(x::Int64, base::Int64)::Int64\n    Convert x from base\
    \ to base numbers are less than 10.\n    base numbers are less than 10.\n    >>>\
    \ convert_base(8, 3)\n    22\n    >>> convert_base(8, 2)\n    1000\n    >>> convert_base(7,\
    \ 2)\n    111\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1icjg95k.jl:19\nin expression starting at\
    \ /tmp/tmp1icjg95k.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10\n        error(\"Base must be less than\
    \ 10\")\n    elseif base > 36\n        error(\"Base must be less than 36\")\n\
    \    else\n        str = toString(x)\n        str = str[start:end]\n        str\
    \ = str * base\n        str = toString(str)\n        return str\n    end\nend\n\
    </cell>\n<code language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3)\
    \ == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdsygta7a.jl:24\nin expression starting at\
    \ /tmp/tmpdsygta7a.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        error(\"Invalid\
    \ base\")\n    elseif base == 10\n        return toString(x)\n    else\n     \
    \   digits = toString(x)\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - base:end]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - base:end]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - base:end]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - base:end]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - base:end]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - base:end]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - base:end]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - base:end]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - base:end]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - base:end]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - base:end]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - base:end]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - base:end]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - base:end]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - base:end]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - base:end]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - base:end]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - base:end]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - base:end]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - base:end]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - base:end]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - base:end]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - base:end]\n        digits = digits[2:end]\n        digits = digits[digits.length\
    \ - base:end]\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmp9f98uayc.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9f98uayc.jl:1\n\
    in expression starting at /tmp/tmp9f98uayc.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base == 10 \n        digits = digits(x)\n    \
    \    digits = digits[2:end]\n        return join(digits, \"\")\n    else \n  \
    \      digits = digits(x)\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        return join(digits, \"\")\nend\n</cell>\n<code language=julia-1.3>\n\"\
    \"\"\n    digits(x::Int64)\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7sfaw81t.jl:22\nin expression starting at\
    \ /tmp/tmp7sfaw81t.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        digits = string(x)\n        digits = digits[2:end]\n      \
    \  digits = digits[digits.length - base:end]\n        digits = digits[2:end]\n\
    \        digits = digits[digits.length - base:end]\n        digits = digits[2:end]\n\
    \        digits = digits[digits.length - base:end]\n        digits = digits[2:end]\n\
    \        digits = digits[digits.length - base:end]\n        digits = digits[2:end]\n\
    \        digits = digits[digits.length - base:end]\n        digits = digits[2:end]\n\
    \        digits = digits[digits.length - base:end]\n        digits = digits[2:end]\n\
    \        digits = digits[digits.length - base:end]\n        digits = digits[2:end]\n\
    \        digits = digits[digits.length - base:end]\n        digits = digits[2:end]\n\
    \        digits = digits[digits.length - base:end]\n        digits = digits[2:end]\n\
    \        digits = digits[digits.length - base:end]\n        digits = digits[2:end]\n\
    \        digits = digits[digits.length - base:end]\n        digits = digits[2:end]\n\
    \        digits = digits[digits.length - base:end]\n        digits = digits[2:end]\n\
    \        digits = digits[digits.length - base:end]\n        digits = digits[2:end]\n\
    \        digits = digits[digits.length - base:end]\n        digits = digits[2:end]\n\
    \        digits = digits[digits.length - base:end]\n        digits = digits[2:end]\n\
    \        digits = digits[digits.length - base:end]\n        digits = digits[2:end]\n\
    \        digits = digits[digits.length - base:end]\n        digits = digits[2:end]\n\
    \        digits = digits[digits.length - base:end]\n        digits = digits[2:end]\n\
    \        digits = digits[digits.length - base:end]\n        digits = digits[2:end]\n\
    \        digits = digits[digits.length - base:end]\n        digits = digits[2:end]\n\
    \        digits = digits[digits.length - base:end]\n        digits = digits[2:end]\n\
    \        digits = digits[digits.length - base:end]\n        digits = digits[2:end]\n\
    \        digits = digits[digits.length - base:end]\n        digits = digits[2:end]\n\
    \        digits = digits[\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplz9rkuon.jl:1\nin expression starting at /tmp/tmplz9rkuon.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x * base^2)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdmiihpdl.jl:19\nin expression starting at\
    \ /tmp/tmpdmiihpdl.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base == 10 \n        digits = digits(x)\n    \
    \    digits = digits[2:end]\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        return digits\n    else \n        digits = digits(x)\n\
    \        digits = digits[2:end]\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digit\nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmp5pm9_bz2.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5pm9_bz2.jl:1\n\
    in expression starting at /tmp/tmp5pm9_bz2.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 10\n        throw(ArgumentError(\"\
    base must be between 2 and 10\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x * base^2)\nend\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 3)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that converts a number from one base to another.\nThe function should\
    \ throw an error if the base is invalid.\nThe function should throw an error if\
    \ the input number is negative.\nThe function should throw an error if the input\
    \ number is zero.\nThe function should throw an error if the input number is too\
    \ large.\nThe function should throw an error if the input number is too small.\n\
    The function should throw an error if the input number is too large.\nThe function\
    \ should throw an error if the input number is too small.\nThe function should\
    \ throw an error if the input number is too large.\nThe function should throw\
    \ an error if the input number is too small.\nThe function should throw an error\
    \ if the input number is too large.\nThe function should throw an error if the\
    \ input number is too small.\nThe function should throw an error if the input\
    \ number is too large.\nThe function should throw an error if the input number\
    \ is too small.\nThe function should throw an error if the input number is too\
    \ large.\nThe function should throw an error if the input number is too small.\n\
    The function should throw an error if the input number is too large.\nThe function\
    \ should throw an error if the input number is too small.\nThe function should\
    \ throw an error if the input number is too large.\nThe function should throw\
    \ an error if the input number is too small.\nThe function should throw an error\
    \ if the input number is too large.\nThe function should throw an error if the\
    \ input number is too small.\nThe function should throw an error if the input\
    \ number is too large.\nThe function should throw an error if the input number\
    \ is too small.\nThe function should throw an error if the input number is too\
    \ large.\nThe function should throw an error if the input number is too small.\n\
    The function should throw an error if the input number is too large.\nThe function\
    \ should throw an error if the input number is too small.\nThe function should\
    \ throw an error if the input number is too large.\nThe function should throw\
    \ an error if the input number is too small.\nThe function should throw an error\
    \ if the input number is too large.\nThe function should throw an error if the\
    \ input number is too small.\nThe function should throw an error if the input\
    \ number is too large.\nThe function should throw an error if the input number\
    \ is too small.\nThe function should throw an error if the input number is too\
    \ \nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5ak6thrj.jl:19\nin expression starting at\
    \ /tmp/tmp5ak6thrj.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base == 10 \n        digits = digits(x)\n    \
    \    digits = digits[2:end]\n        digits = digits[digits[1] == 1]\n       \
    \ digits = digits[digits[2] == 1]\n        digits = digits[digits[3] == 1]\n \
    \       digits = digits[digits[4] == 1]\n        digits = digits[digits[5] ==\
    \ 1]\n        digits = digits[digits[6] == 1]\n        digits = digits[digits[7]\
    \ == 1]\n        digits = digits[digits[8] == 1]\n        digits = digits[digits[9]\
    \ == 1]\n        digits = digits[digits[10] == 1]\n        digits = digits[digits[11]\
    \ == 1]\n        digits = digits[digits[12] == 1]\n        digits = digits[digits[13]\
    \ == 1]\n        digits = digits[digits[14] == 1]\n        digits = digits[digits[15]\
    \ == 1]\n        digits = digits[digits[16] == 1]\n        digits = digits[digits[17]\
    \ == 1]\n        digits = digits[digits[18] == 1]\n        digits = digits[digits[19]\
    \ == 1]\n        digits = digits[digits[20] == 1]\n        digits = digits[digits[21]\
    \ == 1]\n        digits = digits[digits[22] == 1]\n        digits = digits[digits[23]\
    \ == 1]\n        digits = digits[digits[24] == 1]\n        digits = digits[digits[25]\
    \ == 1]\n        digits = digits[digits[26] == 1]\n        digits = digits[digits[27]\
    \ == 1]\n        digits = digits[digits[28] == 1]\n        digits = digits[digits[29]\
    \ == 1]\n        digits = digits[digits[30] == 1]\n        digits = digits[digits[31]\
    \ == 1]\n        digits = digits[digits[32] == 1]\n        digits = digits[digits[33]\
    \ == 1]\n        digits = digits[digits[34] == 1]\n        digits = digits[digits[35]\
    \ == 1]\n        digits = digits[digits[36] == 1]\n        digits = digits[digits[37]\
    \ == 1]\n        digits = digits[digits[38] == 1]\n        digits = digits[digits[39]\
    \ == 1]\n        digits = digits[digits[40] == 1]\n        digits = digits[digits[41]\
    \ == 1]\n        digits = digits[digits[42] == 1]\n        digits = digits[digits[43]\
    \ == 1]\n        digits = digits[digits[44] == 1]\n        digits = digits[digits[\n\
    using Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxut06f9j.jl:1\nin expression starting at /tmp/tmpxut06f9j.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x/base^base, base = base)\nend\n</cell>\n<code\
    \ language=julia-1.3>\nchange_base(8, 2)\n</cell>\n<code language=julia-1.3>\n\
    change_base(8, 3)\n</cell>\n<code language=julia-1.3>\nchange_base(8, 4)\n</cell>\n\
    <code language=julia-1.3>\nchange_base(8, 5)\n</cell>\n<code language=julia-1.3>\n\
    change_base(8, 6)\n</cell>\n<code language=julia-1.3>\nchange_base(8, 7)\n</cell>\n\
    <code language=julia-1.3>\nchange_base(8, 8)\n</cell>\n<code language=julia-1.3>\n\
    change_base(8, 9)\n</cell>\n<code language=julia-1.3>\nchange_base(8, 10)\n</cell>\n\
    <code language=julia-1.3>\nchange_base(8, 11)\n</cell>\n<code language=julia-1.3>\n\
    change_base(8, 12)\n</cell>\n<code language=julia-1.3>\nchange_base(8, 13)\n</cell>\n\
    <code language=julia-1.3>\nchange_base(8, 14)\n</cell>\n<code language=julia-1.3>\n\
    change_base(8, 15)\n</cell>\n<code language=julia-1.3>\nchange_base(8, 16)\n</cell>\n\
    <code language=julia-1.3>\nchange_base(8, 17)\n</cell>\n<code language=julia-1.3>\n\
    change_base(8, 18)\n</cell>\n<code language=julia-1.3>\nchange_base(8, 19)\n</cell>\n\
    <code language=julia-1.3>\nchange_base(8, 20)\n</cell>\n<code language=julia-1.3>\n\
    change_base(8, 21)\n</cell>\n<code language=julia-1.3>\nchange_base(8, 22)\n</cell>\n\
    <code language=julia-1.3>\nchange_base(8, 23)\n</cell>\n<code language=julia-1.3>\n\
    change_base(8, 24)\n</cell>\n<code language=julia-1.3>\nchange_base(8, 25)\n</cell>\n\
    <code language=julia-1.3>\nchange_base(8, 26)\n</cell>\n<code language=julia-1.3>\n\
    change_base(8, 27)\n</cell>\n<code language=julia-1.3>\nchange_base(8, 28)\n</cell>\n\
    <code language=julia-1.3>\nchange_base(8, 29)\n</cell>\n<code language=julia-1.3>\n\
    change_base(8, 30)\n</cell>\n<code language=julia-1.3>\nchange_base(8, 31)\n</cell>\n\
    <code language=julia-1.3>\n\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdebo5bz5.jl:19\nin expression starting at\
    \ /tmp/tmpdebo5bz5.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    Base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x, base)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_7zf61fg.jl:19\nin expression starting at\
    \ /tmp/tmp_7zf61fg.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    Base must be between 2 and 36\"))\n    else if base == 10\n        return toString(x)\n\
    \    else\n        return toString(base * x)\nend\n</cell>\n<text>\nExercise 2\n\
    Write a function that converts a number from one base to another.\nThe input number\
    \ x is assumed to be in string format.\nThe input base is assumed to be in string\
    \ format.\nThe output number y is assumed to be in string format.\nThe output\
    \ base is assumed to be in string format.\nThe function should throw an error\
    \ if the input number or base is invalid.\nThe function should throw an error\
    \ if the output number or base is invalid.\nThe function should throw an error\
    \ if the input number or base is invalid.\nThe function should throw an error\
    \ if the output number or base is invalid.\nThe function should throw an error\
    \ if the input number or base is invalid.\nThe function should throw an error\
    \ if the output number or base is invalid.\nThe function should throw an error\
    \ if the input number or base is invalid.\nThe function should throw an error\
    \ if the output number or base is invalid.\nThe function should throw an error\
    \ if the input number or base is invalid.\nThe function should throw an error\
    \ if the output number or base is invalid.\nThe function should throw an error\
    \ if the input number or base is invalid.\nThe function should throw an error\
    \ if the output number or base is invalid.\nThe function should throw an error\
    \ if the input number or base is invalid.\nThe function should throw an error\
    \ if the output number or base is invalid.\nThe function should throw an error\
    \ if the input number or base is invalid.\nThe function should throw an error\
    \ if the output number or base is invalid.\nThe function should throw an error\
    \ if the input number or base is invalid.\nThe function should throw an error\
    \ if the output number or base is invalid.\nThe function should throw an error\
    \ if the input number or base is invalid.\nThe function should throw an error\
    \ if the output number or base is invalid.\nThe function should throw an error\
    \ if the input number or base is invalid.\nThe function should throw an error\
    \ if the output number or base is invalid.\nThe function should throw an error\
    \ if the input number or base is invalid.\nThe function should throw an error\
    \ if the output number or base is invalid.\nThe function should throw an error\
    \ if the input number or base is invalid.\nThe function should throw an error\
    \ if the output number or base is invalid.\nThe function should throw an error\
    \ if the input number or base is invalid.\nThe function should throw an error\
    \ if the output number or base is invalid.\nThe function should throw an error\
    \ if the input number or base is invalid.\n\nusing Test\n\n@testset begin\n\n\
    candidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj4hd1j8i.jl:14\nin expression starting at\
    \ /tmp/tmpj4hd1j8i.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        error(\"Base must\
    \ be between 2 and 36\")\n    elseif base == 2\n        return string(x)\n   \
    \ elseif base == 36\n        return string(x * 10)\n    else\n        digits =\
    \ string(x%base)\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyrcon7bb.jl:78\nin expression starting at\
    \ /tmp/tmpyrcon7bb.jl:78\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x, base)\nend\n</cell>\n<text>\nExercise 4\n\
    Write a function that converts a string to a number.\nThe string can contain any\
    \ character except the digits '0' through '9'.\nThe function should throw an error\
    \ if the string contains any other characters.\nThe function should ignore any\
    \ leading or trailing whitespace.\nThe function should ignore any whitespace.\n\
    The function should ignore any non-numeric characters (including '-').\nThe function\
    \ should ignore any non-numeric characters (including '.').\nThe function should\
    \ ignore any non-numeric characters (including 'e').\nThe function should ignore\
    \ any non-numeric characters (including 'E').\nThe function should ignore any\
    \ non-numeric characters (including 'e').\nThe function should ignore any non-numeric\
    \ characters (including 'E').\nThe function should ignore any non-numeric characters\
    \ (including 'e').\nThe function should ignore any non-numeric characters (including\
    \ 'E').\nThe function should ignore any non-numeric characters (including 'e').\n\
    The function should ignore any non-numeric characters (including 'E').\nThe function\
    \ should ignore any non-numeric characters (including 'e').\nThe function should\
    \ ignore any non-numeric characters (including 'E').\nThe function should ignore\
    \ any non-numeric characters (including 'e').\nThe function should ignore any\
    \ non-numeric characters (including 'E').\nThe function should ignore any non-numeric\
    \ characters (including 'e').\nThe function should ignore any non-numeric characters\
    \ (including 'E').\nThe function should ignore any non-numeric characters (including\
    \ 'e').\nThe function should ignore any non-numeric characters (including 'E').\n\
    The function should ignore any non-numeric characters (including 'e').\nThe function\
    \ should ignore any non-numeric characters (including 'E').\nThe function should\
    \ ignore any non-numeric characters (including 'e').\nThe function should ignore\
    \ any non-numeric characters (including 'E').\nThe function should ignore any\
    \ non-numeric characters (including 'e').\nThe function should ignore any non-numeric\
    \ characters (including 'E').\nThe function should ignore any non-numeric characters\
    \ (including 'e').\nThe function should ignore any non-numeric characters (including\
    \ 'E').\nThe function should ignore any non-numeric characters (including 'e').\n\
    The function should ignore any non-numeric characters (including 'E').\nThe function\
    \ should ignore any non-numeric characters (including 'e').\nThe function \nusing\
    \ Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3)\
    \ == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2) ==\
    \ \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_v62w_q3.jl:19\nin expression starting at\
    \ /tmp/tmp_v62w_q3.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10\n        return str(x)\n    else\n \
    \       return change_base(x/base, base)*base+(x%base)\nend\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 3)\n</cell>\n<text>\nExercise 2\nWrite a function that converts\
    \ a number from one base to another.\nThe function should take two arguments:\
    \ the first is the number to be converted, and the second is the base to convert\
    \ to.\nThe function should return the converted number.\nThe function should raise\
    \ an error if the base is not valid.\nThe function should raise an error if the\
    \ number is negative.\nThe function should raise an error if the number is too\
    \ big.\nThe function should raise an error if the number is too small.\nThe function\
    \ should raise an error if the number is too large.\nThe function should raise\
    \ an error if the number is too small.\nThe function should raise an error if\
    \ the number is too big.\nThe function should raise an error if the number is\
    \ too small.\nThe function should raise an error if the number is too big.\nThe\
    \ function should raise an error if the number is too small.\nThe function should\
    \ raise an error if the number is too big.\nThe function should raise an error\
    \ if the number is too small.\nThe function should raise an error if the number\
    \ is too big.\nThe function should raise an error if the number is too small.\n\
    The function should raise an error if the number is too big.\nThe function should\
    \ raise an error if the number is too small.\nThe function should raise an error\
    \ if the number is too big.\nThe function should raise an error if the number\
    \ is too small.\nThe function should raise an error if the number is too big.\n\
    The function should raise an error if the number is too small.\nThe function should\
    \ raise an error if the number is too big.\nThe function should raise an error\
    \ if the number is too small.\nThe function should raise an error if the number\
    \ is too big.\nThe function should raise an error if the number is too small.\n\
    The function should raise an error if the number is too big.\nThe function should\
    \ raise an error if the number is too small.\nThe function should raise an error\
    \ if the number is too big.\nThe function should raise an error if the number\
    \ is too small.\nThe function should raise an error if the number is too big.\n\
    The function should raise an error if the number is too small.\nThe function should\
    \ raise an error if the number is too big.\nThe function should raise an error\
    \ if the number is too small.\nThe function should raise an error if the number\
    \ is too big.\nThe function should raise an error if the number is too small.\n\
    The function should raise an error if the number is too big.\nThe function should\
    \ raise an error if the number is too small.\nThe function should raise an error\
    \ if the number is too big.\nThe function should raise an error if the number\
    \ is too small.\nThe function should \nusing Test\n\n@testset begin\n\ncandidate\
    \ = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3)\
    \ == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprfijcmdw.jl:17\nin expression starting at\
    \ /tmp/tmprfijcmdw.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        error(\"Base must\
    \ be between 2 and 36\")\n    elseif base == 2\n        return string(x)\n   \
    \ elseif base == 10\n        return string(x * 10)\n    else\n        return string(x\
    \ * base^2)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq8qjbnxo.jl:21\nin expression starting at\
    \ /tmp/tmpq8qjbnxo.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    elseif base == 10\n        return string(x * 10)\n    else\n        return\
    \ string(x * pow(base, x))\nend\n</cell>\n<code language=julia-1.5>\nchange_base(8,\
    \ 3)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    change_base(7, 2)\n</cell>\n<text>\nExercise: Write a function that converts binary\
    \ numbers to decimal.\nThe function should take a string as input and return a\
    \ string as output.\nThe input string may contain only 0s and 1s.\nThe output\
    \ string should contain only decimal digits.\nThe input string may contain leading\
    \ 0s.\nThe output string should contain no leading 0s.\nThe input string may contain\
    \ leading 0s and trailing 0s.\nThe output string should contain no leading 0s\
    \ and no trailing 0s.\nThe input string may contain leading 0s, trailing 0s and\
    \ leading 1s.\nThe output string should contain no leading 0s, no trailing 0s\
    \ and no leading 1s.\nThe input string may contain leading 0s, trailing 0s and\
    \ leading 1s.\nThe output string should contain no leading 0s, no trailing 0s\
    \ and no leading 1s.\nThe input string may contain leading 0s, trailing 0s and\
    \ leading 1s.\nThe output string should contain no leading 0s, no trailing 0s\
    \ and no leading 1s.\nThe input string may contain leading 0s, trailing 0s and\
    \ leading 1s.\nThe output string should contain no leading 0s, no trailing 0s\
    \ and no leading 1s.\nThe input string may contain leading 0s, trailing 0s and\
    \ leading 1s.\nThe output string should contain no leading 0s, no trailing 0s\
    \ and no leading 1s.\nThe input string may contain leading 0s, trailing 0s and\
    \ leading 1s.\nThe output string should contain no leading 0s, no trailing 0s\
    \ and no leading 1s.\nThe input string may contain leading 0s, trailing 0s and\
    \ leading 1s.\nThe output string should contain no leading 0s, no trailing 0s\
    \ and no leading 1s.\nThe input string may contain leading 0s, trailing 0s and\
    \ leading 1s.\nThe output string should contain no leading 0s, no trailing 0s\
    \ and no leading 1s.\nThe input string may contain leading 0s, trailing 0s and\
    \ leading 1s.\nThe output string should contain no leading 0s, no trailing 0s\
    \ and no leading 1s.\nThe input string may contain leading 0s, trailing 0s and\
    \ leading 1s.\nThe output string \nusing Test\n\n@testset begin\n\ncandidate =\
    \ change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) ==\
    \ \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq7gqec4a.jl:21\nin expression starting at\
    \ /tmp/tmpq7gqec4a.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        digits = digits(x)\n        digits = digits[digits.length -\
    \ digits.length % base]\n        digits = digits[0 : digits.length % base]\n \
    \       digits = digits[digits.length / base - 1]\n        digits = digits[0 :\
    \ digits.length / base]\n        digits = digits[digits.length - digits.length\
    \ % base]\n        digits = digits[0 : digits.length]\n        digits = digits[digits.length\
    \ - digits.length % base]\n        digits = digits[0 : digits.length]\n      \
    \  digits = digits[digits.length - digits.length % base]\n        digits = digits[0\
    \ : digits.length]\n        digits = digits[digits.length - digits.length % base]\n\
    \        digits = digits[0 : digits.length]\n        digits = digits[digits.length\
    \ - digits.length % base]\n        digits = digits[0 : digits.length]\n      \
    \  digits = digits[digits.length - digits.length % base]\n        digits = digits[0\
    \ : digits.length]\n        digits = digits[digits.length - digits.length % base]\n\
    \        digits = digits[0 : digits.length]\n        digits = digits[digits.length\
    \ - digits.length % base]\n        digits = digits[0 : digits.length]\n      \
    \  digits = digits[digits.length - digits.length % base]\n        digits = digits[0\
    \ : digits.length]\n        digits = digits[digits.length - digits.length % base]\n\
    \        digits = digits[0 : digits.length]\n        digits = digits[digits.length\
    \ - digits.length % base]\n        digits = digits[0 : digits.length]\n      \
    \  digits = digits[digits.length - digits.length % base]\n        digits = digits[0\
    \ : digits.length]\n        digits = digits[digits.length - digits.length % base]\n\
    \        digits = digits[0 : digits.length]\n        digits = digits[digits.length\
    \ - digits.length % base]\n        digits = digits[0 : digits.length]\n      \
    \  digits = digits[digits.length - digits.length % base]\n        digits = digits[0\
    \ : digits.length]\n        digits = digits[digits.length - digits.length % base]\n\
    \        digits = digits[0 : digits.length]\n        digits = digits[digits.length\
    \ - digits.length % base]\n        digits = digits[0 : digits.length]\n      \
    \  digits = digits[digits.length - digits.length % base]\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpu4mqwk3p.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu4mqwk3p.jl:1\n\
    in expression starting at /tmp/tmpu4mqwk3p.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base == 10\n        return toString(x)\n    \n\
    \    digits = digits(x)\n    digits = digits[digits.length - base]\n    digits\
    \ = digits[0 : digits.length - base]\n    digits = toString(digits)\n    \n  \
    \  return digits\nend\n</cell>\n<code language=julia-1.5>\nchange_base(8, 3)\n\
    </cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    change_base(7, 2)\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfi14fgqq.jl:22\nin expression starting at\
    \ /tmp/tmpfi14fgqq.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10\n        return string(x)\n    else\n\
    \        digits = string(x)\n        digits = digits[digits.length - digits.length\
    \ % base: digits.length]\n        digits = digits[0 : digits.length - digits.length\
    \ % base]\n        digits = digits * base\n        return digits\nend\n</code>\n\
    <|/ a dscore=1 |>\n<| a |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3)\
    \ == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvq14aec1.jl:21\nin expression starting at\
    \ /tmp/tmpvq14aec1.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base == 10\n        return toString(x)\n    elseif\
    \ base == 2\n        return toBinary(x)\n    elseif base == 8\n        return\
    \ toOctal(x)\n    elseif base == 16\n        return toHex(x)\n    else\n     \
    \   throw(ArgumentError(\"Invalid base\"))\nend\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 3)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n<text>\nExercise: Write\
    \ a function that converts a number from one base to another.\nusing Test\n\n\
    @testset begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\"\
    )\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\"\
    )\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\"\
    )\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t\
    @test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5,\
    \ 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) ==\
    \ \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplcwsxzol.jl:23\nin expression starting at\
    \ /tmp/tmplcwsxzol.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10 \n        error(\"base must be greater\
    \ than or equal to 10\")\n    else if base == 10 \n        return toString(x)\n\
    \    else \n        return toString(toInt(x)/toInt(base)*toInt(base))\nend\n</cell>\n\
    <code language=julia-1.4>\nchange_base(8, 3)\n</cell>\n<code language=julia-1.4>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.4>\nchange_base(7, 2)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that converts a number to a binary string.\
    \ \nThe function should accept a number as input and return a string representing\
    \ the binary representation of that number.\nThe function should raise an error\
    \ if the input is not a number.\nThe function should raise an error if the input\
    \ is a number less than 0.\nThe function should raise an error if the input is\
    \ a number greater than or equal to 2.\nThe function should raise an error if\
    \ the input is a number greater than or equal to 10.\nThe function should raise\
    \ an error if the input is a number greater than or equal to 256.\nThe function\
    \ should raise an error if the input is a number greater than or equal to 65536.\n\
    The function should raise an error if the input is a number greater than or equal\
    \ to 4294967296.\nThe function should raise an error if the input is a number\
    \ greater than or equal to 18446744073709551616.\nThe function should raise an\
    \ error if the input is a number greater than or equal to 3.402823669209385e+38.\n\
    The function should raise an error if the input is a number greater than or equal\
    \ to 1.8446744073709552e+19.\nThe function should raise an error if the input\
    \ is a number greater than or equal to 1.8446744073709552e+19.\nThe function should\
    \ raise an error if the input is a number greater than or equal to 1.8446744073709552e+19.\n\
    The function should raise an error if the input is a number greater than or equal\
    \ to 1.8446744073709552e+19.\nThe function should raise an error if the input\
    \ is a number greater than or equal to 1.8446744073709552e+19.\nThe function should\
    \ raise an error if the input is a number greater than or equal to 1.8446744073709552e+19.\n\
    The function should raise an error if the input is a number greater than or equal\
    \ to 1.8446744073709552e+19.\nThe function should raise an error if the input\
    \ is a number greater than or equal to 1.8446744073709552e+19.\nThe function should\
    \ raise an error if the input is a number greater than or equal to 1.8446744073709552e+19.\n\
    The function should raise an error if the input is a number greater than or equal\
    \ to 1.8446744073709552e+19.\n\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp43za9hy6.jl:14\nin expression starting at\
    \ /tmp/tmp43za9hy6.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10\n        return str((x % base) + base)\n\
    \    else\n        return str((x % base) / base)\nend\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 3)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n<text>\nExercise\nWrite\
    \ a function that converts binary numbers to decimal.\nThe function should take\
    \ two inputs: a string of binary digits, and a base (2 to 36).\nThe function should\
    \ return the decimal number represented by the binary digits.\nThe function should\
    \ raise an error if the base is not in the range 2 to 36.\nThe function should\
    \ raise an error if the input string contains non-binary digits.\nThe function\
    \ should raise an error if the input string contains leading zeros.\nThe function\
    \ should raise an error if the input string contains trailing zeros.\nThe function\
    \ should raise an error if the input string contains leading or trailing zeros.\n\
    The function should raise an error if the input string contains leading or trailing\
    \ spaces.\nThe function should raise an error if the input string contains leading\
    \ or trailing spaces.\nThe function should raise an error if the input string\
    \ contains leading or trailing spaces.\nThe function should raise an error if\
    \ the input string contains leading or trailing spaces.\nThe function should raise\
    \ an error if the input string contains leading or trailing spaces.\nThe function\
    \ should raise an error if the input string contains leading or trailing spaces.\n\
    The function should raise an error if the input string contains leading or trailing\
    \ spaces.\nThe function should raise an error if the input string contains leading\
    \ or trailing spaces.\nThe function should raise an error if the input string\
    \ contains leading or trailing spaces.\nThe function should raise an error if\
    \ the input string contains leading or trailing spaces.\nThe function should raise\
    \ an error if the input string contains leading or trailing spaces.\nThe function\
    \ should raise an error if the input string contains leading or trailing spaces.\n\
    The function should raise an error if the input string contains leading or trailing\
    \ spaces.\nThe function should raise an error if the input string contains leading\
    \ or trailing spaces.\nThe function should raise an error if the input string\
    \ contains leading or trailing spaces.\nThe function should raise an error if\
    \ the input string contains leading or trailing spaces.\nThe function should raise\
    \ an error if the input string contains leading or trailing spaces.\nThe function\
    \ should raise an error if the input string contains leading or trailing spaces.\n\
    The function should raise an error if the input string contains leading or trailing\
    \ spaces.\nThe function should raise an error if the input string contains leading\
    \ or trailing spaces.\nThe function should raise an error if the input string\
    \ contains leading or trailing spaces.\nThe function should raise an error if\
    \ the \nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb5s7p84l.jl:17\nin expression starting at\
    \ /tmp/tmpb5s7p84l.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10 \n        return string(x)\n    else\
    \ \n        return string(x/base^base)\nend\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 3)\n</cell>\n<text>\nExercise 3\nWrite a function that converts\
    \ a number from one base to another.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3)\
    \ == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxdg48ynz.jl:17\nin expression starting at\
    \ /tmp/tmpxdg48ynz.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        error(\"Invalid\
    \ base\")\n    elseif base == 10\n        digits = \"0123456789\"\n    else\n\
    \        digits = \"0123456789abcdefghijklmnopqrstuvwxyz\"\n    end\n    \n  \
    \  digits = digits[base:end]\n    \n    return digits[(x * base):end]\nend\n</cell>\n\
    <code language=julia-1.5>\nchange_base(8, 3)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that converts a number from one base to another.\nusing Test\n\n\
    @testset begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\"\
    )\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\"\
    )\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\"\
    )\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t\
    @test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5,\
    \ 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) ==\
    \ \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4s2t774w.jl:24\nin expression starting at\
    \ /tmp/tmp4s2t774w.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 10 \n        throw(ArgumentError(\"\
    base must be between 2 and 10\"))\n    else \n        if base == 2 \n        \
    \    return string(x)\n        else \n            digits = string(x)\n       \
    \     digits = digits[2:end]\n            digits = digits[digits.length - base:end]\n\
    \            digits = digits[2:end]\n            digits = digits[digits.length\
    \ - base:end]\n            digits = digits[2:end]\n            digits = digits[digits.length\
    \ - base:end]\n            digits = digits[2:end]\n            digits = digits[digits.length\
    \ - base:end]\n            digits = digits[2:end]\n            digits = digits[digits.length\
    \ - base:end]\n            digits = digits[2:end]\n            digits = digits[digits.length\
    \ - base:end]\n            digits = digits[2:end]\n            digits = digits[digits.length\
    \ - base:end]\n            digits = digits[2:end]\n            digits = digits[digits.length\
    \ - base:end]\n            digits = digits[2:end]\n            digits = digits[digits.length\
    \ - base:end]\n            digits = digits[2:end]\n            digits = digits[digits.length\
    \ - base:end]\n            digits = digits[2:end]\n            digits = digits[digits.length\
    \ - base:end]\n            digits = digits[2:end]\n            digits = digits[digits.length\
    \ - base:end]\n            digits = digits[2:end]\n            digits = digits[digits.length\
    \ - base:end]\n            digits = digits[2:end]\n            digits = digits[digits.length\
    \ - base:end]\n            digits = digits[2:end]\n            digits = digits[digits.length\
    \ - base:end]\n            digits = digits[2:end]\n            digits = digits[digits.length\
    \ - base:end]\n            digits = digits[2:end]\n            digits = digits[digits.length\
    \ - base:end]\n            digits = digits[2:end]\n            digits = digits[digits.length\
    \ - base:end]\n            digits = digits[2:end]\n            digits = digits[digits.length\
    \ - base:end]\n            digits = digits[2:end]\n            digits = digits[digits.length\
    \ - base:end]\n            digits = digits[2:end]\n            digits = digits[digits.length\
    \ - base:end]\n            digits = digits[2:end]\n            digits = digits[digits.length\
    \ - base:end]\n            digits = digits[2:end]\n            digits = digits[digits.length\
    \ - base:end]\n            digits = digits[2:end]\n            digits = \nusing\
    \ Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3)\
    \ == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2) ==\
    \ \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmp3hhwyjx8.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3hhwyjx8.jl:1\n\
    in expression starting at /tmp/tmp3hhwyjx8.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    else\n        if base == 2\n          \
    \  return string(x)\n        else\n            digits = string(x)\n          \
    \  digits = digits[2:end]\n            digits = digits[digits.length - digits.length\
    \ % base]\n            digits = digits[digits.length - digits.length % base]\n\
    \            digits = digits[digits.length - digits.length % base]\n         \
    \   digits = digits[digits.length - digits.length % base]\n            digits\
    \ = digits[digits.length - digits.length % base]\n            digits = digits[digits.length\
    \ - digits.length % base]\n            digits = digits[digits.length - digits.length\
    \ % base]\n            digits = digits[digits.length - digits.length % base]\n\
    \            digits = digits[digits.length - digits.length % base]\n         \
    \   digits = digits[digits.length - digits.length % base]\n            digits\
    \ = digits[digits.length - digits.length % base]\n            digits = digits[digits.length\
    \ - digits.length % base]\n            digits = digits[digits.length - digits.length\
    \ % base]\n            digits = digits[digits.length - digits.length % base]\n\
    \            digits = digits[digits.length - digits.length % base]\n         \
    \   digits = digits[digits.length - digits.length % base]\n            digits\
    \ = digits[digits.length - digits.length % base]\n            digits = digits[digits.length\
    \ - digits.length % base]\n            digits = digits[digits.length - digits.length\
    \ % base]\n            digits = digits[digits.length - digits.length % base]\n\
    \            digits = digits[digits.length - digits.length % base]\n         \
    \   digits = digits[digits.length - digits.length % base]\n            digits\
    \ = digits[digits.length - digits.length % base]\n            digits = digits[digits.length\
    \ - digits.length % base]\n            digits = digits[digits.length - digits.length\
    \ % base]\n            digits = digits[digits.length - digits.length % base]\n\
    \            digits = digits[digits.length - digits.length % base]\n         \
    \   digits = digits[digits.length - digits.length % base]\n            digits\
    \ = digits[digits.length - digits.length % base]\n            digits = digits[digits.length\
    \ - digits.length % base]\n            digits = digits[digits.length - digits.length\
    \ % base]\n            digits = digits[digits.length - digits.length % base]\n\
    \            digits = digits[digits.length - digits.length % base]\n         \
    \   digit\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmp9q587o5u.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9q587o5u.jl:1\n\
    in expression starting at /tmp/tmp9q587o5u.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10\n        return str(x)\n    else\n \
    \       return str(x).div(base).mul(base).floor().div(base).mul(base)\nend\n</cell>\n\
    <code language=julia-1.4>\nchange_base(8, 3)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that converts a number from one base to another.\nusing Test\n\n\
    @testset begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\"\
    )\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\"\
    )\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\"\
    )\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t\
    @test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5,\
    \ 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) ==\
    \ \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpww4a0r0j.jl:17\nin expression starting at\
    \ /tmp/tmpww4a0r0j.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x, base)\nend\n</cell>\n<text>\nExercise 2\n\
    Write a function that converts a number to a binary string. For example, convert_base(2,\
    \ 8) should return \"1000\".\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcu7fhobo.jl:19\nin expression starting at\
    \ /tmp/tmpcu7fhobo.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base == 10 \n        digits = \"0123456789\"\n\
    \    else \n        digits = \"0123456789abcdefghijklmnopqrstuvwxyz\"\n    return\
    \ digits[base-1] + digits[x % base]\nend\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 3)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that converts a binary number to a decimal number. \nThe input is\
    \ a string containing only 0s and 1s.\nThe output is a string containing the decimal\
    \ representation of the binary number.\nThe function should work for any base\
    \ from 2 to 64.\nThe function should work for negative numbers.\nusing Test\n\n\
    @testset begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\"\
    )\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\"\
    )\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\"\
    )\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t\
    @test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5,\
    \ 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) ==\
    \ \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiesiattf.jl:18\nin expression starting at\
    \ /tmp/tmpiesiattf.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        error(\"Base must\
    \ be between 2 and 36\")\n    elseif base == 2\n        return string(x)\n   \
    \ elseif base == 36\n        return string(x * 2)\n    else\n        return string(x\
    \ * base^2)\nend\n</cell>\n<code language=julia-1.5>\nchange_base(8, 3)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that converts a number to a string with leading\
    \ zeros.\nIf the number is negative, leading zeros should be added at the beginning.\n\
    If the number is zero, return an empty string.\nIf the number is positive, convert\
    \ it to the string with leading zeros until it becomes\nlarger than 10.\nFor example,\
    \ converting the number 123 should return \"000123\".\nIf the number is larger\
    \ than 10, the function should return an empty string.\nIf the number is negative,\
    \ the function should return an empty string.\nFor example, converting the number\
    \ -123 should return \"-000123\".\nIf the number is larger than 10, the function\
    \ should return an empty string.\nIf the number is negative, the function should\
    \ return an empty string.\nFor example, converting the number -123 should return\
    \ \"-000123\".\nIf the number is larger than 10, the function should return an\
    \ empty string.\nIf the number is negative, the function should return an empty\
    \ string.\nFor example, converting the number -123 should return \"-000123\".\n\
    If the number is larger than 10, the function should return an empty string.\n\
    If the number is negative, the function should return an empty string.\nFor example,\
    \ converting the number -123 should return \"-000123\".\nIf the number is larger\
    \ than 10, the function should return an empty string.\nIf the number is negative,\
    \ the function should return an empty string.\nFor example, converting the number\
    \ -123 should return \"-000123\".\nIf the number is larger than 10, the function\
    \ should return an empty string.\nIf the number is negative, the function should\
    \ return an empty string.\nFor example, converting the number -123 should return\
    \ \"-000123\".\nIf the number is larger than 10, the function should return an\
    \ empty string.\nIf the number is negative, the function should return an empty\
    \ string.\nFor example, converting the number -123 should return \"-000123\".\n\
    If the number is larger than 10, the function should return an empty string.\n\
    If the number is negative, the function should return an empty string.\nFor example,\
    \ converting the number -123 should return \"-000123\".\nIf the number is larger\
    \ than 10, the function should return an empty string.\nIf the number is negative,\
    \ the function should return an empty string.\nFor example, converting the number\
    \ -123 should return \"-000123\".\nIf the number is larger than 10, the function\
    \ should return an empty string.\nIf the number is negative, the function should\
    \ return an empty string.\nFor example, converting the number -123 should return\
    \ \"-000123\".\nIf the number is larger than 10, the function should return an\
    \ empty string.\nIf the number is negative, the function should return an empty\
    \ \nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcawaeeh6.jl:21\nin expression starting at\
    \ /tmp/tmpcawaeeh6.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 10 \n        error(\"base must\
    \ be between 2 and 10\")\n    elseif base == 2 \n        return string(x)\n  \
    \  elseif base == 10 \n        return string(x*10)\n    elseif base == 3 \n  \
    \      return string(x*100)\n    elseif base == 4 \n        return string(x*1000)\n\
    \    elseif base == 5 \n        return string(x*10000)\n    elseif base == 6 \n\
    \        return string(x*100000)\n    elseif base == 7 \n        return string(x*1000000)\n\
    \    elseif base == 8 \n        return string(x*10000000)\n    elseif base ==\
    \ 9 \n        return string(x*100000000)\n    elseif base == 10 \n        return\
    \ string(x*1000000000)\n    else\n        error(\"base must be between 2 and 10\"\
    )\n    end\nend\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\"\
    )\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\"\
    )\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\"\
    )\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t\
    @test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5,\
    \ 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) ==\
    \ \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpykyzuvot.jl:38\nin expression starting at\
    \ /tmp/tmpykyzuvot.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        error(\"Invalid\
    \ base\")\n    elseif base == 10\n        str = toString(x)\n    else\n      \
    \  str = toString(changeBase(x, base))\nend\nusing Test\n\n@testset begin\n\n\
    candidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpc9pgvsri.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpc9pgvsri.jl:1\n\
    in expression starting at /tmp/tmpc9pgvsri.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        error(\"Base must\
    \ be between 2 and 36\")\n    elseif base == 2\n        return string(x)\n   \
    \ elseif base == 10\n        return string(x * 10)\n    else\n        return string(x\
    \ * base^2)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpur7sjbck.jl:21\nin expression starting at\
    \ /tmp/tmpur7sjbck.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    Invalid base\"))\n    elseif base == 10\n        return toString(x)\n    else\n\
    \        return toString(toBase(x, base))\nend\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8iwmgsac.jl:19\nin expression starting at\
    \ /tmp/tmp8iwmgsac.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10 \n        error(\"Base must be greater\
    \ than or equal to 10\")\n    elseif base > 36 \n        error(\"Base must be\
    \ less than or equal to 36\")\n    elseif base == 0 \n        error(\"Base must\
    \ be greater than or equal to 0\")\n    else\n        str = to_string(x)\n   \
    \     str = str[length(str)-base+1:length(str)]\n        return str\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3)\
    \ == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsirm_08z.jl:24\nin expression starting at\
    \ /tmp/tmpsirm_08z.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base == 10 \n        digits = digits(x)\n    \
    \    digits[digits.length-1] = digits[digits.length-1].to_string(base)\n     \
    \   return join(digits)\n    else \n        digits = digits(x)\n        digits[digits.length-1]\
    \ = digits[digits.length-1].to_string(base)\n        digits = reverse(digits)\n\
    \        return join(digits)\nend\n</cell>\n<code language=julia-1.3>\nchange_base(8,\
    \ 3)\n</cell>\n<code language=julia-1.3>\nchange_base(8, 2)\n</cell>\n<code language=julia-1.3>\n\
    change_base(7, 2)\n</cell>\n<text>\nExercise 3\nWrite a function that converts\
    \ binary numbers to decimal.\nThe function should take a string as input and return\
    \ an integer.\nThe input string may contain leading zeros.\nThe function should\
    \ ignore leading zeros in the input.\nThe function should ignore the sign of the\
    \ number.\nThe function should ignore the base of the number.\nThe function should\
    \ ignore the length of the number.\nThe function should ignore the length of the\
    \ string.\nThe function should ignore the length of the input string.\nThe function\
    \ should ignore the length of the output string.\nThe function should ignore the\
    \ length of the input string.\nThe function should ignore the length of the output\
    \ string.\nThe function should ignore the length of the input string.\nThe function\
    \ should ignore the length of the output string.\nThe function should ignore the\
    \ length of the input string.\nThe function should ignore the length of the output\
    \ string.\nThe function should ignore the length of the input string.\nThe function\
    \ should ignore the length of the output string.\nThe function should ignore the\
    \ length of the input string.\nThe function should ignore the length of the output\
    \ string.\nThe function should ignore the length of the input string.\nThe function\
    \ should ignore the length of the output string.\nThe function should ignore the\
    \ length of the input string.\nThe function should ignore the length of the output\
    \ string.\nThe function should ignore the length of the input string.\nThe function\
    \ should ignore the length of the output string.\nThe function should ignore the\
    \ length of the input string.\nThe function should ignore the length of the output\
    \ string.\nThe function should ignore the length of the input string.\nThe function\
    \ should ignore the length of the output string.\nThe function should ignore the\
    \ length of the input string.\nThe function should ignore the length of the output\
    \ string.\nThe function should ignore the length of the input string.\nThe function\
    \ should ignore the length of the output string.\nThe function should ignore the\
    \ length of the input string.\nThe function should ignore the length of the output\
    \ string.\nThe function should ignore the length of the input string.\nThe function\
    \ should ignore the length of the output string.\nThe function should ignore the\
    \ length of the input string.\nThe function should ignore the length of the output\
    \ string.\nThe function should ignore the length of the input string.\nThe function\
    \ should ignore the length of the output string.\nThe function should ignore \n\
    using Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp66u6iodc.jl:22\nin expression starting at\
    \ /tmp/tmp66u6iodc.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10\n        return str((x % base) + base)\n\
    \    else\n        return str((x % base) / base)\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    change_base(x::Int64, base::Int64)::String\n    Change numerical base\
    \ of input number x to base.\n    return string representation after the conversion.\n\
    \    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n   \
    \ >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n  \
    \  \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6m9bzu4x.jl:17\nin expression starting at\
    \ /tmp/tmp6m9bzu4x.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base == 10 \n        digits = \"0123456789\"\n\
    \    else \n        digits = \"0123456789abcdefghijklmnopqrstuvwxyz\"\n    \n\
    \    digits = digits[base::Int64]\n    \n    return digits[(x::Int64)]\nend\n\
    </cell>\n<code language=julia-1.5>\nchange_base(8, 3)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that converts binary numbers to decimal numbers.\n\
    The input is a string containing only 0s and 1s.\nThe output is a string containing\
    \ the decimal representation of the binary number.\nThe function should ignore\
    \ leading zeros.\nThe function should ignore leading spaces.\nThe function should\
    \ ignore trailing spaces.\nThe function should ignore spaces after the decimal\
    \ point.\nThe function should ignore spaces before the decimal point.\nThe function\
    \ should ignore spaces after the decimal point.\nThe function should ignore spaces\
    \ before the decimal point.\nThe function should ignore spaces after the decimal\
    \ point.\nThe function should ignore spaces before the decimal point.\nThe function\
    \ should ignore spaces after the decimal point.\nThe function should ignore spaces\
    \ before the decimal point.\nThe function should ignore spaces after the decimal\
    \ point.\nThe function should ignore spaces before the decimal point.\nThe function\
    \ should ignore spaces after the decimal point.\nThe function should ignore spaces\
    \ before the decimal point.\nThe function should ignore spaces after the decimal\
    \ point.\nThe function should ignore spaces before the decimal point.\nThe function\
    \ should ignore spaces after the decimal point.\nThe function should ignore spaces\
    \ before the decimal point.\nThe function should ignore spaces after the decimal\
    \ point.\nThe function should ignore spaces before the decimal point.\nThe function\
    \ should ignore spaces after the decimal point.\nThe function should ignore spaces\
    \ before the decimal point.\nThe function should ignore spaces after the decimal\
    \ point.\nThe function should ignore spaces before the decimal point.\nThe function\
    \ should ignore spaces after the decimal point.\nThe function should ignore spaces\
    \ before the decimal point.\nThe function should ignore spaces after the decimal\
    \ point.\nThe function should ignore spaces before the decimal point.\nThe function\
    \ should ignore spaces after the decimal point.\nThe function should ignore spaces\
    \ before the decimal point.\nThe function should ignore spaces after the decimal\
    \ point.\nThe function should ignore spaces before the decimal point.\nThe function\
    \ should ignore spaces after the decimal point.\nThe function should ignore spaces\
    \ before the decimal point.\nThe function should ignore spaces after the decimal\
    \ point.\nThe function should ignore spaces before the decimal point.\nThe function\
    \ should ignore \nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t\
    @test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiuwk8nbv.jl:21\nin expression starting at\
    \ /tmp/tmpiuwk8nbv.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x * base^2)\nend\n</cell>\n<code language=julia-1.4>\n\
    change_base(8, 3)\n</cell>\n<code language=julia-1.4>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.4>\nchange_base(7, 2)\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqfphtish.jl:19\nin expression starting at\
    \ /tmp/tmpqfphtish.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    Invalid base\"))\n    elseif base == 10\n        return toString(x)\n    else\n\
    \        digits = digits(x)\n        digits = digits[digits.length - digits.length\
    \ % base]\n        digits = digits[0 : digits.length % base]\n        digits =\
    \ digits[0 : digits.length - digits.length % base]\n        digits = digits[digits.length\
    \ - digits.length % base : digits.length]\n        digits = digits[0 : digits.length\
    \ - digits.length % base]\n        digits = digits[digits.length - digits.length\
    \ % base : digits.length]\n        digits = digits[0 : digits.length - digits.length\
    \ % base]\n        digits = digits[digits.length - digits.length % base : digits.length]\n\
    \        digits = digits[0 : digits.length - digits.length % base]\n        digits\
    \ = digits[digits.length - digits.length % base : digits.length]\n        digits\
    \ = digits[0 : digits.length - digits.length % base]\n        digits = digits[digits.length\
    \ - digits.length % base : digits.length]\n        digits = digits[0 : digits.length\
    \ - digits.length % base]\n        digits = digits[digits.length - digits.length\
    \ % base : digits.length]\n        digits = digits[0 : digits.length - digits.length\
    \ % base]\n        digits = digits[digits.length - digits.length % base : digits.length]\n\
    \        digits = digits[0 : digits.length - digits.length % base]\n        digits\
    \ = digits[digits.length - digits.length % base : digits.length]\n        digits\
    \ = digits[0 : digits.length - digits.length % base]\n        digits = digits[digits.length\
    \ - digits.length % base : digits.length]\n        digits = digits[0 : digits.length\
    \ - digits.length % base]\n        digits = digits[digits.length - digits.length\
    \ % base : digits.length]\n        digits = digits[0 : digits.length - digits.length\
    \ % base]\n        digits = digits[digits.length - digits.length % base : digits.length]\n\
    \        digits = digits[0 : digits.length - digits.length % base]\n        digits\
    \ = digits[digits.length - digits.length % base : digits.length]\n        digits\
    \ = digits[0 : digits.length - digits.length % base]\n        digits = digits[digits.length\
    \ - digits.length % base : digits.length]\n        digits = digits[0 : digits.length\
    \ - digits.length % base]\n        digits = digits[digits.length - digits.length\
    \ % base : digits.length]\n        \nusing Test\n\n@testset begin\n\ncandidate\
    \ = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3)\
    \ == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpb_9_ayvx.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpb_9_ayvx.jl:1\n\
    in expression starting at /tmp/tmpb_9_ayvx.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    elseif base == 10\n        return string(x * 2)\n    else\n        return\
    \ string(x * change_base(x, base-1))\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    change_base(s::String, base::Int64)::Int64\n    Change numerical base\
    \ of input string s to base.\n    return the converted number in base base if\
    \ successful.\n    base numbers are less than 10.\n    >>> change_base(\"22\"\
    , 3)\n    22\n    >>> change_base(\"1000\", 2)\n    1000\n    >>> change_base(\"\
    111\", 2)\n    111\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl4b7sucj.jl:21\nin expression starting at\
    \ /tmp/tmpl4b7sucj.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10\n        return str((x % base) + base)\n\
    \    else\n        return change_base((x % base), base)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert change_base(8, 3) == \"22\"\n@assert change_base(8, 2) == \"1000\"\n@assert\
    \ change_base(7, 2) == \"111\"\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that converts a number to a binary string.\nThe function should accept one positional\
    \ argument and return a string.\nThe function should return a string with leading\
    \ zeros if necessary.\nThe function should raise an error if the input is not\
    \ a number.\nThe function should raise an error if the input is a negative number.\n\
    The function should raise an error if the input is a number larger than $2^32$.\n\
    The function should raise an error if the input is a number smaller than $-2^32$.\n\
    The function should raise an error if the input is a number larger than $2^{32}-1$.\n\
    The function should raise an error if the input is a number smaller than $-2^{32}-1$.\n\
    The function should raise an error if the input is a number larger than $2^{64}-1$.\n\
    The function should raise an error if the input is a number smaller than $-2^{64}-1$.\n\
    The function should raise an error if the input is a number larger than $2^{128}-1$.\n\
    The function should raise an error if the input is a number smaller than $-2^{128}-1$.\n\
    The function should raise an error if the input is a number larger than $2^{256}-1$.\n\
    The function should raise an error if the input is a number smaller than $-2^{256}-1$.\n\
    The function should raise an error if the input is a number larger than $2^{512}-1$.\n\
    The function should raise an error if the input is a number smaller than $-2^{512}-1$.\n\
    The function should raise an error if the input is a number larger than $2^{1024}-1$.\n\
    The function should raise an error if the input is a number smaller than $-2^{1024}-1$.\n\
    The function should raise an error if the input is a number larger than $2^{2048}-1$.\n\
    The function should raise an error if the input is a number smaller than $-2^{2048}-1$.\n\
    The function should raise an error if the input is a number larger than $2^{4096}-1$.\n\
    The function should raise an error if the input is a number smaller than $-2^{4096}-1$.\n\
    The function should raise an error if the input is a number larger than $2^{8192}-1$.\n\
    The function should raise an error if the input is a number smaller than $-2^{8192}-1$.\n\
    The function should raise an error if the input is a number larger than $2^{16384}-1$.\n\
    The function should raise an error \nusing Test\n\n@testset begin\n\ncandidate\
    \ = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3)\
    \ == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4zfl4c0s.jl:17\nin expression starting at\
    \ /tmp/tmp4zfl4c0s.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base == 10 \n        return toString(x)\n    else\
    \ \n        return toString(change_base(x / base, base) * base)\nend\n</cell>\n\
    <code language=julia-1.4>\nchange_base(8, 3)\n</cell>\n<code language=julia-1.4>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.4>\nchange_base(7, 2)\n</cell>\n\
    <code language=julia-1.4>\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_gicrdcf.jl:17\nin expression starting at\
    \ /tmp/tmp_gicrdcf.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        digits = digits(x)\n        digits = digits[digits.length -\
    \ digits.length % base]\n        digits = digits[0 : digits.length / base]\n \
    \       digits = digits[0 : digits.length % base]\n        digits = digits[0 :\
    \ digits.length / base]\n        digits = digits[0 : digits.length % base]\n \
    \       digits = digits[0 : digits.length / base]\n        digits = digits[0 :\
    \ digits.length % base]\n        digits = digits[0 : digits.length / base]\n \
    \       digits = digits[0 : digits.length % base]\n        digits = digits[0 :\
    \ digits.length / base]\n        digits = digits[0 : digits.length % base]\n \
    \       digits = digits[0 : digits.length / base]\n        digits = digits[0 :\
    \ digits.length % base]\n        digits = digits[0 : digits.length / base]\n \
    \       digits = digits[0 : digits.length % base]\n        digits = digits[0 :\
    \ digits.length / base]\n        digits = digits[0 : digits.length % base]\n \
    \       digits = digits[0 : digits.length / base]\n        digits = digits[0 :\
    \ digits.length % base]\n        digits = digits[0 : digits.length / base]\n \
    \       digits = digits[0 : digits.length % base]\n        digits = digits[0 :\
    \ digits.length / base]\n        digits = digits[0 : digits.length % base]\n \
    \       digits = digits[0 : digits.length / base]\n        digits = digits[0 :\
    \ digits.length % base]\n        digits = digits[0 : digits.length / base]\n \
    \       digits = digits[0 : digits.length % base]\n        digits = digits[0 :\
    \ digits.length / base]\n        digits = digits[0 : digits.length % base]\n \
    \       digits = digits[0 : digits.length / base]\n        digits = digits[0 :\
    \ digits.length % base]\n        digits = digits[0 : digits.length / base]\n \
    \       digits = digits[0 : digits.length % base]\n        digits = digits[0 :\
    \ digits.length / base]\n        digits = digits[0 : digits.length % base]\n \
    \       digits = digits[0 : digits.length / base]\n        digits = digits[0 :\
    \ digits.length % base]\n        digits = digits[0 : digits.length / base]\n \
    \       digits = digits[0 : digits.length % base]\n        digit\nusing Test\n\
    \n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\"\
    )\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\"\
    )\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\"\
    )\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t\
    @test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5,\
    \ 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) ==\
    \ \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpp1e2az19.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpp1e2az19.jl:1\n\
    in expression starting at /tmp/tmpp1e2az19.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        error(\"Invalid\
    \ base\")\n    elseif base == 10\n        str = toString(x)\n    else\n      \
    \  str = toString(x*base)\n    end\n    return str\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptvjez1u8.jl:21\nin expression starting at\
    \ /tmp/tmptvjez1u8.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        error(\"Base must\
    \ be between 2 and 36.\")\n    end\n    if base == 2\n        return string(x)\n\
    \    else\n        return string(base * x, base)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkgczs22p.jl:21\nin expression starting at\
    \ /tmp/tmpkgczs22p.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base == 10 \n        digits = digits(x)\n    \
    \    return digits[digits.length-1]\n    digits = digits(x)\n    digits = digits[digits.length-base+1:digits.length]\n\
    \    digits = digits[digits.length-1:]\n    digits = digits[digits.length-1:]\n\
    \    digits = digits[digits.length-1:]\n    digits = digits[digits.length-1:]\n\
    \    digits = digits[digits.length-1:]\n    digits = digits[digits.length-1:]\n\
    \    digits = digits[digits.length-1:]\n    digits = digits[digits.length-1:]\n\
    \    digits = digits[digits.length-1:]\n    digits = digits[digits.length-1:]\n\
    \    digits = digits[digits.length-1:]\n    digits = digits[digits.length-1:]\n\
    \    digits = digits[digits.length-1:]\n    digits = digits[digits.length-1:]\n\
    \    digits = digits[digits.length-1:]\n    digits = digits[digits.length-1:]\n\
    \    digits = digits[digits.length-1:]\n    digits = digits[digits.length-1:]\n\
    \    digits = digits[digits.length-1:]\n    digits = digits[digits.length-1:]\n\
    \    digits = digits[digits.length-1:]\n    digits = digits[digits.length-1:]\n\
    \    digits = digits[digits.length-1:]\n    digits = digits[digits.length-1:]\n\
    \    digits = digits[digits.length-1:]\n    digits = digits[digits.length-1:]\n\
    \    digits = digits[digits.length-1:]\n    digits = digits[digits.length-1:]\n\
    \    digits = digits[digits.length-1:]\n    digits = digits[digits.length-1:]\n\
    \    digits = digits[digits.length-1:]\n    digits = digits[digits.length-1:]\n\
    \    digits = digits[digits.length-1:]\n    digits = digits[digits.length-1:]\n\
    \    digits = digits[digits.length-1:]\n    digits = digits[digits.length-1:]\n\
    \    digits = digits[digits.length-1:]\n    digits = digits[digits.length-1:]\n\
    \    digits = digits[digits.length-1:]\n    digits = digits[digits.length-1:]\n\
    \    digits = digits[digits.length-1:]\n    digits = digits[digits.length-1:]\n\
    \    digits = digits[digits.length-1:]\n    digits = digits[digits.length-1:]\n\
    \    digits = digits[digits.length-1:]\n    digits = digits[digits.length-1:]\n\
    \    digits = digits[digits.length-1:]\n    \nusing Test\n\n@testset begin\n\n\
    candidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"(digits.length - 1):\"\
    \ range expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgbw4z0vx.jl:17\n\
    in expression starting at /tmp/tmpgbw4z0vx.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        error(\"Invalid\
    \ base\")\n    elseif base == 10\n        return toString(x)\n    else\n     \
    \   return toString(toBase(x, base))\nend\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 3)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n<text>\nExercise: Write\
    \ a function that converts binary numbers to decimal.\nThe input is a string containing\
    \ only 0s and 1s.\nThe output is an integer representing the binary number in\
    \ decimal.\nThe function should raise an error if the input is not in binary form.\n\
    The function should raise an error if the input contains more than 32 bits.\n\
    The function should raise an error if the input contains more than 32 bits.\n\
    The function should raise an error if the input contains more than 32 bits.\n\
    The function should raise an error if the input contains more than 32 bits.\n\
    The function should raise an error if the input contains more than 32 bits.\n\
    The function should raise an error if the input contains more than 32 bits.\n\
    The function should raise an error if the input contains more than 32 bits.\n\
    The function should raise an error if the input contains more than 32 bits.\n\
    The function should raise an error if the input contains more than 32 bits.\n\
    The function should raise an error if the input contains more than 32 bits.\n\
    The function should raise an error if the input contains more than 32 bits.\n\
    The function should raise an error if the input contains more than 32 bits.\n\
    The function should raise an error if the input contains more than 32 bits.\n\
    The function should raise an error if the input contains more than 32 bits.\n\
    The function should raise an error if the input contains more than 32 bits.\n\
    The function should raise an error if the input contains more than 32 bits.\n\
    The function should raise an error if the input contains more than 32 bits.\n\
    The function should raise an error if the input contains more than 32 bits.\n\
    The function should raise an error if the input contains more than 32 bits.\n\
    The function should raise an error if the input contains more than 32 bits.\n\
    The function should raise an error if the input contains more than 32 bits.\n\
    The function should raise an error if the input contains more than 32 bits.\n\
    The function should raise an error if the input contains more than 32 bits.\n\
    The function should raise an error if the input contains more than 32 bits.\n\
    The function should raise an error if the input contains more than 32 bits.\n\
    The function should raise an error if the input contains more than 32 bits.\n\
    The function should raise an error if the input contains more than 32 bits.\n\
    The function should raise an error if the input contains more than 32 bits.\n\
    The function should raise an error if the input contains more than 32 bits.\n\
    using Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph_fi4va_.jl:19\nin expression starting at\
    \ /tmp/tmph_fi4va_.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        error(\"Base must\
    \ be between 2 and 36.\")\n    elseif base == 2\n        return string(x)\n  \
    \  elseif base == 10\n        return string(x*10)\n    else\n        digits =\
    \ string(x%base)\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbq7ld702.jl:78\nin expression starting at\
    \ /tmp/tmpbq7ld702.jl:78\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    Base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    elseif base == 3\n        return string(x, \"b\")\n    elseif base == 4\n\
    \        return string(x, \"o\")\n    elseif base == 5\n        return string(x,\
    \ \"x\")\n    elseif base == 6\n        return string(x, \"y\")\n    elseif base\
    \ == 7\n        return string(x, \"z\")\n    elseif base == 8\n        return\
    \ string(x, \"a\")\n    elseif base == 9\n        return string(x, \"a\")\n  \
    \  elseif base == 10\n        return string(x, \"a\")\n    elseif base == 11\n\
    \        return string(x, \"a\")\n    elseif base == 12\n        return string(x,\
    \ \"a\")\n    elseif base == 13\n        return string(x, \"a\")\n    elseif base\
    \ == 14\n        return string(x, \"a\")\n    elseif base == 15\n        return\
    \ string(x, \"a\")\n    elseif base == 16\n        return string(x, \"a\")\n \
    \   elseif base == 17\n        return string(x, \"a\")\n    elseif base == 18\n\
    \        return string(x, \"a\")\n    elseif base == 19\n        return string(x,\
    \ \"a\")\n    elseif base == 20\n        return string(x, \"a\")\n    elseif base\
    \ == 21\n        return string(x, \"a\")\n    elseif base == 22\n        return\
    \ string(x, \"a\")\n    elseif base == 23\n        return string(x, \"a\")\n \
    \   elseif base == 24\n        return string(x, \"a\")\n    elseif base == 25\n\
    \        return string(x, \"a\")\n    elseif base == 26\n        return string(x,\
    \ \"a\")\n    elseif base == 27\n        return string(x, \"a\")\n    elseif base\
    \ == 28\n        return string(x, \"a\")\n    elseif base == 29\n        return\
    \ string(x, \"a\")\n    elseif base == 30\n        return string(x, \"a\")\n \
    \   elseif base == 31\n        return string(x, \"a\")\n    elseif base == 32\n\
    \        return string(x, \"a\")\n    elseif base == 33\n        return string(x,\
    \ \"a\")\n    elseif base == 34\n        return string(x, \"a\")\n    elseif base\
    \ == 35\n        return string(x, \"a\")\n    elseif base == 36\n        return\
    \ string(x, \"a\")\n    else\n        throw(ArgumentError(\"Base must be between\
    \ 2 and 36\"))\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\"\
    )\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\"\
    )\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\"\
    )\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t\
    @test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5,\
    \ 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) ==\
    \ \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuftytq9b.jl:88\nin expression starting at\
    \ /tmp/tmpuftytq9b.jl:88\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        digits = string(x)\n        digits = digits[2:end]\n      \
    \  digits = digits[digits.length - digits.length % base]\n        return digits[digits.length\
    \ / base]\nend\n</cell>\n<code language=julia-1.5>\nchange_base(8, 3)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    change_base(7, 2)\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpstk651c1.jl:22\nin expression starting at\
    \ /tmp/tmpstk651c1.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        error(\"Base must\
    \ be between 2 and 36\")\n    end\n    \n    if base == 10\n        return string(x)\n\
    \    \n    digits = string(x)\n    digits = digits[2:end]\n    digits = digits[digits[end-1]\
    \ .. end]\n    digits = digits[digits[end-2] .. end]\n    digits = digits[digits[end-3]\
    \ .. end]\n    digits = digits[digits[end-4] .. end]\n    digits = digits[digits[end-5]\
    \ .. end]\n    digits = digits[digits[end-6] .. end]\n    digits = digits[digits[end-7]\
    \ .. end]\n    digits = digits[digits[end-8] .. end]\n    digits = digits[digits[end-9]\
    \ .. end]\n    digits = digits[digits[end-10] .. end]\n    digits = digits[digits[end-11]\
    \ .. end]\n    digits = digits[digits[end-12] .. end]\n    digits = digits[digits[end-13]\
    \ .. end]\n    digits = digits[digits[end-14] .. end]\n    digits = digits[digits[end-15]\
    \ .. end]\n    digits = digits[digits[end-16] .. end]\n    digits = digits[digits[end-17]\
    \ .. end]\n    digits = digits[digits[end-18] .. end]\n    digits = digits[digits[end-19]\
    \ .. end]\n    digits = digits[digits[end-20] .. end]\n    digits = digits[digits[end-21]\
    \ .. end]\n    digits = digits[digits[end-22] .. end]\n    digits = digits[digits[end-23]\
    \ .. end]\n    digits = digits[digits[end-24] .. end]\n    digits = digits[digits[end-25]\
    \ .. end]\n    digits = digits[digits[end-26] .. end]\n    digits = digits[digits[end-27]\
    \ .. end]\n    digits = digits[digits[end-28] .. end]\n    digits = digits[digits[end-29]\
    \ .. end]\n    digits = digits[digits[end-30] .. end]\n    digits = digits[digits[end-31]\
    \ .. end]\n    digits = digits[digits[end-32] .. end]\n    digits = digits[digits[end-33]\
    \ .. end]\n    digits = digits[digits[end-34] .. end]\n    digits = digits[digits[end-35]\
    \ .. end]\n    digits = digits[digits[end-36\nusing Test\n\n@testset begin\n\n\
    candidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcawanslh.jl:1\nin expression starting at /tmp/tmpcawanslh.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    Base must be between 2 and 36\"))\n    else\n        if base == 10\n         \
    \   return string(x)\n        else\n            if base == 2\n               \
    \ digits = digits(x)\n                digits = digits[2:end]\n               \
    \ digits = digits[2:end]\n                digits = digits[2:end]\n           \
    \     digits = digits[2:end]\n                digits = digits[2:end]\n       \
    \         digits = digits[2:end]\n                digits = digits[2:end]\n   \
    \             digits = digits[2:end]\n                digits = digits[2:end]\n\
    \                digits = digits[2:end]\n                digits = digits[2:end]\n\
    \                digits = digits[2:end]\n                digits = digits[2:end]\n\
    \                digits = digits[2:end]\n                digits = digits[2:end]\n\
    \                digits = digits[2:end]\n                digits = digits[2:end]\n\
    \                digits = digits[2:end]\n                digits = digits[2:end]\n\
    \                digits = digits[2:end]\n                digits = digits[2:end]\n\
    \                digits = digits[2:end]\n                digits = digits[2:end]\n\
    \                digits = digits[2:end]\n                digits = digits[2:end]\n\
    \                digits = digits[2:end]\n                digits = digits[2:end]\n\
    \                digits = digits[2:end]\n                digits = digits[2:end]\n\
    \                digits = digits[2:end]\n                digits = digits[2:end]\n\
    \                digits = digits[2:end]\n                digits = digits[2:end]\n\
    \                digits = digits[2:end]\n                digits = digits[2:end]\n\
    \                digits = digits[2:end]\n                digits = digits[2:end]\n\
    \                digits = digits[2:end]\n                digits = digits[2:end]\n\
    \                digits = digits[2:end]\n                digits = digits[2:end]\n\
    \                digits = digits[2:end]\n                digits = digits[2:end]\n\
    \                digits = digits[2:end]\n                digits = digits[2:end]\n\
    \                digits = digits[2:end]\n                digits = digits[2:end]\n\
    \                digits = digits[2:end]\n                digits = digits[2:end]\n\
    \                digits = digits[2:end]\n                digits = digits[2:end]\n\
    \                digits = digits[2:end]\n                digits = digits[2:end]\n\
    \                digits = digits[2:end]\n                digits = digits[2:end]\n\
    \                digits = digits[2:end]\n                digits = digits[2:end]\n\
    \                digits = digits[2:end]\n                digit\nusing Test\n\n\
    @testset begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\"\
    )\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\"\
    )\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\"\
    )\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t\
    @test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5,\
    \ 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) ==\
    \ \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3hl0xdj4.jl:1\nin expression starting at /tmp/tmp3hl0xdj4.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10\n        return str(x)\n    \n    digits\
    \ = digits(x)\n    base = digits[end]\n    digits[end] = base\n    \n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.5>\nchange_base(8, 3)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    change_base(7, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that converts\
    \ a number from base 10 to base 16. \nThe function should take two arguments:\
    \ \na number in base 10 and a number in base 16. \nThe function should return\
    \ a string containing the number in base 16.\nThe function should throw an error\
    \ if the base is invalid.\nThe function should throw an error if the number is\
    \ negative.\nThe function should throw an error if the number is too large.\n\
    The function should throw an error if the number is too small.\nThe function should\
    \ throw an error if the number is zero.\nThe function should throw an error if\
    \ the number is negative.\nThe function should throw an error if the number is\
    \ too large.\nThe function should throw an error if the number is too small.\n\
    The function should throw an error if the number is zero.\nThe function should\
    \ throw an error if the number is negative.\nThe function should throw an error\
    \ if the number is too large.\nThe function should throw an error if the number\
    \ is too small.\nThe function should throw an error if the number is zero.\nThe\
    \ function should throw an error if the number is negative.\nThe function should\
    \ throw an error if the number is too large.\nThe function should throw an error\
    \ if the number is too small.\nThe function should throw an error if the number\
    \ is zero.\nThe function should throw an error if the number is negative.\nThe\
    \ function should throw an error if the number is too large.\nThe function should\
    \ throw an error if the number is too small.\nThe function should throw an error\
    \ if the number is zero.\nThe function should throw an error if the number is\
    \ negative.\nThe function should throw an error if the number is too large.\n\
    The function should throw an error if the number is too small.\nThe function should\
    \ throw an error if the number is zero.\nThe function should throw an error if\
    \ the number is negative.\nThe function should throw an error if the number is\
    \ too large.\nThe function should throw an error if the number is too small.\n\
    The function should throw an error if the number is zero.\nThe function should\
    \ throw an error if the number is negative.\nThe function should throw an error\
    \ if the number is too large.\nThe function should throw an error if the number\
    \ is too small.\nThe function should throw an error if the number is zero.\nThe\
    \ function should throw an error if the number is negative.\nThe function should\
    \ throw an error if the number is too large.\nThe function should throw an error\
    \ if the number is too small.\n\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfn2hsmvh.jl:21\nin expression starting at\
    \ /tmp/tmpfn2hsmvh.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 10 \n        error(\"Base must\
    \ be between 2 and 10\")\n    elseif base == 2 \n        return string(x)\n  \
    \  elseif base == 10 \n        return string(x*2)\n    elseif base == 3 \n   \
    \     return string(x*3)\n    elseif base == 4 \n        return string(x*4)\n\
    \    elseif base == 5 \n        return string(x*5)\n    elseif base == 6 \n  \
    \      return string(x*6)\n    elseif base == 7 \n        return string(x*7)\n\
    \    elseif base == 8 \n        return string(x*8)\n    elseif base == 9 \n  \
    \      return string(x*9)\n    elseif base == 11 \n        return string(x*10)\n\
    \    else\n        error(\"Base must be between 2 and 10\")\n    end\nend\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nI like your solution, but I prefer to use `if base\
    \ == 2 return string(x)` instead of `if base == 2 return string(x*2)`\n<|/ c |>\n\
    <| c |>\nI agree with you. I just wanted to show a more general solution. Thanks\
    \ for your comment.\n<|/ c |>\n<| a dscore=2 |>\nI wrote a package that does this\
    \ for you:\nhttps://github.com/jrwren/base\n<code>\njulia> using Base\nusing Test\n\
    \n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\"\
    )\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\"\
    )\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\"\
    )\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t\
    @test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5,\
    \ 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) ==\
    \ \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp35_f2wz3.jl:38\nin expression starting at\
    \ /tmp/tmp35_f2wz3.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        digits = digits(x)\n        digits = digits[2:end]\n      \
    \  digits = digits[digits[1] .. digits[2]]\n        digits = digits[digits[1]\
    \ .. digits[2]]\n        digits = digits[digits[1] .. digits[2]]\n        digits\
    \ = digits[digits[1] .. digits[2]]\n        digits = digits[digits[1] .. digits[2]]\n\
    \        digits = digits[digits[1] .. digits[2]]\n        digits = digits[digits[1]\
    \ .. digits[2]]\n        digits = digits[digits[1] .. digits[2]]\n        digits\
    \ = digits[digits[1] .. digits[2]]\n        digits = digits[digits[1] .. digits[2]]\n\
    \        digits = digits[digits[1] .. digits[2]]\n        digits = digits[digits[1]\
    \ .. digits[2]]\n        digits = digits[digits[1] .. digits[2]]\n        digits\
    \ = digits[digits[1] .. digits[2]]\n        digits = digits[digits[1] .. digits[2]]\n\
    \        digits = digits[digits[1] .. digits[2]]\n        digits = digits[digits[1]\
    \ .. digits[2]]\n        digits = digits[digits[1] .. digits[2]]\n        digits\
    \ = digits[digits[1] .. digits[2]]\n        digits = digits[digits[1] .. digits[2]]\n\
    \        digits = digits[digits[1] .. digits[2]]\n        digits = digits[digits[1]\
    \ .. digits[2]]\n        digits = digits[digits[1] .. digits[2]]\n        digits\
    \ = digits[digits[1] .. digits[2]]\n        digits = digits[digits[1] .. digits[2]]\n\
    \        digits = digits[digits[1] .. digits[2]]\n        digits = digits[digits[1]\
    \ .. digits[2]]\n        digits = digits[digits[1] .. digits[2]]\n        digits\
    \ = digits[digits[1] .. digits[2]]\n        digits = digits[digits[1] .. digits[2]]\n\
    \        digits = digits[digits[1] .. digits[2]]\n        digits = digits[digits[1]\
    \ .. digits[2]]\n        digits = digits[digits[1] .. digits[2]]\n        digits\
    \ = digits[digits[1] .. digits[2]]\n        digits = digits[digits[1] .. digits[2]]\n\
    \        digits = digits[digits[1] .. \nusing Test\n\n@testset begin\n\ncandidate\
    \ = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3)\
    \ == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx4hs7wse.jl:1\nin expression starting at /tmp/tmpx4hs7wse.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10 \n        error(\"base must be greater\
    \ than or equal to 10\")\n    elseif base > 36 \n        error(\"base must be\
    \ less than or equal to 36\")\n    elseif base == 0 \n        error(\"base must\
    \ not be zero\")\n    elseif base == 1 \n        return toString(x)\n    elseif\
    \ base == 2 \n        return toString(x * 10)\n    elseif base == 3 \n       \
    \ return toString(x * 100)\n    elseif base == 4 \n        return toString(x *\
    \ 1000)\n    elseif base == 5 \n        return toString(x * 10000)\n    elseif\
    \ base == 6 \n        return toString(x * 100000)\n    elseif base == 7 \n   \
    \     return toString(x * 1000000)\n    elseif base == 8 \n        return toString(x\
    \ * 10000000)\n    elseif base == 9 \n        return toString(x * 100000000)\n\
    \    elseif base == 10 \n        return toString(x * 1000000000)\n    elseif base\
    \ == 11 \n        return toString(x * 10000000000)\n    elseif base == 12 \n \
    \       return toString(x * 100000000000)\n    elseif base == 13 \n        return\
    \ toString(x * 1000000000000)\n    elseif base == 14 \n        return toString(x\
    \ * 10000000000000)\n    elseif base == 15 \n        return toString(x * 100000000000000)\n\
    \    elseif base == 16 \n        return toString(x * 1000000000000000)\n    elseif\
    \ base == 17 \n        return toString(x * 10000000000000000)\n    elseif base\
    \ == 18 \n        return toString(x * 100000000000000000)\n    elseif base ==\
    \ 19 \n        return toString(x * 1000000000000000000)\n    elseif base == 20\
    \ \n        return toString(x * 10000000000000000000)\n    elseif base == 21 \n\
    \        return toString(x * 100000000000000000000)\n    elseif base == 22 \n\
    \        return toString(x * 1000000000000000000000)\n    elseif base == 23 \n\
    \        return toString(x * 10000000000000000000000)\n    elseif base == 24 \n\
    \        return toString(x * 100000000000000000000000)\n    elseif base == 25\
    \ \n        return toString(x * 1000000000000000000000000)\n    elseif base ==\
    \ 26 \n        return toString(x * 10000000000000000000000000)\n    elseif base\
    \ == 27 \n        return toString(x * 100000000000000000000000000)\n    elseif\
    \ base == 28 \n        return toString(x * 1000000000000000000000000000)\n   \
    \ elseif base == 29 \n        return toString(x * 10000000000000000000000000000)\n\
    \    elseif base == 30 \n        return toString(x * 100000000000000000000000000000)\n\
    \    elseif base == 31 \n        return toString(x * 1000000000000000000000000000000)\n\
    \    elseif base == 32 \n        return toString(x * 10000000000000000000000000000000)\n\
    \    elseif base == 33 \n        return toString(x * 100000000000000000000000000000000)\n\
    \    else\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmplo5adhuo.jl:82\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplo5adhuo.jl:1\n\
    in expression starting at /tmp/tmplo5adhuo.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        error(\"Base must\
    \ be between 2 and 36\")\n    elseif base == 2\n        return string(x)\n   \
    \ else\n        digits = digits(x)\n        digits = digits[2:end]\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digit\nusing Test\n\n@testset begin\n\
    \ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8zzagp9y.jl:86\nin expression starting at\
    \ /tmp/tmp8zzagp9y.jl:86\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10\n        return str(x)\n    else\n \
    \       return str(x).div(base).mul(base).floor().div(base).mul(base).floor()\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert change_base(8, 3) == \"22\"\n\
    @assert change_base(8, 2) == \"1000\"\n@assert change_base(7, 2) == \"111\"\n\
    </cell>\n<text>\nExercise 2\nWrite a function that converts binary numbers to\
    \ decimal.\nThe function should take two arguments: a string of binary digits\
    \ and an integer base.\nThe function should return the decimal number represented\
    \ by the binary string.\nThe function should raise an error if the base is less\
    \ than 2.\nThe function should raise an error if the number of digits in the binary\
    \ string is not an even number.\nThe function should raise an error if the number\
    \ of digits in the binary string is not an even number.\nThe function should raise\
    \ an error if the number of digits in the binary string is not an even number.\n\
    The function should raise an error if the number of digits in the binary string\
    \ is not an even number.\nThe function should raise an error if the number of\
    \ digits in the binary string is not an even number.\nThe function should raise\
    \ an error if the number of digits in the binary string is not an even number.\n\
    The function should raise an error if the number of digits in the binary string\
    \ is not an even number.\nThe function should raise an error if the number of\
    \ digits in the binary string is not an even number.\nThe function should raise\
    \ an error if the number of digits in the binary string is not an even number.\n\
    The function should raise an error if the number of digits in the binary string\
    \ is not an even number.\nThe function should raise an error if the number of\
    \ digits in the binary string is not an even number.\nThe function should raise\
    \ an error if the number of digits in the binary string is not an even number.\n\
    The function should raise an error if the number of digits in the binary string\
    \ is not an even number.\nThe function should raise an error if the number of\
    \ digits in the binary string is not an even number.\nThe function should raise\
    \ an error if the number of digits in the binary string is not an even number.\n\
    The function should raise an error if the number of digits in the binary string\
    \ is not an even number.\nThe function should raise an error if the number of\
    \ digits in the binary string is not an even number.\nThe function should raise\
    \ an error if the number of digits in the binary string is not an even number.\n\
    The function should raise an error if the number of digits in the binary string\
    \ is not an even number.\nThe function should raise an error if the number of\
    \ digits in the binary string is not an even number.\nThe function should raise\
    \ an error if the number of digits in the binary string is not an even number.\n\
    The function should raise an error if the number of digits in the binary string\
    \ is not an even number.\nThe function should raise an error if the number of\
    \ digits in the binary string is not an even number.\nThe function should raise\
    \ an error if the number of digits in the binary string \nusing Test\n\n@testset\
    \ begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3ojlqt7n.jl:17\nin expression starting at\
    \ /tmp/tmp3ojlqt7n.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    Base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x * base)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5mbpd4mz.jl:19\nin expression starting at\
    \ /tmp/tmp5mbpd4mz.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    \n    if x == 0\n        return \"\"\n\
    \    \n    if base == 10\n        return to_string(x)\n    \n    digits = digits(x)\n\
    \    \n    digits_base10 = digits[digits.length - 1]\n    \n    if digits_base10\
    \ < base\n        digits_base10 = digits_base10 + base\n        \n    digits[digits.length\
    \ - 1] = digits_base10\n    \n    return join(digits, \"\")\nend\n</cell>\n<code\
    \ language=julia-1.5>\nchange_base(8, 3)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(8, 10)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 36)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 36)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(8, 36)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 36)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 36)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(8, 36)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 36)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 36)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(8, 36)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 36)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 36)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(8, 36)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 36)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 36)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(8, 36)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 36)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 36)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(8, 36)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 36)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 36)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(8, 36)\n</cell>\n<code language=julia-\n\
    using Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpolrv099k.jl:32\nin expression starting at\
    \ /tmp/tmpolrv099k.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    elseif base == 36\n        return string(x * 10)\n    else\n        return\
    \ string(x * pow(base, floor(log10(abs(x))))) \nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that converts binary numbers to decimal.\nThe input is a\
    \ string containing only 0s and 1s.\nThe output is an integer representing the\
    \ decimal equivalent of the binary number.\nThe function should throw an error\
    \ if the input is not valid binary number.\nThe function should throw an error\
    \ if the input contains more than 32 bits.\nThe function should throw an error\
    \ if the input contains leading zeros.\nThe function should throw an error if\
    \ the input contains leading zeros.\nThe function should throw an error if the\
    \ input contains leading zeros.\nThe function should throw an error if the input\
    \ contains leading zeros.\nThe function should throw an error if the input contains\
    \ leading zeros.\nThe function should throw an error if the input contains leading\
    \ zeros.\nThe function should throw an error if the input contains leading zeros.\n\
    The function should throw an error if the input contains leading zeros.\nThe function\
    \ should throw an error if the input contains leading zeros.\nThe function should\
    \ throw an error if the input contains leading zeros.\nThe function should throw\
    \ an error if the input contains leading zeros.\nThe function should throw an\
    \ error if the input contains leading zeros.\nThe function should throw an error\
    \ if the input contains leading zeros.\nThe function should throw an error if\
    \ the input contains leading zeros.\nThe function should throw an error if the\
    \ input contains leading zeros.\nThe function should throw an error if the input\
    \ contains leading zeros.\nThe function should throw an error if the input contains\
    \ leading zeros.\nThe function should throw an error if the input contains leading\
    \ zeros.\nThe function should throw an error if the input contains leading zeros.\n\
    The function should throw an error if the input contains leading zeros.\nThe function\
    \ should throw an error if the input contains leading zeros.\nThe function should\
    \ throw an error if the input contains leading zeros.\nThe function should throw\
    \ an error if the input contains leading zeros.\nThe function should throw an\
    \ error if the input contains leading zeros.\nThe function should throw an error\
    \ if the input contains leading zeros.\nThe function should throw an error if\
    \ the input contains leading zeros.\nThe function should throw an error if the\
    \ input contains leading zeros.\nThe function should throw an error if the input\
    \ contains leading zeros.\nThe function should throw an error if the input contains\
    \ leading zeros.\nThe function should throw an error if the input contains leading\
    \ zeros.\nThe function should throw an error if the input contains leading zeros.\n\
    The function should throw an error if the input contains leading zeros.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3)\
    \ == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2) ==\
    \ \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzsw26x0r.jl:21\nin expression starting at\
    \ /tmp/tmpzsw26x0r.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        digits = digits(x)\n        digits = digits[2:end]\n      \
    \  digits = digits[digits[1] == base]\n        digits = digits[2:end]\n      \
    \  digits = digits[digits[1] == base]\n        digits = digits[2:end]\n      \
    \  digits = digits[digits[1] == base]\n        digits = digits[2:end]\n      \
    \  digits = digits[digits[1] == base]\n        digits = digits[2:end]\n      \
    \  digits = digits[digits[1] == base]\n        digits = digits[2:end]\n      \
    \  digits = digits[digits[1] == base]\n        digits = digits[2:end]\n      \
    \  digits = digits[digits[1] == base]\n        digits = digits[2:end]\n      \
    \  digits = digits[digits[1] == base]\n        digits = digits[2:end]\n      \
    \  digits = digits[digits[1] == base]\n        digits = digits[2:end]\n      \
    \  digits = digits[digits[1] == base]\n        digits = digits[2:end]\n      \
    \  digits = digits[digits[1] == base]\n        digits = digits[2:end]\n      \
    \  digits = digits[digits[1] == base]\n        digits = digits[2:end]\n      \
    \  digits = digits[digits[1] == base]\n        digits = digits[2:end]\n      \
    \  digits = digits[digits[1] == base]\n        digits = digits[2:end]\n      \
    \  digits = digits[digits[1] == base]\n        digits = digits[2:end]\n      \
    \  digits = digits[digits[1] == base]\n        digits = digits[2:end]\n      \
    \  digits = digits[digits[1] == base]\n        digits = digits[2:end]\n      \
    \  digits = digits[digits[1] == base]\n        digits = digits[2:end]\n      \
    \  digits = digits[digits[1] == base]\n        digits = digits[2:end]\n      \
    \  digits = digits[digits[1] == base]\n        digits = digits[2:end]\n      \
    \  digits = digits[digits[1] == base]\n        digits = digits[2:end]\n      \
    \  digits = digits[digits[1] == base]\n        digits = digits[2:end]\n      \
    \  digits = digits[digits[1] == base]\n        digits = digits[2:end]\n      \
    \  digits = digits[digits[1] == base]\n        digits = digits[2:end]\n      \
    \  digits = digits[digits[1] == \nusing Test\n\n@testset begin\n\ncandidate =\
    \ change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) ==\
    \ \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy761cao8.jl:1\nin expression starting at /tmp/tmpy761cao8.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base == 10 \n        digits = \"0123456789\"\n\
    \    else \n        digits = \"0123456789abcdefghijklmnopqrstuvwxyz\"\n    \n\
    \    digits = digits[base:end]\n    return digits[x]\nend\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 3)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpygimwpsx.jl:20\nin expression starting at\
    \ /tmp/tmpygimwpsx.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    Base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        digits = digits(x)\n        digits = digits[digits.length -\
    \ digits.length % base]\n        digits = digits[0 : digits.length % base]\n \
    \       digits = digits + string(x)\n        return digits\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmposeaflua.jl:24\nin expression starting at\
    \ /tmp/tmposeaflua.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10\n        error(\"base must be greater\
    \ than or equal to 10\")\n    elseif base == 10\n        return toString(x)\n\
    \    else\n        digits = toString(x)\n        digits = digits[2:end]\n    \
    \    digits = digits[digits.length - base:end]\n        digits = digits[2:end]\n\
    \        digits = digits[digits.length - base:end]\n        return digits * base\n\
    end\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia,string |>\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\"\
    )\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\"\
    )\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\"\
    )\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t\
    @test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5,\
    \ 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) ==\
    \ \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0eudk6dc.jl:24\nin expression starting at\
    \ /tmp/tmp0eudk6dc.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        error(\"Base must\
    \ be between 2 and 36\")\n    elseif base == 2\n        return string(x)\n   \
    \ else\n        digits = string(x)\n        digits = digits[2:end]\n        digits\
    \ = digits[digits.length - base:end]\n        digits = digits[2:end]\n       \
    \ digits = digits[digits.length - base:end]\n        digits = digits[2:end]\n\
    \        digits = digits[digits.length - base:end]\n        digits = digits[2:end]\n\
    \        digits = digits[digits.length - base:end]\n        digits = digits[2:end]\n\
    \        digits = digits[digits.length - base:end]\n        digits = digits[2:end]\n\
    \        digits = digits[digits.length - base:end]\n        digits = digits[2:end]\n\
    \        digits = digits[digits.length - base:end]\n        digits = digits[2:end]\n\
    \        digits = digits[digits.length - base:end]\n        digits = digits[2:end]\n\
    \        digits = digits[digits.length - base:end]\n        digits = digits[2:end]\n\
    \        digits = digits[digits.length - base:end]\n        digits = digits[2:end]\n\
    \        digits = digits[digits.length - base:end]\n        digits = digits[2:end]\n\
    \        digits = digits[digits.length - base:end]\n        digits = digits[2:end]\n\
    \        digits = digits[digits.length - base:end]\n        digits = digits[2:end]\n\
    \        digits = digits[digits.length - base:end]\n        digits = digits[2:end]\n\
    \        digits = digits[digits.length - base:end]\n        digits = digits[2:end]\n\
    \        digits = digits[digits.length - base:end]\n        digits = digits[2:end]\n\
    \        digits = digits[digits.length - base:end]\n        digits = digits[2:end]\n\
    \        digits = digits[digits.length - base:end]\n        digits = digits[2:end]\n\
    \        digits = digits[digits.length - base:end]\n        digits = digits[2:end]\n\
    \        digits = digits[digits.length - base:end]\n        digits = digits[2:end]\n\
    \        digits = digits[digits.length - base:end]\n        digits = digits[2:end]\n\
    \        digits = digits[digits.length - base:end]\n        digits = digits[2:end]\n\
    \        digits = digits[digits.length - base:end]\n        digits = digits[2:end]\n\
    \        digits = digits[digits.length - \nusing Test\n\n@testset begin\n\ncandidate\
    \ = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3)\
    \ == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphsbn6vmq.jl:1\nin expression starting at /tmp/tmphsbn6vmq.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 10\n        throw(ArgumentError(\"\
    base must be between 2 and 10\"))\n    else\n        return toString(div(x, base))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp1qf3opll.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1qf3opll.jl:1\n\
    in expression starting at /tmp/tmp1qf3opll.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10\n        return show(base * x)\n   \
    \ else\n        return show(base * x / 10)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert change_base(8, 3) == \"22\"\n@assert change_base(8, 2) == \"1000\"\n@assert\
    \ change_base(7, 2) == \"111\"\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that converts a number to a string in reverse order. For example, converting\
    \ the number 123 into \"321\".\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl0hl4mws.jl:17\nin expression starting at\
    \ /tmp/tmpl0hl4mws.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 10\n        throw(ArgumentError(\"\
    base must be between 2 and 10\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        digits = string(x)\n        digits = digits[2:end]\n      \
    \  digits = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        \nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmp7h640ufd.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7h640ufd.jl:1\n\
    in expression starting at /tmp/tmp7h640ufd.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x * base^2)\nend\n</cell>\n<text>\nExercise 2\n\
    Write a function that converts a binary number to a decimal number.\nusing Test\n\
    \n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\"\
    )\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\"\
    )\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\"\
    )\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t\
    @test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5,\
    \ 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) ==\
    \ \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6e_bnjqo.jl:19\nin expression starting at\
    \ /tmp/tmp6e_bnjqo.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    elseif base == 3\n        return string(x*x)\n    elseif base == 4\n    \
    \    return string(x*x*x)\n    elseif base == 5\n        return string(x*x*x*x)\n\
    \    elseif base == 6\n        return string(x*x*x*x*x)\n    elseif base == 7\n\
    \        return string(x*x*x*x*x*x)\n    elseif base == 8\n        return string(x*x*x*x*x*x*x)\n\
    \    elseif base == 9\n        return string(x*x*x*x*x*x*x*x)\n    elseif base\
    \ == 10\n        return string(x*x*x*x*x*x*x*x*x)\n    elseif base == 11\n   \
    \     return string(x*x*x*x*x*x*x*x*x*x)\n    elseif base == 12\n        return\
    \ string(x*x*x*x*x*x*x*x*x*x*x)\n    elseif base == 13\n        return string(x*x*x*x*x*x*x*x*x*x*x*x*x)\n\
    \    elseif base == 14\n        return string(x*x*x*x*x*x*x*x*x*x*x*x*x*x)\n \
    \   elseif base == 15\n        return string(x*x*x*x*x*x*x*x*x*x*x*x*x*x*x)\n\
    \    elseif base == 16\n        return string(x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x)\n\
    \    elseif base == 17\n        return string(x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x)\n\
    \    elseif base == 18\n        return string(x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x)\n\
    \    elseif base == 19\n        return string(x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x)\n\
    \    elseif base == 20\n        return string(x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x)\n\
    \    elseif base == 21\n        return string(x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x)\n\
    \    elseif base == 22\n        return string(x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x)\n\
    \    elseif base == 23\n        return string(x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x*x)\n\
    \    elseif base \nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t\
    @test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpysgkk338.jl:1\nin expression starting at /tmp/tmpysgkk338.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base == 10 \n        digits = digits(x)\n    \
    \    digits = digits[2:end]\n        return join(digits, \"\")\n    else \n  \
    \      digits = digits(x)\n        digits = digits[2:end]\n        digits = digits[base-1:end]\n\
    \        return join(digits, \"\")\nend\n</cell>\n<code language=julia-1.3>\n\
    change_base(8, 3)\n</cell>\n<code language=julia-1.3>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.3>\nchange_base(7, 2)\n</cell>\n<text>\nExercise\nWrite\
    \ a function that converts a number to a binary string.\nThe function should take\
    \ one argument, x, of type Int64.\nThe function should return a string containing\
    \ the binary representation of x.\nThe function should return an error if the\
    \ argument x is not of type Int64.\nThe function should return an error if the\
    \ argument x is less than 0.\nThe function should return an error if the argument\
    \ x is greater than or equal to 2.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3)\
    \ == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjlw38wxq.jl:22\nin expression starting at\
    \ /tmp/tmpjlw38wxq.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10\n        error(\"Base must be less than\
    \ 10\")\n    elseif base > 36\n        error(\"Base must be less than 36\")\n\
    \    elseif base == 10\n        return toString(x)\n    else\n        digits =\
    \ digits(x)\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digits[digits.length - base]\n        digits = digits[digits.length\
    \ - base]\n        digits = digit\nusing Test\n\n@testset begin\n\ncandidate =\
    \ change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) ==\
    \ \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpgt4_nn7d.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgt4_nn7d.jl:1\n\
    in expression starting at /tmp/tmpgt4_nn7d.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 10 \n        throw(ArgumentError(\"\
    Base must be between 2 and 10\"))\n    elseif base == 2 \n        return string(x::Int64)\n\
    \    elseif base == 10 \n        return string(x::Int64, \"0\")\n    else\n  \
    \      return string(x::Int64, base::Int64)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 3)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that converts binary numbers to decimal.\nThe function should take\
    \ two arguments: a string of binary digits and a base between 2 and 16.\nThe function\
    \ should return the decimal number represented by the binary string.\nThe function\
    \ should throw an error if the base is out of range.\nThe function should throw\
    \ an error if the string contains more than 16 binary digits.\nThe function should\
    \ throw an error if the string contains leading zeros.\nThe function should throw\
    \ an error if the string contains leading zeros.\nThe function should throw an\
    \ error if the string contains leading zeros.\nThe function should throw an error\
    \ if the string contains leading zeros.\nThe function should throw an error if\
    \ the string contains leading zeros.\nThe function should throw an error if the\
    \ string contains leading zeros.\nThe function should throw an error if the string\
    \ contains leading zeros.\nThe function should throw an error if the string contains\
    \ leading zeros.\nThe function should throw an error if the string contains leading\
    \ zeros.\nThe function should throw an error if the string contains leading zeros.\n\
    The function should throw an error if the string contains leading zeros.\nThe\
    \ function should throw an error if the string contains leading zeros.\nThe function\
    \ should throw an error if the string contains leading zeros.\nThe function should\
    \ throw an error if the string contains leading zeros.\nThe function should throw\
    \ an error if the string contains leading zeros.\nThe function should throw an\
    \ error if the string contains leading zeros.\nThe function should throw an error\
    \ if the string contains leading zeros.\nThe function should throw an error if\
    \ the string contains leading zeros.\nThe function should throw an error if the\
    \ string contains leading zeros.\nThe function should throw an error if the string\
    \ contains leading zeros.\nThe function should throw an error if the string contains\
    \ leading zeros.\nThe function should throw an error if the string contains leading\
    \ zeros.\nThe function should throw an error if the string contains leading zeros.\n\
    The function should throw an error if the string contains leading zeros.\nThe\
    \ function should throw an error if the string contains leading zeros.\nThe function\
    \ should throw an error if the string contains leading zeros.\nThe function should\
    \ throw an error if the string contains leading zeros.\nThe function should \n\
    using Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnmdrfhs_.jl:22\nin expression starting at\
    \ /tmp/tmpnmdrfhs_.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 10\n        throw(ArgumentError(\"\
    base must be between 2 and 10\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x * base)\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    change_base(::Int64, ::Int64)\nusing Test\n\n@testset begin\n\ncandidate\
    \ = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3)\
    \ == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_xmf0btn.jl:19\nin expression starting at\
    \ /tmp/tmp_xmf0btn.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10\n        return str((x % base) + base)\n\
    \    else\n        return str((x % base) / base)\nend\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptcy0q9or.jl:17\nin expression starting at\
    \ /tmp/tmptcy0q9or.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        error(\"Base must\
    \ be between 2 and 36\")\n    elseif base == 2\n        return string(x)\n   \
    \ elseif base == 3\n        return string(x * 1000 + 100)\n    elseif base ==\
    \ 4\n        return string(x * 10000 + 1000)\n    elseif base == 5\n        return\
    \ string(x * 100000 + 10000)\n    elseif base == 6\n        return string(x *\
    \ 1000000 + 100000)\n    elseif base == 7\n        return string(x * 10000000\
    \ + 1000000)\n    elseif base == 8\n        return string(x * 100000000 + 10000000)\n\
    \    elseif base == 9\n        return string(x * 1000000000 + 100000000)\n   \
    \ elseif base == 10\n        return string(x * 10000000000 + 1000000000)\n   \
    \ elseif base == 11\n        return string(x * 100000000000 + 10000000000)\n \
    \   elseif base == 12\n        return string(x * 1000000000000 + 100000000000)\n\
    \    elseif base == 13\n        return string(x * 10000000000000 + 10000000000000)\n\
    \    elseif base == 14\n        return string(x * 100000000000000 + 100000000000000)\n\
    \    elseif base == 15\n        return string(x * 1000000000000000 + 1000000000000000)\n\
    \    elseif base == 16\n        return string(x * 10000000000000000 + 10000000000000000)\n\
    \    elseif base == 17\n        return string(x * 100000000000000000 + 100000000000000000)\n\
    \    elseif base == 18\n        return string(x * 1000000000000000000 + 100000000000000000)\n\
    \    elseif base == 19\n        return string(x * 10000000000000000000 + 10000000000000000)\n\
    \    elseif base == 20\n        return string(x * 100000000000000000000 + 100000000000000000)\n\
    \    elseif base == 21\n        return string(x * 1000000000000000000000 + 10000000000000000)\n\
    \    elseif base == 22\n        return string(x * 10000000000000000000000 + 100000000000000000)\n\
    \    elseif base == 23\n        return string(x * 100000000000000000000000 + 10000000000000000)\n\
    \    elseif base == 24\n        return string(x * 1000000000000000000000000 +\
    \ 100000000000000000)\n    elseif base == 25\n        return string(x * 10000000000000000000000000\
    \ + 10000000000000000)\n    elseif base == 26\n        return string(x * 100000000000000000000000000\
    \ + 100000000000000000)\n    elseif base == 27\n        return string(x * 1000000000000000000000000000\
    \ + 10000000000000000)\n    elseif base == 28\n        return string(x * 10000000000000000000000000000\
    \ + 100000000000000000)\n    elseif base == 29\n        return string(x * 100000000000000000000000000000\
    \ + 10000000000000000)\n    elseif base \nusing Test\n\n@testset begin\n\ncandidate\
    \ = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3)\
    \ == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiz3vxumk.jl:1\nin expression starting at /tmp/tmpiz3vxumk.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10 \n        error(\"base must be greater\
    \ than or equal to 10\")\n    elseif base == 10 \n        return string(x)\n \
    \   elseif base == 2 \n        return string(x * 2)\n    elseif base == 3 \n \
    \       return string(x * 3)\n    elseif base == 4 \n        return string(x *\
    \ 4)\n    elseif base == 5 \n        return string(x * 5)\n    elseif base ==\
    \ 6 \n        return string(x * 6)\n    elseif base == 7 \n        return string(x\
    \ * 7)\n    elseif base == 8 \n        return string(x * 8)\n    elseif base ==\
    \ 9 \n        return string(x * 9)\n    else\n        error(\"base must be between\
    \ 2 and 9\")\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\"\
    )\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\"\
    )\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\"\
    )\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t\
    @test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5,\
    \ 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) ==\
    \ \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfe5thi57.jl:36\nin expression starting at\
    \ /tmp/tmpfe5thi57.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    Base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x*base^2)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp14qsg7f5.jl:19\nin expression starting at\
    \ /tmp/tmp14qsg7f5.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 10 \n        throw(ArgumentError(\"\
    base must be between 2 and 10\"))\n    else \n        if base == 2 \n        \
    \    str = to_string(x)\n        else \n            str = to_string(x / base)\n\
    \            str = str * base\n            str = str + to_string(x%base)\n   \
    \     end\n        return str\n    end\nend\n</code>\n<|/ a tags=julia,type-conversion\
    \ |>\n<| c |>\nThis does not answer the question. `change_base(8, 3)` returns\
    \ `\"22\"`, not `\"1000\"`.\n<|/ c |>\n<| c |>\nI thought the question was about\
    \ how to convert a number from base 10 to base 3. My answer was to show how to\
    \ convert a number from base 10 to base 2. So I thought it would be helpful to\
    \ show how to convert a number from base 10 to base 10. Of course the question\
    \ was about converting from base 10 to base 10 and I answered that question. My\
    \ answer was to show how to convert a number from base 10 to base 10. Of course\
    \ the question was about converting from base 10 to base 10 and I answered that\
    \ question. My answer was to show how to convert a number from base 10 to base\
    \ 10. Of course the question was about converting from base 10 to base 10 and\
    \ I answered that question. My answer was to show how to convert a number from\
    \ base 10 to base 10. Of course the question was about converting from base 10\
    \ to base 10 and I answered that question.\n<|/ c |>\n<| c |>\nI see your point.\
    \ My answer was to show how to convert a number from base 10 to base 10. Of course\
    \ the question was about converting from base 10 to base 10 and I answered that\
    \ question. My answer was to show how to convert a number from base 10 to base\
    \ 10. Of course the question was about converting from base 10 to base 10 and\
    \ I answered that question. My answer was to show how to convert a number from\
    \ base 10 to base 10. Of course the question was about converting from base 10\
    \ to base 10 and I answered that question. My answer was to show how to convert\
    \ a number from base 10 to base 10. Of course the question was about converting\
    \ from base 10 to base 10 and I answered that question.\n<|/ c |>\n<| a dscore=3\
    \ |>\nThe accepted answer does not work for negative numbers. Here is a version\
    \ that does:\n<code>\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp21pgpmxw.jl:25\nin expression starting at\
    \ /tmp/tmp21pgpmxw.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x * base^2)\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    change_base(::Int64, ::Int64)\nusing Test\n\n@testset begin\n\ncandidate\
    \ = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3)\
    \ == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpflezkhvu.jl:19\nin expression starting at\
    \ /tmp/tmpflezkhvu.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    else\n        if base == 2\n          \
    \  return string(x)\n        else\n            digits = string(x)\n          \
    \  digits = digits[2:end]\n            digits = digits[digits.length - digits.length\
    \ % base]\n            digits = digits[digits.length / base]\n            digits\
    \ = digits[digits.length % base]\n            digits = digits[2:end]\n       \
    \     digits = digits[digits.length - digits.length % base]\n            digits\
    \ = digits[digits.length / base]\n            digits = digits[digits.length %\
    \ base]\n            digits = digits[2:end]\n            digits = digits[digits.length\
    \ - digits.length % base]\n            digits = digits[digits.length / base]\n\
    \            digits = digits[digits.length % base]\n            digits = digits[2:end]\n\
    \            digits = digits[digits.length - digits.length % base]\n         \
    \   digits = digits[digits.length / base]\n            digits = digits[digits.length\
    \ % base]\n            digits = digits[2:end]\n            digits = digits[digits.length\
    \ - digits.length % base]\n            digits = digits[digits.length / base]\n\
    \            digits = digits[digits.length % base]\n            digits = digits[2:end]\n\
    \            digits = digits[digits.length - digits.length % base]\n         \
    \   digits = digits[digits.length / base]\n            digits = digits[digits.length\
    \ % base]\n            digits = digits[2:end]\n            digits = digits[digits.length\
    \ - digits.length % base]\n            digits = digits[digits.length / base]\n\
    \            digits = digits[digits.length % base]\n            digits = digits[2:end]\n\
    \            digits = digits[digits.length - digits.length % base]\n         \
    \   digits = digits[digits.length / base]\n            digits = digits[digits.length\
    \ % base]\n            digits = digits[2:end]\n            digits = digits[digits.length\
    \ - digits.length % base]\n            digits = digits[digits.length / base]\n\
    \            digits = digits[digits.length % base]\n            digits = digits[2:end]\n\
    \            digits = digits[digits.length - digits.length % base]\n         \
    \   digits = digits[digits.length / base]\n            digits = digits[digits.length\
    \ % base]\n            digits = digits[2:end]\n            digits = digits[digits.length\
    \ - digits.length % base]\n            digits = digits[digits.length / base]\n\
    using Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmp5ro2t8sn.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5ro2t8sn.jl:1\n\
    in expression starting at /tmp/tmp5ro2t8sn.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        digits = string(x)\n        digits = digits[2:end]\n      \
    \  digits = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        \nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmps0gz06c5.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps0gz06c5.jl:1\n\
    in expression starting at /tmp/tmps0gz06c5.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base == 10 \n        return toString(x)\n    else\
    \ if base == 2 \n        return toString(base10tobase2(x))\n    else \n      \
    \  return toString(base10tobase10(x, base))\nend\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 3)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that converts a number from base 10 to base 2.\nThe function should\
    \ take two arguments: x is the number to be converted, and base is the base of\
    \ the number.\nThe function should return the string representation of the number\
    \ in base 2.\nThe function should raise an error if the base is not 10 or 2.\n\
    The function should raise an error if the number is not an integer.\nThe function\
    \ should raise an error if the number is not positive.\nThe function should raise\
    \ an error if the number is not negative.\nThe function should raise an error\
    \ if the number is not zero.\nThe function should raise an error if the number\
    \ is NaN.\nThe function should raise an error if the number is infinite.\nThe\
    \ function should raise an error if the number is negative.\nThe function should\
    \ raise an error if the number is zero.\nThe function should raise an error if\
    \ the number is less than zero.\nThe function should raise an error if the number\
    \ is greater than or equal to zero.\nThe function should raise an error if the\
    \ number is infinite.\nThe function should raise an error if the number is NaN.\n\
    The function should raise an error if the number is negative.\nThe function should\
    \ raise an error if the number is zero.\nThe function should raise an error if\
    \ the number is less than zero.\nThe function should raise an error if the number\
    \ is greater than or equal to zero.\nThe function should raise an error if the\
    \ number is infinite.\nThe function should raise an error if the number is NaN.\n\
    The function should raise an error if the number is negative.\nThe function should\
    \ raise an error if the number is zero.\nThe function should raise an error if\
    \ the number is less than zero.\nThe function should raise an error if the number\
    \ is greater than or equal to zero.\nThe function should raise an error if the\
    \ number is infinite.\nThe function should raise an error if the number is NaN.\n\
    The function should raise an error if the number is negative.\nThe function should\
    \ raise an error if the number is zero.\nThe function should raise an error if\
    \ the number is less than zero.\nThe function should raise an error if the number\
    \ is greater than or equal to zero.\nThe function should raise an error if the\
    \ number is infinite.\nThe function should raise an error if the number is NaN.\n\
    The function should raise an error if the number is negative.\nThe function should\
    \ raise an error if the number is zero.\nThe function should raise an error if\
    \ the number is less than zero.\nThe function should raise an error if the number\
    \ is greater than or equal to zero.\nThe function should raise an error if the\
    \ number is infinite.\nThe function \nusing Test\n\n@testset begin\n\ncandidate\
    \ = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3)\
    \ == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgvo53qjh.jl:14\nin expression starting at\
    \ /tmp/tmpgvo53qjh.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10\n        return string(x)\n    else\n\
    \        return string(x/base^base)\nend\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 3)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n<text>\nExercise: Write\
    \ a function that converts binary numbers to decimal numbers.\nThe function should\
    \ take two arguments: a string of binary digits and a base\nnumber. The function\
    \ should return a string representing the decimal number\nrepresented by the binary\
    \ digits. The function should raise an error if the\nbase is less than 2 or if\
    \ the number of digits in the binary string is\nnot an even number.\nusing Test\n\
    \n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\"\
    )\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\"\
    )\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\"\
    )\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t\
    @test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5,\
    \ 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) ==\
    \ \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1jyvfyla.jl:17\nin expression starting at\
    \ /tmp/tmp1jyvfyla.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10\n        return show(base * x)\n   \
    \ else\n        return show(base * x / 10)\nend\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 3)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that converts a binary number to a decimal number.\nusing Test\n\n\
    @testset begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\"\
    )\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\"\
    )\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\"\
    )\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t\
    @test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5,\
    \ 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) ==\
    \ \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyt7q1h9v.jl:17\nin expression starting at\
    \ /tmp/tmpyt7q1h9v.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    \n    digits = digits(x)\n    digits =\
    \ digits[digits.length - base]\n    digits = digits[digits.length - base]\n  \
    \  digits = digits[digits.length - base]\n    digits = digits[digits.length -\
    \ base]\n    digits = digits[digits.length - base]\n    digits = digits[digits.length\
    \ - base]\n    digits = digits[digits.length - base]\n    digits = digits[digits.length\
    \ - base]\n    digits = digits[digits.length - base]\n    digits = digits[digits.length\
    \ - base]\n    digits = digits[digits.length - base]\n    digits = digits[digits.length\
    \ - base]\n    digits = digits[digits.length - base]\n    digits = digits[digits.length\
    \ - base]\n    digits = digits[digits.length - base]\n    digits = digits[digits.length\
    \ - base]\n    digits = digits[digits.length - base]\n    digits = digits[digits.length\
    \ - base]\n    digits = digits[digits.length - base]\n    digits = digits[digits.length\
    \ - base]\n    digits = digits[digits.length - base]\n    digits = digits[digits.length\
    \ - base]\n    digits = digits[digits.length - base]\n    digits = digits[digits.length\
    \ - base]\n    digits = digits[digits.length - base]\n    digits = digits[digits.length\
    \ - base]\n    digits = digits[digits.length - base]\n    digits = digits[digits.length\
    \ - base]\n    digits = digits[digits.length - base]\n    digits = digits[digits.length\
    \ - base]\n    digits = digits[digits.length - base]\n    digits = digits[digits.length\
    \ - base]\n    digits = digits[digits.length - base]\n    digits = digits[digits.length\
    \ - base]\n    digits = digits[digits.length - base]\n    digits = digits[digits.length\
    \ - base]\n    digits = digits[digits.length - base]\n    digits = digits[digits.length\
    \ - base]\n    digits = digits[digits.length - base]\n    digits = digits[digits.length\
    \ - base]\n    digits = digits[digits.length - base]\n    digits = digits[digits.length\
    \ - base]\n    digits = digits[digits.length - base]\n    digits = digits[digits.length\
    \ - base\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg34qadbs.jl:1\nin expression starting at /tmp/tmpg34qadbs.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base == 10 \n        digits = digits(x)\n    \
    \    digits = digits[2:end]\n        digits = digits[2:end]\n        digits =\
    \ digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digits[2:end]\n        digits = digits[2:end]\n        digits = digits[2:end]\n\
    \        digits = digits[2:end]\n        digits = digits[2:end]\n        digits\
    \ = digit\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0a0qe9in.jl:1\nin expression starting at /tmp/tmp0a0qe9in.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base == 10 \n        return toString(x)\n    else\
    \ \n        return toString(change_base(x / base, base) * base)\nend\n</cell>\n\
    <code language=julia-1.5>\nchange_base(8, 3)\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 2)\n</cell>\n<code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n\
    <text>\nExercise: Write a function that converts a number from base 10 to base\
    \ 2.\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphd8honpn.jl:17\nin expression starting at\
    \ /tmp/tmphd8honpn.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x*base)\nend\n</cell>\n<text>\nExercise: Write\
    \ a function that converts a string to a number.\nThe function should accept a\
    \ string and return the number it represents.\nThe function should throw an error\
    \ if the string does not represent a number.\nThe function should throw an error\
    \ if the string cannot be converted to a number.\nThe function should throw an\
    \ error if the string cannot be converted to a number in the correct base.\nThe\
    \ function should throw an error if the string cannot be converted to a number\
    \ in the correct base.\nThe function should throw an error if the string cannot\
    \ be converted to a number in the correct base.\nThe function should throw an\
    \ error if the string cannot be converted to a number in the correct base.\nThe\
    \ function should throw an error if the string cannot be converted to a number\
    \ in the correct base.\nThe function should throw an error if the string cannot\
    \ be converted to a number in the correct base.\nThe function should throw an\
    \ error if the string cannot be converted to a number in the correct base.\nThe\
    \ function should throw an error if the string cannot be converted to a number\
    \ in the correct base.\nThe function should throw an error if the string cannot\
    \ be converted to a number in the correct base.\nThe function should throw an\
    \ error if the string cannot be converted to a number in the correct base.\nThe\
    \ function should throw an error if the string cannot be converted to a number\
    \ in the correct base.\nThe function should throw an error if the string cannot\
    \ be converted to a number in the correct base.\nThe function should throw an\
    \ error if the string cannot be converted to a number in the correct base.\nThe\
    \ function should throw an error if the string cannot be converted to a number\
    \ in the correct base.\nThe function should throw an error if the string cannot\
    \ be converted to a number in the correct base.\nThe function should throw an\
    \ error if the string cannot be converted to a number in the correct base.\nThe\
    \ function should throw an error if the string cannot be converted to a number\
    \ in the correct base.\nThe function should throw an error if the string cannot\
    \ be converted to a number in the correct base.\nThe function should throw an\
    \ error if the string cannot be converted to a number in the correct base.\nThe\
    \ function should throw an error if the string cannot be converted to a number\
    \ in the correct base.\nThe function should throw an error if the string cannot\
    \ be converted to a number in the correct base.\nThe function should throw an\
    \ error if the string cannot be converted to a number in the correct base.\nThe\
    \ function should throw an error if the string cannot be converted to a number\
    \ in the correct base.\nThe function should throw an error if the string cannot\
    \ be converted to a number in the correct base.\nThe function should throw an\
    \ error if the string cannot be converted to a number in the correct base.\nThe\
    \ function should throw an error if the string cannot be converted to a number\
    \ in the correct base.\nThe function should throw an error if the string cannot\
    \ be converted to a number in the correct base.\nThe function should throw an\
    \ error if the string cannot be converted to a number in the \nusing Test\n\n\
    @testset begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\"\
    )\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\"\
    )\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\"\
    )\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t\
    @test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5,\
    \ 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) ==\
    \ \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0atfrxp8.jl:19\nin expression starting at\
    \ /tmp/tmp0atfrxp8.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base == 10\n        return toString(x)\n    else\n\
    \        return toString(change_base(x, base-1))\nend\n</cell>\n<code language=julia-1.3>\n\
    change_base(8, 3)\n</cell>\n<code language=julia-1.3>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.3>\nchange_base(7, 2)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that converts a string to a vector of characters.\nThe string may\
    \ contain any character (including spaces) and may contain no more than 20 characters.\n\
    The function should return a vector of characters.\nThe function should ignore\
    \ any non-alphabetic characters (including spaces) and should ignore any spaces.\n\
    The function should ignore any leading or trailing spaces.\nThe function should\
    \ ignore any leading or trailing non-alphabetic characters.\nThe function should\
    \ ignore any leading or trailing spaces.\nThe function should ignore any leading\
    \ or trailing non-alphabetic characters.\nThe function should ignore any leading\
    \ or trailing spaces.\nThe function should ignore any leading or trailing non-alphabetic\
    \ characters.\nThe function should ignore any leading or trailing spaces.\nThe\
    \ function should ignore any leading or trailing non-alphabetic characters.\n\
    The function should ignore any leading or trailing spaces.\nThe function should\
    \ ignore any leading or trailing non-alphabetic characters.\nThe function should\
    \ ignore any leading or trailing spaces.\nThe function should ignore any leading\
    \ or trailing non-alphabetic characters.\nThe function should ignore any leading\
    \ or trailing spaces.\nThe function should ignore any leading or trailing non-alphabetic\
    \ characters.\nThe function should ignore any leading or trailing spaces.\nThe\
    \ function should ignore any leading or trailing non-alphabetic characters.\n\
    The function should ignore any leading or trailing spaces.\nThe function should\
    \ ignore any leading or trailing non-alphabetic characters.\nThe function should\
    \ ignore any leading or trailing spaces.\nThe function should ignore any leading\
    \ or trailing non-alphabetic characters.\nThe function should ignore any leading\
    \ or trailing spaces.\nThe function should ignore any leading or trailing non-alphabetic\
    \ characters.\nThe function should ignore any leading or trailing spaces.\nThe\
    \ function should ignore any leading or trailing non-alphabetic characters.\n\
    The function should ignore any leading or trailing spaces.\nThe function should\
    \ ignore any leading or trailing non-alphabetic characters.\nThe function should\
    \ ignore any leading or trailing spaces.\nThe function should ignore any leading\
    \ or trailing non-alphabetic characters.\nThe function should ignore any leading\
    \ or trailing spaces.\nThe function should ignore any leading or trailing non-alphabetic\
    \ characters.\nThe function should ignore any leading or \nusing Test\n\n@testset\
    \ begin\n\ncandidate = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9,\
    \ 3) == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9po6_qd9.jl:17\nin expression starting at\
    \ /tmp/tmp9po6_qd9.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 10\n        return str((x % base) + base)\n\
    \    else\n        return str((x % base) / base)\nend\n</cell>\n<code language=julia-1.5>\n\
    change_base(8, 3)\n</cell>\n<code language=julia-1.5>\nchange_base(8, 2)\n</cell>\n\
    <code language=julia-1.5>\nchange_base(7, 2)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that converts a binary number to its decimal equivalent.\nThe function\
    \ should take one input argument, x, and return a string representation of its\
    \ decimal equivalent.\nThe function should return an error if the input is not\
    \ binary.\nThe function should return an error if the input is not of length 2.\n\
    The function should return an error if the input is not of length 1 or 2.\nThe\
    \ function should return an error if the input is not of length 1 or 2.\nThe function\
    \ should return an error if the input is not of length 1 or 2.\nThe function should\
    \ return an error if the input is not of length 1 or 2.\nThe function should return\
    \ an error if the input is not of length 1 or 2.\nThe function should return an\
    \ error if the input is not of length 1 or 2.\nThe function should return an error\
    \ if the input is not of length 1 or 2.\nThe function should return an error if\
    \ the input is not of length 1 or 2.\nThe function should return an error if the\
    \ input is not of length 1 or 2.\nThe function should return an error if the input\
    \ is not of length 1 or 2.\nThe function should return an error if the input is\
    \ not of length 1 or 2.\nThe function should return an error if the input is not\
    \ of length 1 or 2.\nThe function should return an error if the input is not of\
    \ length 1 or 2.\nThe function should return an error if the input is not of length\
    \ 1 or 2.\nThe function should return an error if the input is not of length 1\
    \ or 2.\nThe function should return an error if the input is not of length 1 or\
    \ 2.\nThe function should return an error if the input is not of length 1 or 2.\n\
    The function should return an error if the input is not of length 1 or 2.\nThe\
    \ function should return an error if the input is not of length 1 or 2.\nThe function\
    \ should return an error if the input is not of length 1 or 2.\nThe function should\
    \ return an error if the input is not of length 1 or 2.\nThe function should return\
    \ an error if the input is not of length 1 or 2.\nThe function should return an\
    \ error if the input is not of length 1 or 2.\nThe function should return an error\
    \ if the input is not of length 1 or 2.\nThe function should return an error if\
    \ the input is not of length 1 or 2.\nThe function should return an error if the\
    \ input is not of length 1 or 2.\nThe function should return an error if the input\
    \ is not of length 1 or 2.\nThe function should return an error if the input is\
    \ not of length 1 or 2.\nThe function should return an error if the input is not\
    \ of length 1 or 2.\n\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\
    \t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234,\
    \ 2) == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0vjasrtv.jl:17\nin expression starting at\
    \ /tmp/tmp0vjasrtv.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        throw(ArgumentError(\"\
    base must be between 2 and 36\"))\n    elseif base == 2\n        return string(x)\n\
    \    else\n        return string(x * base^2)\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    change_base(::Int64, ::Int64)\nusing Test\n\n@testset begin\n\ncandidate\
    \ = change_base;\n\t@test(candidate(8, 3) == \"22\")\n\t@test(candidate(9, 3)\
    \ == \"100\")\n\t@test(candidate(234, 2) == \"11101010\")\n\t@test(candidate(16,\
    \ 2) == \"10000\")\n\t@test(candidate(8, 2) == \"1000\")\n\t@test(candidate(7,\
    \ 2) == \"111\")\n\t@test(candidate(2, 3) == \"2\")\n\t@test(candidate(3, 4) ==\
    \ \"3\")\n\t@test(candidate(4, 5) == \"4\")\n\t@test(candidate(5, 6) == \"5\"\
    )\n\t@test(candidate(6, 7) == \"6\")\n\t@test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmply1xgir_.jl:19\nin expression starting at\
    \ /tmp/tmply1xgir_.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Change numerical base of input number x to base.\n    return string\
    \ representation after the conversion.\n    base numbers are less than 10.\n \
    \   >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n \
    \   >>> change_base(7, 2)\n    '111'\n    \"\"\"\nfunction change_base(x::Int64,\
    \ base::Int64)::String \n    if base < 2 || base > 36\n        error(\"Base must\
    \ be between 2 and 36\")\n    elseif base == 2\n        return string(x)\n   \
    \ else\n        return string(x * base^2)\nend\n</code>\n<|/ a |>\n<| a dscore=0\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = change_base;\n\t@test(candidate(8,\
    \ 3) == \"22\")\n\t@test(candidate(9, 3) == \"100\")\n\t@test(candidate(234, 2)\
    \ == \"11101010\")\n\t@test(candidate(16, 2) == \"10000\")\n\t@test(candidate(8,\
    \ 2) == \"1000\")\n\t@test(candidate(7, 2) == \"111\")\n\t@test(candidate(2, 3)\
    \ == \"2\")\n\t@test(candidate(3, 4) == \"3\")\n\t@test(candidate(4, 5) == \"\
    4\")\n\t@test(candidate(5, 6) == \"5\")\n\t@test(candidate(6, 7) == \"6\")\n\t\
    @test(candidate(7, 8) == \"7\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpucz3v51_.jl:19\nin expression starting at\
    \ /tmp/tmpucz3v51_.jl:19\n"
  exit_code: 1
  status: SyntaxError
