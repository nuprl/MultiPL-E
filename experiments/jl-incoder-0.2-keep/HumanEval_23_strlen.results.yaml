name: HumanEval_23_strlen
language: julia
results:
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    local len::Int64 = 0\n    for char in string:\n        len = len + 1\n  \
    \  return len\n</code>\n<|/ a |>\n<| c |>\nThis does not provide an answer to\
    \ the question. To critique or request clarification from an author, leave a comment\
    \ below their post. - [From Review](/review/low-quality-posts/11956271)\n<|/ c\
    \ |>\n<| c |>\nI believe this does answer the question. He asked how to count\
    \ the number of characters in a string. He also asked how to do this in Julia.\
    \ He also asked how to do this in Python. He also asked how to do this in R. He\
    \ also asked how to do this in Haskell. He also asked how to do this in Julia.\
    \ He also asked how to do this in R. He also asked how to do this in Julia. He\
    \ also asked how to do this in Julia. He also asked how to do this in Julia. He\
    \ also asked how to do this in Julia. He also asked how to do this in Julia. He\
    \ also asked how to do this in Julia. He also asked how to do this in Julia. He\
    \ also asked how to do this in Julia. He also asked how to do this in Julia. He\
    \ also asked how to do this in Julia. He also asked how to do this in Julia. He\
    \ also asked how to do this in Julia. He also asked how to do this in Julia. He\
    \ also asked how to do this in Julia. He also asked how to do this in Julia. He\
    \ also asked how to do this in Julia. He also asked how to do this in Julia. He\
    \ also asked how to do this in Julia. He also asked how to do this in Julia. He\
    \ also asked how to do this in Julia. He also asked how to do this in Julia. He\
    \ also asked how to do this in Julia. He also asked how to do this in Julia. He\
    \ also asked how to do this in Julia. He also asked how to do this in Julia. He\
    \ also asked how to do this in Julia. He also asked how to do this in Julia. He\
    \ also asked how to do this in Julia. He also asked how to do this in Julia. He\
    \ also asked how to do this in Julia. He also asked how to do this in Julia. \n\
    using Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") ==\
    \ 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxsn2rqa7.jl:10\nin expression starting at\
    \ /tmp/tmpxsn2rqa7.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    local len = string.len()\n    return len\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\"\
    ) == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpuvo85gd9.jl:16\n  Test threw exception\n\
    \  Expression: candidate(\"\") == 0\n  type String has no field len\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] strlen(string::String)\n\
    \     @ Main /tmp/tmpuvo85gd9.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpuvo85gd9.jl:16 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpuvo85gd9.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpuvo85gd9.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == 1\n  type String has no field len\n  Stacktrace:\n   [1]\
    \ getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] strlen(string::String)\n\
    \     @ Main /tmp/tmpuvo85gd9.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpuvo85gd9.jl:17 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpuvo85gd9.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpuvo85gd9.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(\"asdasnakj\") == 9\n  type String has no field len\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] strlen(string::String)\n\
    \     @ Main /tmp/tmpuvo85gd9.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpuvo85gd9.jl:18 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpuvo85gd9.jl:15\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuvo85gd9.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    local len::Int64 = 0\n    for char in string do \n        len = len + 1\n\
    \    end\n    return len\nend\n</cell>\n<code language=julia-1.5>\nstrlen(\"abc\"\
    )\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpgnlrz0fe.jl:9\nin expression starting at /tmp/tmpgnlrz0fe.jl:9\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwevy2a7a.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwevy2a7a.jl:1\n\
    in expression starting at /tmp/tmpwevy2a7a.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpsjajkd6q.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsjajkd6q.jl:1\n\
    in expression starting at /tmp/tmpsjajkd6q.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    local len::Int64 = 0\n    for c in string\n        len = len + 1\n    end\n\
    \    return len\nend\n</cell>\n<code language=julia-1.3>\nstrlen(\"abc\")\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns true if the given string is\
    \ a palindrome, and false otherwise.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8hltka8w.jl:14\nin expression starting at\
    \ /tmp/tmp8hltka8w.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.5>\n\
    strlen(\"\")\n</cell>\n<code language=julia-1.5>\nstrlen(\"abc\")\n</cell>\n<text>\n\
    Substring\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpnpb4um3g.jl:8\nin expression starting at /tmp/tmpnpb4um3g.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpakmpt4rx.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpakmpt4rx.jl:1\n\
    in expression starting at /tmp/tmpakmpt4rx.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    length::Int64 = 0\n    for char in string\n        length += 1\n    return\
    \ length\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThe `length` variable is unnecessary\
    \ and can be replaced with `length::Int64 = 0`.\n<|/ c |>\n<| c |>\nI agree, thanks\
    \ for pointing that out. I was just trying to keep it close to the original code\
    \ as much as possible.\n<|/ c |>\n<| a |>\n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\"\
    ) == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp68j6fprh.jl:12\nin expression starting at\
    \ /tmp/tmp68j6fprh.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    local result = 1\n    for char in string:\n        result = result + 1\n\
    \    return result\nend\n</cell>\n<code language=julia-1.5>\nstrlen(\"abc\")\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of characters\
    \ in a given string. \nThe function should take a string as input, and return\
    \ an Int64.\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprpxb8zw8.jl:10\nin expression starting at\
    \ /tmp/tmprpxb8zw8.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    local result = 1\n    for char in string:\n        result = result * len(char)\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9v__lygx.jl:10\nin expression starting at\
    \ /tmp/tmp9v__lygx.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Compute length of given string\n    >>> strlen('')\n    0\n \
    \   >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdupwcb7k.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdupwcb7k.jl:1\n\
    in expression starting at /tmp/tmpdupwcb7k.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    local len::Int64 = 0\n    for char in string:\n        len = len + 1\n  \
    \  return len\nend\n</cell>\n<code language=julia-1.3>\nstrlen(\"abc\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of characters in the string. \nWrite a function that takes a string and returns\
    \ the number of words in the string. \nWrite a function that takes a string and\
    \ returns the number of sentences in the string. \nWrite a function that takes\
    \ a string and returns the number of characters in the string divided by the number\
    \ of words in the string.\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkyyzvmpx.jl:10\nin expression starting at\
    \ /tmp/tmpkyyzvmpx.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp92_gx35d.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp92_gx35d.jl:1\n\
    in expression starting at /tmp/tmp92_gx35d.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp58ar94pt.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp58ar94pt.jl:1\n\
    in expression starting at /tmp/tmp58ar94pt.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0vscrm9u.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0vscrm9u.jl:1\n\
    in expression starting at /tmp/tmp0vscrm9u.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") ==\
    \ 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpi0l24oan.jl:8\nin expression starting at /tmp/tmpi0l24oan.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoe9rtisk.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpoe9rtisk.jl:1\n\
    in expression starting at /tmp/tmpoe9rtisk.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\nReturn length of given string\n\"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") ==\
    \ 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmplrtyn9w0.jl:8\nin expression starting at /tmp/tmplrtyn9w0.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    length = 0\n    for c in string\n        length += 1\n    return length\n\
    </code>\n<|/ a tags=julia,string |>\n<| a tags=julia,string |>\nThe shortest way\
    \ is to use length\n<code>\njulia> length(\"hello\")\n5\n</code>\n<|/ a dscore=5\
    \ |>\n<| c |>\n`length` also works on `Char` arrays, e.g. `length([\"h\", \"e\"\
    , \"l\", \"l\", \"o\"])` returns `5`.\n<|/ c |>\n<| a |>\nThe shortest way is\
    \ to use length\n<code>\njulia> length(\"hello\")\n5\n</code>\n<|/ a tags=julia,string\
    \ dscore=5 |>\n<| a dscore=5 |>\nThe shortest way is to use length\n<code>\njulia>\
    \ length(\"hello\")\n5\n</code>\n<|/ a tags=julia,string |>\n<| a tags=julia,string\
    \ |>\nThe shortest way is to use length\n<code>\njulia> length(\"hello\")\n5\n\
    </code>\n<|/ a dscore=4 |>\n<| a |>\nThe shortest way is to use length\n<code>\n\
    julia> length(\"hello\")\n5\n</code>\n<|/ a tags=julia,string dscore=4 |>\n<|\
    \ a dscore=4 |>\nThe shortest way is to use length\n<code>\njulia> length(\"hello\"\
    )\n5\n</code>\n<|/ a tags=julia,string |>\n<| a dscore=4 |>\nThe shortest way\
    \ is to use length\n<code>\njulia> length(\"hello\")\n5\n</code>\n<|/ a tags=julia,string\
    \ |>\n<| a tags=julia,string |>\nThe shortest way is to use length\n<code>\njulia>\
    \ length(\"hello\")\n5\n</code>\n<|/ a dscore=4 |>\n<| a dscore=3 |>\nThe shortest\
    \ way is to use length\n<code>\njulia> length(\"hello\")\n5\n</code>\n<|/ a tags=julia,string\
    \ |>\n<| a |>\nThe shortest way is to use length\n<code>\njulia> length(\"hello\"\
    )\n5\n</code>\n<|/ a dscore=3 tags=julia,string |>\n<| a tags=julia,string |>\n\
    The shortest way is to use length\n<code>\njulia> length(\"hello\")\n5\n</code>\n\
    <|/ a dscore=3 |>\n<| a dscore=3 |>\nThe shortest way is to use length\n\nusing\
    \ Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\
    \t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdc2bhb_7.jl:12\nin expression starting at\
    \ /tmp/tmpdc2bhb_7.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpkz9pwfx9.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpkz9pwfx9.jl:1\n\
    in expression starting at /tmp/tmpkz9pwfx9.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \n    if string == \"\" then \n        return 0\n    else \n        return\
    \ string.length()\nend\n</cell>\n<code language=julia-1.1>\nstrlen(\"\")\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the number of characters in\
    \ a string that are not spaces.\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl9y8vtrq.jl:14\nin expression starting at\
    \ /tmp/tmpl9y8vtrq.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpbxscmoyo.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbxscmoyo.jl:1\n\
    in expression starting at /tmp/tmpbxscmoyo.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwt1ms2x0.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwt1ms2x0.jl:1\n\
    in expression starting at /tmp/tmpwt1ms2x0.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == nil\n        0\n    else\n        string.len()\n    end\nend\n\
    </cell>\n<code language=julia-1.3>\nstrlen(\"abc\")\n</cell>\n<text>\nstrcat(string,\
    \ string...)\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw_5dev9k.jl:14\nin expression starting at\
    \ /tmp/tmpw_5dev9k.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    local result = 1\n    for char in string:\n        result = result * len(char)\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0lv5ga7i.jl:10\nin expression starting at\
    \ /tmp/tmp0lv5ga7i.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpo2x1lk5t.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpo2x1lk5t.jl:1\n\
    in expression starting at /tmp/tmpo2x1lk5t.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\nstrlen(string::AbstractString)\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp3cu8s2dj.jl:8\nin expression starting at /tmp/tmp3cu8s2dj.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    local len::Int64 = 0\n    for char in string:\n        len = len + 1\n  \
    \  return len\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyp1kiohy.jl:10\nin expression starting at\
    \ /tmp/tmpyp1kiohy.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.5>\n\
    strlen(\"abc\")\n</cell>\n<text>\nStrings are immutable in Julia\nStrings are\
    \ immutable in Julia. This means that we cannot change a string. Instead, we have\
    \ to create a new string with the desired changes.\nusing Test\n\n@testset begin\n\
    \ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\"\
    ) == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp0obcnxyv.jl:8\nin expression starting at /tmp/tmp0obcnxyv.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    Int64(string.len())\nend\n</cell>\n<code language=julia-1.3>\nstrlen(\"abc\"\
    )\n</cell>\n<text>\nSubstring extraction\nJulia has many string extraction functions.\
    \ Here are some examples:\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwv3brx95.jl:10\nin expression starting at\
    \ /tmp/tmpwv3brx95.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \n    if string == \"\"\n        return 0\n    \n    length = 0\n    for\
    \ char in string\n        length += 1\n    \n    return length\n</cell>\n<code\
    \ language=julia-1.3>\nstrlen(\"abc\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of characters in the string that\
    \ are uppercase letters.\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpprwtnuby.jl:17\nin expression starting at\
    \ /tmp/tmpprwtnuby.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    local len::Int64 = 0\n    for char in string\n        len = len + 1\n   \
    \ end\n    return len\nend\n</cell>\n<code language=julia-1.3>\nstrlen(\"abc\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that returns true if the given\
    \ string contains only letters, false otherwise.\nusing Test\n\n@testset begin\n\
    \ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\"\
    ) == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps8kyhzqw.jl:14\nin expression starting at\
    \ /tmp/tmps8kyhzqw.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    Int64(string.len())\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpf5cqzliu.jl:15\n  Test threw exception\n\
    \  Expression: candidate(\"\") == 0\n  type String has no field len\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] strlen(string::String)\n\
    \     @ Main /tmp/tmpf5cqzliu.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpf5cqzliu.jl:15 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpf5cqzliu.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpf5cqzliu.jl:16\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == 1\n  type String has no field len\n  Stacktrace:\n   [1]\
    \ getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] strlen(string::String)\n\
    \     @ Main /tmp/tmpf5cqzliu.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpf5cqzliu.jl:16 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpf5cqzliu.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpf5cqzliu.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(\"asdasnakj\") == 9\n  type String has no field len\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] strlen(string::String)\n\
    \     @ Main /tmp/tmpf5cqzliu.jl:8\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpf5cqzliu.jl:17 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpf5cqzliu.jl:14\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf5cqzliu.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpeknqzgp7.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpeknqzgp7.jl:1\n\
    in expression starting at /tmp/tmpeknqzgp7.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    local result = 1\n    for char in string:\n        result = result * len(char)\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu3yagsgk.jl:10\nin expression starting at\
    \ /tmp/tmpu3yagsgk.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    string.length\nend\n</cell>\n<code language=julia-1.3>\nstrlen(\"abc\")\n\
    </cell>\n<text>\nSubstring\nReturn substring from given string from given start\
    \ index to given end index\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzk_8tcip.jl:10\nin expression starting at\
    \ /tmp/tmpzk_8tcip.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Calculate the length of given string\n    >>> strlen('abc')\n\
    \    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_zum8f9v.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_zum8f9v.jl:1\n\
    in expression starting at /tmp/tmp_zum8f9v.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.5>\n\
    strlen(\"abc\")\n</cell>\n<text>\nSubstring\nusing Test\n\n@testset begin\n\n\
    candidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") ==\
    \ 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpp5h0nnbh.jl:8\nin expression starting at /tmp/tmpp5h0nnbh.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    Int64(string.len())\nend\n</cell>\n<code language=julia-1.3>\nstrlen(\"abc\"\
    )\n</cell>\n<text>\nReturn number of characters in given string\nReturn number\
    \ of characters in given string\nReturn number of characters in given string\n\
    Return number of characters in given string\nReturn number of characters in given\
    \ string\nReturn number of characters in given string\nReturn number of characters\
    \ in given string\nReturn number of characters in given string\nReturn number\
    \ of characters in given string\nReturn number of characters in given string\n\
    Return number of characters in given string\nReturn number of characters in given\
    \ string\nReturn number of characters in given string\nReturn number of characters\
    \ in given string\nReturn number of characters in given string\nReturn number\
    \ of characters in given string\nReturn number of characters in given string\n\
    Return number of characters in given string\nReturn number of characters in given\
    \ string\nReturn number of characters in given string\nReturn number of characters\
    \ in given string\nReturn number of characters in given string\nReturn number\
    \ of characters in given string\nReturn number of characters in given string\n\
    Return number of characters in given string\nReturn number of characters in given\
    \ string\nReturn number of characters in given string\nReturn number of characters\
    \ in given string\nReturn number of characters in given string\nReturn number\
    \ of characters in given string\nReturn number of characters in given string\n\
    Return number of characters in given string\nReturn number of characters in given\
    \ string\nReturn number of characters in given string\nReturn number of characters\
    \ in given string\nReturn number of characters in given string\nReturn number\
    \ of characters in given string\nReturn number of characters in given string\n\
    Return number of characters in given string\nReturn number of characters in given\
    \ string\nReturn number of characters in given string\nReturn number of characters\
    \ in given string\nReturn number of characters in given string\nReturn number\
    \ of characters in given string\nReturn number of characters in given string\n\
    Return number of characters in given string\nReturn number of characters in given\
    \ string\nReturn number of characters in given string\nReturn number of characters\
    \ in given string\nReturn number of characters in given string\nReturn number\
    \ of characters in given string\nReturn number of characters in given string\n\
    Return number of characters in given string\nReturn number of characters in given\
    \ string\nReturn number of characters in given string\nReturn number of characters\
    \ in given string\nReturn number of characters in given string\nReturn number\
    \ of characters in given string\nReturn number of characters in given string\n\
    Return number of characters in given string\nReturn number of characters in given\
    \ string\nReturn number of characters in given string\nReturn number of characters\
    \ in given string\nReturn number of characters in given string\nReturn number\
    \ of characters in given string\nReturn number of characters in given string\n\
    Return number of characters in given string\nReturn number of characters in given\
    \ string\nReturn number of characters in given \nusing Test\n\n@testset begin\n\
    \ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\"\
    ) == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpia1yvb8v.jl:10\nin expression starting at\
    \ /tmp/tmpia1yvb8v.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == \"\" then 0 else string.length\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpuv8t_8bc.jl:8\nin expression starting at /tmp/tmpuv8t_8bc.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp1mih6si5.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1mih6si5.jl:1\n\
    in expression starting at /tmp/tmp1mih6si5.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy35gz3oh.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy35gz3oh.jl:1\n\
    in expression starting at /tmp/tmpy35gz3oh.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    len = length(string)\n    if len == 0 \n        0\n    else\n        len\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\nReturn length of given\
    \ string\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpux4jiaj5.jl:15\nin expression starting at\
    \ /tmp/tmpux4jiaj5.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    charindex(string::String, character::Char)::Int64\nusing Test\n\n\
    @testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpam7u_sd3.jl:8\nin expression starting at /tmp/tmpam7u_sd3.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    length::Int64 = 0\n    for char in string\n        length += 1\n    return\
    \ length\n</code>\n<|/ a tags=julia |>\n<| c |>\nThis is not the correct answer,\
    \ as `length` does not count the null character. `length(\"abc\")` returns 3,\
    \ not 4.\n<|/ c |>\n<| c |>\nI agree with you, I have edited my answer to reflect\
    \ this and to also include a link to the relevant documentation.\n<|/ c |>\n<|\
    \ a dscore=4 tags=julia |>\nThe most efficient way is to use length. \n<code>\n\
    julia> length(\"abc\")\n3\n</code>\n<|/ a |>\n<| a tags=julia |>\nThe most efficient\
    \ way is to use length. \n<code>\njulia> length(\"abc\")\n3\n</code>\n<|/ a dscore=4\
    \ |>\n<| a |>\nThe most efficient way is to use length. \n<code>\njulia> length(\"\
    abc\")\n3\n</code>\n<|/ a dscore=4 tags=julia |>\n<| a tags=julia |>\nThe most\
    \ efficient way is to use length. \n<code>\njulia> length(\"abc\")\n3\n</code>\n\
    <|/ a dscore=3 |>\n<| a dscore=3 |>\nThe most efficient way is to use length.\
    \ \n<code>\njulia> length(\"abc\")\n3\n</code>\n<|/ a tags=julia |>\n<| a dscore=3\
    \ |>\nThe most efficient way is to use length. \n<code>\njulia> length(\"abc\"\
    )\n3\n</code>\n<|/ a tags=julia |>\n<| a tags=julia |>\nThe most efficient way\
    \ is to use length. \n<code>\njulia> length(\"abc\")\n3\n</code>\n<|/ a dscore=3\
    \ |>\n<| a tags=julia |>\nThe most efficient way is to use length. \n<code>\n\
    julia> length(\"abc\")\n3\n</code>\n<|/ a dscore=3 |>\n<| a |>\nThe most efficient\
    \ way is to use length. \n<code>\njulia> length(\"abc\")\n3\n</code>\n<|/ a dscore=3\
    \ tags=julia |>\n<| a tags=julia |>\nThe most efficient way is to use length.\
    \ \n<code>\njulia> length(\"abc\")\n3\n</code>\n<|/ a dscore=3 |>\n<| a tags=julia\
    \ |>\nThe most efficient way is to use length. \n<code>\njulia> \nusing Test\n\
    \n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnk47w0bj.jl:12\nin expression starting at\
    \ /tmp/tmpnk47w0bj.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmdexic5a.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmdexic5a.jl:1\n\
    in expression starting at /tmp/tmpmdexic5a.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == ''\n        return 0\n    else \n        return string.length()\n\
    end\n</cell>\n<code language=julia-1.5>\nstrlen(\"abc\")\n</cell>\n<text>\nSubstring\n\
    using Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") ==\
    \ 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid empty character literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphv8iyyz1.jl:8\nin expression starting at /tmp/tmphv8iyyz1.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == \"\" then 0 else string.length()\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\nReturn length of given string\n\"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") ==\
    \ 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpb1nbpp8s.jl:8\nin expression starting at /tmp/tmpb1nbpp8s.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    local result = 1\n    for char in string:\n        result = result * len(char)\n\
    \    return result\nend\n</cell>\n<code language=julia-1.3>\nstrlen(\"abc\")\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of characters\
    \ in a string that are not in the given set.\nusing Test\n\n@testset begin\n\n\
    candidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") ==\
    \ 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplp9_ihtz.jl:10\nin expression starting at\
    \ /tmp/tmplp9_ihtz.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Calculate the length of given string\n    >>> strlen('')\n  \
    \  0\n    >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\"\
    ) == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpzq7ik7_e.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzq7ik7_e.jl:1\n\
    in expression starting at /tmp/tmpzq7ik7_e.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    length = 0\n    for c in string:\n        length = length + 1\n    return\
    \ length\n</code>\n<|/ a tags=julia,string |>\n<| c |>\nThis doesn't work for\
    \ me. `strlen(\"abc\")` returns `3` instead of `2`.\n<|/ c |>\n<| c |>\nI tested\
    \ it on Julia 0.6.0 and it works fine. Maybe you have a different version?\n<|/\
    \ c |>\n<| c |>\nI tested it on 0.6.1 and it works fine. Maybe you have a different\
    \ version?\n<|/ c |>\n<| c |>\nI tested it on 0.6.2 and it works fine. Maybe you\
    \ have a different version?\n<|/ c |>\n<| c |>\nI tested it on 0.6.3 and it works\
    \ fine. Maybe you have a different version?\n<|/ c |>\n<| a dscore=4 |>\nIn Julia\
    \ 0.6.1 you can use the function length\n<code>\njulia> length(\"abc\")\n2\n</code>\n\
    <|/ a tags=julia,string |>\n<| c |>\nThis doesn't work for me. `length(\"abc\"\
    )` returns `3` instead of `2`.\n<|/ c |>\n<| c |>\nIt works for me on Julia 0.6.1.\
    \ What version are you using?\n<|/ c |>\n<| c |>\nI tested it on 0.6.1 and it\
    \ works fine. Maybe you have a different version?\n<|/ c |>\n<| c |>\nI tested\
    \ it on 0.6.2 and it works fine. Maybe you have a different version?\n<|/ c |>\n\
    <| c |>\nI tested it on 0.6.3 and it works fine. Maybe you have a different version?\n\
    <|/ c |>\n<| a |>\nIn Julia 0.6.1 you can use the function length\n<code>\njulia>\
    \ length(\"abc\")\n2\n</code>\n<|/ a tags=julia,string dscore=4 |>\n<| a tags=julia,string\
    \ |>\nIn Julia 0.6.1 you can use the function length\n<code>\njulia> length(\"\
    abc\")\n2\n</code>\n<|/ a dscore=3 |>\n<| a dscore=3 |>\nIn Julia 0.6.1 you can\
    \ use the function length\n<code>\njulia> length(\"abc\")\n2\n</code>\n<|/ a tags=julia,string\
    \ |>\n<| a dscore=3 |>\nIn Julia 0.6.1 you can use the function length\n<code>\n\
    julia> length(\"abc\")\n2\n</code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7n67wasz.jl:10\nin expression starting at\
    \ /tmp/tmp7n67wasz.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \n    \"\"\"\n    \n    \n    # Your code here\n    \n    return string.len()\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzumh856i.jl:1\nin expression starting at /tmp/tmpzumh856i.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdhy_a7yx.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdhy_a7yx.jl:1\n\
    in expression starting at /tmp/tmpdhy_a7yx.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    local string\n    local length\n    local i\n    local j\n    local length\n\
    \    length = 0\n    for i = 1, #string do\n        j = string.sub(i, i+1)\n \
    \       length = length + j\n    end\n    return length\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") ==\
    \ 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: local variable name \"string\" conflicts with\
    \ an argument\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpukgopga0.jl:1\n\
    in expression starting at /tmp/tmpukgopga0.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpngbsn04w.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpngbsn04w.jl:1\n\
    in expression starting at /tmp/tmpngbsn04w.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == ''\n        return 0\n    else\n        return string.length\n\
    end\n</cell>\n<code language=julia-1.3>\nstrlen(\"abc\")\n</cell>\n<text>\nSubstring\n\
    using Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") ==\
    \ 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid empty character literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpss35a482.jl:8\nin expression starting at /tmp/tmpss35a482.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\nReturn length of given string\n\"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") ==\
    \ 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1ujxomdc.jl:8\nin expression starting at /tmp/tmp1ujxomdc.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp2k56303u.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2k56303u.jl:1\n\
    in expression starting at /tmp/tmp2k56303u.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == \"\" then \n        return 0\n    else \n        return string.length\n\
    end\n</cell>\n<code language=julia-1.3>\nstrlen(\"abc\")\n</cell>\n<text>\nString\
    \ concatenation\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbenv4a45.jl:13\nin expression starting at\
    \ /tmp/tmpbenv4a45.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.3>\n\
    strlen(\"abc\")\n</cell>\n<text>\nSubstring\nReturn a substring of a given string\n\
    using Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") ==\
    \ 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmps40g6lfm.jl:8\nin expression starting at /tmp/tmps40g6lfm.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.3>\n\
    strlen(\"abc\")\n</cell>\n<text>\nSubstrings\nJulia has many string functions\
    \ to work with substrings. Here are some examples:\nusing Test\n\n@testset begin\n\
    \ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\"\
    ) == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpv9dl249k.jl:8\nin expression starting at /tmp/tmpv9dl249k.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdz_vtea6.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdz_vtea6.jl:1\n\
    in expression starting at /tmp/tmpdz_vtea6.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    local length = 0\n    for char in string:\n        length = length + 1\n\
    \    return length\nend\n</cell>\n<code language=julia-1.0>\nstrlen(\"\")\n</cell>\n\
    <code language=julia-1.0>\nstrlen(\"abc\")\n</cell>\n<text>\nStrings are immutable\
    \ in Julia\nStrings are immutable in Julia. Strings are immutable because Julia\
    \ is designed to avoid copying strings. Strings are immutable because Julia is\
    \ designed to avoid copying strings. Strings are immutable because Julia is designed\
    \ to avoid copying strings. Strings are immutable because Julia is designed to\
    \ avoid copying strings. Strings are immutable because Julia is designed to avoid\
    \ copying strings. Strings are immutable because Julia is designed to avoid copying\
    \ strings. Strings are immutable because Julia is designed to avoid copying strings.\
    \ Strings are immutable because Julia is designed to avoid copying strings. Strings\
    \ are immutable because Julia is designed to avoid copying strings. Strings are\
    \ immutable because Julia is designed to avoid copying strings. Strings are immutable\
    \ because Julia is designed to avoid copying strings. Strings are immutable because\
    \ Julia is designed to avoid copying strings. Strings are immutable because Julia\
    \ is designed to avoid copying strings. Strings are immutable because Julia is\
    \ designed to avoid copying strings. Strings are immutable because Julia is designed\
    \ to avoid copying strings. Strings are immutable because Julia is designed to\
    \ avoid copying strings. Strings are immutable because Julia is designed to avoid\
    \ copying strings. Strings are immutable because Julia is designed to avoid copying\
    \ strings. Strings are immutable because Julia is designed to avoid copying strings.\
    \ Strings are immutable because Julia is designed to avoid copying strings. Strings\
    \ are immutable because Julia is designed to avoid copying strings. Strings are\
    \ immutable because Julia is designed to avoid copying strings. Strings are immutable\
    \ because Julia is designed to avoid copying strings. Strings are immutable because\
    \ Julia is designed to avoid copying strings. Strings are immutable because Julia\
    \ is designed to avoid copying strings. Strings are immutable because Julia is\
    \ designed to avoid copying strings. Strings are immutable because Julia is designed\
    \ to avoid copying strings. Strings are immutable because Julia is de\nusing Test\n\
    \n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo0h1d9lb.jl:10\nin expression starting at\
    \ /tmp/tmpo0h1d9lb.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmprcbc7uyg.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprcbc7uyg.jl:1\n\
    in expression starting at /tmp/tmprcbc7uyg.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    local len::Int64 = 0\n    for char in string\n        len = len + 1\n   \
    \ end\n    return len\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp4aqmtgu4.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4aqmtgu4.jl:1\n\
    in expression starting at /tmp/tmp4aqmtgu4.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpv_9h1ikn.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpv_9h1ikn.jl:1\n\
    in expression starting at /tmp/tmpv_9h1ikn.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0us56_sv.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0us56_sv.jl:1\n\
    in expression starting at /tmp/tmp0us56_sv.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    local result = 1\n    for char in string:\n        result = result + 1\n\
    \    return result\n</code>\n<|/ a tags=julia,string |>\n<| c |>\n`length` does\
    \ this for you\n<|/ c |>\n<| c |>\n`length` does this for you, but `length` also\
    \ counts newlines. `length(\"abc\\n\")` returns 3, but `length(\"abc\")` returns\
    \ 1. `length(\"abc\\n\")` returns 3, but `length(\"abc\")` returns 1. `length(\"\
    abc\\n\")` returns 3, but `length(\"abc\")` returns 1. `length(\"abc\\n\")` returns\
    \ 3, but `length(\"abc\")` returns 1. `length(\"abc\\n\")` returns 3, but `length(\"\
    abc\")` returns 1. `length(\"abc\\n\")` returns 3, but `length(\"abc\")` returns\
    \ 1. `length(\"abc\\n\")` returns 3, but `length(\"abc\")` returns 1. `length(\"\
    abc\\n\")` returns 3, but `length(\"abc\")` returns 1. `length(\"abc\\n\")` returns\
    \ 3, but `length(\"abc\")` returns 1. `length(\"abc\\n\")` returns 3, but `length(\"\
    abc\")` returns 1. `length(\"abc\\n\")` returns 3, but `length(\"abc\")` returns\
    \ 1. `length(\"abc\\n\")` returns 3, but `length(\"abc\")` returns 1. `length(\"\
    abc\\n\")` returns 3, but `length(\"abc\")` returns 1. `length(\"abc\\n\")` returns\
    \ 3, but `length(\"abc\")` returns 1. `length(\"abc\\n\")` returns 3, but `length(\"\
    abc\")` returns 1. `length(\"abc\\n\")` returns 3, but `length(\"abc\")` returns\
    \ 1. `length(\"abc\\n\")` returns 3, but `length(\"abc\")` returns 1. `length(\"\
    abc\\n\")` returns 3, but `length(\"abc\")` returns 1. `length(\"abc\\n\")` returns\
    \ 3, but `length(\"abc\")` returns 1. `length(\"abc\\n\")` returns 3, but `length(\"\
    abc\")` returns 1. `length(\"abc\\n\")` returns 3, but `length(\"abc\")` returns\
    \ 1. `length(\"abc\\n\")` returns 3, but `length(\"abc\")` returns 1. `length(\"\
    abc\\n\")` returns 3, but `length(\"abc\")` returns 1. `length(\"abc\\n\")` returns\
    \ 3, but `length(\"abc\")` returns 1. `length(\"abc\\n\")` returns 3, but `length(\"\
    abc\")` returns 1. `length(\"abc\\n\")` returns 3, but `length(\"abc\")` returns\
    \ 1. `length(\"abc\\n\")\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp9gt8esw.jl:10\nin expression starting at\
    \ /tmp/tmpp9gt8esw.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    local len::Int64 = 0\n    for char in string do \n        len = len + 1\n\
    \    end\n    return len\nend\n</cell>\n<code language=julia-1.5>\nstrlen(\"\"\
    )\n</cell>\n<text>\nExercise 3.2\nWrite a function that takes a string and returns\
    \ the number of characters in the string that are uppercase letters.\nusing Test\n\
    \n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmphje83fxb.jl:9\nin expression starting at /tmp/tmphje83fxb.jl:9\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    local len::Int64\n    len = string.len()\n    return len\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpdgdwd907.jl:17\n  Test threw exception\n\
    \  Expression: candidate(\"\") == 0\n  type String has no field len\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] strlen(string::String)\n\
    \     @ Main /tmp/tmpdgdwd907.jl:9\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpdgdwd907.jl:17 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpdgdwd907.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpdgdwd907.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == 1\n  type String has no field len\n  Stacktrace:\n   [1]\
    \ getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] strlen(string::String)\n\
    \     @ Main /tmp/tmpdgdwd907.jl:9\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpdgdwd907.jl:18 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpdgdwd907.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpdgdwd907.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"asdasnakj\") == 9\n  type String has no field len\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] strlen(string::String)\n\
    \     @ Main /tmp/tmpdgdwd907.jl:9\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpdgdwd907.jl:19 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpdgdwd907.jl:16\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdgdwd907.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.5>\n\
    strlen(\"\")\n</cell>\n<code language=julia-1.5>\nstrlen(\" abc\")\n</cell>\n\
    <code language=julia-1.5>\nstrlen(\" abc \")\n</cell>\n<code language=julia-1.5>\n\
    strlen(\" abc def\")\n</cell>\n<code language=julia-1.5>\nstrlen(\" abc def \"\
    )\n</cell>\n<code language=julia-1.5>\nstrlen(\" abc def ghi\")\n</cell>\n<code\
    \ language=julia-1.5>\nstrlen(\" abc def ghi \")\n</cell>\n<code language=julia-1.5>\n\
    strlen(\" abc def ghi jkl\")\n</cell>\n<code language=julia-1.5>\nstrlen(\" abc\
    \ def ghi jkl \")\n</cell>\n<code language=julia-1.5>\nstrlen(\" abc def ghi jkl\
    \ mno\")\n</cell>\n<code language=julia-1.5>\nstrlen(\" abc def ghi jkl mno pqr\"\
    )\n</cell>\n<code language=julia-1.5>\nstrlen(\" abc def ghi jkl mno pqr stu\"\
    )\n</cell>\n<code language=julia-1.5>\nstrlen(\" abc def ghi jkl mno pqr stu vwx\
    \ yza\")\n</cell>\n<code language=julia-1.5>\nstrlen(\" abc def ghi jkl mno pqr\
    \ stu vwx yza \")\n</cell>\n<code language=julia-1.5>\nstrlen(\" abc def ghi jkl\
    \ mno pqr stu vwx yza zab\")\n</cell>\n<code language=julia-1.5>\nstrlen(\" abc\
    \ def ghi jkl mno pqr stu vwx yza zab cda\")\n</cell>\n<code language=julia-1.5>\n\
    strlen(\" abc def ghi jkl mno pqr stu vwx yza zab cda efa\")\n</cell>\n<code language=julia-1.5>\n\
    strlen(\" abc def ghi jkl mno pqr stu vwx yza zab cda efa ghi\")\n</cell>\n<code\
    \ language=julia-1.5>\nstrlen(\" abc def ghi jkl mno pqr stu vwx yza zab cda ef\n\
    using Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") ==\
    \ 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9m_iwsza.jl:8\nin expression starting at /tmp/tmp9m_iwsza.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp1qh2m9jv.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1qh2m9jv.jl:1\n\
    in expression starting at /tmp/tmp1qh2m9jv.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    local result = 0\n    for char in string:\n        result = result + 1\n\
    \    return result\n</code>\n<|/ a tags=julia,string |>\n<| c |>\nThe `length`\
    \ function was added in Julia v0.6.0, so this answer is no longer valid. `length`\
    \ was added in v0.6.0, so this answer is no longer valid. `length` was added in\
    \ v0.6.0, so this answer is no longer valid.\n<|/ c |>\n<| a dscore=4 |>\nThe\
    \ most efficient way is to use Base.count (as suggested by others). \n<code>\n\
    julia> Base.count(\"abc\", \"c\")\n2\n</code>\nThis function is implemented in\
    \ C and is very efficient. \n<code>\njulia> Base.count(\"abc\", \"c\")\n2\n</code>\n\
    <|/ a tags=julia,string |>\n<| c |>\nThis should be the accepted answer. `Base.count`\
    \ is implemented in C and is very efficient.\n<|/ c |>\n<| a tags=julia,string\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2wglikez.jl:10\nin expression starting at\
    \ /tmp/tmp2wglikez.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    local len::Int64 = 0\n    for char in string do\n        len = len + 1\n\
    \    end\n    return len\nend\n</cell>\n<code language=julia-1.3>\nstrlen(\"abc\"\
    )\n</cell>\n<text>\nStrings\nStrings are immutable sequences of Unicode characters.\
    \ Strings are represented using single quotes (') and double quotes (\").\nusing\
    \ Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\
    \t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpr3aozx7r.jl:9\nin expression starting at /tmp/tmpr3aozx7r.jl:9\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.5>\n\
    strlen(\"abc\")\n</cell>\n<text>\nStrings are immutable\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpiltw3hir.jl:8\nin expression starting at /tmp/tmpiltw3hir.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    local length = 0\n    for char in string:\n        length = length + 1\n\
    \    return length\nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjxjwx47u.jl:10\nin expression starting at\
    \ /tmp/tmpjxjwx47u.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpr9aza1zz.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpr9aza1zz.jl:1\n\
    in expression starting at /tmp/tmpr9aza1zz.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\nReturn length of given string\n\"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") ==\
    \ 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp4qwzb0xm.jl:8\nin expression starting at /tmp/tmp4qwzb0xm.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == \"\" then 0 else string.length()\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\nReturn length of given string\n\"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") ==\
    \ 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp0go97zul.jl:8\nin expression starting at /tmp/tmp0go97zul.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    local result = 1\n    for char in string:\n        result = result * len(char)\n\
    \    return result\nend\n</cell>\n<code language=julia-1.0>\nstrlen(\"abc\")\n\
    </cell>\n<text>\nStrings are immutable\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdkqvhu9s.jl:10\nin expression starting at\
    \ /tmp/tmpdkqvhu9s.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    local result = 0\n    for char in string:\n        result = result + 1\n\
    \    return result\n</code>\n<|/ a |>\n<| c |>\nThanks for the answer. I'm new\
    \ to Julia, so I didn't know about `length` function. I tried your solution and\
    \ it works. But I still don't understand why my code doesn't work. Could you please\
    \ explain why my code doesn't work?\n<|/ c |>\n<| c |>\nI added some explanation\
    \ to the answer. Hope it helps.\n<|/ c |>\n<| a dscore=2 |>\nThe reason why your\
    \ function doesn't work is that you are trying to iterate over the string using\
    \ for loop, but you cannot do that in Julia. Instead, you should use for loop\
    \ to iterate over the characters of the string and use length to get the length\
    \ of the string.\n<code>\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgyd04kfs.jl:10\nin expression starting at\
    \ /tmp/tmpgyd04kfs.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.3>\n\
    strlen(\"abc\")\n</cell>\n<text>\nSubstring\nusing Test\n\n@testset begin\n\n\
    candidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") ==\
    \ 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpdbxxxb0p.jl:8\nin expression starting at /tmp/tmpdbxxxb0p.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    local result = 0\n    for char in string:\n        result = result + 1\n\
    \    return result\nend\n</cell>\n<code language=julia-1.5>\nstrlen(\"abc\")\n\
    </cell>\n<text>\nSubstring\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_5_49zxf.jl:10\nin expression starting at\
    \ /tmp/tmp_5_49zxf.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    local result = 1\n    for char in string:\n        result = result * len(char)\n\
    \    return result\nend\n</cell>\n<code language=julia-1.3>\nstrlen(\"abc\")\n\
    </cell>\n<text>\nStrings are immutable in Julia\nJulia strings are immutable,\
    \ meaning that they cannot be changed. However, they can be converted to a mutable\
    \ string using String() function, which returns a new string.\nusing Test\n\n\
    @testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpur5e9amh.jl:10\nin expression starting at\
    \ /tmp/tmpur5e9amh.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    local len::Int64 = 0\n    for char in string\n        len = len + 1\n   \
    \ end\n    return len\nend\n</cell>\n<code language=julia-1.3>\nstrlen(\"abc\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of characters in that string that are not letters.\nusing Test\n\n\
    @testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwnfrxng3.jl:14\nin expression starting at\
    \ /tmp/tmpwnfrxng3.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\nReturn length of given string\n\"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") ==\
    \ 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpu_b2ew5e.jl:8\nin expression starting at /tmp/tmpu_b2ew5e.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\nReturn length of given string\n\"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") ==\
    \ 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpremtz7s2.jl:8\nin expression starting at /tmp/tmpremtz7s2.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    len = length(string.value)\n    if len == 0 \n        0\n    else\n     \
    \   len\n    end\nend\n</cell>\n<code language=julia-1.5>\nstrlen(\"abc\")\n</cell>\n\
    <text>\nSubstrings\nJulia has many string manipulation functions. Here are some\
    \ of them:\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptw20ip0q.jl:15\nin expression starting at\
    \ /tmp/tmptw20ip0q.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.3>\n\
    strlen(\"abc\")\n</cell>\n<text>\nSubstring\nusing Test\n\n@testset begin\n\n\
    candidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") ==\
    \ 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp08y93zld.jl:8\nin expression starting at /tmp/tmp08y93zld.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyoxr3wwr.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyoxr3wwr.jl:1\n\
    in expression starting at /tmp/tmpyoxr3wwr.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.3>\n\
    strlen(\"abc\")\n</cell>\n<text>\nSubstrings\nJulia has many string functions.\
    \ Here are some of them:\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpeb2u6cnz.jl:8\nin expression starting at /tmp/tmpeb2u6cnz.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    local length = 0\n    for char in string:\n        length = length + 1\n\
    \    return length\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6ddnyh7b.jl:10\nin expression starting at\
    \ /tmp/tmp6ddnyh7b.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    local len::Int64 = 0\n    for char in string do len = len + 1 end\n    return\
    \ len\nend\n</cell>\n<code language=julia-1.3>\nstrlen(\"abc\")\n</cell>\n<text>\n\
    strcat(string, string...)\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpeteff1dp.jl:9\nin expression starting at /tmp/tmpeteff1dp.jl:9\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    local len::Int64 = 0\n    for c in string:\n        len = len + 1\n    return\
    \ len\n</code>\n<|/ a |>\n<| a dscore=2 |>\n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\"\
    ) == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmnca482f.jl:10\nin expression starting at\
    \ /tmp/tmpmnca482f.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpe02dpoj5.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpe02dpoj5.jl:1\n\
    in expression starting at /tmp/tmpe02dpoj5.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == \"\" then \n        return 0\n    else \n        return string.length\n\
    end\n</cell>\n<code language=julia-1.3>\nstrlen(\"abc\")\n</cell>\n<text>\nStrings\
    \ are immutable\nStrings are immutable in Julia. Strings are immutable because\
    \ they cannot be changed. Strings are immutable because they cannot be changed.\
    \ Strings are immutable because they cannot be changed. Strings are immutable\
    \ because they cannot be changed. Strings are immutable because they cannot be\
    \ changed. Strings are immutable because they cannot be changed. Strings are immutable\
    \ because they cannot be changed. Strings are immutable because they cannot be\
    \ changed. Strings are immutable because they cannot be changed. Strings are immutable\
    \ because they cannot be changed. Strings are immutable because they cannot be\
    \ changed. Strings are immutable because they cannot be changed. Strings are immutable\
    \ because they cannot be changed. Strings are immutable because they cannot be\
    \ changed. Strings are immutable because they cannot be changed. Strings are immutable\
    \ because they cannot be changed. Strings are immutable because they cannot be\
    \ changed. Strings are immutable because they cannot be changed. Strings are immutable\
    \ because they cannot be changed. Strings are immutable because they cannot be\
    \ changed. Strings are immutable because they cannot be changed. Strings are immutable\
    \ because they cannot be changed. Strings are immutable because they cannot be\
    \ changed. Strings are immutable because they cannot be changed. Strings are immutable\
    \ because they cannot be changed. Strings are immutable because they cannot be\
    \ changed. Strings are immutable because they cannot be changed. Strings are immutable\
    \ because they cannot be changed. Strings are immutable because they cannot be\
    \ changed. Strings are immutable because they cannot be changed. Strings are immutable\
    \ because they cannot be changed. Strings are immutable because they cannot be\
    \ changed. Strings are immutable because they cannot be changed. Strings are immutable\
    \ because they cannot be changed. Strings are immutable because they cannot be\
    \ changed. Strings are immutable because they cannot be changed. Strings are immutable\
    \ because they cannot be changed. Strings are immutable because they cannot be\
    \ changed. Strings are immutable because they cannot be changed. Strings are immutable\
    \ because they cannot be changed. Strings are immutable because they cannot be\
    \ changed. Strings are immutable because they cannot be changed. Strings are immutable\
    \ because they cannot be changed. Strings are immutable because they cannot be\
    \ changed. Strings are immutable because they cannot be changed. Strings are immutable\
    \ because they cannot be changed. Strings are immutable because they cannot be\
    \ changed. Strings are immutable because they cannot be changed. Strings are immutable\
    \ because they cannot be changed. Strings are immutable because they cannot be\
    \ changed. Strings are immutable because they cannot be changed. String\nusing\
    \ Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\
    \t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmtosf7rr.jl:13\nin expression starting at\
    \ /tmp/tmpmtosf7rr.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    local result = 0\n    for char in string:\n        result = result + 1\n\
    \    return result\nend\n</cell>\n<code language=julia-1.3>\nstrlen(\"abc\")\n\
    </cell>\n<text>\nStrings in Julia\nStrings in Julia are immutable and are represented\
    \ as a vector of characters. Strings are written between single quotes (') and\
    \ are enclosed in double quotes (\").\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf7no9ck3.jl:10\nin expression starting at\
    \ /tmp/tmpf7no9ck3.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjbuz3el5.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjbuz3el5.jl:1\n\
    in expression starting at /tmp/tmpjbuz3el5.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpsn59h3mx.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsn59h3mx.jl:1\n\
    in expression starting at /tmp/tmpsn59h3mx.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyyshgl3b.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyyshgl3b.jl:1\n\
    in expression starting at /tmp/tmpyyshgl3b.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    local result = 0\n    for char in string:\n        result = result + 1\n\
    \    return result\nend\n</cell>\n<code language=julia-1.3>\nstrlen(\"abc\")\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of characters in the string that are uppercase letters.\nusing Test\n\
    \n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc92aqfnb.jl:10\nin expression starting at\
    \ /tmp/tmpc92aqfnb.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    local length = 0\n    for char in string\n        length = length + 1\n \
    \   end\n    return length\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    local string\n    local length\n    local i\n    local j\n    local len\n\
    \    local len\n    local len\n    local len\n    local len\n    local len\n \
    \   local len\n    local len\n    local len\n    local len\n    local len\n  \
    \  local len\n    local len\n    local len\n    local len\n    local len\n   \
    \ local len\n    local len\n    local len\n    local len\n    local len\n    local\
    \ len\n    local len\n    local len\n    local len\n    local len\n    local len\n\
    \    local len\n    local len\n    local len\n    local len\n    local len\n \
    \   local len\n    local len\n    local len\n    local len\n    local len\n  \
    \  local len\n    local len\n    local len\n    local len\n    local len\n   \
    \ local len\n    local len\n    local len\n    local len\n    local len\n    local\
    \ len\n    local len\n    local len\n    local len\n    local len\n    local len\n\
    \    local len\n    local len\n    local len\n    local len\n    local len\n \
    \   local len\n    local len\n    local len\n    local len\n    local len\n  \
    \  local len\n    local len\n    local len\n    local len\n    local len\n   \
    \ local len\n    local len\n    local len\n    local len\n    local len\n    local\
    \ len\n    local len\n    local len\n    local len\n    local len\n    local len\n\
    \    local len\n    local len\n    local len\n    local len\n    local len\n \
    \   local len\n    local len\n    local len\n    local len\n    local len\n  \
    \  local len\n    local len\n    local len\n    local len\n    local len\n   \
    \ local len\n    local len\n    local len\n    local len\n    local len\n    local\
    \ len\n    local len\n    local len\n    local len\n    local len\n    local len\n\
    \    local len\n    local len\n    local len\n    local len\n    local len\n \
    \   local len\n    local len\n    local len\n    local len\n    local len\n  \
    \  local len\n    local len\n    local len\n    local len\n    local len\n   \
    \ local len\n    local len\n    local len\n    local len\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpc6cb4acc.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpc6cb4acc.jl:1\n\
    in expression starting at /tmp/tmpc6cb4acc.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    local result = 0\n    for char in string:\n        result = result + 1\n\
    \    return result\n</code>\n<|/ a dscore=1 |>\n<| c |>\n`for char in string`\
    \ iterates over the characters in the string. `string.len()` returns the length\
    \ of the string. `string.len()` is faster than `string.len()`\n<|/ c |>\n<| c\
    \ |>\n`string.len()` is faster than `string.len()`? I doubt that. `string.len()`\
    \ iterates over the characters in the string and `string.len()` is O(1). `string.len()`\
    \ is O(1) because it is implemented in C. `string.len()` is O(n) because it is\
    \ implemented in Lua.\n<|/ c |>\n<| c |>\n`string.len()` is O(n) because it is\
    \ implemented in Lua. `string.len()` is O(1) because it is implemented in C. `string.len()`\
    \ is O(1) because it is implemented in Lua. `string.len()` is O(1) because it\
    \ is implemented in C. `string.len()` is O(1) because it is implemented in Lua.\
    \ `string.len()` is O(1) because it is implemented in C. `string.len()` is O(1)\
    \ because it is implemented in Lua. `string.len()` is O(1) because it is implemented\
    \ in C. `string.len()` is O(1) because it is implemented in Lua. `string.len()`\
    \ is O(1) because it is implemented in C. `string.len()` is O(1) because it is\
    \ implemented in Lua. `string.len()` is O(1) because it is implemented in C. `string.len()`\
    \ is O(1) because it is implemented in Lua. `string.len()` is O(1) because it\
    \ is implemented in C. `string.len()` is O(1) because it is implemented in Lua.\
    \ `string.len()` is O(1) because it is implemented in C. `string.len()` is O(1)\
    \ because it is implemented in Lua. `string.len()` is O(1) because it is implemented\
    \ in C. `string.len()` is O(1) because it is implemented in Lua. `string.len()`\
    \ is O(1) because it is implemented in C. `string.len()` is O(1) because it is\
    \ implemented in Lua. `string.len()` is O(1) because it is implemented in C. `string.len()`\
    \ is O(1) because it is implemented in Lua. `string.len()` is O(1) because it\
    \ is implemented in C. `string.len()` is O(1) because it is implemented in Lua.\
    \ `string.len()` is O(1) because it is implemented in C. `string.len()` is O(1)\
    \ because it is implemented in Lu\nusing Test\n\n@testset begin\n\ncandidate =\
    \ strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8wdvl6hw.jl:10\nin expression starting at\
    \ /tmp/tmp8wdvl6hw.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.3>\n\
    strlen(\"abc\")\n</cell>\n<text>\nSubstring\nReturn substring from given string\
    \ from given index to given index\nusing Test\n\n@testset begin\n\ncandidate =\
    \ strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpdfc09ymu.jl:8\nin expression starting at /tmp/tmpdfc09ymu.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == \"\" then 0 else string.length\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpri8l63lu.jl:8\nin expression starting at /tmp/tmpri8l63lu.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == \"\" then \n        return 0\n    else \n        return string.length()\n\
    end\n</cell>\n<code language=julia-1.4>\nstrlen(\"abc\")\n</cell>\n<text>\nSubstring\n\
    using Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") ==\
    \ 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgbhl9448.jl:13\nin expression starting at\
    \ /tmp/tmpgbhl9448.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmd140c7q.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmd140c7q.jl:1\n\
    in expression starting at /tmp/tmpmd140c7q.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    length = 0\n    for c in string:\n        length = length + 1\n    return\
    \ length\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>\nusing Test\n\n\
    @testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgsvlngej.jl:10\nin expression starting at\
    \ /tmp/tmpgsvlngej.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == \"\"\n        return 0\n    else\n        return string.length\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpw4ilq49x.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpw4ilq49x.jl:1\n\
    in expression starting at /tmp/tmpw4ilq49x.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Compute length of given string\n    >>> strlen('abc')\n    3\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphnkgvke1.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphnkgvke1.jl:1\n\
    in expression starting at /tmp/tmphnkgvke1.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpawxwphhn.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpawxwphhn.jl:1\n\
    in expression starting at /tmp/tmpawxwphhn.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    local length::Int64 = 0\n    for char in string:\n        length = length\
    \ + 1\n    return length\nend\n</cell>\n<code language=julia-1.3>\nstrlen(\"abc\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of characters in that string that are not alphanumeric. For example,\
    \ if the string was \"abc123\" the function should return 3.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu9ep4svy.jl:10\nin expression starting at\
    \ /tmp/tmpu9ep4svy.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == \"\" then 0 else string.length\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp73k3ezux.jl:8\nin expression starting at /tmp/tmp73k3ezux.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    local result = 1\n    for char in string:\n        result = result * len(char)\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps1g06ccv.jl:10\nin expression starting at\
    \ /tmp/tmps1g06ccv.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == \"\"\n        return 0\n    else\n        return string.length\n\
    end\n</cell>\n<code language=julia-1.0>\nstrlen(\"abc\")\n</cell>\n<text>\nString\
    \ concatenation\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmtg_domc.jl:13\nin expression starting at\
    \ /tmp/tmpmtg_domc.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == ''\n        return 0\n    else\n        return string.length()\n\
    end\n</cell>\n<code language=julia-1.3>\nstrlen(\"abc\")\n</cell>\n<text>\nReturn\
    \ number of characters in given string\nReturn number of characters in given string\n\
    Return number of characters in given string\nReturn number of characters in given\
    \ string\nReturn number of characters in given string\nReturn number of characters\
    \ in given string\nReturn number of characters in given string\nReturn number\
    \ of characters in given string\nReturn number of characters in given string\n\
    Return number of characters in given string\nReturn number of characters in given\
    \ string\nReturn number of characters in given string\nReturn number of characters\
    \ in given string\nReturn number of characters in given string\nReturn number\
    \ of characters in given string\nReturn number of characters in given string\n\
    Return number of characters in given string\nReturn number of characters in given\
    \ string\nReturn number of characters in given string\nReturn number of characters\
    \ in given string\nReturn number of characters in given string\nReturn number\
    \ of characters in given string\nReturn number of characters in given string\n\
    Return number of characters in given string\nReturn number of characters in given\
    \ string\nReturn number of characters in given string\nReturn number of characters\
    \ in given string\nReturn number of characters in given string\nReturn number\
    \ of characters in given string\nReturn number of characters in given string\n\
    Return number of characters in given string\nReturn number of characters in given\
    \ string\nReturn number of characters in given string\nReturn number of characters\
    \ in given string\nReturn number of characters in given string\nReturn number\
    \ of characters in given string\nReturn number of characters in given string\n\
    Return number of characters in given string\nReturn number of characters in given\
    \ string\nReturn number of characters in given string\nReturn number of characters\
    \ in given string\nReturn number of characters in given string\nReturn number\
    \ of characters in given string\nReturn number of characters in given string\n\
    Return number of characters in given string\nReturn number of characters in given\
    \ string\nReturn number of characters in given string\nReturn number of characters\
    \ in given string\nReturn number of characters in given string\nReturn number\
    \ of characters in given string\nReturn number of characters in given string\n\
    Return number of characters in given string\nReturn number of characters in given\
    \ string\nReturn number of characters in given string\nReturn number of characters\
    \ in given string\nReturn number of characters in given string\nReturn number\
    \ of characters in given string\nReturn number of characters in given string\n\
    Return number of characters in given string\nReturn number of characters in given\
    \ string\nReturn number of characters in given string\nReturn number of characters\
    \ in given string\nReturn number of characters in given string\nReturn number\
    \ of characters in given string\nReturn number of characters in given string\n\
    Return number of characters in given string\nReturn number of characters in given\
    \ string\nReturn number of characters in given \nusing Test\n\n@testset begin\n\
    \ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\"\
    ) == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid empty character literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbqql4axp.jl:8\nin expression starting at /tmp/tmpbqql4axp.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpquk2u2gq.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpquk2u2gq.jl:1\n\
    in expression starting at /tmp/tmpquk2u2gq.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Calculate the length of given string\n    >>> strlen('')\n  \
    \  0\n    >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\"\
    ) == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3n32glkm.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3n32glkm.jl:1\n\
    in expression starting at /tmp/tmp3n32glkm.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqw4kavci.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqw4kavci.jl:1\n\
    in expression starting at /tmp/tmpqw4kavci.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.3>\n\
    strlen(\"abc\")\n</cell>\n<text>\nSubstring\nSubstring is a function that extracts\
    \ a substring from a given string.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpc2yjihqr.jl:8\nin expression starting at /tmp/tmpc2yjihqr.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmdd0_s6a.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmdd0_s6a.jl:1\n\
    in expression starting at /tmp/tmpmdd0_s6a.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp24nu3tjl.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp24nu3tjl.jl:1\n\
    in expression starting at /tmp/tmp24nu3tjl.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.4>\n\
    strlen(\"abc\")\n</cell>\n<text>\nStrings are immutable in Julia\nJulia strings\
    \ are immutable, meaning that they cannot be changed. Strings are immutable because\
    \ strings are immutable in Julia. Strings are immutable because strings are immutable\
    \ in Julia. Strings are immutable because strings are immutable in Julia. Strings\
    \ are immutable because strings are immutable in Julia. Strings are immutable\
    \ because strings are immutable in Julia. Strings are immutable because strings\
    \ are immutable in Julia. Strings are immutable because strings are immutable\
    \ in Julia. Strings are immutable because strings are immutable in Julia. Strings\
    \ are immutable because strings are immutable in Julia. Strings are immutable\
    \ because strings are immutable in Julia. Strings are immutable because strings\
    \ are immutable in Julia. Strings are immutable because strings are immutable\
    \ in Julia. Strings are immutable because strings are immutable in Julia. Strings\
    \ are immutable because strings are immutable in Julia. Strings are immutable\
    \ because strings are immutable in Julia. Strings are immutable because strings\
    \ are immutable in Julia. Strings are immutable because strings are immutable\
    \ in Julia. Strings are immutable because strings are immutable in Julia. Strings\
    \ are immutable because strings are immutable in Julia. Strings are immutable\
    \ because strings are immutable in Julia. Strings are immutable because strings\
    \ are immutable in Julia. Strings are immutable because strings are immutable\
    \ in Julia. Strings are immutable because strings are immutable in Julia. Strings\
    \ are immutable because strings are immutable in Julia. Strings are immutable\
    \ because strings are immutable in Julia. Strings are immutable because strings\
    \ are immutable in Julia. Strings are immutable because strings are immutable\
    \ in Julia. Strings are immutable because strings are immutable in Julia. Strings\
    \ are immutable because strings are immutable in Julia. Strings are immutable\
    \ because strings are immutable in Julia. Strings are immutable because strings\
    \ are immutable in Julia. Strings are immutable because strings are immutable\
    \ in Julia. Strings are immutable because strings are immutable in Julia. Strings\
    \ are immutable because strings are immutable in Julia. Strings are immutable\
    \ because strings are immutable in Julia. Strings are im\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpgnk4p3f4.jl:8\nin expression starting at /tmp/tmpgnk4p3f4.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.5>\n\
    strlen(\"abc\")\n</cell>\n<text>\nSubstring\nusing Test\n\n@testset begin\n\n\
    candidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") ==\
    \ 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpnlyem2e5.jl:8\nin expression starting at /tmp/tmpnlyem2e5.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    length = 0\n    for char in string\n        length += 1\n    return length\n\
    </code>\n<|/ a tags=julia,string |>\n<| c |>\nI guess you meant `length(string)`\
    \ instead of `strlen(string)`\n<|/ c |>\n<| c |>\nThanks for pointing that out.\
    \ I've fixed it.\n<|/ c |>\n<| a tags=julia,string |>\n<code>\nusing Test\n\n\
    @testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5_zn8fm0.jl:12\nin expression starting at\
    \ /tmp/tmp5_zn8fm0.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == \"\"\n        return 0\n    else\n        return string.length()\n\
    end\n</cell>\n<code language=julia-1.3>\nstrlen(\"abc\")\n</cell>\n<text>\nString\
    \ indexing\nJulia has two string indexing operators: [] and []=. [] returns the\
    \ character at the given index. []= assigns the character at the given index.\
    \ For example, we can get the character at index 2 of the string \"abc\" as follows:\n\
    using Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") ==\
    \ 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc5gw23cc.jl:13\nin expression starting at\
    \ /tmp/tmpc5gw23cc.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgmgk59dm.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgmgk59dm.jl:1\n\
    in expression starting at /tmp/tmpgmgk59dm.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpczh9qt41.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpczh9qt41.jl:1\n\
    in expression starting at /tmp/tmpczh9qt41.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    local len::Int64 = 0\n    for c in string:\n        len = len + 1\n    return\
    \ len\n</code>\n<|/ a tags=julia,string |>\n<| c |>\nThis doesn't work if you\
    \ have a string with multiple lines. `length` counts the number of characters\
    \ in the first line only.\n<|/ c |>\n<| c |>\nIt does work if you have a string\
    \ with multiple lines. `length` counts the number of characters in the first line\
    \ only.\n<|/ c |>\n<| c |>\nIt does work if you have a string with multiple lines.\
    \ `length` counts the number of characters in the first line only.\n<|/ c |>\n\
    <| a tags=julia,string |>\nThe shortest way is to use length\n<code>\njulia> length(\"\
    abc\")\n3\n</code>\n<|/ a dscore=5 |>\n<| a dscore=4 |>\nThe shortest way is to\
    \ use length\n<code>\njulia> length(\"abc\")\n3\n</code>\n<|/ a tags=julia,string\
    \ |>\n<| a dscore=4 |>\nThe shortest way is to use length\n<code>\njulia> length(\"\
    abc\")\n3\n</code>\n<|/ a tags=julia,string |>\n<| a tags=julia,string |>\n<code>\n\
    julia> \"abc\"\n\"abc\"\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp83bluot7.jl:10\nin expression starting at\
    \ /tmp/tmp83bluot7.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == \"\"\n        return 0\n    else\n        return string.length()\n\
    end\n</cell>\n<code language=julia-1.5>\nstrlen(\"\")\n</cell>\n<code language=julia-1.5>\n\
    strlen(\"abc\")\n</cell>\n<text>\nSubstrings\nJulia has substring function, which\
    \ returns substring from given string and given starting index. \nSyntax: substring(string::String,\
    \ start::Int, end::Int)\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvjqxc48o.jl:13\nin expression starting at\
    \ /tmp/tmpvjqxc48o.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpny0lze82.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpny0lze82.jl:1\n\
    in expression starting at /tmp/tmpny0lze82.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == \"\" then 0 else string.length\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpl1svxa1p.jl:8\nin expression starting at /tmp/tmpl1svxa1p.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    length = 0\n    for c in string:\n        length = length + 1\n    return\
    \ length\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\nI wrote a function to\
    \ count the characters in a string and return the number of characters in the\
    \ string in Julia. \n<code>\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp275xqv1v.jl:10\nin expression starting at\
    \ /tmp/tmp275xqv1v.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpp0nv9vq9.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpp0nv9vq9.jl:1\n\
    in expression starting at /tmp/tmpp0nv9vq9.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.3>\n\
    strlen(\"abc\")\n</cell>\n<text>\nSubstring extraction\nJulia has a substring\
    \ function that extracts a substring from a string. Let's see how it works.\n\
    using Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") ==\
    \ 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7uik3pb3.jl:8\nin expression starting at /tmp/tmp7uik3pb3.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    length = 0\n    for c in string\n        length = length + 1\n    return\
    \ length\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nusing Test\n\n\
    @testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl383_h26.jl:12\nin expression starting at\
    \ /tmp/tmpl383_h26.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    local length = 0\n    for char in string:\n        length = length + 1\n\
    \    return length\n</code>\n<|/ a tags=julia |>\n<| c |>\nThanks for your answer!\
    \ I didn't know that `length` was a function in Julia. I'm still learning Julia\
    \ so I appreciate your help.\n<|/ c |>\n<| c |>\n`length` is a function in Julia.\
    \ `length(string)` returns the number of characters in the string. `length(string::String)`\
    \ returns the number of characters in the string `string`.\n<|/ c |>\n<| a tags=julia\
    \ |>\nIn Julia 1.2, you can use length(string) instead of length(string(string))\n\
    <|/ a dscore=2 |>\n<| a tags=julia |>\nIn Julia 1.2, you can use length(string)\
    \ instead of length(string(string))\n<|/ a dscore=2 |>\n<| a tags=julia |>\nIn\
    \ Julia 1.2, you can use length(string) instead of length(string(string))\n<|/\
    \ a dscore=1 |>\n<| a tags=julia |>\nIn Julia 1.2, you can use length(string)\
    \ instead of length(string(string))\n<|/ a dscore=1 |>\n<| a |>\nIn Julia 1.2,\
    \ you can use length(string) instead of length(string(string))\n<|/ a tags=julia\
    \ dscore=1 |>\n<| a tags=julia |>\nIn Julia 1.2, you can use length(string) instead\
    \ of length(string(string))\n<|/ a dscore=0 |>\n<| a tags=julia |>\nIn Julia 1.2,\
    \ you can use length(string) instead of length(string(string))\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\nIn Julia 1.2, you can use length(string) instead of length(string(string))\n\
    <|/ a tags=julia |>\n<| a dscore=0 |>\nIn Julia 1.2, you can use length(string)\
    \ instead of length(string(string))\n<|/ a tags=julia |>\n<| a dscore=0 |>\nIn\
    \ Julia 1.2, you can use length(string) instead of length(string(string))\n<|/\
    \ a tags=julia |>\n<| a tags=julia |>\nIn Julia 1.2, you can use length(string)\
    \ instead of length(string(string))\n<|/ a dscore=0 |>\n<| a dscore=0 |>\nIn Julia\
    \ 1.2, you can use length(string) instead of length(string(string))\n<|/ a tags=julia\
    \ |>\n<| a tags=julia |>\nIn Julia 1.2, you can use length(string) instead of\
    \ length(string(string))\n<|/ a dscore=\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp51h_1_e9.jl:10\nin expression starting at\
    \ /tmp/tmp51h_1_e9.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == \"\" then 0 else string.length\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2xv7z6hi.jl:8\nin expression starting at /tmp/tmp2xv7z6hi.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    local len::Int64 = 0\n    for char in string:\n        len += 1\n    return\
    \ len\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia,string |>\nI like using mapslices\
    \ for these kinds of things:\n<code>\njulia> mapslices(length, [\"a\", \"b\",\
    \ \"c\"])\n3-element Array{Int64,1}:\n 3\n 3\n 3\n</code>\n<|/ a dscore=2 |>\n\
    <| a tags=julia,string |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate =\
    \ strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5iy69mzm.jl:10\nin expression starting at\
    \ /tmp/tmp5iy69mzm.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphfwjluog.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphfwjluog.jl:1\n\
    in expression starting at /tmp/tmphfwjluog.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == nil then return 0 else string.length\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5s6aautw.jl:8\nin expression starting at /tmp/tmp5s6aautw.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == null then return 0 else string.length\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp33sbq3gh.jl:8\nin expression starting at /tmp/tmp33sbq3gh.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    local len::Int64 = 0\n    for char in string do len = len + 1 end\n    return\
    \ len\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp809lo2bj.jl:9\nin expression starting at /tmp/tmp809lo2bj.jl:9\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Calculate the length of given string\n    \"\"\"\n    return\
    \ string.length()\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t\
    @test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp1gh3dkn5.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"\") == 0\n  type String has no field length\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] strlen(string::String)\n\
    \     @ Main /tmp/tmp1gh3dkn5.jl:11\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp1gh3dkn5.jl:18 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp1gh3dkn5.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp1gh3dkn5.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == 1\n  type String has no field length\n  Stacktrace:\n  \
    \ [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] strlen(string::String)\n\
    \     @ Main /tmp/tmp1gh3dkn5.jl:11\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp1gh3dkn5.jl:19 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp1gh3dkn5.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp1gh3dkn5.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"asdasnakj\") == 9\n  type String has no field length\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] strlen(string::String)\n\
    \     @ Main /tmp/tmp1gh3dkn5.jl:11\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp1gh3dkn5.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp1gh3dkn5.jl:17\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1gh3dkn5.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") ==\
    \ 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzxiqidfb.jl:8\nin expression starting at /tmp/tmpzxiqidfb.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.4>\n\
    strlen(\"abc\")\n</cell>\n<text>\nisascii(character::Char)::Bool\nusing Test\n\
    \n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpt4vgg4ba.jl:8\nin expression starting at /tmp/tmpt4vgg4ba.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Compute length of given string\n    >>> strlen('abc')\n    3\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyii9nalt.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyii9nalt.jl:1\n\
    in expression starting at /tmp/tmpyii9nalt.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpygfkofov.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpygfkofov.jl:1\n\
    in expression starting at /tmp/tmpygfkofov.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \n    if string == \"\" \n        then return 0\n    else \n        return\
    \ string.length()\nend\n</cell>\n<code language=julia-1.5>\nstrlen(\"abc\")\n\
    </cell>\n<text>\nSubstring\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7t9_avaf.jl:10\nin expression starting at /tmp/tmp7t9_avaf.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    local length::Int64 = 0\n    for character in string do \n        length\
    \ = length + 1\n    end\n    return length\nend\n</cell>\n<code language=julia-1.3>\n\
    strlen(\"abc\")\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ number of characters in a given string.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpo36b0fl3.jl:9\nin expression starting at /tmp/tmpo36b0fl3.jl:9\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqe4qc285.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqe4qc285.jl:1\n\
    in expression starting at /tmp/tmpqe4qc285.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == ''\n        return 0\n    else \n        return string.length\n\
    end\n</cell>\n<code language=julia-1.3>\nstrlen(\"\")\n</cell>\n<code language=julia-1.3>\n\
    strlen(\" \")\n</cell>\n<code language=julia-1.3>\nstrlen(\" a \")\n</cell>\n\
    <code language=julia-1.3>\nstrlen(\" a b \")\n</cell>\n<code language=julia-1.3>\n\
    strlen(\" a b c \")\n</cell>\n<code language=julia-1.3>\nstrlen(\" a b c d \"\
    )\n</cell>\n<code language=julia-1.3>\nstrlen(\" a b c d e \")\n</cell>\n<code\
    \ language=julia-1.3>\nstrlen(\" a b c d e f \")\n</cell>\n<code language=julia-1.3>\n\
    strlen(\" a b c d e f g \")\n</cell>\n<code language=julia-1.3>\nstrlen(\" a b\
    \ c d e f g h \")\n</cell>\n<code language=julia-1.3>\nstrlen(\" a b c d e f g\
    \ h i \")\n</cell>\n<code language=julia-1.3>\nstrlen(\" a b c d e f g h i j \"\
    )\n</cell>\n<code language=julia-1.3>\nstrlen(\" a b c d e f g h i j k \")\n</cell>\n\
    <code language=julia-1.3>\nstrlen(\" a b c d e f g h i j k l \")\n</cell>\n<code\
    \ language=julia-1.3>\nstrlen(\" a b c d e f g h i j k l m \")\n</cell>\n<code\
    \ language=julia-1.3>\nstrlen(\" a b c d e f g h i j k l m n \")\n</cell>\n<code\
    \ language=julia-1.3>\nstrlen(\" a b c d e f g h i j k l m n o \")\n</cell>\n\
    <code language=julia-1.3>\nstrlen(\" a b c d e f g h i j k l m n o p \")\n</cell>\n\
    <code language=julia-1.3>\nstrlen(\" a b c d e f g h i j k l m n o p q \")\n</cell>\n\
    <code language=julia-1.3>\nstrlen(\" a b c d e f g h i j k l m n o p q r \")\n\
    </cell>\n<code language=julia-1.3>\nstrlen(\" a b c d e f g h i j k l m \nusing\
    \ Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\
    \t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid empty character literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvq_s7z4e.jl:8\nin expression starting at /tmp/tmpvq_s7z4e.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    length = 0\n    for char in string do length += 1\n    return length\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThis doesn't answer the question. He wants to know\
    \ how to use `length` function without using it.\n<|/ c |>\n<| c |>\nI added a\
    \ comment to the question to clarify what he is looking for.\n<|/ c |>\n<| c |>\n\
    I added a comment to the question to clarify what he is looking for.\n<|/ c |>\n\
    <| a tags=julia,string |>\nIn Julia 1.3 you can use the length function on a string\
    \ without having to import it first:\n<code>\njulia> length(\"abc\")\n3\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=2 |>\nIn Julia 1.3 you can use the length function\
    \ on a string without having to import it first:\n<code>\njulia> length(\"abc\"\
    )\n3\n</code>\n<|/ a tags=julia,string |>\n<| a tags=julia,string |>\nIn Julia\
    \ 1.3 you can use the length function on a string without having to import it\
    \ first:\n<code>\njulia> length(\"abc\")\n3\n</code>\n<|/ a dscore=1 |>\n<| a\
    \ tags=julia,string |>\nIn Julia 1.3, you can use the length function on a string\
    \ without having to import it first:\n<code>\njulia> length(\"abc\")\n3\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\nIn Julia 1.3 you can use the length function\
    \ on a string without having to import it first:\n<code>\njulia> length(\"abc\"\
    )\n3\n</code>\n<|/ a tags=julia,string |>\n<| a dscore=0 |>\nIn Julia 1.3 you\
    \ can use the length function on a string without having to import it first:\n\
    <code>\njulia> length(\"abc\")\n3\n</code>\n<|/ a tags=julia,string |>\n<| a tags=julia,string\
    \ |>\nIn Julia 1.3 you can use the length function on a string without having\
    \ to import it first:\n<code>\njulia> length(\"abc\")\n3\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=julia,string |>\nIn Julia 1.3 you can use the length function\
    \ on a string without having to import it first:\n<code>\njulia> length(\"abc\"\
    )\n3\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\nusing Test\n\n@testset begin\n\
    \ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\"\
    ) == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmperys4vyz.jl:9\nin expression starting at /tmp/tmperys4vyz.jl:9\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    local len = string.len()\n    if len == 0 then \n        return 0\n    else\
    \ \n        return len\n    end\nend\n</cell>\n<code language=julia-1.3>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\
    \t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpja1c8kt2.jl:15\nin expression starting at\
    \ /tmp/tmpja1c8kt2.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    local len::Int64 = 0\n    for char in string:\n        len = len + 1\n  \
    \  return len\n</code>\n<|/ a tags=julia |>\n<| a tags=julia |>\nIn Julia 1.3\
    \ you can use the function length\n<code>\njulia> length(\"abc\")\n3\n</code>\n\
    <|/ a dscore=5 |>\n<| a tags=julia |>\nIn Julia 1.3 you can use the function length\n\
    <code>\njulia> length(\"abc\")\n3\n</code>\n<|/ a dscore=5 |>\n<| a dscore=4 |>\n\
    In Julia 1.3 you can use the function length\n<code>\njulia> length(\"abc\")\n\
    3\n</code>\n<|/ a tags=julia |>\n<| a tags=julia |>\nIn Julia 1.3 you can use\
    \ the function length\n<code>\njulia> length(\"abc\")\n3\n</code>\n<|/ a dscore=4\
    \ |>\n<| a tags=julia |>\nIn Julia 1.3 you can use the function length\n<code>\n\
    julia> length(\"abc\")\n3\n</code>\n<|/ a dscore=4 |>\n<| a tags=julia |>\nIn\
    \ Julia 1.3 you can use the function length\n<code>\njulia> length(\"abc\")\n\
    3\n</code>\n<|/ a dscore=3 |>\n<| a dscore=3 |>\nIn Julia 1.3 you can use the\
    \ function length\n<code>\njulia> length(\"abc\")\n3\n</code>\n<|/ a tags=julia\
    \ |>\n<| a dscore=3 |>\nIn Julia 1.3 you can use the function length\n<code>\n\
    julia> length(\"abc\")\n3\n</code>\n<|/ a tags=julia |>\n<| a dscore=3 |>\nIn\
    \ Julia 1.3 you can use the function length\n<code>\njulia> length(\"abc\")\n\
    3\n</code>\n<|/ a tags=julia |>\n<| a |>\nIn Julia 1.3 you can use the function\
    \ length\n<code>\njulia> length(\"abc\")\n3\n</code>\n<|/ a dscore=3 tags=julia\
    \ |>\n<| a dscore=3 |>\nIn Julia 1.3 you can use the function length\n<code>\n\
    julia> length(\"abc\")\n3\n</code>\n<|/ a tags=julia |>\n<| a tags=julia |>\n\
    In Julia 1.3 you can use the function length\n<code>\njulia> length(\"abc\")\n\
    3\n</code>\n<|/ a dscore=3 |>\n<| a \nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgby6cqbt.jl:10\nin expression starting at\
    \ /tmp/tmpgby6cqbt.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpsfolzbwt.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsfolzbwt.jl:1\n\
    in expression starting at /tmp/tmpsfolzbwt.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == ''\n        0\n    else\n        string.len()\nend\n</cell>\n\
    <code language=julia-1.3>\nstrlen(\"abc\")\n</cell>\n<text>\n@which - which function\n\
    @which - which function is a macro that prints the source code of a function or\
    \ expression. \nIt can be used inside functions to print the source code of a\
    \ function or expression.\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid empty character literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprhkxd7q2.jl:8\nin expression starting at /tmp/tmprhkxd7q2.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpnivj4_21.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpnivj4_21.jl:1\n\
    in expression starting at /tmp/tmpnivj4_21.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmd4tw_q9.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmd4tw_q9.jl:1\n\
    in expression starting at /tmp/tmpmd4tw_q9.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Compute length of given string\n    \"\"\"\n    return string.len()\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmprlwp0av8.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"\") == 0\n  type String has no field len\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] strlen(string::String)\n\
    \     @ Main /tmp/tmprlwp0av8.jl:11\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmprlwp0av8.jl:18 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmprlwp0av8.jl:17\ntest set:\
    \ Error During Test at /tmp/tmprlwp0av8.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"x\") == 1\n  type String has no field len\n  Stacktrace:\n   [1]\
    \ getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] strlen(string::String)\n\
    \     @ Main /tmp/tmprlwp0av8.jl:11\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmprlwp0av8.jl:19 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmprlwp0av8.jl:17\ntest set:\
    \ Error During Test at /tmp/tmprlwp0av8.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"asdasnakj\") == 9\n  type String has no field len\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] strlen(string::String)\n\
    \     @ Main /tmp/tmprlwp0av8.jl:11\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmprlwp0av8.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmprlwp0av8.jl:17\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprlwp0av8.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == \"\"\n        return 0\n    else\n        return string.length()\n\
    end\n</cell>\n<code language=julia-1.5>\nstrlen(\"abc\")\n</cell>\n<text>\nStrings\
    \ are immutable\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpczpzq44e.jl:13\nin expression starting at\
    \ /tmp/tmpczpzq44e.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpkq6lkku3.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpkq6lkku3.jl:1\n\
    in expression starting at /tmp/tmpkq6lkku3.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphire7yzk.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphire7yzk.jl:1\n\
    in expression starting at /tmp/tmphire7yzk.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Get length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpe1gtz0bb.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpe1gtz0bb.jl:1\n\
    in expression starting at /tmp/tmpe1gtz0bb.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppylz4pck.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppylz4pck.jl:1\n\
    in expression starting at /tmp/tmppylz4pck.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpsg_vh23l.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsg_vh23l.jl:1\n\
    in expression starting at /tmp/tmpsg_vh23l.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    local len::Int64 = 0\n    for char in string do \n        len = len + 1\n\
    \    end\n    return len\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpyaufyj2n.jl:9\nin expression starting at /tmp/tmpyaufyj2n.jl:9\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmprcxfm5y0.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprcxfm5y0.jl:1\n\
    in expression starting at /tmp/tmprcxfm5y0.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == ''\n        0\n    else\n        string.len()\nend\n</cell>\n\
    <code language=julia-1.4>\n\"\"\"\nReturn length of given string\n\"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\
    \t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid empty character literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_ozqa8n5.jl:8\nin expression starting at /tmp/tmp_ozqa8n5.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.5>\n\
    strlen(\"abc\")\n</cell>\n<text>\nSubstrings\nJulia has many string manipulation\
    \ functions. One of them is substrings, which extracts a substring from a string.\n\
    using Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") ==\
    \ 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpmxruj3qq.jl:8\nin expression starting at /tmp/tmpmxruj3qq.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    local len::Int64 = 0\n    for char in string:\n        len += 1\n    return\
    \ len\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia,string |>\nThe most efficient\
    \ way is to use Base.strlen\n<code>\njulia> Base.strlen(\"\")\n0\nusing Test\n\
    \n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpordicne2.jl:10\nin expression starting at\
    \ /tmp/tmpordicne2.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == ''\n        return 0\n    else\n        return string.length\n\
    end\n</cell>\n<code language=julia-1.3>\nstrlen(\"abc\")\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\nReturn length of given string\n\"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") ==\
    \ 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid empty character literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpygsqkxph.jl:8\nin expression starting at /tmp/tmpygsqkxph.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    local string\n    local len\n    len = 0\n    for char in string:\n     \
    \   len = len + 1\n    return len\nend\n</cell>\n<code language=julia-1.5>\nstrlen(\"\
    abc\")\n</cell>\n<text>\nReturn number of occurrences of substring in string\n\
    Return number of occurrences of substring in string\nReturn number of occurrences\
    \ of substring in string\nReturn number of occurrences of substring in string\n\
    Return number of occurrences of substring in string\nReturn number of occurrences\
    \ of substring in string\nReturn number of occurrences of substring in string\n\
    Return number of occurrences of substring in string\nReturn number of occurrences\
    \ of substring in string\nReturn number of occurrences of substring in string\n\
    Return number of occurrences of substring in string\nReturn number of occurrences\
    \ of substring in string\nReturn number of occurrences of substring in string\n\
    Return number of occurrences of substring in string\nReturn number of occurrences\
    \ of substring in string\nReturn number of occurrences of substring in string\n\
    Return number of occurrences of substring in string\nReturn number of occurrences\
    \ of substring in string\nReturn number of occurrences of substring in string\n\
    Return number of occurrences of substring in string\nReturn number of occurrences\
    \ of substring in string\nReturn number of occurrences of substring in string\n\
    Return number of occurrences of substring in string\nReturn number of occurrences\
    \ of substring in string\nReturn number of occurrences of substring in string\n\
    Return number of occurrences of substring in string\nReturn number of occurrences\
    \ of substring in string\nReturn number of occurrences of substring in string\n\
    Return number of occurrences of substring in string\nReturn number of occurrences\
    \ of substring in string\nReturn number of occurrences of substring in string\n\
    Return number of occurrences of substring in string\nReturn number of occurrences\
    \ of substring in string\nReturn number of occurrences of substring in string\n\
    Return number of occurrences of substring in string\nReturn number of occurrences\
    \ of substring in string\nReturn number of occurrences of substring in string\n\
    Return number of occurrences of substring in string\nReturn number of occurrences\
    \ of substring in string\nReturn number of occurrences of substring in string\n\
    Return number of occurrences of substring in string\nReturn number of occurrences\
    \ of substring in string\nReturn number of occurrences of substring in string\n\
    Return number of occurrences of substring in string\nReturn number of occurrences\
    \ of substring in string\nReturn number of occurrences of substring in string\n\
    Return number of occurrences of substring in string\nReturn number of occurrences\
    \ of substring in string\nReturn number of occurrences of substring in string\n\
    Return number of occurrences of substring in string\nReturn number of occurrences\
    \ of substring in string\nReturn number of occurrences of sub\nusing Test\n\n\
    @testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqen4vucc.jl:12\nin expression starting at\
    \ /tmp/tmpqen4vucc.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == \"\"\n        return 0\n    else\n        return string.length\n\
    end\n</cell>\n<code language=julia-1.5>\nstrlen(\"abc\")\n</cell>\n<text>\nSubstring\n\
    Return substring from given string from given index to given length\nIf index\
    \ is negative then start from end of string\nIf length is negative then return\
    \ empty string\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz7506jh_.jl:13\nin expression starting at\
    \ /tmp/tmpz7506jh_.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    local length::Int64 = 0\n    for char in string:\n        length = length\
    \ + 1\n    return length\nend\n</cell>\n<code language=julia-1.5>\nstrlen(\"abc\"\
    )\n</cell>\n<text>\nSubstring extraction\nJulia has a built-in function substring\
    \ that extracts a substring from a given string.\nusing Test\n\n@testset begin\n\
    \ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\"\
    ) == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1w87pvmk.jl:10\nin expression starting at\
    \ /tmp/tmp1w87pvmk.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    local len::Int64 = 0\n    for char in string:\n        len = len + 1\n  \
    \  return len\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\
    \") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") ==\
    \ 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplf_m5r1q.jl:10\nin expression starting at\
    \ /tmp/tmplf_m5r1q.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Compute length of given string\n    \"\"\"\n    return string.len()\n\
    using Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") ==\
    \ 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmplpknwupd.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplpknwupd.jl:1\n\
    in expression starting at /tmp/tmplpknwupd.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    length = 0\n    for c in string\n        length += 1\n    return length\n\
    </code>\n<|/ a dscore=2 |>\n<| c |>\nI like this answer because it uses recursion\
    \ and is easy to understand.\n<|/ c |>\n<| a tags=string,haskell,string-length\
    \ |>\n<code>\nstrlen :: String -> Int\nstrlen \"\" = 0\nstrlen str = 1 + strlen\
    \ $ tail str\n</code>\n<|/ a dscore=2 |>\n<| a |>\n<code>\nstrlen :: String ->\
    \ Int\nstrlen \"\" = 0\nstrlen str = length str + strlen $ tail str\n</code>\n\
    <|/ a dscore=2 tags=string,haskell,string-length |>\n<| a tags=string,haskell,string-length\
    \ |>\n<code>\nstrlen :: String -> Int\nstrlen \"\" = 0\nstrlen str = length str\
    \ + strlen $ tail str\n</code>\n<|/ a dscore=1 |>\n<| a tags=string,haskell,string-length\
    \ |>\n<code>\nstrlen :: String -> Int\nstrlen \"\" = 0\nstrlen str = 1 + strlen\
    \ $ tail str\n</code>\n<|/ a dscore=1 |>\n<| a tags=string,haskell,string-length\
    \ |>\n<code>\nstrlen :: String -> Int\nstrlen \"\" = 0\nstrlen str = 1 + strlen\
    \ $ tail str\n</code>\n<|/ a dscore=1 |>\n<| a tags=string,haskell,string-length\
    \ |>\n<code>\nstrlen :: String -> Int\nstrlen \"\" = 0\nstrlen str = 1 + strlen\
    \ $ tail str\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nstrlen ::\
    \ String -> Int\nstrlen \"\" = 0\nstrlen str = 1 + strlen $ tail str\n</code>\n\
    <|/ a tags=string,haskell,string-length |>\n<| a dscore=1 |>\n<code>\nstrlen ::\
    \ String -> Int\nstrlen \"\" = 0\nstrlen str = 1 + strlen $ tail str\n</code>\n\
    <|/ a tags=string,haskell,string-length |>\n<| a |>\n<code>\nstrlen :: String\
    \ -> Int\nstrlen \"\" = 0\nstrlen str = 1 + strlen $ tail str\n</code>\n<|/ a\
    \ tags=string,haskell,string-length dscore=1 |>\n<| a tags=string,haskell,string-length\
    \ |>\n<code>\nstrlen :: String -> Int\nstrlen \"\" = 0\nstrlen \nusing Test\n\n\
    @testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqhvweoi_.jl:12\nin expression starting at\
    \ /tmp/tmpqhvweoi_.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == \"\" then 0 else string.length\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpp91bqkq7.jl:8\nin expression starting at /tmp/tmpp91bqkq7.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    length = 0\n    for char in string:\n        length = length + 1\n    return\
    \ length\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for your answer. Your solution\
    \ is very similar to mine. My problem was that I didn't know that `length` was\
    \ a reserved word in Julia. Now I understand why my code didn't work. Thanks again.\n\
    <|/ c |>\n<| a dscore=1 |>\nI believe that your problem is that you are trying\
    \ to use length as a variable name.  In Julia, length is a reserved word.  Try\
    \ using another variable name such as len.\n<|/ a tags=julia |>\n<| c |>\nThanks\
    \ for your answer. Your solution is very similar to mine. My problem was that\
    \ I didn't know that `length` was a reserved word in Julia. Now I understand why\
    \ my code didn't work. Thanks again.\n<|/ c |>\n<| a tags=julia |>\nI believe\
    \ that your problem is that you are trying to use length as a variable name. In\
    \ Julia, length is a reserved word. Try using another variable name such as len.\n\
    <|/ a dscore=1 |>\n<| c |>\nThanks for your answer. Your solution is very similar\
    \ to mine. My problem was that I didn't know that `length` was a reserved word\
    \ in Julia. Now I understand why my code didn't work. Thanks again.\n<|/ c |>\n\
    <| a |>\nI believe that your problem is that you are trying to use length as a\
    \ variable name. In Julia, length is a reserved word. Try using another variable\
    \ name such as len.\n<|/ a tags=julia dscore=1 |>\n<| a dscore=1 |>\nI believe\
    \ that your problem is that you are trying to use length as a variable name. In\
    \ Julia, length is a reserved word. Try using another variable name such as len.\n\
    <|/ a tags=julia |>\n<| a dscore=1 |>\nThe issue is that you are trying to use\
    \ length as a variable name. In Julia, length is a reserved word. Try using another\
    \ variable name such as len.\n<|/ a tags=julia |>\n<| a tags=julia |>\nI believe\
    \ that your problem is that you are trying to use length as a variable name. In\
    \ Julia, length is a reserved word. Try using another variable name such as len.\n\
    <|/ a dscore=1 |>\n<| a tags=julia |>\nI believe that your problem is that you\
    \ are trying to use length as a variable name. In Julia, length is a reserved\
    \ word. Try using another variable name such as len.\n<|/ a dscore=1 |>\n<| a\
    \ dscore=1 |>\nI believe \nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps5rwxxmj.jl:10\nin expression starting at\
    \ /tmp/tmps5rwxxmj.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == nil then return 0 \n    else if string.len == 0 then return\
    \ 0 \n    else return string.len \nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\
    \t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpa3q4t5bn.jl:8\nin expression starting at /tmp/tmpa3q4t5bn.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp83rco4ba.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp83rco4ba.jl:1\n\
    in expression starting at /tmp/tmp83rco4ba.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == \"\" then 0 else string.length\nend\n</cell>\n<code language=julia-1.5>\n\
    strlen(\"abc\")\n</cell>\n<text>\nStrings are immutable\nStrings are immutable\
    \ in Julia\nStrings are immutable in Julia\nStrings are immutable in Julia\nStrings\
    \ are immutable in Julia\nStrings are immutable in Julia\nStrings are immutable\
    \ in Julia\nStrings are immutable in Julia\nStrings are immutable in Julia\nStrings\
    \ are immutable in Julia\nStrings are immutable in Julia\nStrings are immutable\
    \ in Julia\nStrings are immutable in Julia\nStrings are immutable in Julia\nStrings\
    \ are immutable in Julia\nStrings are immutable in Julia\nStrings are immutable\
    \ in Julia\nStrings are immutable in Julia\nStrings are immutable in Julia\nStrings\
    \ are immutable in Julia\nStrings are immutable in Julia\nStrings are immutable\
    \ in Julia\nStrings are immutable in Julia\nStrings are immutable in Julia\nStrings\
    \ are immutable in Julia\nStrings are immutable in Julia\nStrings are immutable\
    \ in Julia\nStrings are immutable in Julia\nStrings are immutable in Julia\nStrings\
    \ are immutable in Julia\nStrings are immutable in Julia\nStrings are immutable\
    \ in Julia\nStrings are immutable in Julia\nStrings are immutable in Julia\nStrings\
    \ are immutable in Julia\nStrings are immutable in Julia\nStrings are immutable\
    \ in Julia\nStrings are immutable in Julia\nStrings are immutable in Julia\nStrings\
    \ are immutable in Julia\nStrings are immutable in Julia\nStrings are immutable\
    \ in Julia\nStrings are immutable in Julia\nStrings are immutable in Julia\nStrings\
    \ are immutable in Julia\nStrings are immutable in Julia\nStrings are immutable\
    \ in Julia\nStrings are immutable in Julia\nStrings are immutable in Julia\nStrings\
    \ are immutable in Julia\nStrings are immutable in Julia\nStrings are immutable\
    \ in Julia\nStrings are immutable in Julia\nStrings are immutable in Julia\nStrings\
    \ are immutable in Julia\nStrings are immutable in Julia\nStrings are immutable\
    \ in Julia\nStrings are immutable in Julia\nStrings are immutable in Julia\nStrings\
    \ are immutable in Julia\nStrings are \nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpkrpy_5mu.jl:8\nin expression starting at /tmp/tmpkrpy_5mu.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    local len::Int64 = 0\n    for char in string:\n        len = len + 1\n  \
    \  return len\nend\n</cell>\n<code language=julia-1.3>\nstrlen(\"abc\")\n</cell>\n\
    <text>\nStrings are immutable in Julia\nJulia strings are immutable, meaning that\
    \ once they are created, they cannot be changed. However, Julia has several ways\
    \ to create new strings. One of them is using the function string(). For example,\n\
    using Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") ==\
    \ 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprezk0zi5.jl:10\nin expression starting at\
    \ /tmp/tmprezk0zi5.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    local result = 1\n    for char in string:\n        result = result * len(char)\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoev9na04.jl:10\nin expression starting at\
    \ /tmp/tmpoev9na04.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == \"\" then \n        return 0\n    else \n        return string.length()\n\
    end\n</cell>\n<code language=julia-1.3>\nstrlen(\"abc\")\n</cell>\n<text>\nSubstring\n\
    using Test\n\n@testset begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") ==\
    \ 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuzkj044a.jl:13\nin expression starting at\
    \ /tmp/tmpuzkj044a.jl:13\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqtre41hl.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqtre41hl.jl:1\n\
    in expression starting at /tmp/tmpqtre41hl.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpx9lt8ayu.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpx9lt8ayu.jl:1\n\
    in expression starting at /tmp/tmpx9lt8ayu.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    local result = 1\n    for char in string:\n        result = result * len(char)\n\
    \    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4_4gx8xd.jl:10\nin expression starting at\
    \ /tmp/tmp4_4gx8xd.jl:10\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmptlmy28c0.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptlmy28c0.jl:1\n\
    in expression starting at /tmp/tmptlmy28c0.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    local len::Int64 = 0\n    for c in string\n        len = len + 1\n    end\n\
    \    return len\nend\n</cell>\n<code language=julia-1.3>\nstrlen(\"abc\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of characters in that string. \nWrite a function that takes a string and returns\
    \ the number of words in that string. \nWrite a function that takes a string and\
    \ returns the number of sentences in that string. \nWrite a function that takes\
    \ a string and returns the number of characters in that string divided by the\
    \ number of words in that string. \nWrite a function that takes a string and returns\
    \ the number of characters in that string divided by the number of sentences in\
    \ that string. \nWrite a function that takes a string and returns the number of\
    \ characters in that string divided by the number of words in that string divided\
    \ by the number of sentences in that string. \nusing Test\n\n@testset begin\n\n\
    candidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") ==\
    \ 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0rih085k.jl:14\nin expression starting at\
    \ /tmp/tmp0rih085k.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == ''\n        return 0\n    else\n        return string.length\n\
    end\n</cell>\n<code language=julia-1.4>\nstrlen(\"abc\")\n</cell>\n<text>\nSubstrings\n\
    Julia has many string functions. Here are some of them:\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid empty character literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_6w8py46.jl:8\nin expression starting at /tmp/tmp_6w8py46.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpesjqiquh.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpesjqiquh.jl:1\n\
    in expression starting at /tmp/tmpesjqiquh.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_b4w0tuk.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_b4w0tuk.jl:1\n\
    in expression starting at /tmp/tmp_b4w0tuk.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    if string == \"\" then 0 else string.length\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"\
    x\") == 1)\n\t@test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpemw8wcf4.jl:8\nin expression starting at /tmp/tmpemw8wcf4.jl:8\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    \"\"\"\n    Return length of given string\n    >>> strlen('')\n    0\n  \
    \  >>> strlen('abc')\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = strlen;\n\t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t\
    @test(candidate(\"asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp8o6p0n40.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8o6p0n40.jl:1\n\
    in expression starting at /tmp/tmp8o6p0n40.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>>\
    \ strlen('abc')\n    3\n    \"\"\"\nfunction strlen(string::String)::Int64 \n\
    \    local len::Int64 = 0\n    for c in string:\n        len = len + 1\n    return\
    \ len\nend\n</cell>\n<code language=julia-1.5>\nstrlen(\"abc\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of characters in a string\
    \ that are not letters.\nusing Test\n\n@testset begin\n\ncandidate = strlen;\n\
    \t@test(candidate(\"\") == 0)\n\t@test(candidate(\"x\") == 1)\n\t@test(candidate(\"\
    asdasnakj\") == 9)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2cn8jexy.jl:10\nin expression starting at\
    \ /tmp/tmp2cn8jexy.jl:10\n"
  exit_code: 1
  status: SyntaxError
