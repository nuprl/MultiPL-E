name: HumanEval_18_how_many_times
language: julia
prompt: "\"\"\" Find how many times a given substring can be found in the original\
  \ string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>>\
  \ how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n\
  \    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64 \n"
tests: "using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
  \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
  cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
completions: ["    if string == \"\" || substring == \"\"\n        return 0 \n   \
    \ else if string[0] == substring[0]\n        return 1 + how_many_times(string[1:],\
    \ substring[1:])\n    else\n        return 1 + how_many_times(string[1:], substring)\n\
    end\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of times each character appears in the string.", "    if string == \"\" || substring\
    \ == \"\"\n        return 0\n    \n    count = 0\n    \n    for char in string\n\
    \        if char == substring[0]\n            count = count + 1\n            \n\
    \            if char == substring[1]\n                count = count + 1\n    \
    \            \n            if char == substring[2]\n                count = count\
    \ + 1\n                \n            if char == substring[3]\n               \
    \ count = count + 1\n                \n            if char == substring[4]\n \
    \               count = count + 1\n                \n            if char == substring[5]\n\
    \                count = count + 1\n                \n            if char == substring[6]\n\
    \                count = count + 1\n                \n            if char == substring[7]\n\
    \                count = count + 1\n                \n            if char == substring[8]\n\
    \                count = count + 1\n                \n            if char == substring[9]\n\
    \                count = count + 1\n                \n            if char == substring[10]\n\
    \                count = count + 1\n                \n            if char == substring[11]\n\
    \                count = count + 1\n                \n            if char == substring[12]\n\
    \                count = count + 1\n                \n            if char == substring[13]\n\
    \                count = count + 1\n                \n            if char == substring[14]\n\
    \                count = count + 1\n                \n            if char == substring[15]\n\
    \                count = count + 1\n                \n            if char == substring[16]\n\
    \                count = count + 1\n                \n            if char == substring[17]\n\
    \                count = count + 1\n                \n            if char == substring[18]\n\
    \                count = count + 1\n                \n            if char == substring[19]\n\
    \                count = count + 1\n                \n            if char == substring[20]\n\
    \                count = count + 1\n                \n            if char == substring[21]\n\
    \                count = count + 1\n                \n            if char == substring[22]\n\
    \                count = count + 1\n                \n            if char == substring[23]\n\
    \                count = count + 1\n                \n            if char == substring[24]\n\
    \                count = count + 1\n                \n            if char == substring[25]\n\
    \                count = count + 1\n                \n            if char == substring[26]\n\
    \                count = count + 1\n                \n            if char == substring[27]\n\
    \                count = count + 1\n                \n            if char == substring[28]\n\
    \                count = count + 1\n                \n            if char == substring[29]\n\
    \                count = count + 1\n                \n            if char == substring[30]\n\
    \                count = count + 1\n                \n            if char == substring[31]\n\
    \                count = count + 1\n                \n            if char == substring[32]\n\
    \                count = count + 1\n                \n            if char == substring[33]\n\
    \                count = count + 1\n                \n", "    if string == \"\"\
    \ || substring == \"\"\n        return 0\n    else if string[0] == substring[0]\n\
    \        return 1 + how_many_times(string[1:], substring[1:])\n    else\n    \
    \    return how_many_times(string[1:], substring) + how_many_times(string, substring[1:])\n\
    end\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string and a substring and returns\
    \ the number of times the substring appears in the string.", "    if string ==\
    \ \"\" || substring == \"\"\n        return 0 \n    else if string[0] == substring[0]\n\
    \        return 1 + how_many_times(string[1:], substring[1:])\n    else\n    \
    \    return how_many_times(string[1:], substring)\nend\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that takes a string and returns the number of times the\
    \ string \"ab\" appears in the string. \n>>> how_many_times('ab', 'ab')\n2\n>>>\
    \ how_many_times('ab', 'ba')\n1\n>>> how_many_times('ab', 'abb')\n0\n>>> how_many_times('ab',\
    \ 'aba')\n1\n>>> how_many_times('ab', 'abba')\n1\n>>> how_many_times('ab', 'abbb')\n\
    2\n>>> how_many_times('ab', 'abbbb')\n3\n>>> how_many_times('ab', 'abbbba')\n\
    3\n>>> how_many_times('ab', 'abbbbba')\n4\n>>> how_many_times('ab', 'abbbbbac')\n\
    4\n>>> how_many_times('ab', 'abbbbbacab')\n4\n>>> how_many_times('ab', 'abbbbbacabc')\n\
    4\n>>> how_many_times('ab', 'abbbbbacabcba')\n4\n>>> how_many_times('ab', 'abbbbbacabcbac')\n\
    4\n>>> how_many_times('ab', 'abbbbbacabcbacab')\n4\n>>> how_many_times('ab', 'abbbbbacabcbacabc')\n\
    4\n>>> how_many_times('ab', 'abbbbbacabcbacabcba')\n4\n>>> how_many_times('ab',\
    \ 'abbbbbacabcbacabcbac')\n4\n>>> how_many_times('ab', 'abbbbbacabcbacabcbacab')\n\
    4\n>>> how_many_times('ab', 'abbbbbacabcbacabcbacabc')\n4\n>>> how_many_times('ab',\
    \ 'abbbbbacabcbacabcbacabcba')\n4\n>>> how_many_times('ab', 'abbbbbacabcbacabcbacabcbac')\n\
    4\n>>> how_many_times('ab', 'abbbbbacabcba", "    if string == \"\" || substring\
    \ == \"\"\n        return 0\n    \n    count = 0\n    \n    for c in string\n\
    \        if c == substring\n            count += 1\n        else\n           \
    \ count = 0\n    end\n    \n    return count\nend\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaa\", \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string and returns the number of times the string \"aaa\" appears\
    \ in the string. \n>>> how_many_times(\"aaa\", \"a\")\n3\n>>> how_many_times(\"\
    aaa\", \"b\")\n0\n>>> how_many_times(\"aaa\", \"c\")\n0\n>>> how_many_times(\"\
    aaa\", \"d\")\n0\n>>> how_many_times(\"aaa\", \"e\")\n0\n>>> how_many_times(\"\
    aaa\", \"f\")\n0\n>>> how_many_times(\"aaa\", \"g\")\n0\n>>> how_many_times(\"\
    aaa\", \"h\")\n0\n>>> how_many_times(\"aaa\", \"i\")\n0\n>>> how_many_times(\"\
    aaa\", \"j\")\n0\n>>> how_many_times(\"aaa\", \"k\")\n0\n>>> how_many_times(\"\
    aaa\", \"l\")\n0\n>>> how_many_times(\"aaa\", \"m\")\n0\n>>> how_many_times(\"\
    aaa\", \"n\")\n0\n>>> how_many_times(\"aaa\", \"o\")\n0\n>>> how_many_times(\"\
    aaa\", \"p\")\n0\n>>> how_many_times(\"aaa\", \"q\")\n0\n>>> how_many_times(\"\
    aaa\", \"r\")\n0\n>>> how_many_times(\"aaa\", \"s\")\n0\n>>> how_many_times(\"\
    aaa\", \"t\")\n0\n>>> how_many_times(\"aaa\", \"u\")\n0\n>>> how_many_times(\"\
    aaa\", \"v\")\n0\n>>> how_many_times(\"aaa\", \"w\")\n0\n>>> how_many_times(\"\
    aaa\", \"x\")\n0\n>>> how_many_times(\"aaa\", \"y\")\n0\n>>> how_many_times(\"\
    aaa\", \"z\")\n0\n>>> how_many_times(\"aaa\", \"aa\")\n3\n>>> how_many_times(\"\
    aaa\", \"ab\")\n0\n>>> how_many_times(\"aaa\", \"ac\")\n0\n>>> how_many_times(\"\
    aaa\", \"ad\")\n0\n>>> how_man", "    if string == \"\" || substring == \"\"\n\
    \        return 0\n    \n    count = 0\n    \n    for c in string\n        if\
    \ c == substring[0]\n            count = count + 1\n        else\n           \
    \ count = 0\n    end\n    \n    return count\nend\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string and returns the number of times the substring \"ab\" appears\
    \ in the string. Case insensitive.", "    if string == \"\" || substring == \"\
    \"\n        return 0\n    else if string[0] == substring[0]\n        return 1\
    \ + how_many_times(string[1:], substring[1:])\n    else\n        return how_many_times(string[1:],\
    \ substring) + how_many_times(string, substring[1:])\nend\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaa\"\
    , \"aaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaa\", \"\
    aaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaa\", \"aaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaa\", \"aa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaaaaa\", \"a\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaaaaa\", \"aa\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaaaaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaaaaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaa\"\
    , \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaa\", \"a\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaa\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaaaaa\", \"a\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaaaaa\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaaaaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaaaaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaa\"\
    , \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaa\", \"a\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaa\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaaaaa\", \"a\")\n</cell>\n<code\
    \ language=julia-1.5", "    if string == \"\" || substring == \"\"\n        return\
    \ 0\n    \n    count = 0\n    \n    for char in string\n        if char == substring\n\
    \            count += 1\n        else\n            count = 0\n    end\n    \n\
    \    return count\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"\
    aa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaa\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaa\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaa\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aaaaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aaaaaaab\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaaaaaabb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaaaaaabbb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaaaaaabbbb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaaaaaabbbbb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaaaaaabbbbba\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaaaaaabbbbbaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaaaaaabbbbbaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aaaaaaabbbbbaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aaaaaaabbbbbaaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aaaaaaabbbbbaaaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aaaaaaabbbbbaaaaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_", " \
    \   if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for c in string\n        if c == substring\n            count\
    \ += 1\n        else\n            count = 0\n    end\n    \n    return count\n\
    end\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of times each character appears in the string.", "    if string == \"\" || substring\
    \ == \"\"\n        return 0 \n    else if substring[0] == string[0]\n        return\
    \ 1 + how_many_times(string[1:], substring[1:])\n    else\n        return 1 +\
    \ how_many_times(string[1:], substring)\nend\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the number of times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times_2('', 'a')\n    0\n\
    \    >>> how_many_times_2('aaa', 'a')\n    3\n    >>> how_many_times_2('aaaa',\
    \ 'aa')\n    3\n    \"\"\"", "    if string == \"\" || substring == \"\"\n   \
    \     return 0\n    else if string[0] == substring[0]\n        return 1 + how_many_times(string[1:],\
    \ substring[1:])\n    else\n        return how_many_times(string[1:], substring)\n\
    end\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaa\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"\
    aaaaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaab\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaaba\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabaaab\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabaaaba\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabaaabaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabaaabaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabaaabaaab\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabaaabaaaba\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabaaabaaabaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabaaabaaabaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabaaabaaabaaab",
  "    if string == \"\" || substring == \"\"\n        return 0\n    else if string[0]\
    \ == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"bc\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"bb\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abcabcbb\", \"c\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabcbb\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\"\
    , \"bc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"\
    bb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"c\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"bc\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"bb\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abcabcbb\", \"c\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abcabcbb\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\"\
    , \"bc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"\
    bb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"c\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"bc\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abcabcbb\", \"bb\")\n</cell>\n<code language=julia-1.5>\n\
    ho", "    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times('', 'a')\n</cell>\n<code language=julia-1.5>\n\
    how_many_times('aaa', 'a')\n</cell>\n<code language=julia-1.5>\nhow_many_times('aaaa',\
    \ 'aa')\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ a substring and returns the number of times the substring appears in the string.\
    \ Case insensitive.", "    if string == \"\" || substring == \"\"\n        return\
    \ 0\n    \n    len_string = length(string)\n    len_substring = length(substring)\n\
    \    \n    if len_string == 0 || len_substring == 0\n        return 0\n    \n\
    \    substring = substring(len_substring)\n    \n    if substring.length == len_string\n\
    \        return substring.length\n    \n    substring = substring(len_substring)\n\
    \    \n    if substring.length == len_string\n        return substring.length\n\
    \    \n    substring = substring(len_substring)\n    \n    if substring.length\
    \ == len_string\n        return substring.length\n    \n    substring = substring(len_substring)\n\
    \    \n    if substring.length == len_string\n        return substring.length\n\
    \    \n    substring = substring(len_substring)\n    \n    if substring.length\
    \ == len_string\n        return substring.length\n    \n    substring = substring(len_substring)\n\
    \    \n    if substring.length == len_string\n        return substring.length\n\
    \    \n    substring = substring(len_substring)\n    \n    if substring.length\
    \ == len_string\n        return substring.length\n    \n    substring = substring(len_substring)\n\
    \    \n    if substring.length == len_string\n        return substring.length\n\
    \    \n    substring = substring(len_substring)\n    \n    if substring.length\
    \ == len_string\n        return substring.length\n    \n    substring = substring(len_substring)\n\
    \    \n    if substring.length == len_string\n        return substring.length\n\
    \    \n    substring = substring(len_substring)\n    \n    if substring.length\
    \ == len_string\n        return substring.length\n    \n    substring = substring(len_substring)\n\
    \    \n    if substring.length == len_string\n        return substring.length\n\
    \    \n    substring = substring(len_substring)\n    \n    if substring.length\
    \ == len_string\n        return substring.length\n    \n    substring = substring(len_substring)\n\
    \    \n    if substring.length == len_string\n        return substring.length\n\
    \    \n    substring = substring(len_substring)\n    \n    if substring.length\
    \ == len_string\n        return substring.length\n    \n    substring = substring(len_substring)\n\
    \    \n    if substring.length == len_string\n        return substring.length\n\
    \    \n    substring = substring(len_substring)\n    \n    if substring.length\
    \ == len_string\n        return substring.length\n    \n    substring = substring(len_substring)\n\
    \    \n    if substring.length == len_string\n        return substring.length\n\
    \    \n    substring = substring(len_substring)\n    \n    if substring.length\
    \ == len_string\n        return substring.length\n    \n    substring = substring(len_substring)\n\
    \    \n    if substring.length == len_string\n        return substring.length\n\
    \    \n    substring = substring(len_substring", "    if string == \"\" || substring\
    \ == \"\"\n        return 0\n    \n    count = 0\n    \n    for c in string\n\
    \        if c == substring\n            count += 1\n        end\n    end\n   \
    \ \n    return count\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaa\", \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of times a substring appears within that string. Count\
    \ overlaping cases.\n>>> how_many_times('', 'a')\n0\n>>> how_many_times('aaa',\
    \ 'a')\n3\n>>> how_many_times('aaaa', 'aa')\n3\n>>> how_many_times('aaaa', 'aaa')\n\
    2\n>>> how_many_times('aaaa', 'aaaa')\n2\n>>> how_many_times('aaaa', 'aaaaa')\n\
    1\n>>> how_many_times('aaaa', 'aaaaaa')\n1\n>>> how_many_times('aaaa', 'aaaaaaa')\n\
    0\n>>> how_many_times('aaaa', 'aaaaaaab')\n0\n>>> how_many_times('aaaa', 'aaaaaaaba')\n\
    0\n>>> how_many_times('aaaa', 'aaaaaaabaa')\n0\n>>> how_many_times('aaaa', 'aaaaaaabaaa')\n\
    0\n>>> how_many_times('aaaa', 'aaaaaaabaaaa')\n0\n>>> how_many_times('aaaa', 'aaaaaaabaaaaa')\n\
    0\n>>> how_many_times('aaaa', 'aaaaaaabaaaaaa')\n0\n>>> how_many_times('aaaa',\
    \ 'aaaaaaabaaaaaaa')\n0\n>>> how_many_times('aaaa', 'aaaaaaabaaaaaaab')\n0\n>>>\
    \ how_many_times('aaaa', 'aaaaaaabaaaaaaaba')\n0\n>>> how_many_times('aaaa', 'aaaaaaabaaaaaaabaa')\n\
    0\n>>> how_many_times('aaaa', 'aaaaaaabaaaaaaabaaa')\n0\n>>> how_many_times('aaaa',\
    \ 'aaaaaaabaaaaaaabaaaa')\n0\n>>> how_many_times('aaaa', 'aaaaaaabaaaaaaabaaaaa')\n\
    0\n>>> how_many_times('aaaa', 'aaaaaaabaaaaaaabaaaaaa')\n0\n>>> how_many_times('aaaa',\
    \ 'aaaaaaabaaaaaaabaaaaaaa')\n0\n>>> how_many_times('aaaa', 'aaaaaa", "    if\
    \ string == \"\" || substring == \"\"\n        return 0\n    \n    count = 0\n\
    \    \n    for char in string\n        if char == substring[0]\n            count\
    \ = count + 1\n            \n            if char == substring[1]\n           \
    \     count = count + 1\n                \n            if char == substring[2]\n\
    \                count = count + 1\n                \n            if char == substring[3]\n\
    \                count = count + 1\n                \n            if char == substring[4]\n\
    \                count = count + 1\n                \n            if char == substring[5]\n\
    \                count = count + 1\n                \n            if char == substring[6]\n\
    \                count = count + 1\n                \n            if char == substring[7]\n\
    \                count = count + 1\n                \n            if char == substring[8]\n\
    \                count = count + 1\n                \n            if char == substring[9]\n\
    \                count = count + 1\n                \n            if char == substring[10]\n\
    \                count = count + 1\n                \n            if char == substring[11]\n\
    \                count = count + 1\n                \n            if char == substring[12]\n\
    \                count = count + 1\n                \n            if char == substring[13]\n\
    \                count = count + 1\n                \n            if char == substring[14]\n\
    \                count = count + 1\n                \n            if char == substring[15]\n\
    \                count = count + 1\n                \n            if char == substring[16]\n\
    \                count = count + 1\n                \n            if char == substring[17]\n\
    \                count = count + 1\n                \n            if char == substring[18]\n\
    \                count = count + 1\n                \n            if char == substring[19]\n\
    \                count = count + 1\n                \n            if char == substring[20]\n\
    \                count = count + 1\n                \n            if char == substring[21]\n\
    \                count = count + 1\n                \n            if char == substring[22]\n\
    \                count = count + 1\n                \n            if char == substring[23]\n\
    \                count = count + 1\n                \n            if char == substring[24]\n\
    \                count = count + 1\n                \n            if char == substring[25]\n\
    \                count = count + 1\n                \n            if char == substring[26]\n\
    \                count = count + 1\n                \n            if char == substring[27]\n\
    \                count = count + 1\n                \n            if char == substring[28]\n\
    \                count = count + 1\n                \n            if char == substring[29]\n\
    \                count = count + 1\n                \n            if char == substring[30]\n\
    \                count = count + 1\n                \n            if char == substring[31]\n\
    \                count = count + 1\n                \n            if char == substring[32]\n\
    \                count = count + 1\n                \n            if char == substring[33]\n\
    \                count = count + 1\n                \n", "    if string == \"\"\
    \ || substring == \"\"\n        return 0\n    \n    count = 0\n    \n    for i\
    \ in string.chars\n        if substring == i\n            count += 1\n       \
    \     \n    return count\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of times each character appears in the string. \nFor\
    \ example the string \"abcabc\" should return [('a', 3), ('b', 2), ('c', 3)]",
  "    if string == \"\" || substring == \"\"\n        return 0\n    \n    string::Char\n\
    \    substring::Char\n    \n    string::Int64 = 0\n    substring::Int64 = 0\n\
    \    \n    for char in string\n        if char == substring\n            string\
    \ += 1\n        else\n            substring = 0\n    end\n    \n    return string\n\
    end\n</cell>\n<code language=julia-1.5>\nhow_many_times('', 'a')\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times('aaa', 'a')\n</cell>\n<code language=julia-1.5>\n\
    how_many_times('aaaa', 'aa')\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a string and a substring and returns the number of times the substring\
    \ appears in the string. Count overlaping cases.\n>>> how_many_times('', 'a')\n\
    0\n>>> how_many_times('aaa', 'a')\n3\n>>> how_many_times('aaaa', 'aa')\n3\n>>>\
    \ how_many_times('', 'aa')\n0\n>>> how_many_times('aa', 'a')\n2\n>>> how_many_times('aaa',\
    \ 'aa')\n3\n>>> how_many_times('aaaa', 'aaa')\n4\n>>> how_many_times('aaaaa',\
    \ 'aaaa')\n4\n>>> how_many_times('aaaaaa', 'aaaaa')\n4\n>>> how_many_times('aaaaaaa',\
    \ 'aaaaaa')\n4\n>>> how_many_times('aaaaaaa', 'aaaaaaa')\n4\n>>> how_many_times('aaaaaaa',\
    \ 'aaaaaaa')\n4\n>>> how_many_times('aaaaaaa', 'aaaaaaa')\n4\n>>> how_many_times('aaaaaaa',\
    \ 'aaaaaaa')\n4\n>>> how_many_times('aaaaaaa', 'aaaaaaa')\n4\n>>> how_many_times('aaaaaaa',\
    \ 'aaaaaaa')\n4\n>>> how_many_times('aaaaaaa', 'aaaaaaa')\n4\n>>> how_many_times('aaaaaaa',\
    \ 'aaaaaaa')\n4\n>>> how_many_times('aaaaaaa', 'aaaaaaa')\n4\n>>> how_many_times('aaaaaaa',\
    \ 'aaaaaaa')\n4\n>>> how_many_times('aaaaaaa', 'aaaaaaa')\n4\n>>> how_many_times('aaaaaaa',\
    \ 'aaaaaaa')\n4\n>>> how_many_times('aaaaaaa', 'aaaaaaa')\n4\n>>> ho", "    if\
    \ string == \"\" || substring == \"\"\n        return 0\n    \n    len_string\
    \ = length(string)\n    len_substring = length(substring)\n    \n    if len_string\
    \ == 0 || len_substring == 0\n        return 0\n    \n    if len_string == len_substring\n\
    \        return 1\n    \n    i = 0\n    j = len_string\n    \n    while i < j\n\
    \        if string[i] == substring[j]\n            i += 1\n            j += 1\n\
    \        else\n            if string[i] == substring[j - 1]\n                i\
    \ += 1\n            else\n                if string[i] == substring[j + 1]\n \
    \                   i += 1\n                else\n                    if string[i]\
    \ == substring[j - 2]\n                        i += 1\n                    else\n\
    \                        j += 1\n                end\n            end\n      \
    \  end\n    end\n    \n    return j\nend\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of times each character appears in\
    \ the string. \nFor example, if the input string is \"abcabc\", the output should\
    \ be [('a', 3), ('b', 2), ('c', 3)]", "    if string == \"\" || substring == \"\
    \"\n        return 0\n    \n    i = 0\n    \n    while i < length(substring)\n\
    \        if substring(i, 1) == string\n            i += 1\n        else\n    \
    \        i += 1\n        end\n    end\n    \n    return i\nend\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"\
    aa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaa\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"\
    aa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaa\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"\
    aa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaa\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"\
    aa\")\n</cell>\n<code language=julia-", "    if string == \"\" || substring ==\
    \ \"\"\n        return 0\n    \n    count = 0\n    \n    for i in string.chars()\n\
    \        if substring == i\n            count += 1\n        end\n    end\n   \
    \ \n    return count\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of times a substring appears within that string. Count\
    \ overlaping cases.\ne.g. \"aaaa\" appears 3 times in the string", "    if string\
    \ == \"\" || substring == \"\"\n        return 0\n    else if string[0] == substring[0]\n\
    \        return 1 + how_many_times(string[1:], substring[1:])\n    else\n    \
    \    return 1 + how_many_times(string[1:], substring)\nend\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaa\", \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and a substring as arguments and returns the number of times\
    \ the substring appears in the string. Case insensitive.", "    if string == \"\
    \" || substring == \"\"\n        return 0\n    else if substring == string\n \
    \       return 1\n    else\n        return 1 + how_many_times(string[1..end-1],\
    \ substring)\nend\n</cell>\n<code language=julia-1.5>", "    if string == \"\"\
    \ || substring == \"\"\n        return 0\n    \n    count = 0\n    \n    for c\
    \ in string\n        if c == substring[0]\n            count = count + 1\n   \
    \         \n            if substring[1] == c\n                count = count +\
    \ 1\n            \n            if substring[2] == c\n                count = count\
    \ + 1\n            \n            if substring[3] == c\n                count =\
    \ count + 1\n            \n            if substring[4] == c\n                count\
    \ = count + 1\n            \n            if substring[5] == c\n              \
    \  count = count + 1\n            \n            if substring[6] == c\n       \
    \         count = count + 1\n            \n            if substring[7] == c\n\
    \                count = count + 1\n            \n            if substring[8]\
    \ == c\n                count = count + 1\n            \n            if substring[9]\
    \ == c\n                count = count + 1\n            \n            if substring[10]\
    \ == c\n                count = count + 1\n            \n            if substring[11]\
    \ == c\n                count = count + 1\n            \n            if substring[12]\
    \ == c\n                count = count + 1\n            \n            if substring[13]\
    \ == c\n                count = count + 1\n            \n            if substring[14]\
    \ == c\n                count = count + 1\n            \n            if substring[15]\
    \ == c\n                count = count + 1\n            \n            if substring[16]\
    \ == c\n                count = count + 1\n            \n            if substring[17]\
    \ == c\n                count = count + 1\n            \n            if substring[18]\
    \ == c\n                count = count + 1\n            \n            if substring[19]\
    \ == c\n                count = count + 1\n            \n            if substring[20]\
    \ == c\n                count = count + 1\n            \n            if substring[21]\
    \ == c\n                count = count + 1\n            \n            if substring[22]\
    \ == c\n                count = count + 1\n            \n            if substring[23]\
    \ == c\n                count = count + 1\n            \n            if substring[24]\
    \ == c\n                count = count + 1\n            \n            if substring[25]\
    \ == c\n                count = count + 1\n            \n            if substring[26]\
    \ == c\n                count = count + 1\n            \n            if substring[27]\
    \ == c\n                count = count + 1\n            \n            if substring[28]\
    \ == c\n                count = count + 1\n            \n            if substring[29]\
    \ == c\n                count = count + 1\n            \n            if substring[30]\
    \ == c\n                count = count + 1\n            \n            if substring[31]\
    \ == c\n                count = count + 1\n            \n            if substring[32]\
    \ == c\n                count = count + 1\n            \n            if substring[33]\
    \ == c\n                count = count + 1\n            \n            if substring[34]\
    \ == c\n                count = count + 1\n            \n            if substring[35]\
    \ == c\n                count = count + 1\n            ", "    if string == \"\
    \" || substring == \"\"\n        return 0\n    else if string[0] == substring[0]\n\
    \        return 1 + how_many_times(string[1:], substring[1:])\n    else\n    \
    \    return 1 + how_many_times(string[1:], substring)\nend\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\",\
    \ \"aaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaa\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaa\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aaaaaaab\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aaaaaaabb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aaaaaaabbb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aaaaaaabbbb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aaaaaaabbbbb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aaaaaaabbbbba\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aaaaaaabbbbbaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aaaaaaabbbbbaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aaaaaaabbbbbaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aaaaaaabbbbbaaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aaaaaaabbbbbaaaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aaaaaaabbbbbaaaaaaa\")\n</cell>\n<code language=", "    if string ==\
    \ \"\" || substring == \"\"\n        return 0\n    \n    count = 0\n    \n   \
    \ for char in string\n        if char == substring[0]\n            count += 1\n\
    \            \n            if char == substring[1]\n                count += 1\n\
    \                \n                if char == substring[2]\n                 \
    \   count += 1\n                    \n                    if char == substring[3]\n\
    \                        count += 1\n                        \n              \
    \          if char == substring[4]\n                            count += 1\n \
    \                           \n                            if char == substring[5]\n\
    \                                count += 1\n                                \n\
    \                                if char == substring[6]\n                   \
    \                 count += 1\n                                    \n         \
    \                           if char == substring[7]\n                        \
    \                count += 1\n                                        \n      \
    \                                  if char == substring[8]\n                 \
    \                           count += 1\n                                     \
    \       \n                                            if char == substring[9]\n\
    \                                                count += 1\n                \
    \                                \n                                          \
    \      if char == substring[10]\n                                            \
    \        count += 1\n                                                    \n  \
    \                                                  if char == substring[11]\n\
    \                                                        count += 1\n        \
    \                                                \n                          \
    \                              if char == substring[12]\n                    \
    \                                        count += 1\n                        \
    \                                    \n                                      \
    \                      if char == substring[13]\n                            \
    \                                    count += 1\n                            \
    \                                    \n                                      \
    \                          if char == substring[14]\n                        \
    \                                            count += 1\n                    \
    \                                                \n                          \
    \                                          if char == substring[15]\n        \
    \                                                                count += 1\n\
    \                                                                        \n  \
    \                                                      if char == substring[16]\n\
    \                                                            count += 1\n    \
    \                                                        \n                  \
    \                                          if char == substring[17]\n        \
    \                                                        count += 1\n        \
    \                                                        \n                  \
    \                                              if char == substring[18]\n    \
    \                                                                count += 1\n\
    \                                                                    \n      \
    \                                                              if char == substring[19]\n\
    \                                                                        count\
    \ += 1\n                                                                     \
    \   \n                                                        if char == substring[20]\n\
    \                                                            count += 1\n    \
    \                                                        \n                  \
    \                                          if char == substring[21]\n        \
    \                                                        count += 1\n        \
    \                                                        \n                  \
    \                                              if char == substring[22]\n    \
    \                                                                count += 1\n\
    \                                                                    \n      \
    \                                                              if char == substring[23]\n\
    \                                                                        count\
    \ += 1\n                                                                     \
    \   \n                                                        if char == substring[24]\n\
    \                                                            count += 1\n    \
    \                                                        \n                  \
    \                                          if char == substring[25]\n        \
    \                                                        count += 1\n        \
    \                                                        \n                  \
    \                                              if char == substring[26]\n    \
    \                                                                count += 1\n\
    \                                                                    \n      \
    \                                                              if char == substring[27]\n\
    \                                                                        count\
    \ += 1\n                                                                     \
    \   \n                                                        if char == substring[28]\n\
    \                                                            count += 1\n    \
    \                                                        \n                  \
    \                                          if char == substring[29]\n        \
    \                                                        count += 1\n        \
    \                                                        \n                  \
    \                                              if char == substring[30]\n    \
    \                                                                count += 1\n\
    \                                                                    \n      \
    \                                                              if char == substring[31]\n\
    \                                                                        count\
    \ += 1\n                                                                     \
    \   \n                                                        if char == substring[32]\n\
    \                                                            count += 1\n    \
    \                                                        \n                  \
    \                                          if char == substring[33]\n        \
    \                                                        count += 1\n        \
    \                                                        \n                  \
    \                                              if char == substring[34]\n    \
    \                                                                count += 1\n\
    \                                                                    \n", "  \
    \  if string == \"\" || substring == \"\"\n        return 0\n    \n    len_string\
    \ = length(string)\n    len_substring = length(substring)\n    \n    if len_string\
    \ == 0 || len_substring == 0\n        return 0\n    \n    if len_string == len_substring\n\
    \        return count_overlaping_cases(string, substring)\n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    ", "    if string == \"\" || substring == \"\"\n        return 0\n    else\
    \ if string[0] == substring[0]\n        return 1 + how_many_times(string[1:],\
    \ substring[1:])\n    else\n        return 1 + how_many_times(string[1:], substring)\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ the number of times a substring appears in the string. Case insensitive.", " \
    \   if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for char in string\n        if char == substring[0]\n       \
    \     count = count + 1\n            \n            if char == substring[1]\n \
    \               count = count + 1\n                \n            if char == substring[2]\n\
    \                count = count + 1\n                \n            if char == substring[3]\n\
    \                count = count + 1\n                \n            if char == substring[4]\n\
    \                count = count + 1\n                \n            if char == substring[5]\n\
    \                count = count + 1\n                \n            if char == substring[6]\n\
    \                count = count + 1\n                \n            if char == substring[7]\n\
    \                count = count + 1\n                \n            if char == substring[8]\n\
    \                count = count + 1\n                \n            if char == substring[9]\n\
    \                count = count + 1\n                \n            if char == substring[10]\n\
    \                count = count + 1\n                \n            if char == substring[11]\n\
    \                count = count + 1\n                \n            if char == substring[12]\n\
    \                count = count + 1\n                \n            if char == substring[13]\n\
    \                count = count + 1\n                \n            if char == substring[14]\n\
    \                count = count + 1\n                \n            if char == substring[15]\n\
    \                count = count + 1\n                \n            if char == substring[16]\n\
    \                count = count + 1\n                \n            if char == substring[17]\n\
    \                count = count + 1\n                \n            if char == substring[18]\n\
    \                count = count + 1\n                \n            if char == substring[19]\n\
    \                count = count + 1\n                \n            if char == substring[20]\n\
    \                count = count + 1\n                \n            if char == substring[21]\n\
    \                count = count + 1\n                \n            if char == substring[22]\n\
    \                count = count + 1\n                \n            if char == substring[23]\n\
    \                count = count + 1\n                \n            if char == substring[24]\n\
    \                count = count + 1\n                \n            if char == substring[25]\n\
    \                count = count + 1\n                \n            if char == substring[26]\n\
    \                count = count + 1\n                \n            if char == substring[27]\n\
    \                count = count + 1\n                \n            if char == substring[28]\n\
    \                count = count + 1\n                \n            if char == substring[29]\n\
    \                count = count + 1\n                \n            if char == substring[30]\n\
    \                count = count + 1\n                \n            if char == substring[31]\n\
    \                count = count + 1\n                \n            if char == substring[32]\n\
    \                count = count + 1\n                \n            if char == substring[33]\n\
    \                count = count + 1\n                \n", "    if string == \"\"\
    \ || substring == \"\"\n        return 0\n    \n    len_string = length(string)\n\
    \    len_substring = length(substring)\n    \n    if len_string == 0 || len_substring\
    \ == 0\n        return 0\n    \n    if len_string == len_substring\n        return\
    \ count_overlaping_cases(string, substring)\n    \n    if len_string > len_substring\n\
    \        return how_many_times(substring(string, 1, len_substring), substring)\n\
    \    \n    return how_many_times(substring(string, 0, len_string), substring)\n\
    end", "    if string == \"\" || substring == \"\"\n        return 0\n    else\
    \ if string[0] == substring[0]\n        return 1 + how_many_times(string[1:],\
    \ substring[1:])\n    else\n        return 1 + how_many_times(string[1:], substring)\n\
    end\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of times it appears in the string and in the reverse of the string.", "    count\
    \ = 0\n    for char in string:\n        if char == substring:\n            count\
    \ += 1\n    return count\n</code>\n<|/ a tags=string,julia |>\n<| c |>\nThanks\
    \ for your answer. Your code works, but it takes too much time for my case. My\
    \ string is about 10^6 characters and my substring is about 10^3 characters. I\
    \ guess it takes too much time for my case.\n<|/ c |>\n<| c |>\nI tested it on\
    \ 10^6 characters and 10^3 characters. I guess it takes too much time for my case.\n\
    <|/ c |>\n<| c |>\nI guess it takes too much time for my case. My string is about\
    \ 10^6 characters and my substring is about 10^3 characters. I guess it takes\
    \ too much time for my case.\n<|/ c |>\n<| c |>\nI tested it on 10^6 characters\
    \ and 10^3 characters. I guess it takes too much time for my case.\n<|/ c |>\n\
    <| c |>\nI guess it takes too much time for my case. My string is about 10^6 characters\
    \ and my substring is about 10^3 characters. I guess it takes too much time for\
    \ my case.\n<|/ c |>\n<| a tags=string,julia |>\nI guess it takes too much time\
    \ for my case.", "    if string == \"\" || substring == \"\"\n        return 0\n\
    \    else if substring.length() == 0\n        return 1\n    else if string.length()\
    \ == 0\n        return 0\n    else if substring.length() == 1\n        if string.substring(0,substring.length())\
    \ == substring\n            return 1\n        else\n            return 0\n   \
    \ else if substring.length() == string.length()\n        if string.substring(0,substring.length())\
    \ == substring\n            return 1\n        else\n            return 0\n   \
    \ else if substring.length() > string.length()\n        if string.substring(0,substring.length())\
    \ == substring\n            return how_many_times(string.substring(substring.length()),\
    \ substring)\n        else\n            return 0\n    else if substring.length()\
    \ < string.length()\n        if string.substring(0,substring.length()) == substring\n\
    \            return how_many_times(string.substring(substring.length()), substring)\n\
    \        else\n            return 0\n    else if substring.length() == string.length()\n\
    \        if string.substring(0,substring.length()) == substring\n            return\
    \ 1\n        else\n            return 0\n    else if substring.length() > string.length()\n\
    \        if string.substring(0,substring.length()) == substring\n            return\
    \ how_many_times(string.substring(substring.length()), substring)\n        else\n\
    \            return 0\n    else if substring.length() < string.length()\n    \
    \    if string.substring(0,substring.length()) == substring\n            return\
    \ how_many_times(string.substring(substring.length()), substring)\n        else\n\
    \            return 0\n    else if substring.length() == string.length()\n   \
    \     if string.substring(0,substring.length()) == substring\n            return\
    \ 1\n        else\n            return 0\n    else if substring.length() > string.length()\n\
    \        if string.substring(0,substring.length()) == substring\n            return\
    \ how_many_times(string.substring(substring.length()), substring)\n        else\n\
    \            return 0\n    else if substring.length() < string.length()\n    \
    \    if string.substring(0,substring.length()) == substring\n            return\
    \ how_many_times(string.substring(substring.length()), substring)\n        else\n\
    \            return 0\n    else if substring.length() == string.length()\n   \
    \     if string.substring(0,substring.length()) == substring\n            return\
    \ 1\n        else\n            return 0\n    else if substring.length() > string.length()\n\
    \        if string.substring(0,substring.length()) == substring\n            return\
    \ how_many_times(string.substring(substring.length()), substring)\n        else\n\
    \            return 0\n    else if substring.length() < string.length()\n    \
    \    if string.substring(0,substring.length()) == substring\n            return\
    \ how_many_times(string.substring(substring.length()), substring)\n        else\n\
    \            return 0\n    else if substring.length() == string.length()\n   \
    \     if string.substring(0,substring.length()) == substring\n            return\
    \ 1\n        else\n            return 0\n    else if substring.length() > string.length",
  "    if string == \"\" || substring == \"\"\n        return 0\n    \n    len_string\
    \ = length(string)\n    len_substring = length(substring)\n    \n    if len_string\
    \ == 0 || len_substring == 0\n        return 0\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    ", "    if string == \"\" || substring\
    \ == \"\"\n        return 0\n    \n    count = 0\n    \n    for c in string\n\
    \        if c == substring\n            count += 1\n        else\n           \
    \ count = 0\n    end\n    \n    return count\nend\n</cell>\n<code language=julia-1.5>",
  "    count = 0\n    pos = string.find(substring)\n    while pos != nothing\n   \
    \     count += 1\n        pos = string.find(substring, pos + 1)\n    end\n   \
    \ return count\nend", "    if string == \"\" || substring == \"\"\n        return\
    \ 0\n    else if string[0] == substring[0]\n        return 1 + how_many_times(string[1:],\
    \ substring[1:])\n    else\n        return 1 + how_many_times(string[1:], substring)\n\
    end\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string and returns the number\
    \ of times the string \"a\" appears in the string. \nWrite a function that takes\
    \ a string and returns the number of times the string \"a\" appears in the string.\
    \ \nWrite a function that takes a string and returns the number of times the string\
    \ \"a\" appears in the string. \nWrite a function that takes a string and returns\
    \ the number of times the string \"a\" appears in the string. \nWrite a function\
    \ that takes a string and returns the number of times the string \"a\" appears\
    \ in the string. \nWrite a function that takes a string and returns the number\
    \ of times the string \"a\" appears in the string. \nWrite a function that takes\
    \ a string and returns the number of times the string \"a\" appears in the string.\
    \ \nWrite a function that takes a string and returns the number of times the string\
    \ \"a\" appears in the string. \nWrite a function that takes a string and returns\
    \ the number of times the string \"a\" appears in the string. \nWrite a function\
    \ that takes a string and returns the number of times the string \"a\" appears\
    \ in the string. \nWrite a function that takes a string and returns the number\
    \ of times the string \"a\" appears in the string. \nWrite a function that takes\
    \ a string and returns the number of times the string \"a\" appears in the string.\
    \ \nWrite a function that takes a string and returns the number of times the string\
    \ \"a\" appears in the string. \nWrite a function that takes a string and returns\
    \ the number of times the string \"a\" appears in the string. \nWrite a function\
    \ that takes a string and returns the number of times the string \"a\" appears\
    \ in the string. \nWrite a function that takes a string and returns the number\
    \ of times the string \"a\" appears in the string. \nWrite a function that takes\
    \ a string and returns the number of times the string \"a\" appears in the string.\
    \ \nWrite a function that takes a string and returns the number of times the string\
    \ \"a\" appears in the string. \nWrite a function that takes a string and returns\
    \ the number of times the string \"a\" appears in the string. \nWrite a function\
    \ that takes a string and returns the number of times the string \"a\" appears\
    \ in the string. \nWrite a function that takes a string and returns the number\
    \ of times the string \"a\" appears in the string. \nWrite a function that takes\
    \ a string and returns the number of times the string \"a\" appears in the string.\
    \ \nWrite a function that takes a string and returns the number of times the string ",
  "    count = 0\n    for char in string\n        if char == substring\n         \
    \   count += 1\n        end\n    end\n    return count\nend\n</cell>\n<code language=julia-1.5>\n\
    how_many_times('aaaa', 'aa')\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a string and returns the number of times a substring appears in the string.\
    \ Count overlaping cases.\n>>> how_many_times('', 'a')\n0\n>>> how_many_times('aaa',\
    \ 'a')\n3\n>>> how_many_times('aaaa', 'aa')\n3\n>>> how_many_times('aaaa', 'aaa')\n\
    4\n>>> how_many_times('aaaa', 'aaaa')\n4\n>>> how_many_times('aaaa', 'aaaaa')\n\
    5\n>>> how_many_times('aaaa', 'aaaaaa')\n5\n>>> how_many_times('aaaa', 'aaaaaaa')\n\
    6\n>>> how_many_times('aaaa', 'aaaaaaab')\n6\n>>> how_many_times('aaaa', 'aaaaaaabb')\n\
    6\n>>> how_many_times('aaaa', 'aaaaaaabbb')\n6\n>>> how_many_times('aaaa', 'aaaaaaabbbb')\n\
    6\n>>> how_many_times('aaaa', 'aaaaaaabbbbb')\n6\n>>> how_many_times('aaaa', 'aaaaaaabbbbbb')\n\
    6\n>>> how_many_times('aaaa', 'aaaaaaabbbbbbb')\n6\n>>> how_many_times('aaaa',\
    \ 'aaaaaaabbbbbbbb')\n6\n>>> how_many_times('aaaa', 'aaaaaaabbbbbbbbb')\n6\n>>>\
    \ how_many_times('aaaa', 'aaaaaaabbbbbbbbbb')\n6\n>>> how_many_times('aaaa', 'aaaaaaabbbbbbbbbbb')\n\
    6\n>>> how_many_times('aaaa', 'aaaaaaabbbbbbbbbbbb')\n6\n>>> how_many_times('aaaa',\
    \ 'aaaaaaabbbbbbbbbbbbb')\n6\n>>> how_many_times('aaaa', 'aaaaaaabbbbbbbbbbbbbb')\n\
    6\n>>> how_many_times('aaaa', 'aaaaaaabbbbbbbbbbbbbbb')\n6\n>>> how_many_times('aaaa',\
    \ 'aaaaaaabbbbbbbbbbbbbbbb')\n6\n>>> how_many_times('aaaa', 'aaaaaaabbbbbbbbbbbbbbbbb')\n\
    6\n>>> how_many_times('aaaa', 'aaaaaaabbbbbbbbbbbbbbbbbb')", "    if string ==\
    \ \"\" || substring == \"\"\n        return 0\n    \n    count = 0\n    \n   \
    \ for char in string\n        if char == substring[0]\n            count = count\
    \ + 1\n            \n            if char == substring[1]\n                count\
    \ = count + 1\n                \n            if char == substring[2]\n       \
    \         count = count + 1\n                \n            if char == substring[3]\n\
    \                count = count + 1\n                \n            if char == substring[4]\n\
    \                count = count + 1\n                \n            if char == substring[5]\n\
    \                count = count + 1\n                \n            if char == substring[6]\n\
    \                count = count + 1\n                \n            if char == substring[7]\n\
    \                count = count + 1\n                \n            if char == substring[8]\n\
    \                count = count + 1\n                \n            if char == substring[9]\n\
    \                count = count + 1\n                \n            if char == substring[10]\n\
    \                count = count + 1\n                \n            if char == substring[11]\n\
    \                count = count + 1\n                \n            if char == substring[12]\n\
    \                count = count + 1\n                \n            if char == substring[13]\n\
    \                count = count + 1\n                \n            if char == substring[14]\n\
    \                count = count + 1\n                \n            if char == substring[15]\n\
    \                count = count + 1\n                \n            if char == substring[16]\n\
    \                count = count + 1\n                \n            if char == substring[17]\n\
    \                count = count + 1\n                \n            if char == substring[18]\n\
    \                count = count + 1\n                \n            if char == substring[19]\n\
    \                count = count + 1\n                \n            if char == substring[20]\n\
    \                count = count + 1\n                \n            if char == substring[21]\n\
    \                count = count + 1\n                \n            if char == substring[22]\n\
    \                count = count + 1\n                \n            if char == substring[23]\n\
    \                count = count + 1\n                \n            if char == substring[24]\n\
    \                count = count + 1\n                \n            if char == substring[25]\n\
    \                count = count + 1\n                \n            if char == substring[26]\n\
    \                count = count + 1\n                \n            if char == substring[27]\n\
    \                count = count + 1\n                \n            if char == substring[28]\n\
    \                count = count + 1\n                \n            if char == substring[29]\n\
    \                count = count + 1\n                \n            if char == substring[30]\n\
    \                count = count + 1\n                \n            if char == substring[31]\n\
    \                count = count + 1\n                \n            if char == substring[32]\n\
    \                count = count + 1\n                \n            if char == substring[33]\n\
    \                count = count + 1\n                \n", "    if string == \"\"\
    \ || substring == \"\"\n        return 0\n    \n    if string[0] == substring[0]\n\
    \        return 1 + how_many_times(string[1:], substring[1:])\n    \n    if string[0]\
    \ == substring[1]\n        return 1 + how_many_times(string[1:], substring[2:])\n\
    \    \n    if string[1] == substring[0]\n        return 1 + how_many_times(string[2:],\
    \ substring[1:])\n    \n    if string[1] == substring[1]\n        return 1 + how_many_times(string[2:],\
    \ substring[2:])\n    \n    return 0\nend\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of times the string \"aa\" appears\
    \ in the string. \n>>> how_many_times(\"aaaa\", \"aa\")\n3\n>>> how_many_times(\"\
    aaaa\", \"bb\")\n0\n>>> how_many_times(\"aaaa\", \"aaa\")\n0\n>>> how_many_times(\"\
    aaaa\", \"aaaa\")\n0\n>>> how_many_times(\"aaaa\", \"aaaaa\")\n0\n>>> how_many_times(\"\
    aaaa\", \"aaaaaa\")\n0\n>>> how_many_times(\"aaaa\", \"aaaaaaa\")\n0\n>>> how_many_times(\"\
    aaaa\", \"aaaaaaab\")\n0\n>>> how_many_times(\"aaaa\", \"aaaaaaabb\")\n0\n>>>\
    \ how_many_times(\"aaaa\", \"aaaaaaabbb\")\n0\n>>> how_many_times(\"aaaa\", \"\
    aaaaaaabbbb\")\n0\n>>> how_many_times(\"aaaa\", \"aaaaaaabbbbba\")\n0\n>>> how_many_times(\"\
    aaaa\", \"aaaaaaabbbbbaa\")\n0\n>>> how_many_times(\"aaaa\", \"aaaaaaabbbbbaaa\"\
    )\n0\n>>> how_many_times(\"aaaa\", \"aaaaaaabbbbbaaaa\")\n0\n>>> how_many_times(\"\
    aaaa\", \"aaaaaaabbbbbaaaaa\")\n0\n>>> how_many_times(\"aaaa\", \"aaaaaaabbbbbaaaaaa\"\
    )\n0\n>>> how_many_times(\"aaaa\", \"aaaaaaabbbbbaaaaaaa\")\n0\n>>> how_many_times(\"\
    aaaa\", \"aaaaaaabbbbbaaaaaaaa\")\n0\n>>> how_many_times(\"aaaa\", \"aaaaaaabbbbbaaaaaaaab\"\
    )\n0\n>>> how_many_", "    count = 0\n    for c in string:\n        if c == substring:\n\
    \            count += 1\n    return count\n</code>\n<|/ a tags=string,julia |>\n\
    <| c |>\nThis doesn't work for `how_many_times('aaaa', 'aa')` which should return\
    \ 2.\n<|/ c |>\n<| c |>\nI see what you mean. I've updated my answer to account\
    \ for that case.\n<|/ c |>\n<| a dscore=2 |>\nHere's a solution that uses no loops\
    \ and no mutable variables:\n<code>", "    if string == \"\" || substring == \"\
    \"\n        return 0\n    \n    count = 0\n    \n    for char in string\n    \
    \    if char == substring[0]\n            count = count + 1\n            \n  \
    \          if char == substring[1]\n                count = count + 1\n      \
    \          \n            if char == substring[2]\n                count = count\
    \ + 1\n                \n            if char == substring[3]\n               \
    \ count = count + 1\n                \n            if char == substring[4]\n \
    \               count = count + 1\n                \n            if char == substring[5]\n\
    \                count = count + 1\n                \n            if char == substring[6]\n\
    \                count = count + 1\n                \n            if char == substring[7]\n\
    \                count = count + 1\n                \n            if char == substring[8]\n\
    \                count = count + 1\n                \n            if char == substring[9]\n\
    \                count = count + 1\n                \n            if char == substring[10]\n\
    \                count = count + 1\n                \n            if char == substring[11]\n\
    \                count = count + 1\n                \n            if char == substring[12]\n\
    \                count = count + 1\n                \n            if char == substring[13]\n\
    \                count = count + 1\n                \n            if char == substring[14]\n\
    \                count = count + 1\n                \n            if char == substring[15]\n\
    \                count = count + 1\n                \n            if char == substring[16]\n\
    \                count = count + 1\n                \n            if char == substring[17]\n\
    \                count = count + 1\n                \n            if char == substring[18]\n\
    \                count = count + 1\n                \n            if char == substring[19]\n\
    \                count = count + 1\n                \n            if char == substring[20]\n\
    \                count = count + 1\n                \n            if char == substring[21]\n\
    \                count = count + 1\n                \n            if char == substring[22]\n\
    \                count = count + 1\n                \n            if char == substring[23]\n\
    \                count = count + 1\n                \n            if char == substring[24]\n\
    \                count = count + 1\n                \n            if char == substring[25]\n\
    \                count = count + 1\n                \n            if char == substring[26]\n\
    \                count = count + 1\n                \n            if char == substring[27]\n\
    \                count = count + 1\n                \n            if char == substring[28]\n\
    \                count = count + 1\n                \n            if char == substring[29]\n\
    \                count = count + 1\n                \n            if char == substring[30]\n\
    \                count = count + 1\n                \n            if char == substring[31]\n\
    \                count = count + 1\n                \n            if char == substring[32]\n\
    \                count = count + 1\n                \n            if char == substring[33]\n\
    \                count = count + 1\n                \n", "    if string == \"\"\
    \ || substring == \"\"\n        return 0\n    else if string[0] == substring[0]\n\
    \        return 1 + how_many_times(string[1:], substring[1:])\n    else\n    \
    \    return 1 + how_many_times(string[1:], substring)\nend\n</cell>\n<code language=julia-1.3>\n\
    how_many_times(\"aaa\", \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of times a substring appears within\
    \ the string. Count overlaping cases.", "    if string == \"\" || substring ==\
    \ \"\"\n        return 0\n    \n    count = 0\n    \n    for char in string\n\
    \        if char == substring\n            count += 1\n        else\n        \
    \    count = 0\n    end\n    return count\nend\n</cell>\n<code language=julia-1.3>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of times a substring appears in the\
    \ string. \nFor example, if the string is \"aaabbccc\" and substring is \"b\"\
    , the function should return 3.", "    if string == \"\" || substring == \"\"\n\
    \        return 0\n    \n    string::String = string.lower()\n    substring::String\
    \ = substring.lower()\n    \n    i = 0\n    \n    while i < length(string)\n \
    \       if string[i] == substring[0]\n            i += 1\n        else\n     \
    \       if string[i] == substring[1]\n                i += 1\n            else\n\
    \                if string[i] == substring[2]\n                    i += 1\n  \
    \              else\n                    if string[i] == substring[3]\n      \
    \                  i += 1\n                    else\n                        if\
    \ string[i] == substring[4]\n                            i += 1\n            \
    \            else\n                            if string[i] == substring[5]\n\
    \                                i += 1\n                            else\n  \
    \                              if string[i] == substring[6]\n                \
    \                    i += 1\n                                else\n          \
    \                          if string[i] == substring[7]\n                    \
    \                    i += 1\n                                    else\n      \
    \                                  if string[i] == substring[8]\n            \
    \                                i += 1\n                                    \
    \    else\n                                            if string[i] == substring[9]\n\
    \                                                i += 1\n                    \
    \                        else\n                                              \
    \  if string[i] == substring[10]\n                                           \
    \         i += 1\n                                                else\n     \
    \                                               if string[i] == substring[11]\n\
    \                                                        i += 1\n            \
    \                                        else\n                              \
    \                          if string[i] == substring[12]\n                   \
    \                                         i += 1\n                           \
    \                             else\n                                         \
    \                   if string[i] == substring[13]\n                          \
    \                                      i += 1\n                              \
    \                              else\n                                        \
    \                        if string[i] == substring[14]\n                     \
    \                                               i += 1\n                     \
    \                                           else\n                           \
    \                                         if string[i] == substring[15]\n    \
    \                                                                    i += 1\n\
    \                                                                    else\n  \
    \                                                                      i += 1\n\
    \    return i\nend\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"aaa\"\
    , \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that counts the number\
    \ of times a substring appears in a string. Count overlaping cases.\n>>> count_substring(\"\
    aaa\", \"a\")\n2\n>>> count_substring(\"aaa\", \"b\")\n0\n>>> count_substring(\"\
    aaa\", \"ab\")\n1\n>>> count_substring(\"aaa\", \"aba\")\n1\n>>> count_substring(\"\
    aaa\", \"abaa\")\n2\n>>> count_substring(\"aaa\", \"abaaa\")\n3\n>>> count_substring(\"\
    aaa\", \"abaaab\")\n4\n>>> count_substring(\"aaa\", \"abaaaba\")\n5\n>>> count_substring(\"\
    aaa\", \"abaaabaa\")\n6\n>>> count_substring(\"aaa\", \"abaaabaaa\")\n7\n>>> count_substring(\"\
    aaa\", \"abaaabaaab\")\n8\n>>> count_substring(\"aaa\", \"abaaabaaaba\")\n9\n\
    >>> count_substring(\"aaa\", \"abaaabaaabaa\")\n10\n>>> count_substring(\"aaa\"\
    , \"abaaabaaabaaa\")\n11\n>>> count_substring(\"aaa\", \"abaaabaaabaa", "    if\
    \ string == \"\" || substring == \"\"\n        return 0\n    \n    count = 0\n\
    \    \n    for char in string\n        if char == substring\n            count\
    \ += 1\n        else\n            count = 0\n    end\n    return count\nend\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aaab\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaaba\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"\
    aaabaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaabaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaabaaab\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaabaaaba\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaabaaabaa\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaabaaabaaa\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaabaaabaaab\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaabaaabaaaba\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaabaaabaaabaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaabaaabaaabaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaabaaabaaabaaab\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaabaaabaaabaaaba\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaabaaabaaabaaabaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaabaaabaaabaaabaaa\"\
    )", "    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ substring == string\n        return 1\n    else\n        return 1 + how_many_times(string[1:],\
    \ substring)\nend\n</cell>\n<code language=julia-1.0>\nhow_many_times(\"aaaa\"\
    , \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns a new string where all occurrences of \"a\" have been replaced with\
    \ \"b\".\n>>> replace_all(\"aaa\", \"a\", \"b\")\n\"bbb\"\n>>> replace_all(\"\
    aaaa\", \"a\", \"b\")\n\"bbbb\"\n>>> replace_all(\"aaaaa\", \"a\", \"b\")\n\"\
    bbbbb\"\n>>> replace_all(\"aaaaaa\", \"a\", \"b\")\n\"bbbbbb\"\n>>> replace_all(\"\
    aaaaaaa\", \"a\", \"b\")\n\"bbbbbbb\"\n>>> replace_all(\"aaaaaaab\", \"a\", \"\
    b\")\n\"bbbbbbbb\"\n>>> replace_all(\"aaaaaaabb\", \"a\", \"b\")\n\"bbbbbbbba\"\
    \n>>> replace_all(\"aaaaaaabbb\", \"a\", \"b\")\n\"bbbbbbbbaa\"\n>>> replace_all(\"\
    aaaaaaabbbb\", \"a\", \"b\")\n\"bbbbbbbbaaa\"\n>>> replace_all(\"aaaaaaabbbbba\"\
    , \"a\", \"b\")\n\"bbbbbbbbaaaa\"\n>>> replace_all(\"aaaaaaabbbbbaa\", \"a\",\
    \ \"b\")\n\"bbbbbbbbaaaab\"\n>>> replace_all(\"aaaaaaabbbbbaaa\", \"a\", \"b\"\
    )\n\"bbbbbbbbaaaabb\"\n>>> replace_all(\"aaaaaaabbbbbaaaa\", \"a\", \"b\")\n\"\
    bbbbbbbbaaaabbb\"\n>>> replace_all(\"aaaaaaabbbbbaaaab\", \"a\", \"b\")\n\"bbbbbbbbaaaabbbb\"\
    \n>>> replace_all(\"aaaaaaabbbbbaaaabb\", \"a\", \"b\")\n\"bbbbbbbbaaaabbbbba\"\
    \n>>> replace_all(\"aaaaaaabbbbbaaaabbb\", \"a\", \"b\")\n\"bbbbbbbbaaaabbbbbaa\"\
    \n>>> replace_all(\"aaaaaaabbbbbaaaabbbb\", \"a\", \"b\")\n\"bbbbbbbbaaaabbbbbaaa\"\
    \n>>> replace_all(\"aaaaaaabbbbbaaaabbbbba\", \"a\", \"b\")\n\"bbbbbbbbaaaabbbbbaaaab\"\
    \n>>> replace_all(\"aaaaaaabbbbbaaaabbbbbaa\", \"a\", \"b\")\n\"bbbbbbbbaaaabbbbbaaaabb\"\
    \n>>> replace_", "    if string == \"\" || substring == \"\"\n        return 0\n\
    \    else if string[0] == substring[0]\n        return 1 + how_many_times(string[1:],\
    \ substring[1:])\n    else\n        return how_many_times(string[1:], substring)\
    \ + how_many_times(string[1:], substring[1:])\nend\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of times each character appears in\
    \ the string. Ignore case when counting.", "    if string == \"\" || substring\
    \ == \"\"\n        return 0\n    else if string[0] == substring[0]\n        return\
    \ 1 + how_many_times(string[1:], substring[1:])\n    else\n        return how_many_times(string[1:],\
    \ substring) + how_many_times(string, substring[1:])\nend\n</cell>\n<code language=julia-1.3>\n\
    how_many_times(\"aaa\", \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and a substring and returns the number of times the substring\
    \ appears in the string.", "    if string == \"\" || substring == \"\"\n     \
    \   return 0\n    else if substring == string\n        return 1\n    else if string[1..]\
    \ == substring\n        return 1 + how_many_times(string[2..], substring)\n  \
    \  else\n        return how_many_times(string[2..], substring) + how_many_times(string[1..],\
    \ substring)\nend\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"aaaa\"\
    , \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ a substring and returns the number of times the substring appears in the string.",
  "    if string == \"\" || substring == \"\"\n        return 0\n    \n    len_string\
    \ = length(string)\n    len_substring = length(substring)\n    \n    if len_string\
    \ == 0 || len_substring == 0\n        return 0\n    \n    if len_string == len_substring\n\
    \        return 1\n    \n    if len_string > len_substring\n        return how_many_times(substring(string,\
    \ 1, len_substring), substring)\n    \n    return how_many_times(substring(string,\
    \ 0, len_substring), substring)\nend\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"aaaa\",\
    \ \"a\")\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"aaaa\", \"aaa\"\
    )\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"aaaa\", \"aaaa\")\n</cell>\n\
    <code language=julia-1.3>\nhow_many_times(\"aaaa\", \"aaaaa\")\n</cell>\n<code\
    \ language=julia-1.3>\nhow_many_times(\"aaaa\", \"aaaaaa\")\n</cell>\n<code language=julia-1.3>\n\
    how_many_times(\"aaaa\", \"aaaaaaa\")\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"\
    aaaa\", \"aaaaaaab\")\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"aaaa\"\
    , \"aaaaaaabb\")\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"aaaa\"\
    , \"aaaaaaabbb\")\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"aaaa\"\
    , \"aaaaaaabbbb\")\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"aaaa\"\
    , \"aaaaaaabbbbba\")\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"aaaa\"\
    , \"aaaaaaabbbbbaa\")\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"aaaa\"\
    , \"aaaaaaabbbbbaaa\")\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"\
    aaaa\", \"aaaaaaabbbbbaaaa\")\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"\
    aaaa\", \"aaaaaaabbbbbaaaaa\")\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"\
    aaaa\", \"aaaaaaabbbbbaaaaaa\")\n</cell>\n<code language=julia-1.3>", "    if\
    \ string == \"\" || substring == \"\"\n        return 0\n    \n    len_string\
    \ = length(string)\n    len_substring = length(substring)\n    \n    if len_string\
    \ == 0 || len_substring == 0\n        return 0\n    \n    if len_string == len_substring\n\
    \        return count_substring(string, substring)\n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    if string == \"\" || substring == \"\"\n        return 0\n    \n\
    \    count = 0\n    \n    for c in string\n        if c == substring\n       \
    \     count += 1\n        else\n            count = 0\n    end\n    \n    return\
    \ count\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"\
    aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and a\
    \ substring and returns the number of times the substring appears in the string.\
    \ Ignore case. \nHint: Use a for loop and a counter.", "    if string == \"\"\
    \ || substring == \"\"\n        return 0\n    else if string[0] == substring[0]\n\
    \        return 1 + how_many_times(string[1:], substring[1:])\n    else\n    \
    \    return how_many_times(string[1:], substring)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the longest common prefix of two strings. \n\
    The function should return the empty string if either of the strings is empty.",
  "    if string == \"\" || substring == \"\"\n        return 0\n    else if string[0]\
    \ == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string,\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\"\
    , \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and a substring\
    \ and returns the number of times the substring appears in the string. Case insensitive.",
  "    if string == \"\" || substring == \"\"\n        return 0\n    else if string[0]\
    \ == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring)\nend\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that takes a string and returns the number of times\
    \ each character appears in the string. \nFor example, for the string \"abcabc\"\
    , your function should return [('a', 3), ('b', 2), ('c', 3)]", "    if string\
    \ == \"\" || substring == \"\"\n        return 0\n    else if string[0] == substring[0]\n\
    \        return 1 + how_many_times(string[1:], substring[1:])\n    else\n    \
    \    return how_many_times(string[1:], substring) + how_many_times(string[1:],\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"aaa\"\
    , \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and\
    \ returns the number of times a substring appears in the string. Count overlaping\
    \ cases.\n>>> how_many_times('', 'a')\n0\n>>> how_many_times('aaa', 'a')\n3\n\
    >>> how_many_times('aaaa', 'aa')\n3\n>>> how_many_times('aaaa', 'ab')\n2\n>>>\
    \ how_many_times('aaaa', 'aba')\n2\n>>> how_many_times('aaaa', 'abaa')\n2\n>>>\
    \ how_many_times('aaaa', 'abaaa')\n2\n>>> how_many_times('aaaa', 'abaaab')\n2\n\
    >>> how_many_times('aaaa', 'abaaaba')\n2\n>>> how_many_times('aaaa', 'abaaabaa')\n\
    2\n>>> how_many_times('aaaa', 'abaaabaaa')\n2\n>>> how_many_times('aaaa', 'abaaabaaab')\n\
    2\n>>> how_many_times('aaaa', 'abaaabaaaba')\n2\n>>> how_many_times('aaaa', 'abaaabaaabaa')\n\
    2\n>>> how_many_times('aaaa', 'abaaabaaabaaa')\n2\n>>> how_many_times('aaaa',\
    \ 'abaaabaaabaaab')\n2\n>>> how_many_times('aaaa', 'abaaabaaabaaaba')\n2\n>>>\
    \ how_many_times('aaaa', 'abaaabaaabaaabaa')\n2\n>>> how_many_times('aaaa', 'abaaabaaabaaabaaa')\n\
    2\n>>> how_many_times('aaaa', 'abaaabaaabaaabaaab')\n2\n>>> how_many_times('aaaa',\
    \ 'abaaabaaabaaabaaaba')\n2\n>>> how_many_times('aaaa', 'abaaabaaabaaabaaabaa')\n\
    2\n>>> how_many_times('aaaa', 'abaaabaa", "    if string == \"\" || substring\
    \ == \"\"\n        return 0\n    \n    len_string = length(string)\n    len_substring\
    \ = length(substring)\n    \n    if len_string == 0 || len_substring == 0\n  \
    \      return 0\n    \n    i = 0\n    j = 0\n    \n    while i < len_string &&\
    \ j < len_substring\n        if string[i] == substring[j]\n            i += 1\n\
    \            j += 1\n        else\n            if string[i] > substring[j]\n \
    \               i += 1\n            else\n                j += 1\n        end\n\
    \    end\n    \n    if i == len_string\n        return j\n    else\n        return\
    \ j - i\nend\n</cell>\n<code language=julia-1.5>", "    if string == \"\" || substring\
    \ == \"\"\n        return 0 \n    else if string[0] == substring[0]\n        return\
    \ 1 + how_many_times(string[1:], substring[1:])\n    else if string[-1] == substring[-1]\n\
    \        return 1 + how_many_times(string[1..-1], substring[1..-1])\n    else\n\
    \        return how_many_times(string[1:], substring) + how_many_times(string[1..-1],\
    \ substring[1..-1])\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\",\
    \ \"aaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaa\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaa\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aaaaaaab\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aaaaaaabb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aaaaaaabbb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aaaaaaabbbb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aaaaaaabbbbb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aaaaaaabbbbba\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aaaaaaabbbbbaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aaaaaaabbbbbaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aaaaaaabbbbbaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aaaaaaabbbbbaaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aaaaaaabbbbbaaaaaa\")\n</cell>\n<code language=julia-", "    if string\
    \ == \"\" || substring == \"\"\n        return 0\n    \n    count = 0\n    \n\
    \    for i in string\n        if i == substring\n            count += 1\n    \
    \    else\n            count = 0\n    end\n    return count\nend\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and a substring and returns the number\
    \ of times the substring appears in the string. Case insensitive.", "    if string\
    \ == \"\" || substring == \"\"\n        return 0\n    else if substring == string\n\
    \        return 1\n    else\n        return 1 + how_many_times(string[1:end-1],\
    \ substring) + how_many_times(string[end+1:end-1], substring)\nend\n</cell>\n\
    <text>\nExercise 4\nWrite a function that takes a string and returns the number\
    \ of times a substring appears in the string. Count overlaping cases.\n>>> how_many_times('',\
    \ 'a')\n0\n>>> how_many_times('aaa', 'a')\n3\n>>> how_many_times('aaaa', 'aa')\n\
    3\n>>> how_many_times('aaaa', 'aaa')\n3\n>>> how_many_times('aaaa', 'aaaa')\n\
    3\n>>> how_many_times('aaaaa', 'aaaa')\n3\n>>> how_many_times('aaaaa', 'aaaaa')\n\
    3\n>>> how_many_times('aaaaa', 'aaaaaa')\n3\n>>> how_many_times('aaaaaa', 'aaaaa')\n\
    3\n>>> how_many_times('aaaaaa', 'aaaaaa')\n3\n>>> how_many_times('aaaaaa', 'aaaaaaa')\n\
    3\n>>> how_many_times('aaaaaaa', 'aaaaaa')\n3\n>>> how_many_times('aaaaaaa', 'aaaaaaa')\n\
    3\n>>> how_many_times('aaaaaaa', 'aaaaaaab')\n3\n>>> how_many_times('aaaaaaab',\
    \ 'aaaaaaa')\n3\n>>> how_many_times('aaaaaaab', 'aaaaaaab')\n3\n>>> how_many_times('aaaaaaab',\
    \ 'aaaaaaac')\n3\n>>> how_many_times('aaaaaaac', 'aaaaaaab')\n3\n>>> how_many_times('aaaaaaac',\
    \ 'aaaaaaac')\n3\n>>> how_many_times('aaaaaaac', 'aaaaaaaca')\n3\n>>> how_many_times('aaaaaaaca',\
    \ 'aaaaaaac')\n3\n>>> how_many_times('aaaaaaaca', 'aaaaaaaca')\n3\n>>> how_many_times('aaaaaaaca',\
    \ 'aaaaaaacab')\n3\n>>> how_many_times('aaaaaaacab', 'aaaaaaaca')\n3\n>>> how_many_times('aaaaaaacab',\
    \ 'aaaaaaacab')\n3\n>>> how_many_times('aaaaaaacab', 'aaaaaaacac", "    if string\
    \ == \"\" || substring == \"\"\n        return 0\n    \n    len_string = length(string)\n\
    \    len_substring = length(substring)\n    \n    if len_string == 0 || len_substring\
    \ == 0\n        return 0\n    \n    if len_string == len_substring\n        return\
    \ count_overlaping_cases(string, substring)\n    \n    if len_string > len_substring\n\
    \        return how_many_times(substring(string, 1, len_substring), substring)\n\
    \    \n    return how_many_times(substring(string, 1, len_string), substring)\n\
    end\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aaab\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaaba\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"\
    aaabaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaabaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaabaaab\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaabaaaba\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaabaaabaa\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaabaaabaaa\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaabaaabaaab\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaabaaabaaaba\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaabaaabaaabaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaabaaabaaabaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaabaaabaaabaaab\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa", "    if\
    \ string == \"\" || substring == \"\"\n        return 0\n    \n    string::String\
    \ = string.lower()\n    substring::String = substring.lower()\n    \n    count::Int64\
    \ = 0\n    \n    for c in string.lower()\n        if c == substring[0]\n     \
    \       count += 1\n            \n            if count > substring.length\n  \
    \              return substring.length\n            \n            substring =\
    \ substring[1:substring.length]\n        else\n            count = 0\n    end\n\
    \    \n    return count\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of times a substring appears in the string. Count overlaping\
    \ cases.\n>>> how_many_times('', 'a')\n0\n>>> how_many_times('aaa', 'a')\n3\n\
    >>> how_many_times('aaaa', 'aa')\n3\n>>> how_many_times('aaaa', 'ab')\n2\n>>>\
    \ how_many_times('aaaa', 'aba')\n2\n>>> how_many_times('aaaa', 'abaa')\n2\n>>>\
    \ how_many_times('aaaa', 'abaaa')\n2\n>>> how_many_times('aaaa', 'abaaaa')\n2\n\
    >>> how_many_times('aaaa', 'abaaaaa')\n2\n>>> how_many_times('aaaa', 'abaaaaaa')\n\
    2\n>>> how_many_times('aaaa', 'abaaaaaaa')\n2\n>>> how_many_times('aaaa', 'abaaaaaaab')\n\
    2\n>>> how_many_times('aaaa', 'abaaaaaaaba')\n2\n>>> how_many_times('aaaa', 'abaaaaaaabaa')\n\
    2\n>>> how_many_times('aaaa', 'abaaaaaaabaaa')\n2\n>>> how_many_times('aaaa',\
    \ 'abaaaaaaabaaaa')\n2\n>>> how_many_times('aaaa', 'abaaaaaaabaaaaa')\n2\n>>>\
    \ how_many_times('aaaa', 'abaaaaaaabaaaaaa')\n2\n>>> how_many_times('aaaa', 'abaaaaaaabaaaaaaa')\n\
    2\n>>> how_many_times('aaaa', 'abaaaaaaabaaaaaaab')\n2\n>>> how_many_times('aaaa',\
    \ 'abaaaaaaabaaaaaaaba')\n2\n>>> how_many_times('aaaa', 'abaaaaaaabaaaaaaabaa')\n\
    2\n>>> how_many_time", "    if string == \"\" || substring == \"\"\n        return\
    \ 0\n    else if string[0] == substring[0]\n        return 1 + how_many_times(string[1:],\
    \ substring[1:])\n    else\n        return how_many_times(string[1:], substring)\
    \ + how_many_times(string, substring[1:])\nend\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string\
    \ and returns the number of times a substring appears in the string. Case insensitive.",
  "    if string == \"\" || substring == \"\"\n        return 0\n    else if string[0]\
    \ == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring)\nend\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns a new string where\
    \ all characters have been converted to lowercase.", "    if string == \"\" ||\
    \ substring == \"\"\n        return 0\n    \n    count = 0\n    \n    for c in\
    \ string\n        if c == substring\n            count += 1\n        else\n  \
    \          count = 0\n    end\n    return count\nend\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string and returns the number of times each character appears in\
    \ the string. \n>>> count_characters(\"hello\")\n{'h': 2, 'e': 2, 'l': 2, 'o':\
    \ 1}\n>>> count_characters(\"hello\")\n{'h': 2, 'e': 2, 'l': 2, 'o': 1}\n>>> count_characters(\"\
    hello\")\n{'h': 2, 'e': 2, 'l': 2, 'o': 1}\n>>> count_characters(\"hello\")\n\
    {'h': 2, 'e': 2, 'l': 2, 'o': 1}\n>>> count_characters(\"hello\")\n{'h': 2, 'e':\
    \ 2, 'l': 2, 'o': 1}\n>>> count_characters(\"hello\")\n{'h': 2, 'e': 2, 'l': 2,\
    \ 'o': 1}\n>>> count_characters(\"hello\")\n{'h': 2, 'e': 2, 'l': 2, 'o': 1}\n\
    >>> count_characters(\"hello\")\n{'h': 2, 'e': 2, 'l': 2, 'o': 1}\n>>> count_characters(\"\
    hello\")\n{'h': 2, 'e': 2, 'l': 2, 'o': 1}\n>>> count_characters(\"hello\")\n\
    {'h': 2, 'e': 2, 'l': 2, 'o': 1}\n>>> count_characters(\"hello\")\n{'h': 2, 'e':\
    \ 2, 'l': 2, 'o': 1}\n>>> count_characters(\"hello\")\n{'h': 2, 'e': 2, 'l': 2,\
    \ 'o': 1}\n>>> count_characters(\"hello\")\n{'h': 2, 'e': 2, 'l': 2, 'o': 1}\n\
    >>> count_characters(\"hello\")\n{'h': 2, 'e': 2, 'l': 2, 'o': 1}\n>>> count_characters(\"\
    hello\")\n{'h': 2, 'e': 2, 'l': 2, 'o': 1}\n>>> count_characters(\"hello\")\n\
    {'h': 2, 'e': 2, 'l': 2, 'o': 1}\n>>> count_characters(\"hello\")\n{'h': 2, 'e':\
    \ 2, 'l': 2, 'o': 1}\n>>> count_characters(\"hello\")\n{'h': 2, 'e': 2, 'l': 2,\
    \ 'o': 1}\n>>> count_characters(\"hello\")\n{'h': 2, 'e': 2, 'l': 2, 'o': 1}\n\
    >>> count_characters(\"hello\")\n{'h': 2, 'e': 2, 'l': 2, 'o': 1}\n>>> count_character",
  "    if string == \"\" || substring == \"\"\n        return 0\n    \n    count =\
    \ 0\n    \n    for c in string\n        if c == substring\n            count +=\
    \ 1\n        else\n            count = 0\n    end\n    return count\nend\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of times\
    \ each character appears in the string. \nFor example the string \"abbccc\" would\
    \ return {\"a\":2, \"b\":2, \"c\":3}.\nHint: Use a dictionary to store the counts.\
    \ \nHint: Use a for loop to iterate over the characters in the string.", "   \
    \ if string == \"\" || substring == \"\"\n        return 0\n    \n    count =\
    \ 0\n    \n    for char in string\n        if char == substring[0]\n         \
    \   count = count + 1\n            \n            if char == substring[1]\n   \
    \             count = count + 1\n                \n            if char == substring[2]\n\
    \                count = count + 1\n                \n            if char == substring[3]\n\
    \                count = count + 1\n                \n            if char == substring[4]\n\
    \                count = count + 1\n                \n            if char == substring[5]\n\
    \                count = count + 1\n                \n            if char == substring[6]\n\
    \                count = count + 1\n                \n            if char == substring[7]\n\
    \                count = count + 1\n                \n            if char == substring[8]\n\
    \                count = count + 1\n                \n            if char == substring[9]\n\
    \                count = count + 1\n                \n            if char == substring[10]\n\
    \                count = count + 1\n                \n            if char == substring[11]\n\
    \                count = count + 1\n                \n            if char == substring[12]\n\
    \                count = count + 1\n                \n            if char == substring[13]\n\
    \                count = count + 1\n                \n            if char == substring[14]\n\
    \                count = count + 1\n                \n            if char == substring[15]\n\
    \                count = count + 1\n                \n            if char == substring[16]\n\
    \                count = count + 1\n                \n            if char == substring[17]\n\
    \                count = count + 1\n                \n            if char == substring[18]\n\
    \                count = count + 1\n                \n            if char == substring[19]\n\
    \                count = count + 1\n                \n            if char == substring[20]\n\
    \                count = count + 1\n                \n            if char == substring[21]\n\
    \                count = count + 1\n                \n            if char == substring[22]\n\
    \                count = count + 1\n                \n            if char == substring[23]\n\
    \                count = count + 1\n                \n            if char == substring[24]\n\
    \                count = count + 1\n                \n            if char == substring[25]\n\
    \                count = count + 1\n                \n            if char == substring[26]\n\
    \                count = count + 1\n                \n            if char == substring[27]\n\
    \                count = count + 1\n                \n            if char == substring[28]\n\
    \                count = count + 1\n                \n            if char == substring[29]\n\
    \                count = count + 1\n                \n            if char == substring[30]\n\
    \                count = count + 1\n                \n            if char == substring[31]\n\
    \                count = count + 1\n                \n            if char == substring[32]\n\
    \                count = count + 1\n                \n            if char == substring[33]\n\
    \                count = count + 1\n                \n", "    if string == \"\"\
    \ || substring == \"\"\n        return 0 \n    else if string[0] == substring[0]\n\
    \        return 1 + how_many_times(string[1:], substring[1:])\n    else\n    \
    \    return how_many_times(string[1:], substring)\nend\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaa\"\
    , \"aaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaa\", \"\
    aaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaa\", \"aaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaab\", \"aaa\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaabb\", \"aaa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaaaaabbb\", \"aaa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaaaaabbbb\", \"aaa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaaaaabbbbba\", \"aaa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaaaaabbbbbaa\", \"aaa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaaaaabbbbbaaa\", \"aaa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaaaaabbbbbaaaa\", \"aaa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaaaaabbbbbaaaaa\", \"aaa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaaaaabbbbbaaaaaa\", \"aaa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaaaaabbbbbaaaaaaa\", \"aaa\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaabbbbbaaaaaaaa\", \"\
    aaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaabbbbbaaaaaaaab\"\
    , \"aaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_time", "    if string\
    \ == \"\" || substring == \"\"\n        return 0 \n    else if string[0] == substring[0]\n\
    \        return 1 + how_many_times(string[1:], substring[1:])\n    else\n    \
    \    return how_many_times(string[1:], substring)\nend\n</cell>\n<code language=julia-1.1>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string and returns the number of times each character appears in\
    \ the string.", "    if string == \"\" || substring == \"\"\n        return 0\n\
    \    else if string[0] == substring[0]\n        return 1 + how_many_times(string[1:],\
    \ substring[1:])\n    else\n        return how_many_times(string[1:], substring)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"\
    aa\")\n</cell>\n<text>\nExercise\nWrite a function that takes a string and returns\
    \ the number of times each character appears in the string. \nFor example, the\
    \ string \"aba\" would return [('a', 2), ('b', 1), ('a', 1)].", "    if string\
    \ == \"\" || substring == \"\"\n        return 0\n    else if string[0] == substring[0]\n\
    \        return 1 + how_many_times(string[1:], substring[1:])\n    else\n    \
    \    return 1 + how_many_times(string[1:], substring)\nend\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaa\", \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string and returns the number of times each character appears in\
    \ the string. Case insensitive.", "    if string == \"\" || substring == \"\"\n\
    \        return 0\n    \n    count = 0\n    \n    for char in string\n       \
    \ if char == substring[0]\n            count += 1\n            \n            if\
    \ char == substring[1]\n                count += 1\n                \n       \
    \         if char == substring[2]\n                    count += 1\n          \
    \          \n                    if char == substring[3]\n                   \
    \     count += 1\n                        \n                        if char ==\
    \ substring[4]\n                            count += 1\n                     \
    \       \n                            if char == substring[5]\n              \
    \                  count += 1\n                                \n            \
    \                    if char == substring[6]\n                               \
    \     count += 1\n                                    \n                     \
    \               if char == substring[7]\n                                    \
    \    count += 1\n                                        \n                  \
    \                      if char == substring[8]\n                             \
    \               count += 1\n                                            \n   \
    \                                         if char == substring[9]\n          \
    \                                      count += 1\n                          \
    \                      \n                                                if char\
    \ == substring[10]\n                                                    count\
    \ += 1\n                                                    \n               \
    \                                     if char == substring[11]\n             \
    \                                           count += 1\n                     \
    \                                   \n                                       \
    \                 if char == substring[12]\n                                 \
    \                           count += 1\n                                     \
    \                       \n                                                   \
    \         if char == substring[13]\n                                         \
    \                       count += 1\n                                         \
    \                       \n                                                   \
    \             if char == substring[14]\n                                     \
    \                               count += 1\n                                 \
    \                                   \n                                       \
    \                             if char == substring[15]\n                     \
    \                                                   count += 1\n             \
    \                                                           \n               \
    \                                         if char == substring[16]\n         \
    \                                                   count += 1\n             \
    \                                               \n                           \
    \                                 if char == substring[17]\n                 \
    \                                               count += 1\n                 \
    \                                               \n                           \
    \                                     if char == substring[18]\n             \
    \                                                       count += 1\n         \
    \                                                           \n               \
    \                                                     if char == substring[19]\n\
    \                                                                        count\
    \ += 1\n                                                                     \
    \   \n                                                        if char == substring[20]\n\
    \                                                            count += 1\n    \
    \                                                        \n                  \
    \                                          if char == substring[21]\n        \
    \                                                        count += 1\n        \
    \                                                        \n                  \
    \                                              if char == substring[22]\n    \
    \                                                                count += 1\n\
    \                                                                    \n      \
    \                                                              if char == substring[23]\n\
    \                                                                        count\
    \ += 1\n                                                                     \
    \   \n                                                        if char == substring[24]\n\
    \                                                            count += 1\n    \
    \                                                        \n                  \
    \                                          if char == substring[25]\n        \
    \                                                        count += 1\n        \
    \                                                        \n                  \
    \                                              if char == substring[26]\n    \
    \                                                                count += 1\n\
    \                                                                    \n      \
    \                                                              if char == substring[27]\n\
    \                                                                        count\
    \ += 1\n                                                                     \
    \   \n                                                        if char == substring[28]\n\
    \                                                            count += 1\n    \
    \                                                        \n                  \
    \                                          if char == substring[29]\n        \
    \                                                        count += 1\n        \
    \                                                        \n                  \
    \                                              if char == substring[30]\n    \
    \                                                                count += 1\n\
    \                                                                    \n      \
    \                                                              if char == substring[31]\n\
    \                                                                        count\
    \ += 1\n                                                                     \
    \   \n                                                        if char == substring[32]\n\
    \                                                            count += 1\n    \
    \                                                        \n                  \
    \                                          if char == substring[33]\n        \
    \                                                        count += 1\n        \
    \                                                        \n                  \
    \                                              if char == substring[34]\n    \
    \                                                                count += 1\n\
    \                                                                    \n", "  \
    \  if string == \"\" || substring == \"\"\n        return 0\n    \n    count =\
    \ 0\n    \n    for c in string\n        if c == substring\n            count +=\
    \ 1\n        else\n            count = 0\n    end\n    return count\nend\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns a new string with all the\
    \ characters in lowercase and uppercase.", "    if string == \"\" || substring\
    \ == \"\"\n        return 0\n    \n    count = 0\n    \n    for char in string\n\
    \        if char == substring[0]\n            count = count + 1\n            \n\
    \            if char == substring[1]\n                count = count + 1\n    \
    \            \n            if char == substring[2]\n                count = count\
    \ + 1\n                \n            if char == substring[3]\n               \
    \ count = count + 1\n                \n            if char == substring[4]\n \
    \               count = count + 1\n                \n            if char == substring[5]\n\
    \                count = count + 1\n                \n            if char == substring[6]\n\
    \                count = count + 1\n                \n            if char == substring[7]\n\
    \                count = count + 1\n                \n            if char == substring[8]\n\
    \                count = count + 1\n                \n            if char == substring[9]\n\
    \                count = count + 1\n                \n            if char == substring[10]\n\
    \                count = count + 1\n                \n            if char == substring[11]\n\
    \                count = count + 1\n                \n            if char == substring[12]\n\
    \                count = count + 1\n                \n            if char == substring[13]\n\
    \                count = count + 1\n                \n            if char == substring[14]\n\
    \                count = count + 1\n                \n            if char == substring[15]\n\
    \                count = count + 1\n                \n            if char == substring[16]\n\
    \                count = count + 1\n                \n            if char == substring[17]\n\
    \                count = count + 1\n                \n            if char == substring[18]\n\
    \                count = count + 1\n                \n            if char == substring[19]\n\
    \                count = count + 1\n                \n            if char == substring[20]\n\
    \                count = count + 1\n                \n            if char == substring[21]\n\
    \                count = count + 1\n                \n            if char == substring[22]\n\
    \                count = count + 1\n                \n            if char == substring[23]\n\
    \                count = count + 1\n                \n            if char == substring[24]\n\
    \                count = count + 1\n                \n            if char == substring[25]\n\
    \                count = count + 1\n                \n            if char == substring[26]\n\
    \                count = count + 1\n                \n            if char == substring[27]\n\
    \                count = count + 1\n                \n            if char == substring[28]\n\
    \                count = count + 1\n                \n            if char == substring[29]\n\
    \                count = count + 1\n                \n            if char == substring[30]\n\
    \                count = count + 1\n                \n            if char == substring[31]\n\
    \                count = count + 1\n                \n            if char == substring[32]\n\
    \                count = count + 1\n                \n            if char == substring[33]\n\
    \                count = count + 1\n                \n", "    if string == \"\"\
    \ || substring == \"\"\n        return 0\n    else if string[0] == substring[0]\n\
    \        return 1 + how_many_times(string[1:], substring[1:])\n    else\n    \
    \    return 1 + how_many_times(string[1:], substring)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of times\
    \ each character appears in the string. \nFor example, \n>>> count_chars(\"abcabcbb\"\
    )\n{'a': 3, 'b': 3, 'c': 3, 'd': 2, 'e': 2, 'f': 1}\n>>> count_chars(\"The quick\
    \ brown fox jumps over the lazy dog\")\n{'T': 11, 'h': 8, 'e': 6, 'q': 5, 'r':\
    \ 5, 'n': 5, 'o': 4, 'g': 3, 'f': 3, 's': 3, 'y': 3, 'x': 3, 'u': 2, 'v': 2, 'j':\
    \ 2, 'k': 2, 'b': 2, 'm': 2, 'l': 2, 'i': 2, 'z': 1}\n>>> count_chars(\"The quick\
    \ brown fox jumps over the lazy dog\")\n{'T': 11, 'h': 8, 'e': 6, 'q': 5, 'r':\
    \ 5, 'n': 5, 'o': 4, 'g': 3, 'f': 3, 's': 3, 'y': 3, 'x': 3, 'u': 2, 'v': 2, 'j':\
    \ 2, 'k': 2, 'b': 2, 'm': 2, 'l': 2, 'i': 2, 'z': 1}\n>>> count_chars(\"The quick\
    \ brown fox jumps over the lazy dog\")\n{'T': 11, 'h': 8, 'e': 6, 'q': 5, 'r':\
    \ 5, 'n': 5, 'o': 4, 'g': 3, 'f': 3, 's': 3, 'y': 3, 'x': 3, 'u': 2, 'v': 2, 'j':\
    \ 2, 'k': 2, 'b': 2, 'm': 2, 'l': 2, 'i': 2, 'z': 1}\n>>> count_chars(\"The quick\
    \ brown fox jumps over the lazy dog\")\n{'T': 11, 'h': 8, 'e': 6, 'q': 5, 'r':\
    \ 5, 'n': 5, 'o': 4, 'g': 3, 'f': 3, 's': 3, 'y': 3, 'x': 3, 'u': 2, 'v': 2, 'j':\
    \ 2, 'k': 2, 'b': 2, 'm': 2, 'l': 2, 'i': 2, 'z': 1}\n>>> count_chars(\"The quick\
    \ brown fox jumps over the lazy dog\")\n{'T': 11, 'h': 8, 'e': 6, 'q': 5, 'r':\
    \ 5, 'n': 5, 'o': 4, 'g': 3, 'f': 3, 's': 3, 'y': 3, 'x': 3, 'u': 2, 'v': 2, 'j':\
    \ 2, '", "    if string == \"\" || substring == \"\"\n        return 0\n    \n\
    \    count = 0\n    \n    for char in string\n        if char == substring[0]\n\
    \            count = count + 1\n            \n            if char == substring[1]\n\
    \                count = count + 1\n                \n            if char == substring[2]\n\
    \                count = count + 1\n                \n            if char == substring[3]\n\
    \                count = count + 1\n                \n            if char == substring[4]\n\
    \                count = count + 1\n                \n            if char == substring[5]\n\
    \                count = count + 1\n                \n            if char == substring[6]\n\
    \                count = count + 1\n                \n            if char == substring[7]\n\
    \                count = count + 1\n                \n            if char == substring[8]\n\
    \                count = count + 1\n                \n            if char == substring[9]\n\
    \                count = count + 1\n                \n            if char == substring[10]\n\
    \                count = count + 1\n                \n            if char == substring[11]\n\
    \                count = count + 1\n                \n            if char == substring[12]\n\
    \                count = count + 1\n                \n            if char == substring[13]\n\
    \                count = count + 1\n                \n            if char == substring[14]\n\
    \                count = count + 1\n                \n            if char == substring[15]\n\
    \                count = count + 1\n                \n            if char == substring[16]\n\
    \                count = count + 1\n                \n            if char == substring[17]\n\
    \                count = count + 1\n                \n            if char == substring[18]\n\
    \                count = count + 1\n                \n            if char == substring[19]\n\
    \                count = count + 1\n                \n            if char == substring[20]\n\
    \                count = count + 1\n                \n            if char == substring[21]\n\
    \                count = count + 1\n                \n            if char == substring[22]\n\
    \                count = count + 1\n                \n            if char == substring[23]\n\
    \                count = count + 1\n                \n            if char == substring[24]\n\
    \                count = count + 1\n                \n            if char == substring[25]\n\
    \                count = count + 1\n                \n            if char == substring[26]\n\
    \                count = count + 1\n                \n            if char == substring[27]\n\
    \                count = count + 1\n                \n            if char == substring[28]\n\
    \                count = count + 1\n                \n            if char == substring[29]\n\
    \                count = count + 1\n                \n            if char == substring[30]\n\
    \                count = count + 1\n                \n            if char == substring[31]\n\
    \                count = count + 1\n                \n            if char == substring[32]\n\
    \                count = count + 1\n                \n            if char == substring[33]\n\
    \                count = count + 1\n                \n", "    count = 0\n    for\
    \ c in string:\n        if c == substring:\n            count += 1\n    return\
    \ count\n</code>\n<|/ a tags=string,julia |>\n<| a tags=string,julia |>\n<code>",
  "    if string == \"\" || substring == \"\"\n        return 0 \n    else if string[0]\
    \ == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else if string[0] == substring[1]\n        return 1 + how_many_times(string[1:],\
    \ substring[2:])\n    else\n        return how_many_times(string[1:], substring)\n\
    end\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaa\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"\
    aaaaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaab\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabb\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbb\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbb\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbb\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbba\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbaaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbaaaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbaaaaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbaaaaaaa\"\
    )\n</cell", "    if string == \"\" || substring == \"\"\n        return 0\n  \
    \  \n    count = 0\n    \n    for c in string\n        if c == substring[0]\n\
    \            count = count + 1\n            \n            if substring[1] == c\n\
    \                count = count + 1\n                \n            if substring[2]\
    \ == c\n                count = count + 1\n                \n            if substring[3]\
    \ == c\n                count = count + 1\n                \n            if substring[4]\
    \ == c\n                count = count + 1\n                \n            if substring[5]\
    \ == c\n                count = count + 1\n                \n            if substring[6]\
    \ == c\n                count = count + 1\n                \n            if substring[7]\
    \ == c\n                count = count + 1\n                \n            if substring[8]\
    \ == c\n                count = count + 1\n                \n            if substring[9]\
    \ == c\n                count = count + 1\n                \n            if substring[10]\
    \ == c\n                count = count + 1\n                \n            if substring[11]\
    \ == c\n                count = count + 1\n                \n            if substring[12]\
    \ == c\n                count = count + 1\n                \n            if substring[13]\
    \ == c\n                count = count + 1\n                \n            if substring[14]\
    \ == c\n                count = count + 1\n                \n            if substring[15]\
    \ == c\n                count = count + 1\n                \n            if substring[16]\
    \ == c\n                count = count + 1\n                \n            if substring[17]\
    \ == c\n                count = count + 1\n                \n            if substring[18]\
    \ == c\n                count = count + 1\n                \n            if substring[19]\
    \ == c\n                count = count + 1\n                \n            if substring[20]\
    \ == c\n                count = count + 1\n                \n            if substring[21]\
    \ == c\n                count = count + 1\n                \n            if substring[22]\
    \ == c\n                count = count + 1\n                \n            if substring[23]\
    \ == c\n                count = count + 1\n                \n            if substring[24]\
    \ == c\n                count = count + 1\n                \n            if substring[25]\
    \ == c\n                count = count + 1\n                \n            if substring[26]\
    \ == c\n                count = count + 1\n                \n            if substring[27]\
    \ == c\n                count = count + 1\n                \n            if substring[28]\
    \ == c\n                count = count + 1\n                \n            if substring[29]\
    \ == c\n                count = count + 1\n                \n            if substring[30]\
    \ == c\n                count = count + 1\n                \n            if substring[31]\
    \ == c\n                count = count + 1\n                \n            if substring[32]\
    \ == c\n                count = count + 1\n                \n            if substring[33]\
    \ == c\n                count = count + 1\n                \n            if substring[34]\
    \ == c\n                count = count + 1\n                \n            if substring[35]\
    \ == c\n                count = count + 1\n                ", "    count = 0\n\
    \    for c in string:\n        if c == substring:\n            count += 1\n  \
    \  return count\n</code>\n<|/ a tags=string,julia |>\n<| c |>\nThis doesn't answer\
    \ the question. The question asks how to count the number of times a substring\
    \ appears in a string. Your answer counts how many times a substring appears in\
    \ a string. That's not the same thing.\n<|/ c |>\n<| c |>\nI agree, my answer\
    \ doesn't answer the question. My answer counts how many times a substring appears\
    \ in a string. That's not the same thing.\n<|/ c |>\n<| c |>\nI agree, my answer\
    \ doesn't answer the question. My answer counts how many times a substring appears\
    \ in a string. That's not the same thing.\n<|/ c |>\n<| c |>\nI agree, my answer\
    \ doesn't answer the question. My answer counts how many times a substring appears\
    \ in a string. That's not the same thing.\n<|/ c |>\n<| c |>\nI agree, my answer\
    \ doesn't answer the question. My answer counts how many times a substring appears\
    \ in a string. That's not the same thing.\n<|/ c |>\n<| a dscore=4 |>\nThe simplest\
    \ way is to use count\n<code>\njulia> count(\"aaa\", \"a\")\n3\n</code>\n<|/ a\
    \ tags=string,julia |>\n<| c |>\nThis doesn't answer the question. The question\
    \ asks how to count the number of times a substring appears in a string. Your\
    \ answer counts how many times a substring appears in a string. That's not the\
    \ same thing.\n<|/ c |>\n<| a |>\nThe simplest way is to use count\n<code>\njulia>\
    \ count(\"aaa\", \"a\")\n3\n</code>\n<|/ a dscore=4 tags=string,julia |>\n<| c\
    \ |>\nThis doesn't answer the question. The question asks how to count the number\
    \ of times a substring appears in a string. Your answer counts how many times\
    \ a substring appears in a string. That's not the same thing.\n<|/ c |>\n<| a\
    \ tags=string,julia |>\nThe simplest way is to use count\n<code>\njulia> count(\"\
    aaa\", \"a\")\n3\n</code>\n<|/ a dscore=4 |>\n<| a tags=string,julia |>\n<code>\n\
    julia> count(\"aaa\", \"a\")\n3\n</code>\n<|/ a dscore=4 |>\n<| a tags=string,julia\
    \ |>\n<code>\njulia> count(\"aaa\", \"a\")\n3\n</code>\n<|/ a dscore=3 |>\n<|\
    \ a d", "    count = 0\n    for c in string:\n        if c == substring:\n   \
    \         count += 1\n    return count\n</code>\n<|/ a tags=string,julia |>\n\
    <| a dscore=1 |>\nI came up with a solution that is more efficient than using\
    \ count. \n<code>", "    if string == \"\" || substring == \"\"\n        return\
    \ 0\n    else if string[0] == substring[0]\n        return 1 + how_many_times(string[1:],\
    \ substring[1:])\n    else\n        return how_many_times(string[1:], substring)\
    \ + how_many_times(string[1:], substring[1:])\nend\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaa\", \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the number of times a given substring appears in a given string.",
  "    if string == \"\" || substring == \"\"\n        return 0\n    else if string[0]\
    \ == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring)\nend\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\nExercise: Write a function\
    \ that returns the number of times a substring appears in a string.", "    if\
    \ string == \"\" || substring == \"\"\n        return 0 \n    else if string[0]\
    \ == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring)\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string and a substring and returns\
    \ the number of times the substring appears in the string. Ignore case when searching.",
  "    count = 0\n    for c in string:\n        if c == substring[0]:\n          \
    \  count += 1\n            if substring[1:] == c:\n                count += 1\n\
    \        else:\n            count = 0\n            break\n    return count\n</cell>\n\
    <code language=julia-1.4>\nhow_many_times('', 'a')\n</cell>\n<code language=julia-1.4>\n\
    how_many_times('aaa', 'a')\n</cell>\n<code language=julia-1.4>\nhow_many_times('aaaa',\
    \ 'aa')\n</cell>\n<text>\nExercise: Write a function that takes a string and returns\
    \ the number of times a substring appears within it", "    if string == \"\" ||\
    \ substring == \"\"\n        return 0\n    \n    i = 0\n    \n    while i < length(substring)\n\
    \        if substring(i, 1) == string\n            i += 1\n        else\n    \
    \        i += 1\n        end\n    end\n    \n    return i\nend\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"a\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaa\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\",\
    \ \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaa\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\",\
    \ \"aaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aaa\")\n</cell>\n", "    if string == \"\" || substring == \"\"\n  \
    \      return 0\n    \n    string_length = len(string)\n    substring_index =\
    \ 0\n    \n    while substring_index < string_length\n        if string[substring_index]\
    \ == substring[substring_index]\n            substring_index += 1\n        else\n\
    \            if substring_index > 0\n                substring_index -= 1\n  \
    \          else\n                return substring_index\n        end\n    end\n\
    \    return substring_index\nend\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"\
    aaa\", \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and a substring and returns the number of times the substring appears in the\
    \ string. Count overlaping cases.\n>>> how_many_times('', 'a')\n0\n>>> how_many_times('aaa',\
    \ 'a')\n3\n>>> how_many_times('aaaa', 'aa')\n3\n>>> how_many_times('aaa', 'aa')\n\
    3\n>>> how_many_times('aaaa', 'aaa')\n3\n>>> how_many_times('aaaa', 'aaaa')\n\
    3\n>>> how_many_times('aaaa', 'aaaaa')\n3\n>>> how_many_times('aaaa', 'aaaaaa')\n\
    3\n>>> how_many_times('aaaa', 'aaaaaaa')\n3\n>>> how_many_times('aaaa', 'aaaaaaab')\n\
    3\n>>> how_many_times('aaaa', 'aaaaaaaba')\n3\n>>> how_many_times('aaaa', 'aaaaaaabaa')\n\
    3\n>>> how_many_times('aaaa', 'aaaaaaabaaa')\n3\n>>> how_many_times('aaaa', 'aaaaaaabaaaa')\n\
    3\n>>> how_many_times('aaaa', 'aaaaaaabaaaaa')\n3\n>>> how_many_times('aaaa',\
    \ 'aaaaaaabaaaaaa')\n3\n>>> how_many_times('aaaa', 'aaaaaaabaaaaaaa')\n3\n>>>\
    \ how_many_times('aaaa', 'aaaaaaabaaaaaaab')\n3\n>>> how_many_times('aaaa', 'aaaaaaabaaaaaaaba')\n\
    3\n>>> how_many_times('aaaa', 'aaaaaaabaaaaaaabaa')\n3\n>>> how_many_times('aaaa',\
    \ 'aaaaaaabaaaaaaabaaa')\n3\n>>> how_many_times('aaaa', 'aaaaaaabaaaaaaabaaaa')\n\
    3\n>>> how_many_times('aaaa', 'aaaaaaabaaaaaaabaaaaa')\n3\n", "    if string ==\
    \ \"\" || substring == \"\"\n        return 0\n    \n    count = 0\n    \n   \
    \ for c in string\n        if c == substring\n            count += 1\n       \
    \ end\n    end\n    \n    return count\nend\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaa\", \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string and returns the number of times the substring appears in\
    \ the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n\
    \    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa',\
    \ 'aa')\n    3\n    \"\"\"", "    if string == \"\" || substring == \"\"\n   \
    \     return 0 \n    \n    count = 0\n    \n    for c in string\n        if c\
    \ == substring\n            count += 1\n        else\n            count = 0\n\
    \    end\n    return count\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"\
    aa\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ the number of times each character appears in the string. \nFor example, \n\
    >>> count_characters(\"hello\")\n{'h':1, 'e':1, 'l':2, 'o':1}\n>>> count_characters(\"\
    hello\")\n{'h':1, 'e':1, 'l':2, 'o':1}\n>>> count_characters(\"hello\")\n{'h':1,\
    \ 'e':1, 'l':2, 'o':1}\n>>> count_characters(\"hello\")\n{'h':1, 'e':1, 'l':2,\
    \ 'o':1}\n>>> count_characters(\"hello\")\n{'h':1, 'e':1, 'l':2, 'o':1}\n>>> count_characters(\"\
    hello\")\n{'h':1, 'e':1, 'l':2, 'o':1}\n>>> count_characters(\"hello\")\n{'h':1,\
    \ 'e':1, 'l':2, 'o':1}\n>>> count_characters(\"hello\")\n{'h':1, 'e':1, 'l':2,\
    \ 'o':1}\n>>> count_characters(\"hello\")\n{'h':1, 'e':1, 'l':2, 'o':1}\n>>> count_characters(\"\
    hello\")\n{'h':1, 'e':1, 'l':2, 'o':1}\n>>> count_characters(\"hello\")\n{'h':1,\
    \ 'e':1, 'l':2, 'o':1}\n>>> count_characters(\"hello\")\n{'h':1, 'e':1, 'l':2,\
    \ 'o':1}\n>>> count_characters(\"hello\")\n{'h':1, 'e':1, 'l':2, 'o':1}\n>>> count_characters(\"\
    hello\")\n{'h':1, 'e':1, 'l':2, 'o':1}\n>>> count_characters(\"hello\")\n{'h':1,\
    \ 'e':1, 'l':2, 'o':1}\n>>> count_characters(\"hello\")\n{'h':1, 'e':1, 'l':2,\
    \ 'o':1}\n>>> count_characters(\"hello\")\n{'h':1, 'e':1, 'l':2, 'o':1}\n>>> count_characters(\"\
    hello\")\n{'h':1, 'e':1, 'l':2, 'o':1}\n>>> count_characters(\"hello\")\n{'h':1,\
    \ 'e':1, 'l':2, 'o':1}\n>>> ", "    if string == \"\" || substring == \"\"\n \
    \       return 0\n    \n    count = 0\n    \n    for char in string\n        if\
    \ char == substring\n            count += 1\n        else\n            count =\
    \ 0\n    end\n    \n    return count\nend\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"\
    aaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaa\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaa\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aaaaaaab\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aaaaaaabb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aaaaaaabbb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aaaaaaabbbb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aaaaaaabbbbb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aaaaaaabbbbba\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aaaaaaabbbbbaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aaaaaaabbbbbaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aaaaaaabbbbbaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aaaaaaabbbbbaaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aaaaaaabbbbbaaaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aaaaaaabbbbbaaaaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_", " \
    \   count = 0\n    for c in string:\n        if c == substring:\n            count\
    \ += 1\n    return count\n</code>\n<|/ a tags=string,julia |>\n<| a |>\n<code>",
  "    if string == \"\" || substring == \"\"\n        return 0 \n    \n    len_string\
    \ = length(string)\n    len_substring = length(substring)\n    \n    if len_string\
    \ == 0 || len_substring == 0\n        return 0 \n    \n    if len_string == len_substring\n\
    \        return 1 \n    \n    \n    if string[len_substring-1] == substring[0]\n\
    \        return 1 + how_many_times(string[1:len_substring], substring) \n    \n\
    \    if substring[len_substring-1] == string[0]\n        return 1 + how_many_times(string[1:len_substring],\
    \ substring) \n    \n    if string[len_substring-1] == substring[len_substring-1]\n\
    \        return 1 + how_many_times(string[1:len_substring], substring) \n    \n\
    \    if substring[len_substring-1] == string[len_substring-1]\n        return\
    \ 1 + how_many_times(string[1:len_substring], substring) \n    \n    if string[len_substring-1]\
    \ == substring[0]\n        return 1 + how_many_times(string[1:len_substring],\
    \ substring) \n    \n    if substring[len_substring-1] == string[0]\n        return\
    \ 1 + how_many_times(string[1:len_substring], substring) \n    \n    if string[len_substring-1]\
    \ == substring[len_substring-1]\n        return 1 + how_many_times(string[1:len_substring],\
    \ substring) \n    \n    if substring[len_substring-1] == string[len_substring-1]\n\
    \        return 1 + how_many_times(string[1:len_substring], substring) \n    \n\
    \    if string[len_substring-1] == substring[0]\n        return 1 + how_many_times(string[1:len_substring],\
    \ substring) \n    \n    if substring[len_substring-1] == string[0]\n        return\
    \ 1 + how_many_times(string[1:len_substring], substring) \n    \n    if string[len_substring-1]\
    \ == substring[len_substring-1]\n        return 1 + how_many_times(string[1:len_substring],\
    \ substring) \n    \n    if substring[len_substring-1] == string[len_substring-1]\n\
    \        return 1 + how_many_times(string[1:len_substring], substring) \n    \n\
    \    if string[len_substring-1] == substring[0]\n        return 1 + how_many_times(string[1:len_substring],\
    \ substring) \n    \n    if substring[len_substring-1] == string[0]\n        return\
    \ 1 + how_many_times(string[1:len_substring], substring) \n    \n    if string[len_substring-1]\
    \ == substring[len_substring-1]\n        return 1 + how_many_times(string[1:len_substring],\
    \ substring) \n    \n    if substring[len_substring-1] == string", "    if string\
    \ == \"\" || substring == \"\"\n        return 0\n    \n    count = 0\n    \n\
    \    for char in string\n        if char == substring\n            count += 1\n\
    \        else\n            count = 0\n    end\n    \n    return count\nend\n</cell>\n\
    <code language=julia-1.4>\nhow_many_times('', 'a')\n</cell>\n<code language=julia-1.4>\n\
    how_many_times('aaa', 'a')\n</cell>\n<code language=julia-1.4>\nhow_many_times('aaaa',\
    \ 'aa')\n</cell>\n<text>\nExercise: Write a function that counts the number of\
    \ times a given substring can be found in the original string. Count overlaping\
    \ cases.\nHint: Use a for loop and a counter variable.", "    if string == \"\"\
    \ || substring == \"\"\n        return 0\n    \n    count = 0\n    \n    for c\
    \ in string\n        if c == substring\n            count += 1\n        else\n\
    \            count = 0\n    end\n    \n    return count\nend\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of times each character appears in\
    \ the string.", "    if string == \"\" || substring == \"\"\n        return 0\n\
    \    \n    len_string = length(string)\n    len_substring = length(substring)\n\
    \    \n    if len_string == 0 || len_substring == 0\n        return 0\n    \n\
    \    i = 0\n    j = len_string\n    \n    while i < len_substring && j > 0\n \
    \       if string[i] == substring[j]\n            i += 1\n            j -= 1\n\
    \        else\n            if string[i] > substring[j]\n                j -= 1\n\
    \            else\n                i += 1\n    \n    return j\nend\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"ab\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"ba\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\",\
    \ \"aba\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"abaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"abaaa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"abaaab\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaa\", \"abaaaba\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"abaaabaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"abaaabaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"abaaabaaab\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"abaaabaaaba\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"abaaabaaabaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"abaaabaaabaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"abaaabaaabaaab\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"abaaabaaabaaaba\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"abaaabaaabaaabaa\")\n</", "    if string == \"\" || substring == \"\"\
    \n        return 0\n    else if substring == string\n        return 1\n    else\n\
    \        return 1 + how_many_times(string[1:end], substring) + how_many_times(string[end-1:end],\
    \ substring)\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ string and returns a new string where all occurrences of 'a' have been replaced\
    \ with 'A'.\n>>> replace_a('aaa')\n'Aaa'\n>>> replace_a('aaaa')\n'Aaaa'\n>>> replace_a('aaaaa')\n\
    'AaaaA'\n>>> replace_a('aaaaaa')\n'AaaaAaa'\n>>> replace_a('aaaaaaa')\n'AaaaAaaA'\n\
    >>> replace_a('aaaaaaab')\n'AaaaAaaAb'\n>>> replace_a('aaaaaaabb')\n'AaaaAaaAbb'\n\
    >>> replace_a('aaaaaaabbb')\n'AaaaAaaAbbb'\n>>> replace_a('aaaaaaabbbb')\n'AaaaAaaAbbbb'\n\
    >>> replace_a('aaaaaaabbbbba')\n'AaaaAaaAbbbbba'\n>>> replace_a('aaaaaaabbbbbaa')\n\
    'AaaaAaaAbbbbbaA'\n>>> replace_a('aaaaaaabbbbbaaa')\n'AaaaAaaAbbbbbaAaa'\n>>>\
    \ replace_a('aaaaaaabbbbbaaaa')\n'AaaaAaaAbbbbbaAaaa'\n>>> replace_a('aaaaaaabbbbbaaaaa')\n\
    'AaaaAaaAbbbbbaAaaaa'\n>>> replace_a('aaaaaaabbbbbaaaaaa')\n'AaaaAaaAbbbbbaAaaaaa'\n\
    >>> replace_a('aaaaaaabbbbbaaaaaaa')\n'AaaaAaaAbbbbbaAaaaaaa'\n>>> replace_a('aaaaaaabbbbbaaaaaaaa')\n\
    'AaaaAaaAbbbbbaAaaaaaaa'\n>>> replace_a('aaaaaaabbbbbaaaaaaaab')\n'AaaaAaaAbbbbbaAaaaaaaAb'\n\
    >>> replace_a('aaaaaaabbbbbaaaaaaaabb')\n'AaaaAaaAbbbbbaAaaaaaaAbb'\n", "    if\
    \ string == \"\" || substring == \"\"\n        return 0\n    \n    count = 0\n\
    \    \n    for c in string\n        if c == substring\n            count += 1\n\
    \        else\n            count = 0\n    end\n    return count\nend\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and a substring and returns the\
    \ number of times the substring appears in the string. Count overlaping cases.\n\
    >>> how_many_times('', 'a')\n0\n>>> how_many_times('aaa', 'a')\n3\n>>> how_many_times('aaaa',\
    \ 'aa')\n3\n>>> how_many_times('aaaa', 'aaa')\n3\n>>> how_many_times('aaaaa',\
    \ 'aa')\n3\n>>> how_many_times('aaaaa', 'aaa')\n3\n>>> how_many_times('aaaaaa',\
    \ 'aa')\n3\n>>> how_many_times('aaaaaa', 'aaa')\n3\n>>> how_many_times('aaaaaaa',\
    \ 'aa')\n3\n>>> how_many_times('aaaaaaa', 'aaa')\n3\n>>> how_many_times('aaaaaaa',\
    \ 'aaaa')\n3\n>>> how_many_times('aaaaaaa', 'aaaaa')\n3\n>>> how_many_times('aaaaaaa',\
    \ 'aaaaaa')\n3\n>>> how_many_times('aaaaaaa', 'aaaaaaa')\n3\n>>> how_many_times('aaaaaaa',\
    \ 'aaaaaaa')\n3\n>>> how_many_times('aaaaaaa', 'aaaaaaa')\n3\n>>> how_many_times('aaaaaaa',\
    \ 'aaaaaaa')\n3\n>>> how_many_times('aaaaaaa', 'aaaaaaa')\n3\n>>> how_many_times('aaaaaaa',\
    \ 'aaaaaaa')\n3\n>>> how_many_times('aaaaaaa', 'aaaaaaa')\n3\n>>> how_many_times('aaaaaaa',\
    \ 'aaaaaaa')\n3\n>>> how_many_times('aaaaaaa', 'aaaaaaa')\n3\n>>> how_many_times('aaaaaaa',\
    \ 'aaaaaaa')\n3\n>>> how_many_times('aaaaaaa', 'aaaaaaa')\n3\n>>> how_many_times('aaaaaaa',\
    \ 'aaaaaaa')\n3\n>>> how_many_times('aaaaaaa', 'aaaaaaa')\n3\n>>> how_many_times('aaaaaaa',\
    \ 'aaaaaaa')\n3\n>>> how_man", "    if string == \"\" || substring == \"\"\n \
    \       return 0\n    else if string[0] == substring[0]\n        return 1 + how_many_times(string[1:],\
    \ substring[1:])\n    else\n        return how_many_times(string[1:], substring)\
    \ + how_many_times(string, substring[1:])\nend\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string and a substring and returns the number of times the substring\
    \ appears in the string. \nFor example, how_many_times(\"aaaa\", \"aa\") should\
    \ return 3.", "    if string == \"\" || substring == \"\"\n        return 0 \n\
    \    else if string[0] == substring[0]\n        return 1 + how_many_times(string[1:],\
    \ substring[1:])\n    else\n        return how_many_times(string[1:], substring)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"\
    aa\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ the number of times the string \"a\" appears anywhere in the string. Case insensitive.",
  "    if string == \"\" || substring == \"\"\n        return 0\n    \n    count =\
    \ 0\n    \n    for i in string.chars\n        if i == substring[0]\n         \
    \   count += 1\n            \n            for i in substring\n               \
    \ if i == string.chars[count]\n                    count += 1\n              \
    \  else\n                    count = 0\n        end\n    end\n    \n    return\
    \ count\nend\n</cell>\n<code language=julia-1.5>", "    if string == \"\" || substring\
    \ == \"\"\n        return 0\n    \n    count = 0\n    \n    for char in string\n\
    \        if char == substring\n            count += 1\n        end\n    end\n\
    \    \n    return count\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of times each character appears in the string.", "  \
    \  if string == \"\" || substring == \"\"\n        return 0\n    \n    len_string\
    \ = length(string)\n    len_substring = length(substring)\n    \n    if len_string\
    \ == 0 || len_substring == 0\n        return 0\n    \n    i = 0\n    j = 0\n \
    \   \n    while i < len_string && j < len_substring\n        if string[i] == substring[j]\n\
    \            i += 1\n            j += 1\n        else\n            if string[i]\
    \ > substring[j]\n                i += 1\n            else\n                j\
    \ += 1\n        end\n    end\n    \n    if i == len_string\n        return j\n\
    \    else\n        return i - j\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if string == \"\" || substring == \"\"\n        return 0 \n    else if substring[0]\
    \ == string[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string,\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\"\
    , \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns the number of times the substring appears in the string. Count overlaping\
    \ cases.", "    count = 0\n    i = 0\n    while i < length(string)\n        if\
    \ substring(i, length(string)) in string\n            count += 1\n        i +=\
    \ 1\n    return count\nend\n</cell>\n<code language=julia-1.3>\nhow_many_times('',\
    \ 'a')\n</cell>\n<code language=julia-1.3>\nhow_many_times('aaa', 'a')\n</cell>\n\
    <code language=julia-1.3>\nhow_many_times('aaaa', 'aa')\n</cell>\n<text>\nExercise:\
    \ Write a function that counts how many times a given substring can be found in\
    \ the original string. Count overlaping cases.", "    if string == \"\" || substring\
    \ == \"\"\n        return 0\n    \n    count = 0\n    \n    for char in string\n\
    \        if char == substring\n            count += 1\n        else\n        \
    \    count = 0\n    end\n    \n    return count\nend\n</cell>\n<code language=julia-1.4>\n\
    how_many_times('', 'a')\n</cell>\n<code language=julia-1.4>\nhow_many_times('aaa',\
    \ 'a')\n</cell>\n<code language=julia-1.4>\nhow_many_times('aaaa', 'aa')\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string and returns the number\
    \ of times a substring appears in the string. Count overlaping cases.", "    if\
    \ string == \"\" || substring == \"\"\n        return 0\n    \n    len_string\
    \ = length(string)\n    len_substring = length(substring)\n    \n    if len_string\
    \ == 0 || len_substring == 0\n        return 0\n    \n    count = 0\n    \n  \
    \  for index in 0..len_substring-1\n        if string[index] == substring[index]\n\
    \            count += 1\n        else\n            count = 0\n        end\n  \
    \  end\n    \n    return count\nend\n</cell>\n<code language=julia-1.5>", "  \
    \  if string == \"\" || substring == \"\"\n        return 0\n    else if string[0]\
    \ == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string,\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"aaaa\"\
    , \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of times a substring appears in a string. \nFor example, how_many_times(\"aaaa\"\
    , \"aa\") should return 3.", "    if string == \"\" || substring == \"\"\n   \
    \     return 0\n    else if string[0] == substring[0]\n        return 1 + how_many_times(string[1:],\
    \ substring[1:])\n    else\n        return how_many_times(string[1:], substring)\n\
    end\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaa\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"\
    aaaaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaab\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabb\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbb\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbb\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbb\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbba\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbaaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbaaaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbaaaaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbaaaaaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbaaaaaaa",
  "    count = 0\n    i = 0\n    while i < length(string)\n        if substring(i,\
    \ length(string)) in string\n            count += 1\n        i += 1\n    end\n\
    \    return count\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\",\
    \ \"aaa\")\n</cell>\n<text>\nExercise: Write a function that returns the number\
    \ of times a given substring can be found in the original string. Count overlaping\
    \ cases.\nHint: Use how_many_times(string, substring).", "    if string == \"\"\
    \ || substring == \"\"\n        return 0\n    \n    count = 0\n    \n    for char\
    \ in string\n        if char == substring\n            count += 1\n        else\n\
    \            count = 0\n    end\n    \n    return count\nend\n</cell>\n<code language=julia-1.5>\n\
    how_many_times('', 'a')\n</cell>\n<code language=julia-1.5>\nhow_many_times('aaa',\
    \ 'a')\n</cell>\n<code language=julia-1.5>\nhow_many_times('aaaa', 'aa')\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of times the substring appears in the string. Case insensitive.\n>>> count_substring('',\
    \ 'a')\n0\n>>> count_substring('aaa', 'a')\n3\n>>> count_substring('aaaa', 'aa')\n\
    3\n>>> count_substring('aaaa', 'aaa')\n3\n>>> count_substring('aaaa', 'aaaa')\n\
    3\n>>> count_substring('aaaa', 'aaaaa')\n3\n>>> count_substring('aaaa', 'aaaaaa')\n\
    3\n>>> count_substring('aaaa', 'aaaaaaa')\n3\n>>> count_substring('aaaa', 'aaaaaaab')\n\
    3\n>>> count_substring('aaaa', 'aaaaaaaba')\n3\n>>> count_substring('aaaa', 'aaaaaaabaa')\n\
    3\n>>> count_substring('aaaa', 'aaaaaaabaaa')\n3\n>>> count_substring('aaaa',\
    \ 'aaaaaaabaaaa')\n3\n>>> count_substring('aaaa', 'aaaaaaabaaaaa')\n3\n>>> count_substring('aaaa',\
    \ 'aaaaaaabaaaaaa')\n3\n>>> count_substring('aaaa', 'aaaaaaabaaaaaaa')\n3\n>>>\
    \ count_substring('aaaa', 'aaaaaaabaaaaaaab')\n3\n>>> count_substring('aaaa',\
    \ 'aaaaaaabaaaaaaaba')\n3\n>>> count_substring('aaaa', 'aaaaaaabaaaaaaabaa')\n\
    3\n>>> count_substring('aaaa', 'aaaaaaabaaaaaaabaaa')\n3\n>>> count_substring('aaaa',\
    \ 'aaaaaaabaaaaaaabaaaa')\n3\n>>> count_substring('aaaa', 'aaaaaaabaaaaaaabaaaaa')\n\
    3\n>>> count_substring('aaaa', 'aaaaaaabaaaaaaabaaaaaa')\n3\n>>> count_substring('aaaa',\
    \ 'aaaaaaabaaaaaaabaaaaaaa')\n3\n>>> count_substring('aaaa', 'aaaaaaabaaaaaaabaaaaaaab')\n\
    3\n>>> count_substring('aaaa', 'aaaaaaabaaaaaaabaaaaaaaba')\n3\n>>> count_substring",
  "    if string == \"\" || substring == \"\"\n        return 0\n    \n    count =\
    \ 0\n    \n    for char in string\n        if char == substring\n            count\
    \ += 1\n        else\n            count = 0\n    end\n    return count\nend",
  "    if string == \"\" || substring == \"\"\n        return 0 \n    else if string[0]\
    \ == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring)\nend\n</cell>\n\
    <code language=julia-1.3>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n<code language=julia-1.3>\n\
    how_many_times(\"aaaa\", \"aaa\")\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"\
    aaaa\", \"aaab\")\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"aaaa\"\
    , \"aaaba\")\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"aaaa\", \"\
    aaabaa\")\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"aaaa\", \"aaabaaa\"\
    )\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"aaaa\", \"aaabaaab\")\n\
    </cell>\n<code language=julia-1.3>\nhow_many_times(\"aaaa\", \"aaabaaaba\")\n\
    </cell>\n<code language=julia-1.3>\nhow_many_times(\"aaaa\", \"aaabaaabaa\")\n\
    </cell>\n<code language=julia-1.3>\nhow_many_times(\"aaaa\", \"aaabaaabaaa\")\n\
    </cell>\n<code language=julia-1.3>\nhow_many_times(\"aaaa\", \"aaabaaabaaab\"\
    )\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"aaaa\", \"aaabaaabaaaba\"\
    )\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"aaaa\", \"aaabaaabaaabaa\"\
    )\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"aaaa\", \"aaabaaabaaabaaa\"\
    )\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"aaaa\", \"aaabaaabaaabaaab\"\
    )\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"aaaa\", \"aaabaaabaaabaaaba\"\
    )\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"aaaa\", \"aaabaaabaaabaaabaa\"\
    )\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"aaaa\", \"aaabaaabaaabaaabaaa\"\
    )\n</cell>\n<code language=julia-1.3>\n", "    if string == \"\" || substring\
    \ == \"\"\n        return 0\n    \n    len_string = length(string)\n    len_substring\
    \ = length(substring)\n    \n    i = 0\n    j = 0\n    \n    while i < len_string\
    \ && j < len_substring\n        if string[i] == substring[j]\n            i +=\
    \ 1\n            j += 1\n        else\n            if string[i] > substring[j]\n\
    \                i += 1\n            else\n                j += 1\n        end\n\
    \    end\n    \n    return j - i\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"\
    aa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaa\", \"aa\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaa\", \"aaa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaaa\", \"aaaa\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaaa\", \"aaaaa\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaaa\", \"aaaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaaa\", \"aaaaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaa\"\
    , \"aaaaaaab\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaa\"\
    , \"aaaaaaabb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaa\"\
    , \"aaaaaaabbb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaa\"\
    , \"aaaaaaabbbb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaa\"\
    , \"aaaaaaabbbbb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaa\"\
    , \"aaaaaaabbbbba\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaa\"\
    , \"aaaaaaabbbbbaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaa\"\
    , \"aaaaaaabbbbbaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaaa\", \"aaaaaaabbbbbaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaaa\", \"aaaaaaabbbbba", "    if string == \"\" || substring == \"\"\n     \
    \   return 0\n    \n    if string[0] == substring[0]\n        return 1 + how_many_times(string[1:],\
    \ substring[1:])\n    \n    if string[-1] == substring[-1]\n        return 1 +\
    \ how_many_times(string[1..-1], substring[1..-1])\n    \n    return how_many_times(string[1..-1],\
    \ substring[1..-1]) + how_many_times(string[1:], substring[1:])\nend", "    if\
    \ string == \"\" || substring == \"\"\n        return 0\n    else if string[0]\
    \ == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring)\nend\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"ab\", \"ab\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"ab\", \"ba\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    ab\", \"aba\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"ab\", \"\
    abb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"ab\", \"abbb\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"ab\", \"abbbb\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"ab\", \"abbbba\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"ab\", \"abbbbba\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"ab\", \"abbbbbac\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    ab\", \"abbbbbacab\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"ab\"\
    , \"abbbbbacabc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"ab\"\
    , \"abbbbbacabcba\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"ab\"\
    , \"abbbbbacabcbac\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"ab\"\
    , \"abbbbbacabcbacab\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    ab\", \"abbbbbacabcbacabc\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    ab\", \"abbbbbacabcbacabcba\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    ab\", \"abbbbbacabcbacabcbac\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    ab\", \"abbbbbacabcbacabcbacab\")\n</cell>\n<code language=julia-1.5>\nho", " \
    \   if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for c in string\n        if c == substring\n            count\
    \ += 1\n        else\n            count = 0\n    end\n    return count\nend\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and a substring and returns the\
    \ number of times the substring appears in the string. Count overlaping cases.",
  "    if string == \"\" || substring == \"\"\n        return 0\n    \n    count =\
    \ 0\n    \n    for c in string\n        if c == substring\n            count +=\
    \ 1\n        else\n            count = 0\n    end\n    return count\nend\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of times\
    \ each character appears in the string.", "    if string == \"\" || substring\
    \ == \"\"\n        return 0\n    \n    count = 0\n    \n    for char in string\n\
    \        if char == substring[0]\n            count = count + 1\n            \n\
    \            if char == substring[1]\n                count = count + 1\n    \
    \            \n            if char == substring[2]\n                count = count\
    \ + 1\n                \n            if char == substring[3]\n               \
    \ count = count + 1\n                \n            if char == substring[4]\n \
    \               count = count + 1\n                \n            if char == substring[5]\n\
    \                count = count + 1\n                \n            if char == substring[6]\n\
    \                count = count + 1\n                \n            if char == substring[7]\n\
    \                count = count + 1\n                \n            if char == substring[8]\n\
    \                count = count + 1\n                \n            if char == substring[9]\n\
    \                count = count + 1\n                \n            if char == substring[10]\n\
    \                count = count + 1\n                \n            if char == substring[11]\n\
    \                count = count + 1\n                \n            if char == substring[12]\n\
    \                count = count + 1\n                \n            if char == substring[13]\n\
    \                count = count + 1\n                \n            if char == substring[14]\n\
    \                count = count + 1\n                \n            if char == substring[15]\n\
    \                count = count + 1\n                \n            if char == substring[16]\n\
    \                count = count + 1\n                \n            if char == substring[17]\n\
    \                count = count + 1\n                \n            if char == substring[18]\n\
    \                count = count + 1\n                \n            if char == substring[19]\n\
    \                count = count + 1\n                \n            if char == substring[20]\n\
    \                count = count + 1\n                \n            if char == substring[21]\n\
    \                count = count + 1\n                \n            if char == substring[22]\n\
    \                count = count + 1\n                \n            if char == substring[23]\n\
    \                count = count + 1\n                \n            if char == substring[24]\n\
    \                count = count + 1\n                \n            if char == substring[25]\n\
    \                count = count + 1\n                \n            if char == substring[26]\n\
    \                count = count + 1\n                \n            if char == substring[27]\n\
    \                count = count + 1\n                \n            if char == substring[28]\n\
    \                count = count + 1\n                \n            if char == substring[29]\n\
    \                count = count + 1\n                \n            if char == substring[30]\n\
    \                count = count + 1\n                \n            if char == substring[31]\n\
    \                count = count + 1\n                \n            if char == substring[32]\n\
    \                count = count + 1\n                \n            if char == substring[33]\n\
    \                count = count + 1\n                \n", "    if string == \"\"\
    \ || substring == \"\"\n        return 0\n    \n    string::String = string.lower()\n\
    \    substring::String = substring.lower()\n    \n    i = 0\n    \n    while i\
    \ < length(substring)\n        if string[i + length(substring)] == substring[i]\n\
    \            i += 1\n        else\n            i += 1\n        end\n    end\n\
    \    \n    return i\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaa\", \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of times a substring appears within that string. \nFor\
    \ example, \"hello world\" would return 2 because \"hello\" appears twice and\
    \ \"world\" appears once.", "    if string == \"\" || substring == \"\"\n    \
    \    return 0\n    else if string[0] == substring[0]\n        return 1 + how_many_times(string[1:],\
    \ substring[1:])\n    else\n        return how_many_times(string[1:], substring)\
    \ + how_many_times(string, substring[1:])\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a string and returns the number of times a substring\
    \ appears within that string.", "    if string == \"\" || substring == \"\"\n\
    \        return 0\n    \n    i = 0\n    \n    while i < length(string)\n     \
    \   if substring(i, 1) == string(i, 1)\n            i += 1\n        else\n   \
    \         i += 1\n    end\n    \n    return i\nend\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaa\", \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the number of times a substring appears in a string. Count overlaping\
    \ cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa',\
    \ 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"", "   \
    \ if string == \"\" || substring == \"\"\n        return 0\n    \n    count =\
    \ 0\n    \n    for char in string\n        if char == substring[0]\n         \
    \   count = count + 1\n            \n            if char == substring[1]\n   \
    \             count = count + 1\n                \n            if char == substring[2]\n\
    \                count = count + 1\n                \n            if char == substring[3]\n\
    \                count = count + 1\n                \n            if char == substring[4]\n\
    \                count = count + 1\n                \n            if char == substring[5]\n\
    \                count = count + 1\n                \n            if char == substring[6]\n\
    \                count = count + 1\n                \n            if char == substring[7]\n\
    \                count = count + 1\n                \n            if char == substring[8]\n\
    \                count = count + 1\n                \n            if char == substring[9]\n\
    \                count = count + 1\n                \n            if char == substring[10]\n\
    \                count = count + 1\n                \n            if char == substring[11]\n\
    \                count = count + 1\n                \n            if char == substring[12]\n\
    \                count = count + 1\n                \n            if char == substring[13]\n\
    \                count = count + 1\n                \n            if char == substring[14]\n\
    \                count = count + 1\n                \n            if char == substring[15]\n\
    \                count = count + 1\n                \n            if char == substring[16]\n\
    \                count = count + 1\n                \n            if char == substring[17]\n\
    \                count = count + 1\n                \n            if char == substring[18]\n\
    \                count = count + 1\n                \n            if char == substring[19]\n\
    \                count = count + 1\n                \n            if char == substring[20]\n\
    \                count = count + 1\n                \n            if char == substring[21]\n\
    \                count = count + 1\n                \n            if char == substring[22]\n\
    \                count = count + 1\n                \n            if char == substring[23]\n\
    \                count = count + 1\n                \n            if char == substring[24]\n\
    \                count = count + 1\n                \n            if char == substring[25]\n\
    \                count = count + 1\n                \n            if char == substring[26]\n\
    \                count = count + 1\n                \n            if char == substring[27]\n\
    \                count = count + 1\n                \n            if char == substring[28]\n\
    \                count = count + 1\n                \n            if char == substring[29]\n\
    \                count = count + 1\n                \n            if char == substring[30]\n\
    \                count = count + 1\n                \n            if char == substring[31]\n\
    \                count = count + 1\n                \n            if char == substring[32]\n\
    \                count = count + 1\n                \n            if char == substring[33]\n\
    \                count = count + 1\n                \n", "    if string == \"\"\
    \ || substring == \"\"\n        return 0\n    else if string[0] == substring[0]\n\
    \        return 1 + how_many_times(string[1:], substring[1:])\n    else\n    \
    \    return how_many_times(string[1:], substring)\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of times a substring\
    \ appears in the string. Case insensitive.\n>>> how_many_times('', 'a')\n0\n>>>\
    \ how_many_times('aaa', 'a')\n3\n>>> how_many_times('aaaa', 'aa')\n3\n>>> how_many_times('aaaa',\
    \ 'aaa')\n4\n>>> how_many_times('aaaa', 'aaaa')\n4\n>>> how_many_times('aaaa',\
    \ 'aaaaa')\n5\n>>> how_many_times('aaaa', 'aaaaaa')\n5\n>>> how_many_times('aaaa',\
    \ 'aaaaaaa')\n6\n>>> how_many_times('aaaa', 'aaaaaaab')\n6\n>>> how_many_times('aaaa',\
    \ 'aaaaaaaba')\n7\n>>> how_many_times('aaaa', 'aaaaaaabaa')\n7\n>>> how_many_times('aaaa',\
    \ 'aaaaaaabaaa')\n8\n>>> how_many_times('aaaa', 'aaaaaaabaaaa')\n8\n>>> how_many_times('aaaa',\
    \ 'aaaaaaabaaaaa')\n9\n>>> how_many_times('aaaa', 'aaaaaaabaaaaaa')\n9\n>>> how_many_times('aaaa',\
    \ 'aaaaaaabaaaaaaa')\n10\n>>> how_many_times('aaaa', 'aaaaaaabaaaaaaab')\n10\n\
    >>> how_many_times('aaaa', 'aaaaaaabaaaaaaaba')\n11\n>>> how_many_times('aaaa',\
    \ 'aaaaaaabaaaaaaabaa')\n11\n>>> how_many_times('aaaa', 'aaaaaaabaaaaaaabaaa')\n\
    12\n>>> how_many_times('aaaa', 'aaaaaaabaaaaaaabaaaa')\n12\n>>> how_many_times('aaaa',\
    \ 'aaaaaaabaaaaaaabaaaaa')\n13\n>>> how_many_times('aaaa', 'aaaaaaabaaaaaaabaaaaaa')\n\
    13\n>>> how_many_times('aaaa', 'aaaaaaabaaaaaaabaaaaaaa')\n14\n>>> how_many_times('aaaa',\
    \ 'aaaaaaabaaaaaaabaaaaaaab')\n14\n>>> ", "    count = 0\n    for c in string:\n\
    \        if c == substring:\n            count += 1\n    return count\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=string,julia |>\n<code>", "    if string == \"\"\
    \ || substring == \"\"\n        return 0\n    \n    i = 0\n    \n    while i <\
    \ length(string)\n        if substring(i, length(string)) == string\n        \
    \    i += 1\n        else\n            i += 1\n    end\n    \n    return i\nend\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string and returns the number\
    \ of times the substring \"aa\" appears in the string. Case insensitive.", " \
    \   if string == \"\" || substring == \"\"\n        return 0\n    \n    len_string\
    \ = length(string)\n    len_substring = length(substring)\n    \n    if len_string\
    \ == 0 || len_substring == 0\n        return 0\n    \n    if len_string == len_substring\n\
    \        return len_string\n    \n    len_substring = len_substring - 1\n    \n\
    \    if substring(len_string, len_substring) == substring\n        return len_string\n\
    \    \n    len_string = len_string - 1\n    \n    if substring(len_string, len_substring)\
    \ == substring\n        return len_string\n    \n    len_string = len_string -\
    \ 1\n    \n    if substring(len_string, len_substring) == substring\n        return\
    \ len_string\n    \n    len_string = len_string - 1\n    \n    if substring(len_string,\
    \ len_substring) == substring\n        return len_string\n    \n    len_string\
    \ = len_string - 1\n    \n    if substring(len_string, len_substring) == substring\n\
    \        return len_string\n    \n    len_string = len_string - 1\n    \n    if\
    \ substring(len_string, len_substring) == substring\n        return len_string\n\
    \    \n    len_string = len_string - 1\n    \n    if substring(len_string, len_substring)\
    \ == substring\n        return len_string\n    \n    len_string = len_string -\
    \ 1\n    \n    if substring(len_string, len_substring) == substring\n        return\
    \ len_string\n    \n    len_string = len_string - 1\n    \n    if substring(len_string,\
    \ len_substring) == substring\n        return len_string\n    \n    len_string\
    \ = len_string - 1\n    \n    if substring(len_string, len_substring) == substring\n\
    \        return len_string\n    \n    len_string = len_string - 1\n    \n    if\
    \ substring(len_string, len_substring) == substring\n        return len_string\n\
    \    \n    len_string = len_string - 1\n    \n    if substring(len_string, len_substring)\
    \ == substring\n        return len_string\n    \n    len_string = len_string -\
    \ 1\n    \n    if substring(len_string, len_substring) == substring\n        return\
    \ len_string\n    \n    len_string = len_string - 1\n    \n    if substring(len_string,\
    \ len_substring) == substring\n        return len_string\n    \n    len_string\
    \ = len_string - 1\n    \n    if substring(len_string, len_substring) == substring\n\
    \        return len_string\n    \n    len_string = len_string - 1\n    \n    if\
    \ substring(len_string, len_substring) == substring\n        return len_string\n\
    \    \n    len_string = len_string - 1\n    \n    if substring(len_string, len_substring)\
    \ == substring\n        return len_string\n    \n    len_string = len_string -\
    \ 1\n    ", "    count = 0\n    for c in string:\n        if c == substring:\n\
    \            count += 1\n    return count\n</code>\n<|/ a tags=string,julia |>\n\
    <| a |>\nThe function below will count the number of occurrences of substring\
    \ in string and return the count as a tuple:\n<code>", "    if string == \"\"\
    \ || substring == \"\"\n        return 0\n    else if string[0] == substring[0]\n\
    \        return 1 + how_many_times(string[1:], substring[1:])\n    else\n    \
    \    return how_many_times(string[1:], substring)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and a substring and returns the number\
    \ of times the substring appears in the string. \nFor example, how_many_times(\"\
    aaaa\", \"aa\") should return 3.", "    if string == \"\" || substring == \"\"\
    \n        return 0\n    else if string[0] == substring[0]\n        return 1 +\
    \ how_many_times(string[1:], substring[1:])\n    else\n        return how_many_times(string[1:],\
    \ substring) + how_many_times(string, substring[1:])\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and returns the number of times each\
    \ character appears in the string.", "    if string == \"\" || substring == \"\
    \"\n        return 0\n    \n    len_string = length(string)\n    len_substring\
    \ = length(substring)\n    \n    i = 0\n    j = 0\n    \n    while i < len_string\
    \ && j < len_substring\n        if string[i] == substring[j]\n            i +=\
    \ 1\n            j += 1\n        else\n            if string[i] > substring[j]\n\
    \                i += 1\n            else\n                j += 1\n        end\n\
    \    end\n    \n    return j - i\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaa\", \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and a substring and returns the number of times the substring appears in the\
    \ string. Case sensitivity is not important. \nWrite a function that takes a string\
    \ and a substring and returns the number of times the substring appears in the\
    \ string. Case sensitivity is important. \nWrite a function that takes a string\
    \ and a substring and returns the number of times the substring appears in the\
    \ string. Case sensitivity is important. \nWrite a function that takes a string\
    \ and a substring and returns the number of times the substring appears in the\
    \ string. Case sensitivity is important. \nWrite a function that takes a string\
    \ and a substring and returns the number of times the substring appears in the\
    \ string. Case sensitivity is important. \nWrite a function that takes a string\
    \ and a substring and returns the number of times the substring appears in the\
    \ string. Case sensitivity is important. \nWrite a function that takes a string\
    \ and a substring and returns the number of times the substring appears in the\
    \ string. Case sensitivity is important. \nWrite a function that takes a string\
    \ and a substring and returns the number of times the substring appears in the\
    \ string. Case sensitivity is important. \nWrite a function that takes a string\
    \ and a substring and returns the number of times the substring appears in the\
    \ string. Case sensitivity is important. \nWrite a function that takes a string\
    \ and a substring and returns the number of times the substring appears in the\
    \ string. Case sensitivity is important. \nWrite a function that takes a string\
    \ and a substring and returns the number of times the substring appears in the\
    \ string. Case sensitivity is important. \nWrite a function that takes a string\
    \ and a substring and returns the number of times the substring appears in the\
    \ string. Case sensitivity is important. \nWrite a function that takes a string\
    \ and a substring and returns the number of times the substring appears in the\
    \ string. Case sensitivity is important. \nWrite a function that takes a string\
    \ and a substring and returns the number of times the substring appears in the\
    \ string. Case sensitivity is important. \nWrite a function that takes a string\
    \ and a substring and returns the number of times the substring appears in the\
    \ string. Case sensitivity is important", "    if string == \"\" || substring\
    \ == \"\"\n        return 0\n    \n    i = 0\n    \n    while i < length(string)\n\
    \        if substring(i, 1) == string[i]\n            i += 1\n        else\n \
    \           i += 1\n        end\n    end\n    \n    return i\nend\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the first index of a given substring in a given\
    \ string. Return 0 if the substring is not found.", "    if string == \"\" ||\
    \ substring == \"\"\n        return 0\n    \n    len_string = length(string)\n\
    \    len_substring = length(substring)\n    \n    if len_string == 0 || len_substring\
    \ == 0\n        return 0\n    \n    if len_string == len_substring\n        return\
    \ count_overlaping_cases(string, substring)\n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if\
    \ string == \"\" || substring == \"\"\n        return 0\n    \n    string::String\
    \ = string.lower()\n    substring::String = substring.lower()\n    \n    i = 0\n\
    \    \n    while i < length(string)\n        if string[i] == substring[0]\n  \
    \          i += 1\n        elseif string[i] == substring[1]\n            i +=\
    \ 1\n        elseif string[i] == substring[2]\n            i += 1\n        elseif\
    \ string[i] == substring[3]\n            i += 1\n        elseif string[i] == substring[4]\n\
    \            i += 1\n        elseif string[i] == substring[5]\n            i +=\
    \ 1\n        elseif string[i] == substring[6]\n            i += 1\n        elseif\
    \ string[i] == substring[7]\n            i += 1\n        elseif string[i] == substring[8]\n\
    \            i += 1\n        elseif string[i] == substring[9]\n            i +=\
    \ 1\n        elseif string[i] == substring[10]\n            i += 1\n        elseif\
    \ string[i] == substring[11]\n            i += 1\n        elseif string[i] ==\
    \ substring[12]\n            i += 1\n        elseif string[i] == substring[13]\n\
    \            i += 1\n        elseif string[i] == substring[14]\n            i\
    \ += 1\n        elseif string[i] == substring[15]\n            i += 1\n      \
    \  elseif string[i] == substring[16]\n            i += 1\n        elseif string[i]\
    \ == substring[17]\n            i += 1\n        elseif string[i] == substring[18]\n\
    \            i += 1\n        elseif string[i] == substring[19]\n            i\
    \ += 1\n        elseif string[i] == substring[20]\n            i += 1\n      \
    \  elseif string[i] == substring[21]\n            i += 1\n        elseif string[i]\
    \ == substring[22]\n            i += 1\n        elseif string[i] == substring[23]\n\
    \            i += 1\n        elseif string[i] == substring[24]\n            i\
    \ += 1\n        elseif string[i] == substring[25]\n            i += 1\n      \
    \  elseif string[i] == substring[26]\n            i += 1\n        elseif string[i]\
    \ == substring[27]\n            i += 1\n        elseif string[i] == substring[28]\n\
    \            i += 1\n        elseif string[i] == substring[29]\n            i\
    \ += 1\n        elseif string[i] == substring[30]\n            i += 1\n      \
    \  elseif string[i] == substring[31]\n            i += 1\n        elseif string[i]\
    \ == substring[32]\n            i += 1\n        elseif string[i] == substring[33]\n\
    \            i += 1\n        elseif string[i] == substring[34]\n            i\
    \ += 1\n        elseif string[i] == substring[35]\n            i += 1\n      \
    \  elseif string[i] == substring[36]\n            i += 1\n        elseif string[i]\
    \ == substring[37]\n            i += 1\n        elseif string[i] == substring[38]\n\
    \            i += 1\n        elseif string[i] == substring[39]\n            i\
    \ += 1\n        elseif string[i] == substring[40]\n            i += 1\n      \
    \  else", "    if string == \"\" || substring == \"\"\n        return 0\n    \n\
    \    count = 0\n    \n    for c in string\n        if c == substring\n       \
    \     count += 1\n        else\n            count = 0\n    end\n    \n    return\
    \ count\nend\n</cell>\n<code language=julia-1.5>", "    count = 0\n    for c in\
    \ string:\n        if c == substring:\n            count += 1\n    return count\n\
    end\n</cell>\n<code language=julia-1.4>\nhow_many_times('aaaa', 'aa')\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of times the string \"aaa\" appears in the string. \nWrite a function that takes\
    \ a string and returns the number of times the string \"aa\" appears in the string.\
    \ \nWrite a function that takes a string and returns the number of times the string\
    \ \"a\" appears in the string. \nWrite a function that takes a string and returns\
    \ the number of times the string \"aa\" appears in the string. \nWrite a function\
    \ that takes a string and returns the number of times the string \"a\" appears\
    \ in the string. \nWrite a function that takes a string and returns the number\
    \ of times the string \"aaa\" appears in the string. \nWrite a function that takes\
    \ a string and returns the number of times the string \"aaaa\" appears in the\
    \ string. \nWrite a function that takes a string and returns the number of times\
    \ the string \"aaaaa\" appears in the string. \nWrite a function that takes a\
    \ string and returns the number of times the string \"aaaaaa\" appears in the\
    \ string. \nWrite a function that takes a string and returns the number of times\
    \ the string \"aaaaaaa\" appears in the string. \nWrite a function that takes\
    \ a string and returns the number of times the string \"aaaaaaa\" appears in the\
    \ string. \nWrite a function that takes a string and returns the number of times\
    \ the string \"aaaaaaa\" appears in the string. \nWrite a function that takes\
    \ a string and returns the number of times the string \"aaaaaaa\" appears in the\
    \ string. \nWrite a function that takes a string and returns the number of times\
    \ the string \"aaaaaaa\" appears in the string. \nWrite a function that takes\
    \ a string and returns the number of times the string \"aaaaaaa\" appears in the\
    \ string. \nWrite a function that takes a string and returns the number of times\
    \ the string \"aaaaaaa\" appears in the string. \nWrite a function that takes\
    \ a string and returns the number of times the string \"aaaaaaa\" appears in the\
    \ string. \nWrite a function that takes a string and returns the number of times\
    \ the string \"aaaaaaa\" appears in the string. \nWrite a function that takes\
    \ a string and returns the number of times the string \"aaaaaaa\" appears in the\
    \ string. \nWrite a function that takes a string and returns the number of times\
    \ the string \"aaaaaaa\" appears in the string. \nWrite a function that takes\
    \ a string and returns the number of times the string \"aaaaaaa\" appears in the\
    \ string. \nWrite a function that takes a string and returns the number of times\
    \ the string \"aaaaaaa\" appears in the string. \nWrite a function that takes\
    \ a string and returns the number of times the string \"aaaa", "    if string\
    \ == \"\" || substring == \"\"\n        return 0\n    \n    count = 0\n    \n\
    \    for char in string\n        if char == substring[0]\n            count =\
    \ count + 1\n        else\n            count = 0\n    end\n    \n    return count\n\
    end\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaa\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\",\
    \ \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\",\
    \ \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\",\
    \ \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<code language=julia-1.5>\nhow_", "    if string ==\
    \ \"\" || substring == \"\"\n        return 0\n    \n    i = 0\n    \n    while\
    \ i < length(string)\n        if substring(i, 1) == string[i]\n            i +=\
    \ 1\n        else\n            i += 1\n    end\n    \n    return i\nend\n</cell>\n\
    <code language=julia-1.5>", "    if string == \"\" || substring == \"\"\n    \
    \    return 0\n    \n    i = 0\n    \n    while i < length(string)\n        if\
    \ substring(i, string) == string\n            i += 1\n        else\n         \
    \   i = 0\n        end\n    end\n    \n    return i\nend\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of times a substring appears in the\
    \ string. Count overlaping cases.", "    if string == \"\" || substring == \"\"\
    \n        return 0\n    \n    count = 0\n    \n    for char in string\n      \
    \  if char == substring[0]\n            count += 1\n            \n           \
    \ if char == substring[1]\n                count += 1\n                \n    \
    \        if char == substring[2]\n                count += 1\n               \
    \ \n            if char == substring[3]\n                count += 1\n        \
    \        \n            if char == substring[4]\n                count += 1\n \
    \               \n            if char == substring[5]\n                count +=\
    \ 1\n                \n            if char == substring[6]\n                count\
    \ += 1\n                \n            if char == substring[7]\n              \
    \  count += 1\n                \n            if char == substring[8]\n       \
    \         count += 1\n                \n            if char == substring[9]\n\
    \                count += 1\n                \n            if char == substring[10]\n\
    \                count += 1\n                \n            if char == substring[11]\n\
    \                count += 1\n                \n            if char == substring[12]\n\
    \                count += 1\n                \n            if char == substring[13]\n\
    \                count += 1\n                \n            if char == substring[14]\n\
    \                count += 1\n                \n            if char == substring[15]\n\
    \                count += 1\n                \n            if char == substring[16]\n\
    \                count += 1\n                \n            if char == substring[17]\n\
    \                count += 1\n                \n            if char == substring[18]\n\
    \                count += 1\n                \n            if char == substring[19]\n\
    \                count += 1\n                \n            if char == substring[20]\n\
    \                count += 1\n                \n            if char == substring[21]\n\
    \                count += 1\n                \n            if char == substring[22]\n\
    \                count += 1\n                \n            if char == substring[23]\n\
    \                count += 1\n                \n            if char == substring[24]\n\
    \                count += 1\n                \n            if char == substring[25]\n\
    \                count += 1\n                \n            if char == substring[26]\n\
    \                count += 1\n                \n            if char == substring[27]\n\
    \                count += 1\n                \n            if char == substring[28]\n\
    \                count += 1\n                \n            if char == substring[29]\n\
    \                count += 1\n                \n            if char == substring[30]\n\
    \                count += 1\n                \n            if char == substring[31]\n\
    \                count += 1\n                \n            if char == substring[32]\n\
    \                count += 1\n                \n            if char == substring[33]\n\
    \                count += 1\n                \n            if char == substring[34]\n\
    \                count += 1\n                \n            if char == substring[35]\n\
    \                count += 1\n                \n            if char == substring[36]\n\
    \                count += 1\n                \n            if char == substring[37]\n\
    \                count += 1\n                \n            if char == substring[38]\n\
    \                count += 1\n                \n            if char == ", "   \
    \ if string == \"\" || substring == \"\"\n        return 0\n    \n    count =\
    \ 0\n    \n    for char in string\n        if char == substring\n            count\
    \ += 1\n        else\n            count = 0\n    end\n    \n    return count\n\
    end\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and a substring and returns\
    \ the number of times the substring appears in the string. Count overlaping cases.\n\
    >>> how_many_times('', 'a')\n0\n>>> how_many_times('aaa', 'a')\n3\n>>> how_many_times('aaaa',\
    \ 'aa')\n3\n>>> how_many_times('aaaa', 'aaa')\n3\n>>> how_many_times('aaaa', 'aaaa')\n\
    3\n>>> how_many_times('aaaa', 'aaaaa')\n3\n>>> how_many_times('aaaaa', 'aaaa')\n\
    3\n>>> how_many_times('aaaaa', 'aaaaa')\n3\n>>> how_many_times('aaaaaa', 'aaaa')\n\
    3\n>>> how_many_times('aaaaaa', 'aaaaa')\n3\n>>> how_many_times('aaaaaa', 'aaaaaa')\n\
    3\n>>> how_many_times('aaaaaaa', 'aaaa')\n3\n>>> how_many_times('aaaaaaa', 'aaaaa')\n\
    3\n>>> how_many_times('aaaaaaa', 'aaaaaa')\n3\n>>> how_many_times('aaaaaaa', 'aaaaaaa')\n\
    3\n>>> how_many_times('aaaaaaa', 'aaaaaaab')\n3\n>>> how_many_times('aaaaaaab',\
    \ 'aaaa')\n3\n>>> how_many_times('aaaaaaab', 'aaaaa')\n3\n>>> how_many_times('aaaaaaab',\
    \ 'aaaaaa')\n3\n>>> how_many_times('aaaaaaab', 'aaaaaaa')\n3\n>>> how_many_times('aaaaaaab',\
    \ 'aaaaaaab')\n3\n>>> how_many_times('aaaaaaab', 'aaaaaaac')\n3\n>>> how_many_times('aaaaaaab',\
    \ 'aaaaaaac')\n3\n>>> how_many_times('aaaaaaab', 'aaaaaaac')\n3\n>>> how_many_times('aaaaaaab',\
    \ 'aaaaaaac')\n3\n>>> how_many_times('aaaaaaab', 'aaaaaaac')\n3\n>>> how_man",
  "    if string == \"\" || substring == \"\"\n        return 0\n    \n    if string[0]\
    \ == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    \n    if string[-1] == substring[-1]\n        return 1 + how_many_times(string[1..-1],\
    \ substring[1..-1])\n    \n    if string[1] == substring[1]\n        return 1\
    \ + how_many_times(string[2:], substring[2:])\n    \n    if string[2] == substring[2]\n\
    \        return 1 + how_many_times(string[3..-1], substring[3..-1])\n    \n  \
    \  return how_many_times(string[1..-1], substring[1..-1]) + how_many_times(string[2:],\
    \ substring[2:])\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaab\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaba\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaabaa\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aaabaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aaabaaab\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaabaaaba\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaabaaabaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaabaaabaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaabaaabaaab\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaabaaabaaaba\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaabaaabaaabaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaabaaabaaabaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aaabaaabaaabaaab\")", "    if string == \"\" || substring == \"\"\n\
    \        return 0\n    else if substring == string\n        return 1\n    else\n\
    \        return 1 + how_many_times(string[1:end-1], substring)\nend\n</cell>\n\
    <code language=julia-1.3>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string and returns the number of times\
    \ each character appears in the string. Case insensitive.", "    if string ==\
    \ \"\" || substring == \"\"\n        return 0\n    else if string[0] == substring[0]\n\
    \        return 1 + how_many_times(string[1:], substring[1:])\n    else\n    \
    \    return how_many_times(string[1:], substring)\nend\n</cell>\n<code language=julia-1.1>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of times each character appears in\
    \ the string. Ignore case. For example, the string \"abBc\" should return [('a',\
    \ 1), ('b', 1), ('c', 2)]", "    if string == \"\" || substring == \"\"\n    \
    \    return 0\n    else if string[0] == substring[0]\n        return 1 + how_many_times(string[1:],\
    \ substring[1:])\n    else\n        return how_many_times(string[1:], substring)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"\
    aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ a new string where all occurrences of \"a\" have been replaced with \"b\".",
  "    if string == \"\" || substring == \"\"\n        return 0\n    \n    count =\
    \ 0\n    \n    for char in string\n        if char == substring\n            count\
    \ += 1\n        else\n            count = 0\n    end\n    \n    return count\n\
    end", "    if string == \"\" || substring == \"\"\n        return 0\n    \n  \
    \  count = 0\n    \n    for char in string\n        if char == substring[0]\n\
    \            count = count + 1\n        else\n            count = 0\n    end\n\
    \    \n    return count\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of times each character appears in the string.", "  \
    \  if string == \"\" || substring == \"\"\n        return 0\n    else if string[0]\
    \ == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of times each character appears in the string. Ignore case when counting.",
  "    if string == \"\" || substring == \"\"\n        return 0\n    else if substring\
    \ == string\n        return 1\n    else\n        return 1 + how_many_times(string[1:end],\
    \ substring)\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ a substring and returns the number of times the substring appears in the string.\
    \ Count overlaping cases.\n>>> how_many_times('', 'a')\n0\n>>> how_many_times('aaa',\
    \ 'a')\n3\n>>> how_many_times('aaaa', 'aa')\n3\n>>> how_many_times('aaaa', 'ab')\n\
    2\n>>> how_many_times('aaaa', 'aaa')\n3\n>>> how_many_times('aaaa', 'aaaa')\n\
    3\n>>> how_many_times('aaaa', 'aaaaa')\n4\n>>> how_many_times('aaaa', 'aaaaaa')\n\
    4\n>>> how_many_times('aaaa', 'aaaaaaa')\n5\n>>> how_many_times('aaaa', 'aaaaaaab')\n\
    5\n>>> how_many_times('aaaa', 'aaaaaaaba')\n5\n>>> how_many_times('aaaa', 'aaaaaaabaa')\n\
    5\n>>> how_many_times('aaaa', 'aaaaaaabaaa')\n5\n>>> how_many_times('aaaa', 'aaaaaaabaaaa')\n\
    5\n>>> how_many_times('aaaa', 'aaaaaaabaaaaa')\n5\n>>> how_many_times('aaaa',\
    \ 'aaaaaaabaaaaaa')\n5\n>>> how_many_times('aaaa', 'aaaaaaabaaaaaaa')\n5\n>>>\
    \ how_many_times('aaaa', 'aaaaaaabaaaaaaab')\n5\n>>> how_many_times('aaaa', 'aaaaaaabaaaaaaaba')\n\
    5\n>>> how_many_times('aaaa', 'aaaaaaabaaaaaaabaa')\n5\n>>> how_many_times('aaaa',\
    \ 'aaaaaaabaaaaaaabaaa')\n5\n>>> how_many_times('aaaa', 'aaaaaaabaaaaaaabaaaa')\n\
    5\n>>> how_many_times('aaaa', 'aaaaaaabaaaaaaabaaaaa')\n5\n>>> how_many_times('aaaa',\
    \ 'aaaaaaabaaaaaaabaaaaaa')\n5\n>>> how_many_times('aaaa', 'aaaaaaabaaaaaaabaaaa",
  "    if string == \"\" || substring == \"\"\n        return 0\n    else if substring\
    \ == string\n        return 1\n    else\n        return 1 + how_many_times(string[1:end-1],\
    \ substring)\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\"\
    , \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aba\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"abaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"abaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"abaaab\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"\
    abaaaba\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"abaaabaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"abaaabaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"abaaabaaab\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"abaaabaaaba\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"abaaabaaabaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"abaaabaaabaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"abaaabaaabaaab\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"abaaabaaabaaaba\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"abaaabaaabaaabaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"abaaabaaabaaabaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"abaaabaaabaaabaaab\"\
    )\n</cell>\n<code language=julia-1.5", "    if string == \"\" || substring ==\
    \ \"\"\n        return 0\n    else if substring in string\n        return 1 +\
    \ how_many_times(string[end], substring)\n    else\n        return how_many_times(string[end],\
    \ substring) + how_many_times(string, substring[end])\nend\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and a substring and returns the number of times the substring appears in the\
    \ string.", "    if string == \"\" || substring == \"\"\n        return 0\n  \
    \  else if substring == string\n        return 1\n    else\n        return 1 +\
    \ how_many_times(string[1:end-1], substring)\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a string and returns the number of times each character\
    \ appears in the string. \nFor example, the string \"abracadabra\" would return\
    \ {\"a\":2, \"b\":1, \"c\":1, \"d\":1, \"r\":2}.\nHint: Use a dictionary to store\
    \ the counts. \nHint: Use a for loop to iterate over the string.", "    if string\
    \ == \"\" || substring == \"\"\n        return 0\n    else if string[0] == substring[0]\n\
    \        return 1 + how_many_times(string[1:], substring[1:])\n    else\n    \
    \    return 1 + how_many_times(string[1:], substring)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string and returns the number of times\
    \ a substring appears in the string. Count overlaping cases.", "    if string\
    \ == \"\" || substring == \"\"\n        return 0\n    \n    count = 0\n    \n\
    \    for char in string\n        if char == substring[0]\n            count =\
    \ count + 1\n            \n            if char == substring[1]\n             \
    \   count = count + 1\n                \n                if char == substring[2]\n\
    \                    count = count + 1\n                    \n               \
    \     if char == substring[3]\n                        count = count + 1\n   \
    \                     \n                        if char == substring[4]\n    \
    \                        count = count + 1\n                            \n   \
    \                         if char == substring[5]\n                          \
    \      count = count + 1\n                                \n                 \
    \               if char == substring[6]\n                                    count\
    \ = count + 1\n                                    \n                        \
    \            if char == substring[7]\n                                       \
    \ count = count + 1\n                                        \n              \
    \                          if char == substring[8]\n                         \
    \                   count = count + 1\n                                      \
    \      \n                                            if char == substring[9]\n\
    \                                                count = count + 1\n         \
    \                                       \n                                   \
    \             if char == substring[10]\n                                     \
    \               count = count + 1\n                                          \
    \          \n                                                    if char == substring[11]\n\
    \                                                        count = count + 1\n \
    \                                                       \n                   \
    \                                     if char == substring[12]\n             \
    \                                               count = count + 1\n          \
    \                                                  \n                        \
    \                                    if char == substring[13]\n              \
    \                                                  count = count + 1\n       \
    \                                                         \n                 \
    \                                               if char == substring[14]\n   \
    \                                                                 count = count\
    \ + 1\n                                                                    \n\
    \                                                    if char == substring[15]\n\
    \                                                        count = count + 1\n \
    \                                                       \n                   \
    \                                     if char == substring[16]\n             \
    \                                               count = count + 1\n          \
    \                                                  \n                        \
    \                                    if char == substring[17]\n              \
    \                                                  count = count + 1\n       \
    \                                                         \n                 \
    \                               if char == substring[18]\n                   \
    \                                 count = count + 1\n                        \
    \                            \n                                              \
    \      if char == substring[19]\n                                            \
    \            count = count + 1\n                                             \
    \           \n                                                        if char\
    \ == substring[20]\n                                                         \
    \   count = count + 1\n                                                      \
    \      \n                                                            if char ==\
    \ substring[21]\n                                                            \
    \    count = count + 1\n                                                     \
    \           \n                                                if char == substring[22]\n\
    \                                                    count = count + 1\n     \
    \                                               \n                           \
    \                         if char == substring[23]\n                         \
    \                               count = count + 1\n                          \
    \                              \n                                            \
    \            if char == substring[24]\n                                      \
    \                      count = count + 1\n                                   \
    \                         \n                                                 \
    \           if char == substring[25]\n                                       \
    \                         count = count + 1\n                                \
    \                                \n                                          \
    \      if char == substring[26]\n                                            \
    \        count = count + 1\n                                                 \
    \   \n                                                    if char == substring[27]\n\
    \                                                        count = count + 1\n \
    \                                                       \n                   \
    \                                     if char == substring[28]\n             \
    \                                               count = count + 1\n          \
    \                                                  \n                        \
    \                                    if char == substring[29]\n              \
    \                                                  count = count + 1\n       \
    \                                                         \n                 \
    \                               if char == substring[30]\n                   \
    \                                 count = count + 1\n                        \
    \                            \n                                              \
    \      if char == substring[31]\n                                            \
    \            count = count + 1\n                                             \
    \           \n                                                        if char",
  "    if string == \"\" || substring == \"\"\n        return 0 \n    else if string[0]\
    \ == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else if string[0] == substring[1]\n        return 1 + how_many_times(string[1:],\
    \ substring[2:])\n    else\n        return how_many_times(string[1:], substring)\n\
    end\n</cell>\n<code language=julia-1.0>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <code language=julia-1.0>\nhow_many_times(\"aaaa\", \"aaa\")\n</cell>\n<code language=julia-1.0>\n\
    how_many_times(\"aaaa\", \"aaaa\")\n</cell>\n<code language=julia-1.0>\nhow_many_times(\"\
    aaaa\", \"aaaaa\")\n</cell>\n<code language=julia-1.0>\nhow_many_times(\"aaaa\"\
    , \"aaaaaa\")\n</cell>\n<code language=julia-1.0>\nhow_many_times(\"aaaa\", \"\
    aaaaaaa\")\n</cell>\n<code language=julia-1.0>\nhow_many_times(\"aaaa\", \"aaaaaaab\"\
    )\n</cell>\n<code language=julia-1.0>\nhow_many_times(\"aaaa\", \"aaaaaaabb\"\
    )\n</cell>\n<code language=julia-1.0>\nhow_many_times(\"aaaa\", \"aaaaaaabbb\"\
    )\n</cell>\n<code language=julia-1.0>\nhow_many_times(\"aaaa\", \"aaaaaaabbbb\"\
    )\n</cell>\n<code language=julia-1.0>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbb\"\
    )\n</cell>\n<code language=julia-1.0>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbba\"\
    )\n</cell>\n<code language=julia-1.0>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbaa\"\
    )\n</cell>\n<code language=julia-1.0>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbaaa\"\
    )\n</cell>\n<code language=julia-1.0>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbaaaa\"\
    )\n</cell>\n<code language=julia-1.0>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbaaaaa\"\
    )\n</cell>\n<code language=julia-1.0>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbaaaaaa\"\
    )\n</cell>\n<code language=julia-1.0>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbaaaaaaa\"\
    )\n</cell", "    if string == \"\" || substring == \"\"\n        return 0\n  \
    \  \n    if string[0] == substring[0]\n        return 1 + how_many_times(string[1:],\
    \ substring[1:])\n    \n    if string[-1] == substring[-1]\n        return 1 +\
    \ how_many_times(string[1..-1], substring[1..-1])\n    \n    if string[0] == substring[0]\n\
    \        return 1 + how_many_times(string[1:], substring[1:])\n    \n    if string[-1]\
    \ == substring[-1]\n        return 1 + how_many_times(string[1..-1], substring[1..-1])\n\
    \    \n    if string[0] == substring[0]\n        return 1 + how_many_times(string[1:],\
    \ substring[1:])\n    \n    if string[-1] == substring[-1]\n        return 1 +\
    \ how_many_times(string[1..-1], substring[1..-1])\n    \n    if string[0] == substring[0]\n\
    \        return 1 + how_many_times(string[1:], substring[1:])\n    \n    if string[-1]\
    \ == substring[-1]\n        return 1 + how_many_times(string[1..-1], substring[1..-1])\n\
    \    \n    if string[0] == substring[0]\n        return 1 + how_many_times(string[1:],\
    \ substring[1:])\n    \n    if string[-1] == substring[-1]\n        return 1 +\
    \ how_many_times(string[1..-1], substring[1..-1])\n    \n    if string[0] == substring[0]\n\
    \        return 1 + how_many_times(string[1:], substring[1:])\n    \n    if string[-1]\
    \ == substring[-1]\n        return 1 + how_many_times(string[1..-1], substring[1..-1])\n\
    \    \n    if string[0] == substring[0]\n        return 1 + how_many_times(string[1:],\
    \ substring[1:])\n    \n    if string[-1] == substring[-1]\n        return 1 +\
    \ how_many_times(string[1..-1], substring[1..-1])\n    \n    if string[0] == substring[0]\n\
    \        return 1 + how_many_times(string[1:], substring[1:])\n    \n    if string[-1]\
    \ == substring[-1]\n        return 1 + how_many_times(string[1..-1], substring[1..-1])\n\
    \    \n    if string[0] == substring[0]\n        return 1 + how_many_times(string[1:],\
    \ substring[1:])\n    \n    if string[-1] == substring[-1]\n        return 1 +\
    \ how_many_times(string[1..-1], substring[1..-1])\n    \n    if string[0] == substring[0]\n\
    \        return 1 + how_many_times(string[1:], substring[1:])\n    \n    if string[-1]\
    \ == substring[-1]\n        return 1 + how_many_times(string[", "    if string\
    \ == \"\" || substring == \"\"\n        return 0 \n    \n    len_string = length(string)\n\
    \    len_substring = length(substring)\n    \n    if len_string == 0 || len_substring\
    \ == 0\n        return 0 \n    \n    if len_string == len_substring\n        return\
    \ 1 \n    \n    count = 0\n    \n    for index in 0..len_substring-1\n       \
    \ if substring(index) == string[index]\n            count += 1\n        end\n\
    \    end\n    \n    return count\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\",\
    \ \"ab\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aba\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"abaa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"abaaa\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaa\", \"abaaab\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"abaaaba\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"abaaabaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"abaaabaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"abaaabaaab\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"abaaabaaaba\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"abaaabaaabaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"abaaabaaabaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"abaaabaaabaaab\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"abaaabaaabaaaba\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"abaaabaaabaaabaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"abaaabaaabaaabaaa\")\n</cell>\n", "    if string == \"\" || substring\
    \ == \"\"\n        return 0\n    else if string[0] == substring[0]\n        return\
    \ 1 + how_many_times(string[1:], substring[1:])\n    else\n        return 1 +\
    \ how_many_times(string[1:], substring)\nend\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaa\", \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and a substring and returns the number of times the substring\
    \ appears in the string. Case sensitivity is not considered.", "    if string\
    \ == \"\" || substring == \"\"\n        return 0\n    \n    count = 0\n    \n\
    \    for c in string\n        if c == substring\n            count += 1\n    \
    \    else\n            count = 0\n    end\n    \n    return count\nend\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaa\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaab\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaaba\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabaa\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabaaa\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabaaab\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabaaaba\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabaaabaa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabaaabaaa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabaaabaaab\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabaaabaaaba\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabaaabaaabaa\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabaaabaaabaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_", "    if string == \"\" || substring\
    \ == \"\"\n        return 0\n    else if string[0] == substring[0]\n        return\
    \ 1 + how_many_times(string[1:], substring[1:])\n    else\n        return 1 +\
    \ how_many_times(string[1:], substring)\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of times a substring appears\
    \ within that string.", "    count = 0\n    for c in string:\n        if c ==\
    \ substring:\n            count += 1\n    return count\n</cell>\n<code language=julia-1.5>\n\
    how_many_times('', 'a')\n</cell>\n<code language=julia-1.5>\nhow_many_times('aaa',\
    \ 'a')\n</cell>\n<code language=julia-1.5>\nhow_many_times('aaaa', 'aa')\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of times a substring\
    \ appears in a string.", "    if string == \"\" || substring == \"\"\n       \
    \ return 0\n    \n    i = 0\n    \n    while i < length(string)\n        if substring(i,\
    \ length(string)) in string\n            i += 1\n        else\n            i =\
    \ 0\n        end\n    end\n    \n    return i\nend\n</cell>\n<code language=julia-1.4>\n\
    how_many_times(\"abba\", \"ab\")\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"\
    abba\", \"ba\")\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"abba\",\
    \ \"aba\")\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"abba\", \"abba\"\
    )\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"abba\", \"abbb\")\n</cell>\n\
    <code language=julia-1.4>\nhow_many_times(\"abba\", \"abbbb\")\n</cell>\n<code\
    \ language=julia-1.4>\nhow_many_times(\"abba\", \"abbbba\")\n</cell>\n<code language=julia-1.4>\n\
    how_many_times(\"abba\", \"abbbbba\")\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"\
    abba\", \"abbbbbaa\")\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"abba\"\
    , \"abbbbbaaa\")\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"abba\"\
    , \"abbbbbaaaa\")\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"abba\"\
    , \"abbbbbaaaaa\")\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"abba\"\
    , \"abbbbbaaaaaa\")\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"abba\"\
    , \"abbbbbaaaaaaa\")\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"abba\"\
    , \"abbbbbaaaaaaaa\")\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"abba\"\
    , \"abbbbbaaaaaaaab\")\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"\
    abba\", \"abbbbbaaaaaaaabb\")\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"\
    abba\", \"abbbbbaaaaaaaabbb\")\n</cell>\n<code language=julia-", "    if string\
    \ == \"\" || substring == \"\"\n        return 0\n    \n    if string[0] == substring[0]\n\
    \        return 1 + how_many_times(string[1:], substring[1:])\n    \n    if string[-1]\
    \ == substring[-1]\n        return 1 + how_many_times(string[1..-1], substring[1..-1])\n\
    \    \n    if string[0] == substring[-1]\n        return 1 + how_many_times(string[1:],\
    \ substring[1..-1])\n    \n    if string[-1] == substring[0]\n        return 1\
    \ + how_many_times(string[1..-1], substring[1:])\n    \n    return how_many_times(string[1:],\
    \ substring[1..-1]) + how_many_times(string[1..-1], substring[1:])\nend\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times('', 'a')\n</cell>\n<code language=julia-1.5>\n\
    how_many_times('aaa', 'a')\n</cell>\n<code language=julia-1.5>\nhow_many_times('aaaa',\
    \ 'aa')\n</cell>\n<code language=julia-1.5>\nhow_many_times('aaaa', 'aaa')\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times('aaaa', 'aaaa')\n</cell>\n<code language=julia-1.5>\n\
    how_many_times('aaaa', 'aaaaa')\n</cell>\n<code language=julia-1.5>\nhow_many_times('aaaa',\
    \ 'aaaaaa')\n</cell>\n<code language=julia-1.5>\nhow_many_times('aaaa', 'aaaaaaa')\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times('aaaa', 'aaaaaaab')\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times('aaaa', 'aaaaaaaba')\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times('aaaa', 'aaaaaaabaa')\n</cell>\n<code language=julia-1.5>\n\
    how_many_times('aaaa', 'aaaaaaabaaa')\n</cell>\n<code language=julia-1.5>\nhow_many_times('aaaa',\
    \ 'aaaaaaabaaaa')\n</cell>\n<code language=julia-1.5>\nhow_many_times('aaaa',\
    \ 'aaaaaaabaaaaa')\n</cell>\n<code language=julia-1.5>\nhow_many_times('aaaa',\
    \ 'aaaaaaabaaaaaa')\n</cell>\n<code language=julia-1.5>\nhow_many_times('aaaa',\
    \ 'aaaaaaabaaaaaaa')\n</cell>\n", "    if string == \"\" || substring == \"\"\n\
    \        return 0\n    \n    len_string = length(string)\n    len_substring =\
    \ length(substring)\n    \n    if len_string == 0 || len_substring == 0\n    \
    \    return 0\n    \n    \n    \n    if string[len_string - 1] == substring[0]\n\
    \        return 1 + how_many_times(string[1:len_string - 1], substring[1:])\n\
    \    \n    if substring[len_substring - 1] == string[0]\n        return 1 + how_many_times(string[1:len_string\
    \ - 1], substring[1:len_substring - 1])\n    \n    if string[len_string - 1] ==\
    \ substring[len_substring - 1]\n        return 1 + how_many_times(string[1:len_string\
    \ - 1], substring[1:len_substring - 1])\n    \n    if substring[len_substring\
    \ - 1] == string[len_string - 1]\n        return 1 + how_many_times(string[1:len_string\
    \ - 1], substring[1:len_substring - 1])\n    \n    if string[len_string - 1] ==\
    \ substring[0]\n        return 1 + how_many_times(string[1:len_string - 1], substring[1:])\n\
    \    \n    if substring[len_substring - 1] == string[len_string - 1]\n       \
    \ return 1 + how_many_times(string[1:len_string - 1], substring[1:len_substring\
    \ - 1])\n    \n    if string[len_string - 1] == substring[len_substring - 1]\n\
    \        return 1 + how_many_times(string[1:len_string - 1], substring[1:len_substring\
    \ - 1])\n    \n    if substring[len_substring - 1] == string[0]\n        return\
    \ 1 + how_many_times(string[1:len_string - 1], substring[1:len_substring - 1])\n\
    \    \n    if substring[len_substring - 1] == string[len_string - 1]\n       \
    \ return 1 + how_many_times(string[1:len_string - 1], substring[1:len_substring\
    \ - 1])\n    \n    if string[len_string - 1] == substring[0]\n        return 1\
    \ + how_many_times(string[1:len_string - 1], substring[1:])\n    \n    if substring[len_substring\
    \ - 1] == string[0]\n        return 1 + how_many_times(string[1:len_string - 1],\
    \ substring[1:len_substring - 1])\n    \n    if string[len_string - 1] == substring[len_substring\
    \ - 1]\n        return 1 + how_many_times(string[1:len_string - 1], substring[1:len_substring\
    \ - 1])\n    \n    if substring[len_substring - 1] == string[len_string - 1]\n\
    \        return 1 + how_many_time", "    if string == \"\" || substring == \"\"\
    \n        return 0\n    \n    count = 0\n    \n    for char in string\n      \
    \  if char == substring[0]\n            count = count + 1\n            \n    \
    \        if char == substring[1]\n                count = count + 1\n        \
    \        \n            if char == substring[2]\n                count = count\
    \ + 1\n                \n            if char == substring[3]\n               \
    \ count = count + 1\n                \n            if char == substring[4]\n \
    \               count = count + 1\n                \n            if char == substring[5]\n\
    \                count = count + 1\n                \n            if char == substring[6]\n\
    \                count = count + 1\n                \n            if char == substring[7]\n\
    \                count = count + 1\n                \n            if char == substring[8]\n\
    \                count = count + 1\n                \n            if char == substring[9]\n\
    \                count = count + 1\n                \n            if char == substring[10]\n\
    \                count = count + 1\n                \n            if char == substring[11]\n\
    \                count = count + 1\n                \n            if char == substring[12]\n\
    \                count = count + 1\n                \n            if char == substring[13]\n\
    \                count = count + 1\n                \n            if char == substring[14]\n\
    \                count = count + 1\n                \n            if char == substring[15]\n\
    \                count = count + 1\n                \n            if char == substring[16]\n\
    \                count = count + 1\n                \n            if char == substring[17]\n\
    \                count = count + 1\n                \n            if char == substring[18]\n\
    \                count = count + 1\n                \n            if char == substring[19]\n\
    \                count = count + 1\n                \n            if char == substring[20]\n\
    \                count = count + 1\n                \n            if char == substring[21]\n\
    \                count = count + 1\n                \n            if char == substring[22]\n\
    \                count = count + 1\n                \n            if char == substring[23]\n\
    \                count = count + 1\n                \n            if char == substring[24]\n\
    \                count = count + 1\n                \n            if char == substring[25]\n\
    \                count = count + 1\n                \n            if char == substring[26]\n\
    \                count = count + 1\n                \n            if char == substring[27]\n\
    \                count = count + 1\n                \n            if char == substring[28]\n\
    \                count = count + 1\n                \n            if char == substring[29]\n\
    \                count = count + 1\n                \n            if char == substring[30]\n\
    \                count = count + 1\n                \n            if char == substring[31]\n\
    \                count = count + 1\n                \n            if char == substring[32]\n\
    \                count = count + 1\n                \n            if char == substring[33]\n\
    \                count = count + 1\n                \n", "    if string == \"\"\
    \ || substring == \"\"\n        return 0 \n    else \n        count = 0\n    \
    \    for char in string\n            if char == substring\n                count\
    \ += 1\n            else\n                if count > 0\n                    return\
    \ count\n                else\n                    count = 0\n        end\n  \
    \      return count\nend\n</cell>\n<code language=julia-1.5>", "    if string\
    \ == \"\" || substring == \"\"\n        return 0\n    \n    count = 0\n    \n\
    \    for c in string\n        if c == substring\n            count += 1\n    \
    \    else\n            count = 0\n    end\n    \n    return count\nend\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and a substring and returns the\
    \ number of times the substring appears in the string. Count overlaping cases.\n\
    \    >>> how_many_times_2('', 'a')\n    0\n    >>> how_many_times_2('aaa', 'a')\n\
    \    2\n    >>> how_many_times_2('aaaa', 'aa')\n    2\n    \"\"\"", "    if string\
    \ == \"\" || substring == \"\"\n        return 0\n    \n    count = 0\n    \n\
    \    for char in string\n        if char == substring[0]\n            count =\
    \ count + 1\n            \n            if char == substring[1]\n             \
    \   count = count + 1\n                \n                if char == substring[2]\n\
    \                    count = count + 1\n                    \n               \
    \     if char == substring[3]\n                        count = count + 1\n   \
    \                     \n                        if char == substring[4]\n    \
    \                        count = count + 1\n                            \n   \
    \                         if char == substring[5]\n                          \
    \      count = count + 1\n                                \n                 \
    \               if char == substring[6]\n                                    count\
    \ = count + 1\n                                    \n                        \
    \            if char == substring[7]\n                                       \
    \ count = count + 1\n                                        \n              \
    \                          if char == substring[8]\n                         \
    \                   count = count + 1\n                                      \
    \      \n                                            if char == substring[9]\n\
    \                                                count = count + 1\n         \
    \                                       \n                                   \
    \             if char == substring[10]\n                                     \
    \               count = count + 1\n                                          \
    \          \n                                                    if char == substring[11]\n\
    \                                                        count = count + 1\n \
    \                                                       \n                   \
    \                                     if char == substring[12]\n             \
    \                                               count = count + 1\n          \
    \                                                  \n                        \
    \                                    if char == substring[13]\n              \
    \                                                  count = count + 1\n       \
    \                                                         \n                 \
    \                                               if char == substring[14]\n   \
    \                                                                 count = count\
    \ + 1\n                                                                    \n\
    \                                                                    if char ==\
    \ substring[15]\n                                                            \
    \            count = count + 1\n                                             \
    \                           \n                                               \
    \         if char == substring[16]\n                                         \
    \                   count = count + 1\n                                      \
    \                      \n                                                    \
    \        if char == substring[17]\n                                          \
    \                      count = count + 1\n                                   \
    \                             \n                                             \
    \                   if char == substring[18]\n                               \
    \                                     count = count + 1\n                    \
    \                                                \n                          \
    \                                          if char == substring[19]\n        \
    \                                                                count = count\
    \ + 1\n                                                                      \
    \  \n                                                        if char == substring[20]\n\
    \                                                            count = count + 1\n\
    \                                                            \n              \
    \                                              if char == substring[21]\n    \
    \                                                            count = count + 1\n\
    \                                                                \n          \
    \                                                      if char == substring[22]\n\
    \                                                                    count = count\
    \ + 1\n                                                                    \n\
    \                                                                    if char ==\
    \ substring[23]\n                                                            \
    \            count = count + 1\n                                             \
    \                           \n                                               \
    \         if char == substring[24]\n                                         \
    \                   count = count + 1\n                                      \
    \                      \n                                                    \
    \        if char == substring[25]\n                                          \
    \                      count = count + 1\n                                   \
    \                             \n                                             \
    \                   if char == substring[26]\n                               \
    \                                     count = count + 1\n                    \
    \                                                \n                          \
    \                                          if char == substring[27]\n        \
    \                                                                count = count\
    \ + 1\n                                                                      \
    \  \n                                                        if char == substring[28]\n\
    \                                                            count = count + 1\n\
    \                                                            \n              \
    \                                              if char == substring[29]\n    \
    \                                                            count = count + 1\n\
    \                                                                \n          \
    \                                                      if char == substring[30]\n\
    \                                                                    count = count\
    \ + 1\n                                ", "    if string == \"\" || substring\
    \ == \"\"\n        return 0\n    \n    count = 0\n    \n    for c in string\n\
    \        if c == substring\n            count += 1\n        else\n           \
    \ count = 0\n    end\n    \n    return count\nend\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"\
    aa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaa\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaa\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaa\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aaaaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aaaaaaab\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaaaaaabb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaaaaaabbb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaaaaaabbbb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaaaaaabbbbb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaaaaaabbbbba\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaaaaaabbbbbaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaaaaaabbbbbaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aaaaaaabbbbbaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aaaaaaabbbbbaaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aaaaaaabbbbbaaaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aaaaaaab", "    if string == \"\" || substring == \"\"\n        return\
    \ 0\n    \n    count = 0\n    \n    for c in string\n        if c == substring[0]\n\
    \            count = count + 1\n            \n            if substring[1] == c\n\
    \                count = count + 1\n            \n            if substring[2]\
    \ == c\n                count = count + 1\n            \n            if substring[3]\
    \ == c\n                count = count + 1\n            \n            if substring[4]\
    \ == c\n                count = count + 1\n            \n            if substring[5]\
    \ == c\n                count = count + 1\n            \n            if substring[6]\
    \ == c\n                count = count + 1\n            \n            if substring[7]\
    \ == c\n                count = count + 1\n            \n            if substring[8]\
    \ == c\n                count = count + 1\n            \n            if substring[9]\
    \ == c\n                count = count + 1\n            \n            if substring[10]\
    \ == c\n                count = count + 1\n            \n            if substring[11]\
    \ == c\n                count = count + 1\n            \n            if substring[12]\
    \ == c\n                count = count + 1\n            \n            if substring[13]\
    \ == c\n                count = count + 1\n            \n            if substring[14]\
    \ == c\n                count = count + 1\n            \n            if substring[15]\
    \ == c\n                count = count + 1\n            \n            if substring[16]\
    \ == c\n                count = count + 1\n            \n            if substring[17]\
    \ == c\n                count = count + 1\n            \n            if substring[18]\
    \ == c\n                count = count + 1\n            \n            if substring[19]\
    \ == c\n                count = count + 1\n            \n            if substring[20]\
    \ == c\n                count = count + 1\n            \n            if substring[21]\
    \ == c\n                count = count + 1\n            \n            if substring[22]\
    \ == c\n                count = count + 1\n            \n            if substring[23]\
    \ == c\n                count = count + 1\n            \n            if substring[24]\
    \ == c\n                count = count + 1\n            \n            if substring[25]\
    \ == c\n                count = count + 1\n            \n            if substring[26]\
    \ == c\n                count = count + 1\n            \n            if substring[27]\
    \ == c\n                count = count + 1\n            \n            if substring[28]\
    \ == c\n                count = count + 1\n            \n            if substring[29]\
    \ == c\n                count = count + 1\n            \n            if substring[30]\
    \ == c\n                count = count + 1\n            \n            if substring[31]\
    \ == c\n                count = count + 1\n            \n            if substring[32]\
    \ == c\n                count = count + 1\n            \n            if substring[33]\
    \ == c\n                count = count + 1\n            \n            if substring[34]\
    \ == c\n                count = count + 1\n            \n            if substring[35]\
    \ == c\n                count = count + 1\n            ", "    if string == \"\
    \" || substring == \"\"\n        return 0\n    \n    len_string = length(string)\n\
    \    len_substring = length(substring)\n    \n    if len_string == 0 || len_substring\
    \ == 0\n        return 0\n    \n    if len_string == len_substring\n        return\
    \ count_substring(string, substring)\n    \n    if len_string > len_substring\n\
    \        return how_many_times(substring(string, 1, len_substring), substring)\n\
    \    \n    return how_many_times(substring(string, 0, len_string), substring)\n\
    end\n</cell>\n<code language=julia-1.5>", "    if string == \"\" || substring\
    \ == \"\"\n        return 0\n    else if string[0] == substring[0]\n        return\
    \ 1 + how_many_times(string[1:], substring[1:])\n    else\n        return 1 +\
    \ how_many_times(string[1:], substring)\nend\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abba\", \"ab\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abba\", \"ba\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abba\",\
    \ \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abba\", \"bb\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abba\", \"bbb\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"abba\", \"bbba\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"abba\", \"abba\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"abba\", \"abbb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abba\", \"abbbb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abba\"\
    , \"abbbba\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abba\", \"\
    abbbab\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abba\", \"abbbbac\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abba\", \"abbbbac\") #\
    \ no overlap\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"abba\", \"\
    abbbbaca\") # no overlap\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abba\", \"abbbbaca\") # no overlap\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abba\", \"abbbbaca\") # no overlap\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abba\", \"abbbbaca\") # no overlap\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abba\", \"abbbbaca\") # no overlap\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    abba\", \"ab", "    if string == \"\" || substring == \"\"\n        return 0\n\
    \    else if string[0] == substring[0]\n        return 1 + how_many_times(string[1:],\
    \ substring[1:])\n    else\n        return 1 + how_many_times(string[1:], substring)\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ the number of times a substring appears within it. The substring may appear\
    \ anywhere within the string. For example, if the string is 'abcabcbb', the substring\
    \ 'abc' appears three times in the string. The function should return the number\
    \ 3.", "    if string == \"\" || substring == \"\"\n        return 0\n    \n \
    \   count = 0\n    \n    for char in string\n        if char == substring\n  \
    \          count += 1\n        else\n            count = 0\n    end\n    return\
    \ count\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"\
    aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of times a substring appears in the string. Count overlaping cases.",
  "    if string == \"\" || substring == \"\"\n        return 0\n    \n    count =\
    \ 0\n    \n    for char in string\n        if char == substring\n            count\
    \ += 1\n        end\n    end\n    \n    return count\nend\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of times a substring appears within\
    \ the string. \nFor example, how_many_times(\"aaaa\", \"aa\") should return 3.",
  "    if string == \"\" || substring == \"\"\n        return 0\n    \n    len_string\
    \ = length(string)\n    len_substring = length(substring)\n    \n    if len_string\
    \ == 0 || len_substring == 0\n        return 0\n    \n    i = 0\n    j = 0\n \
    \   \n    while i < len_string && j < len_substring\n        if string[i] == substring[j]\n\
    \            i += 1\n            j += 1\n        else\n            if string[i]\
    \ > substring[j]\n                i += 1\n            else\n                j\
    \ += 1\n        end\n    end\n    \n    if i == len_string\n        return j\n\
    \    else\n        return j - i\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if string == \"\" || substring == \"\"\n        return 0 \n    else if string[0]\
    \ == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring)\nend\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string and returns the number of times\
    \ a substring appears in the string. \nFor example, how_many_times(\"aaaa\", \"\
    aa\") should return 3.", "    if string == \"\" || substring == \"\"\n       \
    \ return 0\n    \n    count = 0\n    \n    for c in string\n        if c == substring\n\
    \            count += 1\n        else\n            count = 0\n    end\n    return\
    \ count\nend\n</cell>\n<code language=julia-1.5>", "    if string == \"\" || substring\
    \ == \"\"\n        return 0\n    else if string[0] == substring[0]\n        return\
    \ 1 + how_many_times(string[1:], substring[1:])\n    else\n        return how_many_times(string[1:],\
    \ substring) + how_many_times(string[1:], substring[1:])\nend\n</cell>\n<code\
    \ language=julia-1.3>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and returns the number of times a substring\
    \ appears in the string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n\
    \    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa',\
    \ 'aa')\n    3\n    \"\"\"", "    if string == \"\" || substring == \"\"\n   \
    \     return 0\n    else if string[0] == substring[0]\n        return 1 + how_many_times(string[1:],\
    \ substring[1:])\n    else\n        return 1 + how_many_times(string[1:], substring)\n\
    end\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string and returns a new string\
    \ where all occurrences of \"a\" have been replaced with \"b\".", "    if string\
    \ == \"\" || substring == \"\"\n        return 0\n    \n    len_string = length(string)\n\
    \    len_substring = length(substring)\n    \n    if len_string == 0 || len_substring\
    \ == 0\n        return 0\n    \n    if len_string == len_substring\n        return\
    \ count_substring(string, substring)\n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "  \
    \  if string == \"\" || substring == \"\"\n        return 0\n    else if string[0]\
    \ == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring)\nend\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string and returns the number of times\
    \ a substring appears in the string. Count overlaping cases.", "    if string\
    \ == \"\" || substring == \"\"\n        return 0\n    \n    count = 0\n    \n\
    \    for c in string\n        if c == substring[0]\n            count += how_many_times(string[1..end-1],\
    \ substring[1:])\n        else\n            count += how_many_times(string[1..end-1],\
    \ substring)\n    end\n    \n    return count\nend\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of times each character appears in\
    \ the string. \nFor example, the string \"abcabc\" would return [('a', 3), ('b',\
    \ 2), ('c', 3)]", "    if string == \"\" || substring == \"\"\n        return\
    \ 0\n    else if string[0] == substring[0]\n        return 1 + how_many_times(string[1:],\
    \ substring[1:])\n    else\n        return how_many_times(string[1:], substring)\
    \ + how_many_times(string, substring[1:])\nend\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of times a substring appears in the\
    \ string. Count overlaping cases.", "    if string == \"\" || substring == \"\"\
    \n        return 0\n    \n    count = 0\n    \n    for i in string\n        if\
    \ i == substring[0]\n            count = count + 1\n        else\n           \
    \ count = 0\n    end\n    \n    return count\nend\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns a new string where all occurrences of \"a\"\
    \ have been replaced with \"b\".", "    if string == \"\" || substring == \"\"\
    \n        return 0\n    else if string[0] == substring[0]\n        return 1 +\
    \ how_many_times(string[1:], substring[1:])\n    else\n        return how_many_times(string[1:],\
    \ substring)\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times('aaaa',\
    \ 'aa')\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and\
    \ a substring and returns the number of times the substring appears in the string.\
    \ Case insensitive.", "    if string == \"\" || substring == \"\"\n        return\
    \ 0\n    \n    if string[0] == substring[0]\n        return 1 + how_many_times(string[1:],\
    \ substring[1:])\n    \n    if string[-1] == substring[-1]\n        return 1 +\
    \ how_many_times(string[1..-1], substring[1..-1])\n    \n    if string[1] == substring[1]\n\
    \        return 1 + how_many_times(string[2:], substring[2:])\n    \n    if string[2]\
    \ == substring[2]\n        return 1 + how_many_times(string[3..-1], substring[3..-1])\n\
    \    \n    if string[1] == substring[1] && string[2] == substring[2]\n       \
    \ return 1 + how_many_times(string[3..], substring[3..])\n    \n    if string[1]\
    \ == substring[1] && string[3] == substring[3]\n        return 1 + how_many_times(string[4..-1],\
    \ substring[4..-1])\n    \n    if string[3] == substring[3] && string[4] == substring[4]\n\
    \        return 1 + how_many_times(string[4..], substring[4..])\n    \n    if\
    \ string[3] == substring[3] && string[4] == substring[4]\n        return 1 + how_many_times(string[5..-1],\
    \ substring[5..-1])\n    \n    if string[5] == substring[5] && string[6] == substring[6]\n\
    \        return 1 + how_many_times(string[6..], substring[6..])\n    \n    if\
    \ string[5] == substring[5] && string[6] == substring[6]\n        return 1 + how_many_times(string[7..-1],\
    \ substring[7..-1])\n    \n    if string[7] == substring[7] && string[8] == substring[8]\n\
    \        return 1 + how_many_times(string[8..], substring[8..])\n    \n    if\
    \ string[7] == substring[7] && string[8] == substring[8]\n        return 1 + how_many_times(string[9..-1],\
    \ substring[9..-1])\n    \n    if string[9] == substring[9] && string[10] == substring[10]\n\
    \        return 1 + how_many_times(string[10..], substring[10..])\n    \n    if\
    \ string[9] == substring[9] && string[10] == substring[10]\n        return 1 +\
    \ how_many_times(string[11..-1], substring[11..-1])\n    \n    if string[11] ==\
    \ substring[11] && string[12] == substring[12]\n        return 1 + how_many_times(string[12..],\
    \ substring[12..])\n    \n    if string[11] == substring[11] && string[12] ==\
    \ substring[12]\n        return 1 + how_many_times(string[13..-1], substring",
  "    if string == \"\" || substring == \"\"\n        return 0\n    else if substring[0]\
    \ == string[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring)\nend\n</cell>\n\
    <code language=julia-1.3>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of times the\
    \ string \"ab\" appears in the string. \n>>> count_ab(\"abcabcbb\")\n3\n>>> count_ab(\"\
    a\")\n0\n>>> count_ab(\"ab\")\n1\n>>> count_ab(\"aba\")\n2\n>>> count_ab(\"abba\"\
    )\n2\n>>> count_ab(\"abbac\")\n2\n>>> count_ab(\"abbacab\")\n3\n>>> count_ab(\"\
    abbacabc\")\n3\n>>> count_ab(\"abbacabcbb\")\n3\n>>> count_ab(\"abbacabcbbb\"\
    )\n3\n>>> count_ab(\"abbacabcbbbba\")\n3\n>>> count_ab(\"abbacabcbbbbac\")\n3\n\
    >>> count_ab(\"abbacabcbbbbacab\")\n3\n>>> count_ab(\"abbacabcbbbbacabc\")\n3\n\
    >>> count_ab(\"abbacabcbbbbacabcbb\")\n3\n>>> count_ab(\"abbacabcbbbbacabcbbb\"\
    )\n3\n>>> count_ab(\"abbacabcbbbbacabcbbbba\")\n3\n>>> count_ab(\"abbacabcbbbbacabcbbbbac\"\
    )\n3\n>>> count_ab(\"abbacabcbbbbacabcbbbbacab\")\n3\n>>> count_ab(\"abbacabcbbbbacabcbbbbacabc\"\
    )\n3\n>>> count_ab(\"abbacabcbbbbacabcbbbbacabcbb\")\n3\n>>> count_ab(\"abbacabcbbbbacabcbbbbacabcbbb\"\
    )\n3\n>>> count_ab(\"abbacabcbbbbacabcbbbbacabcbbbba\")\n3\n>>> count_ab(\"abbacabcbbbbacabcbbbbacabcbbbbac\"\
    )\n3\n>>> count_ab(\"abbacabcbbbbacabcbbbbacabcbbbbacab\")\n3\n>>> count_ab(\"",
  "    if string == \"\" || substring == \"\"\n        return 0\n    \n    len_string\
    \ = length(string)\n    len_substring = length(substring)\n    \n    if len_string\
    \ == 0 || len_substring == 0\n        return 0\n    \n    if len_string == len_substring\n\
    \        return count_overlaping_cases(string, substring)\n    \n    if len_string\
    \ > len_substring\n        return how_many_times(substring(string, 1, len_substring),\
    \ substring)\n    \n    return how_many_times(substring(string, 1, len_string),\
    \ substring)\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"a\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaa\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaa\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aaaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aaaaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaaaaaab\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\",\
    \ \"aaaaaaaba\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaaaaaabaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaaaaaabaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaaaaaabaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaaaaaabaaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaaaaaabaaaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaaaaaabaaaaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aaaaaaabaaaaaaab\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aaaaaaabaaaaaaaba\")\n</cell>\n<code language=julia-1.5>\nhow_", " \
    \   if string == \"\" || substring == \"\"\n        return 0\n    \n    string::String\
    \ = string.lower()\n    substring::String = substring.lower()\n    \n    i = 0\n\
    \    \n    while i < length(substring)\n        if string[i] == substring[i]\n\
    \            i += 1\n        else\n            i = 0\n        end\n    end\n \
    \   \n    return i\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"\
    aa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaa\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaa\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaa\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aaaaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aaaaaaab\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaaaaaabb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaaaaaabbb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaaaaaabbbb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaaaaaabbbbb\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaaaaaabbbbba\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaaaaaabbbbbaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaaaaaabbbbbaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aaaaaaabbbbbaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aaaaaaabbbbbaaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aaaaaaabbbbbaaaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"", "    if string == \"\" || substring == \"\"\n        return 0\n \
    \   \n    i = 0\n    \n    while i < length(string)\n        if substring(i, 1)\
    \ == string(i, 1)\n            i += 1\n        else\n            i += 1\n    end\n\
    \    \n    return i\nend\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"\
    aaa\", \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and a substring and returns the number of times the substring appears in the\
    \ string. Count overlaping cases.", "    if string == \"\" || substring == \"\"\
    \n        return 0\n    \n    count = 0\n    \n    for char in string\n      \
    \  if char == substring\n            count += 1\n        else\n            count\
    \ = 0\n    end\n    \n    return count\nend\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of times each character appears in\
    \ the string.", "    if string == \"\" || substring == \"\"\n        return 0\n\
    \    else if string[0] == substring[0]\n        return 1 + how_many_times(string[1:],\
    \ substring[1:])\n    else\n        return 1 + how_many_times(string[1:], substring)\n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string\
    \ and returns the number of times each character appears in the string. \nFor\
    \ example, given the string \"hello\", your function should return {'h':2, 'e':1,\
    \ 'l':2, 'o':1}.\nThe order of the characters should not matter.", "    if string\
    \ == \"\" || substring == \"\"\n        return 0\n    else if string[0] == substring[0]\n\
    \        return 1 + how_many_times(string[1:], substring[1:])\n    else\n    \
    \    return how_many_times(string[1:], substring)\nend\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string and returns the number of times the substring appears within\
    \ the string. \n>>> how_many_times(\"aaaa\", \"aa\")\n3", "    if string == \"\
    \" || substring == \"\"\n        return 0\n    \n    count = 0\n    \n    for\
    \ char in string\n        if char == substring\n            count += 1\n     \
    \   else\n            count = 0\n    end\n    \n    return count\nend\n</cell>\n\
    <code language=julia-1.5>", "    if string == \"\" || substring == \"\"\n    \
    \    return 0\n    \n    count = 0\n    \n    for char in string\n        if char\
    \ == substring\n            count += 1\n        else\n            count = 0\n\
    \    end\n    \n    return count\nend\n</cell>\n<code language=julia-1.5>", " \
    \   if string == \"\" || substring == \"\"\n        return 0\n    else if string[0]\
    \ == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring)\nend\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of times a substring\
    \ appears in the string. Count overlaping cases.", "    count = 0\n    for c in\
    \ string:\n        if c == substring:\n            count += 1\n    return count\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times('', 'a')\n</cell>\n<code language=julia-1.5>\n\
    how_many_times('aaa', 'a')\n</cell>\n<code language=julia-1.5>\nhow_many_times('aaaa',\
    \ 'aa')\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns the number of times a substring appears in the string. Count overlaping\
    \ cases.", "    if string == \"\" || substring == \"\"\n        return 0\n   \
    \ else if string[0] == substring[0]\n        return 1 + how_many_times(string[1:],\
    \ substring[1:])\n    else\n        return how_many_times(string[1:], substring)\
    \ + how_many_times(string, substring[1:])\nend\n</cell>\n<code language=julia-1.5>\n\
    how_many_times('', 'a')\n</cell>\n<code language=julia-1.5>\nhow_many_times('aaa',\
    \ 'a')\n</cell>\n<code language=julia-1.5>\nhow_many_times('aaaa', 'aa')\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and a substring and returns\
    \ the number of times the substring appears in the string. \nFor example, how_many_times('abcabc',\
    \ 'abc') should return 3.", "    if string == \"\" || substring == \"\"\n    \
    \    return 0\n    \n    count = 0\n    \n    for char in string\n        if char\
    \ == substring[0]\n            count = count + 1\n            \n            if\
    \ char == substring[1]\n                count = count + 1\n                \n\
    \            if char == substring[2]\n                count = count + 1\n    \
    \            \n            if char == substring[3]\n                count = count\
    \ + 1\n                \n            if char == substring[4]\n               \
    \ count = count + 1\n                \n            if char == substring[5]\n \
    \               count = count + 1\n                \n            if char == substring[6]\n\
    \                count = count + 1\n                \n            if char == substring[7]\n\
    \                count = count + 1\n                \n            if char == substring[8]\n\
    \                count = count + 1\n                \n            if char == substring[9]\n\
    \                count = count + 1\n                \n            if char == substring[10]\n\
    \                count = count + 1\n                \n            if char == substring[11]\n\
    \                count = count + 1\n                \n            if char == substring[12]\n\
    \                count = count + 1\n                \n            if char == substring[13]\n\
    \                count = count + 1\n                \n            if char == substring[14]\n\
    \                count = count + 1\n                \n            if char == substring[15]\n\
    \                count = count + 1\n                \n            if char == substring[16]\n\
    \                count = count + 1\n                \n            if char == substring[17]\n\
    \                count = count + 1\n                \n            if char == substring[18]\n\
    \                count = count + 1\n                \n            if char == substring[19]\n\
    \                count = count + 1\n                \n            if char == substring[20]\n\
    \                count = count + 1\n                \n            if char == substring[21]\n\
    \                count = count + 1\n                \n            if char == substring[22]\n\
    \                count = count + 1\n                \n            if char == substring[23]\n\
    \                count = count + 1\n                \n            if char == substring[24]\n\
    \                count = count + 1\n                \n            if char == substring[25]\n\
    \                count = count + 1\n                \n            if char == substring[26]\n\
    \                count = count + 1\n                \n            if char == substring[27]\n\
    \                count = count + 1\n                \n            if char == substring[28]\n\
    \                count = count + 1\n                \n            if char == substring[29]\n\
    \                count = count + 1\n                \n            if char == substring[30]\n\
    \                count = count + 1\n                \n            if char == substring[31]\n\
    \                count = count + 1\n                \n            if char == substring[32]\n\
    \                count = count + 1\n                \n            if char == substring[33]\n\
    \                count = count + 1\n                \n"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
