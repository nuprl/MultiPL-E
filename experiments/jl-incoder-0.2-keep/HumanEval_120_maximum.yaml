name: HumanEval_120_maximum
language: julia
prompt: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
  \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
  \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n\
  \    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\
  \n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n     \
  \   Output: [2]\n\n    Note:\n        1. The length of the array will be in the\
  \ range of [1, 1000].\n        2. The elements in the array will be in the range\
  \ of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\nfunction maximum(arr::Vector{Int64},\
  \ k::Int64)::Vector{Int64} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
  \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
  \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
  \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2,\
  \ 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5,\
  \ 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
  \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
  \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\n\
  end\n"
completions: ["    maximum = arr\n    for i = 2:k\n        maximum = maximum(maximum(maximum.-arr),\
    \ maximum)\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 3)\n</cell>\n<text>\n4.3 Find Minimum", "    if k == 0 \n       \
    \ return arr\n    \n    maximums = maximum(arr[1:k], k-1)\n    maximums = [maximums[i]\
    \ + arr[i] if maximums[i] != -Inf else maximums[i] \n                 for i in\
    \ 1:length(maximums)]\n    maximums = maximum(maximums, k)\n    return maximums\n\
    end\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 3)\n</cell>\n<text>\n7.\
    \ \u6700\u5C0F\u503C", "    maximum = arr\n    for i = 1:k\n        maximum =\
    \ maximum(maximum(maximum, arr), arr)\n    end\n    maximum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmaximum(arr, k)\n</cell>\n<text>\n4. Sort an array", " \
    \   maximum = arr\n    for i = 1:k\n        maximum = maximum(maximum(maximum,\
    \ arr), maximum)\n    end\n    maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, k)\n</cell>\n<text>\nmaximum", "    if k == 0 \n        return arr\n\
    \    \n    if k == 1 \n        return arr\n    \n    maximum = maximum(maximum(arr,\
    \ k-1), k-1)\n    maximum = maximum(maximum, arr)\n    \n    return maximum\n\
    end", "    maximum = arr\n    for i = 1:k\n        maximum = maximum(maximum(maximum,\
    \ arr[i]), arr[i+1])\n    end\n    return maximum\nend", "    maximum = arr\n\
    \    for i = 1:k\n        maximum = maximum(maximum(maximum, arr), arr)\n    end\n\
    \    return maximum\nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr, k)\n\
    </cell>\n<text>\n10.4 \u6700\u5C0F\u503C", "    maximum = arr\n    for i = 1:k\n\
    \        maximum = maximum(maximum(maximum, arr), maximum)\n    end\n    return\
    \ maximum\nend", "    if k == 0 \n        return arr \n    else \n        maximum\
    \ = maximum([maximum(arr, k-1), maximum(arr[k:], k-1)], k-1) \n        maximum\
    \ = maximum[minimum(maximum, k-1):end]\n        return maximum\nend\n</cell>\n\
    <code language=julia-1.0>\nmaximum(arr, 3)\n</cell>\n<text>\n ", "    maximums\
    \ = Vector{Int64}()\n    maximums.push(maximum(arr, 1))\n    for i = 2:k\n   \
    \     maximums.push(maximum(maximums, i))\n    end\n    return maximums\nend\n\
    </cell>\n<code language=julia-1.5>\nmaximum(arr, 3)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that finds the minimum number in a given array of integers.\
    \ \nThe function should take in a vector of integers and return a single number.",
  "    maximum = arr\n    for i = 2:k\n        maximum = maximum(maximum(maximum,\
    \ arr), arr[i])\n    end\n    maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 3)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 2)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 4)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 5)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 6)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 7)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 8)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 9)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 10)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 11)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 12)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 13)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 14)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 15)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 16)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 17)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 18)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 19)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 20)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 21)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 22)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 23)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 24)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 25)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 26)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 27)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 28)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 29)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 30)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 31)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 32)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 33)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 34)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, ", "    if k == 0 \n        return arr\n    else \n        maximum\
    \ = maximum(maximum(arr, k-1), k-1)\n        maximum = maximum(maximum, k)\n \
    \       return maximum\nend", "    if k == 0 \n        return arr\n    \n    maximum\
    \ = maximum([arr[k]]) + maximum([arr[k-1]]) if k > 0 else arr[k]\n    maximum\
    \ = maximum([maximum]) + maximum([arr[k-1]]) if k > 1 else arr[k]\n    maximum\
    \ = maximum([maximum]) + maximum([arr[k-1]]) if k > 2 else arr[k]\n    maximum\
    \ = maximum([maximum]) + maximum([arr[k-1]]) if k > 3 else arr[k]\n    maximum\
    \ = maximum([maximum]) + maximum([arr[k-1]]) if k > 4 else arr[k]\n    maximum\
    \ = maximum([maximum]) + maximum([arr[k-1]]) if k > 5 else arr[k]\n    maximum\
    \ = maximum([maximum]) + maximum([arr[k-1]]) if k > 6 else arr[k]\n    maximum\
    \ = maximum([maximum]) + maximum([arr[k-1]]) if k > 7 else arr[k]\n    maximum\
    \ = maximum([maximum]) + maximum([arr[k-1]]) if k > 8 else arr[k]\n    maximum\
    \ = maximum([maximum]) + maximum([arr[k-1]]) if k > 9 else arr[k]\n    maximum\
    \ = maximum([maximum]) + maximum([arr[k-1]]) if k > 10 else arr[k]\n    maximum\
    \ = maximum([maximum]) + maximum([arr[k-1]]) if k > 11 else arr[k]\n    maximum\
    \ = maximum([maximum]) + maximum([arr[k-1]]) if k > 12 else arr[k]\n    maximum\
    \ = maximum([maximum]) + maximum([arr[k-1]]) if k > 13 else arr[k]\n    maximum\
    \ = maximum([maximum]) + maximum([arr[k-1]]) if k > 14 else arr[k]\n    maximum\
    \ = maximum([maximum]) + maximum([arr[k-1]]) if k > 15 else arr[k]\n    maximum\
    \ = maximum([maximum]) + maximum([arr[k-1]]) if k > 16 else arr[k]\n    maximum\
    \ = maximum([maximum]) + maximum([arr[k-1]]) if k > 17 else arr[k]\n    maximum\
    \ = maximum([maximum]) + maximum([arr[k-1]]) if k > 18 else arr[k]\n    maximum\
    \ = maximum([maximum]) + maximum([arr[k-1]]) if k > 19 else arr[k]\n    maximum\
    \ = maximum([maximum]) + maximum([arr[k-1]]) if k > 20 else arr[k]\n    maximum\
    \ = maximum([maximum]) + maximum([arr[k-1]]) if k > 21 else arr[k]\n    maximum\
    \ = maximum([maximum]) + maximum([arr[k-1]]) if k > 22 else arr", "    maximum\
    \ = arr\n    for i = 2:k\n        maximum = maximum(maximum(maximum, arr), i)\n\
    \    end\n    maximum\nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 3)\n\
    </cell>\n<text>\nExercise 3", "    maximum = arr\n    for i = 1:k\n        maximum\
    \ = maximum(maximum(maximum, arr[i]), arr[i+1])\n    end\n    return maximum\n\
    end", "    maximums = Vector{Int64}()\n    maximums = maximums.+([arr[i]] for\
    \ i in range(1, k))\n    maximums = maximums.+([arr[i]] for i in range(k+1, length(arr)))\n\
    \    maximums = maximums.+([arr[i]] for i in range(1, length(arr)))\n    maximums\
    \ = maximums.+([arr[i]] for i in range(1, length(arr)))\n    maximums = maximums.+([arr[i]]\
    \ for i in range(1, length(arr)))\n    maximums = maximums.+([arr[i]] for i in\
    \ range(1, length(arr)))\n    maximums = maximums.+([arr[i]] for i in range(1,\
    \ length(arr)))\n    maximums = maximums.+([arr[i]] for i in range(1, length(arr)))\n\
    \    maximums = maximums.+([arr[i]] for i in range(1, length(arr)))\n    maximums\
    \ = maximums.+([arr[i]] for i in range(1, length(arr)))\n    maximums = maximums.+([arr[i]]\
    \ for i in range(1, length(arr)))\n    maximums = maximums.+([arr[i]] for i in\
    \ range(1, length(arr)))\n    maximums = maximums.+([arr[i]] for i in range(1,\
    \ length(arr)))\n    maximums = maximums.+([arr[i]] for i in range(1, length(arr)))\n\
    \    maximums = maximums.+([arr[i]] for i in range(1, length(arr)))\n    maximums\
    \ = maximums.+([arr[i]] for i in range(1, length(arr)))\n    maximums = maximums.+([arr[i]]\
    \ for i in range(1, length(arr)))\n    maximums = maximums.+([arr[i]] for i in\
    \ range(1, length(arr)))\n    maximums = maximums.+([arr[i]] for i in range(1,\
    \ length(arr)))\n    maximums = maximums.+([arr[i]] for i in range(1, length(arr)))\n\
    \    maximums = maximums.+([arr[i]] for i in range(1, length(arr)))\n    maximums\
    \ = maximums.+([arr[i]] for i in range(1, length(arr)))\n    maximums = maximums.+([arr[i]]\
    \ for i in range(1, length(arr)))\n    maximums = maximums.+([arr[i]] for i in\
    \ range(1, length(arr)))\n    maximums = maximums.+([arr[i]] for i in range(1,\
    \ length(arr)))\n    maximums = maximums.+([arr[i]] for i in range(1, length(arr)))\n\
    \    maximums = maximums.+([arr[i]] for i in range(1, length(arr)))\n    maximums\
    \ = maximums.+([arr[i]] for i in range(1, length(arr)))\n    maximums = maximums.+([arr[i]]\
    \ for i in range(1, length(arr)))\n    maximums = maximums.+([arr[i]] for i in\
    \ range(1, length(arr)))\n    maximums = maximums.+([arr[i]] for i in range(1,\
    \ length(arr)))\n    maximums = maximums.+([", "    maximum = arr\n    for i =\
    \ k+1:length(arr)\n        maximum[i] = maximum(maximum, arr[i])\n    end\n  \
    \  return maximum\nend\n</cell>\n<code language=julia-1.0>\nmaximum(arr, 3)\n\
    </cell>\n<text>\n6.3 Find Minimum", "    maximums = Vector{Int64}()\n    for ele\
    \ in arr\n        if ele > maximums[k]\n            maximums[k] = ele\n      \
    \  end\n    end\n    return maximums\nend", "    maximum = arr\n    for i = 1:k\n\
    \        maximum = maximum(maximum(maximum, arr), maximum)\n    end\n    return\
    \ maximum\nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 3)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the minimum number in a given\
    \ array of integers.", "    maximums = Vector{Int64}()\n    maximums.push(maximum(arr,\
    \ 1))\n    maximums.push(maximum(arr, 2))\n    maximums.push(maximum(arr, 3))\n\
    \    maximums.push(maximum(arr, 4))\n    maximums.push(maximum(arr, 5))\n    maximums.push(maximum(arr,\
    \ 6))\n    maximums.push(maximum(arr, 7))\n    maximums.push(maximum(arr, 8))\n\
    \    maximums.push(maximum(arr, 9))\n    maximums.push(maximum(arr, 10))\n   \
    \ maximums.push(maximum(arr, 11))\n    maximums.push(maximum(arr, 12))\n    maximums.push(maximum(arr,\
    \ 13))\n    maximums.push(maximum(arr, 14))\n    maximums.push(maximum(arr, 15))\n\
    \    maximums.push(maximum(arr, 16))\n    maximums.push(maximum(arr, 17))\n  \
    \  maximums.push(maximum(arr, 18))\n    maximums.push(maximum(arr, 19))\n    maximums.push(maximum(arr,\
    \ 20))\n    maximums.push(maximum(arr, 21))\n    maximums.push(maximum(arr, 22))\n\
    \    maximums.push(maximum(arr, 23))\n    maximums.push(maximum(arr, 24))\n  \
    \  maximums.push(maximum(arr, 25))\n    maximums.push(maximum(arr, 26))\n    maximums.push(maximum(arr,\
    \ 27))\n    maximums.push(maximum(arr, 28))\n    maximums.push(maximum(arr, 29))\n\
    \    maximums.push(maximum(arr, 30))\n    maximums.push(maximum(arr, 31))\n  \
    \  maximums.push(maximum(arr, 32))\n    maximums.push(maximum(arr, 33))\n    maximums.push(maximum(arr,\
    \ 34))\n    maximums.push(maximum(arr, 35))\n    maximums.push(maximum(arr, 36))\n\
    \    maximums.push(maximum(arr, 37))\n    maximums.push(maximum(arr, 38))\n  \
    \  maximums.push(maximum(arr, 39))\n    maximums.push(maximum(arr, 40))\n    maximums.push(maximum(arr,\
    \ 41))\n    maximums.push(maximum(arr, 42))\n    maximums.push(maximum(arr, 43))\n\
    \    maximums.push(maximum(arr, 44))\n    maximums.push(maximum(arr, 45))\n  \
    \  maximums.push(maximum(arr, 46))\n    maximums.push(maximum(arr, 47))\n    maximums.push(maximum(arr,\
    \ 48))\n    maximums.push(maximum(arr, 49))\n    maximums.push(maximum(arr, 50))\n\
    \    maximums.push(maximum(arr, 51))\n    maximums.push(maximum(arr, 52))\n  \
    \  maximums.push(maximum(arr, 53))\n    maximums.push(maximum(arr, 54))\n    maximums.push(maximum(arr,\
    \ 55))\n    maximums.push(maximum(arr, 56))\n    maximums.push(maximum(arr, 57))\n\
    \    maximums.push(maximum(arr, 58))\n    maximums.push(maximum(arr, 59))\n  \
    \  maximums.push(maximum(arr, 60))\n    maximums.push(maximum(arr, 61))\n    maximums.push(maximum(arr,\
    \ 62))\n    maximums.push(maximum(arr, 63))\n    maximums.push(maximum(arr, 64))\n\
    \    maximum", "    if k == 0 \n        return arr \n    else \n        maximum\
    \ = maximum(maximum(arr,k-1),k) \n        maximum[end] = maximum(maximum(arr,k-1),k)\
    \ \n        return maximum \nend", "    maximum = arr\n    for i = 1:k\n     \
    \   maximum = maximum(maximum(maximum, arr), arr[i])\n    end\n    maximum\nend\n\
    </cell>\n<code language=julia-1.5>\nmaximum(arr, k)\n</cell>\n<text>\n13. \u6700\
    \u5C0F\u503C", "    maximums = Vector{Int64}()\n    maximums = maximums[-k+1:k+1]\n\
    \    for x in arr\n        if x < maximums[k]\n            maximums[k] = x\n \
    \       end\n    end\n    maximums\nend\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 3)\n</cell>\n<text>\nExercise 3\nWrite a function that takes in an\
    \ array of integers and a positive integer k, and returns a sorted list of length\
    \ k with the minimum k numbers in arr. \nFor example, if the array is [4, -4,\
    \ 4], and k = 3, then the function should return [-4, -4, 4]. \nIf the array is\
    \ [4, -4, 4], and k = 2, then the function should return [4, -4]. \nIf the array\
    \ is [-3, 2, 1, 2, -1, -2, 1], k = 1 (the array has only one element), then the\
    \ function should return [2]. \nIf the array is [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 2, then the function should return [-2, -1, -2, 1, 2].", "    maximum = arr\n\
    \    for i = 2:k\n        maximum = maximum(maximum(maximum.-arr), maximum)\n\
    \    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr,\
    \ k)\n</cell>\n<text>\n6. \u6700\u5C0F\u503C", "    maximum = arr\n    for i =\
    \ 1:k\n        maximum = maximum(maximum(maximum, arr), arr[i])\n    end\n   \
    \ return maximum\nend", "    maximum = arr\n    for i = 1:k\n        maximum =\
    \ maximum(maximum(maximum.-minimum(maximum)))\n    end\n    return maximum\nend",
  "    if k > length(arr) \n        error(\"k should be less than or equal to the\
    \ length of arr\") \n    else \n        maximum = arr \n        for i in 1:k \n\
    \            maximum = maximum(maximum(maximum, arr[i]), arr[i]) \n        end\
    \ \n        return maximum \n    end \nend \n\"\"\"\n    Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n    of length k with\
    \ the minimum k numbers in arr.", "    maximum = arr\n    for i = 1:k\n      \
    \  maximum = maximum(maximum(maximum, arr[i]), arr[i+1])\n    end\n    return\
    \ maximum\nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 3)\n</cell>\n\
    <text>\n6.3 Find Minimum", "    maximum = arr\n    for i = 2:k\n        maximum\
    \ = maximum(maximum(maximum, arr), i)\n    end\n    maximum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmaximum(arr, 3)\n</cell>\n<text>\nProblem 3\nGiven an array\
    \ arr of integers and a positive integer k, return a sorted list \n    of length\
    \ k with the minimum k numbers in arr.", "    if k > length(arr)\n        throw(ArgumentError(\"\
    k must be less than or equal to the length of the array\"))\n    end\n    maximum\
    \ = arr\n    for i = k+1:length(arr)\n        maximum = maximum(maximum(maximum,\
    \ arr[i]), maximum)\n    end\n    return maximum\nend", "    maximum = arr\n \
    \   for i = 1:k\n        maximum = maximum(maximum(maximum, arr), arr)\n    end\n\
    \    return maximum\nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr, k)\n\
    </cell>\n<text>\n13. \u6700\u5C0F\u503C\nGiven an array arr of integers and a\
    \ positive integer k, return a sorted list \n    of length k with the minimum\
    \ k numbers in arr.", "    if k == 0 \n        return arr\n    else \n       \
    \ maximum = maximum(maximum(arr, k-1), k-1)\n        maximum[end] = maximum(maximum(arr,\
    \ k-1), k-1)[end]\n        return maximum\nend", "    maximum = arr\n    for i\
    \ = 2:k\n        maximum = maximum(maximum(maximum, arr), maximum)\n    end\n\
    \    return maximum\nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 3)\n\
    </cell>\n<text>\n4.3 Find Minimum", "    if k == 0 \n        return arr \n   \
    \ else \n        maximum = maximum(maximum(arr, k-1), k) \n        maximum[end]\
    \ = maximum(maximum(arr, k-1), k) \n        return maximum \nend\n</cell>\n<code\
    \ language=julia-1.5>\nmaximum(arr, 3)\n</cell>\n<text>\n7. Kth Smallest Element\
    \ in a BST\nGiven a binary search tree and a value x, find kth smallest element\
    \ in it.", "    maximum = arr\n    for i = 1:k\n        maximum = maximum(maximum(maximum,\
    \ arr), arr)\n    end\n    maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 3)\n</cell>\n<text>\nExercise 2\nWrite a function that accepts an\
    \ array of integers and an integer k, and returns a sorted array with the maximum\
    \ k numbers in arr. \nFor example, given arr = [-3, -4, 5], and k = 3, the function\
    \ should return [-4, -3, 5].", "    maximum = arr\n    for i = 2:k\n        maximum\
    \ = maximum(maximum(maximum.-minimum(maximum)), maximum)\n    end\n    return\
    \ maximum\nend", "    maximum = arr\n    for i = 2:k\n        maximum = maximum(maximum(maximum,\
    \ arr), i)\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.3>\n\
    maximum(arr, 3)\n</cell>\n<text>\nExercise 3\nWrite a function that returns a\
    \ sorted array with the minimum k numbers in arr. \nThe function should work for\
    \ both vectors and matrices.", "    if k > length(arr)\n        return arr\n \
    \   end\n    maximum = arr[k-1]\n    for i = k+1:length(arr)\n        if maximum\
    \ < arr[i]\n            maximum = arr[i]\n        end\n    end\n    return maximum\n\
    end", "    if k == 0 \n        return arr\n    else \n        maximum = maximum.(maximum(arr,\
    \ k-1), k)\n    end\nend\nmaximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k == 0 \n        return arr\n    else \n        maximum = maximum.(maximum(arr,\
    \ k-1), k)\n    end\nend\nmaximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k == 0 \n        return arr\n    else \n        maximum = maximum.(maximum(arr,\
    \ k-1), k)\n    end\nend\nmaximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k == 0 \n        return arr\n    else \n        maximum = maximum.(maximum(arr,\
    \ k-1), k)\n    end\nend\nmaximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k == 0 \n        return arr\n    else \n        maximum = maximum.(maximum(arr,\
    \ k-1), k)\n    end\nend\nmaximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k == 0 \n        return arr\n    else \n        maximum = maximum.(maximum(arr,\
    \ k-1), k)\n    end\nend\nmaximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k == 0 \n        return arr\n    else \n        maximum = maximum.(maximum(arr,\
    \ k-1), k)\n    end\nend\nmaximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k == 0 \n        return arr\n    else \n        maximum = maximum.(maximum(arr,\
    \ k-1), k)\n    end\nend\nmaximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k == 0 \n        return arr\n    else \n        maximum = maximum.(maximum(arr,\
    \ k-1), k)\n    end\nend\nmaximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k == 0 \n        return arr\n    else \n        maximum = maximum.(maximum(arr,\
    \ k-1), k)\n    end\nend\nmaximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\
    \ \n    if k == 0 \n        return arr\n    else \n        maximum = maximum.(maximum(arr,\
    \ k-1), k)\n    end\nend\nmaximum(arr::Vector{Int64}, k::Int64)::Vector", "  \
    \  maximum = arr\n    for i = 2:k\n        maximum = maximum(maximum(maximum.-minimum(maximum)),\
    \ maximum)\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 3)\n</cell>\n<text>\n10.4 Minimum Number", "    maximum = arr\n \
    \   for i = 2:k\n        maximum = maximum(maximum(maximum, arr), i)\n    end\n\
    \    return maximum\nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 3)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that accepts an array arr of integers\
    \ and an integer k and returns the number of times the number arr[k] appears in\
    \ the array arr.", "    if k > length(arr)\n        error(\"k should be less than\
    \ or equal to length(arr)\")\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n\
    \        maximum = maximum(maximum(maximum, arr[i]), maximum)\n    end\n    return\
    \ maximum\nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 3)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the minimum number in a given\
    \ array.", "    if k == 0 \n        return arr\n    \n    maximum = maximum(maximum(arr,\
    \ k-1), k-1)\n    maximum = maximum(maximum, arr)\n    maximum = maximum(maximum,\
    \ k)\n    \n    return maximum\nend", "    if k == 0 \n        return arr \n \
    \   else \n        maximum = maximum(maximum(arr, k-1), k) \n        maximum[end]\
    \ = maximum(maximum(arr, k-1), k) \n        return maximum \nend\n\"\"\"\n   \
    \ Given an array arr of integers and a positive integer k, return a sorted list\
    \ \n    of length k with the minimum k numbers in arr.", "    if k == 0 \n   \
    \     return arr\n    \n    maximum = maximum([maximum(arr[1:k], k-1), maximum(arr[k+1:end],\
    \ k-1)], k-1)\n    maximum = maximum.*(maximum.>arr[k])\n    maximum = maximum.*(maximum.<arr[k])\n\
    \    return maximum\nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 3)\n\
    </cell>\n<text>\nmaximum", "    if k > length(arr) \n        return [] \n    else\
    \ \n        maximum = arr \n        for i = k+1:length(arr) \n            maximum\
    \ = maximum(maximum(maximum, arr[i]), arr[i]) \n        end\n        return maximum\
    \ \n    end\nend", "    if k == 0 \n        return arr\n    else \n        maximum\
    \ = maximum(maximum(arr, k-1), k-1)\n        return maximum\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 3)\n</cell>\n<text>\n4.4 Find Minimum",
  "    maximum = arr\n    for i = 2:k\n        maximum = maximum(maximum(maximum,\
    \ arr), maximum)\n    end\n    return maximum\nend", "    maximum = arr\n    for\
    \ i = 1:k\n        maximum = maximum(maximum(maximum.-minimum(maximum), maximum),\
    \ minimum(maximum))\n    end\n    return maximum\nend", "    if k == 0 \n    \
    \    return arr\n    else \n        maximum = maximum.(maximum(arr, k-1), k)\n\
    \        maximum = maximum.(maximum(arr, k-1), k)\n        return maximum\nend\n\
    \"\"\"\n    Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    of length k with the minimum k numbers in arr.", "    if k\
    \ > length(arr)\n        return arr\n    else\n        maximum = arr\n       \
    \ for i = k+1:length(arr)\n            if maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(",
  "    if k == 0 \n        return arr \n    else \n        maximum = maximum(maximum(arr,\
    \ k-1), k) \n        maximum[end] = maximum(maximum(arr, k-1), k) \n        return\
    \ maximum \nend\n\"\"\"\n    Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    of length k with the minimum k numbers in arr.",
  "    if k == 0 \n        return arr\n    else \n        maximum = maximum(maximum(arr,k-1),k-1)\n\
    \        maximum[end] = maximum(maximum(arr,k-1),k-1)[end]\n        return maximum\n\
    end", "    maximum = arr\n    for i = 1:k\n        maximum = maximum(maximum(maximum,\
    \ arr), arr)\n    end\n    maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 3)\n</cell>\n<text>\n10.3 Find Minimum", "    maximum = arr\n   \
    \ for i = 2:k\n        maximum = maximum(maximum(maximum.-minimum(maximum)), maximum)\n\
    \    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr,\
    \ k)\n</cell>\n<text>\nGreedy Algorithm\nGreedy algorithm is a greedy algorithm\
    \ that always picks the largest element in the array and ignores the other elements.\
    \ It is called greedy because we always pick the largest element and ignore the\
    \ other elements. It is also called greedy because we always pick the largest\
    \ element and ignore the other elements.", "    if k == 0 \n        return arr\
    \ \n    else \n        maximum = maximum.(maximum(arr, k-1), k) \n        maximum[end]\
    \ = maximum(maximum(arr, k-1), k) \n        return maximum \nend", "    if k >\
    \ length(arr) \n        error(\"k should be less than or equal to length(arr)\"\
    )\n    end\n    maximum = arr\n    for i = k+1:length(arr) \n        maximum[i]\
    \ = maximum(maximum[i], arr[i])\n    end\n    return maximum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmaximum(arr, 3)\n</cell>\n<text>\nGreedy Algorithm\nGreedy\
    \ algorithm is a greedy algorithm that always selects the best option in the given\
    \ problem. \nIt always selects the best option in the given problem and does not\
    \ make any assumptions about the \noptimal solution of the problem. \nIt is a\
    \ greedy algorithm because it always selects the best option in the given problem.",
  "    maximum = arr\n    for i = k+1:length(arr)\n        maximum[i] = maximum(maximum,\
    \ arr[i])\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 3)\n</cell>\n<text>\nProblem 7\nWrite a function that returns a sorted\
    \ array of the integers whose absolute value is less than a given number k.",
  "    if k == 0 \n        return arr\n    else \n        maximum = maximum(maximum(arr,k-1),k-1)\n\
    \        return maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(",
  "    maximums = Vector{Int64}()\n    maximums = maximums[-k+1:k+1]\n    for x in\
    \ arr\n        if maximums[-k+1:k+1] \u2264 x \u2264 maximums[k+1]\n         \
    \   maximums[k+1] = x\n        end\n    end\n    maximums\nend", "    maximum\
    \ = arr\n    for i = 2:k\n        maximum = maximum(maximum(maximum, arr), arr[i])\n\
    \    end\n    maximum\nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr, k)\n\
    </cell>\n<text>\n ", "    maximum = arr\n    for i = 2:k\n        maximum = maximum(maximum(maximum,\
    \ arr), i)\n    end\n    return maximum\nend", "    if k == 0 \n        return\
    \ arr \n    else \n        maximum = maximum.(maximum(arr, k-1), k) \n       \
    \ maximum[end] = maximum(maximum(arr, k-1), k) \n        return maximum \nend",
  "    maximum = arr\n    for i = 1:k\n        maximum = maximum(maximum(maximum,\
    \ arr[i]), arr[i+1])\n    end\n    maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 3)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 2)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 4)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 5)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 6)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 7)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 8)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 9)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 10)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 11)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 12)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 13)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 14)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 15)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 16)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 17)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 18)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 19)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 20)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 21)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 22)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 23)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 24)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 25)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 26)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 27)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 28)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 29)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 30)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 31)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 32)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 33)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 34)\n</cell>\n<code language=julia-1.5>\n",
  "    maximum = arr\n    for i = 1:k\n        maximum = maximum(maximum(maximum,\
    \ arr), arr)\n    end\n    maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, k)\n</cell>\n<text>\n\uC624\uBC84\uD50C\uB85C\uC6B0 \uC5F0\uC2B5\uBB38\
    \uC81C 2\n\uC544\uB798 \uCF54\uB4DC\uB294 \uC624\uBC84\uD50C\uB85C\uC6B0 \uC5F0\
    \uC2B5\uBB38\uC81C 2\uC5D0\uC11C \uC2E4\uC81C\uB85C \uC2E4\uD589\uB418\uC5C8\uC2B5\
    \uB2C8\uB2E4. \uC774 \uCF54\uB4DC\uB294 Julia 1.5\uC5D0\uC11C \uC9C0\uC6D0\uB418\
    \uC9C0 \uC54A\uC2B5\uB2C8\uB2E4. \uC624\uBC84\uD50C\uB85C\uC6B0 \uC5F0\uC2B5\uBB38\
    \uC81C 2\uC5D0\uC11C\uB294 \uC544\uB798\uC640 \uAC19\uC774 \uC2E4\uD589\uB418\uC5C8\
    \uC2B5\uB2C8\uB2E4.", "    maximum = arr\n    for i = 1:k\n        maximum = maximum(maximum(maximum,\
    \ arr), arr)\n    end\n    return maximum\nend\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a dscore=1 |>\n<code>", "    if k > length(arr)\n        throw(ArgumentError(\"\
    k must be less than or equal to length(arr)\"))\n    end\n    maximum = arr\n\
    \    for i = 1:k\n        maximum = maximum(maximum(maximum(maximum, maximum),\
    \ maximum), maximum)\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.0>\n\
    maximum(arr, 3)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ minimum number in a given array.", "    maximum = arr\n    for i = 2:k\n   \
    \     maximum = maximum(maximum(maximum, arr), arr[i])\n    end\n    return maximum\n\
    end\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 3)\n</cell>\n<text>\n6.4\
    \ Find Minimum", "    if k == 0 \n        return arr\n    elseif k == 1 \n   \
    \     return arr\n    elseif k == length(arr) \n        return arr\n    else\n\
    \        maximum = maximum(maximum(arr,arr[k-1]),arr[k-1])\n    end\nend\n</cell>\n\
    <code language=julia-1.0>\nmaximum(arr,2)\n</cell>\n<code language=julia-1.0>\n\
    maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(",
  "    if k == 0 \n        return arr\n    \n    maximum = maximum([maximum(arr[1:k],\
    \ k-1), maximum(arr[k+1:end], k-1)], k-1)\n    maximum = [maximum[k], maximum(maximum)]\n\
    \    return maximum\nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 3)\n\
    </cell>\n<text>\nmaximum([-3, -4, 5], 3)", "    if k > length(arr)\n        return\
    \ arr\n    else\n        maximum = arr\n        for i = k+1:length(arr)\n    \
    \        if maximum[i] > maximum[i-1]\n                maximum = maximum[i-1:end]\n\
    \            else\n                maximum = maximum[i-1:end]\n            end\n\
    \        end\n        return maximum\n    end\nend", "    maximum = arr\n    for\
    \ i = 1:k\n        maximum = maximum(maximum(maximum.-arr), maximum)\n    end\n\
    \    return maximum\nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 3)\n\
    </cell>\n<text>\n4. Finding the k-th largest element in an array", "    maximum\
    \ = arr\n    for i = 1:k\n        maximum = maximum(maximum(maximum.max(), maximum.min()),\
    \ maximum.max())\n    end\n    return maximum\nend", "    maximum = arr\n    for\
    \ i = 1:k\n        maximum = maximum(maximum(maximum.-arr))\n    end\n    return\
    \ maximum\nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 3)\n</cell>\n\
    <text>\n4.3 Find Minimum", "    if k > length(arr)\n        error(\"k must be\
    \ less than or equal to length(arr)\")\n    end\n    maximum = arr\n    for i\
    \ in 1:k\n        maximum = maximum(maximum(maximum, arr[i]), arr[i+1])\n    end\n\
    \    return maximum\nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 3)\n\
    </cell>\n<text>\nExercise 4\nWrite a function that takes a vector arr of integers\
    \ and a positive integer k and returns a sorted list of length k with the minimum\
    \ k numbers in arr.", "    maximum = arr\n    for i = 1:k\n        maximum = maximum(maximum(maximum,\
    \ arr), arr)\n    end\n    maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 3)\n</cell>\n<text>\nmaximum", "    maximums = Vector{Int64}()\n\
    \    maximums = maximums[:]\n    maximums = maximums[:]\n    maximums = maximums[:]\n\
    \    maximums = maximums[:]\n    maximums = maximums[:]\n    maximums = maximums[:]\n\
    \    maximums = maximums[:]\n    maximums = maximums[:]\n    maximums = maximums[:]\n\
    \    maximums = maximums[:]\n    maximums = maximums[:]\n    maximums = maximums[:]\n\
    \    maximums = maximums[:]\n    maximums = maximums[:]\n    maximums = maximums[:]\n\
    \    maximums = maximums[:]\n    maximums = maximums[:]\n    maximums = maximums[:]\n\
    \    maximums = maximums[:]\n    maximums = maximums[:]\n    maximums = maximums[:]\n\
    \    maximums = maximums[:]\n    maximums = maximums[:]\n    maximums = maximums[:]\n\
    \    maximums = maximums[:]\n    maximums = maximums[:]\n    maximums = maximums[:]\n\
    \    maximums = maximums[:]\n    maximums = maximums[:]\n    maximums = maximums[:]\n\
    \    maximums = maximums[:]\n    maximums = maximums[:]\n    maximums = maximums[:]\n\
    \    maximums = maximums[:]\n    maximums = maximums[:]\n    maximums = maximums[:]\n\
    \    maximums = maximums[:]\n    maximums = maximums[:]\n    maximums = maximums[:]\n\
    \    maximums = maximums[:]\n    maximums = maximums[:]\n    maximums = maximums[:]\n\
    \    maximums = maximums[:]\n    maximums = maximums[:]\n    maximums = maximums[:]\n\
    \    maximums = maximums[:]\n    maximums = maximums[:]\n    maximums = maximums[:]\n\
    \    maximums = maximums[:]\n    maximums = maximums[:]\n    maximums = maximums[:]\n\
    \    maximums = maximums[:]\n    maximums = maximums[:]\n    maximums = maximums[:]\n\
    \    maximums = maximums[:]\n    maximums = maximums[:]\n    maximums = maximums[:]\n\
    \    maximums = maximums[:]\n    maximums = maximums[:]\n    maximums = maximums[:]\n\
    \    maximums = maximums[:]\n    maximums = maximums[:]\n    maximums = maximums[:]\n\
    \    maximums = maximums[:]\n    maximums = maximums[:]\n    maximums = maximums[:]\n\
    \    maximums = maximums[:]\n    maximums = maximums[:]\n    maximums = maximums[:]\n\
    \    maximums = maximums[:]\n    maximums = maximums[:]\n    maximums = maximums[",
  "    if k == 0 \n        return arr \n    else \n        maximum = maximum(maximum(arr,\
    \ k-1), k) \n        maximum[end] = maximum(maximum(arr, k-1), k) \n        return\
    \ maximum \nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 3)\n</cell>\n\
    <text>\nThe maximum of a vector is the element in the vector with the highest\
    \ value.", "    if k == 0 \n        return arr\n    \n    maximum = maximum([arr[i]+i\
    \ for i in 1:k], k-1)\n    maximum = maximum([arr[i]-i for i in 1:k], k-1)\n \
    \   maximum = maximum([maximum, arr[i]], k-1)\n    return maximum\nend", "   \
    \ maximum = arr\n    for i = 1:k\n        maximum = maximum(maximum(maximum, arr[i]),\
    \ arr[i+1])\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 3)\n</cell>\n<text>\nProblem 4\nWrite a function that accepts a string\
    \ and returns a string where all characters have been converted to lowercase and\
    \ all words have been converted to uppercase. Words are separated by spaces.",
  "    maximum = arr\n    for i = k+1:length(arr)\n        maximum = maximum(maximum(maximum,\
    \ arr[i]), maximum)\n    end\n    return maximum\nend\n\"\"\"\n    Given an array\
    \ arr of integers and a positive integer k, return a sorted list \n    of length\
    \ k with the minimum k numbers in arr.", "    if k == 0 \n        return arr\n\
    \    else \n        maximum = maximum(maximum(arr, k-1), k-1)\n        maximum\
    \ = maximum(maximum, k)\n        return maximum\nend\n\"\"\"\n    Given an array\
    \ arr of integers and a positive integer k, return a sorted list \n    of length\
    \ k with the minimum k numbers in arr.", "    maximums = zeros(Int, k)\n    for\
    \ i = 1:k\n        maximums[i] = maximum(maximum(arr, i), k)\n    end\n    return\
    \ maximums\nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr, k)\n</cell>\n\
    <text>\n4. Sort a vector", "    maximums = Vector{Int64}(undef, k)\n    for i\
    \ = 1:k\n        maximums[i] = maximum(arr,i)\n    end\n    return maximums\n\
    end", "    maximum = arr\n    for i = 1:k\n        maximum = maximum(maximum(maximum,\
    \ arr), arr)\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, k)\n</cell>\n<text>\nGreatest Common Divisor", "    maximums = Vector{Int64}()\n\
    \    for x in arr\n        if maximums.length < k\n            maximums.push(x)\n\
    \        else\n            if maximums[maximums.length - 1] < x\n            \
    \    maximums[maximums.length - 1] = x\n            else\n                maximums[maximums.length]\
    \ = x\n            end\n        end\n    end\n    return maximums\nend", "   \
    \ maximums = Vector{Int64}()\n    maximums[k] = arr[k]\n    for i = k+1:length(arr)\n\
    \        if arr[i] > maximums[k]\n            maximums[k] = arr[i]\n        end\n\
    \    end\n    return maximums\nend\n\"\"\"\n    Given an array arr of integers\
    \ and a positive integer k, return a sorted list \n    of length k with the minimum\
    \ k numbers in arr.", "    maximum = arr\n    for i = 2:k\n        maximum = maximum(maximum(maximum.-minimum(maximum)),\
    \ maximum)\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 3)\n</cell>\n<text>\n6. \u6700\u5C0F\u503C\nGiven an array arr of\
    \ integers and a positive integer k, return a sorted list \n    of length k with\
    \ the minimum k numbers in arr.", "    maximum = arr\n    for i = 2:k\n      \
    \  maximum = maximum(maximum(maximum, arr), i)\n    end\n    maximum\nend\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 3)\n</cell>\n<text>\n4. Find the sum of\
    \ all elements in the array", "    maximum = arr\n    for i = 2:k\n        maximum\
    \ = maximum(maximum(maximum, arr), arr[i])\n    end\n    maximum\nend\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 3)\n</cell>\n<text>\nmaximum", "    maximum\
    \ = arr\n    for i = 1:k\n        maximum = maximum(maximum(maximum, arr), arr)\n\
    \    end\n    maximum\nend\n</cell>\n<code language=julia-1.0>\nmaximum(arr, 3)\n\
    </cell>\n<text>\nmaximum", "    if k > length(arr) \n        error(\"k must be\
    \ less than or equal to length(arr)\")\n    end\n    maximum = arr\n    for i\
    \ = k+1:length(arr) \n        maximum = maximum(maximum(maximum, arr[i]), maximum)\n\
    \    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr,\
    \ 3)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the minimum number\
    \ in a given array of integers. \nThe function should take in a vector of integers\
    \ and return a single integer.", "    maximum = zeros(Int64, k)\n    maximum[arr\
    \ .== maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(",
  "    maximum = zeros(Int64, k)\n    maximum[minimum(arr, k)] = maximum[minimum(arr,\
    \ k)] \n    for i = minimum(arr, k) + 1:length(arr)\n        maximum[i] = maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(",
  "    if k == 0 \n        return arr \n    else \n        maximum = maximum(maximum(arr,k-1),k)\
    \ \n        maximum[end] = maximum(arr[end],k) \n        return maximum \nend\n\
    </cell>\n<code language=julia-1.3>\nmaximum(arr, 3)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the minimum number in a given array of numbers.",
  "    maximum = arr\n    for i = 1:k\n        maximum = maximum(maximum(maximum,\
    \ arr), arr)\n    end\n    return maximum\nend", "    if k > length(arr)\n   \
    \     throw(ArgumentError(\"k must be less than or equal to length(arr)\"))\n\
    \    end\n    maximum = arr\n    for i = k+1:length(arr)\n        if maximum[i]\
    \ > maximum[i-1]\n            maximum = maximum[i-1:end]\n        else\n     \
    \       push!(maximum, maximum[i])\n        end\n    end\n    return maximum\n\
    end\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 3)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector of integers and a positive integer k\
    \ and returns the k largest elements of the vector.", "    if k == 0 \n      \
    \  return arr\n    else \n        maximum = maximum(maximum(arr, k-1), k-1)\n\
    \        maximum = maximum(maximum, k)\n        return maximum\nend", "    maximum\
    \ = arr\n    for i = k+1:length(arr)\n        maximum = maximum(maximum(maximum,\
    \ arr[i]), maximum)\n    end\n    return maximum\nend", "    if k > length(arr)\n\
    \        throw(ArgumentError(\"k must be less than or equal to length(arr)\"))\n\
    \    end\n    maximum = arr\n    for i = k+1:length(arr)\n        maximum = maximum(maximum(maximum,\
    \ arr[i]), maximum)\n    end\n    return maximum\nend", "    if k == 0 \n    \
    \    return arr\n    elseif k == 1 \n        return arr\n    elseif k == 2 \n\
    \        return arr\n    elseif k == length(arr) \n        return arr\n    elseif\
    \ k > length(arr) \n        return maximum(arr, k-1)\n    elseif k == length(arr)-1\
    \ \n        return maximum(arr, k+1)\n    elseif k == length(arr)-2 \n       \
    \ return maximum(maximum(arr, k-1), k+1)\n    elseif k == length(arr)-3 \n   \
    \     return maximum(maximum(maximum(arr, k-1), k+1), k+1)\n    elseif k == length(arr)-4\
    \ \n        return maximum(maximum(maximum(maximum(arr, k-1), k+1), k+1), k+1)\n\
    \    elseif k == length(arr)-5 \n        return maximum(maximum(maximum(maximum(maximum(arr,\
    \ k-1), k+1), k+1), k+1), k+1)\n    elseif k == length(arr)-6 \n        return\
    \ maximum(maximum(maximum(maximum(maximum(maximum(arr, k-1), k+1), k+1), k+1),\
    \ k+1), k+1)\n    elseif k == length(arr)-7 \n        return maximum(maximum(maximum(maximum(maximum(maximum(maximum(arr,\
    \ k-1), k+1), k+1), k+1), k+1), k+1), k+1)\n    elseif k == length(arr)-8 \n \
    \       return maximum(maximum(maximum(maximum(maximum(maximum(maximum(arr, k-1),\
    \ k+1), k+1), k+1), k+1), k+1), k+1)\n    elseif k == length(arr)-9 \n       \
    \ return maximum(maximum(maximum(maximum(maximum(maximum(maximum(arr, k-1), k+1),\
    \ k+1), k+1), k+1), k+1), k+1), k+1)\n    elseif k == length(arr)-10 \n      \
    \  return maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(arr,\
    \ k-1), k+1), k+1), k+1), k+1), k+1), k+1), k+1), k+1)\n    elseif k == length(arr)-11\
    \ \n        return maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(arr,\
    \ k-1), k+1), k+1), k+1), k+1), k+1), k+1), k+1), k+1), k+1)\n    elseif k ==\
    \ length(arr)-12 \n        return maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(arr,\
    \ k-1), k+1), k+1), k+1), k+1), k+1), k+1), k+1), k+1), k+1), k+1)\n    elseif\
    \ k == length(arr)-13 \n        return maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(arr,\
    \ k-1), k+1), k+1), k+1), k+1), k+1), k+1), k+1), k+1), k+1), k+1), k+1), ", " \
    \   maximums = Vector{Int64}()\n    maximums.push(maximum(arr, 0))\n    for i\
    \ = 1:k-1\n        maximums.push(maximum(maximums, i))\n    end\n    return maximums\n\
    end\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 3)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a positive integer k and returns the number of\
    \ numbers in arr that are less than or equal to k.", "    if k == 0 \n       \
    \ return arr\n    else \n        maximum = maximum(maximum(arr,k-1),k-1)\n   \
    \     maximum = maximum(maximum,maximum(arr,k-2),k-1)\n        maximum = maximum(maximum,maximum(arr,k-3),k-1)\n\
    \        return maximum\nend", "    if k > length(arr) \n        error(\"k should\
    \ be less than or equal to length(arr)\") \n    else \n        maximum = arr \n\
    \        for i = k+1:length(arr) \n            maximum[i] = maximum(maximum[i],\
    \ arr[i]) \n        end\n        return maximum \n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmaximum(arr, 3)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that finds the minimum number in a given array. \nThe function should take in\
    \ a vector of integers and return a vector of integers. \nThe function should\
    \ return an error if the length of the vector is less than or equal to 0.", " \
    \   maximum = arr\n    for i = 1:k\n        maximum = maximum(maximum(maximum,\
    \ arr), arr)\n    end\n    maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 3)\n</cell>\n<text>\nmaximum", "    maximum = zeros(Int64, k)\n \
    \   for i = 1:k\n        maximum[i] = maximum(maximum(maximum(arr), maximum[i]),\
    \ maximum[i])\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 3)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ minimum number in a given array.", "    if k == 0 \n        return arr\n   \
    \ else \n        maximum = maximum(maximum(arr,k-1),k-1)\n        maximum = maximum(maximum,maximum(arr,k-2),k-1)\n\
    \        return maximum\nend\n\"\"\"\n    Given an array arr of integers and a\
    \ positive integer k, return a sorted list \n    of length k with the minimum\
    \ k numbers in arr.", "    maximums = Vector{Int64}()\n    maximums = maximums.+(k-1)\n\
    \    maximums = maximums.+maximum(arr,k-1)\n    maximums = maximums.+maximum(arr,k-1)\n\
    \    return maximums[2:end]\nend", "    maximum = arr\n    for i = 1:k\n     \
    \   maximum = maximum(maximum(maximum, arr[i]), arr[i+1])\n    end\n    maximum\n\
    end\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 3)\n</cell>\n<text>\n10.4\
    \ Find Minimum", "    maximum = arr\n    for i = 1:k\n        maximum = maximum(maximum(maximum,\
    \ arr), maximum)\n    end\n    maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, k)\n</cell>\n<text>\n\u6700\u5C0F\u503C", "    if k > length(arr)\n\
    \        return arr\n    else\n        maximum = arr\n        for i = k+1:length(arr)\n\
    \            if maximum[i] > maximum[k-1]\n                maximum = maximum[i-1:end]\n\
    \            else\n                maximum = maximum[k-1:end]\n            end\n\
    \        end\n        return maximum\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 3)\n</cell>\n<text>\n4.3 Find Minimum", "    if k > length(arr)\n\
    \        throw(ArgumentError(\"k must be less than or equal to length(arr)\"))\n\
    \    end\n    maximum = arr\n    for i = 1:k\n        maximum = maximum(maximum(maximum,\
    \ arr[i]))\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 3)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 2)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 4)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 5)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 6)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 7)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 8)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 9)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 10)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 11)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 12)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 13)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 14)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 15)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 16)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 17)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 18)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 19)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 20)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 21)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 22)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 23)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 24)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 25)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 26)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 27)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 28)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 29)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 30)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 31)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 32)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 33)\n</cell>\n\
    <code language=julia-", "    if k == 0 \n        return arr\n    else \n     \
    \   maximum = maximum.(maximum(arr, k-1), k)\n    end\nend", "    if k == 0 \n\
    \        return arr\n    else \n        maximum = maximum(maximum(arr, k-1), k-1)\n\
    \        maximum = maximum(maximum, k)\n        return maximum\nend", "    if\
    \ k > length(arr) \n        error(\"k should be less than or equal to length(arr)\"\
    ) \n    else \n        maximum = arr \n        for i = k+1:length(arr) \n    \
    \        maximum[i] = maximum(maximum[i], arr[i]) \n        endfor \n        return\
    \ maximum \n    end\nend", "    if k == 0 \n        return arr \n    else \n \
    \       maximum = maximum(maximum(arr, k-1), k) \n        maximum[end] = maximum(maximum(arr,\
    \ k-1), k) \n        return maximum \nend\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, k)\n</cell>\n<text>\n4.4 Find Minimum", "    maximum = arr\n    for\
    \ i = 2:k\n        maximum = maximum(maximum(maximum, arr), arr[i])\n    end\n\
    \    maximum\nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 3)\n</cell>\n\
    <text>\n4.3 Find Minimum", "    maximum = arr\n    for i = 2:k\n        maximum\
    \ = maximum(maximum(maximum.-arr), maximum)\n    end\n    return maximum\nend\n\
    </cell>\n<code language=julia-1.5>\nmaximum(arr, k)\n</cell>\n<text>\n4.3 Find\
    \ Minimum", "    if k > length(arr)\n        throw(ArgumentError(\"k must be less\
    \ than or equal to length(arr)\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n\
    \        maximum = maximum(maximum(maximum, arr[i]), maximum)\n    end\n    return\
    \ maximum\nend", "    maximum = arr\n    for i = 1:k\n        maximum = maximum(maximum(maximum,\
    \ arr), arr)\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 3)\n</cell>\n<text>\nmaximum", "    maximum = arr\n    for i = 1:k\n\
    \        maximum = maximum(maximum(maximum, arr), arr)\n    end\n    return maximum\n\
    end\n</cell>\n<code language=julia-1.5>\nmaximum(arr, k)\n</cell>\n<text>\n4.3\
    \ Find Minimum", "    if k == 0 \n        return arr\n    \n    if k == 1 \n \
    \       return maximum.(arr[1:end-1], k)\n    \n    if k == length(arr) \n   \
    \     return maximum.(arr[1:end-1], k)\n    \n    maximum.(arr[1:end-1], k) =\
    \ maximum(maximum(arr[1:end-1], k-1), k)\n    maximum.(arr[1:end-1], k)\nend\n\
    </cell>\n<code language=julia-1.5>\nmaximum(arr, 3)\n</cell>\n<text>\nmaximum.(maximum.(arr,\
    \ 1), 2)", "    maximum = zeros(Int, k)\n    for i = 1:k\n        maximum[i] =\
    \ maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(",
  "    maximum = arr\n    for i = 1:k\n        maximum = maximum(maximum(maximum,\
    \ arr), arr)\n    end\n    return maximum\nend\n</code>\n<|/ a tags=sorting,arrays,julia\
    \ |>\n<| a dscore=0 |>\n<code>", "    if k > length(arr)\n        throw(ArgumentError(\"\
    k must be less than or equal to length(arr)\"))\n    end\n    maximum = arr\n\
    \    for i = length(arr) - k + 1 downto 1\n        maximum = maximum(maximum(maximum,\
    \ arr[i]), maximum)\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 3)\n</cell>\n<text>\nmaximum", "    if k > length(arr) \n       \
    \ error(\"k should be less than or equal to length(arr)\")\n    end", "    maximum\
    \ = arr\n    for i = k+1:length(arr)\n        maximum[i] = maximum(maximum, arr[i])\n\
    \    end\n    return maximum\nend", "    maximum = arr\n    for i = 2:k\n    \
    \    maximum = maximum(maximum(maximum, arr), arr[i])\n    end\n    maximum\n\
    end\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 3)\n</cell>\n<text>\nmaximum()\
    \ is a built-in function in Julia. maximum() returns the maximum element of an\
    \ array. maximum() can also accept a vector as an argument. maximum() returns\
    \ the maximum element of the vector arr. maximum() can also accept a range as\
    \ an argument. maximum() returns the maximum element of the range [first, last].",
  "    maximum = arr\n    for i = 1:k\n        maximum = maximum(maximum(maximum,\
    \ arr), arr)\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 3)\n</cell>\n<text>\n6.4 Find Minimum", "    maximums = Vector{Int64}()\n\
    \    for x in arr\n        if maximums.length < k\n            maximums.push(x)\n\
    \        else\n            if maximums[maximums.length-1] < x\n              \
    \  maximums[maximums.length-1] = x\n            end\n        end\n    end\n  \
    \  return maximums\nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 3)\n\
    </cell>\n<code language=julia-1.5>\nmaximum(arr, 2)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 4)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 5)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 6)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 7)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 8)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 9)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 10)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 11)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 12)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 13)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 14)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 15)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 16)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 17)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 18)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 19)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 20)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 21)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 22)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 23)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 24)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 25)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 26)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 27)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 28)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 29)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 30)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 31)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 32)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 33)", "    maximum = arr\n    for i =\
    \ 2:k\n        maximum = maximum(maximum(maximum, arr), i)\n    end\n    return\
    \ maximum\nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 3)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns a sorted array with the minimum\
    \ k numbers in arr. \nThe function should take in an array of integers and a positive\
    \ integer k as arguments.", "    if k == 0 \n        return arr \n    else \n\
    \        maximum = maximum(maximum(arr, k-1), k) \n        maximum = maximum(maximum,\
    \ minimum(arr, k)) \n        return maximum \nend", "    maximums = Vector{Int64}()\n\
    \    maximums = maximums[-k+1:k+1]\n    maximums[end] = maximum(arr[end+1:end+k],\
    \ k)\n    maximums\nend", "    if k == 0 \n        return arr \n    else \n  \
    \      maximum = maximum(maximum(arr, k-1), k) \n        maximum[end] = maximum(arr[end],\
    \ k) \n        return maximum \nend\n</code>\n<|/ a tags=arrays,sorting,julia\
    \ |>\n<| a dscore=0 |>\nI wrote a Julia package called ArrayTools.jl that provides\
    \ many useful array manipulation functions. Here is a simple example of how to\
    \ use it:\n<code>\njulia> using ArrayTools", "    if k == 0 \n        return arr\n\
    \    else \n        maximum = maximum(maximum(arr,k-1),k-1)\n        maximum =\
    \ maximum(maximum(maximum,k-1),k-1)\n        maximum = maximum(maximum(maximum,k-1),k-1)\n\
    \        maximum = maximum(maximum(maximum,k-1),k-1)\n        maximum = maximum(maximum(maximum,k-1),k-1)\n\
    \        maximum = maximum(maximum(maximum,k-1),k-1)\n        maximum = maximum(maximum(maximum,k-1),k-1)\n\
    \        maximum = maximum(maximum(maximum,k-1),k-1)\n        maximum = maximum(maximum(maximum,k-1),k-1)\n\
    \        maximum = maximum(maximum(maximum,k-1),k-1)\n        maximum = maximum(maximum(maximum,k-1),k-1)\n\
    \        maximum = maximum(maximum(maximum,k-1),k-1)\n        maximum = maximum(maximum(maximum,k-1),k-1)\n\
    \        maximum = maximum(maximum(maximum,k-1),k-1)\n        maximum = maximum(maximum(maximum,k-1),k-1)\n\
    \        maximum = maximum(maximum(maximum,k-1),k-1)\n        maximum = maximum(maximum(maximum,k-1),k-1)\n\
    \        maximum = maximum(maximum(maximum,k-1),k-1)\n        maximum = maximum(maximum(maximum,k-1),k-1)\n\
    \        maximum = maximum(maximum(maximum,k-1),k-1)\n        maximum = maximum(maximum(maximum,k-1),k-1)\n\
    \        maximum = maximum(maximum(maximum,k-1),k-1)\n        maximum = maximum(maximum(maximum,k-1),k-1)\n\
    \        maximum = maximum(maximum(maximum,k-1),k-1)\n        maximum = maximum(maximum(maximum,k-1),k-1)\n\
    \        maximum = maximum(maximum(maximum,k-1),k-1)\n        maximum = maximum(maximum(maximum,k-1),k-1)\n\
    \        maximum = maximum(maximum(maximum,k-1),k-1)\n        maximum = maximum(maximum(maximum,k-1),k-1)\n\
    \        maximum = maximum(maximum(maximum,k-1),k-1)\n        maximum = maximum(maximum(maximum,k-1),k-1)\n\
    \        maximum = maximum(maximum(maximum,k-1),k-1)\n        maximum = maximum(maximum(maximum,k-1),k-1)\n\
    \        maximum = maximum(maximum(maximum,k-1),k-1)\n        maximum = maximum(maximum(maximum,k-1),k-1)\n\
    \        maximum = maximum(maximum(maximum,k-1),k-1)\n        maximum = maximum(maximum(maximum,k-1),k-1)\n\
    \        maximum = maximum(maximum(maximum,k-1),k-1)\n        maximum = maximum(maximum(maximum,k-1),k-1)\n\
    \        maximum = maximum(maximum(maximum,k-1),k-1)\n        maximum = maximum(maximum(maximum,k-1),k-1)\n\
    \        maximum = maximum(maximum(maximum,k-1),", "    maximum = arr\n    for\
    \ i = 1:k\n        maximum = maximum(maximum(maximum, arr), maximum)\n    end\n\
    \    return maximum\nend", "    maximum = arr\n    for i = 1:k\n        maximum\
    \ = maximum(maximum(maximum, arr), arr[i])\n    end\n    return maximum\nend\n\
    </cell>\n<code language=julia-1.5>\nmaximum(arr, k)\n</cell>\n<text>\nmaximum()\
    \ is a built-in function in Julia. maximum() returns the maximum element in a\
    \ given array. maximum() can take in two types of inputs: Vector{Int64} and Array{Int64}.",
  "    maximum = arr\n    for i = 1:k\n        maximum = maximum(maximum(maximum,\
    \ arr), arr)\n    end\n    maximum\nend\n</cell>\n<code language=julia-1.4>\n\
    maximum(arr, 3)\n</cell>\n<text>\n6.4 Find Minimum", "    if k == 0 \n       \
    \ return arr\n    else \n        maximum = maximum(maximum(arr, k-1), k-1)\n \
    \       maximum = maximum(maximum, arr)\n        return maximum\nend", "    if\
    \ k > length(arr) \n        throw(ArgumentError(\"k must be less than or equal\
    \ to the length of arr\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\
    \ \n        maximum = maximum(maximum(maximum, arr[i]), maximum)\n    end\n  \
    \  return maximum\nend", "    maximum = arr\n    for i = 1:k\n        maximum\
    \ = maximum(maximum(maximum, arr), arr)\n    end\n    return maximum\nend\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 3)\n</cell>\n<text>\n5.4 Find Minimum",
  "    if k > length(arr)\n        return arr\n    else\n        maximum = arr\n \
    \       for i = k+1:length(arr)\n            if maximum[i] > maximum[i-1]\n  \
    \              maximum = maximum[i-1:end]\n            else\n                break\n\
    \        end\n        return maximum\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 3)\n</cell>\n<text>\n6. \u6700\u5C0F\u503C", "    maximum = arr\n\
    \    for i = 1:k\n        maximum = maximum(maximum(maximum, arr), arr[i])\n \
    \   end\n    maximum\nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 3)\n\
    </cell>\n<text>\n ", "    if k > length(arr)\n        throw(ArgumentError(\"k\
    \ must be less than or equal to length(arr)\"))\n    end", "    if k == 0 \n \
    \       return arr\n    else \n        maximum = maximum.(maximum(arr,k-1),k)\n\
    \        maximum = maximum.(maximum(maximum(arr,k-1),k-1),k)\n        return maximum\n\
    end\n\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the minimum k numbers in arr.", "    maximum\
    \ = arr\n    for i = 1:k\n        maximum = maximum(maximum(maximum, arr), maximum)\n\
    \    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr,\
    \ 3)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the minimum number\
    \ in a given array.", "    maximum = arr\n    for i = k+1:length(arr)\n      \
    \  if maximum[i] > maximum[i-1]\n            maximum[i] = maximum[i-1]\n     \
    \   else\n            maximum[i] = maximum[i-1]\n        end\n    end\n    return\
    \ maximum\nend\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>", "    if\
    \ k > length(arr) \n        error(\"k should be less than or equal to length(arr)\"\
    ) \n    else \n        maximum = arr \n        for i = k+1:length(arr) \n    \
    \        maximum = maximum(maximum(maximum, arr[i]), maximum) \n        end\n\
    \        return maximum \n    end\nend\n</cell>\n<code language=julia-1.3>\nmaximum(arr,\
    \ 3)\n</cell>\n<text>\n13. \u6700\u5C0F\u503C\nGiven an array arr of integers\
    \ and a positive integer k, return the minimum number in the array.", "    if\
    \ k == 0 \n        return arr\n    else \n        maximum = maximum(maximum(arr,\
    \ k-1), k-1)\n        maximum = maximum(maximum, arr)\n        return maximum\n\
    end", "    maximum = arr\n    for i = 1:k\n        maximum = maximum(maximum(maximum.-minimum(maximum),\
    \ maximum), minimum(maximum))\n    end\n    return maximum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmaximum(arr, k)\n</cell>\n<text>\nProblem 4\nWrite a function\
    \ that returns a sorted array with the minimum k numbers in arr. \nIf there are\
    \ less than k numbers in arr, then the function should return an empty array.",
  "    maximum = arr\n    for i = 1:k\n        maximum = maximum(maximum(maximum,\
    \ arr), arr)\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 3)\n</cell>\n<text>\nExercise 2\nWrite a function that returns a\
    \ sorted array with the minimum k numbers in arr. \nThe function should take in\
    \ a vector arr of integers and a positive integer k. \nThe function should return\
    \ a sorted array with the minimum k numbers in arr.", "    if k == 0 \n      \
    \  return arr \n    else \n        maximum = maximum.(maximum(arr, k-1), k) \n\
    \        maximum[end] = maximum(maximum(arr, k-1), k) \n        return maximum\
    \ \nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 3)\n</cell>\n<text>\n\
    maximum.(maximum(arr, k-1), k)", "    if k > length(arr) \n        return [] \n\
    \    else \n        maximum = arr[k] \n        for i = k+1:length(arr) \n    \
    \        if maximum < arr[i] \n                maximum = arr[i] \n           \
    \ end \n        end \n        return maximum::Vector{Int64} \n    end \nend ",
  "    if k > length(arr) \n        error(\"k should be less than or equal to length(arr)\"\
    )\n    end", "    if k > length(arr)\n        return arr\n    \n    maximum =\
    \ arr[k-1]\n    for i in k+1:length(arr)\n        if maximum < arr[i]\n      \
    \      maximum = arr[i]\n        end\n    end\n    return maximum\nend", "   \
    \ maximum = arr\n    for i = 1:k\n        maximum = maximum(maximum(maximum, arr),\
    \ maximum)\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, k)\n</cell>\n<text>\n4.3 Find Minimum", "    if k > length(arr) \n\
    \        error(\"k should be less than or equal to length(arr)\") \n    else \n\
    \        maximum = arr \n        for i = k+1:length(arr) \n            maximum[i]\
    \ = maximum(maximum, arr[i]) \n        end\n        return maximum \n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 3)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 2)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 4)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, 5)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a positive integer n and returns the number of integers\
    \ from 1 to n that are divisible by 3.", "    maximum = arr\n    for i = 1:k\n\
    \        maximum = maximum(maximum(maximum, arr), arr)\n    end\n    return maximum\n\
    end", "    if k == 0 \n        return arr\n    else \n        maximum = maximum(maximum(arr,k-1),k-1)\n\
    \        maximum = maximum(maximum(maximum,k-1),k-1)\n        return maximum(maximum(maximum,k-1),k-1)\n\
    \    end\nend", "    maximum = arr\n    for i = 2:k\n        maximum = maximum(maximum(maximum.-arr),\
    \ maximum)\n    end\n    return maximum\nend", "    maximum = arr\n    for i =\
    \ 1:k\n        maximum = maximum(maximum(maximum, arr[i]), arr[i+1])\n    end\n\
    \    return maximum\nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr, k)\n\
    </cell>\n<text>\n10.3 Find Minimum", "    if k > length(arr)\n        error(\"\
    k should be less than or equal to length of array\")\n    end\n    maximum = arr\n\
    \    for i in 1:k\n        maximum = maximum(maximum(maximum, arr[i]), arr[i+1])\n\
    \    end\n    return maximum\nend", "    maximum = arr\n    for i = 1:k\n    \
    \    maximum = maximum(maximum(maximum, arr), arr)\n    end\n    maximum\nend\n\
    </cell>\n<code language=julia-1.5>\nmaximum(arr, k)\n</cell>\n<text>\nmaximum",
  "    maximum = arr\n    for i = k+1:length(arr)\n        maximum = maximum(maximum(maximum,\
    \ arr[i]), maximum)\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.0>\n\
    maximum(arr, 3)\n</cell>\n<text>\nExercise 2\nWrite a function that takes in an\
    \ array of integers and a positive integer k, and returns a sorted list of length\
    \ k with the minimum k numbers in arr. \nFor example, given arr = [-3, -4, 5],\
    \ and k = 3, the function should return [-3, -4, -5, 4]. \nThe function should\
    \ return an empty array if k is greater than or equal to the length of the array.",
  "    if k > length(arr)\n        throw(ArgumentError(\"k must be less than or equal\
    \ to length(arr)\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n\
    \        maximum = max(maximum, arr[i])\n    end\n    return maximum\nend", " \
    \   maximum = arr\n    for i = 1:k\n        maximum = maximum(maximum(maximum,\
    \ arr), maximum)\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 3)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ minimum number in the given array. \nThe function should take in a vector of\
    \ integers and return a single integer.", "    if k == 0 \n        return arr\
    \ \n    else \n        maximum = maximum(maximum(arr,k-1),k) \n        maximum[end]\
    \ = maximum(maximum[end],maximum(arr,k-1))[end] \n        return maximum \nend",
  "    maximum = arr\n    for i = 2:k\n        maximum = maximum(maximum(maximum,\
    \ arr), i)\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 3)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ minimum number in a given array.", "    if k == 0 \n        return arr\n   \
    \ else\n        maximum = maximum.(maximum(arr,k-1),k)\n        maximum = maximum.(maximum(maximum(arr,k-1),k-1),k)\n\
    \        maximum = maximum.(maximum(maximum(maximum(arr,k-1),k-1),k-1),k)\n  \
    \      maximum = maximum.(maximum(maximum(maximum(maximum(arr,k-1),k-1),k-1),k-1),k)\n\
    \        maximum = maximum.(maximum(maximum(maximum(maximum(maximum(arr,k-1),k-1),k-1),k-1),k-1),k)\n\
    \        maximum = maximum.(maximum(maximum(maximum(maximum(maximum(maximum(arr,k-1),k-1),k-1),k-1),k-1),k-1),k)\n\
    \        maximum = maximum.(maximum(maximum(maximum(maximum(maximum(maximum(maximum(arr,k-1),k-1),k-1),k-1),k-1),k-1),k-1),k)\n\
    \        maximum = maximum.(maximum(maximum(maximum(maximum(maximum(maximum(maximum(arr,k-1),k-1),k-1),k-1),k-1),k-1),k-1),k)\n\
    \        maximum = maximum.(maximum(maximum(maximum(maximum(maximum(maximum(maximum(arr,k-1),k-1),k-1),k-1),k-1),k-1),k-1),k)\n\
    \        maximum = maximum.(maximum(maximum(maximum(maximum(maximum(maximum(maximum(arr,k-1),k-1),k-1),k-1),k-1),k-1),k-1),k)\n\
    \        maximum = maximum.(maximum(maximum(maximum(maximum(maximum(maximum(maximum(arr,k-1),k-1),k-1),k-1),k-1),k-1),k-1),k)\n\
    \        maximum = maximum.(maximum(maximum(maximum(maximum(maximum(maximum(maximum(arr,k-1),k-1),k-1),k-1),k-1),k-1),k-1),k)\n\
    \        maximum = maximum.(maximum(maximum(maximum(maximum(maximum(maximum(maximum(arr,k-1),k-1),k-1),k-1),k-1),k-1),k-1),k)\n\
    \        maximum = maximum.(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(arr,k-1),k-1),k-1),k-1),k-1),k-1),k-1),k)\n\
    \        maximum = maximum.(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(arr,k-1),k-1),k-1),k-1),k-1),k-1),k-1),k-1),k)\n\
    \        maximum = maximum.(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(arr,k-1),k-1),k-1),k-1),k-1),k-1),k-1),k-1),k)\n\
    \        maximum = maximum.(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(arr,k-1),k-1),k-1),k-1),k-1),k-1),k-1),k-1),k)\n\
    \        maximum = maximum.(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(arr,k-1),k-1),k-1),k-1),k-1),k-1),",
  "    maximum = arr\n    for i = 1:k\n        maximum = maximum(maximum(maximum,\
    \ arr[i]), arr[i+1])\n    end\n    return maximum\nend", "    if k == 0 \n   \
    \     return arr\n    \n    maximum = arr[1]\n    for x in arr[2:end]\n      \
    \  if x > maximum\n            maximum = x\n        end\n    end\n    \n    return\
    \ maximum\nend", "    if k > length(arr)\n        return arr\n    end\n    \n\
    \    maximum = arr\n    for i = 1:k\n        maximum = maximum(maximum(maximum(maximum,\
    \ maximum), maximum), maximum)\n    end\n    return maximum\nend\n</cell>\n<code\
    \ language=julia-1.3>\nmaximum(arr, 3)\n</cell>\n<text>\nmaximum", "    maximum\
    \ = arr\n    for i = 1:k\n        maximum = maximum(maximum(maximum, arr), maximum)\n\
    \    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr,\
    \ 3)\n</cell>\n<text>\nmaximum", "    maximum = arr\n    for i = 2:k\n       \
    \ maximum = maximum(maximum(maximum, arr), i)\n    end\n    return maximum\nend",
  "    if k > length(arr) \n        error(\"k must be less than or equal to length(arr)\"\
    )\n    end\n    maximum = arr\n    for i = k+1:length(arr) \n        maximum[i]\
    \ = maximum(maximum(maximum, arr[i]), maximum[i])\n    end\n    return maximum\n\
    end\n\"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the minimum k numbers in arr.", "    if\
    \ k == 0 \n        return arr \n    else \n        maximum = maximum(maximum(arr,k-1),k)\
    \ \n        maximum[end] = maximum(maximum(arr,k-1),k-1) \n        return maximum\
    \ \nend\n\"\"\"\n    Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n    of length k with the minimum k numbers in arr.",
  "    maximum = arr\n    for i = k+1:length(arr)\n        maximum = maximum(maximum(maximum,\
    \ arr[i]), maximum)\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 3)\n</cell>\n<text>\n6.3 Find Minimum", "    maximum = arr\n    for\
    \ i = 1:k\n        maximum = maximum(maximum(maximum, arr), arr[i])\n    end\n\
    \    maximum\nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 3)\n</cell>\n\
    <text>\n13. \u6700\u5C0F\u503C\nGiven an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the minimum k numbers\
    \ in arr.", "    maximums = Vector{Int64}()\n    maximums = maximums.(arr[k+1:end])\n\
    \    maximums = maximums.(arr[1:k])\n    return maximums\nend", "    maximum =\
    \ arr\n    for i = 2:k\n        maximum = maximum(maximum(maximum.-minimum(maximum),\
    \ maximum), minimum(maximum))\n    end\n    return maximum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmaximum(arr, 3)\n</cell>\n<text>\nProblem 4\nWrite a function\
    \ that returns the minimum number in a given array of numbers.", "    maximums\
    \ = Vector{Int64}()\n    maximums = maximums.+(k-1) * arr\n    maximums = maximums.+k\
    \ * arr\n    maximums = maximums.+k * arr\n    maximums = maximums.+k * arr\n\
    \    maximums = maximums.+k * arr\n    maximums = maximums.+k * arr\n    maximums\
    \ = maximums.+k * arr\n    maximums = maximums.+k * arr\n    maximums = maximums.+k\
    \ * arr\n    maximums = maximums.+k * arr\n    maximums = maximums.+k * arr\n\
    \    maximums = maximums.+k * arr\n    maximums = maximums.+k * arr\n    maximums\
    \ = maximums.+k * arr\n    maximums = maximums.+k * arr\n    maximums = maximums.+k\
    \ * arr\n    maximums = maximums.+k * arr\n    maximums = maximums.+k * arr\n\
    \    maximums = maximums.+k * arr\n    maximums = maximums.+k * arr\n    maximums\
    \ = maximums.+k * arr\n    maximums = maximums.+k * arr\n    maximums = maximums.+k\
    \ * arr\n    maximums = maximums.+k * arr\n    maximums = maximums.+k * arr\n\
    \    maximums = maximums.+k * arr\n    maximums = maximums.+k * arr\n    maximums\
    \ = maximums.+k * arr\n    maximums = maximums.+k * arr\n    maximums = maximums.+k\
    \ * arr\n    maximums = maximums.+k * arr\n    maximums = maximums.+k * arr\n\
    \    maximums = maximums.+k * arr\n    maximums = maximums.+k * arr\n    maximums\
    \ = maximums.+k * arr\n    maximums = maximums.+k * arr\n    maximums = maximums.+k\
    \ * arr\n    maximums = maximums.+k * arr\n    maximums = maximums.+k * arr\n\
    \    maximums = maximums.+k * arr\n    maximums = maximums.+k * arr\n    maximums\
    \ = maximums.+k * arr\n    maximums = maximums.+k * arr\n    maximums = maximums.+k\
    \ * arr\n    maximums = maximums.+k * arr\n    maximums = maximums.+k * arr\n\
    \    maximums = maximums.+k * arr\n    maximums = maximums.+k * arr\n    maximums\
    \ = maximums.+k * arr\n    maximums = maximums.+k * arr\n    ", "    maximum =\
    \ zeros(Int64, k)\n    for i = 1:k\n        maximum[i] = maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(",
  "    if k > length(arr)\n        throw(ArgumentError(\"k must be less than or equal\
    \ to the length of arr\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n\
    \        maximum = maximum(maximum(maximum, arr[i]), maximum)\n    end\n    return\
    \ maximum\nend", "    if k > length(arr)\n        error(\"k should be less than\
    \ or equal to length(arr)\")\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n\
    \        maximum = maximum(maximum(maximum, arr[i]), maximum)\n    end\n    return\
    \ maximum\nend", "    if k > length(arr) \n        error(\"k should be less than\
    \ or equal to length(arr)\") \n    else \n        maximum = arr \n        for\
    \ i in 1:k-1 \n            maximum = maximum(maximum(maximum, arr[i]), arr[i+1])\n\
    \        end\n    end\n    return maximum\nend\n\"\"\"\n    Given an array arr\
    \ of integers and a positive integer k, return a sorted list \n    of length k\
    \ with the minimum k numbers in arr.", "    maximum = arr\n    for i = 1:k\n \
    \       maximum = maximum(maximum(maximum, arr), arr)\n    end\n    return maximum\n\
    end", "    maximum = arr\n    for i = 1:k\n        maximum = maximum(maximum(maximum,\
    \ arr), arr)\n    end\n    maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 3)\n</cell>\n<text>\n13. \u6700\u5C0F\u503C\nGiven an array arr of\
    \ integers, find the minimum value in arr. \nIf there are more than one minimum\
    \ values, return the smallest one.", "    maximum = arr\n    for i = 1:k\n   \
    \     maximum = maximum(maximum(maximum, arr), maximum)\n    end\n    return maximum\n\
    end\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 3)\n</cell>\n<text>\n4.3\
    \ Find Minimum", "    if k == 0 \n        return arr \n    else \n        maximum\
    \ = maximum(maximum(arr, k-1), k) \n        maximum[end] = maximum(maximum(arr,\
    \ k-1), k)[end] \n        return maximum \nend\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 3)\n</cell>\n<text>\nmaximum", "    maximum = arr\n    for i = 1:k\n\
    \        maximum = maximum(maximum(maximum, arr), maximum)\n    end\n    return\
    \ maximum\nend\n</cell>\n<code language=julia-1.3>\nmaximum(arr, k)\n</cell>\n\
    <text>\nQuestion 4\nWrite a function that returns the minimum number in a given\
    \ array.", "    maximums = zeros(Int, k)\n    for i = 1:length(arr)\n        maximums[i]\
    \ = maximum(maximum(maximums, arr[i:]), arr[i:])\n    end\n    return maximums\n\
    end\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 3)\n</cell>\n<text>\n6.3\
    \ Find all duplicates in an array", "    if k == 0 \n        return arr\n    \n\
    \    maximum = maximum(arr[k+1:end], k)\n    maximum = maximum(maximum(maximum,\
    \ arr[k]), k)\n    return maximum\nend", "    maximum = arr\n    for i = k+1:length(arr)\n\
    \        maximum[i] = maximum(maximum, arr[i])\n    end\n    maximum\nend\n</cell>\n\
    <code language=julia-1.5>\nmaximum(arr, k)\n</cell>\n<text>\n4.3 Find Minimum",
  "    maximum = arr\n    for i = 1:k\n        maximum = maximum(maximum(maximum,\
    \ arr), arr)\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 3)\n</cell>\n<text>\nmaximum", "    maximum = arr\n    for i = k+1:length(arr)\n\
    \        maximum[i] = maximum(maximum, arr[i])\n    end\n    return maximum\n\
    end", "    if k == 0 \n        return arr \n    else \n        maximum = maximum(maximum(arr,\
    \ k-1), k) \n        maximum[end] = maximum(arr[end], k) \n        return maximum\
    \ \nend\n</code>\n<|/ a tags=sorting,algorithm,arrays,julia |>\n<| a tags=sorting,algorithm,arrays,julia\
    \ |>\n<code>", "    maximums = Vector{Int64}()\n    maximums = maximums[1:k] .+\
    \ maximums[k]\n    return maximums\nend\n</cell>\n<code language=julia-1.0>\n\
    maximum(arr, 3)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ index of the maximum number in arr when sorted in descending order.", "    maximum\
    \ = arr\n    for i = k+1:length(arr)\n        maximum = maximum(maximum(maximum,\
    \ arr[i]), arr[i+1])\n    end\n    maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 3)\n</cell>\n<text>\nmaximum_by function", "    maximum = arr\n \
    \   for i = k+1:length(arr)\n        maximum = maximum(maximum(maximum, arr[i]),\
    \ maximum)\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 3)\n</cell>\n<text>\nProblem 3\nGiven an array arr of integers, return\
    \ a new array with the largest number in the array \n    repeated k times.", " \
    \   maximum = arr\n    for i = 1:k\n        maximum = maximum(maximum(maximum,\
    \ arr), arr)\n    end\n    maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 3)\n</cell>\n<text>\n4. Find all occurrences of an element in a sorted\
    \ array"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
