name: HumanEval_76_is_simple_power
language: julia
results:
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if is_power_of_two(n)\
    \ == true\n        power = get_power_of_two(n)\n        if x == power\n      \
    \      return true\n        else\n            return false\n    end\n    return\
    \ false\nend\n</cell>\n<code language=julia-1.5>\nis_power_of_two(8)\n</cell>\n\
    <code language=julia-1.5>\nis_power_of_two(9)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(10)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(11)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(12)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(13)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(14)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(15)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(16)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(17)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(18)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(19)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(20)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(21)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(22)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(23)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(24)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(25)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(26)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(27)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(28)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(29)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(30)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(31)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(32)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(33)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(34)\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t\
    @test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9,\
    \ 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) ==\
    \ false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\
    \t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpohqud54p.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpohqud54p.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if is_power_of_two(n)\
    \ && x == n\n    else false\nend\n</cell>\n<code language=julia-1.5>\nis_power_of_two(8)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(9)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(10)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(11)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(12)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(13)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(14)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(15)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(16)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(17)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(18)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(19)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(20)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(21)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(22)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(23)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(24)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(25)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(26)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(27)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(28)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(29)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(30)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(31)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(32)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(33)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(34)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(35)\n\
    </cell>\n<code language=julia-1.5>\nis_power_\nusing Test\n\n@testset begin\n\n\
    candidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpx_n6zx2c.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpx_n6zx2c.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n ==\
    \ 1 \n        then true\n    else if n % x == 0 \n        then true\n    else\
    \ false\n    end\nend\n</cell>\n<code language=julia-1.5>\nis_simple_power(1,\
    \ 4)\n</cell>\n<code language=julia-1.5>\nis_simple_power(2, 2)\n</cell>\n<code\
    \ language=julia-1.5>\nis_simple_power(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    is_simple_power(3, 2)\n</cell>\n<code language=julia-1.5>\nis_simple_power(3,\
    \ 1)\n</cell>\n<code language=julia-1.5>\nis_simple_power(5, 3)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of digits in an integer.\n\
    using Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"true\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp4u82ts3e.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp4u82ts3e.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n==1\
    \ \n        then true\n    else if n==0 \n        then false\n    else if n==-1\
    \ \n        then false\n    else if n==-2\n        then false\n    else if n==-3\n\
    \        then false\n    else if n==-4\n        then false\n    else if n==-5\n\
    \        then false\n    else if n==-6\n        then false\n    else if n==-7\n\
    \        then false\n    else if n==-8\n        then false\n    else if n==-9\n\
    \        then false\n    else if n==-10\n        then false\n    else if n==-11\n\
    \        then false\n    else if n==-12\n        then false\n    else if n==-13\n\
    \        then false\n    else if n==-14\n        then false\n    else if n==-15\n\
    \        then false\n    else if n==-16\n        then false\n    else if n==-17\n\
    \        then false\n    else if n==-18\n        then false\n    else if n==-19\n\
    \        then false\n    else if n==-20\n        then false\n    else if n==-21\n\
    \        then false\n    else if n==-22\n        then false\n    else if n==-23\n\
    \        then false\n    else if n==-24\n        then false\n    else if n==-25\n\
    \        then false\n    else if n==-26\n        then false\n    else if n==-27\n\
    \        then false\n    else if n==-28\n        then false\n    else if n==-29\n\
    \        then false\n    else if n==-30\n        then false\n    else if n==-31\n\
    \        then false\n    else if n==-32\n        then false\n    else if n==-33\n\
    \        then false\n    else if n==-34\n        then false\n    else if n==-35\n\
    \        then false\n    else if n==-36\n        then false\n    else if n==-37\n\
    \        then false\n    else if n==-38\n        then false\n    else if n==-39\n\
    \        then false\n    else if n==-40\n        then false\n    else if n==-41\n\
    \        then false\n    else if n==-42\n        then false\n    else if n==-43\n\
    \        \nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"true\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpr91qvbbb.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpr91qvbbb.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n ==\
    \ 1 \n        then true\n    else if n == 0 \n        then false\n    else if\
    \ n % 2 == 0 \n        then is_simple_power(x, n / 2)\n    else \n        not\
    \ is_simple_power(x, n / 2)\nend\n</cell>\n<code language=julia-1.0>\nis_simple_power(3,\
    \ 2)\n</cell>\n<code language=julia-1.0>\nis_simple_power(3, 1)\n</cell>\n<code\
    \ language=julia-1.0>\nis_simple_power(5, 3)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the number of divisors of a given number. \nThe function\
    \ should work for any positive integer $n$. \nThe function should work for $n=1$\
    \ and $n=0$. \nThe function should work for $n\\in\\mathbb{Z}$. \nThe function\
    \ should work for $n\\in\\mathbb{N}$.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"true\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpw2co0toq.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpw2co0toq.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if is_power_of_two(n)\
    \ == true\n        true\n    else\n        false\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\
    \t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\t\
    @test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24,\
    \ 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6)\
    \ == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmph9eh1onu.jl:24\n  Test threw exception\n\
    \  Expression: candidate(16, 2) == true\n  UndefVarError: is_power_of_two not\
    \ defined\n  Stacktrace:\n   [1] is_simple_power(::Int64, ::Int64) at /tmp/tmph9eh1onu.jl:13\n\
    \   [2] top-level scope at /tmp/tmph9eh1onu.jl:24\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmph9eh1onu.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmph9eh1onu.jl:25\n  Test threw exception\n  Expression: candidate(143214,\
    \ 16) == false\n  UndefVarError: is_power_of_two not defined\n  Stacktrace:\n\
    \   [1] is_simple_power(::Int64, ::Int64) at /tmp/tmph9eh1onu.jl:13\n   [2] top-level\
    \ scope at /tmp/tmph9eh1onu.jl:25\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmph9eh1onu.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmph9eh1onu.jl:26\n  Test threw exception\n  Expression: candidate(4,\
    \ 2) == true\n  UndefVarError: is_power_of_two not defined\n  Stacktrace:\n  \
    \ [1] is_simple_power(::Int64, ::Int64) at /tmp/tmph9eh1onu.jl:13\n   [2] top-level\
    \ scope at /tmp/tmph9eh1onu.jl:26\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmph9eh1onu.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmph9eh1onu.jl:27\n  Test threw exception\n  Expression: candidate(9,\
    \ 3) == true\n  UndefVarError: is_power_of_two not defined\n  Stacktrace:\n  \
    \ [1] is_simple_power(::Int64, ::Int64) at /tmp/tmph9eh1onu.jl:13\n   [2] top-level\
    \ scope at /tmp/tmph9eh1onu.jl:27\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmph9eh1onu.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmph9eh1onu.jl:28\n  Test threw exception\n  Expression: candidate(16,\
    \ 4) == true\n  UndefVarError: is_power_of_two not defined\n  Stacktrace:\n  \
    \ [1] is_simple_power(::Int64, ::Int64) at /tmp/tmph9eh1onu.jl:13\n   [2] top-level\
    \ scope at /tmp/tmph9eh1onu.jl:28\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmph9eh1onu.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmph9eh1onu.jl:29\n  Test threw exception\n  Expression: candidate(24,\
    \ 2) == false\n  UndefVarError: is_power_of_two not defined\n  Stacktrace:\n \
    \  [1] is_simple_power(::Int64, ::Int64) at /tmp/tmph9eh1onu.jl:13\n   [2] top-level\
    \ scope at /tmp/tmph9eh1onu.jl:29\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmph9eh1onu.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmph9eh1onu.jl:30\n  Test threw exception\n  Expression: candidate(128,\
    \ 4) == false\n  UndefVarError: is_power_of_two not defined\n  Stacktrace:\n \
    \  [1] is_simple_power(::Int64, ::Int64) at /tmp/tmph9eh1onu.jl:13\n   [2] top-level\
    \ scope at /tmp/tmph9eh1onu.jl:30\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmph9eh1onu.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmph9eh1onu.jl:31\n  Test threw exception\n  Expression: candidate(12,\
    \ 6) == false\n  UndefVarError: is_power_of_two not defined\n  Stacktrace:\n \
    \  [1] is_simple_power(::Int64, ::Int64) at /tmp/tmph9eh1onu.jl:13\n   [2] top-level\
    \ scope at /tmp/tmph9eh1onu.jl:31\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmph9eh1onu.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmph9eh1onu.jl:32\n  Test threw exception\n  Expression: candidate(1,\
    \ 1) == true\n  UndefVarError: is_power_of_two not defined\n  Stacktrace:\n  \
    \ [1] is_simple_power(::Int64, ::Int64) at /tmp/tmph9eh1onu.jl:13\n   [2] top-level\
    \ scope at /tmp/tmph9eh1onu.jl:32\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmph9eh1onu.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmph9eh1onu.jl:33\n  Test threw exception\n  Expression: candidate(1,\
    \ 12) == true\n  UndefVarError: is_power_of_two not defined\n  Stacktrace:\n \
    \  [1] is_simple_power(::Int64, ::Int64) at /tmp/tmph9eh1onu.jl:13\n   [2] top-level\
    \ scope at /tmp/tmph9eh1onu.jl:33\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmph9eh1onu.jl:23\n  \nTest Summary: | Error \
    \ Total\ntest set      |    10     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 10 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph9eh1onu.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if is_power_of_two(n)\
    \ && x == n\n    else false\nend\n</cell>\n<code language=julia-1.5>\nis_simple_power(1,\
    \ 4)\n</cell>\n<code language=julia-1.5>\nis_simple_power(2, 2)\n</cell>\n<code\
    \ language=julia-1.5>\nis_simple_power(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    is_simple_power(3, 2)\n</cell>\n<code language=julia-1.5>\nis_simple_power(3,\
    \ 1)\n</cell>\n<code language=julia-1.5>\nis_simple_power(5, 3)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns true if a number x is a power of two\
    \ and false in other cases.\nx is a power of two if n**int=x\nFor example:\nis_power_of_two(2)\
    \ => true\nis_power_of_two(8) => true\nis_power_of_two(16) => true\nis_power_of_two(32)\
    \ => false\nis_power_of_two(64) => false\nis_power_of_two(128) => false\nis_power_of_two(256)\
    \ => false\nis_power_of_two(512) => false\nis_power_of_two(1024) => false\nis_power_of_two(2048)\
    \ => false\nis_power_of_two(4096) => false\nis_power_of_two(8192) => false\nis_power_of_two(16384)\
    \ => false\nis_power_of_two(32768) => false\nis_power_of_two(65536) => false\n\
    is_power_of_two(131072) => false\nis_power_of_two(262144) => false\nis_power_of_two(524288)\
    \ => false\nis_power_of_two(1048576) => false\nis_power_of_two(2097152) => false\n\
    is_power_of_two(4194304) => false\nis_power_of_two(8388608) => false\nis_power_of_two(16777216)\
    \ => false\nis_power_of_two(33554432) => false\nis_power_of_two(67108864) => false\n\
    is_power_of_two(134217728) => false\nis_power_of_two(268435456) => false\nis_power_of_two(536870912)\
    \ => false\nis_power_of_two(1073741824) => false\nis_power_of_two(2147483648)\
    \ => false\nis_power_of_two(4294967296) => false\nis_power_of_two(8589934592)\
    \ => false\nis_power_of_two(17179869184) => false\nis_power_of_two(34359738\n\
    using Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfe56xwdx.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfe56xwdx.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n==0\
    \ \n        then return true\n    else if n==1 \n        then return true\n  \
    \  else if n==2 \n        then return x==1\n    else if n==3 \n        then return\
    \ x==1\n    else if n==4 \n        then return x==1\n    else if n==5 \n     \
    \   then return x==1\n    else if n==6 \n        then return x==1\n    else if\
    \ n==7 \n        then return x==1\n    else if n==8 \n        then return x==1\n\
    \    else if n==9 \n        then return x==1\n    else if n==10 \n        then\
    \ return x==1\n    else if n==11 \n        then return x==1\n    else if n==12\
    \ \n        then return x==1\n    else if n==13 \n        then return x==1\n \
    \   else if n==14 \n        then return x==1\n    else if n==15 \n        then\
    \ return x==1\n    else if n==16 \n        then return x==1\n    else if n==17\
    \ \n        then return x==1\n    else if n==18 \n        then return x==1\n \
    \   else if n==19 \n        then return x==1\n    else if n==20 \n        then\
    \ return x==1\n    else if n==21 \n        then return x==1\n    else if n==22\
    \ \n        then return x==1\n    else if n==23 \n        then return x==1\n \
    \   else if n==24 \n        then return x==1\n    else if n==25 \n        then\
    \ return x==1\n    else if n==26 \n        then return x==1\n    else if n==27\
    \ \n        then return x==1\n    else if n==28 \n        then return x==1\n \
    \   else if n==29 \n        then return x==1\n    else if n==30 \n        then\
    \ return x==1\n    else if n==31 \n        then return x==1\n    else if n==32\
    \ \n        then return x==1\n    else if n==33 \n        then return x==1\n \
    \   else if n==34 \n        then return x==1\n    else if n==35 \n        then\
    \ return x==1\n    else if n==36 \n        then return x==1\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t\
    @test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9,\
    \ 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) ==\
    \ false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\
    \t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp_a_bkl23.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp_a_bkl23.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n==1\
    \ \n        true\n    else\n        if n==0 \n            false\n        else\n\
    \            if n%2==0 \n                is_simple_power(x, n/2)\n           \
    \ else\n                if n%3==0 \n                    is_simple_power(x, n/3)\n\
    \                else\n                    if n%5==0 \n                      \
    \  is_simple_power(x, n/5)\n                    else\n                       \
    \ if n%7==0 \n                            is_simple_power(x, n/7)\n          \
    \              else\n                            if n%11==0 \n               \
    \                 is_simple_power(x, n/11)\n                            else\n\
    \                                if n%13==0 \n                               \
    \     is_simple_power(x, n/13)\n                                else\n       \
    \                             if n%17==0 \n                                  \
    \      is_simple_power(x, n/17)\n                                    else\n  \
    \                                      if n%19==0 \n                         \
    \                   is_simple_power(x, n/19)\n                               \
    \         else\n                                            if n%23==0 \n    \
    \                                            is_simple_power(x, n/23)\n      \
    \                                      else\n                                \
    \                if n%29==0 \n                                               \
    \     is_simple_power(x, n/29)\n                                             \
    \   else\n                                                    if n%31==0 \n  \
    \                                                      is_simple_power(x, n/31)\n\
    \                                                    else\n                  \
    \                                      if n%37==0 \n                         \
    \                                   is_simple_power(x, n/37)\n               \
    \                                         else\n                             \
    \                               if n%41==0 \n                                \
    \                                is_simple_power(x, n/41)\n                  \
    \                                          else\n                            \
    \                                    if n%43==0 \n                           \
    \                                         is_simple_power(x, n/43)\n         \
    \                                                       else\n               \
    \                                                     if n%47==0 \n          \
    \                                                              is_simple_power(x,\
    \ n/47)\n                                                                    else\n\
    \                                                                        if n%51==0\
    \ \n                                                                         \
    \   is_simple_power(x, n/51)\n                                               \
    \                         else\n                                             \
    \                               if n%55==0 \n                                \
    \                                                is_simple_power(x, n/55)\n  \
    \                                                                          else\n\
    \                                                                            \
    \    if n%59==0 \n                                                           \
    \                         is_simple_power(x, n/59)\n                         \
    \                                                       else\n               \
    \                                                                     if n%61==0\
    \ \n                                                                         \
    \               is_simple_power(x, n/61)\n                                   \
    \                                                 else\n                     \
    \                                                                   if n%63==0\
    \ \n                                                                         \
    \                   is_simple_power(x, n/63)\n                               \
    \                                                         else\n             \
    \                                                                            \
    \   if n%67==0 \n                                                            \
    \                                    is_simple_power(x, n/67)\n              \
    \                                                                            \
    \  else\n                                                                    \
    \                            if n%71==0 \n                                   \
    \                                                                 is_simple_power(x,\
    \ n/71)\n                                                                    \
    \                            else\n                                          \
    \                                                          if n%73==0 \n     \
    \                                                                            \
    \                       is_simple_power(x, n/73)\n                           \
    \                                                                         else\n\
    \                                                                            \
    \                            if n%77==0 \n                                   \
    \                                                                         is_simple_power(x,\
    \ n/77)\n                                                                    \
    \                                    else\n                                  \
    \                                                                          if\
    \ \nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing condition in \"if\" at /tmp/tmpdhy08qwt.jl:91\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpdhy08qwt.jl:92\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpdhy08qwt.jl:92\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n==1\
    \ \n        then true\n    else \n        if x==n\n            then true\n   \
    \     else \n            if x>n\n                then false\n            else\
    \ \n                if x<n\n                    then false\n                else\
    \ \n                    if x==n-1\n                        then true\n       \
    \             else \n                        if x==n-2\n                     \
    \       then true\n                        else \n                           \
    \ if x==n-3\n                                then true\n                     \
    \       else \n                                if x==n-4\n                   \
    \                 then true\n                                else \n         \
    \                           if x==n-5\n                                      \
    \  then true\n                                    else \n                    \
    \                    if x==n-6\n                                            then\
    \ true\n                                        else \n                      \
    \                      if x==n-7\n                                           \
    \     then true\n                                            else \n         \
    \                                       if x==n-8\n                          \
    \                          then true\n                                       \
    \         else \n                                                    if x==n-9\n\
    \                                                        then true\n         \
    \                                           else \n                          \
    \                              if x==n-10\n                                  \
    \                          then true\n                                       \
    \                 else \n                                                    \
    \        if x==n-11\n                                                        \
    \        then true\n                                                         \
    \   else \n                                                                if\
    \ x==n-12\n                                                                  \
    \  then true\n                                                               \
    \     else \n                                                        if x==n-13\n\
    \                                                            then true\n     \
    \                                                       else \n              \
    \                                                  if x==n-14\n              \
    \                                                      then true\n           \
    \                                                         else \n            \
    \                                            if x==n-15\n                    \
    \                                        then true\n                         \
    \                                   else \n                                  \
    \                              if x==n-16\n                                  \
    \                                  then true\n                               \
    \                                     else \n                                \
    \                        if x==n-17\n                                        \
    \                    then true\n                                             \
    \               else \n                                                      \
    \          if x==n-18\n                                                      \
    \              then true\n                                                   \
    \                 else \n                                                    \
    \    if x==n-19\n                                                            then\
    \ true\n                                                            else \n  \
    \                                                              if x==n-20\n  \
    \                                                                  then true\n\
    \                                                                    else \n \
    \                                                       if x==n-21\n         \
    \                                                   then true\n              \
    \                                              else \n                       \
    \                                         if x==n-22\n                       \
    \                                             then true\n                    \
    \                                                else \n                     \
    \                                   if x==n-23\n                             \
    \                               then true\n                                  \
    \                          else \n                                           \
    \                     if x==n-24\n                                           \
    \                         then true\n                                        \
    \                            else \n                                         \
    \               if x==n-25\n                                                 \
    \           then true\n                                                      \
    \      else \n                                                               \
    \ if x==n-26\n                                                               \
    \     then true\n                                                            \
    \        else \n                                                        if x==n-27\n\
    \                                                            then true\n     \
    \                                                       else \n              \
    \                                                  if x==n-28\n              \
    \                                                      then true\n           \
    \                                                         else \n            \
    \                                            if x==n-29\n                    \
    \                                        then true\n                         \
    \                                   else \n                                  \
    \                              if x==n-30\n                                  \
    \                                  then true\n                               \
    \                                     else \n                                \
    \                        if x==n-31 \n                                       \
    \                     then true\n                                            \
    \                else \n                                                     \
    \           if x==n-32\n                                                     \
    \               then true\n                                                  \
    \                  else \nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"true\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpgfnrr1kd.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpgfnrr1kd.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n ==\
    \ 1 \n        then true\n    else if n % x == 0 \n        then true\n    else\
    \ false\nend\n</cell>\n<code language=julia-1.5>\nis_simple_power(3, 2)\n</cell>\n\
    <code language=julia-1.5>\nis_simple_power(3, 1)\n</cell>\n<code language=julia-1.5>\n\
    is_simple_power(5, 3)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ true if a number x is a power of n and false in other cases.\nx is a power of\
    \ n if n**int=x\nFor example:\nis_power(1, 4) => true\nis_power(2, 2) => true\n\
    is_power(8, 2) => true\nis_power(3, 2) => false\nis_power(3, 1) => false\nis_power(5,\
    \ 3) => false\nHint: use is_simple_power function.\nusing Test\n\n@testset begin\n\
    \ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"true\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp3pr3nqov.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp3pr3nqov.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if is_simple_power(x,\
    \ n) == true \n    then return true\n    else return false\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\nis_simple_power(x::Int64, n::Int64)::Bool\n\
    \    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1,\
    \ 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) =>\
    \ true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n\
    \    is_simple_power(5, 3) => false\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpnvwwii2z.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpnvwwii2z.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n==1\
    \ \n        then true\n    else if n==0\n        then false\n    else if n==-1\n\
    \        then false\n    else if n==-2\n        then false\n    else if n==-3\n\
    \        then false\n    else if n==-4\n        then false\n    else if n==-5\n\
    \        then false\n    else if n==-6\n        then false\n    else if n==-7\n\
    \        then false\n    else if n==-8\n        then false\n    else if n==-9\n\
    \        then false\n    else if n==-10\n        then false\n    else if n==-11\n\
    \        then false\n    else if n==-12\n        then false\n    else if n==-13\n\
    \        then false\n    else if n==-14\n        then false\n    else if n==-15\n\
    \        then false\n    else if n==-16\n        then false\n    else if n==-17\n\
    \        then false\n    else if n==-18\n        then false\n    else if n==-19\n\
    \        then false\n    else if n==-20\n        then false\n    else if n==-21\n\
    \        then false\n    else if n==-22\n        then false\n    else if n==-23\n\
    \        then false\n    else if n==-24\n        then false\n    else if n==-25\n\
    \        then false\n    else if n==-26\n        then false\n    else if n==-27\n\
    \        then false\n    else if n==-28\n        then false\n    else if n==-29\n\
    \        then false\n    else if n==-30\n        then false\n    else if n==-31\n\
    \        then false\n    else if n==-32\n        then false\n    else if n==-33\n\
    \        then false\n    else if n==-34\n        then false\n    else if n==-35\n\
    \        then false\n    else if n==-36\n        then false\n    else if n==-37\n\
    \        then false\n    else if n==-38\n        then false\n    else if n==-39\n\
    \        then false\n    else if n==-40\n        then false\n    else if n==-41\n\
    \        then false\n    else if n==-42\n        then false\n    else if n==-43\n\
    \        \nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"true\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp63hvjymt.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp63hvjymt.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if is_power_of_two(n)\
    \ == true\n        power = get_power_of_two(n)\n        if x == power\n      \
    \      return true\n        else\n            return false\n    end\n    return\
    \ false\nend\n</cell>\n<code language=julia-1.4>\nis_simple_power(1, 4)\n</cell>\n\
    <code language=julia-1.4>\nis_simple_power(2, 2)\n</cell>\n<code language=julia-1.4>\n\
    is_simple_power(8, 2)\n</cell>\n<code language=julia-1.4>\nis_simple_power(3,\
    \ 2)\n</cell>\n<code language=julia-1.4>\nis_simple_power(3, 1)\n</cell>\n<code\
    \ language=julia-1.4>\nis_simple_power(5, 3)\n</cell>\n<text>\nProblem 7\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpb8q6ob7y.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpb8q6ob7y.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if is_power_of_two(n)\
    \ == true\n        true\n    else\n        false\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nis_power_of_two(8)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(9)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(10)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(11)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(12)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(13)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(14)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(15)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(16)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(17)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(18)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(19)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(20)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(21)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(22)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(23)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(24)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(25)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(26)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(27)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(28)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(29)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(30)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(31)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(32)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(33)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(34)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(35)\n</cell>\n<code language=julia-\n\
    using Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpq3kfpgf3.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpq3kfpgf3.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n==1\
    \ \n        then true\n        else if n==x\n            then true\n         \
    \   else false\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns true if a number x is a power of n and false in other cases.\nx is a\
    \ power of n if n**int=x\nFor example:\nis_power(1, 4) => true\nis_power(2, 2)\
    \ => true\nis_power(8, 2) => true\nis_power(3, 2) => false\nis_power(3, 1) =>\
    \ false\nis_power(5, 3) => false\nHint: use is_simple_power() function\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"true\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpjre_t5hg.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpjre_t5hg.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n==1\
    \ \n        return true\n    if n==2 \n        return true\n    if n==3 \n   \
    \     return true\n    if n==4 \n        return true\n    if n==5 \n        return\
    \ true\n    if n==6 \n        return true\n    if n==7 \n        return true\n\
    \    if n==8 \n        return true\n    if n==9 \n        return true\n    if\
    \ n==10 \n        return true\n    if n==11 \n        return true\n    if n==12\
    \ \n        return true\n    if n==13 \n        return true\n    if n==14 \n \
    \       return true\n    if n==15 \n        return true\n    if n==16 \n     \
    \   return true\n    if n==17 \n        return true\n    if n==18 \n        return\
    \ true\n    if n==19 \n        return true\n    if n==20 \n        return true\n\
    \    if n==21 \n        return true\n    if n==22 \n        return true\n    if\
    \ n==23 \n        return true\n    if n==24 \n        return true\n    if n==25\
    \ \n        return true\n    if n==26 \n        return true\n    if n==27 \n \
    \       return true\n    if n==28 \n        return true\n    if n==29 \n     \
    \   return true\n    if n==30 \n        return true\n    if n==31 \n        return\
    \ true\n    if n==32 \n        return true\n    if n==33 \n        return true\n\
    \    if n==34 \n        return true\n    if n==35 \n        return true\n    if\
    \ n==36 \n        return true\n    if n==37 \n        return true\n    if n==38\
    \ \n        return true\n    if n==39 \n        return true\n    if n==40 \n \
    \       return true\n    if n==41 \n        return true\n    if n==42 \n     \
    \   return true\n    if n==43 \n        return true\n    if n==44 \n        return\
    \ true\n    if n==45 \n        return true\n    if n==46 \n        return true\n\
    \    if n==47 \n        return true\n    if n==48 \n        return true\n    if\
    \ n==49 \n        return true\n    if n==50 \n        return true\n    if n==51\
    \ \n        return true\n    if n==52 \n        return true\n    if n==53 \n \
    \       return true\n    if n==54 \n        return true\n    if n==55 \n     \
    \   return true\n    if n==56 \n        return true\n    if n==57 \n        return\
    \ true\n    if n==58 \n        return true\n    if n==59 \n        return true\n\
    \    if n==60 \n        return true\n    if n==61 \n        return true\n    if\
    \ n==6\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpj2ulheu8.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpj2ulheu8.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n ==\
    \ 1 \n        then true\n    else if n % 2 == 0 \n        then is_simple_power(x,\
    \ n/2)\n        else false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    is_simple_power(3, 2)\n</cell>\n<code language=julia-1.5>\nis_simple_power(3,\
    \ 1)\n</cell>\n<code language=julia-1.5>\nis_simple_power(5, 3)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of digits of an integer.\n\
    using Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"true\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp24ur228z.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp24ur228z.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n ==\
    \ 0 \n        then true\n    else if n == 1 \n        then true\n    else if n\
    \ % 2 == 0 \n        then is_simple_power(x, n / 2)\n    else \n        false\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@assert is_simple_power(1,\
    \ 4) == true\n@assert is_simple_power(2, 2) == true\n@assert is_simple_power(8,\
    \ 2) == true\n@assert is_simple_power(3, 2) == false\n@assert is_simple_power(3,\
    \ 1) == false\n@assert is_simple_power(5, 3) == false\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns true if a number x is a power of n and false\
    \ in other cases.\nx is a power of n if n**int=x\nFor example:\nis_power_of_two(2)\
    \ => true\nis_power_of_two(8) => true\nis_power_of_two(9) => false\nis_power_of_two(10)\
    \ => false\nis_power_of_two(11) => false\nis_power_of_two(12) => false\nis_power_of_two(13)\
    \ => false\nis_power_of_two(14) => false\nis_power_of_two(15) => false\nis_power_of_two(16)\
    \ => false\nis_power_of_two(17) => false\nis_power_of_two(18) => false\nis_power_of_two(19)\
    \ => false\nis_power_of_two(20) => false\nis_power_of_two(21) => false\nis_power_of_two(22)\
    \ => false\nis_power_of_two(23) => false\nis_power_of_two(24) => false\nis_power_of_two(25)\
    \ => false\nis_power_of_two(26) => false\nis_power_of_two(27) => false\nis_power_of_two(28)\
    \ => false\nis_power_of_two(29) => false\nis_power_of_two(30) => false\nis_power_of_two(31)\
    \ => false\nis_power_of_two(32) => false\nis_power_of_two(33) => false\nis_power_of_two(34)\
    \ => false\nis_power_of_two(35) => false\nis_power_of_two(36) => false\nis_power_of_two(37)\
    \ => false\nis_power_of_two(38) => false\nis_power_of_two(39) => false\nis_power_of_two(40)\
    \ => false\nis_power_of_two(41) => false\nis_power_of_two(42) => false\nis_power_of_two(43)\
    \ => false\nis_power_of_two(44) => false\nis_power_of_two(45) => false\nis_power_of_two\n\
    using Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"true\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpc6jkq3y4.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpc6jkq3y4.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n ==\
    \ 1 \n        then true\n    else if n % x == 0 \n        then is_simple_power(x,\
    \ n-1)\n        else false\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that returns true if the number x is a power of n and false in other\
    \ cases.\nx is a power of n if n**int=x\nFor example:\nis_power(1, 4) => true\n\
    is_power(2, 2) => true\nis_power(8, 2) => true\nis_power(3, 2) => false\nis_power(3,\
    \ 1) => false\nis_power(5, 3) => false\nHint: Use is_simple_power to solve this\
    \ exercise.\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t\
    @test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4,\
    \ 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"true\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp0232emq2.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp0232emq2.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n ==\
    \ 1 \n        then return true\n    else if n % x == 0 \n        then return true\n\
    \    else return false\nend\n</cell>\n<code language=julia-1.4>\nis_simple_power(3,\
    \ 2)\n</cell>\n<code language=julia-1.4>\nis_simple_power(3, 1)\n</cell>\n<code\
    \ language=julia-1.4>\nis_simple_power(5, 3)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the number of digits in an integer.\nusing Test\n\n\
    @testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\
    \t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\t\
    @test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24,\
    \ 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6)\
    \ == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp_56dkp3g.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp_56dkp3g.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if is_power_of_two(n)\
    \ == true \n        then x == n**int(x) else false\n    else \n        false\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nis_simple_power(3, 2)\n</cell>\n\
    <code language=julia-1.5>\nis_simple_power(3, 1)\n</cell>\n<code language=julia-1.5>\n\
    is_simple_power(5, 3)\n</cell>\n<text>\nProblem 4\nWrite a function that returns\
    \ true if the number n is a power of two, false otherwise.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t\
    @test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9,\
    \ 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) ==\
    \ false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\
    \t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"x\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmps5dnfvyf.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmps5dnfvyf.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if is_power_of_two(n)\
    \ \n        then x == n**x \n        else false\n    else \n        false\nend\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(8)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(9)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(10)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(11)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(12)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(13)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(14)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(15)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(16)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(17)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(18)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(19)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(20)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(21)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(22)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(23)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(24)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(25)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(26)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(27)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(28)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(29)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(30)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(31)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(32)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(33)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(34)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(35)\n</cell\nusing Test\n\n\
    @testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\
    \t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\t\
    @test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24,\
    \ 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6)\
    \ == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"x\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_1ncmzsj.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_1ncmzsj.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if is_power_of_two(n)\
    \ \n        then x == n^n \n        else false \n    else \n        true \nend\n\
    </cell>\n<text>\nExercise 4\nWrite a function that returns true if a number x\
    \ is a power of 2 and\nfalse in other cases.\nx is a power of 2 if 2**int=x\n\
    For example:\nis_power_of_two(2) => true\nis_power_of_two(8) => true\nis_power_of_two(16)\
    \ => false\nis_power_of_two(32) => false\nis_power_of_two(64) => false\nis_power_of_two(128)\
    \ => false\nis_power_of_two(256) => false\nis_power_of_two(512) => false\nis_power_of_two(1024)\
    \ => true\nis_power_of_two(2048) => true\nis_power_of_two(4096) => true\nis_power_of_two(8192)\
    \ => true\nis_power_of_two(16384) => true\nis_power_of_two(32768) => true\nis_power_of_two(65536)\
    \ => true\nis_power_of_two(131072) => true\nis_power_of_two(262144) => true\n\
    is_power_of_two(524288) => true\nis_power_of_two(1048576) => true\nis_power_of_two(2097152)\
    \ => true\nis_power_of_two(4194304) => true\nis_power_of_two(8388608) => true\n\
    is_power_of_two(16777216) => true\nis_power_of_two(33554432) => true\nis_power_of_two(67108864)\
    \ => true\nis_power_of_two(134217728) => true\nis_power_of_two(268435456) => true\n\
    is_power_of_two(536870912) => true\nis_power_of_two(1073741824) => true\nis_power_of_two(2147483648)\
    \ => true\nis_power_of_two(4294967296) => true\nis_power_of_two(8589934592) =>\
    \ true\nis_power_of_two(17179869184) => true\nis_power_of_two(34359738368) =>\
    \ true\nis_power_of_two(68719476736) => true\nis_power_of_two(137438953472) =>\
    \ true\nis_power_of_two(274877906944) => true\nis_power_of_two(549755813888) =>\
    \ true\nis_power_of_two(1099511627776) => true\nis_power_of_two(2199023255552)\
    \ => true\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"x\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpa02u9uz6.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpa02u9uz6.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if is_power_of_two(n)\
    \ == true \n        then return true\n        else return false\n    else \n \
    \       local i = 1\n        while i <= n \n            do \n                if\
    \ x % n == 0 \n                    then return true\n                else return\
    \ false\n            end\n            i = i + 1\n    end\nend\n</cell>\n<code\
    \ language=julia-1.0>\nis_power_of_two(8)\n</cell>\n<code language=julia-1.0>\n\
    is_power_of_two(9)\n</cell>\n<code language=julia-1.0>\nis_power_of_two(10)\n\
    </cell>\n<code language=julia-1.0>\nis_power_of_two(11)\n</cell>\n<code language=julia-1.0>\n\
    is_power_of_two(12)\n</cell>\n<code language=julia-1.0>\nis_power_of_two(13)\n\
    </cell>\n<code language=julia-1.0>\nis_power_of_two(14)\n</cell>\n<code language=julia-1.0>\n\
    is_power_of_two(15)\n</cell>\n<code language=julia-1.0>\nis_power_of_two(16)\n\
    </cell>\n<code language=julia-1.0>\nis_power_of_two(17)\n</cell>\n<code language=julia-1.0>\n\
    is_power_of_two(18)\n</cell>\n<code language=julia-1.0>\nis_power_of_two(19)\n\
    </cell>\n<code language=julia-1.0>\nis_power_of_two(20)\n</cell>\n<code language=julia-1.0>\n\
    is_power_of_two(21)\n</cell>\n<code language=julia-1.0>\nis_power_of_two(22)\n\
    </cell>\n<code language=julia-1.0>\nis_power_of_two(23)\n</cell>\n<code language=julia-1.0>\n\
    is_power_of_two(24)\n</cell>\n<code language=julia-1.0>\nis_power_of_two(25)\n\
    </cell>\n<code language=julia-1.0>\nis_power_of_two(26)\n</cell>\n<code language=julia-1.0>\n\
    is_power_of_two(27)\n</cell>\n<code language=julia-1.0>\nis_power_of_two(28)\n\
    </cell>\n<code language=julia-1.0>\nis_power_of_two(29)\n</cell>\n<code language=julia-1.0>\n\
    is_power_of_two(30)\n</cell>\n<code language=julia-1.0>\nis_power_of_two(31)\n\
    </cell>\n<code language=julia-1.0>\nis_power_of_two(32)\n</cell>\n<code language=julia-1.0>\n\
    is_power_of_two(33)\n</cell>\n<code language=\nusing Test\n\n@testset begin\n\n\
    candidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpylb0kkqo.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpylb0kkqo.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n==1\
    \ \n        then true\n    else if n==2 \n        then true\n    else if n==3\
    \ \n        then true\n    else if n==4 \n        then true\n    else if n==5\
    \ \n        then true\n    else if n==6 \n        then true\n    else if n==7\
    \ \n        then true\n    else if n==8 \n        then true\n    else if n==9\
    \ \n        then true\n    else if n==10 \n        then true\n    else if n==11\
    \ \n        then true\n    else if n==12 \n        then true\n    else if n==13\
    \ \n        then true\n    else if n==14 \n        then true\n    else if n==15\
    \ \n        then true\n    else if n==16 \n        then true\n    else if n==17\
    \ \n        then true\n    else if n==18 \n        then true\n    else if n==19\
    \ \n        then true\n    else if n==20 \n        then true\n    else if n==21\
    \ \n        then true\n    else if n==22 \n        then true\n    else if n==23\
    \ \n        then true\n    else if n==24 \n        then true\n    else if n==25\
    \ \n        then true\n    else if n==26 \n        then true\n    else if n==27\
    \ \n        then true\n    else if n==28 \n        then true\n    else if n==29\
    \ \n        then true\n    else if n==30 \n        then true\n    else if n==31\
    \ \n        then true\n    else if n==32 \n        then true\n    else if n==33\
    \ \n        then true\n    else if n==34 \n        then true\n    else if n==35\
    \ \n        then true\n    else if n==36 \n        then true\n    else if n==37\
    \ \n        then true\n    else if n==38 \n        then true\n    else if n==39\
    \ \n        then true\n    else if n==40 \n        then true\n    else if n==41\
    \ \n        then true\n    else if n==42 \n        then true\n    else if n==43\
    \ \n        then true\n    else if n==44 \n        then true\n    else if n==45\
    \ \n        then true\n    else if n==46 \n        then true\n    \nusing Test\n\
    \n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) ==\
    \ true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\
    \t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24,\
    \ 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6)\
    \ == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"true\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpk9m1imhd.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpk9m1imhd.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if is_power_of_two(n)\
    \ == true\n        power = get_power_of_two(n)\n        if x == power\n      \
    \      return true\n        else\n            return false\n    else\n       \
    \ return false\n    end\nend\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work for\
    \ negative numbers. `is_power_of_two(-2)` returns `true`, but `is_power_of_two(-4)`\
    \ returns `false`.\n<|/ c |>\n<| c |>\nThis doesn't work for negative numbers.\
    \ `is_power_of_two(-2)` returns `true`, but `is_power_of_two(-4)` returns `false`.\n\
    <|/ c |>\n<| c |>\nThis doesn't work for negative numbers. `is_power_of_two(-2)`\
    \ returns `true`, but `is_power_of_two(-4)` returns `false`.\n<|/ c |>\n<| c |>\n\
    This doesn't work for negative numbers. `is_power_of_two(-2)` returns `true`,\
    \ but `is_power_of_two(-4)` returns `false`.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work for negative numbers. `is_power_of_two(-2)` returns `true`, but `is_power_of_two(-4)`\
    \ returns `false`.\n<|/ c |>\n<| a dscore=5 |>\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t\
    @test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9,\
    \ 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) ==\
    \ false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\
    \t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmp0kv6pjrv.jl:15 expected \"\
    end\", got \"else\"\nStacktrace:\n [1] top-level scope at /tmp/tmp0kv6pjrv.jl:19\n\
    \ [2] include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp0kv6pjrv.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n==1\
    \ \n        then return true\n    else \n        x % n == 0\n    end\nend\n</cell>\n\
    <code language=julia-1.3>\nis_simple_power(1, 4)\n</cell>\n<code language=julia-1.3>\n\
    is_simple_power(2, 2)\n</cell>\n<code language=julia-1.3>\nis_simple_power(8,\
    \ 2)\n</cell>\n<code language=julia-1.3>\nis_simple_power(3, 2)\n</cell>\n<code\
    \ language=julia-1.3>\nis_simple_power(3, 1)\n</cell>\n<code language=julia-1.3>\n\
    is_simple_power(5, 3)\n</cell>\n<text>\nProblem 7\nWrite a function that returns\
    \ the number of divisors of a given number. \nThe function should take one argument,\
    \ x, and return a number.\nThe function should return 0 if the number is 0.\n\
    The function should return 1 if the number is 1.\nThe function should return 2\
    \ if the number is 2.\nThe function should return 3 if the number is 3.\nThe function\
    \ should return 4 if the number is 4.\nThe function should return 5 if the number\
    \ is 5.\nThe function should return 6 if the number is 6.\nThe function should\
    \ return 7 if the number is 7.\nThe function should return 8 if the number is\
    \ 8.\nThe function should return 9 if the number is 9.\nThe function should return\
    \ 10 if the number is 10.\nThe function should return 11 if the number is 11.\n\
    The function should return 12 if the number is 12.\nThe function should return\
    \ 13 if the number is 13.\nThe function should return 14 if the number is 14.\n\
    The function should return 15 if the number is 15.\nThe function should return\
    \ 16 if the number is 16.\nThe function should return 17 if the number is 17.\n\
    The function should return 18 if the number is 18.\nThe function should return\
    \ 19 if the number is 19.\nThe function should return 20 if the number is 20.\n\
    The function should return 21 if the number is 21.\nThe function should return\
    \ 22 if the number is 22.\nThe function should return 23 if the number is 23.\n\
    The function should return 24 if the number is 24.\nThe function should return\
    \ 25 if the number is 25.\nThe function should return 26 if the number is 26.\n\
    The function should return 27 if the number is 27.\nThe function should return\
    \ 28 if the number is 28.\nThe function should return 29 if the number is 29.\n\
    The function should return 30 if the number is 30.\nThe function should return\
    \ 31 if the number is 31.\nThe function should return 32 if the number is 32.\n\
    The function should return 33 if the number is 33.\nThe function should return\
    \ 34 if the number is 34.\nThe function should return 35 if the number is 35.\n\
    The function should return 36 if the number is 36.\nThe function should return\
    \ 37 if the number is 37.\nThe function should return 38 if the number is 38.\n\
    The function should return 39 if the number is 39.\n\nusing Test\n\n@testset begin\n\
    \ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpe9phfbjf.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpe9phfbjf.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if is_power_of_two(n)\
    \ == true\n        power = n / 2\n        if x == power\n            return true\n\
    \        else\n            return false\n    else\n        return false\n    end\n\
    end\n</cell>\n<code language=julia-1.3>\nis_power_of_two(8)\n</cell>\n<code language=julia-1.3>\n\
    is_power_of_two(9)\n</cell>\n<code language=julia-1.3>\nis_power_of_two(10)\n\
    </cell>\n<code language=julia-1.3>\nis_power_of_two(11)\n</cell>\n<code language=julia-1.3>\n\
    is_power_of_two(12)\n</cell>\n<code language=julia-1.3>\nis_power_of_two(13)\n\
    </cell>\n<code language=julia-1.3>\nis_power_of_two(14)\n</cell>\n<code language=julia-1.3>\n\
    is_power_of_two(15)\n</cell>\n<code language=julia-1.3>\nis_power_of_two(16)\n\
    </cell>\n<code language=julia-1.3>\nis_power_of_two(17)\n</cell>\n<code language=julia-1.3>\n\
    is_power_of_two(18)\n</cell>\n<code language=julia-1.3>\nis_power_of_two(19)\n\
    </cell>\n<code language=julia-1.3>\nis_power_of_two(20)\n</cell>\n<code language=julia-1.3>\n\
    is_power_of_two(21)\n</cell>\n<code language=julia-1.3>\nis_power_of_two(22)\n\
    </cell>\n<code language=julia-1.3>\nis_power_of_two(23)\n</cell>\n<code language=julia-1.3>\n\
    is_power_of_two(24)\n</cell>\n<code language=julia-1.3>\nis_power_of_two(25)\n\
    </cell>\n<code language=julia-1.3>\nis_power_of_two(26)\n</cell>\n<code language=julia-1.3>\n\
    is_power_of_two(27)\n</cell>\n<code language=julia-1.3>\nis_power_of_two(28)\n\
    </cell>\n<code language=julia-1.3>\nis_power_of_two(29)\n</cell>\n<code language=julia-1.3>\n\
    is_power_of_two(30)\n</cell>\n<code language=julia-1.3>\nis_power_of_two(31)\n\
    </cell>\n<code language=julia-1.3>\nis_power_of_two(32)\n</cell>\n<code language=julia-1.3>\n\
    is_power_of_two(33)\n</cell>\n<code language=julia-1.3>\nis_power_of_two(34)\n\
    </cell>\n<code language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpz5srnav5.jl:15 expected \"\
    end\", got \"else\"\nStacktrace:\n [1] top-level scope at /tmp/tmpz5srnav5.jl:19\n\
    \ [2] include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpz5srnav5.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if is_power_of_two(n)\
    \ == true\n        power = get_power_of_two(n)\n        if x == power\n      \
    \      return true\n        else\n            return false\n    end\n    return\
    \ false\nend\n</cell>\n<code language=julia-1.5>\nis_power_of_two(8)\n</cell>\n\
    <code language=julia-1.5>\nis_power_of_two(9)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(10)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(11)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(12)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(13)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(14)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(15)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(16)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(17)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(18)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(19)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(20)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(21)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(22)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(23)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(24)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(25)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(26)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(27)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(28)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(29)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(30)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(31)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(32)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(33)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(34)\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t\
    @test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9,\
    \ 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) ==\
    \ false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\
    \t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppg_v82lq.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppg_v82lq.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n==1\
    \ \n        then return true\n    else if n==0\n        then return false\n  \
    \  else if n==-1\n        then return false\n    else if n==-2\n        then return\
    \ false\n    else if n==-3\n        then return false\n    else if n==-4\n   \
    \     then return false\n    else if n==-5\n        then return false\n    else\
    \ if n==-6\n        then return false\n    else if n==-7\n        then return\
    \ false\n    else if n==-8\n        then return false\n    else if n==-9\n   \
    \     then return false\n    else if n==-10\n        then return false\n    else\
    \ if n==-11\n        then return false\n    else if n==-12\n        then return\
    \ false\n    else if n==-13\n        then return false\n    else if n==-14\n \
    \       then return false\n    else if n==-15\n        then return false\n   \
    \ else if n==-16\n        then return false\n    else if n==-17\n        then\
    \ return false\n    else if n==-18\n        then return false\n    else if n==-19\n\
    \        then return false\n    else if n==-20\n        then return false\n  \
    \  else if n==-21\n        then return false\n    else if n==-22\n        then\
    \ return false\n    else if n==-23\n        then return false\n    else if n==-24\n\
    \        then return false\n    else if n==-25\n        then return false\n  \
    \  else if n==-26\n        then return false\n    else if n==-27\n        then\
    \ return false\n    else if n==-28\n        then return false\n    else if n==-29\n\
    \        then return false\n    else if n==-30\n        then return false\n  \
    \  else if n==-31\n        then return false\n    else if n==-32\n        then\
    \ return false\n    else if n==-33\n        then return false\n    else if n==-34\n\
    \        then return false\n    else if n==-35\n        then return false\n  \
    \  else if n==-36\n        then return false\n    else if n==-37\n        then\
    \ return false\n    else if n==-38\n        then return false\n    else if n==-39\n\
    \        then return false\n    else if n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp8e3dsjdk.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp8e3dsjdk.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n ==\
    \ 1 \n        then true\n    else if n % x == 0 \n        then true\n    else\
    \ false\nend\n</cell>\n<code language=julia-1.5>\nis_simple_power(1, 4)\n</cell>\n\
    <code language=julia-1.5>\nis_simple_power(2, 2)\n</cell>\n<code language=julia-1.5>\n\
    is_simple_power(8, 2)\n</cell>\n<code language=julia-1.5>\nis_simple_power(3,\
    \ 2)\n</cell>\n<code language=julia-1.5>\nis_simple_power(3, 1)\n</cell>\n<code\
    \ language=julia-1.5>\nis_simple_power(5, 3)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the number of digits of an integer.\nusing Test\n\n\
    @testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\
    \t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\t\
    @test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24,\
    \ 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6)\
    \ == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"true\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpjvkpcvc7.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpjvkpcvc7.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n==1\
    \ \n        then true\n    else \n        (x%n)==0 \n            && is_simple_power(x/n,\
    \ n)\nend\n</cell>\n<code language=julia-1.0>\nis_simple_power(3, 2)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns true if the number x is a power\
    \ of n and false in other cases.\nx is a power of n if n**int=x\nFor example:\n\
    is_power(1, 4) => true\nis_power(2, 2) => true\nis_power(8, 2) => true\nis_power(3,\
    \ 2) => false\nis_power(3, 1) => false\nis_power(5, 3) => false\nHint: use is_simple_power.\n\
    using Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"true\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpxe4r4ol_.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpxe4r4ol_.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n ==\
    \ 1 \n        then true\n    else \n        if x == n\n            then true\n\
    \        else \n            if n % x == 0\n                then is_simple_power(x,\
    \ n//x)\n            else false\nend\n</cell>\n<code language=julia-1.3>\nis_simple_power(3,\
    \ 2)\n</cell>\n<code language=julia-1.3>\nis_simple_power(3, 1)\n</cell>\n<code\
    \ language=julia-1.3>\nis_simple_power(5, 3)\n</cell>\n<text>\nProblem 3\nWrite\
    \ a function that returns the number of digits in an integer.\nusing Test\n\n\
    @testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\
    \t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\t\
    @test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24,\
    \ 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6)\
    \ == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"true\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpnp4nytks.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpnp4nytks.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n==1\
    \ \n        then return true\n    else if n==2 \n        then return x==1\n  \
    \  else if n==3 \n        then return x==1\n    else if n==4 \n        then return\
    \ x==1\n    else if n==5 \n        then return x==1\n    else if n==6 \n     \
    \   then return x==1\n    else if n==7 \n        then return x==1\n    else if\
    \ n==8 \n        then return x==1\n    else if n==9 \n        then return x==1\n\
    \    else if n==10 \n        then return x==1\n    else if n==11 \n        then\
    \ return x==1\n    else if n==12 \n        then return x==1\n    else if n==13\
    \ \n        then return x==1\n    else if n==14 \n        then return x==1\n \
    \   else if n==15 \n        then return x==1\n    else if n==16 \n        then\
    \ return x==1\n    else if n==17 \n        then return x==1\n    else if n==18\
    \ \n        then return x==1\n    else if n==19 \n        then return x==1\n \
    \   else if n==20 \n        then return x==1\n    else if n==21 \n        then\
    \ return x==1\n    else if n==22 \n        then return x==1\n    else if n==23\
    \ \n        then return x==1\n    else if n==24 \n        then return x==1\n \
    \   else if n==25 \n        then return x==1\n    else if n==26 \n        then\
    \ return x==1\n    else if n==27 \n        then return x==1\n    else if n==28\
    \ \n        then return x==1\n    else if n==29 \n        then return x==1\n \
    \   else if n==30 \n        then return x==1\n    else if n==31 \n        then\
    \ return x==1\n    else if n==32 \n        then return x==1\n    else if n==33\
    \ \n        then return x==1\n    else if n==34 \n        then return x==1\n \
    \   else if n==35 \n        then return x==1\n    else if n==36 \n        then\
    \ return x==1\n    else if n==37 \n        then return x\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t\
    @test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9,\
    \ 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) ==\
    \ false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\
    \t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp1w8dfzwe.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp1w8dfzwe.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n ==\
    \ 1 \n        then true\n    else if n % x == 0 \n        then true\n    else\
    \ false\n    end\nend\n</cell>\n<code language=julia-1.4>\nis_simple_power(3,\
    \ 2)\n</cell>\n<code language=julia-1.4>\nis_simple_power(3, 1)\n</cell>\n<code\
    \ language=julia-1.4>\nis_simple_power(5, 3)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the number of digits in an integer.\nusing Test\n\n\
    @testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\
    \t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\t\
    @test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24,\
    \ 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6)\
    \ == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"true\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpxzf6gqua.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpxzf6gqua.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n==1\
    \ \n        then true\n    else if n==2 \n        then true\n    else if n==3\
    \ \n        then true\n    else if n==4 \n        then true\n    else if n==5\
    \ \n        then true\n    else if n==6 \n        then true\n    else if n==7\
    \ \n        then true\n    else if n==8 \n        then true\n    else if n==9\
    \ \n        then true\n    else if n==10 \n        then true\n    else if n==11\
    \ \n        then true\n    else if n==12 \n        then true\n    else if n==13\
    \ \n        then true\n    else if n==14 \n        then true\n    else if n==15\
    \ \n        then true\n    else if n==16 \n        then true\n    else if n==17\
    \ \n        then true\n    else if n==18 \n        then true\n    else if n==19\
    \ \n        then true\n    else if n==20 \n        then true\n    else if n==21\
    \ \n        then true\n    else if n==22 \n        then true\n    else if n==23\
    \ \n        then true\n    else if n==24 \n        then true\n    else if n==25\
    \ \n        then true\n    else if n==26 \n        then true\n    else if n==27\
    \ \n        then true\n    else if n==28 \n        then true\n    else if n==29\
    \ \n        then true\n    else if n==30 \n        then true\n    else if n==31\
    \ \n        then true\n    else if n==32 \n        then true\n    else if n==33\
    \ \n        then true\n    else if n==34 \n        then true\n    else if n==35\
    \ \n        then true\n    else if n==36 \n        then true\n    else if n==37\
    \ \n        then true\n    else if n==38 \n        then true\n    else if n==39\
    \ \n        then true\n    else if n==40 \n        then true\n    else if n==41\
    \ \n        then true\n    else if n==42 \n        then true\n    else if n==43\
    \ \n        then true\n    else if n==44 \n        then true\n    else if n==45\
    \ \n        then true\n    else if n==46 \n        then true\n    \nusing Test\n\
    \n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) ==\
    \ true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\
    \t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24,\
    \ 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6)\
    \ == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"true\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpq5i37x1y.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpq5i37x1y.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n==1\
    \ \n        then true\n    else if n==2 \n        then x==1\n    else if n==3\
    \ \n        then x==1\n    else if n==4 \n        then x==1\n    else if n==5\
    \ \n        then x==1\n    else if n==6 \n        then x==1\n    else if n==7\
    \ \n        then x==1\n    else if n==8 \n        then x==1\n    else if n==9\
    \ \n        then x==1\n    else if n==10 \n        then x==1\n    else if n==11\
    \ \n        then x==1\n    else if n==12 \n        then x==1\n    else if n==13\
    \ \n        then x==1\n    else if n==14 \n        then x==1\n    else if n==15\
    \ \n        then x==1\n    else if n==16 \n        then x==1\n    else if n==17\
    \ \n        then x==1\n    else if n==18 \n        then x==1\n    else if n==19\
    \ \n        then x==1\n    else if n==20 \n        then x==1\n    else if n==21\
    \ \n        then x==1\n    else if n==22 \n        then x==1\n    else if n==23\
    \ \n        then x==1\n    else if n==24 \n        then x==1\n    else if n==25\
    \ \n        then x==1\n    else if n==26 \n        then x==1\n    else if n==27\
    \ \n        then x==1\n    else if n==28 \n        then x==1\n    else if n==29\
    \ \n        then x==1\n    else if n==30 \n        then x==1\n    else if n==31\
    \ \n        then x==1\n    else if n==32 \n        then x==1\n    else if n==33\
    \ \n        then x==1\n    else if n==34 \n        then x==1\n    else if n==35\
    \ \n        then x==1\n    else if n==36 \n        then x==1\n    else if n==37\
    \ \n        then x==1\n    else if n==38 \n        then x==1\n    else if n==39\
    \ \n        then x==1\n    else if n==40 \nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"true\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpu64rit1p.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpu64rit1p.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if is_power_of_two(n)\
    \ == true \n        then x == n**int(x) else false\n    else \n        false\n\
    end\n</cell>\n<code language=julia-1.0>\nis_power_of_two(8)\n</cell>\n<code language=julia-1.0>\n\
    is_power_of_two(9)\n</cell>\n<code language=julia-1.0>\nis_power_of_two(10)\n\
    </cell>\n<code language=julia-1.0>\nis_power_of_two(11)\n</cell>\n<code language=julia-1.0>\n\
    is_power_of_two(12)\n</cell>\n<code language=julia-1.0>\nis_power_of_two(13)\n\
    </cell>\n<code language=julia-1.0>\nis_power_of_two(14)\n</cell>\n<code language=julia-1.0>\n\
    is_power_of_two(15)\n</cell>\n<code language=julia-1.0>\nis_power_of_two(16)\n\
    </cell>\n<code language=julia-1.0>\nis_power_of_two(17)\n</cell>\n<code language=julia-1.0>\n\
    is_power_of_two(18)\n</cell>\n<code language=julia-1.0>\nis_power_of_two(19)\n\
    </cell>\n<code language=julia-1.0>\nis_power_of_two(20)\n</cell>\n<code language=julia-1.0>\n\
    is_power_of_two(21)\n</cell>\n<code language=julia-1.0>\nis_power_of_two(22)\n\
    </cell>\n<code language=julia-1.0>\nis_power_of_two(23)\n</cell>\n<code language=julia-1.0>\n\
    is_power_of_two(24)\n</cell>\n<code language=julia-1.0>\nis_power_of_two(25)\n\
    </cell>\n<code language=julia-1.0>\nis_power_of_two(26)\n</cell>\n<code language=julia-1.0>\n\
    is_power_of_two(27)\n</cell>\n<code language=julia-1.0>\nis_power_of_two(28)\n\
    </cell>\n<code language=julia-1.0>\nis_power_of_two(29)\n</cell>\n<code language=julia-1.0>\n\
    is_power_of_two(30)\n</cell>\n<code language=julia-1.0>\nis_power_of_two(31)\n\
    </cell>\n<code language=julia-1.0>\nis_power_of_two(32)\n</cell>\n<code language=julia-1.0>\n\
    is_power_of_two(33)\n</cell>\n<code language=julia-1.0>\nis_power_of_two(34)\n\
    </cell>\n<code language=julia-1.0>\nis_power_of_two(35)\n</\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t\
    @test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9,\
    \ 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) ==\
    \ false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\
    \t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"x\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkk7o79ly.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpkk7o79ly.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n ==\
    \ 1 \n        then true\n    else if n == 2 \n        then x == 1\n    else if\
    \ n % 2 == 0 \n        then is_simple_power(x, n / 2)\n    else \n        false\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@assert is_simple_power(1,\
    \ 4) == true\n@assert is_simple_power(2, 2) == true\n@assert is_simple_power(8,\
    \ 2) == true\n@assert is_simple_power(3, 2) == false\n@assert is_simple_power(3,\
    \ 1) == false\n@assert is_simple_power(5, 3) == false\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns true if a number x is a power of n and false\
    \ in other cases.\nx is a power of n if n**int=x\nFor example:\nis_power(1, 4)\
    \ => true\nis_power(2, 2) => true\nis_power(8, 2) => true\nis_power(3, 2) => false\n\
    is_power(3, 1) => false\nis_power(5, 3) => false\nHint: You can use the function\
    \ is_simple_power.\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"true\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpjhshi80_.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpjhshi80_.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n==0\
    \ \n        then return true\n    else if n==1 \n        then return x==1\n  \
    \  else \n        x % n == 0 && is_simple_power(x, n-1)\nend\n</cell>\n<code language=julia-1.5>\n\
    is_simple_power(1, 4)\n</cell>\n<code language=julia-1.5>\nis_simple_power(2,\
    \ 2)\n</cell>\n<code language=julia-1.5>\nis_simple_power(8, 2)\n</cell>\n<code\
    \ language=julia-1.5>\nis_simple_power(3, 2)\n</cell>\n<code language=julia-1.5>\n\
    is_simple_power(3, 1)\n</cell>\n<code language=julia-1.5>\nis_simple_power(5,\
    \ 3)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number of\
    \ digits in an integer.\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp1vhsl_eo.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp1vhsl_eo.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n ==\
    \ 1 \n        then true\n    else \n        if n % x == 0 \n            then is_simple_power(x,\
    \ n / x)\n            else false\nend\n</cell>\n<code language=julia-1.3>\nis_simple_power(2,\
    \ 2)\n</cell>\n<code language=julia-1.3>\nis_simple_power(8, 2)\n</cell>\n<code\
    \ language=julia-1.3>\nis_simple_power(3, 2)\n</cell>\n<code language=julia-1.3>\n\
    is_simple_power(3, 1)\n</cell>\n<code language=julia-1.3>\nis_simple_power(5,\
    \ 3)\n</cell>\n<text>\nExercise 2\nWrite a function that returns true if a number\
    \ x is a power of n and false in other cases.\nx is a power of n if n**int=x\n\
    For example:\nis_power(1, 4) => true\nis_power(2, 2) => true\nis_power(8, 2) =>\
    \ true\nis_power(3, 2) => false\nis_power(3, 1) => false\nis_power(5, 3) => false\n\
    Hint: use is_simple_power function.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"true\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpeqra94ym.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpeqra94ym.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n ==\
    \ 0 \n        then return true\n    else if n == 1 \n        then return x ==\
    \ 1\n    else if n % 2 == 0 \n        then return is_simple_power(x, n / 2)\n\
    \    else \n        return is_simple_power(x * x, n / 2)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nis_simple_power(2, 2)\n</cell>\n<code language=julia-1.5>\n\
    is_simple_power(8, 2)\n</cell>\n<code language=julia-1.5>\nis_simple_power(3,\
    \ 2)\n</cell>\n<code language=julia-1.5>\nis_simple_power(3, 1)\n</cell>\n<code\
    \ language=julia-1.5>\nis_simple_power(5, 3)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns true if a number x is a power of n and false in other\
    \ cases.\nx is a power of n if n**int=x\nFor example:\nis_power_of_2(1) => true\n\
    is_power_of_2(2) => true\nis_power_of_2(8) => true\nis_power_of_2(3) => false\n\
    is_power_of_2(5) => false\nis_power_of_2(10) => false\nis_power_of_2(15) => false\n\
    is_power_of_2(20) => false\nis_power_of_2(25) => false\nis_power_of_2(30) => false\n\
    is_power_of_2(35) => false\nis_power_of_2(40) => false\nis_power_of_2(45) => false\n\
    is_power_of_2(50) => false\nis_power_of_2(55) => false\nis_power_of_2(60) => false\n\
    is_power_of_2(65) => false\nis_power_of_2(70) => false\nis_power_of_2(75) => false\n\
    is_power_of_2(80) => false\nis_power_of_2(85) => false\nis_power_of_2(90) => false\n\
    is_power_of_2(95) => false\nis_power_of_2(100) => false\nis_power_of_2(105) =>\
    \ false\nis_power_of_2(110) => false\nis_power_of_2(115) => false\nis_power_of_2(120)\
    \ => false\nis_power_of_2(125) => false\nis_power_of_2(130) => false\nis_power_of_2(135)\
    \ => false\nis_power_of_2(140) => false\nis_power_of_2(145) => false\nis_power_of_2(150)\
    \ => false\nis_power_of_2(155) => false\nis_power_of_2(160) => false\nis_power_of_2(165)\
    \ => false\nis_power_of_2(170) => false\nis_power_of_2(175) => false\nis_power_of_2(180)\
    \ => false\nis_power_of_2(185) => false\nis_power_\nusing Test\n\n@testset begin\n\
    \ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp4k5n46zh.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp4k5n46zh.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n==1\
    \ \n        return true\n    else if n==0\n        return false\n    else\n  \
    \      return is_simple_power(x, n//2)\nend\n</cell>\n<code language=julia-1.5>\n\
    is_simple_power(3, 2)\n</cell>\n<code language=julia-1.5>\nis_simple_power(3,\
    \ 1)\n</cell>\n<code language=julia-1.5>\nis_simple_power(5, 3)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns true if a number x is a power of n and\
    \ false in other cases.\nx is a power of n if n**int=x\nFor example:\nis_power(1,\
    \ 4) => true\nis_power(2, 2) => true\nis_power(8, 2) => true\nis_power(3, 2) =>\
    \ false\nis_power(3, 1) => false\nis_power(5, 3) => false\nHint: use is_simple_power\
    \ function.\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t\
    @test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4,\
    \ 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqce0xywz.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqce0xywz.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n ==\
    \ 0 \n        then return true\n    else if n == 1 \n        then return x ==\
    \ 1\n    else \n        x % n == 0 && is_simple_power(x div n, n-1)\nend\n</cell>\n\
    <code language=julia-1.5>\nis_simple_power(3, 2)\n</cell>\n<code language=julia-1.5>\n\
    is_simple_power(3, 1)\n</cell>\n<code language=julia-1.5>\nis_simple_power(5,\
    \ 3)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number of\
    \ digits in an integer.\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpa12cpohh.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpa12cpohh.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n==1\
    \ \n        then true\n    else if n==2 \n        then true\n    else if n==3\
    \ \n        then true\n    else if n==4 \n        then true\n    else if n==5\
    \ \n        then true\n    else if n==6 \n        then true\n    else if n==7\
    \ \n        then true\n    else if n==8 \n        then true\n    else if n==9\
    \ \n        then true\n    else if n==10 \n        then true\n    else if n==11\
    \ \n        then true\n    else if n==12 \n        then true\n    else if n==13\
    \ \n        then true\n    else if n==14 \n        then true\n    else if n==15\
    \ \n        then true\n    else if n==16 \n        then true\n    else if n==17\
    \ \n        then true\n    else if n==18 \n        then true\n    else if n==19\
    \ \n        then true\n    else if n==20 \n        then true\n    else if n==21\
    \ \n        then true\n    else if n==22 \n        then true\n    else if n==23\
    \ \n        then true\n    else if n==24 \n        then true\n    else if n==25\
    \ \n        then true\n    else if n==26 \n        then true\n    else if n==27\
    \ \n        then true\n    else if n==28 \n        then true\n    else if n==29\
    \ \n        then true\n    else if n==30 \n        then true\n    else if n==31\
    \ \n        then true\n    else if n==32 \n        then true\n    else if n==33\
    \ \n        then true\n    else if n==34 \n        then true\n    else if n==35\
    \ \n        then true\n    else if n==36 \n        then true\n    else if n==37\
    \ \n        then true\n    else if n==38 \n        then true\n    else if n==39\
    \ \n        then true\n    else if n==40 \n        then true\n    else if n==41\
    \ \n        then true\n    else if n==42 \n        then true\n    else if n==43\
    \ \n        then true\n    else if n==44 \n        then true\n    else if n==45\
    \ \n        then true\n    else if n==46 \n        then true\n    \nusing Test\n\
    \n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) ==\
    \ true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\
    \t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24,\
    \ 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6)\
    \ == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"true\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp36ocksb1.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp36ocksb1.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if is_power_of_two(n)\
    \ \n        then x == n\n        else is_simple_power(x, n-1)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nis_simple_power(3, 2)\n</cell>\n<code language=julia-1.5>\n\
    is_simple_power(3, 1)\n</cell>\n<code language=julia-1.5>\nis_simple_power(5,\
    \ 3)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the factorial\
    \ of a given number. \nThe factorial of a number n is the product of all positive\
    \ integers less than or equal to n.\nFor example, 5! = 5 x 4 x 3 x 2 x 1 = 120\n\
    Hint: use recursion.\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"x\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp06kubj7g.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp06kubj7g.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n ==\
    \ 1 \n        then true\n    else if n % x == 0 \n        then is_simple_power(x,\
    \ n-1)\n    else false\nend\n</cell>\n<code language=julia-1.5>\nis_simple_power(3,\
    \ 2)\n</cell>\n<code language=julia-1.5>\nis_simple_power(3, 1)\n</cell>\n<code\
    \ language=julia-1.5>\nis_simple_power(5, 3)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the number of digits in an integer.\n    For example:\n\
    \    digits(123) => 3\n    digits(1234) => 4\n    digits(12345) => 5\n    digits(123456)\
    \ => 6\n    digits(1234567) => 7\n    digits(12345678) => 8\n    digits(123456789)\
    \ => 9\n    digits(1234567890) => 10\n    digits(12345678901) => 11\n    digits(123456789012)\
    \ => 12\n    digits(1234567890123) => 13\n    digits(12345678901234) => 14\n \
    \   digits(123456789012345) => 15\n    digits(1234567890123456) => 16\n    digits(12345678901234567)\
    \ => 17\n    digits(123456789012345678) => 18\n    digits(1234567890123456789)\
    \ => 19\n    digits(12345678901234567890) => 20\n    digits(123456789012345678901)\
    \ => 21\n    digits(1234567890123456789012) => 22\n    digits(12345678901234567890123)\
    \ => 23\n    digits(123456789012345678901234) => 24\n    digits(1234567890123456789012345)\
    \ => 25\n    digits(12345678901234567890123456) => 26\n    digits(123456789012345678901234567)\
    \ => 27\n    digits(1234567890123456789012345678) => 28\n    digits(12345678901234567890123456789)\
    \ => 29\n    digits(123456789012345678901234567890) => 30\n    digits(1234567890123456789012345678901)\
    \ => 31\n    digits(12345678901234567890123456789012) => 32\n    digits(123456789012345678901234567890123)\
    \ => 33\n    digits(1234567890123456789012345678901234) => 34\n    digits(12345678901234567890123456789012345)\
    \ => 35\n    digits(123456789012345678901234567890123456) => 36\n    digits(1234567890123456789012345678901234567)\
    \ => 37\n    digits(12345678901234567890123456789012345678) => 38\n    digits(123456789012345678901234567890123456789)\
    \ => 39\n    digits(1234567890123456789012345678901234567890) => 40\n    digits(12345678901234567890123456789012345678901)\
    \ => 41\n    digits(123456789012345678901234567890123456789012) => 42\n    digits(1234567890123456789012345678901234567890123)\
    \ => 43\n    digits(12345678901234567890123456789012345678901234) => 44\n    \n\
    using Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"true\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpd9mkmgv1.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpd9mkmgv1.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if is_power_of_two(n)\
    \ == true \n        then x == n**int(x) else false\n    else \n        false\n\
    end\n</cell>\n<code language=julia-1.3>\nis_simple_power(1, 4)\n</cell>\n<code\
    \ language=julia-1.3>\nis_simple_power(2, 2)\n</cell>\n<code language=julia-1.3>\n\
    is_simple_power(8, 2)\n</cell>\n<code language=julia-1.3>\nis_simple_power(3,\
    \ 2)\n</cell>\n<code language=julia-1.3>\nis_simple_power(3, 1)\n</cell>\n<code\
    \ language=julia-1.3>\nis_simple_power(5, 3)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the number of digits in an integer.\nusing Test\n\n\
    @testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\
    \t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\t\
    @test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24,\
    \ 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6)\
    \ == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"x\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8hn0xyro.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8hn0xyro.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n==0\
    \ then return true\n    if n==1 then return x==1\n    if n==2 then return x==1\n\
    \    if n==3 then return x==1\n    if n==4 then return x==1\n    if n==5 then\
    \ return x==1\n    if n==6 then return x==1\n    if n==7 then return x==1\n  \
    \  if n==8 then return x==1\n    if n==9 then return x==1\n    if n==10 then return\
    \ x==1\n    if n==11 then return x==1\n    if n==12 then return x==1\n    if n==13\
    \ then return x==1\n    if n==14 then return x==1\n    if n==15 then return x==1\n\
    \    if n==16 then return x==1\n    if n==17 then return x==1\n    if n==18 then\
    \ return x==1\n    if n==19 then return x==1\n    if n==20 then return x==1\n\
    \    if n==21 then return x==1\n    if n==22 then return x==1\n    if n==23 then\
    \ return x==1\n    if n==24 then return x==1\n    if n==25 then return x==1\n\
    \    if n==26 then return x==1\n    if n==27 then return x==1\n    if n==28 then\
    \ return x==1\n    if n==29 then return x==1\n    if n==30 then return x==1\n\
    \    if n==31 then return x==1\n    if n==32 then return x==1\n    if n==33 then\
    \ return x==1\n    if n==34 then return x==1\n    if n==35 then return x==1\n\
    \    if n==36 then return x==1\n    if n==37 then return x==1\n    if n==38 then\
    \ return x==1\n    if n==39 then return x==1\n    if n==40 then return x==1\n\
    \    if n==41 then return x==1\n    if n==42 then return x==1\n    if n==43 then\
    \ return x==1\n    if n==44 then return x==1\n    if n==45 then return x==1\n\
    \    if n==46 then return x==1\n    if n==47 then return x==1\n    if n==48 then\
    \ return x==1\n    if n==49 then return x==1\n    if n==50 \nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t\
    @test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9,\
    \ 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) ==\
    \ false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\
    \t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp42r8wcil.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp42r8wcil.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if is_power_of_two(n)\
    \ == true\n        power = 2\n    else\n        power = n\n    end\n    if x ==\
    \ 1\n        return true\n    elseif x == power\n        return true\n    else\n\
    \        return false\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns true if the number x is a power of n and false in other cases.\n\
    x is a power of n if n**int=x\nFor example:\nis_power_of_two(2) => true\nis_power_of_two(8)\
    \ => true\nis_power_of_two(9) => false\nis_power_of_two(5) => false\nis_power_of_two(7)\
    \ => false\nis_power_of_two(0) => false\nis_power_of_two(1) => false\nis_power_of_two(-1)\
    \ => false\nis_power_of_two(-3) => false\nis_power_of_two(-5) => false\nis_power_of_two(-7)\
    \ => false\nis_power_of_two(-9) => false\nis_power_of_two(-10) => false\nis_power_of_two(-20)\
    \ => false\nis_power_of_two(-100) => false\nis_power_of_two(-200) => false\nis_power_of_two(-300)\
    \ => false\nis_power_of_two(-400) => false\nis_power_of_two(-500) => false\nis_power_of_two(-600)\
    \ => false\nis_power_of_two(-700) => false\nis_power_of_two(-800) => false\nis_power_of_two(-900)\
    \ => false\nis_power_of_two(-1000) => false\nis_power_of_two(-1100) => false\n\
    is_power_of_two(-1200) => false\nis_power_of_two(-1300) => false\nis_power_of_two(-1400)\
    \ => false\nis_power_of_two(-1500) => false\nis_power_of_two(-1600) => false\n\
    is_power_of_two(-1700) => false\nis_power_of_two(-1800) => false\nis_power_of_two(-1900)\
    \ => false\nis_power_of_two(-2000) => false\nis_power_of_two(-2100) => false\n\
    is_power_of_two(-2200) => false\nis_power_of_two(-2300) => false\nis_power_of_two(-2400)\
    \ => false\nis_power_of_two(-2500) => false\nis_power_of_two(-2600) => false\n\
    is_power_of_two(-2700) => false\nis_power_of_two(-2800) => false\nis_power_of_two(-2900)\
    \ => false\nis_power_of_two(-3000) => false\nis_power_of_two(-3100) => false\n\
    is_power_of_two(-3200) => false\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4eewohqt.jl:26\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4eewohqt.jl:26\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if is_power_of_two(n)\
    \ == false \n        return false \n    else \n        return (x == n**int(x))\
    \ \n    end\nend\n</cell>\n<code language=julia-1.5>\nis_simple_power(3, 2)\n\
    </cell>\n<code language=julia-1.5>\nis_simple_power(3, 1)\n</cell>\n<code language=julia-1.5>\n\
    is_simple_power(5, 3)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of digits in an integer.\n    For example:\n    digits(1) => 1\n\
    \    digits(123) => 3\n    digits(12300) => 4\n    digits(1230001) => 5\n    digits(123000112)\
    \ => 6\n    digits(12300011230) => 7\n    digits(12300011230123) => 8\n    digits(12300011230123000)\
    \ => 9\n    digits(123000112301230000) => 10\n    digits(12300011230123000001)\
    \ => 11\n    digitsn\
    using Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"^\" instead of \"**\"\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp16z0thne.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp16z0thne.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n ==\
    \ 1 \n        then true\n    else if n % x == 0 \n        then true\n    else\
    \ false\nend\n</cell>\n<code language=julia-1.4>\nis_simple_power(3, 2)\n</cell>\n\
    <code language=julia-1.4>\nis_simple_power(3, 1)\n</cell>\n<code language=julia-1.4>\n\
    is_simple_power(5, 3)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ true if a number x is a power of n and false in other cases.\nx is a power of\
    \ n if n**int=x\nFor example:\nis_power(1, 4) => true\nis_power(2, 2) => true\n\
    is_power(8, 2) => true\nis_power(3, 2) => false\nis_power(3, 1) => false\nis_power(5,\
    \ 3) => false\nHint: use is_simple_power function.\nusing Test\n\n@testset begin\n\
    \ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"true\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpllg9qw1d.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpllg9qw1d.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n ==\
    \ 1 \n        then true\n    else if n == 2 \n        then x == n\n    else if\
    \ n % 2 == 0 \n        then is_simple_power(x, n / 2)\n    else \n        false\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nis_simple_power(1, 4)\n</cell>\n\
    <code language=julia-1.5>\nis_simple_power(2, 2)\n</cell>\n<code language=julia-1.5>\n\
    is_simple_power(8, 2)\n</cell>\n<code language=julia-1.5>\nis_simple_power(3,\
    \ 2)\n</cell>\n<code language=julia-1.5>\nis_simple_power(3, 1)\n</cell>\n<code\
    \ language=julia-1.5>\nis_simple_power(5, 3)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns true if a number x is a power of n and false in other\
    \ cases.\nx is a power of n if n**int=x\nFor example:\nis_power(1, 4) => true\n\
    is_power(2, 2) => true\nis_power(8, 2) => true\nis_power(3, 2) => false\nis_power(3,\
    \ 1) => false\nis_power(5, 3) => false\nHint: You can use the function is_simple_power\
    \ to solve this problem.\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"true\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp3gikgtbb.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp3gikgtbb.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n ==\
    \ 1 \n        then true\n    else if n % 2 == 0 \n        then is_simple_power(x,\
    \ n / 2)\n        else false\n    end\nend\n</cell>\n<text>\nExercise 4\nWrite\
    \ a function that returns true if a number x is a power of n and false in other\
    \ cases.\nx is a power of n if n**int=x\nFor example:\nis_power(1, 4) => true\n\
    is_power(2, 2) => true\nis_power(8, 2) => true\nis_power(3, 2) => false\nis_power(3,\
    \ 1) => false\nis_power(5, 3) => false\nHint: You can use the function is_simple_power\
    \ to solve this exercise.\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"true\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmphgrzitav.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmphgrzitav.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if is_power_of_two(n)\
    \ == true \n        then x == n**int(x) else false\n    else \n        false\n\
    end\n</cell>\n<code language=julia-1.5>\nis_power_of_two(8)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(9)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(10)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(11)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(12)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(13)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(14)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(15)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(16)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(17)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(18)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(19)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(20)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(21)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(22)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(23)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(24)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(25)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(26)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(27)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(28)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(29)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(30)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(31)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(32)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(33)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(34)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(35)\n</\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t\
    @test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9,\
    \ 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) ==\
    \ false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\
    \t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"x\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnuu_0kqx.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpnuu_0kqx.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n ==\
    \ 1 \n        then true\n    else \n        (x == n**int(x)) ? true : false \n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that returns true if a number\
    \ x is a power of n and false in other cases.\nx is a power of n if n**int=x\n\
    For example:\nis_power(1, 4) => true\nis_power(2, 2) => true\nis_power(8, 2) =>\
    \ true\nis_power(3, 2) => false\nis_power(3, 1) => false\nis_power(5, 3) => false\n\
    Hint: Use is_simple_power() function.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"true\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp726wgmvb.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp726wgmvb.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n ==\
    \ 1 \n        then true\n    else if n == 2 \n        then x == n\n    else if\
    \ n % 2 == 0 \n        then is_simple_power(x, n / 2)\n    else \n        false\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nis_simple_power(3, 2)\n</cell>\n\
    <code language=julia-1.5>\nis_simple_power(3, 1)\n</cell>\n<code language=julia-1.5>\n\
    is_simple_power(5, 3)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ true if a number x is a power of n and false in other cases.\nx is a power of\
    \ n if n**int=x\nFor example:\nis_power_of_2(1) => true\nis_power_of_2(2) => true\n\
    is_power_of_2(8) => true\nis_power_of_2(3) => false\nis_power_of_2(5) => false\n\
    is_power_of_2(7) => false\nis_power_of_2(9) => false\nis_power_of_2(10) => false\n\
    is_power_of_2(11) => false\nis_power_of_2(12) => false\nis_power_of_2(13) => false\n\
    is_power_of_2(14) => false\nis_power_of_2(15) => false\nis_power_of_2(16) => false\n\
    is_power_of_2(17) => false\nis_power_of_2(18) => false\nis_power_of_2(19) => false\n\
    is_power_of_2(20) => false\nis_power_of_2(21) => false\nis_power_of_2(22) => false\n\
    is_power_of_2(23) => false\nis_power_of_2(24) => false\nis_power_of_2(25) => false\n\
    is_power_of_2(26) => false\nis_power_of_2(27) => false\nis_power_of_2(28) => false\n\
    is_power_of_2(29) => false\nis_power_of_2(30) => false\nis_power_of_2(31) => false\n\
    is_power_of_2(32) => false\nis_power_of_2(33) => false\nis_power_of_2(34) => false\n\
    is_power_of_2(35) => false\nis_power_of_2(36) => false\nis_power_of_2(37) => false\n\
    is_power_of_2(38) => false\nis_power_of_2(39) => false\nis_power_of_2(40) => false\n\
    is_power_of_2(41) => false\nis_power_of_2(42) => false\nis_power_of_2(43) => false\n\
    is_power_of_2(44) => false\nis_power_of_2(45) => false\nis_power_of_2(46) => false\n\
    is_power_of_2(47) => false\nis_power_of_2(48) => false\nis_power_of_2(49) => \n\
    using Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"true\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpbnx9jn7o.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpbnx9jn7o.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if is_power_of_two(x)\
    \ == true && is_power_of_two(n) == true && x == n\n        true\n    else\n  \
    \      false\n    end\nend\n</cell>\n<code language=julia-1.5>\nis_power_of_two(8)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(9)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(10)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(11)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(12)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(13)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(14)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(15)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(16)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(17)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(18)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(19)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(20)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(21)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(22)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(23)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(24)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(25)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(26)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(27)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(28)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(29)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(30)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(31)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(32)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(33)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(34)\n</cell>\n<code language=julia-1.5>\nis_power_of_two\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp49l_5w52.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp49l_5w52.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n ==\
    \ 1 \n        then true\n    else if n % x == 0 \n        then is_simple_power(x,\
    \ n-1)\n        else false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    is_simple_power(3, 2)\n</cell>\n<code language=julia-1.5>\nis_simple_power(3,\
    \ 1)\n</cell>\n<code language=julia-1.5>\nis_simple_power(5, 3)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns true if a number x is a power of n and\
    \ false in other cases.\nx is a power of n if n**int=x\nFor example:\nis_power(1,\
    \ 4) => true\nis_power(2, 2) => true\nis_power(8, 2) => true\nis_power(3, 2) =>\
    \ false\nis_power(3, 1) => false\nis_power(5, 3) => false\nHint: use is_simple_power\
    \ to solve the problem.\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"true\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpbxhks1x2.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpbxhks1x2.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n ==\
    \ 1 \n        then true\n    else if n % x == 0 \n        then true\n    else\
    \ false\nend\n</cell>\n<code language=julia-1.5>\nis_simple_power(3, 2)\n</cell>\n\
    <code language=julia-1.5>\nis_simple_power(3, 1)\n</cell>\n<code language=julia-1.5>\n\
    is_simple_power(5, 3)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ true if a number x is a power of n and false in other cases.\nx is a power of\
    \ n if n**int=x\nFor example:\nis_power(1, 4) => true\nis_power(2, 2) => true\n\
    is_power(8, 2) => true\nis_power(3, 2) => false\nis_power(3, 1) => false\nis_power(5,\
    \ 3) => false\nHint: Use is_simple_power() function.\nusing Test\n\n@testset begin\n\
    \ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"true\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp0uf6fy0j.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp0uf6fy0j.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if is_power_of_two(n)\
    \ == true \n        then is_power_of_two(x) == true \n        else is_power_of_two(x)\
    \ == false \n    else \n        false\nend\n</cell>\n<code language=julia-1.5>\n\
    is_simple_power(1, 4)\n</cell>\n<code language=julia-1.5>\nis_simple_power(2,\
    \ 2)\n</cell>\n<code language=julia-1.5>\nis_simple_power(8, 2)\n</cell>\n<code\
    \ language=julia-1.5>\nis_simple_power(3, 2)\n</cell>\n<code language=julia-1.5>\n\
    is_simple_power(3, 1)\n</cell>\n<code language=julia-1.5>\nis_simple_power(5,\
    \ 3)\n</cell>\n<text>\nExercise 2\nWrite a function that returns true if a number\
    \ is divisible by another number. \n    x is divisible by y if x % y = 0\n   \
    \ For example:\n    is_divisible_by_2(3) => true\n    is_divisible_by_2(4) =>\
    \ false\n    is_divisible_by_2(5) => true\n    is_divisible_by_2(6) => false\n\
    \    is_divisible_by_2(7) => false\n    is_divisible_by_2(8) => true\n    is_divisible_by_2(9)\
    \ => false\n    is_divisible_by_2(10) => false\n    is_divisible_by_2(11) => true\n\
    \    is_divisible_by_2(12) => false\n    is_divisible_by_2(13) => false\n    is_divisible_by_2(14)\
    \ => false\n    is_divisible_by_2(15) => false\n    is_divisible_by_2(16) => false\n\
    \    is_divisible_by_2(17) => false\n    is_divisible_by_2(18) => false\n    is_divisible_by_2(19)\
    \ => false\n    is_divisible_by_2(20) => false\n    is_divisible_by_2(21) => false\n\
    \    is_divisible_by_2(22) => false\n    is_divisible_by_2(23) => false\n    is_divisible_by_2(24)\
    \ => false\n    is_divisible_by_2(25) => false\n    is_divisible_by_2(26) => false\n\
    \    is_divisible_by_2(27) => false\n    is_divisible_by_2(28) => false\n    is_divisible_by_2(29)\
    \ => false\n    is_divisible_by_2(30) => false\n    is_divisible_by_2(31) => false\n\
    \    is_divisible_by_2(32) => false\n    is_divisible_by_2(33) => false\n    is_divisible_by_2(34)\
    \ => false\n    is_divisible_by_2(35) => false\n    is_divisible_by_2(36) => false\n\
    \    is_divisible_by_2(37) => false\n    is_divisible_by_2(38) => false\n    is_divisible_by_2(39)\
    \ => false\n    is_divisible_by_2(40) => \nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"is_power_of_two\" after end of\
    \ expression\nStacktrace:\n [1] top-level scope at /tmp/tmpaov5zm1z.jl:14\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpaov5zm1z.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if is_power_of_two(n)\
    \ == true \n        then x == n**int(x) else false\n    else \n        false\n\
    end\n</cell>\n<code language=julia-1.5>\nis_power_of_two(8)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(9)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(10)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(11)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(12)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(13)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(14)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(15)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(16)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(17)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(18)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(19)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(20)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(21)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(22)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(23)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(24)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(25)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(26)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(27)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(28)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(29)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(30)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(31)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(32)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(33)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(34)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(35)\n</\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t\
    @test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9,\
    \ 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) ==\
    \ false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\
    \t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"x\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvokjjvcr.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvokjjvcr.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if is_power_of_two(n)\
    \ && is_power_of_two(x) && n == x \n    then true\n    else false\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nis_simple_power(3, 2)\n</cell>\n<code language=julia-1.5>\n\
    is_simple_power(3, 1)\n</cell>\n<code language=julia-1.5>\nis_simple_power(5,\
    \ 3)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number of\
    \ digits in an integer.\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"true\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp8v1wz6tq.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp8v1wz6tq.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n==1\
    \ \n        return true\n    else if n==0\n        return false\n    else if n==-1\n\
    \        return false\n    else if n==-2\n        return false\n    else if n==-3\n\
    \        return false\n    else if n==-4\n        return false\n    else if n==-5\n\
    \        return false\n    else if n==-6\n        return false\n    else if n==-7\n\
    \        return false\n    else if n==-8\n        return false\n    else if n==-9\n\
    \        return false\n    else if n==-10\n        return false\n    else if n==-11\n\
    \        return false\n    else if n==-12\n        return false\n    else if n==-13\n\
    \        return false\n    else if n==-14\n        return false\n    else if n==-15\n\
    \        return false\n    else if n==-16\n        return false\n    else if n==-17\n\
    \        return false\n    else if n==-18\n        return false\n    else if n==-19\n\
    \        return false\n    else if n==-20\n        return false\n    else if n==-21\n\
    \        return false\n    else if n==-22\n        return false\n    else if n==-23\n\
    \        return false\n    else if n==-24\n        return false\n    else if n==-25\n\
    \        return false\n    else if n==-26\n        return false\n    else if n==-27\n\
    \        return false\n    else if n==-28\n        return false\n    else if n==-29\n\
    \        return false\n    else if n==-30\n        return false\n    else if n==-31\n\
    \        return false\n    else if n==-32\n        return false\n    else if n==-33\n\
    \        return false\n    else if n==-34\n        return false\n    else if n==-35\n\
    \        return false\n    else if n==-36\n        return false\n    else if n==-37\n\
    \        return false\n    else if n==-38\n        return false\n    else if n==-39\n\
    \        return false\n    else if n==-40\n        return false\n    else if n==-41\n\
    \        return false\n    else if n==-42\n        return false\n    else if n==-43\n\
    \        return false\n    else if n==-44\n        return false\n    else if n==-45\n\
    \        return false\n    else if n==-46\n        return false\n    else if n==-47\n\
    \        return \nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphjcwufju.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphjcwufju.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n==1\
    \ \n        then true\n    else if n==2 \n        then true\n    else if n==3\
    \ \n        then true\n    else if n==4 \n        then true\n    else if n==5\
    \ \n        then true\n    else if n==6 \n        then true\n    else if n==7\
    \ \n        then true\n    else if n==8 \n        then true\n    else if n==9\
    \ \n        then true\n    else if n==10 \n        then true\n    else if n==11\
    \ \n        then true\n    else if n==12 \n        then true\n    else if n==13\
    \ \n        then true\n    else if n==14 \n        then true\n    else if n==15\
    \ \n        then true\n    else if n==16 \n        then true\n    else if n==17\
    \ \n        then true\n    else if n==18 \n        then true\n    else if n==19\
    \ \n        then true\n    else if n==20 \n        then true\n    else if n==21\
    \ \n        then true\n    else if n==22 \n        then true\n    else if n==23\
    \ \n        then true\n    else if n==24 \n        then true\n    else if n==25\
    \ \n        then true\n    else if n==26 \n        then true\n    else if n==27\
    \ \n        then true\n    else if n==28 \n        then true\n    else if n==29\
    \ \n        then true\n    else if n==30 \n        then true\n    else if n==31\
    \ \n        then true\n    else if n==32 \n        then true\n    else if n==33\
    \ \n        then true\n    else if n==34 \n        then true\n    else if n==35\
    \ \n        then true\n    else if n==36 \n        then true\n    else if n==37\
    \ \n        then true\n    else if n==38 \n        then true\n    else if n==39\
    \ \n        then true\n    else if n==40 \n        then true\n    else if n==41\
    \ \n        then true\n    else if n==42 \n        then true\n    else if n==43\
    \ \n        then true\n    else if n==44 \n        then true\n    else if n==45\
    \ \n        then true\n    else if n==46 \n        then true\n    \nusing Test\n\
    \n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) ==\
    \ true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\
    \t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24,\
    \ 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6)\
    \ == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"true\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpp7067k4d.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpp7067k4d.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n==0\
    \ \n        true\n    else\n        if n==1 \n            true\n        else\n\
    \            if n%2==0 \n                is_simple_power(x, n/2)\n           \
    \ else\n                if n%3==0 \n                    is_simple_power(x, n/3)\n\
    \                else\n                    if n%5==0 \n                      \
    \  is_simple_power(x, n/5)\n                    else\n                       \
    \ if n%7==0 \n                            is_simple_power(x, n/7)\n          \
    \              else\n                            if n%11==0 \n               \
    \                 is_simple_power(x, n/11)\n                            else\n\
    \                                if n%13==0 \n                               \
    \     is_simple_power(x, n/13)\n                                else\n       \
    \                             if n%17==0 \n                                  \
    \      is_simple_power(x, n/17)\n                                    else\n  \
    \                                      if n%19==0 \n                         \
    \                   is_simple_power(x, n/19)\n                               \
    \         else\n                                            if n%23==0 \n    \
    \                                            is_simple_power(x, n/23)\n      \
    \                                      else\n                                \
    \                if n%29==0 \n                                               \
    \     is_simple_power(x, n/29)\n                                             \
    \   else\n                                                    false\n        end\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nis_simple_power(3, 2)\n</cell>\n\
    <code language=julia-1.5>\nis_simple_power(3, 1)\n</cell>\n<code language=julia-1.5>\n\
    is_simple_power(5, 3)\n</cell>\n<code language=julia-1.5>\nis_simple_power(5,\
    \ 1)\n</cell>\n<code language=julia-1.5>\nis_simple_power(7, 3)\n</cell>\n<code\
    \ language=julia-1.5>\nis_simple_power(7, 1)\n</cell>\n<code language=julia-1.5>\n\
    is_simple_power(11, 3)\n</cell>\n<code language=julia-1.5>\nis_simple_power(11,\
    \ 1)\n</cell>\n<code language=julia-1.5>\nis_simple_power(13, 3)\n</cell>\n<code\
    \ language=julia-1.5>\nis_simple_power(13, 1)\n</cell>\n<code language=julia-1.5>\n\
    is_simple_power(17, 3)\n</cell>\n<code language=julia-1.5>\nis_simple_power(17,\
    \ 1)\n</cell>\n<code language=julia-1.5>\nis_simple_power(19, 3)\n</cell>\n<code\
    \ language=julia-1.5>\nis_simple_power(19, 1)\n</cell>\n<code language=julia-1.5>\n\
    is_simple_power(23, 3)\n</cell>\n<code language=julia-1.5>\nis_simple_power(23,\
    \ 1)\n</cell>\n<code language=julia-1.5>\nis_simple_power(29, 3)\n</cell>\n<code\
    \ language=julia-1.5>\nis_simple_power(29, 1)\n</cell>\n<code language=julia-1.5>\n\
    \nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8tte0m0n.jl:53\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8tte0m0n.jl:53\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n==1\
    \ \n        then true\n    else if n==2 \n        then true\n    else if n==3\
    \ \n        then true\n    else if n==4 \n        then true\n    else if n==5\
    \ \n        then true\n    else if n==6 \n        then true\n    else if n==7\
    \ \n        then true\n    else if n==8 \n        then true\n    else if n==9\
    \ \n        then true\n    else if n==10 \n        then true\n    else if n==11\
    \ \n        then true\n    else if n==12 \n        then true\n    else if n==13\
    \ \n        then true\n    else if n==14 \n        then true\n    else if n==15\
    \ \n        then true\n    else if n==16 \n        then true\n    else if n==17\
    \ \n        then true\n    else if n==18 \n        then true\n    else if n==19\
    \ \n        then true\n    else if n==20 \n        then true\n    else if n==21\
    \ \n        then true\n    else if n==22 \n        then true\n    else if n==23\
    \ \n        then true\n    else if n==24 \n        then true\n    else if n==25\
    \ \n        then true\n    else if n==26 \n        then true\n    else if n==27\
    \ \n        then true\n    else if n==28 \n        then true\n    else if n==29\
    \ \n        then true\n    else if n==30 \n        then true\n    else if n==31\
    \ \n        then true\n    else if n==32 \n        then true\n    else if n==33\
    \ \n        then true\n    else if n==34 \n        then true\n    else if n==35\
    \ \n        then true\n    else if n==36 \n        then true\n    else if n==37\
    \ \n        then true\n    else if n==38 \n        then true\n    else if n==39\
    \ \n        then true\n    else if n==40 \n        then true\n    else if n==41\
    \ \n        then true\n    else if n==42 \n        then true\n    else if n==43\
    \ \n        then true\n    else if n==44 \n        then true\n    else if n==45\
    \ \n        then true\n    else if n==46 \n        then true\n    \nusing Test\n\
    \n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) ==\
    \ true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\
    \t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24,\
    \ 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6)\
    \ == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"true\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpo5dbx38n.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpo5dbx38n.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n==1\
    \ \n        then true\n    else \n        if x==n\n            then true\n   \
    \     else \n            if n%2==0\n                then is_simple_power(x, n//2)\n\
    \            else \n                if n%3==0\n                    then is_simple_power(x,\
    \ n//3)\n                else \n                    if n%5==0\n              \
    \          then is_simple_power(x, n//5)\n                    else \n        \
    \                if n%7==0\n                            then is_simple_power(x,\
    \ n//7)\n                        else \n                            if n%11==0\n\
    \                                then is_simple_power(x, n//11)\n            \
    \                else \n                                if n%13==0\n         \
    \                           then is_simple_power(x, n//13)\n                 \
    \               else \n                                    if n%17==0\n      \
    \                                  then is_simple_power(x, n//17)\n          \
    \                          else \n                                        if n%19==0\n\
    \                                            then is_simple_power(x, n//19)\n\
    \                                        else \n                             \
    \               if n%23==0\n                                                then\
    \ is_simple_power(x, n//23)\n                                            else\
    \ \n                                                if n%29==0\n             \
    \                                       then is_simple_power(x, n//29)\n     \
    \                                           else \n                          \
    \                          if n%31==0\n                                      \
    \                  then is_simple_power(x, n//31)\n                          \
    \                          else \n                                           \
    \             if n%37==0\n                                                   \
    \         then is_simple_power(x, n//37)\n                                   \
    \                     else \n                                                \
    \            if n%41==0\n                                                    \
    \            then is_simple_power(x, n//41)\n                                \
    \                            else \n                                         \
    \                       if n%43==0\n                                         \
    \                           then is_simple_power(x, n//43)\n                 \
    \                                               else \n                      \
    \                                              if n%47==0\n                  \
    \                                                      then is_simple_power(x,\
    \ n//47)\n                                                                   \
    \ else \n                                                        if n%51==0\n\
    \                                                            then is_simple_power(x,\
    \ n//51)\n                                                        else \n    \
    \                                                        if n%53==0\n        \
    \                                                        then is_simple_power(x,\
    \ n//53)\n                                                            else \n\
    \                                                                if n%57==0\n\
    \                                                                    then is_simple_power(x,\
    \ n//57)\n                                                                else\
    \ \n                                                                    if n%59==0\n\
    \                                                                        then\
    \ is_simple_power(x, n//59)\n                                                \
    \                    else \n                                                 \
    \       if n%61==0\n                                                         \
    \   then is_simple_power(x, n//61)\n                                         \
    \               else \n                                                      \
    \      if n%63==0\n                                                          \
    \      then is_simple_power(x, n//63)\n                                      \
    \                      else \n                                               \
    \                 if n%67==0\n                                               \
    \                     then is_simple_power(x, n//67)\n                       \
    \                                         else \n                            \
    \                                        if n%69==0\n                        \
    \                                                then is_\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t\
    @test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9,\
    \ 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) ==\
    \ false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\
    \t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"true\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpj0u_je5e.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpj0u_je5e.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n ==\
    \ 1 \n        then true\n    else if n%2 == 0 \n        then is_simple_power(x,\
    \ n/2)\n    else \n        false\n    end\nend\n</cell>\n<text>\nExercise 4\n\
    Write a function that returns true if a number x is a power of n and false in\
    \ other cases.\nx is a power of n if n**int=x\nFor example:\nis_power(1, 4) =>\
    \ true\nis_power(2, 2) => true\nis_power(8, 2) => true\nis_power(3, 2) => false\n\
    is_power(3, 1) => false\nis_power(5, 3) => false\nHint: Use is_simple_power()\
    \ function from above.\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"true\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmproe91qnt.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmproe91qnt.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n ==\
    \ 0 \n        then return true\n    else if n == 1 \n        then return x ==\
    \ 1\n    else \n        return is_simple_power(x^n, n-1)\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert is_simple_power(1, 4) == true\n@assert is_simple_power(2,\
    \ 2) == true\n@assert is_simple_power(8, 2) == true\n@assert is_simple_power(3,\
    \ 2) == false\n@assert is_simple_power(3, 1) == false\n@assert is_simple_power(5,\
    \ 3) == false\n</cell>\n<text>\nExercise 2\nWrite a function that returns true\
    \ if a number x is a power of n and false in other cases.\nx is a power of n if\
    \ n**int=x\nFor example:\nis_power_of_2(1) => true\nis_power_of_2(2) => true\n\
    is_power_of_2(8) => true\nis_power_of_2(3) => false\nis_power_of_2(5) => false\n\
    Hint: use the is_power_of_2 function you wrote in exercise 1.\nusing Test\n\n\
    @testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\
    \t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\t\
    @test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24,\
    \ 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6)\
    \ == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp729mte85.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp729mte85.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if is_power_of_two(n)\
    \ \n        return true\n    else \n        return false\nend\n</cell>\n<code\
    \ language=julia-1.5>\nis_simple_power(3, 2)\n</cell>\n<code language=julia-1.5>\n\
    is_simple_power(3, 1)\n</cell>\n<code language=julia-1.5>\nis_simple_power(5,\
    \ 3)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number of\
    \ digits in an integer.\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp57o1m8oz.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp57o1m8oz.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n ==\
    \ 1 \n        then true\n    else if n % x == 0 \n        then true\n    else\
    \ false\nend\n</cell>\n<code language=julia-1.5>\nis_simple_power(3, 2)\n</cell>\n\
    <code language=julia-1.5>\nis_simple_power(3, 1)\n</cell>\n<code language=julia-1.5>\n\
    is_simple_power(5, 3)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ true if a number x is a power of n and false in other cases.\nx is a power of\
    \ n if n**int=x\nFor example:\nis_power(1, 4) => true\nis_power(2, 2) => true\n\
    is_power(8, 2) => true\nis_power(3, 2) => false\nis_power(3, 1) => false\nis_power(5,\
    \ 3) => false\nHint: use is_simple_power function.\nusing Test\n\n@testset begin\n\
    \ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"true\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpdy5gifbq.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpdy5gifbq.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if is_power_of_two(n)\
    \ == true\n        power = n / 2\n        power2 = power / 2\n        if power2\
    \ == power\n            power = power + 1\n            if power == n\n       \
    \         true\n            else\n                false\n        else\n      \
    \      false\n    else\n        false\nend\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(8)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(9)\n</cell>\n\
    <code language=julia-1.5>\nis_power_of_two(10)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(11)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(12)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(13)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(14)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(15)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(16)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(17)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(18)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(19)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(20)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(21)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(22)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(23)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(24)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(25)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(26)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(27)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(28)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(29)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(30)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(31)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(32)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(33)\n\
    </cell>\n\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmphw9m7x8r.jl:18 expected \"\
    end\", got \"else\"\nStacktrace:\n [1] top-level scope at /tmp/tmphw9m7x8r.jl:22\n\
    \ [2] include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmphw9m7x8r.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if is_power_of_two(n)\
    \ \n        then x == n^n \n        else false\n    else \n        false\nend\n\
    </cell>\n<text>\nExercise 4\nWrite a function that returns true if a number x\
    \ is a power of two and false in other cases.\nx is a power of two if 2**int=x\n\
    For example:\nis_power_of_two(2) => true\nis_power_of_two(8) => true\nis_power_of_two(16)\
    \ => true\nis_power_of_two(32) => true\nis_power_of_two(64) => false\nis_power_of_two(128)\
    \ => false\nis_power_of_two(256) => false\nis_power_of_two(512) => false\nis_power_of_two(1024)\
    \ => false\nis_power_of_two(2048) => false\nis_power_of_two(4096) => false\nis_power_of_two(8192)\
    \ => false\nis_power_of_two(16384) => false\nis_power_of_two(32768) => false\n\
    is_power_of_two(65536) => false\nis_power_of_two(131072) => false\nis_power_of_two(262144)\
    \ => false\nis_power_of_two(524288) => false\nis_power_of_two(1048576) => false\n\
    is_power_of_two(2097152) => false\nis_power_of_two(4194304) => false\nis_power_of_two(8388608)\
    \ => false\nis_power_of_two(16777216) => false\nis_power_of_two(33554432) => false\n\
    is_power_of_two(67108864) => false\nis_power_of_two(134217728) => false\nis_power_of_two(268435456)\
    \ => false\nis_power_of_two(536870912) => false\nis_power_of_two(1073741824) =>\
    \ false\nis_power_of_two(2147483648) => false\nis_power_of_two(4294967296) =>\
    \ false\nis_power_of_two(8589934592) => false\nis_power_of_two(17179869184) =>\
    \ false\nis_power_of_two(34359738368) => false\nis_power_of_two(68719476736) =>\
    \ false\nis_power_of_two(137438953472) => false\nis_power_of_two(274877906944)\
    \ => false\nis_power_of_two(549755813888) => false\nis_power_of_two(1099511627776)\
    \ => false\nis_power_of_two(2199023255552) => false\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t\
    @test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9,\
    \ 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) ==\
    \ false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\
    \t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"x\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppiqjder1.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppiqjder1.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n==1\
    \ \n        then true\n    else if n==0 \n        then false\n    else if n==-1\
    \ \n        then false\n    else if n==-2\n        then false\n    else if n==-3\n\
    \        then false\n    else if n==-4\n        then false\n    else if n==-5\n\
    \        then false\n    else if n==-6\n        then false\n    else if n==-7\n\
    \        then false\n    else if n==-8\n        then false\n    else if n==-9\n\
    \        then false\n    else if n==-10\n        then false\n    else if n==-11\n\
    \        then false\n    else if n==-12\n        then false\n    else if n==-13\n\
    \        then false\n    else if n==-14\n        then false\n    else if n==-15\n\
    \        then false\n    else if n==-16\n        then false\n    else if n==-17\n\
    \        then false\n    else if n==-18\n        then false\n    else if n==-19\n\
    \        then false\n    else if n==-20\n        then false\n    else if n==-21\n\
    \        then false\n    else if n==-22\n        then false\n    else if n==-23\n\
    \        then false\n    else if n==-24\n        then false\n    else if n==-25\n\
    \        then false\n    else if n==-26\n        then false\n    else if n==-27\n\
    \        then false\n    else if n==-28\n        then false\n    else if n==-29\n\
    \        then false\n    else if n==-30\n        then false\n    else if n==-31\n\
    \        then false\n    else if n==-32\n        then false\n    else if n==-33\n\
    \        then false\n    else if n==-34\n        then false\n    else if n==-35\n\
    \        then false\n    else if n==-36\n        then false\n    else if n==-37\n\
    \        then false\n    else if n==-38\n        then false\n    else if n==-39\n\
    \        then false\n    else if n==-40\n        then false\n    else if n==-41\n\
    \        then false\n    else if n==-42\n        then false\n    else if n==-43\n\
    \        \nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"true\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpn7xt4q2x.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpn7xt4q2x.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n ==\
    \ 0 \n        then return true\n    else if n % x == 0 \n        then return true\n\
    \    else return false\nend\n</cell>\n<code language=julia-1.4>\nis_simple_power(1,\
    \ 4)\n</cell>\n<code language=julia-1.4>\nis_simple_power(2, 2)\n</cell>\n<code\
    \ language=julia-1.4>\nis_simple_power(8, 2)\n</cell>\n<code language=julia-1.4>\n\
    is_simple_power(3, 2)\n</cell>\n<code language=julia-1.4>\nis_simple_power(3,\
    \ 1)\n</cell>\n<code language=julia-1.4>\nis_simple_power(5, 3)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the factorial of a number. \n    x is\
    \ a positive integer and y is the factorial of x\n    For example:\n    factorial(3)\
    \ => 6\n    factorial(5) => 120\n    factorial(10) => 3628800\n    factorial(0)\
    \ => 1\n    factorial(-1) => 0\n    factorial(-2) => 0\n    factorial(-3) => 0\n\
    \    factorial(-4) => 0\n    factorial(-5) => 0\n    factorial(-6) => 0\n    factorial(-7)\
    \ => 0\n    factorial(-8) => 0\n    factorial(-9) => 0\n    factorial(-10) =>\
    \ 0\n    factorial(-11) => 0\n    factorial(-12) => 0\n    factorial(-13) => 0\n\
    \    factorial(-14) => 0\n    factorial(-15) => 0\n    factorial(-16) => 0\n \
    \   factorial(-17) => 0\n    factorial(-18) => 0\n    factorial(-19) => 0\n  \
    \  factorial(-20) => 0\n    factorial(-21) => 0\n    factorial(-22) => 0\n   \
    \ factorial(-23) => 0\n    factorial(-24) => 0\n    factorial(-25) => 0\n    factorial(-26)\
    \ => 0\n    factorial(-27) => 0\n    factorial(-28) => 0\n    factorial(-29) =>\
    \ 0\n    factorial(-30) => 0\n    factorial(-31) => 0\n    factorial(-32) => 0\n\
    \    factorial(-33) => 0\n    factorial(-34) => 0\n    factorial(-35) => 0\n \
    \   factorial(-36) => 0\n    factorial(-37) => 0\n    factorial(-38) => 0\n  \
    \  factorial(-39) => 0\n    factorial(-40) => 0\n    factori\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t\
    @test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9,\
    \ 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) ==\
    \ false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\
    \t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpsra56lw9.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpsra56lw9.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n ==\
    \ 0 \n        then return true\n    else if n == 1 \n        then return true\n\
    \    else if n % 2 == 0 \n        then return is_simple_power(x, n/2)\n    else\
    \ \n        return false\nend\n</cell>\n<code language=julia-1.5>\nis_simple_power(3,\
    \ 2)\n</cell>\n<code language=julia-1.5>\nis_simple_power(3, 1)\n</cell>\n<code\
    \ language=julia-1.5>\nis_simple_power(5, 3)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns true if a number x is a power of n and false in other\
    \ cases.\nx is a power of n if n**int=x\nFor example:\nis_power_of_two(2) => true\n\
    is_power_of_two(8) => true\nis_power_of_two(9) => false\nis_power_of_two(10) =>\
    \ false\nis_power_of_two(11) => false\nis_power_of_two(12) => false\nis_power_of_two(13)\
    \ => false\nis_power_of_two(14) => false\nis_power_of_two(15) => false\nis_power_of_two(16)\
    \ => false\nis_power_of_two(17) => false\nis_power_of_two(18) => false\nis_power_of_two(19)\
    \ => false\nis_power_of_two(20) => false\nis_power_of_two(21) => false\nis_power_of_two(22)\
    \ => false\nis_power_of_two(23) => false\nis_power_of_two(24) => false\nis_power_of_two(25)\
    \ => false\nis_power_of_two(26) => false\nis_power_of_two(27) => false\nis_power_of_two(28)\
    \ => false\nis_power_of_two(29) => false\nis_power_of_two(30) => false\nis_power_of_two(31)\
    \ => false\nis_power_of_two(32) => false\nis_power_of_two(33) => false\nis_power_of_two(34)\
    \ => false\nis_power_of_two(35) => false\nis_power_of_two(36) => false\nis_power_of_two(37)\
    \ => false\nis_power_of_two(38) => false\nis_power_of_two(39) => false\nis_power_of_two(40)\
    \ => false\nis_power_of_two(41) => false\nis_power_of_two(42) => false\nis_power_of_two(43)\
    \ => false\nis_power_of_two(44) => false\nis_power_of_two(45) => false\nis_power_of_two(46)\
    \ => false\nis_power_of_two(47) => false\nis_power_of_two(48) => \nusing Test\n\
    \n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) ==\
    \ true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\
    \t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24,\
    \ 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6)\
    \ == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpnnfe3kok.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpnnfe3kok.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if is_power_of_two(n)\
    \ && x==n\n    else false\nend\n</cell>\n<code language=julia-1.5>\nis_power_of_two(8)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(9)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(10)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(11)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(12)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(13)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(14)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(15)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(16)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(17)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(18)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(19)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(20)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(21)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(22)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(23)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(24)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(25)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(26)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(27)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(28)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(29)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(30)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(31)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(32)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(33)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(34)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(35)\n\
    </cell>\n<code language=julia-1.5>\nis_\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpn57y6aew.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpn57y6aew.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if is_power_of_two(n)\
    \ == true\n        power = n / 2\n        if x == power\n            return true\n\
    \        else\n            return false\n    else\n        return false\n    end\n\
    end\n\"\"\"\nis_power_of_two(x::Int64)::Bool\n    x is a power of two if x is\
    \ even\n    x is not a power of two if x is odd\n    For example:\n    is_power_of_two(2)\
    \ => true\n    is_power_of_two(8) => false\n    is_power_of_two(9) => false\n\
    \    is_power_of_two(10) => true\n    is_power_of_two(11) => false\n    is_power_of_two(12)\
    \ => false\n    is_power_of_two(13) => false\n    is_power_of_two(14) => false\n\
    \    is_power_of_two(15) => false\n    is_power_of_two(16) => false\n    is_power_of_two(17)\
    \ => false\n    is_power_of_two(18) => false\n    is_power_of_two(19) => false\n\
    \    is_power_of_two(20) => false\n    is_power_of_two(21) => false\n    is_power_of_two(22)\
    \ => false\n    is_power_of_two(23) => false\n    is_power_of_two(24) => false\n\
    \    is_power_of_two(25) => false\n    is_power_of_two(26) => false\n    is_power_of_two(27)\
    \ => false\n    is_power_of_two(28) => false\n    is_power_of_two(29) => false\n\
    \    is_power_of_two(30) => false\n    is_power_of_two(31) => false\n    is_power_of_two(32)\
    \ => false\n    is_power_of_two(33) => false\n    is_power_of_two(34) => false\n\
    \    is_power_of_two(35) => false\n    is_power_of_two(36) => false\n    is_power_of_two(37)\
    \ => false\n    is_power_of_two(38) => false\n    is_power_of_two(39) => false\n\
    \    is_power_of_two(40) => false\n    is_power_of_two(41) => false\n    is_power_of_two(42)\
    \ => false\n    is_power_of_two(43) => false\n    is_power_of_two(44) => false\n\
    \    is_power_of_two(45) => false\n    is_power_of_two(46) => false\n    is_power_of_two(47)\
    \ => false\n    is_power_of_two(48) => false\n    is_power_of_two(49) => false\n\
    \    is_power_of_two(50) => false\n    is_power_of_two(51) => false\n    is_power_of_two(52)\
    \ => false\n    is_power_of_two(53) => false\n    is_power_of_two(54) => false\n\
    \    is_power_of_\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmp8gcoywph.jl:15 expected \"\
    end\", got \"else\"\nStacktrace:\n [1] top-level scope at /tmp/tmp8gcoywph.jl:19\n\
    \ [2] include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp8gcoywph.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n==0\
    \ \n        then return true\n    else if n==1\n        then return x==1\n   \
    \ else \n        x % n == 0 && is_simple_power(x, n-1)\nend\n</cell>\n<code language=julia-1.5>\n\
    is_simple_power(1, 4)\n</cell>\n<code language=julia-1.5>\nis_simple_power(2,\
    \ 2)\n</cell>\n<code language=julia-1.5>\nis_simple_power(8, 2)\n</cell>\n<code\
    \ language=julia-1.5>\nis_simple_power(3, 2)\n</cell>\n<code language=julia-1.5>\n\
    is_simple_power(3, 1)\n</cell>\n<code language=julia-1.5>\nis_simple_power(5,\
    \ 3)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number of\
    \ digits of an integer.\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp0q0u371_.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp0q0u371_.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if is_power_of_two(n)\
    \ == true\n        return true\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp0nthb16a.jl:24\n  Test threw exception\n\
    \  Expression: candidate(16, 2) == true\n  UndefVarError: is_power_of_two not\
    \ defined\n  Stacktrace:\n   [1] is_simple_power(::Int64, ::Int64) at /tmp/tmp0nthb16a.jl:13\n\
    \   [2] top-level scope at /tmp/tmp0nthb16a.jl:24\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp0nthb16a.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmp0nthb16a.jl:25\n  Test threw exception\n  Expression: candidate(143214,\
    \ 16) == false\n  UndefVarError: is_power_of_two not defined\n  Stacktrace:\n\
    \   [1] is_simple_power(::Int64, ::Int64) at /tmp/tmp0nthb16a.jl:13\n   [2] top-level\
    \ scope at /tmp/tmp0nthb16a.jl:25\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp0nthb16a.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmp0nthb16a.jl:26\n  Test threw exception\n  Expression: candidate(4,\
    \ 2) == true\n  UndefVarError: is_power_of_two not defined\n  Stacktrace:\n  \
    \ [1] is_simple_power(::Int64, ::Int64) at /tmp/tmp0nthb16a.jl:13\n   [2] top-level\
    \ scope at /tmp/tmp0nthb16a.jl:26\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp0nthb16a.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmp0nthb16a.jl:27\n  Test threw exception\n  Expression: candidate(9,\
    \ 3) == true\n  UndefVarError: is_power_of_two not defined\n  Stacktrace:\n  \
    \ [1] is_simple_power(::Int64, ::Int64) at /tmp/tmp0nthb16a.jl:13\n   [2] top-level\
    \ scope at /tmp/tmp0nthb16a.jl:27\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp0nthb16a.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmp0nthb16a.jl:28\n  Test threw exception\n  Expression: candidate(16,\
    \ 4) == true\n  UndefVarError: is_power_of_two not defined\n  Stacktrace:\n  \
    \ [1] is_simple_power(::Int64, ::Int64) at /tmp/tmp0nthb16a.jl:13\n   [2] top-level\
    \ scope at /tmp/tmp0nthb16a.jl:28\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp0nthb16a.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmp0nthb16a.jl:29\n  Test threw exception\n  Expression: candidate(24,\
    \ 2) == false\n  UndefVarError: is_power_of_two not defined\n  Stacktrace:\n \
    \  [1] is_simple_power(::Int64, ::Int64) at /tmp/tmp0nthb16a.jl:13\n   [2] top-level\
    \ scope at /tmp/tmp0nthb16a.jl:29\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp0nthb16a.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmp0nthb16a.jl:30\n  Test threw exception\n  Expression: candidate(128,\
    \ 4) == false\n  UndefVarError: is_power_of_two not defined\n  Stacktrace:\n \
    \  [1] is_simple_power(::Int64, ::Int64) at /tmp/tmp0nthb16a.jl:13\n   [2] top-level\
    \ scope at /tmp/tmp0nthb16a.jl:30\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp0nthb16a.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmp0nthb16a.jl:31\n  Test threw exception\n  Expression: candidate(12,\
    \ 6) == false\n  UndefVarError: is_power_of_two not defined\n  Stacktrace:\n \
    \  [1] is_simple_power(::Int64, ::Int64) at /tmp/tmp0nthb16a.jl:13\n   [2] top-level\
    \ scope at /tmp/tmp0nthb16a.jl:31\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp0nthb16a.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmp0nthb16a.jl:32\n  Test threw exception\n  Expression: candidate(1,\
    \ 1) == true\n  UndefVarError: is_power_of_two not defined\n  Stacktrace:\n  \
    \ [1] is_simple_power(::Int64, ::Int64) at /tmp/tmp0nthb16a.jl:13\n   [2] top-level\
    \ scope at /tmp/tmp0nthb16a.jl:32\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp0nthb16a.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmp0nthb16a.jl:33\n  Test threw exception\n  Expression: candidate(1,\
    \ 12) == true\n  UndefVarError: is_power_of_two not defined\n  Stacktrace:\n \
    \  [1] is_simple_power(::Int64, ::Int64) at /tmp/tmp0nthb16a.jl:13\n   [2] top-level\
    \ scope at /tmp/tmp0nthb16a.jl:33\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp0nthb16a.jl:23\n  \nTest Summary: | Error \
    \ Total\ntest set      |    10     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 10 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0nthb16a.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n==0\
    \ \n        true\n    elseif n==1 \n        x==1\n    elseif n==2 \n        x==2\n\
    \    elseif n==3 \n        x==4\n    elseif n==4 \n        x==8\n    elseif n==5\
    \ \n        x==16\n    elseif n==6 \n        x==32\n    elseif n==7 \n       \
    \ x==64\n    elseif n==8 \n        x==128\n    elseif n==9 \n        x==256\n\
    \    elseif n==10 \n        x==512\n    elseif n==11 \n        x==1024\n    elseif\
    \ n==12 \n        x==2048\n    elseif n==13 \n        x==4096\n    elseif n==14\
    \ \n        x==8192\n    elseif n==15 \n        x==16384\n    elseif n==16 \n\
    \        x==32768\n    elseif n==17 \n        x==65536\n    elseif n==18 \n  \
    \      x==131072\n    elseif n==19 \n        x==262144\n    elseif n==20 \n  \
    \      x==524288\n    elseif n==21 \n        x==1048576\n    elseif n==22 \n \
    \       x==2097152\n    elseif n==23 \n        x==4194304\n    elseif n==24 \n\
    \        x==8388608\n    elseif n==25 \n        x==16777216\n    elseif n==26\
    \ \n        x==33554432\n    elseif n==27 \n        x==67108864\n    elseif n==28\
    \ \n        x==134217728\n    elseif n==29 \n        x==268435456\n    elseif\
    \ n==30 \n        x==536870912\n    elseif n==31 \n        x==1073741824\n   \
    \ elseif n==32 \n        x==2147483648\n    elseif n==33 \n        x==4294967296\n\
    \    elseif n==34 \n        x==8589934592\n    elseif n==35 \n        x==17179869184\n\
    \    elseif n==36 \n        x==34359738368\n    elseif n==37 \n        x==68719476736\n\
    \    elseif n==38 \n        x==137438953472\n    elseif n==39 \n        x==274877906944\n\
    \    elseif n==40 \n        x==549755813888\n    elseif n==41 \n        x==1099511627776\n\
    \    elseif n==42 \n        x==21\nusing Test\n\n@testset begin\n\ncandidate =\
    \ is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpts240exk.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpts240exk.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n==1\
    \ \n        true\n    else\n        (x==n**x)\nend\n</cell>\n<code language=julia-1.5>\n\
    is_simple_power(1, 4)\n</cell>\n<code language=julia-1.5>\nis_simple_power(2,\
    \ 2)\n</cell>\n<code language=julia-1.5>\nis_simple_power(8, 2)\n</cell>\n<code\
    \ language=julia-1.5>\nis_simple_power(3, 2)\n</cell>\n<code language=julia-1.5>\n\
    is_simple_power(3, 1)\n</cell>\n<code language=julia-1.5>\nis_simple_power(5,\
    \ 3)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number of\
    \ digits in an integer. \nFor example the integer 123 has 3 digits, 42 has 2 digits\
    \ and so on.\nHint: use the function digits(x)\nusing Test\n\n@testset begin\n\
    \ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"^\" instead of \"**\"\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpfi6j6gd2.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfi6j6gd2.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n==1\
    \ \n        true\n    else\n        if n==2 \n            true\n        else\n\
    \            if n==3 \n                true\n            else\n              \
    \  if n==4 \n                    true\n                else\n                \
    \    if n==5 \n                        true\n                    else\n      \
    \                  if n==6 \n                            true\n              \
    \          else\n                            if n==7 \n                      \
    \          true\n                            else\n                          \
    \      if n==8 \n                                    true\n                  \
    \              else\n                                    if n==9 \n          \
    \                              true\n                                    else\n\
    \                                        if n==10 \n                         \
    \                   true\n                                        else\n     \
    \                       if n==11 \n                                true\n    \
    \                        else\n                                if n==12 \n   \
    \                                 true\n                                else\n\
    \                                    if n==13 \n                             \
    \           true\n                                    else\n                 \
    \                       if n==14 \n                                          \
    \  true\n                                        else\n                      \
    \      if n==15 \n                                true\n                     \
    \       else\n                                if n==16 \n                    \
    \                true\n                                else\n                \
    \                    if n==17 \n                                        true\n\
    \                                    else\n                                  \
    \      if n==18 \n                                            true\n         \
    \                               else\n                            if n==19 \n\
    \                                true\n                            else\n    \
    \                            if n==20 \n                                    true\n\
    \                                else\n                                    if\
    \ n==21 \n                                        true\n                     \
    \               else\n                                        if n==22 \n    \
    \                                        true\n                              \
    \          else\n                            if n==23 \n                     \
    \           true\n                            else\n                         \
    \       if n==24 \n                                    true\n                \
    \                else\n                                    if n==25 \n       \
    \                                 true\n                                    else\n\
    \                                        if n==26 \n                         \
    \                   true\n                                        else\n     \
    \                       if n==27 \n                                true\n    \
    \                        else\n                                if n==28 \n   \
    \                                 true\n                                else\n\
    \                                    if n==29 \n                             \
    \           true\n                                    else\n                 \
    \                       if n==30 \n                                          \
    \  true\n                                        else\n                      \
    \      if n==31 \n                                true\n                     \
    \       else\n                                if n==32 \n                    \
    \                true\n                                else\n                \
    \                    if n==33 \n                                        true\n\
    \                                    else\n                                  \
    \      if n==34 \n                                            true\n         \
    \                               else\n                            if n==35 \n\
    \                                true\n                            else\n    \
    \                            if n==36 \n                                    true\n\
    \                                else\n                                    if\
    \ n==37 \n                                        true\n                     \
    \               else\n                                        if n==38 \n    \
    \                                        true\n                              \
    \          else\n                            if n==39 \n                     \
    \           true\n                            else\n                         \
    \       if n==40 \n                                    true\n                \
    \                else\n                                    if n==41 \n       \
    \                                 true\n                                    else\n\
    \                                        if n==42 \n                         \
    \                   true\n                                        else\n     \
    \                       if n==43 \n                                true\n    \
    \                        else\n                                if n==44 \n   \
    \                                 true\n                                else\n\
    \                                    if n==45 \n\nusing Test\n\n@testset begin\n\
    \ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpagcwq4km.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpagcwq4km.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n ==\
    \ 1 \n        then true\n    else if n == 2 \n        then true\n    else if n\
    \ % 2 == 0 \n        then is_simple_power(x, n/2)\n    else \n        false\n\
    \    end\nend\n</cell>\n<text>\nExercise 7\nWrite a function that returns true\
    \ if a number x is a power of n and false in other cases.\nx is a power of n if\
    \ n**int=x\nFor example:\nis_power(1, 4) => true\nis_power(2, 2) => true\nis_power(8,\
    \ 2) => true\nis_power(3, 2) => false\nis_power(3, 1) => false\nis_power(5, 3)\
    \ => false\nHint: Use is_simple_power() function defined above.\nusing Test\n\n\
    @testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\
    \t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\t\
    @test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24,\
    \ 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6)\
    \ == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"true\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpzk50ul9_.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpzk50ul9_.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n ==\
    \ 1 \n        then true\n    else if n%2 == 0 \n        then is_simple_power(x,\
    \ n/2)\n        else false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    is_simple_power(3, 2)\n</cell>\n<code language=julia-1.5>\nis_simple_power(3,\
    \ 1)\n</cell>\n<code language=julia-1.5>\nis_simple_power(5, 3)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of digits in an integer.\n\
    using Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"true\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpqrjgzstz.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpqrjgzstz.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n==1\
    \ \n        then true\n    else if n==2 \n        then x==1\n    else if n==3\
    \ \n        then x==1\n    else if n==4 \n        then x==1\n    else if n==5\
    \ \n        then x==1\n    else if n==6 \n        then x==1\n    else if n==7\
    \ \n        then x==1\n    else if n==8 \n        then x==1\n    else if n==9\
    \ \n        then x==1\n    else if n==10 \n        then x==1\n    else if n==11\
    \ \n        then x==1\n    else if n==12 \n        then x==1\n    else if n==13\
    \ \n        then x==1\n    else if n==14 \n        then x==1\n    else if n==15\
    \ \n        then x==1\n    else if n==16 \n        then x==1\n    else if n==17\
    \ \n        then x==1\n    else if n==18 \n        then x==1\n    else if n==19\
    \ \n        then x==1\n    else if n==20 \n        then x==1\n    else if n==21\
    \ \n        then x==1\n    else if n==22 \n        then x==1\n    else if n==23\
    \ \n        then x==1\n    else if n==24 \n        then x==1\n    else if n==25\
    \ \n        then x==1\n    else if n==26 \n        then x==1\n    else if n==27\
    \ \n        then x==1\n    else if n==28 \n        then x==1\n    else if n==29\
    \ \n        then x==1\n    else if n==30 \n        then x==1\n    else if n==31\
    \ \n        then x==1\n    else if n==32 \n        then x==1\n    else if n==33\
    \ \n        then x==1\n    else if n==34 \n        then x==1\n    else if n==35\
    \ \n        then x==1\n    else if n==36 \n        then x==1\n    else if n==37\
    \ \n        then x==1\n    else if n==38 \n        then x==1\n    else if n==39\
    \ \n        then x==1\n    else if n==40 \nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"true\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmply2z1yrq.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmply2z1yrq.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n ==\
    \ 1 \n        then true\n    else if n % x == 0 \n        then true\n    else\
    \ false\nend\n</cell>\n<code language=julia-1.3>\nis_simple_power(1, 4)\n</cell>\n\
    <code language=julia-1.3>\nis_simple_power(2, 2)\n</cell>\n<code language=julia-1.3>\n\
    is_simple_power(8, 2)\n</cell>\n<code language=julia-1.3>\nis_simple_power(3,\
    \ 2)\n</cell>\n<code language=julia-1.3>\nis_simple_power(3, 1)\n</cell>\n<code\
    \ language=julia-1.3>\nis_simple_power(5, 3)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns true if a number x is a power of n and false in other\
    \ cases.\nx is a power of n if n**int=x\nFor example:\nis_power(1, 4) => true\n\
    is_power(2, 2) => true\nis_power(8, 2) => true\nis_power(3, 2) => false\nis_power(3,\
    \ 1) => false\nis_power(5, 3) => false\nHint: use is_simple_power\nusing Test\n\
    \n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) ==\
    \ true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\
    \t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24,\
    \ 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6)\
    \ == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"true\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmppabg6b19.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmppabg6b19.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if is_power_of_two(n)\
    \ == true\n        true\n    else\n        false\n    end\nend\n</cell>\n<code\
    \ language=julia-1.4>\nis_power_of_two(8)\n</cell>\n<code language=julia-1.4>\n\
    is_power_of_two(9)\n</cell>\n<code language=julia-1.4>\nis_power_of_two(10)\n\
    </cell>\n<code language=julia-1.4>\nis_power_of_two(11)\n</cell>\n<code language=julia-1.4>\n\
    is_power_of_two(12)\n</cell>\n<code language=julia-1.4>\nis_power_of_two(13)\n\
    </cell>\n<code language=julia-1.4>\nis_power_of_two(14)\n</cell>\n<code language=julia-1.4>\n\
    is_power_of_two(15)\n</cell>\n<code language=julia-1.4>\nis_power_of_two(16)\n\
    </cell>\n<code language=julia-1.4>\nis_power_of_two(17)\n</cell>\n<code language=julia-1.4>\n\
    is_power_of_two(18)\n</cell>\n<code language=julia-1.4>\nis_power_of_two(19)\n\
    </cell>\n<code language=julia-1.4>\nis_power_of_two(20)\n</cell>\n<code language=julia-1.4>\n\
    is_power_of_two(21)\n</cell>\n<code language=julia-1.4>\nis_power_of_two(22)\n\
    </cell>\n<code language=julia-1.4>\nis_power_of_two(23)\n</cell>\n<code language=julia-1.4>\n\
    is_power_of_two(24)\n</cell>\n<code language=julia-1.4>\nis_power_of_two(25)\n\
    </cell>\n<code language=julia-1.4>\nis_power_of_two(26)\n</cell>\n<code language=julia-1.4>\n\
    is_power_of_two(27)\n</cell>\n<code language=julia-1.4>\nis_power_of_two(28)\n\
    </cell>\n<code language=julia-1.4>\nis_power_of_two(29)\n</cell>\n<code language=julia-1.4>\n\
    is_power_of_two(30)\n</cell>\n<code language=julia-1.4>\nis_power_of_two(31)\n\
    </cell>\n<code language=julia-1.4>\nis_power_of_two(32)\n</cell>\n<code language=julia-1.4>\n\
    is_power_of_two(33)\n</cell>\n<code language=julia-1.4>\nis_power_of_two(34)\n\
    </cell>\n<code language=julia-1.4>\nis_power_of_two(35)\n</cell>\n<code language=julia-\n\
    using Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmg5q8lrl.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmg5q8lrl.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n==1\
    \ \n        then return true\n    else \n        return (x==n**x)\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns true if a number x is a power\
    \ of n and false in other cases.\nx is a power of n if n**int=x\nFor example:\n\
    is_power(1, 4) => true\nis_power(2, 2) => true\nis_power(8, 2) => true\nis_power(3,\
    \ 2) => false\nis_power(3, 1) => false\nis_power(5, 3) => false\nHint: use is_simple_power()\
    \ and is_power() functions to solve this exercise.\nusing Test\n\n@testset begin\n\
    \ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpvgne9tmk.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpvgne9tmk.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if is_power_of_two(n)\
    \ == true \n        then x == n^n \n        else false\n    else \n        false\n\
    end\n</cell>\n<code language=julia-1.5>\nis_power_of_two(8)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(9)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(10)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(11)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(12)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(13)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(14)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(15)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(16)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(17)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(18)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(19)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(20)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(21)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(22)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(23)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(24)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(25)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(26)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(27)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(28)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(29)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(30)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(31)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(32)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(33)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(34)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(35)\n</\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t\
    @test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9,\
    \ 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) ==\
    \ false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\
    \t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"x\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpog7bomuy.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpog7bomuy.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n==1\
    \ \n        then true\n    else if n==0\n        then false\n    else if n==-1\n\
    \        then false\n    else if n==-2\n        then false\n    else if n==-3\n\
    \        then false\n    else if n==-4\n        then false\n    else if n==-5\n\
    \        then false\n    else if n==-6\n        then false\n    else if n==-7\n\
    \        then false\n    else if n==-8\n        then false\n    else if n==-9\n\
    \        then false\n    else if n==-10\n        then false\n    else if n==-11\n\
    \        then false\n    else if n==-12\n        then false\n    else if n==-13\n\
    \        then false\n    else if n==-14\n        then false\n    else if n==-15\n\
    \        then false\n    else if n==-16\n        then false\n    else if n==-17\n\
    \        then false\n    else if n==-18\n        then false\n    else if n==-19\n\
    \        then false\n    else if n==-20\n        then false\n    else if n==-21\n\
    \        then false\n    else if n==-22\n        then false\n    else if n==-23\n\
    \        then false\n    else if n==-24\n        then false\n    else if n==-25\n\
    \        then false\n    else if n==-26\n        then false\n    else if n==-27\n\
    \        then false\n    else if n==-28\n        then false\n    else if n==-29\n\
    \        then false\n    else if n==-30\n        then false\n    else if n==-31\n\
    \        then false\n    else if n==-32\n        then false\n    else if n==-33\n\
    \        then false\n    else if n==-34\n        then false\n    else if n==-35\n\
    \        then false\n    else if n==-36\n        then false\n    else if n==-37\n\
    \        then false\n    else if n==-38\n        then false\n    else if n==-39\n\
    \        then false\n    else if n==-40\n        then false\n    else if n==-41\n\
    \        then false\n    else if n==-42\n        then false\n    else if n==-43\n\
    \        \nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"true\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpn8q1epgz.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpn8q1epgz.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if is_power_of_two(n)\
    \ == true && x == n^n \n    else \n        false\n    end\nend\n</cell>\n<text>\n\
    Task 3: Write a function that returns the number of digits in an Int64. \n   \
    \ For example:\n    digits(123456789) => 5\n    digits(1000) => 2\n    digits(100)\
    \ => 1\n    digits(1) => 0\n    digits(0) => 0\n    digits(-1) => 0\n    digits(-10)\
    \ => 0\n    digits(-100) => 0\n    digits(-1000) => 0\n    digits(1000000000000)\
    \ => 18\n    digits(100000000000000000000) => 18\n    digits(1000000000000000000000000000000)\
    \ => 18\n    digits(1000000000000000000000000000000000) => 18\n    digits(100000000000000000000000000000000)\
    \ => 18\n    digits(1000000000000000000000000000000000) => 18\n    digits(100000000000000000000000000000000)\
    \ => 18\n    digits(100000000000000000000000000000000) => 18\n    digits(100000000000000000000000000000000)\
    \ => 18\n    digits(100000000000000000000000000000000) => 18\n    digits(100000000000000000000000000000000)\
    \ => 18\n    digits(100000000000000000000000000000000) => 18\n    digits(100000000000000000000000000000000)\
    \ => 18\n    digits(100000000000000000000000000000000) => 18\n    digits(100000000000000000000000000000000)\
    \ => 18\n    digits(100000000000000000000000000000000) => 18\n    digits(100000000000000000000000000000000)\
    \ => 18\n    digits(100000000000000000000000000000000) => 18\n    digits(100000000000000000000000000000000)\
    \ => 18\n    digits(100000000000000000000000000000000) => 18\n    digits(100000000000000000000000000000000)\
    \ => 18\n    digits(100000000000000000000000000000000) => 18\n    digits(100000000000000000000000000000000)\
    \ => 18\n    digits(100000000000000000000000000000000) => 18\n    digits(100000000000000000000000000000000)\
    \ => 18\n    digits(100000000000000000000000000000000) => 18\n    digits(100000000000000000000000000000000)\
    \ => 18\n    digits(100000000000000000000000000000000) => 18\n    digits(100000000000000000000000000000000)\
    \ => 18\n    digits(100000000000000000000000000000000) => 18\n    digits(100000000000000000000000000000000)\
    \ => 18\n    digits(100000000000000000000000000000000) => 18\n    digits(100000000000000000000000000000000)\
    \ => 18\n    digits(100000000000000000000000000000000) => 18\n    digits(100000000000000000000000000000000)\
    \ => 18\n    digits(100000000000000000000000000000000) => 18\n    digits(100000000000000000000000000000000)\
    \ => 18\n    digits(100000000000000000000000000000000) => 18\n    digits(100000000000000000000000000000000)\
    \ => 18\n    digits(100000000000000000000000000000000) => 18\n    digits(\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpn7jqz6d4.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpn7jqz6d4.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if is_power_of_two(n)\
    \ == true\n        true\n    else\n        false\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"Your task is to write a function that returns true\
    \ if a number x is a power of n and false in other cases.\n    x is a power of\
    \ n if n**int=x\n    For example:\n    is_power_of_two(1) => true\n    is_power_of_two(2)\
    \ => true\n    is_power_of_two(8) => true\n    is_power_of_two(9) => false\n \
    \   \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqj3fa1lu.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqj3fa1lu.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if is_power_of_two(n)\
    \ \n        then x == n^n \n        else false\n    else \n        false\nend\n\
    </cell>\n<code language=julia-1.5>\nis_simple_power(1, 4)\n</cell>\n<code language=julia-1.5>\n\
    is_simple_power(2, 2)\n</cell>\n<code language=julia-1.5>\nis_simple_power(8,\
    \ 2)\n</cell>\n<code language=julia-1.5>\nis_simple_power(3, 2)\n</cell>\n<code\
    \ language=julia-1.5>\nis_simple_power(3, 1)\n</cell>\n<code language=julia-1.5>\n\
    is_simple_power(5, 3)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of digits in an integer.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"x\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpyrpk71y6.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpyrpk71y6.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n==1\
    \ \n        then true\n    else if n==0\n        then false\n    else if n==-1\n\
    \        then false\n    else if n==-2\n        then false\n    else if n==-3\n\
    \        then false\n    else if n==-4\n        then false\n    else if n==-5\n\
    \        then false\n    else if n==-6\n        then false\n    else if n==-7\n\
    \        then false\n    else if n==-8\n        then false\n    else if n==-9\n\
    \        then false\n    else if n==-10\n        then false\n    else if n==-11\n\
    \        then false\n    else if n==-12\n        then false\n    else if n==-13\n\
    \        then false\n    else if n==-14\n        then false\n    else if n==-15\n\
    \        then false\n    else if n==-16\n        then false\n    else if n==-17\n\
    \        then false\n    else if n==-18\n        then false\n    else if n==-19\n\
    \        then false\n    else if n==-20\n        then false\n    else if n==-21\n\
    \        then false\n    else if n==-22\n        then false\n    else if n==-23\n\
    \        then false\n    else if n==-24\n        then false\n    else if n==-25\n\
    \        then false\n    else if n==-26\n        then false\n    else if n==-27\n\
    \        then false\n    else if n==-28\n        then false\n    else if n==-29\n\
    \        then false\n    else if n==-30\n        then false\n    else if n==-31\n\
    \        then false\n    else if n==-32\n        then false\n    else if n==-33\n\
    \        then false\n    else if n==-34\n        then false\n    else if n==-35\n\
    \        then false\n    else if n==-36\n        then false\n    else if n==-37\n\
    \        then false\n    else if n==-38\n        then false\n    else if n==-39\n\
    \        then false\n    else if n==-40\n        then false\n    else if n==-41\n\
    \        then false\n    else if n==-42\n        then false\n    else if n==-43\n\
    \        \nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"true\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp3ji68pcg.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp3ji68pcg.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n ==\
    \ 1 \n        then true\n    else if n == 0 \n        then false\n    else if\
    \ x == 0 \n        then false\n    else if x == 1 \n        then true\n    else\
    \ if x % n == 0 \n        then true\n    else if x % n != 0 \n        then false\n\
    \    else \n        is_simple_power(x div n, n)\nend\n</cell>\n<code language=julia-1.5>\n\
    is_simple_power(1, 4)\n</cell>\n<code language=julia-1.5>\nis_simple_power(2,\
    \ 2)\n</cell>\n<code language=julia-1.5>\nis_simple_power(8, 2)\n</cell>\n<code\
    \ language=julia-1.5>\nis_simple_power(3, 2)\n</cell>\n<code language=julia-1.5>\n\
    is_simple_power(3, 1)\n</cell>\n<code language=julia-1.5>\nis_simple_power(5,\
    \ 3)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number of\
    \ digits in an integer.\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"true\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpzq5a3wmd.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpzq5a3wmd.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n==1\
    \ \n        then true\n    else if n==0\n        then false\n    else if n==-1\n\
    \        then false\n    else if n==-2\n        then false\n    else if n==-3\n\
    \        then false\n    else if n==-4\n        then false\n    else if n==-5\n\
    \        then false\n    else if n==-6\n        then false\n    else if n==-7\n\
    \        then false\n    else if n==-8\n        then false\n    else if n==-9\n\
    \        then false\n    else if n==-10\n        then false\n    else if n==-11\n\
    \        then false\n    else if n==-12\n        then false\n    else if n==-13\n\
    \        then false\n    else if n==-14\n        then false\n    else if n==-15\n\
    \        then false\n    else if n==-16\n        then false\n    else if n==-17\n\
    \        then false\n    else if n==-18\n        then false\n    else if n==-19\n\
    \        then false\n    else if n==-20\n        then false\n    else if n==-21\n\
    \        then false\n    else if n==-22\n        then false\n    else if n==-23\n\
    \        then false\n    else if n==-24\n        then false\n    else if n==-25\n\
    \        then false\n    else if n==-26\n        then false\n    else if n==-27\n\
    \        then false\n    else if n==-28\n        then false\n    else if n==-29\n\
    \        then false\n    else if n==-30\n        then false\n    else if n==-31\n\
    \        then false\n    else if n==-32\n        then false\n    else if n==-33\n\
    \        then false\n    else if n==-34\n        then false\n    else if n==-35\n\
    \        then false\n    else if n==-36\n        then false\n    else if n==-37\n\
    \        then false\n    else if n==-38\n        then false\n    else if n==-39\n\
    \        then false\n    else if n==-40\n        then false\n    else if n==-41\n\
    \        then false\n    else if n==-42\n        then false\n    else if n==-43\n\
    \        \nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"true\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpgmj30i64.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpgmj30i64.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if is_power_of_two(n)\
    \ == true\n        power = 2\n    else\n        power = n\n    end\n    \n   \
    \ if power == x\n        return true\n    else\n        return false\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nis_simple_power(1, 4)\n</cell>\n<code\
    \ language=julia-1.5>\nis_simple_power(2, 2)\n</cell>\n<code language=julia-1.5>\n\
    is_simple_power(8, 2)\n</cell>\n<code language=julia-1.5>\nis_simple_power(3,\
    \ 2)\n</cell>\n<code language=julia-1.5>\nis_simple_power(3, 1)\n</cell>\n<code\
    \ language=julia-1.5>\nis_simple_power(5, 3)\n</cell>\n<text>\nProblem 3\nWrite\
    \ a function that returns true if a number x is a power of 2 and a power of n\
    \ if n**int=x\n    For example:\n    is_power_of_two(2) => true\n    is_power_of_two(8)\
    \ => true\n    is_power_of_two(16) => true\n    is_power_of_two(32) => true\n\
    \    is_power_of_two(64) => true\n    is_power_of_two(128) => false\n    is_power_of_two(256)\
    \ => false\n    is_power_of_two(1024) => false\n    is_power_of_two(2048) => false\n\
    \    is_power_of_two(4096) => false\n    is_power_of_two(8192) => false\n    is_power_of_two(16384)\
    \ => false\n    is_power_of_two(32768) => false\n    is_power_of_two(65536) =>\
    \ false\n    is_power_of_two(131072) => false\n    is_power_of_two(262144) =>\
    \ false\n    is_power_of_two(524288) => false\n    is_power_of_two(1048576) =>\
    \ false\n    is_power_of_two(2097152) => false\n    is_power_of_two(4194304) =>\
    \ false\n    is_power_of_two(8388608) => false\n    is_power_of_two(16777216)\
    \ => false\n    is_power_of_two(33554432) => false\n    is_power_of_two(67108864)\
    \ => false\n    is_power_of_two(134217728) => false\n    is_power_of_two(268435456)\
    \ => false\n    is_power_of_two(536870912) => false\n    is_power_of_two(1073741824)\
    \ => false\n    is_power_of_two(2147483648) => false\n    is_power_of_two(4294967296)\
    \ => false\n    is_power_of_two(8589934592) => false\n    is_power_of_two(17179869184)\
    \ => false\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpu9we9axq.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpu9we9axq.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n==1\
    \ \n        then true\n    else if n==2 \n        then true\n    else if n==3\
    \ \n        then true\n    else if n==4 \n        then true\n    else if n==5\
    \ \n        then true\n    else if n==6 \n        then true\n    else if n==7\
    \ \n        then true\n    else if n==8 \n        then true\n    else if n==9\
    \ \n        then true\n    else if n==10 \n        then true\n    else if n==11\
    \ \n        then true\n    else if n==12 \n        then true\n    else if n==13\
    \ \n        then true\n    else if n==14 \n        then true\n    else if n==15\
    \ \n        then true\n    else if n==16 \n        then true\n    else if n==17\
    \ \n        then true\n    else if n==18 \n        then true\n    else if n==19\
    \ \n        then true\n    else if n==20 \n        then true\n    else if n==21\
    \ \n        then true\n    else if n==22 \n        then true\n    else if n==23\
    \ \n        then true\n    else if n==24 \n        then true\n    else if n==25\
    \ \n        then true\n    else if n==26 \n        then true\n    else if n==27\
    \ \n        then true\n    else if n==28 \n        then true\n    else if n==29\
    \ \n        then true\n    else if n==30 \n        then true\n    else if n==31\
    \ \n        then true\n    else if n==32 \n        then true\n    else if n==33\
    \ \n        then true\n    else if n==34 \n        then true\n    else if n==35\
    \ \n        then true\n    else if n==36 \n        then true\n    else if n==37\
    \ \n        then true\n    else if n==38 \n        then true\n    else if n==39\
    \ \n        then true\n    else if n==40 \n        then true\n    else if n==41\
    \ \n        then true\n    else if n==42 \n        then true\n    else if n==43\
    \ \n        then true\n    else if n==44 \n        then true\n    else if n==45\
    \ \n        then true\n    else if n==46 \n        then true\n    \nusing Test\n\
    \n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) ==\
    \ true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\
    \t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24,\
    \ 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6)\
    \ == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"true\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp11drbpcf.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp11drbpcf.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if is_power_of_two(n)\
    \ == true \n        then x == n**int(x)\n        else false\n    else \n     \
    \   false\nend\n</cell>\n<code language=julia-1.5>\nis_power_of_two(8)\n</cell>\n\
    <code language=julia-1.5>\nis_power_of_two(9)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(10)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(11)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(12)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(13)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(14)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(15)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(16)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(17)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(18)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(19)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(20)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(21)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(22)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(23)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(24)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(25)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(26)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(27)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(28)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(29)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(30)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(31)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(32)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(33)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(34)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(35)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"x\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp844p7pz9.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp844p7pz9.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n ==\
    \ 1 \n        then true\n        else x == n**x\n    end\nend\n</cell>\n<code\
    \ language=julia-1.3>\n@assert is_simple_power(1, 4) == true\n@assert is_simple_power(2,\
    \ 2) == true\n@assert is_simple_power(8, 2) == true\n@assert is_simple_power(3,\
    \ 2) == false\n@assert is_simple_power(3, 1) == false\n@assert is_simple_power(5,\
    \ 3) == false\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ factorial of a given number. \nThe factorial of a number $n$ is defined as:\n\
    $$n! = n \\times n-1 \\times n-2 \\times .... 1 \\times 0 $$\nFor example, $5!\
    \ = 5 \\times 4 \\times 3 \\times 2 \\times 1 = 120$\nusing Test\n\n@testset begin\n\
    \ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"true\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp4y_izwwt.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp4y_izwwt.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if is_power_of_two(x)\
    \ && is_power_of_two(n)\n        power = x % n\n        if power == 0\n      \
    \      return true\n        else\n            return false\n    end\n    return\
    \ false\nend\n</cell>\n<code language=julia-1.5>\n@assert is_simple_power(1, 4)\
    \ == true\n@assert is_simple_power(2, 2) == true\n@assert is_simple_power(8, 2)\
    \ == true\n@assert is_simple_power(3, 2) == false\n@assert is_simple_power(3,\
    \ 1) == false\n@assert is_simple_power(5, 3) == false\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns true if a number x is a power of n and false\
    \ in other cases.\nx is a power of n if n**int=x\nFor example:\nis_power_of_two(2)\
    \ => true\nis_power_of_two(8) => true\nis_power_of_two(9) => false\nis_power_of_two(10)\
    \ => false\nis_power_of_two(11) => false\nis_power_of_two(12) => false\nis_power_of_two(13)\
    \ => false\nis_power_of_two(14) => false\nis_power_of_two(15) => false\nis_power_of_two(16)\
    \ => false\nis_power_of_two(17) => false\nis_power_of_two(18) => false\nis_power_of_two(19)\
    \ => false\nis_power_of_two(20) => false\nis_power_of_two(21) => false\nis_power_of_two(22)\
    \ => false\nis_power_of_two(23) => false\nis_power_of_two(24) => false\nis_power_of_two(25)\
    \ => false\nis_power_of_two(26) => false\nis_power_of_two(27) => false\nis_power_of_two(28)\
    \ => false\nis_power_of_two(29) => false\nis_power_of_two(30) => false\nis_power_of_two(31)\
    \ => false\nis_power_of_two(32) => false\nis_power_of_two(33) => false\nis_power_of_two(34)\
    \ => false\nis_power_of_two(35) => false\nis_power_of_two(36) => false\nis_power_of_two(37)\
    \ => false\nis_power_of_two(38) => false\nis_power_of_two(39) => false\nis_power_of_two(40)\
    \ => false\nis_power_of_two(41) => false\nis_power_of_two(42) => false\nis_power_of_two(43)\
    \ => false\nis_power_of_two(44) => false\nis_power_of_two(45) => false\nis_power_of_two(46)\
    \ => false\nis_\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplmyd3_7t.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplmyd3_7t.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if is_power_of_two(n)\
    \ \n        then x == n**int(x) else false\n    else \n        false\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert is_simple_power(1, 4) == true\n@assert is_simple_power(2,\
    \ 2) == true\n@assert is_simple_power(8, 2) == true\n@assert is_simple_power(3,\
    \ 2) == false\n@assert is_simple_power(3, 1) == false\n@assert is_simple_power(5,\
    \ 3) == false\n</cell>\n<text>\nExercise 2\nWrite a function that returns true\
    \ if a number x is a power of n and false in other cases.\nx is a power of n if\
    \ n**int=x\nFor example:\nis_power_of_two(2) => true\nis_power_of_two(8) => true\n\
    is_power_of_two(3) => false\nis_power_of_two(5) => false\nHint: Use is_power_of_two(n)\
    \ function.\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t\
    @test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4,\
    \ 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"x\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0c34u1vt.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp0c34u1vt.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if is_power_of_two(n)\
    \ == true\n        return true\n    else\n        return false\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(8)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(9)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(10)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(11)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(12)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(13)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(14)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(15)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(16)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(17)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(18)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(19)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(20)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(21)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(22)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(23)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(24)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(25)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(26)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(27)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(28)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(29)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(30)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(31)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(32)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(33)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(34)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(35)\n</cell>\n<code language=julia-\n\
    using Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpadi25w6n.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpadi25w6n.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if is_power_of_two(n)\
    \ == true\n        true\n    else\n        false\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nis_simple_power(1, 4)\n</cell>\n<code language=julia-1.5>\n\
    is_simple_power(2, 2)\n</cell>\n<code language=julia-1.5>\nis_simple_power(8,\
    \ 2)\n</cell>\n<code language=julia-1.5>\nis_simple_power(3, 2)\n</cell>\n<code\
    \ language=julia-1.5>\nis_simple_power(3, 1)\n</cell>\n<code language=julia-1.5>\n\
    is_simple_power(5, 3)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ true if a number x is a power of n and false in other cases.\nx is a power of\
    \ n if n**int=x\nFor example:\nis_power_of_two(2) => true\nis_power_of_two(8)\
    \ => true\nis_power_of_two(16) => true\nis_power_of_two(32) => false\nis_power_of_two(64)\
    \ => false\nis_power_of_two(128) => false\nis_power_of_two(256) => false\nis_power_of_two(512)\
    \ => false\nis_power_of_two(1024) => false\nis_power_of_two(2048) => false\nis_power_of_two(4096)\
    \ => false\nis_power_of_two(8192) => false\nis_power_of_two(16384) => false\n\
    is_power_of_two(32768) => false\nis_power_of_two(65536) => false\nis_power_of_two(131072)\
    \ => false\nis_power_of_two(262144) => false\nis_power_of_two(524288) => false\n\
    is_power_of_two(1048576) => false\nis_power_of_two(2097152) => false\nis_power_of_two(4194304)\
    \ => false\nis_power_of_two(8388608) => false\nis_power_of_two(16777216) => false\n\
    is_power_of_two(33554432) => false\nis_power_of_two(67108864) => false\nis_power_of_two(134217728)\
    \ => false\nis_power_of_two(268435456) => false\nis_power_of_two(536870912) =>\
    \ false\nis_power_of_two(1073741824) => false\nis_power_of_two(2147483648) =>\
    \ false\nis_power_of_two(4294967296) => false\nis_power_of_two(8589934592) =>\
    \ false\nis_power_of_two(17179869184) => false\nis_power_of_two\nusing Test\n\n\
    @testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\
    \t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\t\
    @test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24,\
    \ 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6)\
    \ == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzv_eazfv.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzv_eazfv.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n ==\
    \ 1 \n        then true\n    else if n % x == 0 \n        then true\n    else\
    \ false\nend\n</cell>\n<text>\nExercise 2\nWrite a function that returns true\
    \ if a number x is a power of n and false in other cases.\nx is a power of n if\
    \ n**int=x\nFor example:\nis_power(1, 4) => true\nis_power(2, 2) => true\nis_power(8,\
    \ 2) => true\nis_power(3, 2) => false\nis_power(3, 1) => false\nis_power(5, 3)\
    \ => false\nHint: Use is_simple_power to solve this exercise.\nusing Test\n\n\
    @testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\
    \t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\t\
    @test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24,\
    \ 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6)\
    \ == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"true\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpasetdwa7.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpasetdwa7.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if is_power_of_two(n)\
    \ == true\n        return true\n    else\n        return false\n    end\nend\n\
    \"\"\"\nis_power_of_two(x::Int64)::Bool\n    x is a power of two if x is even\n\
    \    x is not a power of two if x is odd\n    For example:\n    is_power_of_two(2)\
    \ => true\n    is_power_of_two(5) => false\n    is_power_of_two(7) => false\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t\
    @test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4,\
    \ 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String) at ./error.jl:42\n [2] top-level\
    \ scope at /tmp/tmpfx506em2.jl:19\n [3] include(::Module, ::String) at ./Base.jl:377\n\
    \ [4] exec_options(::Base.JLOptions) at ./client.jl:288\n [5] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpfx506em2.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n==1\
    \ \n        then true\n    else if n==0\n        then false\n    else if n==-1\n\
    \        then false\n    else if n==-2\n        then false\n    else if n==-3\n\
    \        then false\n    else if n==-4\n        then false\n    else if n==-5\n\
    \        then false\n    else if n==-6\n        then false\n    else if n==-7\n\
    \        then false\n    else if n==-8\n        then false\n    else if n==-9\n\
    \        then false\n    else if n==-10\n        then false\n    else if n==-11\n\
    \        then false\n    else if n==-12\n        then false\n    else if n==-13\n\
    \        then false\n    else if n==-14\n        then false\n    else if n==-15\n\
    \        then false\n    else if n==-16\n        then false\n    else if n==-17\n\
    \        then false\n    else if n==-18\n        then false\n    else if n==-19\n\
    \        then false\n    else if n==-20\n        then false\n    else if n==-21\n\
    \        then false\n    else if n==-22\n        then false\n    else if n==-23\n\
    \        then false\n    else if n==-24\n        then false\n    else if n==-25\n\
    \        then false\n    else if n==-26\n        then false\n    else if n==-27\n\
    \        then false\n    else if n==-28\n        then false\n    else if n==-29\n\
    \        then false\n    else if n==-30\n        then false\n    else if n==-31\n\
    \        then false\n    else if n==-32\n        then false\n    else if n==-33\n\
    \        then false\n    else if n==-34\n        then false\n    else if n==-35\n\
    \        then false\n    else if n==-36\n        then false\n    else if n==-37\n\
    \        then false\n    else if n==-38\n        then false\n    else if n==-39\n\
    \        then false\n    else if n==-40\n        then false\n    else if n==-41\n\
    \        then false\n    else if n==-42\n        then false\n    else if n==-43\n\
    \        \nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"true\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmphksulzcw.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmphksulzcw.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if is_power_of_two(n)\
    \ == true \n        then x == n^n \n        else false \n    else \n        true\
    \ \nend\n</cell>\n<code language=julia-1.3>\nis_simple_power(2, 2)\n</cell>\n\
    <code language=julia-1.3>\nis_simple_power(8, 2)\n</cell>\n<code language=julia-1.3>\n\
    is_simple_power(3, 2)\n</cell>\n<code language=julia-1.3>\nis_simple_power(3,\
    \ 1)\n</cell>\n<code language=julia-1.3>\nis_simple_power(5, 3)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of digits in an integer.\n\
    using Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"x\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_qihexza.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_qihexza.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n ==\
    \ 0 \n        then return true\n    else if n == 1 \n        then return true\n\
    \    else if n % 2 == 0 \n        then return is_simple_power(x, n / 2)\n    else\
    \ \n        return is_simple_power(x, n / 2) && is_simple_power(x, n / 2)\nend\n\
    </cell>\n<code language=julia-1.5>\nis_simple_power(1, 4)\n</cell>\n<code language=julia-1.5>\n\
    is_simple_power(2, 2)\n</cell>\n<code language=julia-1.5>\nis_simple_power(8,\
    \ 2)\n</cell>\n<code language=julia-1.5>\nis_simple_power(3, 2)\n</cell>\n<code\
    \ language=julia-1.5>\nis_simple_power(3, 1)\n</cell>\n<code language=julia-1.5>\n\
    is_simple_power(5, 3)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ true if a number x is a power of n and false in other cases.\nx is a power of\
    \ n if n**int=x\nFor example:\nis_power(1, 4) => true\nis_power(2, 2) => true\n\
    is_power(8, 2) => true\nis_power(3, 2) => false\nis_power(3, 1) => false\nis_power(5,\
    \ 3) => false\nHint: use the is_simple_power function.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t\
    @test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9,\
    \ 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) ==\
    \ false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\
    \t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp5d6uozdo.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp5d6uozdo.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n ==\
    \ 1 \n        then true\n    else if n == 0 \n        then false\n    else if\
    \ n == -1 \n        then false\n    else if n == -2\n        then false\n    else\
    \ if n == -3\n        then false\n    else if n == -4\n        then false\n  \
    \  else if n == -5\n        then false\n    else if n == -6\n        then false\n\
    \    else if n == -7\n        then false\n    else if n == -8\n        then false\n\
    \    else if n == -9\n        then false\n    else if n == -10\n        then false\n\
    \    else if n == -11\n        then false\n    else if n == -12\n        then\
    \ false\n    else if n == -13\n        then false\n    else if n == -14\n    \
    \    then false\n    else if n == -15\n        then false\n    else if n == -16\n\
    \        then false\n    else if n == -17\n        then false\n    else if n ==\
    \ -18\n        then false\n    else if n == -19\n        then false\n    else\
    \ if n == -20\n        then false\n    else if n == -21\n        then false\n\
    \    else if n == -22\n        then false\n    else if n == -23\n        then\
    \ false\n    else if n == -24\n        then false\n    else if n == -25\n    \
    \    then false\n    else if n == -26\n        then false\n    else if n == -27\n\
    \        then false\n    else if n == -28\n        then false\n    else if n ==\
    \ -29\n        then false\n    else if n == -30\n        then false\n    else\
    \ if n == -31\n        then false\n    else if n == -32\n        then false\n\
    \    else if n == -33\n        then false\n    else if n == -34\n        then\
    \ false\n    else if n == -35\n        then false\n    else if n == -36\n    \
    \    then false\n    else if n == -37\n        then false\n    else if n == -38\n\
    \        then false\n    else if n == -39\n        then false\n    else if n ==\
    \ -40\n        then false\n    else if n == -41\n        then false\n    else\
    \ if n == -42\n        then false\n    else if n == -43\n        then false\n\
    \    else if n == -44\n        then false\n    else if n == -45\n        then\
    \ false\n    else if n == -46\n        then false\n    else if n == -47\n    \
    \    then \nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"true\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpwd6bw5er.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpwd6bw5er.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if is_power_of_two(n)\
    \ == true\n        power = n / 2\n        if x == power\n            return true\n\
    \        else\n            return false\n    else\n        return false\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nis_power_of_two(8)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(9)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(10)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(11)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(12)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(13)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(14)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(15)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(16)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(17)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(18)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(19)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(20)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(21)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(22)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(23)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(24)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(25)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(26)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(27)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(28)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(29)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(30)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(31)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(32)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(33)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(34)\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpn5jv8tb5.jl:15 expected \"\
    end\", got \"else\"\nStacktrace:\n [1] top-level scope at /tmp/tmpn5jv8tb5.jl:19\n\
    \ [2] include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpn5jv8tb5.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if is_power_of_two(n)\
    \ == true\n        true\n    else\n        if x==n\n            true\n       \
    \ else\n            if n%x==0\n                true\n            else\n      \
    \          false\n        end\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(8)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(9)\n</cell>\n\
    <code language=julia-1.5>\nis_power_of_two(10)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(11)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(12)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(13)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(14)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(15)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(16)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(17)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(18)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(19)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(20)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(21)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(22)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(23)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(24)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(25)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(26)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(27)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(28)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(29)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(30)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(31)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(32)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(33)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(34)\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t\
    @test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9,\
    \ 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) ==\
    \ false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\
    \t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8g_2301q.jl:26\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8g_2301q.jl:26\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if is_power_of_two(n)\
    \ \n        then x == n**x \n        else false\n    else \n        false\nend\n\
    </cell>\n<code language=julia-1.5>\nis_simple_power(1, 4)\n</cell>\n<code language=julia-1.5>\n\
    is_simple_power(2, 2)\n</cell>\n<code language=julia-1.5>\nis_simple_power(8,\
    \ 2)\n</cell>\n<code language=julia-1.5>\nis_simple_power(3, 2)\n</cell>\n<code\
    \ language=julia-1.5>\nis_simple_power(3, 1)\n</cell>\n<code language=julia-1.5>\n\
    is_simple_power(5, 3)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ true if the number x is a power of 2 and\nfalse in other cases.\nx is a power\
    \ of 2 if 2**int=x\nFor example:\nis_power_of_two(2) => true\nis_power_of_two(8)\
    \ => true\nis_power_of_two(16) => false\nis_power_of_two(32) => false\nis_power_of_two(64)\
    \ => false\nis_power_of_two(128) => false\nis_power_of_two(256) => true\nis_power_of_two(512)\
    \ => true\nis_power_of_two(1024) => true\nis_power_of_two(2048) => true\nis_power_of_two(4096)\
    \ => true\nis_power_of_two(8192) => true\nis_power_of_two(16384) => true\nis_power_of_two(32768)\
    \ => true\nis_power_of_two(65536) => true\nis_power_of_two(131072) => true\nis_power_of_two(262144)\
    \ => true\nis_power_of_two(524288) => true\nis_power_of_two(1048576) => true\n\
    is_power_of_two(2097152) => true\nis_power_of_two(4194304) => true\nis_power_of_two(8388608)\
    \ => true\nis_power_of_two(16777216) => true\nis_power_of_two(33554432) => true\n\
    is_power_of_two(67108864) => true\nis_power_of_two(134217728) => true\nis_power_of_two(268435456)\
    \ => true\nis_power_of_two(536870912) => true\nis_power_of_two(1073741824) =>\
    \ true\nis_power_of_two(2147483648) => true\nis_power_of_two(4294967296) => true\n\
    is_power_of_two(8589934592) => true\nis_power_of_two(17179869184) => true\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"x\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp35ke1ea4.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp35ke1ea4.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if is_power_of_two(n)\
    \ == true \n        then x == n^n \n        else false \n    else \n        true\
    \ \nend\n</cell>\n<text>\nTask 3\nWrite a function that returns true if a number\
    \ x is a power of n and false in other cases.\nx is a power of n if n**int=x\n\
    For example:\nis_power_of_two(2) => true\nis_power_of_two(8) => true\nis_power_of_two(9)\
    \ => false\nis_power_of_two(10) => false\nis_power_of_two(11) => false\nis_power_of_two(12)\
    \ => false\nis_power_of_two(13) => false\nis_power_of_two(14) => false\nis_power_of_two(15)\
    \ => false\nis_power_of_two(16) => false\nis_power_of_two(17) => false\nis_power_of_two(18)\
    \ => false\nis_power_of_two(19) => false\nis_power_of_two(20) => false\nis_power_of_two(21)\
    \ => false\nis_power_of_two(22) => false\nis_power_of_two(23) => false\nis_power_of_two(24)\
    \ => false\nis_power_of_two(25) => false\nis_power_of_two(26) => false\nis_power_of_two(27)\
    \ => false\nis_power_of_two(28) => false\nis_power_of_two(29) => false\nis_power_of_two(30)\
    \ => false\nis_power_of_two(31) => false\nis_power_of_two(32) => false\nis_power_of_two(33)\
    \ => false\nis_power_of_two(34) => false\nis_power_of_two(35) => false\nis_power_of_two(36)\
    \ => false\nis_power_of_two(37) => false\nis_power_of_two(38) => false\nis_power_of_two(39)\
    \ => false\nis_power_of_two(40) => false\nis_power_of_two(41) => false\nis_power_of_two(42)\
    \ => false\nis_power_of_two(43) => false\nis_power_of_two(44) => false\nis_power_of_two(45)\
    \ => false\nis_power_of_two(46) => false\nis_power_of_two(47) => false\nis_power_of_two(48)\
    \ => false\nis_power_of_two(49) => false\nis_power_of_two(50) => false\nis_power_of_two(51)\
    \ => false\nis_power_of_two(52) => false\nis_power_of_two(53) => false\nis_power_of_two(54)\
    \ => false\nis_power_of_two(55) => false\nis_power_\nusing Test\n\n@testset begin\n\
    \ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"x\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpb3si6qd3.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpb3si6qd3.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if is_power_of_two(n)\
    \ == true \n        then x == n^n \n        else false\n    else \n        false\n\
    end\n</cell>\n<text>\nTask 7: Write a function that returns true if a number x\
    \ is a power of 2 and\nfalse in other cases.\nx is a power of 2 if 2**int=x\n\
    For example:\nis_power_of_two(2) => true\nis_power_of_two(8) => true\nis_power_of_two(16)\
    \ => true\nis_power_of_two(32) => false\nis_power_of_two(64) => false\nis_power_of_two(128)\
    \ => false\nis_power_of_two(256) => false\nis_power_of_two(512) => false\nis_power_of_two(1024)\
    \ => false\nis_power_of_two(2048) => false\nis_power_of_two(4096) => false\nis_power_of_two(8192)\
    \ => false\nis_power_of_two(16384) => false\nis_power_of_two(32768) => false\n\
    is_power_of_two(65536) => false\nis_power_of_two(131072) => false\nis_power_of_two(262144)\
    \ => false\nis_power_of_two(524288) => false\nis_power_of_two(1048576) => false\n\
    is_power_of_two(2097152) => false\nis_power_of_two(4194304) => false\nis_power_of_two(8388608)\
    \ => false\nis_power_of_two(16777216) => false\nis_power_of_two(33554432) => false\n\
    is_power_of_two(67108864) => false\nis_power_of_two(134217728) => false\nis_power_of_two(268435456)\
    \ => false\nis_power_of_two(536870912) => false\nis_power_of_two(1073741824) =>\
    \ false\nis_power_of_two(2147483648) => false\nis_power_of_two(4294967296) =>\
    \ false\nis_power_of_two(8589934592) => false\nis_power_of_two(17179869184) =>\
    \ false\nis_power_of_two(34359738368) => false\nis_power_of_two(68719476736) =>\
    \ false\nis_power_of_two(137438953472) => false\nis_power_of_two(274877906944)\
    \ => false\nis_power_of_two(549755813888) => false\nis_power_of_two(1099511627776)\
    \ => false\nis_power_of_two(2199023255552) => false\nusing Test\n\n@testset begin\n\
    \ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"x\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpccvh0ul9.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpccvh0ul9.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n ==\
    \ 1 \n        then true\n    else \n        if n % x == 0 \n            then true\n\
    \        else false\nend\n</cell>\n<code language=julia-1.5>\nis_simple_power(3,\
    \ 2)\n</cell>\n<code language=julia-1.5>\nis_simple_power(3, 1)\n</cell>\n<code\
    \ language=julia-1.5>\nis_simple_power(5, 3)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the number of digits in an integer.\nusing Test\n\n\
    @testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\
    \t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\t\
    @test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24,\
    \ 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6)\
    \ == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"true\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp9k_9o0nb.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp9k_9o0nb.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n==1\
    \ \n        then true\n    else if n==0\n        then false\n    else if n==-1\n\
    \        then false\n    else if n==-2\n        then false\n    else if n==-3\n\
    \        then false\n    else if n==-4\n        then false\n    else if n==-5\n\
    \        then false\n    else if n==-6\n        then false\n    else if n==-7\n\
    \        then false\n    else if n==-8\n        then false\n    else if n==-9\n\
    \        then false\n    else if n==-10\n        then false\n    else if n==-11\n\
    \        then false\n    else if n==-12\n        then false\n    else if n==-13\n\
    \        then false\n    else if n==-14\n        then false\n    else if n==-15\n\
    \        then false\n    else if n==-16\n        then false\n    else if n==-17\n\
    \        then false\n    else if n==-18\n        then false\n    else if n==-19\n\
    \        then false\n    else if n==-20\n        then false\n    else if n==-21\n\
    \        then false\n    else if n==-22\n        then false\n    else if n==-23\n\
    \        then false\n    else if n==-24\n        then false\n    else if n==-25\n\
    \        then false\n    else if n==-26\n        then false\n    else if n==-27\n\
    \        then false\n    else if n==-28\n        then false\n    else if n==-29\n\
    \        then false\n    else if n==-30\n        then false\n    else if n==-31\n\
    \        then false\n    else if n==-32\n        then false\n    else if n==-33\n\
    \        then false\n    else if n==-34\n        then false\n    else if n==-35\n\
    \        then false\n    else if n==-36\n        then false\n    else if n==-37\n\
    \        then false\n    else if n==-38\n        then false\n    else if n==-39\n\
    \        then false\n    else if n==-40\n        then false\n    else if n==-41\n\
    \        then false\n    else if n==-42\n        then false\n    else if n==-43\n\
    \        \nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"true\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpphdelmwn.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpphdelmwn.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n==1\
    \ \n        true\n    else if n==2 \n        true\n    else if n==3 \n       \
    \ true\n    else if n==4 \n        true\n    else if n==5 \n        true\n   \
    \ else if n==6 \n        true\n    else if n==7 \n        true\n    else if n==8\
    \ \n        true\n    else if n==9 \n        true\n    else if n==10 \n      \
    \  true\n    else if n==11 \n        true\n    else if n==12 \n        true\n\
    \    else if n==13 \n        true\n    else if n==14 \n        true\n    else\
    \ if n==15 \n        true\n    else if n==16 \n        true\n    else if n==17\
    \ \n        true\n    else if n==18 \n        true\n    else if n==19 \n     \
    \   true\n    else if n==20 \n        true\n    else if n==21 \n        true\n\
    \    else if n==22 \n        true\n    else if n==23 \n        true\n    else\
    \ if n==24 \n        true\n    else if n==25 \n        true\n    else if n==26\
    \ \n        true\n    else if n==27 \n        true\n    else if n==28 \n     \
    \   true\n    else if n==29 \n        true\n    else if n==30 \n        true\n\
    \    else if n==31 \n        true\n    else if n==32 \n        true\n    else\
    \ if n==33 \n        true\n    else if n==34 \n        true\n    else if n==35\
    \ \n        true\n    else if n==36 \n        true\n    else if n==37 \n     \
    \   true\n    else if n==38 \n        true\n    else if n==39 \n        true\n\
    \    else if n==40 \n        true\n    else if n==41 \n        true\n    else\
    \ if n==42 \n        true\n    else if n==43 \n        true\n    else if n==44\
    \ \n        true\n    else if n==45 \n        true\n    else if n==46 \n     \
    \   true\n    else if n==47 \n        true\n    else if n==48 \n        true\n\
    \    else if n==49 \n        true\n    else if n==50 \n        true\n    else\
    \ if n\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpd9hgz_k3.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpd9hgz_k3.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if is_power_of_two(n)\
    \ == true\n        true\n    else\n        false\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"Your task is to write a function that returns true\
    \ if a number x is a simple power of n and false in other cases.\n    x is a simple\
    \ power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n\
    \    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3,\
    \ 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) =>\
    \ false\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwg19nebj.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpwg19nebj.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if is_power_of_two(n)\
    \ == true \n        then return true\n        else return false\n    else \n \
    \       powers = powers_of_two(n)\n        for power in powers \n            do\
    \ if x == power\n                then return true\n                else return\
    \ false\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ true if a number x is a power of n and false in other cases.\nx is a power of\
    \ n if n**int=x\nFor example:\nis_power_of_two(2) => true\nis_power_of_two(8)\
    \ => true\nis_power_of_two(9) => false\nis_power_of_two(10) => false\nis_power_of_two(11)\
    \ => false\nis_power_of_two(12) => false\nis_power_of_two(13) => false\nis_power_of_two(14)\
    \ => false\nis_power_of_two(15) => false\nis_power_of_two(16) => false\nis_power_of_two(17)\
    \ => false\nis_power_of_two(18) => false\nis_power_of_two(19) => false\nis_power_of_two(20)\
    \ => false\nis_power_of_two(21) => false\nis_power_of_two(22) => false\nis_power_of_two(23)\
    \ => false\nis_power_of_two(24) => false\nis_power_of_two(25) => false\nis_power_of_two(26)\
    \ => false\nis_power_of_two(27) => false\nis_power_of_two(28) => false\nis_power_of_two(29)\
    \ => false\nis_power_of_two(30) => false\nis_power_of_two(31) => false\nis_power_of_two(32)\
    \ => false\nis_power_of_two(33) => false\nis_power_of_two(34) => false\nis_power_of_two(35)\
    \ => false\nis_power_of_two(36) => false\nis_power_of_two(37) => false\nis_power_of_two(38)\
    \ => false\nis_power_of_two(39) => false\nis_power_of_two(40) => false\nis_power_of_two(41)\
    \ => false\nis_power_of_two(42) => false\nis_power_of_two(43) => false\nis_power_of_two(44)\
    \ => false\nis_power_of_two(45) => false\nis_power_of_two(46) => false\nis_power_of_two(47)\
    \ => false\nis_power_of_two(48) => false\nis_power_of_two(49) => false\nis_power_of_two(50)\
    \ => false\nis_power_of_two(51) => false\nis_power_of_two(52) => false\nis_\n\
    using Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpfxxmoowd.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpfxxmoowd.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if is_power_of_two(n)\
    \ == true \n        then x == n^int\n        else false\n    else \n        false\n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ number of digits in an Int64 number. \nThe function should work for all Int64\
    \ numbers, including negative numbers.\nThe function should work for negative\
    \ numbers as well, e.g. -10.\nThe function should work for Float64 numbers as\
    \ well.\nThe function should work for BigInts as well.\nThe function should work\
    \ for Int128 numbers as well.\nThe function should work for Int256 numbers as\
    \ well.\nThe function should work for Int512 numbers as well.\nThe function should\
    \ work for Int1024 numbers as well.\nThe function should work for Int2048 numbers\
    \ as well.\nThe function should work for Int4096 numbers as well.\nThe function\
    \ should work for Int8192 numbers as well.\nThe function should work for Int16384\
    \ numbers as well.\nThe function should work for Int32768 numbers as well.\nThe\
    \ function should work for Int65536 numbers as well.\nThe function should work\
    \ for Int131072 numbers as well.\nThe function should work for Int262144 numbers\
    \ as well.\nThe function should work for Int524288 numbers as well.\nThe function\
    \ should work for Int1048576 numbers as well.\nThe function should work for Int2097152\
    \ numbers as well.\nThe function should work for Int4194304 numbers as well.\n\
    The function should work for Int8388608 numbers as well.\nThe function should\
    \ work for Int16777216 numbers as well.\nThe function should work for Int33554432\
    \ numbers as well.\nThe function should work for Int67108864 numbers as well.\n\
    The function should work for Int134217728 numbers as well.\nThe function should\
    \ work for Int268435456 numbers as well.\nThe function should work for Int536870912\
    \ numbers as well.\nThe function should work for Int1073741824 numbers as well.\n\
    The function should work for Int2147483648 numbers as well.\nThe function should\
    \ work for Int4294967296 numbers as well.\nThe function should work for Int8589934592\
    \ numbers as well.\nThe function should work for Int17179869184 numbers as well.\n\
    The function should work for Int34359738368 numbers as well.\nThe function should\
    \ work for Int68719476736 numbers as well.\nThe function should work for Int137438953472\
    \ numbers as well.\nThe function should work for Int274877906944 numbers as well.\n\
    The function should work for Int549755813888 \nusing Test\n\n@testset begin\n\n\
    candidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"x\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprsbf88kt.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprsbf88kt.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if is_power_of_two(n)\
    \ == true \n        then x == n**int(x) else false \n    else \n        true \n\
    end\n</cell>\n<code language=julia-1.5>\n@assert is_simple_power(1, 4) == true\n\
    @assert is_simple_power(2, 2) == true\n@assert is_simple_power(8, 2) == true\n\
    @assert is_simple_power(3, 2) == false\n@assert is_simple_power(3, 1) == false\n\
    @assert is_simple_power(5, 3) == false\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns true if the number n is a power of two. Your function should work\
    \ for any positive integer n.\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"x\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpf1hrx4el.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpf1hrx4el.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if is_power_of_two(n)\
    \ == true \n        then x == n**int(x) else false\n    else \n        false\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert is_simple_power(1, 4) == true\n\
    @assert is_simple_power(2, 2) == true\n@assert is_simple_power(8, 2) == true\n\
    @assert is_simple_power(3, 2) == false\n@assert is_simple_power(3, 1) == false\n\
    @assert is_simple_power(5, 3) == false\n</cell>\n<text>\nProblem 3\nWrite a function\
    \ that returns true if a number x is a power of n and false in other cases.\n\
    x is a power of n if n**int=x\nFor example:\nis_power_of_two(2) => true\nis_power_of_two(8)\
    \ => true\nis_power_of_two(9) => false\nis_power_of_two(10) => false\nis_power_of_two(11)\
    \ => false\nis_power_of_two(12) => false\nis_power_of_two(13) => false\nis_power_of_two(14)\
    \ => false\nis_power_of_two(15) => false\nis_power_of_two(16) => false\nis_power_of_two(17)\
    \ => false\nis_power_of_two(18) => false\nis_power_of_two(19) => false\nis_power_of_two(20)\
    \ => false\nis_power_of_two(21) => false\nis_power_of_two(22) => false\nis_power_of_two(23)\
    \ => false\nis_power_of_two(24) => false\nis_power_of_two(25) => false\nis_power_of_two(26)\
    \ => false\nis_power_of_two(27) => false\nis_power_of_two(28) => false\nis_power_of_two(29)\
    \ => false\nis_power_of_two(30) => false\nis_power_of_two(31) => false\nis_power_of_two(32)\
    \ => false\nis_power_of_two(33) => false\nis_power_of_two(34) => false\nis_power_of_two(35)\
    \ => false\nis_power_of_two(36) => false\nis_power_of_two(37) => false\nis_power_of_two(38)\
    \ => false\nis_power_of_two(39) => false\nis_power_of_two(40) => false\nis_power_of_two(41)\
    \ => false\nis_power_of_two(42) => false\nis_power_of_two(43) => false\nis_power_of_two(44)\
    \ => false\nis_power_of_two(45) => false\nis_power_of_two(46) => false\nis_power_of_two(47)\
    \ => false\nis_power_of_two(48\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"x\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpg7y9pwgo.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpg7y9pwgo.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n ==\
    \ 1 \n        then true\n    else \n        x % n == 0 && is_simple_power(x /\
    \ n, n-1)\nend\n</cell>\n<code language=julia-1.5>\nis_simple_power(3, 2)\n</cell>\n\
    <code language=julia-1.5>\nis_simple_power(3, 1)\n</cell>\n<code language=julia-1.5>\n\
    is_simple_power(5, 3)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ true if a number x is a power of n and false in other cases.\nx is a power of\
    \ n if n**int=x\nFor example:\nis_power(1, 4) => true\nis_power(2, 2) => true\n\
    is_power(8, 2) => true\nis_power(3, 2) => false\nis_power(3, 1) => false\nis_power(5,\
    \ 3) => false\nHint: use is_simple_power\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"true\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpzw96duwx.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpzw96duwx.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n ==\
    \ 0 \n        true \n    else \n        x % n == 0\nend\n</cell>\n<code language=julia-1.0>\n\
    is_simple_power(1, 4)\n</cell>\n<code language=julia-1.0>\nis_simple_power(2,\
    \ 2)\n</cell>\n<code language=julia-1.0>\nis_simple_power(8, 2)\n</cell>\n<code\
    \ language=julia-1.0>\nis_simple_power(3, 2)\n</cell>\n<code language=julia-1.0>\n\
    is_simple_power(3, 1)\n</cell>\n<code language=julia-1.0>\nis_simple_power(5,\
    \ 3)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number of\
    \ digits in an integer.\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpawch16os.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpawch16os.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n ==\
    \ 0 \n        then return true\n    else if n == 1 \n        then return x ==\
    \ 1\n    else if n % 2 == 0 \n        then return is_simple_power(x, n / 2)\n\
    \    else \n        return is_simple_power(x, n / 2) && is_simple_power(x, n /\
    \ 2)\nend\n</cell>\n<text>\nLet's test our function\nusing Test\n\n@testset begin\n\
    \ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpl1hadbom.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpl1hadbom.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n ==\
    \ 1 \n        then true\n    else \n        x % n == 0\nend\n</cell>\n<code language=julia-1.5>\n\
    is_simple_power(1, 4)\n</cell>\n<code language=julia-1.5>\nis_simple_power(2,\
    \ 2)\n</cell>\n<code language=julia-1.5>\nis_simple_power(8, 2)\n</cell>\n<code\
    \ language=julia-1.5>\nis_simple_power(3, 2)\n</cell>\n<code language=julia-1.5>\n\
    is_simple_power(3, 1)\n</cell>\n<code language=julia-1.5>\nis_simple_power(5,\
    \ 3)\n</cell>\n<text>\nExercise 2\nWrite a function that returns true if a number\
    \ x is a power of n and false in other cases.\nx is a power of n if n**int=x\n\
    For example:\nis_power(1, 4) => true\nis_power(2, 2) => true\nis_power(8, 2) =>\
    \ true\nis_power(3, 2) => false\nis_power(3, 1) => false\nis_power(5, 3) => false\n\
    Hint: use is_simple_power.\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"true\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpjbldhpda.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpjbldhpda.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if is_power_of_two(x)\
    \ && is_power_of_two(n)\n        power = get_power_of_two(x)\n        exponent\
    \ = get_power_of_two(n)\n        \n        if exponent == power\n            return\
    \ true\n        else\n            return false\n    end\n    return false\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert is_simple_power(1, 4) == true\n@assert\
    \ is_simple_power(2, 2) == true\n@assert is_simple_power(8, 2) == true\n@assert\
    \ is_simple_power(3, 2) == false\n@assert is_simple_power(3, 1) == false\n@assert\
    \ is_simple_power(5, 3) == false\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns true if a number x is a power of 2 and a power of n if n**int=x\n\
    \    For example:\n    is_power_of_two(2) => true\n    is_power_of_two(8) => true\n\
    \    is_power_of_two(16) => true\n    is_power_of_two(32) => true\n    is_power_of_two(64)\
    \ => true\n    is_power_of_two(128) => true\n    is_power_of_two(256) => false\n\
    \    is_power_of_two(512) => false\n    is_power_of_two(1024) => false\n    is_power_of_two(2048)\
    \ => false\n    is_power_of_two(4096) => false\n    is_power_of_two(8192) => false\n\
    \    is_power_of_two(16384) => false\n    is_power_of_two(32768) => false\n  \
    \  is_power_of_two(65536) => false\n    is_power_of_two(131072) => false\n   \
    \ is_power_of_two(262144) => false\n    is_power_of_two(524288) => false\n   \
    \ is_power_of_two(1048576) => false\n    is_power_of_two(2097152) => false\n \
    \   is_power_of_two(4194304) => false\n    is_power_of_two(8388608) => false\n\
    \    is_power_of_two(16777216) => false\n    is_power_of_two(33554432) => false\n\
    \    is_power_of_two(67108864) => false\n    is_power_of_two(134217728) => false\n\
    \    is_power_of_two(268435456) => false\n    is_power_of_two(536870912) => false\n\
    \    is_power_of_two(1073741824) => false\n    is_power_of_two(2147483648) =>\
    \ false\n    is_power_of_two(4294967296) => false\n    is_power_of_two(8589934592)\
    \ => false\n    is_power_of_two(17179869184) => false\n    is_power_of_two(34\n\
    using Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpw97tde1l.jl:24\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpw97tde1l.jl:24\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n==1\
    \ \n        return true\n    else if n==0\n        return false\n    else if n==-1\n\
    \        return false\n    else if n==-2\n        return false\n    else if n==-3\n\
    \        return false\n    else if n==-4\n        return false\n    else if n==-5\n\
    \        return false\n    else if n==-6\n        return false\n    else if n==-7\n\
    \        return false\n    else if n==-8\n        return false\n    else if n==-9\n\
    \        return false\n    else if n==-10\n        return false\n    else if n==-11\n\
    \        return false\n    else if n==-12\n        return false\n    else if n==-13\n\
    \        return false\n    else if n==-14\n        return false\n    else if n==-15\n\
    \        return false\n    else if n==-16\n        return false\n    else if n==-17\n\
    \        return false\n    else if n==-18\n        return false\n    else if n==-19\n\
    \        return false\n    else if n==-20\n        return false\n    else if n==-21\n\
    \        return false\n    else if n==-22\n        return false\n    else if n==-23\n\
    \        return false\n    else if n==-24\n        return false\n    else if n==-25\n\
    \        return false\n    else if n==-26\n        return false\n    else if n==-27\n\
    \        return false\n    else if n==-28\n        return false\n    else if n==-29\n\
    \        return false\n    else if n==-30\n        return false\n    else if n==-31\n\
    \        return false\n    else if n==-32\n        return false\n    else if n==-33\n\
    \        return false\n    else if n==-34\n        return false\n    else if n==-35\n\
    \        return false\n    else if n==-36\n        return false\n    else if n==-37\n\
    \        return false\n    else if n==-38\n        return false\n    else if n==-39\n\
    \        return false\n    else if n==-40\n        return false\n    else if n==-41\n\
    \        return false\n    else if n==-42\n        return false\n    else if n==-43\n\
    \        return false\n    else if n==-44\n        return false\n    else if n==-45\n\
    \        return false\n    else if n==-46\n        return false\n    else if n==-47\n\
    \        return \nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp785ewady.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp785ewady.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if is_power_of_two(n)\
    \ == true \n        then return true\n        else return false\n    else \n \
    \       if is_power_of_two(x) == true \n            then return true\n       \
    \     else return false\n        else return false\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\nis_power_of_two(x::Int64)::Bool\nCheck if x is\
    \ a power of two.\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpuxe5qgni.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpuxe5qgni.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n==0\
    \ \n        then return true\n    else if n==1 \n        then return true\n  \
    \  else if n==2 \n        then return x==1\n    else if n==3 \n        then return\
    \ x==1\n    else if n==4 \n        then return x==1\n    else if n==5 \n     \
    \   then return x==1\n    else if n==6 \n        then return x==1\n    else if\
    \ n==7 \n        then return x==1\n    else if n==8 \n        then return x==1\n\
    \    else if n==9 \n        then return x==1\n    else if n==10 \n        then\
    \ return x==1\n    else if n==11 \n        then return x==1\n    else if n==12\
    \ \n        then return x==1\n    else if n==13 \n        then return x==1\n \
    \   else if n==14 \n        then return x==1\n    else if n==15 \n        then\
    \ return x==1\n    else if n==16 \n        then return x==1\n    else if n==17\
    \ \n        then return x==1\n    else if n==18 \n        then return x==1\n \
    \   else if n==19 \n        then return x==1\n    else if n==20 \n        then\
    \ return x==1\n    else if n==21 \n        then return x==1\n    else if n==22\
    \ \n        then return x==1\n    else if n==23 \n        then return x==1\n \
    \   else if n==24 \n        then return x==1\n    else if n==25 \n        then\
    \ return x==1\n    else if n==26 \n        then return x==1\n    else if n==27\
    \ \n        then return x==1\n    else if n==28 \n        then return x==1\n \
    \   else if n==29 \n        then return x==1\n    else if n==30 \n        then\
    \ return x==1\n    else if n==31 \n        then return x==1\n    else if n==32\
    \ \n        then return x==1\n    else if n==33 \n        then return x==1\n \
    \   else if n==34 \n        then return x==1\n    else if n==35 \n        then\
    \ return x==1\n    else if n==36 \n        then return x==1\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t\
    @test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9,\
    \ 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) ==\
    \ false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\
    \t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpga_qs_pb.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpga_qs_pb.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if is_simple_power(x,\
    \ n)\n        true\n    else\n        false\n    end\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns true if a number x is a power of n and false\
    \ in other cases.\nx is a power of n if n**int=x\nFor example:\nis_power(1, 4)\
    \ => true\nis_power(2, 2) => true\nis_power(8, 2) => true\nis_power(3, 2) => false\n\
    is_power(3, 1) => false\nis_power(5, 3) => false\nHint: use is_simple_power()\
    \ function.\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t\
    @test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4,\
    \ 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmba26ub8.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmba26ub8.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n==1\
    \ \n        then true\n        else is_simple_power(x, n-1)\nend\n</cell>\n<code\
    \ language=julia-1.3>\nis_simple_power(3, 2)\n</cell>\n<code language=julia-1.3>\n\
    is_simple_power(3, 1)\n</cell>\n<code language=julia-1.3>\nis_simple_power(5,\
    \ 3)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number of\
    \ digits in an integer.\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"true\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpmw2vn9ce.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpmw2vn9ce.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n ==\
    \ 1 \n        then true\n    else if n % x == 0 \n        then true\n    else\
    \ false\nend\n</cell>\n<text>\nExercise 4\nWrite a function that returns true\
    \ if a number x is a power of n and false in other cases.\nx is a power of n if\
    \ n**int=x\nFor example:\nis_power(1, 4) => true\nis_power(2, 2) => true\nis_power(8,\
    \ 2) => true\nis_power(3, 2) => false\nis_power(3, 1) => false\nis_power(5, 3)\
    \ => false\nHint: use is_simple_power function.\nusing Test\n\n@testset begin\n\
    \ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"true\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp3078q4az.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp3078q4az.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n==0\
    \ \n        then return true\n    else if n==1 \n        then return x==1\n  \
    \  else if n==2 \n        then return x==1\n    else if n==3 \n        then return\
    \ x==1\n    else if n==4 \n        then return x==1\n    else if n==5 \n     \
    \   then return x==1\n    else if n==6 \n        then return x==1\n    else if\
    \ n==7 \n        then return x==1\n    else if n==8 \n        then return x==1\n\
    \    else if n==9 \n        then return x==1\n    else if n==10 \n        then\
    \ return x==1\n    else if n==11 \n        then return x==1\n    else if n==12\
    \ \n        then return x==1\n    else if n==13 \n        then return x==1\n \
    \   else if n==14 \n        then return x==1\n    else if n==15 \n        then\
    \ return x==1\n    else if n==16 \n        then return x==1\n    else if n==17\
    \ \n        then return x==1\n    else if n==18 \n        then return x==1\n \
    \   else if n==19 \n        then return x==1\n    else if n==20 \n        then\
    \ return x==1\n    else if n==21 \n        then return x==1\n    else if n==22\
    \ \n        then return x==1\n    else if n==23 \n        then return x==1\n \
    \   else if n==24 \n        then return x==1\n    else if n==25 \n        then\
    \ return x==1\n    else if n==26 \n        then return x==1\n    else if n==27\
    \ \n        then return x==1\n    else if n==28 \n        then return x==1\n \
    \   else if n==29 \n        then return x==1\n    else if n==30 \n        then\
    \ return x==1\n    else if n==31 \n        then return x==1\n    else if n==32\
    \ \n        then return x==1\n    else if n==33 \n        then return x==1\n \
    \   else if n==34 \n        then return x==1\n    else if n==35 \n        then\
    \ return x==1\n    else if n==36 \n        then return x\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t\
    @test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9,\
    \ 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) ==\
    \ false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\
    \t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpbiysezbk.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpbiysezbk.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n ==\
    \ 1 \n        then true\n    else \n        if n % x == 0 \n            then true\n\
    \        else false\nend\n</cell>\n<code language=julia-1.5>\nis_simple_power(1,\
    \ 4)\n</cell>\n<code language=julia-1.5>\nis_simple_power(2, 2)\n</cell>\n<code\
    \ language=julia-1.5>\nis_simple_power(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    is_simple_power(3, 2)\n</cell>\n<code language=julia-1.5>\nis_simple_power(3,\
    \ 1)\n</cell>\n<code language=julia-1.5>\nis_simple_power(5, 3)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns true if a number x is a power of n and\
    \ false in other cases.\nx is a power of n if n**int=x\nFor example:\nis_power(1,\
    \ 4) => true\nis_power(2, 2) => true\nis_power(8, 2) => true\nis_power(3, 2) =>\
    \ false\nis_power(3, 1) => false\nis_power(5, 3) => false\nHint: use is_simple_power\
    \ function.\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t\
    @test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4,\
    \ 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"true\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpf9pgsgzf.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpf9pgsgzf.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n ==\
    \ 1 \n        then true\n    else if n == 0 \n        then false\n    else if\
    \ x == 1 \n        then true\n    else if x == 0 \n        then false\n    else\
    \ if n % x == 0 \n        then is_simple_power(x, n//x)\n    else false\nend\n\
    </cell>\n<code language=julia-1.5>\nis_simple_power(3, 2)\n</cell>\n<code language=julia-1.5>\n\
    is_simple_power(3, 1)\n</cell>\n<code language=julia-1.5>\nis_simple_power(5,\
    \ 3)\n</cell>\n<text>\nExercise 2\nWrite a function that returns true if a number\
    \ x is a power of n and false in other cases.\nx is a power of n if n**int=x\n\
    For example:\nis_power_of_2(1) => true\nis_power_of_2(2) => true\nis_power_of_2(8)\
    \ => true\nis_power_of_2(3) => false\nis_power_of_2(5) => false\nis_power_of_2(7)\
    \ => false\nis_power_of_2(9) => false\nis_power_of_2(10) => false\nis_power_of_2(11)\
    \ => false\nis_power_of_2(12) => false\nis_power_of_2(13) => false\nis_power_of_2(14)\
    \ => false\nis_power_of_2(15) => false\nis_power_of_2(16) => false\nis_power_of_2(17)\
    \ => false\nis_power_of_2(18) => false\nis_power_of_2(19) => false\nis_power_of_2(20)\
    \ => false\nis_power_of_2(21) => false\nis_power_of_2(22) => false\nis_power_of_2(23)\
    \ => false\nis_power_of_2(24) => false\nis_power_of_2(25) => false\nis_power_of_2(26)\
    \ => false\nis_power_of_2(27) => false\nis_power_of_2(28) => false\nis_power_of_2(29)\
    \ => false\nis_power_of_2(30) => false\nis_power_of_2(31) => false\nis_power_of_2(32)\
    \ => false\nis_power_of_2(33) => false\nis_power_of_2(34) => false\nis_power_of_2(35)\
    \ => false\nis_power_of_2(36) => false\nis_power_of_2(37) => false\nis_power_of_2(38)\
    \ => false\nis_power_of_2(39) => false\nis_power_of_2(40) => false\nis_power_of_2(41)\
    \ => false\nis_power_of_2(42) => false\nis_power_of_2(43) => false\nis_power_of_2(44)\
    \ => false\nis_power_of_2(45) => false\nis_power_of_2(46) => false\nis_power_of_2(47)\
    \ => false\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"true\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpyygsv9zt.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpyygsv9zt.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n ==\
    \ 1 \n        then true\n    else \n        x % n == 0\nend\n</cell>\n<code language=julia-1.5>\n\
    is_simple_power(3, 2)\n</cell>\n<code language=julia-1.5>\nis_simple_power(3,\
    \ 1)\n</cell>\n<code language=julia-1.5>\nis_simple_power(5, 3)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns true if a number x is a power of n and\
    \ false in other cases.\nx is a power of n if n**int=x\nFor example:\nis_power(1,\
    \ 4) => true\nis_power(2, 2) => true\nis_power(8, 2) => true\nis_power(3, 2) =>\
    \ false\nis_power(3, 1) => false\nis_power(5, 3) => false\nHint: use is_simple_power\
    \ function.\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t\
    @test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4,\
    \ 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"true\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp_vupk2jj.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp_vupk2jj.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n ==\
    \ 1 \n        then true\n    else if n % x == 0 \n        then true\n    else\
    \ false\nend\n</cell>\n<code language=julia-1.5>\nis_simple_power(1, 4)\n</cell>\n\
    <code language=julia-1.5>\nis_simple_power(2, 2)\n</cell>\n<code language=julia-1.5>\n\
    is_simple_power(8, 2)\n</cell>\n<code language=julia-1.5>\nis_simple_power(3,\
    \ 2)\n</cell>\n<code language=julia-1.5>\nis_simple_power(3, 1)\n</cell>\n<code\
    \ language=julia-1.5>\nis_simple_power(5, 3)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns true if a number x is a power of n and false in other\
    \ cases.\nx is a power of n if n**int=x\nFor example:\nis_power(1, 4) => true\n\
    is_power(2, 2) => true\nis_power(8, 2) => true\nis_power(3, 2) => false\nis_power(3,\
    \ 1) => false\nis_power(5, 3) => false\nHint: use is_simple_power function.\n\
    using Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"true\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpeef7dlwv.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpeef7dlwv.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if is_power_of_two(n)\
    \ == true\n        power = get_power_of_two(n)\n        if x == power\n      \
    \      return true\n        else\n            return false\n    end\n    return\
    \ false\nend\n</cell>\n<code language=julia-1.5>\nis_power_of_two(8)\n</cell>\n\
    <code language=julia-1.5>\nis_power_of_two(9)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(10)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(11)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(12)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(13)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(14)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(15)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(16)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(17)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(18)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(19)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(20)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(21)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(22)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(23)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(24)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(25)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(26)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(27)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(28)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(29)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(30)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(31)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(32)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(33)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(34)\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t\
    @test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9,\
    \ 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) ==\
    \ false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\
    \t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpduolmpb9.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpduolmpb9.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if is_power_of_two(n)\
    \ == true \n        then x == n**int(x) else false\n    else \n        false\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\nis_simple_power(1, 4)\n</cell>\n\
    <code language=julia-1.3>\nis_simple_power(2, 2)\n</cell>\n<code language=julia-1.3>\n\
    is_simple_power(8, 2)\n</cell>\n<code language=julia-1.3>\nis_simple_power(3,\
    \ 2)\n</cell>\n<code language=julia-1.3>\nis_simple_power(3, 1)\n</cell>\n<code\
    \ language=julia-1.3>\nis_simple_power(5, 3)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns true if a number x is a power of 2 and\nfalse in other\
    \ cases.\nx is a power of 2 if 2^int=x\nFor example:\nis_power_of_two(2) => true\n\
    is_power_of_two(8) => true\nis_power_of_two(16) => false\nis_power_of_two(32)\
    \ => false\nis_power_of_two(64) => false\nis_power_of_two(128) => false\nis_power_of_two(256)\
    \ => true\nis_power_of_two(512) => true\nis_power_of_two(1024) => true\nis_power_of_two(2048)\
    \ => true\nis_power_of_two(4096) => true\nis_power_of_two(8192) => true\nis_power_of_two(16384)\
    \ => true\nis_power_of_two(32768) => true\nis_power_of_two(65536) => true\nis_power_of_two(131072)\
    \ => true\nis_power_of_two(262144) => true\nis_power_of_two(524288) => true\n\
    is_power_of_two(1048576) => true\nis_power_of_two(2097152) => true\nis_power_of_two(4194304)\
    \ => true\nis_power_of_two(8388608) => true\nis_power_of_two(16777216) => true\n\
    is_power_of_two(33554432) => true\nis_power_of_two(67108864) => true\nis_power_of_two(134217728)\
    \ => true\nis_power_of_two(268435456) => true\nis_power_of_two(536870912) => true\n\
    is_power_of_two(1073741824) => true\nis_power_of_two(2147483648) => true\nis_power_of_two(4294967296)\
    \ => true\nis_power_of_two(8589934592) => true\nis_power_of_two(17179869\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"x\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgoo2p3n7.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgoo2p3n7.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n==0\
    \ \n        then return true\n    else if n==1 \n        then return x==1\n  \
    \  else \n        x % n == 0 && is_simple_power(x, n-1)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_simple_power(1, 4) == true\n@assert is_simple_power(2, 2) == true\n\
    @assert is_simple_power(8, 2) == true\n@assert is_simple_power(3, 2) == false\n\
    @assert is_simple_power(3, 1) == false\n@assert is_simple_power(5, 3) == false\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of digits\
    \ of an integer.\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp83_c8m71.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp83_c8m71.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if is_power_of_two(n)\
    \ == true \n        then x == n**int(x) else false\n    else \n        false\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nis_simple_power(1, 4)\n</cell>\n\
    <code language=julia-1.5>\nis_simple_power(2, 2)\n</cell>\n<code language=julia-1.5>\n\
    is_simple_power(8, 2)\n</cell>\n<code language=julia-1.5>\nis_simple_power(3,\
    \ 2)\n</cell>\n<code language=julia-1.5>\nis_simple_power(3, 1)\n</cell>\n<code\
    \ language=julia-1.5>\nis_simple_power(5, 3)\n</cell>\n<text>\nExercise 2\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"x\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpiykuer0c.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpiykuer0c.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n ==\
    \ 1 \n        then true\n    else if n % x == 0 \n        then true\n    else\
    \ false\nend\n</cell>\n<code language=julia-1.5>\nis_simple_power(1, 4)\n</cell>\n\
    <code language=julia-1.5>\nis_simple_power(2, 2)\n</cell>\n<code language=julia-1.5>\n\
    is_simple_power(8, 2)\n</cell>\n<code language=julia-1.5>\nis_simple_power(3,\
    \ 2)\n</cell>\n<code language=julia-1.5>\nis_simple_power(3, 1)\n</cell>\n<code\
    \ language=julia-1.5>\nis_simple_power(5, 3)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns true if a number x is a power of n and false in other\
    \ cases.\nx is a power of n if n**int=x\nFor example:\nis_power(1, 4) => true\n\
    is_power(2, 2) => true\nis_power(8, 2) => true\nis_power(3, 2) => false\nis_power(3,\
    \ 1) => false\nis_power(5, 3) => false\nHint: use is_simple_power function.\n\
    using Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"true\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpfiokc55x.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpfiokc55x.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n==0\
    \ \n        true \n    else \n        if n==1 \n            true \n        else\
    \ \n            if n%2==0 \n                is_simple_power(x, n/2) \n       \
    \     else \n                if n%3==0 \n                    is_simple_power(x,\
    \ n/3) \n                else \n                    if n%5==0 \n             \
    \           is_simple_power(x, n/5) \n                    else \n            \
    \            false\nend\n</cell>\n<code language=julia-1.5>\nis_simple_power(1,\
    \ 4)\n</cell>\n<code language=julia-1.5>\nis_simple_power(2, 2)\n</cell>\n<code\
    \ language=julia-1.5>\nis_simple_power(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    is_simple_power(3, 2)\n</cell>\n<code language=julia-1.5>\nis_simple_power(3,\
    \ 1)\n</cell>\n<code language=julia-1.5>\nis_simple_power(5, 3)\n</cell>\n<text>\n\
    Problem 3\nWrite a function that returns true if a number x is a power of n and\
    \ false in other cases.\nx is a power of n if n**int=x\nFor example:\nis_power(1,\
    \ 4) => true\nis_power(2, 2) => true\nis_power(8, 2) => true\nis_power(3, 2) =>\
    \ false\nis_power(3, 1) => false\nis_power(5, 3) => false\nHint: You can use the\
    \ is_simple_power function you wrote earlier.\nusing Test\n\n@testset begin\n\n\
    candidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnv6q38kq.jl:30\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpnv6q38kq.jl:30\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n ==\
    \ 0 \n        then return true\n    else if n == 1 \n        then return true\n\
    \    else if n % 2 == 0 \n        then return is_simple_power(x, n / 2)\n    else\
    \ \n        return is_simple_power(x, n / 2) && is_simple_power(x, n / 2)\nend\n\
    </cell>\n<code language=julia-1.5>\nis_simple_power(3, 2)\n</cell>\n<code language=julia-1.5>\n\
    is_simple_power(3, 1)\n</cell>\n<code language=julia-1.5>\nis_simple_power(5,\
    \ 3)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number of\
    \ digits in an integer.\nFor example:\ndigits(123) => 3\ndigits(1234) => 4\ndigits(12345)\
    \ => 5\ndigits(123456789) => 6\ndigits(1234567890) => 7\ndigits(12345678901) =>\
    \ 8\ndigits(123456789012) => 9\ndigits(1234567890123) => 10\ndigits(12345678901234)\
    \ => 11\ndigits(123456789012345) => 12\ndigits(1234567890123456) => 13\ndigits(1234567890123456789)\
    \ => 14\ndigits(12345678901234567890) => 15\ndigits(123456789012345678901) =>\
    \ 16\ndigits(1234567890123456789012) => 17\ndigits(12345678901234567890123) =>\
    \ 18\ndigits(123456789012345678901234) => 19\ndigits(1234567890123456789012345)\
    \ => 20\ndigits(12345678901234567890123456) => 21\ndigits(12345678901234567890123456789)\
    \ => 22\ndigits(123456789012345678901234567890) => 23\ndigits(1234567890123456789012345678901)\
    \ => 24\ndigits(12345678901234567890123456789012) => 25\ndigits(123456789012345678901234567890123)\
    \ => 26\ndigits(1234567890123456789012345678901234) => 27\ndigits(12345678901234567890123456789012345)\
    \ => 28\ndigits(123456789012345678901234567890123456) => 29\ndigits(123456789012345678901234567890123456789)\
    \ => 30\ndigits(1234567890123456789012345678901234567890) => 31\ndigits(12345678901234567890123456789012345678901)\
    \ => 32\ndigits(123456789012345678901234567890123456789012) => 33\ndigits(1234567890123456789012345678901234567890123)\
    \ => 34\ndigits(12345678901234567890123456789012345678901234) => 35\ndigits(123456789012345678901234567890123456789012345)\
    \ => 36\ndigits(1234567890123456789012345678901234567890123456) => 37\ndigits(1234567890123456789012345678901234567890123456789)\
    \ => 38\ndigits(12345678901234567890123456789012345678901234567890) => 39\ndigits(123456789012345678901234567890123456789012345678901)\
    \ => 40\ndigits(1234567890123456789012345678901234567890123456789012) => 41\n\
    digits(12345678901234567890123456789012345678901234567890123) => 42\ndigits(123456789012345678901234567890123456789012345678901234)\
    \ => 43\ndigits(12345678901234567890123456789012345678901234567890\nusing Test\n\
    \n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) ==\
    \ true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\
    \t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24,\
    \ 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6)\
    \ == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpm0wmrj81.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpm0wmrj81.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n ==\
    \ 1 \n        then true\n        else x == n**x\n    end\nend\n</cell>\n<code\
    \ language=julia-1.3>\nis_simple_power(1, 4)\n</cell>\n<code language=julia-1.3>\n\
    is_simple_power(2, 2)\n</cell>\n<code language=julia-1.3>\nis_simple_power(8,\
    \ 2)\n</cell>\n<code language=julia-1.3>\nis_simple_power(3, 2)\n</cell>\n<code\
    \ language=julia-1.3>\nis_simple_power(3, 1)\n</cell>\n<code language=julia-1.3>\n\
    is_simple_power(5, 3)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ true if a number x is a power of n and false in other cases.\nx is a power of\
    \ n if n**int=x\nFor example:\nis_power(1, 4) => true\nis_power(2, 2) => true\n\
    is_power(8, 2) => true\nis_power(3, 2) => false\nis_power(3, 1) => false\nis_power(5,\
    \ 3) => false\nHint: use the is_simple_power function.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t\
    @test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9,\
    \ 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) ==\
    \ false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\
    \t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"true\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp4xzqqcir.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp4xzqqcir.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n ==\
    \ 1 \n        then true\n    else if n == 0 \n        then false\n    else if\
    \ n % 2 == 0 \n        then is_simple_power(x, n / 2)\n    else if n % 3 == 0\
    \ \n        then is_simple_power(x, n / 3)\n    else \n        false\nend\n</cell>\n\
    <code language=julia-1.5>\nis_simple_power(3, 2)\n</cell>\n<code language=julia-1.5>\n\
    is_simple_power(3, 1)\n</cell>\n<code language=julia-1.5>\nis_simple_power(5,\
    \ 3)\n</cell>\n<text>\nExercise 2\nWrite a function that returns true if a number\
    \ x is a power of n and false in other cases.\nx is a power of n if n**int=x\n\
    For example:\nis_power(1, 4) => true\nis_power(2, 2) => true\nis_power(8, 2) =>\
    \ true\nis_power(3, 2) => false\nis_power(3, 1) => false\nis_power(5, 3) => false\n\
    Hint: use is_simple_power()\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"true\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpnub9zulp.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpnub9zulp.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if is_power_of_two(n)\
    \ == true\n        true\n    else\n        false\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nis_power_of_two(8)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(9)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(10)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(11)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(12)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(13)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(14)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(15)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(16)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(17)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(18)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(19)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(20)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(21)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(22)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(23)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(24)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(25)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(26)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(27)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(28)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(29)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(30)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(31)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(32)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(33)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(34)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(35)\n</cell>\n<code language=julia-\n\
    using Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3vzcwz7f.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3vzcwz7f.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n==1\
    \ \n        then true\n    else if n==0 \n        then false\n    else if n==-1\
    \ \n        then false\n    else if n==-2\n        then false\n    else if n==-3\n\
    \        then false\n    else if n==-4\n        then false\n    else if n==-5\n\
    \        then false\n    else if n==-6\n        then false\n    else if n==-7\n\
    \        then false\n    else if n==-8\n        then false\n    else if n==-9\n\
    \        then false\n    else if n==-10\n        then false\n    else if n==-11\n\
    \        then false\n    else if n==-12\n        then false\n    else if n==-13\n\
    \        then false\n    else if n==-14\n        then false\n    else if n==-15\n\
    \        then false\n    else if n==-16\n        then false\n    else if n==-17\n\
    \        then false\n    else if n==-18\n        then false\n    else if n==-19\n\
    \        then false\n    else if n==-20\n        then false\n    else if n==-21\n\
    \        then false\n    else if n==-22\n        then false\n    else if n==-23\n\
    \        then false\n    else if n==-24\n        then false\n    else if n==-25\n\
    \        then false\n    else if n==-26\n        then false\n    else if n==-27\n\
    \        then false\n    else if n==-28\n        then false\n    else if n==-29\n\
    \        then false\n    else if n==-30\n        then false\n    else if n==-31\n\
    \        then false\n    else if n==-32\n        then false\n    else if n==-33\n\
    \        then false\n    else if n==-34\n        then false\n    else if n==-35\n\
    \        then false\n    else if n==-36\n        then false\n    else if n==-37\n\
    \        then false\n    else if n==-38\n        then false\n    else if n==-39\n\
    \        then false\n    else if n==-40\n        then false\n    else if n==-41\n\
    \        then false\n    else if n==-42\n        then false\n    else if n==-43\n\
    \        \nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"true\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpabchnd8h.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpabchnd8h.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n ==\
    \ 1 \n        then true\n    else \n        if x == n\n            then true\n\
    \        else \n            if n % x == 0\n                then is_simple_power(x,\
    \ n//x)\n                else false\n        end\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nis_simple_power(2, 2)\n</cell>\n<code language=julia-1.5>\n\
    is_simple_power(8, 2)\n</cell>\n<code language=julia-1.5>\nis_simple_power(3,\
    \ 2)\n</cell>\n<code language=julia-1.5>\nis_simple_power(3, 1)\n</cell>\n<code\
    \ language=julia-1.5>\nis_simple_power(5, 3)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns true if a number x is a power of n and false in other\
    \ cases.\nx is a power of n if n**int=x\nFor example:\nis_power(1, 4) => true\n\
    is_power(2, 2) => true\nis_power(8, 2) => true\nis_power(3, 2) => false\nis_power(3,\
    \ 1) => false\nis_power(5, 3) => false\nHint: Use is_simple_power to solve this\
    \ problem.\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"true\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpjoty7we7.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpjoty7we7.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if is_power_of_two(n)\
    \ == true\n        true\n    else\n        if n%x == 0\n            true\n   \
    \     else\n            false\n        end\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(8)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(9)\n</cell>\n\
    <code language=julia-1.5>\nis_power_of_two(10)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(11)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(12)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(13)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(14)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(15)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(16)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(17)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(18)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(19)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(20)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(21)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(22)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(23)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(24)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(25)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(26)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(27)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(28)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(29)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(30)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(31)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(32)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(33)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(34)\n</cell>\n<code language=julia-1.5>\n\
    is_power_\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpx4_7gm2x.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpx4_7gm2x.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n==1\
    \ \n        then true\n    else if n==2 \n        then x==1\n    else if n==3\
    \ \n        then x==1\n    else if n==4 \n        then x==1\n    else if n==5\
    \ \n        then x==1\n    else if n==6 \n        then x==1\n    else if n==7\
    \ \n        then x==1\n    else if n==8 \n        then x==1\n    else if n==9\
    \ \n        then x==1\n    else if n==10 \n        then x==1\n    else if n==11\
    \ \n        then x==1\n    else if n==12 \n        then x==1\n    else if n==13\
    \ \n        then x==1\n    else if n==14 \n        then x==1\n    else if n==15\
    \ \n        then x==1\n    else if n==16 \n        then x==1\n    else if n==17\
    \ \n        then x==1\n    else if n==18 \n        then x==1\n    else if n==19\
    \ \n        then x==1\n    else if n==20 \n        then x==1\n    else if n==21\
    \ \n        then x==1\n    else if n==22 \n        then x==1\n    else if n==23\
    \ \n        then x==1\n    else if n==24 \n        then x==1\n    else if n==25\
    \ \n        then x==1\n    else if n==26 \n        then x==1\n    else if n==27\
    \ \n        then x==1\n    else if n==28 \n        then x==1\n    else if n==29\
    \ \n        then x==1\n    else if n==30 \n        then x==1\n    else if n==31\
    \ \n        then x==1\n    else if n==32 \n        then x==1\n    else if n==33\
    \ \n        then x==1\n    else if n==34 \n        then x==1\n    else if n==35\
    \ \n        then x==1\n    else if n==36 \n        then x==1\n    else if n==37\
    \ \n        then x==1\n    else if n==38 \n        then x==1\n    else if n==39\
    \ \n        then x==1\n    else if n==40 \nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"true\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpe_o2ey_w.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpe_o2ey_w.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n ==\
    \ 1 \n        then true\n    else if n % x == 0 \n        then true\n    else\
    \ false\nend\n</cell>\n<code language=julia-1.5>\nis_simple_power(1, 4)\n</cell>\n\
    <code language=julia-1.5>\nis_simple_power(2, 2)\n</cell>\n<code language=julia-1.5>\n\
    is_simple_power(8, 2)\n</cell>\n<code language=julia-1.5>\nis_simple_power(3,\
    \ 2)\n</cell>\n<code language=julia-1.5>\nis_simple_power(3, 1)\n</cell>\n<code\
    \ language=julia-1.5>\nis_simple_power(5, 3)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the number of divisors of n that are less than or equal\
    \ to n.\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"true\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpn62yla2v.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpn62yla2v.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n ==\
    \ 1 \n        then true\n    else if n % x == 0 \n        then true\n    else\
    \ false\nend\n</cell>\n<code language=julia-1.5>\n@assert is_simple_power(1, 4)\
    \ == true\n@assert is_simple_power(2, 2) == true\n@assert is_simple_power(8, 2)\
    \ == true\n@assert is_simple_power(3, 2) == false\n@assert is_simple_power(3,\
    \ 1) == false\n@assert is_simple_power(5, 3) == false\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns true if a number x is a power of n and false\
    \ in other cases.\nx is a power of n if n**int=x\nFor example:\nis_power_of_2(1)\
    \ => true\nis_power_of_2(2) => true\nis_power_of_2(8) => true\nis_power_of_2(3)\
    \ => false\nis_power_of_2(5) => false\nHint: use is_power_of_2(n) function.\n\
    using Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"true\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpvhhpta7m.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpvhhpta7m.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if is_simple_power(x,\
    \ n) == true\n        return true\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp1t6iqg26.jl:24\n  Test threw exception\n\
    \  Expression: candidate(16, 2) == true\n  StackOverflowError:\n  Stacktrace:\n\
    \   [1] is_simple_power(::Int64, ::Int64) at /tmp/tmp1t6iqg26.jl:13 (repeats 79984\
    \ times)\n  \ntest set: Error During Test at /tmp/tmp1t6iqg26.jl:25\n  Test threw\
    \ exception\n  Expression: candidate(143214, 16) == false\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] is_simple_power(::Int64, ::Int64) at /tmp/tmp1t6iqg26.jl:13\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmp1t6iqg26.jl:26\n\
    \  Test threw exception\n  Expression: candidate(4, 2) == true\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] is_simple_power(::Int64, ::Int64) at /tmp/tmp1t6iqg26.jl:13\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmp1t6iqg26.jl:27\n\
    \  Test threw exception\n  Expression: candidate(9, 3) == true\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] is_simple_power(::Int64, ::Int64) at /tmp/tmp1t6iqg26.jl:13\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmp1t6iqg26.jl:28\n\
    \  Test threw exception\n  Expression: candidate(16, 4) == true\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] is_simple_power(::Int64, ::Int64) at /tmp/tmp1t6iqg26.jl:13\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmp1t6iqg26.jl:29\n\
    \  Test threw exception\n  Expression: candidate(24, 2) == false\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] is_simple_power(::Int64, ::Int64) at /tmp/tmp1t6iqg26.jl:13\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmp1t6iqg26.jl:30\n\
    \  Test threw exception\n  Expression: candidate(128, 4) == false\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] is_simple_power(::Int64, ::Int64) at /tmp/tmp1t6iqg26.jl:13\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmp1t6iqg26.jl:31\n\
    \  Test threw exception\n  Expression: candidate(12, 6) == false\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] is_simple_power(::Int64, ::Int64) at /tmp/tmp1t6iqg26.jl:13\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmp1t6iqg26.jl:32\n\
    \  Test threw exception\n  Expression: candidate(1, 1) == true\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] is_simple_power(::Int64, ::Int64) at /tmp/tmp1t6iqg26.jl:13\
    \ (repeats 79984 times)\n  \ntest set: Error During Test at /tmp/tmp1t6iqg26.jl:33\n\
    \  Test threw exception\n  Expression: candidate(1, 12) == true\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] is_simple_power(::Int64, ::Int64) at /tmp/tmp1t6iqg26.jl:13\
    \ (repeats 79984 times)\n  \nTest Summary: | Error  Total\ntest set      |   \
    \ 10     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 10 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1t6iqg26.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n ==\
    \ 0 \n        true \n    else \n        if x == n\n            true\n        else\n\
    \            if n % x == 0\n                is_simple_power(x, n//x)\n       \
    \     else\n                false\n        end\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_simple_power(1, 4) == true\n@assert is_simple_power(2, 2) == true\n\
    @assert is_simple_power(8, 2) == true\n@assert is_simple_power(3, 2) == false\n\
    @assert is_simple_power(3, 1) == false\n@assert is_simple_power(5, 3) == false\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns true if a number is\
    \ prime and false in other cases. \nThe function should take one number as input\
    \ and return true if the number is prime and false in other cases.\nThe function\
    \ should work for all positive integers except 0.\nThe function should work for\
    \ all positive integers except 0.\nThe function should work for all positive integers\
    \ except 0.\nThe function should work for all positive integers except 0.\nThe\
    \ function should work for all positive integers except 0.\nThe function should\
    \ work for all positive integers except 0.\nThe function should work for all positive\
    \ integers except 0.\nThe function should work for all positive integers except\
    \ 0.\nThe function should work for all positive integers except 0.\nThe function\
    \ should work for all positive integers except 0.\nThe function should work for\
    \ all positive integers except 0.\nThe function should work for all positive integers\
    \ except 0.\nThe function should work for all positive integers except 0.\nThe\
    \ function should work for all positive integers except 0.\nThe function should\
    \ work for all positive integers except 0.\nThe function should work for all positive\
    \ integers except 0.\nThe function should work for all positive integers except\
    \ 0.\nThe function should work for all positive integers except 0.\nThe function\
    \ should work for all positive integers except 0.\nThe function should work for\
    \ all positive integers except 0.\nThe function should work for all positive integers\
    \ except 0.\nThe function should work for all positive integers except 0.\nThe\
    \ function should work for all positive integers except 0.\nThe function should\
    \ work for all positive integers except 0.\nThe function should work for all positive\
    \ integers except 0.\nThe function should work for all positive integers except\
    \ 0.\nThe function should work for all positive integers except 0.\nThe function\
    \ should work for all positive integers except 0.\nThe function should work for\
    \ all positive integers except 0.\nThe function should work for all positive integers\
    \ except 0.\nThe function should work for all positive integers except 0.\nThe\
    \ function should work for all positive integers except 0.\nThe function \nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpk2keau0i.jl:26\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpk2keau0i.jl:26\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n==1\
    \ \n        then true\n    else if n==2 \n        then true\n    else if n==3\
    \ \n        then true\n    else if n==4 \n        then true\n    else if n==5\
    \ \n        then true\n    else if n==6 \n        then true\n    else if n==7\
    \ \n        then true\n    else if n==8 \n        then true\n    else if n==9\
    \ \n        then true\n    else if n==10 \n        then true\n    else if n==11\
    \ \n        then true\n    else if n==12 \n        then true\n    else if n==13\
    \ \n        then true\n    else if n==14 \n        then true\n    else if n==15\
    \ \n        then true\n    else if n==16 \n        then true\n    else if n==17\
    \ \n        then true\n    else if n==18 \n        then true\n    else if n==19\
    \ \n        then true\n    else if n==20 \n        then true\n    else if n==21\
    \ \n        then true\n    else if n==22 \n        then true\n    else if n==23\
    \ \n        then true\n    else if n==24 \n        then true\n    else if n==25\
    \ \n        then true\n    else if n==26 \n        then true\n    else if n==27\
    \ \n        then true\n    else if n==28 \n        then true\n    else if n==29\
    \ \n        then true\n    else if n==30 \n        then true\n    else if n==31\
    \ \n        then true\n    else if n==32 \n        then true\n    else if n==33\
    \ \n        then true\n    else if n==34 \n        then true\n    else if n==35\
    \ \n        then true\n    else if n==36 \n        then true\n    else if n==37\
    \ \n        then true\n    else if n==38 \n        then true\n    else if n==39\
    \ \n        then true\n    else if n==40 \n        then true\n    else if n==41\
    \ \n        then true\n    else if n==42 \n        then true\n    else if n==43\
    \ \n        then true\n    else if n==44 \n        then true\n    else if n==45\
    \ \n        then true\n    else if n==46 \n        then true\n    \nusing Test\n\
    \n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) ==\
    \ true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\
    \t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24,\
    \ 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6)\
    \ == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"true\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpijda4s4j.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpijda4s4j.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n==1\
    \ \n        then true\n    else if n==2 \n        then true\n    else if n==3\
    \ \n        then true\n    else if n==4 \n        then true\n    else if n==5\
    \ \n        then true\n    else if n==6 \n        then true\n    else if n==7\
    \ \n        then true\n    else if n==8 \n        then true\n    else if n==9\
    \ \n        then true\n    else if n==10 \n        then true\n    else if n==11\
    \ \n        then true\n    else if n==12 \n        then true\n    else if n==13\
    \ \n        then true\n    else if n==14 \n        then true\n    else if n==15\
    \ \n        then true\n    else if n==16 \n        then true\n    else if n==17\
    \ \n        then true\n    else if n==18 \n        then true\n    else if n==19\
    \ \n        then true\n    else if n==20 \n        then true\n    else if n==21\
    \ \n        then true\n    else if n==22 \n        then true\n    else if n==23\
    \ \n        then true\n    else if n==24 \n        then true\n    else if n==25\
    \ \n        then true\n    else if n==26 \n        then true\n    else if n==27\
    \ \n        then true\n    else if n==28 \n        then true\n    else if n==29\
    \ \n        then true\n    else if n==30 \n        then true\n    else if n==31\
    \ \n        then true\n    else if n==32 \n        then true\n    else if n==33\
    \ \n        then true\n    else if n==34 \n        then true\n    else if n==35\
    \ \n        then true\n    else if n==36 \n        then true\n    else if n==37\
    \ \n        then true\n    else if n==38 \n        then true\n    else if n==39\
    \ \n        then true\n    else if n==40 \n        then true\n    else if n==41\
    \ \n        then true\n    else if n==42 \n        then true\n    else if n==43\
    \ \n        then true\n    else if n==44 \n        then true\n    else if n==45\
    \ \n        then true\n    else if n==46 \n        then true\n    \nusing Test\n\
    \n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) ==\
    \ true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\
    \t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24,\
    \ 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6)\
    \ == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"true\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpl6kzbsoe.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpl6kzbsoe.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n ==\
    \ 1 \n        then true\n    else if n % x == 0 \n        then true\n    else\
    \ false\nend\n</cell>\n<code language=julia-1.3>\nis_simple_power(1, 4)\n</cell>\n\
    <code language=julia-1.3>\nis_simple_power(2, 2)\n</cell>\n<code language=julia-1.3>\n\
    is_simple_power(8, 2)\n</cell>\n<code language=julia-1.3>\nis_simple_power(3,\
    \ 2)\n</cell>\n<code language=julia-1.3>\nis_simple_power(3, 1)\n</cell>\n<code\
    \ language=julia-1.3>\nis_simple_power(5, 3)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns true if a number x is a power of n and false in other\
    \ cases.\nx is a power of n if n**int=x\nFor example:\nis_power(1, 4) => true\n\
    is_power(2, 2) => true\nis_power(8, 2) => true\nis_power(3, 2) => false\nis_power(3,\
    \ 1) => false\nis_power(5, 3) => false\nHint: use the function is_simple_power\
    \ defined above.\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"true\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmphyarrig8.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmphyarrig8.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n ==\
    \ 1 \n        then true\n    else if n % x == 0 \n        then is_simple_power(x,\
    \ n-1)\n        else false\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    is_simple_power(2, 2)\n</cell>\n<code language=julia-1.0>\nis_simple_power(8,\
    \ 2)\n</cell>\n<code language=julia-1.0>\nis_simple_power(3, 2)\n</cell>\n<code\
    \ language=julia-1.0>\nis_simple_power(3, 1)\n</cell>\n<code language=julia-1.0>\n\
    is_simple_power(5, 3)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ true if a number x is a power of n and false in other cases.\nx is a power of\
    \ n if n**int=x\nFor example:\nis_power_of_2(1) => true\nis_power_of_2(2) => true\n\
    is_power_of_2(8) => true\nis_power_of_2(3) => false\nis_power_of_2(5) => false\n\
    Hint: use is_power_of_2\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"true\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpycspt5pr.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpycspt5pr.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if is_power_of_two(n)\
    \ == true && x % n == 0 then \n        return true\n    else \n        return\
    \ false\n    end\nend\n</cell>\n<text>\nProblem 3\nWrite a function that returns\
    \ true if the number n is a power of two, false otherwise.\nThe number n is a\
    \ power of two if n is a power of two (i.e. 2^n = n).\nFor example:\nis_power_of_two(2)\
    \ => true\nis_power_of_two(8) => true\nis_power_of_two(16) => true\nis_power_of_two(32)\
    \ => true\nis_power_of_two(64) => true\nis_power_of_two(128) => false\nis_power_of_two(1024)\
    \ => false\nis_power_of_two(2048) => false\nis_power_of_two(4096) => false\nis_power_of_two(8192)\
    \ => false\nis_power_of_two(16384) => false\nis_power_of_two(32768) => false\n\
    is_power_of_two(65536) => false\nis_power_of_two(131072) => false\nis_power_of_two(262144)\
    \ => false\nis_power_of_two(524288) => false\nis_power_of_two(1048576) => false\n\
    is_power_of_two(2097152) => false\nis_power_of_two(4194304) => false\nis_power_of_two(8388608)\
    \ => false\nis_power_of_two(16777216) => false\nis_power_of_two(33554432) => false\n\
    is_power_of_two(67108864) => false\nis_power_of_two(134217728) => false\nis_power_of_two(268435456)\
    \ => false\nis_power_of_two(536870912) => false\nis_power_of_two(1073741824) =>\
    \ false\nis_power_of_two(2147483648) => false\nis_power_of_two(4294967296) =>\
    \ false\nis_power_of_two(8589934592) => false\nis_power_of_two(17179869184) =>\
    \ false\nis_power_of_two(34359738368) => false\nis_power_of_two(68719476736) =>\
    \ false\nis_power_of_two(137438953472) => false\nis_power_of_two(274877906944)\
    \ => false\nis_power_of_two(549755813888) => false\nis_power_of_two(1099511627776)\
    \ => false\nis_power_of_two(2199023255552) => false\nis_power_of_two(4398046511\n\
    using Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfn8vsjmc.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfn8vsjmc.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n==1\
    \ \n        return true\n    else if n==0\n        return false\n    else if n==-1\n\
    \        return false\n    else if n==-2\n        return false\n    else if n==-3\n\
    \        return false\n    else if n==-4\n        return false\n    else if n==-5\n\
    \        return false\n    else if n==-6\n        return false\n    else if n==-7\n\
    \        return false\n    else if n==-8\n        return false\n    else if n==-9\n\
    \        return false\n    else if n==-10\n        return false\n    else if n==-11\n\
    \        return false\n    else if n==-12\n        return false\n    else if n==-13\n\
    \        return false\n    else if n==-14\n        return false\n    else if n==-15\n\
    \        return false\n    else if n==-16\n        return false\n    else if n==-17\n\
    \        return false\n    else if n==-18\n        return false\n    else if n==-19\n\
    \        return false\n    else if n==-20\n        return false\n    else if n==-21\n\
    \        return false\n    else if n==-22\n        return false\n    else if n==-23\n\
    \        return false\n    else if n==-24\n        return false\n    else if n==-25\n\
    \        return false\n    else if n==-26\n        return false\n    else if n==-27\n\
    \        return false\n    else if n==-28\n        return false\n    else if n==-29\n\
    \        return false\n    else if n==-30\n        return false\n    else if n==-31\n\
    \        return false\n    else if n==-32\n        return false\n    else if n==-33\n\
    \        return false\n    else if n==-34\n        return false\n    else if n==-35\n\
    \        return false\n    else if n==-36\n        return false\n    else if n==-37\n\
    \        return false\n    else if n==-38\n        return false\n    else if n==-39\n\
    \        return false\n    else if n==-40\n        return false\n    else if n==-41\n\
    \        return false\n    else if n==-42\n        return false\n    else if n==-43\n\
    \        return false\n    else if n==-44\n        return false\n    else if n==-45\n\
    \        return false\n    else if n==-46\n        return false\n    else if n==-47\n\
    \        return \nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpj8zwusi6.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpj8zwusi6.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if is_power_of_two(n)\
    \ == true\n        power = 2^n\n        if x == power\n            return true\n\
    \        else\n            return false\n    end\n    return false\nend\n</cell>\n\
    <code language=julia-1.5>\nis_simple_power(1, 4)\n</cell>\n<code language=julia-1.5>\n\
    is_simple_power(2, 2)\n</cell>\n<code language=julia-1.5>\nis_simple_power(8,\
    \ 2)\n</cell>\n<code language=julia-1.5>\nis_simple_power(3, 2)\n</cell>\n<code\
    \ language=julia-1.5>\nis_simple_power(3, 1)\n</cell>\n<code language=julia-1.5>\n\
    is_simple_power(5, 3)\n</cell>\n<text>\nProblem 3\nWrite a function that returns\
    \ the factorial of a number. \n    x is a number greater than 0.\n    For example:\n\
    \    factorial(5) => 120\n    factorial(4) => 24\n    factorial(3) => 6\n    factorial(2)\
    \ => 2\n    factorial(1) => 1\n    factorial(0) => 1\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) ==\
    \ true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\
    \t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24,\
    \ 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6)\
    \ == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfb9v3f1x.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfb9v3f1x.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n==1\
    \ \n        return true\n    else \n        return (x==n^x)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nis_simple_power(1, 4)\n</cell>\n<code language=julia-1.5>\n\
    is_simple_power(2, 2)\n</cell>\n<code language=julia-1.5>\nis_simple_power(8,\
    \ 2)\n</cell>\n<code language=julia-1.5>\nis_simple_power(3, 2)\n</cell>\n<code\
    \ language=julia-1.5>\nis_simple_power(3, 1)\n</cell>\n<code language=julia-1.5>\n\
    is_simple_power(5, 3)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ true if a number x is a power of n and false in other cases.\nx is a power of\
    \ n if n**int=x\nFor example:\nis_power(1, 4) => true\nis_power(2, 2) => true\n\
    is_power(8, 2) => true\nis_power(3, 2) => false\nis_power(3, 1) => false\nis_power(5,\
    \ 3) => false\nHint: use is_simple_power() function.\nusing Test\n\n@testset begin\n\
    \ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8_ummuwa.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8_ummuwa.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n==1\
    \ \n        then true\n    else if n==2 \n        then x==1\n    else if n==3\
    \ \n        then x==1\n    else if n==4 \n        then x==1\n    else if n==5\
    \ \n        then x==1\n    else if n==6 \n        then x==1\n    else if n==7\
    \ \n        then x==1\n    else if n==8 \n        then x==1\n    else if n==9\
    \ \n        then x==1\n    else if n==10 \n        then x==1\n    else if n==11\
    \ \n        then x==1\n    else if n==12 \n        then x==1\n    else if n==13\
    \ \n        then x==1\n    else if n==14 \n        then x==1\n    else if n==15\
    \ \n        then x==1\n    else if n==16 \n        then x==1\n    else if n==17\
    \ \n        then x==1\n    else if n==18 \n        then x==1\n    else if n==19\
    \ \n        then x==1\n    else if n==20 \n        then x==1\n    else if n==21\
    \ \n        then x==1\n    else if n==22 \n        then x==1\n    else if n==23\
    \ \n        then x==1\n    else if n==24 \n        then x==1\n    else if n==25\
    \ \n        then x==1\n    else if n==26 \n        then x==1\n    else if n==27\
    \ \n        then x==1\n    else if n==28 \n        then x==1\n    else if n==29\
    \ \n        then x==1\n    else if n==30 \n        then x==1\n    else if n==31\
    \ \n        then x==1\n    else if n==32 \n        then x==1\n    else if n==33\
    \ \n        then x==1\n    else if n==34 \n        then x==1\n    else if n==35\
    \ \n        then x==1\n    else if n==36 \n        then x==1\n    else if n==37\
    \ \n        then x==1\n    else if n==38 \n        then x==1\n    else if n==39\
    \ \n        then x==1\n    else if n==40 \nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"true\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp8j5xj3ml.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp8j5xj3ml.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n ==\
    \ 1 \n        then true\n    else if n % x == 0 \n        then true\n    else\
    \ false\nend\n</cell>\n<code language=julia-1.5>\nis_simple_power(1, 4)\n</cell>\n\
    <code language=julia-1.5>\nis_simple_power(2, 2)\n</cell>\n<code language=julia-1.5>\n\
    is_simple_power(8, 2)\n</cell>\n<code language=julia-1.5>\nis_simple_power(3,\
    \ 2)\n</cell>\n<code language=julia-1.5>\nis_simple_power(3, 1)\n</cell>\n<code\
    \ language=julia-1.5>\nis_simple_power(5, 3)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns true if a number x is a power of n and false in other\
    \ cases.\nx is a power of n if n**int=x\nFor example:\nis_power_of_n(2, 2) =>\
    \ true\nis_power_of_n(8, 2) => true\nis_power_of_n(3, 2) => false\nis_power_of_n(3,\
    \ 1) => false\nis_power_of_n(5, 3) => false\nHint: use is_power_of_n function\
    \ from exercise 1.\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"true\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpv9b0m6sp.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpv9b0m6sp.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n==1\
    \ \n        then return true\n    else if n==2 \n        then return x==1\n  \
    \  else if n==3 \n        then return x==1\n    else if n==4 \n        then return\
    \ x==1\n    else if n==5 \n        then return x==1\n    else if n==6 \n     \
    \   then return x==1\n    else if n==7 \n        then return x==1\n    else if\
    \ n==8 \n        then return x==1\n    else if n==9 \n        then return x==1\n\
    \    else if n==10 \n        then return x==1\n    else if n==11 \n        then\
    \ return x==1\n    else if n==12 \n        then return x==1\n    else if n==13\
    \ \n        then return x==1\n    else if n==14 \n        then return x==1\n \
    \   else if n==15 \n        then return x==1\n    else if n==16 \n        then\
    \ return x==1\n    else if n==17 \n        then return x==1\n    else if n==18\
    \ \n        then return x==1\n    else if n==19 \n        then return x==1\n \
    \   else if n==20 \n        then return x==1\n    else if n==21 \n        then\
    \ return x==1\n    else if n==22 \n        then return x==1\n    else if n==23\
    \ \n        then return x==1\n    else if n==24 \n        then return x==1\n \
    \   else if n==25 \n        then return x==1\n    else if n==26 \n        then\
    \ return x==1\n    else if n==27 \n        then return x==1\n    else if n==28\
    \ \n        then return x==1\n    else if n==29 \n        then return x==1\n \
    \   else if n==30 \n        then return x==1\n    else if n==31 \n        then\
    \ return x==1\n    else if n==32 \n        then return x==1\n    else if n==33\
    \ \n        then return x==1\n    else if n==34 \n        then return x==1\n \
    \   else if n==35 \n        then return x==1\n    else if n==36 \n        then\
    \ return x==1\n    else if n==37 \n        then return x\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t\
    @test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9,\
    \ 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) ==\
    \ false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\
    \t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpm65__8f1.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpm65__8f1.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if is_simple_power(x,\
    \ n) == true\n        return true\n    else\n        return false\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nis_simple_power(1, 4)\n</cell>\n<code language=julia-1.5>\n\
    is_simple_power(2, 2)\n</cell>\n<code language=julia-1.5>\nis_simple_power(8,\
    \ 2)\n</cell>\n<code language=julia-1.5>\nis_simple_power(3, 2)\n</cell>\n<code\
    \ language=julia-1.5>\nis_simple_power(3, 1)\n</cell>\n<code language=julia-1.5>\n\
    is_simple_power(5, 3)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of digits in an integer.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4rng_n_j.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4rng_n_j.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n==1\
    \ \n        then return true\n    else \n        if n==0 \n            then return\
    \ false\n        else \n            if n%2==0 \n                then return is_simple_power(x,\
    \ n//2)\n            else \n                if n%3==0 \n                    then\
    \ return is_simple_power(x, n//3)\n                else \n                   \
    \ if n%5==0 \n                        then return is_simple_power(x, n//5)\n \
    \                   else \n                        if n%7==0 \n              \
    \              then return is_simple_power(x, n//7)\n                        else\
    \ \n                            if n%11==0 \n                                then\
    \ return is_simple_power(x, n//11)\n                            else \n      \
    \                          if n%13==0 \n                                    then\
    \ return is_simple_power(x, n//13)\n                                else \n  \
    \                                  if n%17==0 \n                             \
    \           then return is_simple_power(x, n//17)\n                          \
    \          else \n                                        if n%19==0 \n      \
    \                                      then return is_simple_power(x, n//19)\n\
    \                                        else \n                             \
    \               if n%23==0 \n                                                then\
    \ return is_simple_power(x, n//23)\n                                         \
    \   else \n                                                if n%29==0 \n     \
    \                                               then return is_simple_power(x,\
    \ n//29)\n                                                else \n            \
    \                                        if n%31==0 \n                       \
    \                                 then return is_simple_power(x, n//31)\n    \
    \                                                else \n                     \
    \                                   if n%37==0 \n                            \
    \                                then return is_simple_power(x, n//37)\n     \
    \                                                   else \n                  \
    \                                          if n%41==0 \n                     \
    \                                           then return is_simple_power(x, n//41)\n\
    \                                                            else \n         \
    \                                                       if n%43==0 \n        \
    \                                                            then return is_simple_power(x,\
    \ n//43)\n                                                                else\
    \ \n                                                                    if n%47==0\
    \ \n                                                                        then\
    \ return is_simple_power(x, n//47)\n                                         \
    \                           else \n                                          \
    \              if n%51==0 \n                                                 \
    \           then return is_simple_power(x, n//51)\n                          \
    \                              else \n                                       \
    \                     if n%53==0 \n                                          \
    \                      then return is_simple_power(x, n//53)\n               \
    \                                             else \n                        \
    \                                        if n%57==0 \n                       \
    \                                             then return is_simple_power(x, n//57)\n\
    \                                                                    else \n \
    \                                                       if n%59==0 \n        \
    \                                                    then return is_simple_power(x,\
    \ n//59)\n                                                        else \n    \
    \                                                        if n%61==0 \n       \
    \                                                         then return is_simple_power(x,\
    \ n//61)\n                                                            else \n\
    \                                                                if n%63==0 \n\
    \                                                                    then return\
    \ is_simple_power(x, n//63)\n                                                \
    \                    else \n                                                 \
    \       if n%67==0 \n                                                        \
    \    then return is_simple_\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpvva0skm9.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpvva0skm9.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if is_power_of_two(n)\
    \ \n        then x == n**int(x) else false\n    else \n        false\nend\n</cell>\n\
    <code language=julia-1.3>\nis_simple_power(1, 4)\n</cell>\n<code language=julia-1.3>\n\
    is_simple_power(2, 2)\n</cell>\n<code language=julia-1.3>\nis_simple_power(8,\
    \ 2)\n</cell>\n<code language=julia-1.3>\nis_simple_power(3, 2)\n</cell>\n<code\
    \ language=julia-1.3>\nis_simple_power(3, 1)\n</cell>\n<code language=julia-1.3>\n\
    is_simple_power(5, 3)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ true if a number x is a power of 2 and a power of n if n**int=x\n    For example:\n\
    \    is_power_of_two(2) => true\n    is_power_of_two(8) => true\n    is_power_of_two(16)\
    \ => true\n    is_power_of_two(32) => true\n    is_power_of_two(64) => true\n\
    \    is_power_of_two(128) => false\n    is_power_of_two(256) => false\n    is_power_of_two(512)\
    \ => false\n    is_power_of_two(1024) => false\n    is_power_of_two(2048) => false\n\
    \    is_power_of_two(4096) => false\n    is_power_of_two(8192) => false\n    is_power_of_two(16384)\
    \ => false\n    is_power_of_two(32768) => false\n    is_power_of_two(65536) =>\
    \ false\n    is_power_of_two(131072) => false\n    is_power_of_two(262144) =>\
    \ false\n    is_power_of_two(524288) => false\n    is_power_of_two(1048576) =>\
    \ false\n    is_power_of_two(2097152) => false\n    is_power_of_two(4194304) =>\
    \ false\n    is_power_of_two(8388608) => false\n    is_power_of_two(16777216)\
    \ => false\n    is_power_of_two(33554432) => false\n    is_power_of_two(67108864)\
    \ => false\n    is_power_of_two(134217728) => false\n    is_power_of_two(268435456)\
    \ => false\n    is_power_of_two(536870912) => false\n    is_power_of_two(1073741824)\
    \ => false\n    is_power_of_two(2147483648) => false\n    is_power_of_two(4294967296)\
    \ => false\n    is_power_of_two(8589934592) => false\n    is_power_of_two(17179869184)\
    \ => false\n    is_power_of_two(\nusing Test\n\n@testset begin\n\ncandidate =\
    \ is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"x\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpuqnodyg3.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpuqnodyg3.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if is_power_of_two(n)\
    \ && is_power_of_two(x)\n        power = n\n        power2 = power\n        while\
    \ power2 >= 1\n            power2 /= 2\n        end\n        power = power2\n\
    \        return power^x == x\n    else\n        return false\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nis_simple_power(1, 4)\n</cell>\n<code language=julia-1.5>\n\
    is_simple_power(2, 2)\n</cell>\n<code language=julia-1.5>\nis_simple_power(8,\
    \ 2)\n</cell>\n<code language=julia-1.5>\nis_simple_power(3, 2)\n</cell>\n<code\
    \ language=julia-1.5>\nis_simple_power(3, 1)\n</cell>\n<code language=julia-1.5>\n\
    is_simple_power(5, 3)\n</cell>\n<text>\nProblem 3\nWrite a function that returns\
    \ the number of digits of an integer.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5zq7_wmn.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5zq7_wmn.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if is_power_of_two(n)\
    \ == true\n        power = n / 2\n        exponent = n mod 2\n        if x ==\
    \ power\n            return true\n        else\n            if exponent == 0\n\
    \                return true\n            else\n                return false\n\
    \        end\n    else\n        return false\n    end\nend\n</cell>\n<text>\n\
    Problem 3\nWrite a function that returns true if the number n is a power of two,\
    \ false otherwise.\nThe number n is a power of two if n is a power of two, otherwise\
    \ return false.\nFor example:\nis_power_of_two(2) => true\nis_power_of_two(8)\
    \ => true\nis_power_of_two(16) => true\nis_power_of_two(32) => true\nis_power_of_two(64)\
    \ => true\nis_power_of_two(128) => false\nis_power_of_two(256) => false\nis_power_of_two(512)\
    \ => false\nis_power_of_two(1024) => false\nis_power_of_two(2048) => false\nis_power_of_two(4096)\
    \ => false\nis_power_of_two(8192) => false\nis_power_of_two(16384) => false\n\
    is_power_of_two(32768) => false\nis_power_of_two(65536) => false\nis_power_of_two(131072)\
    \ => false\nis_power_of_two(262144) => false\nis_power_of_two(524288) => false\n\
    is_power_of_two(1048576) => false\nis_power_of_two(2097152) => false\nis_power_of_two(4194304)\
    \ => false\nis_power_of_two(8388608) => false\nis_power_of_two(16777216) => false\n\
    is_power_of_two(33554432) => false\nis_power_of_two(67108864) => false\nis_power_of_two(134217728)\
    \ => false\nis_power_of_two(268435456) => false\nis_power_of_two(536870912) =>\
    \ false\nis_power_of_two(1073741824) => false\nis_power_of_two(2147483648) =>\
    \ false\nis_power_of_two(4294967296) => false\nis_power_of_two(8589934592) =>\
    \ false\nis_power_of_two(17179869184) => false\nis_power_of_two(34359738368) =>\
    \ false\nis_power_of_two(68719476736) => false\nis_power_of_two(137438953472)\
    \ => false\nis_power_of_two(274877906944) => false\nis_power_of_two(5497\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"mod\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmph3xgoizy.jl:15\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmph3xgoizy.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n ==\
    \ 1 \n        then true\n    else if n % x == 0 \n        then true\n    else\
    \ false\nend\n</cell>\n<code language=julia-1.5>\nis_simple_power(3, 2)\n</cell>\n\
    <code language=julia-1.5>\nis_simple_power(3, 1)\n</cell>\n<code language=julia-1.5>\n\
    is_simple_power(5, 3)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ true if the number x is divisible by y or false otherwise.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t\
    @test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9,\
    \ 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) ==\
    \ false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\
    \t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"true\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpbfl75tyz.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpbfl75tyz.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if is_power_of_two(n)\
    \ \n        return (x == n**x)\n    else \n        return false\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nis_simple_power(1, 4)\n</cell>\n<code language=julia-1.5>\n\
    is_simple_power(2, 2)\n</cell>\n<code language=julia-1.5>\nis_simple_power(8,\
    \ 2)\n</cell>\n<code language=julia-1.5>\nis_simple_power(3, 2)\n</cell>\n<code\
    \ language=julia-1.5>\nis_simple_power(3, 1)\n</cell>\n<code language=julia-1.5>\n\
    is_simple_power(5, 3)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of digits in an integer.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"^\" instead of \"**\"\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpett57stc.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpett57stc.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n ==\
    \ 1 \n        then true\n    else if n % x == 0 \n        then true\n    else\
    \ false\nend\n</cell>\n<code language=julia-1.5>\nis_simple_power(1, 4)\n</cell>\n\
    <code language=julia-1.5>\nis_simple_power(2, 2)\n</cell>\n<code language=julia-1.5>\n\
    is_simple_power(8, 2)\n</cell>\n<code language=julia-1.5>\nis_simple_power(3,\
    \ 2)\n</cell>\n<code language=julia-1.5>\nis_simple_power(3, 1)\n</cell>\n<code\
    \ language=julia-1.5>\nis_simple_power(5, 3)\n</cell>\n<text>\nProblem 3\nWrite\
    \ a function that returns true if a number x is a power of n and false in other\
    \ cases.\nx is a power of n if n**int=x\nFor example:\nis_power(1, 4) => true\n\
    is_power(2, 2) => true\nis_power(8, 2) => true\nis_power(3, 2) => false\nis_power(3,\
    \ 1) => false\nis_power(5, 3) => false\nHint: use is_simple_power to solve this\
    \ problem\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"true\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpns1kfhhb.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpns1kfhhb.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if is_power_of_two(n)\
    \ \n        then is_power_of_two(x*n)\n        else false\n    else false\nend\n\
    </cell>\n<code language=julia-1.5>\nis_simple_power(1, 4)\n</cell>\n<code language=julia-1.5>\n\
    is_simple_power(2, 2)\n</cell>\n<code language=julia-1.5>\nis_simple_power(8,\
    \ 2)\n</cell>\n<code language=julia-1.5>\nis_simple_power(3, 2)\n</cell>\n<code\
    \ language=julia-1.5>\nis_simple_power(3, 1)\n</cell>\n<code language=julia-1.5>\n\
    is_simple_power(5, 3)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ true if a number is prime and false in other cases.\nA number is prime if all\
    \ its factors are less than or equal to its square root. \nFor example:\nis_prime(5)\
    \ => true\nis_prime(7) => false\nis_prime(11) => true\nis_prime(13) => false\n\
    is_prime(17) => true\nis_prime(19) => false\nis_prime(23) => true\nis_prime(29)\
    \ => false\nis_prime(33) => true\nis_prime(37) => false\nis_prime(43) => true\n\
    is_prime(47) => false\nis_prime(53) => true\nis_prime(59) => false\nis_prime(61)\
    \ => true\nis_prime(67) => false\nis_prime(71) => true\nis_prime(73) => false\n\
    is_prime(79) => true\nis_prime(81) => false\nis_prime(89) => true\nis_prime(97)\
    \ => false\nis_prime(101) => true\nis_prime(103) => false\nis_prime(109) => true\n\
    is_prime(113) => false\nis_prime(121) => true\nis_prime(127) => false\nis_prime(131)\
    \ => true\nis_prime(137) => false\nis_prime(143) => true\nis_prime(147) => false\n\
    is_prime(151) => true\nis_prime(157) => false\nis_prime(163) => true\nis_prime(167)\
    \ => false\nis_prime(173) => true\nis_prime(179) => false\nis_prime(181) => true\n\
    is_prime(191) => false\nis_prime(193) => true\nis_prime(197) => false\nis_prime(199)\
    \ => true\nis_prime(203) => false\nis_prime(211) => true\nis_prime(217) => false\n\
    is_prime(223) => true\nis_prime\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"is_power_of_two\" after end of\
    \ expression\nStacktrace:\n [1] top-level scope at /tmp/tmp2_uzbjwh.jl:14\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp2_uzbjwh.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if is_power_of_two(n)\
    \ == true\n        power = n / 2\n        if x == power\n            return true\n\
    \        else\n            return false\n    else\n        return false\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nis_power_of_two(8)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(9)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(10)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(11)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(12)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(13)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(14)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(15)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(16)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(17)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(18)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(19)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(20)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(21)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(22)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(23)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(24)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(25)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(26)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(27)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(28)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(29)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(30)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(31)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(32)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(33)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(34)\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmp0_5e76e2.jl:15 expected \"\
    end\", got \"else\"\nStacktrace:\n [1] top-level scope at /tmp/tmp0_5e76e2.jl:19\n\
    \ [2] include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp0_5e76e2.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n ==\
    \ 1 \n        then true\n    else \n        if x % n == 0 \n            then true\n\
    \        else false\nend\n</cell>\n<code language=julia-1.5>\nis_simple_power(2,\
    \ 2)\n</cell>\n<code language=julia-1.5>\nis_simple_power(8, 2)\n</cell>\n<code\
    \ language=julia-1.5>\nis_simple_power(3, 2)\n</cell>\n<code language=julia-1.5>\n\
    is_simple_power(3, 1)\n</cell>\n<code language=julia-1.5>\nis_simple_power(5,\
    \ 3)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number of\
    \ digits in an integer.\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"true\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmplklj7y12.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmplklj7y12.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if is_power_of_two(n)\
    \ == true \n        then x == n**int(x) else false\n    else \n        false\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nis_simple_power(1, 4)\n</cell>\n\
    <code language=julia-1.5>\nis_simple_power(2, 2)\n</cell>\n<code language=julia-1.5>\n\
    is_simple_power(8, 2)\n</cell>\n<code language=julia-1.5>\nis_simple_power(3,\
    \ 2)\n</cell>\n<code language=julia-1.5>\nis_simple_power(3, 1)\n</cell>\n<code\
    \ language=julia-1.5>\nis_simple_power(5, 3)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns true if a number x is a power of n and false in other\
    \ cases.\nx is a power of n if n**int=x\nFor example:\nis_power_of_two(2) => true\n\
    is_power_of_two(8) => true\nis_power_of_two(9) => false\nis_power_of_two(5) =>\
    \ false\nis_power_of_two(7) => false\nis_power_of_two(11) => false\nis_power_of_two(13)\
    \ => false\nis_power_of_two(17) => false\nis_power_of_two(19) => false\nis_power_of_two(23)\
    \ => false\nis_power_of_two(27) => false\nis_power_of_two(33) => false\nis_power_of_two(37)\
    \ => false\nis_power_of_two(43) => false\nis_power_of_two(47) => false\nis_power_of_two(53)\
    \ => false\nis_power_of_two(59) => false\nis_power_of_two(65) => false\nis_power_of_two(71)\
    \ => false\nis_power_of_two(77) => false\nis_power_of_two(83) => false\nis_power_of_two(89)\
    \ => false\nis_power_of_two(97) => false\nis_power_of_two(101) => false\nis_power_of_two(107)\
    \ => false\nis_power_of_two(113) => false\nis_power_of_two(119) => false\nis_power_of_two(125)\
    \ => false\nis_power_of_two(131) => false\nis_power_of_two(137) => false\nis_power_of_two(143)\
    \ => false\nis_power_of_two(149) => false\nis_power_of_two(153) => false\nis_power_of_two(157)\
    \ => false\nis_power_of_two(163) => false\nis_power_of_two(169) => false\nis_power_of_two(175)\
    \ => false\nis_power_of_two(18\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"x\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzr8yy_1f.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzr8yy_1f.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if is_simple_power(x,\
    \ n) == true\n        return true\n    else\n        return false\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nis_simple_power(3, 2)\n</cell>\n<code language=julia-1.5>\n\
    is_simple_power(3, 1)\n</cell>\n<code language=julia-1.5>\nis_simple_power(5,\
    \ 3)\n</cell>\n<text>\nExercise 2\nWrite a function that returns true if the number\
    \ x is a power of n and false in other cases.\nx is a power of n if n**int=x\n\
    For example:\nis_power(1, 4) => true\nis_power(2, 2) => true\nis_power(8, 2) =>\
    \ true\nis_power(3, 2) => false\nis_power(3, 1) => false\nis_power(5, 3) => false\n\
    Hint: use is_simple_power function.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmparh2ihr1.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmparh2ihr1.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if is_power_of_two(n)\
    \ == true \n        then return true\n        else return false\n    else \n \
    \       return is_simple_power(x, n-1)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpfu5xpphq.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpfu5xpphq.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n ==\
    \ 1 \n        then true\n    else if n % x == 0 \n        then true\n    else\
    \ false\nend\n</cell>\n<code language=julia-1.5>\nis_simple_power(1, 4)\n</cell>\n\
    <code language=julia-1.5>\nis_simple_power(2, 2)\n</cell>\n<code language=julia-1.5>\n\
    is_simple_power(8, 2)\n</cell>\n<code language=julia-1.5>\nis_simple_power(3,\
    \ 2)\n</cell>\n<code language=julia-1.5>\nis_simple_power(3, 1)\n</cell>\n<code\
    \ language=julia-1.5>\nis_simple_power(5, 3)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the number of digits in an integer.\nusing Test\n\n\
    @testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\
    \t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\t\
    @test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24,\
    \ 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6)\
    \ == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"true\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpo73wy640.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpo73wy640.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n ==\
    \ 1 \n        then true\n    else if n%2 == 0 \n        then is_simple_power(x,\
    \ n/2)\n    else \n        false\nend\n</cell>\n<code language=julia-1.4>\n@assert\
    \ is_simple_power(1, 4) == true\n@assert is_simple_power(2, 2) == true\n@assert\
    \ is_simple_power(8, 2) == true\n@assert is_simple_power(3, 2) == false\n@assert\
    \ is_simple_power(3, 1) == false\n@assert is_simple_power(5, 3) == false\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns true if a number x is a power\
    \ of n and false in other cases.\nx is a power of n if n**int=x\nFor example:\n\
    is_power_of_two(2) => true\nis_power_of_two(8) => true\nis_power_of_two(16) =>\
    \ true\nis_power_of_two(32) => true\nis_power_of_two(64) => false\nis_power_of_two(12)\
    \ => false\nis_power_of_two(9) => false\nis_power_of_two(7) => false\nis_power_of_two(5)\
    \ => false\nis_power_of_two(3) => false\nis_power_of_two(1) => false\nis_power_of_two(0)\
    \ => false\nis_power_of_two(-1) => false\nis_power_of_two(-2) => false\nis_power_of_two(-3)\
    \ => false\nis_power_of_two(-4) => false\nis_power_of_two(-5) => false\nis_power_of_two(-6)\
    \ => false\nis_power_of_two(-7) => false\nis_power_of_two(-8) => false\nis_power_of_two(-9)\
    \ => false\nis_power_of_two(-10) => false\nis_power_of_two(-11) => false\nis_power_of_two(-12)\
    \ => false\nis_power_of_two(-13) => false\nis_power_of_two(-14) => false\nis_power_of_two(-15)\
    \ => false\nis_power_of_two(-16) => false\nis_power_of_two(-17) => false\nis_power_of_two(-18)\
    \ => false\nis_power_of_two(-19) => false\nis_power_of_two(-20) => false\nis_power_of_two(-21)\
    \ => false\nis_power_of_two(-22) => false\nis_power_of_two(-23) => false\nis_power_of_two(-24)\
    \ => false\nis_power_of_two(-25) => false\nis_power_of_two(-26) => false\nis_power_of_two(-27)\
    \ => false\nis_power_of_two(-28) => false\nis_power_of_two(-29) => false\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"true\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpqnp31n9x.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpqnp31n9x.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if is_power_of_two(n)\
    \ && x==n\n    else false\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that returns true if the number x is a power of 2 and\nfalse in other\
    \ cases.\nx is a power of 2 if 2**int=x\nFor example:\nis_power_of_two(2) => true\n\
    is_power_of_two(8) => true\nis_power_of_two(16) => true\nis_power_of_two(32) =>\
    \ true\nis_power_of_two(64) => false\nis_power_of_two(128) => false\nis_power_of_two(256)\
    \ => false\nis_power_of_two(512) => false\nis_power_of_two(1024) => false\nis_power_of_two(2048)\
    \ => false\nis_power_of_two(4096) => false\nis_power_of_two(8192) => false\nis_power_of_two(16384)\
    \ => false\nis_power_of_two(32768) => false\nis_power_of_two(65536) => false\n\
    is_power_of_two(131072) => false\nis_power_of_two(262144) => false\nis_power_of_two(524288)\
    \ => false\nis_power_of_two(1048576) => false\nis_power_of_two(2097152) => false\n\
    is_power_of_two(4194304) => false\nis_power_of_two(8388608) => false\nis_power_of_two(16777216)\
    \ => false\nis_power_of_two(33554432) => false\nis_power_of_two(67108864) => false\n\
    is_power_of_two(134217728) => false\nis_power_of_two(268435456) => false\nis_power_of_two(536870912)\
    \ => false\nis_power_of_two(1073741824) => false\nis_power_of_two(2147483648)\
    \ => false\nis_power_of_two(4294967296) => false\nis_power_of_two(8589934592)\
    \ => false\nis_power_of_two(17179869184) => false\nis_power_of_two(34359738368)\
    \ => false\nis_power_of_two(68719476736) => false\nis_power_of_two(137438953472)\
    \ => false\nis_power_of_two(274877906944) => false\nis_power_of_two(549755813888)\
    \ => false\nis_power_of_two(1099511627776) => false\nis_power_of_two(2199023255552)\
    \ => false\nis_power_of_two(4\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp30yidoqs.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp30yidoqs.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if is_power_of_two(n)\
    \ == true\n        true\n    else\n        false\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nis_power_of_two(8)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(9)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(10)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(11)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(12)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(13)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(14)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(15)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(16)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(17)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(18)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(19)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(20)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(21)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(22)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(23)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(24)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(25)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(26)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(27)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(28)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(29)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(30)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(31)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(32)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(33)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(34)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(35)\n</cell>\n<code language=julia-\n\
    using Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp77lhed72.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp77lhed72.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n==1\
    \ \n        then true\n    else if n==0\n        then false\n    else if n==-1\n\
    \        then false\n    else if n==-2\n        then false\n    else if n==-3\n\
    \        then false\n    else if n==-4\n        then false\n    else if n==-5\n\
    \        then false\n    else if n==-6\n        then false\n    else if n==-7\n\
    \        then false\n    else if n==-8\n        then false\n    else if n==-9\n\
    \        then false\n    else if n==-10\n        then false\n    else if n==-11\n\
    \        then false\n    else if n==-12\n        then false\n    else if n==-13\n\
    \        then false\n    else if n==-14\n        then false\n    else if n==-15\n\
    \        then false\n    else if n==-16\n        then false\n    else if n==-17\n\
    \        then false\n    else if n==-18\n        then false\n    else if n==-19\n\
    \        then false\n    else if n==-20\n        then false\n    else if n==-21\n\
    \        then false\n    else if n==-22\n        then false\n    else if n==-23\n\
    \        then false\n    else if n==-24\n        then false\n    else if n==-25\n\
    \        then false\n    else if n==-26\n        then false\n    else if n==-27\n\
    \        then false\n    else if n==-28\n        then false\n    else if n==-29\n\
    \        then false\n    else if n==-30\n        then false\n    else if n==-31\n\
    \        then false\n    else if n==-32\n        then false\n    else if n==-33\n\
    \        then false\n    else if n==-34\n        then false\n    else if n==-35\n\
    \        then false\n    else if n==-36\n        then false\n    else if n==-37\n\
    \        then false\n    else if n==-38\n        then false\n    else if n==-39\n\
    \        then false\n    else if n==-40\n        then false\n    else if n==-41\n\
    \        then false\n    else if n==-42\n        then false\n    else if n==-43\n\
    \        \nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"true\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpowdrd166.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpowdrd166.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if is_simple_power(x,\
    \ n) == true \n        then return true\n    else \n        return false\n   \
    \ end\nend\n</cell>\n<code language=julia-1.5>\nis_simple_power(1, 4)\n</cell>\n\
    <code language=julia-1.5>\nis_simple_power(2, 2)\n</cell>\n<code language=julia-1.5>\n\
    is_simple_power(8, 2)\n</cell>\n<code language=julia-1.5>\nis_simple_power(3,\
    \ 2)\n</cell>\n<code language=julia-1.5>\nis_simple_power(3, 1)\n</cell>\n<code\
    \ language=julia-1.5>\nis_simple_power(5, 3)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns true if a number x is a power of n and false in other\
    \ cases.\nx is a power of n if n**int=x\nFor example:\nis_power(1, 4) => true\n\
    is_power(2, 2) => true\nis_power(8, 2) => true\nis_power(3, 2) => false\nis_power(3,\
    \ 1) => false\nis_power(5, 3) => false\nHint: use is_simple_power function.\n\
    using Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp88y0wh_p.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp88y0wh_p.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if is_power_of_two(n)\
    \ \n        then x == n^int\n        else false\n    else false\nend\n</cell>\n\
    <code language=julia-1.5>\nis_simple_power(1, 4)\n</cell>\n<code language=julia-1.5>\n\
    is_simple_power(2, 2)\n</cell>\n<code language=julia-1.5>\nis_simple_power(8,\
    \ 2)\n</cell>\n<code language=julia-1.5>\nis_simple_power(3, 2)\n</cell>\n<code\
    \ language=julia-1.5>\nis_simple_power(3, 1)\n</cell>\n<code language=julia-1.5>\n\
    is_simple_power(5, 3)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ true if a number x is a power of two and false in other cases.\nx is a power\
    \ of two if n^int=x\nFor example:\nis_power_of_two(2) => true\nis_power_of_two(8)\
    \ => true\nis_power_of_two(16) => false\nis_power_of_two(32) => false\nis_power_of_two(64)\
    \ => false\nis_power_of_two(128) => false\nis_power_of_two(256) => false\nis_power_of_two(512)\
    \ => false\nis_power_of_two(1024) => true\nis_power_of_two(2048) => true\nis_power_of_two(4096)\
    \ => true\nis_power_of_two(8192) => true\nis_power_of_two(16384) => true\nis_power_of_two(32768)\
    \ => true\nis_power_of_two(65536) => true\nis_power_of_two(131072) => true\nis_power_of_two(262144)\
    \ => true\nis_power_of_two(524288) => true\nis_power_of_two(1048576) => true\n\
    is_power_of_two(2097152) => true\nis_power_of_two(4194304) => true\nis_power_of_two(8388608)\
    \ => true\nis_power_of_two(16777216) => true\nis_power_of_two(33554432) => true\n\
    is_power_of_two(67108864) => true\nis_power_of_two(134217728) => true\nis_power_of_two(268435456)\
    \ => true\nis_power_of_two(536870912) => true\nis_power_of_two(1073741824) =>\
    \ true\nis_power_of_two(2147483648) => true\nis_power_of_two(4294967296) => true\n\
    is_power_of_two(8589934592) => true\nis_power_of_two(17179869184) => true\nis_\n\
    using Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"x\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzm_xetfj.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzm_xetfj.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n ==\
    \ 0 \n        then return true\n    else if x == 1\n        then return true\n\
    \    else if n % x == 0 \n        then return true\n    else \n        return\
    \ false\nend\n</cell>\n<code language=julia-1.5>\nis_simple_power(2, 2)\n</cell>\n\
    <code language=julia-1.5>\nis_simple_power(8, 2)\n</cell>\n<code language=julia-1.5>\n\
    is_simple_power(3, 2)\n</cell>\n<code language=julia-1.5>\nis_simple_power(3,\
    \ 1)\n</cell>\n<code language=julia-1.5>\nis_simple_power(5, 3)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns true if a number x is a power of n and\
    \ false in other cases.\nx is a power of n if n**int=x\nFor example:\nis_power_of_n(2,\
    \ 4) => true\nis_power_of_n(8, 4) => true\nis_power_of_n(3, 2) => false\nis_power_of_n(3,\
    \ 1) => false\nis_power_of_n(5, 3) => false\nHint: use is_simple_power() function\
    \ you wrote earlier.\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpib9f31p4.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpib9f31p4.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if is_power_of_two(x)\
    \ && is_power_of_two(n)\n        power = 2^n\n        return power==x\n    else\n\
    \        return false\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ is_simple_power(1, 4) == true\n@assert is_simple_power(2, 2) == true\n@assert\
    \ is_simple_power(8, 2) == true\n@assert is_simple_power(3, 2) == false\n@assert\
    \ is_simple_power(3, 1) == false\n@assert is_simple_power(5, 3) == false\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns true if a number x is a power\
    \ of 2 and a power of n if n!=x\n    x is a power of 2 if 2^int=x\n    x is a\
    \ power of n if n!=x\n    For example:\n    is_power_of_two(2) == true\n    is_power_of_two(8)\
    \ == true\n    is_power_of_two(3) == false\n    is_power_of_two(5) == false\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t\
    @test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4,\
    \ 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqyevapxc.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqyevapxc.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if is_power_of_two(n)\
    \ == true \n        then x == n**int(x) else false\n    else \n        false\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nis_power_of_two(8)\n</cell>\n\
    <code language=julia-1.5>\nis_power_of_two(9)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(10)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(11)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(12)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(13)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(14)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(15)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(16)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(17)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(18)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(19)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(20)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(21)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(22)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(23)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(24)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(25)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(26)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(27)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(28)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(29)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(30)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(31)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(32)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(33)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(34)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(35)\n\
    using Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"x\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwwxg3e1s.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpwwxg3e1s.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n==0\
    \ \n        then return true\n    else if n==1 \n        then return x==1\n  \
    \  else \n        x % n == 0 \n            && is_simple_power(x, n-1) || is_simple_power(x,\
    \ n//2)\nend\n</cell>\n<code language=julia-1.5>\n@assert is_simple_power(1, 4)\
    \ == true\n@assert is_simple_power(2, 2) == true\n@assert is_simple_power(8, 2)\
    \ == true\n@assert is_simple_power(3, 2) == false\n@assert is_simple_power(3,\
    \ 1) == false\n@assert is_simple_power(5, 3) == false\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns true if a number x is a power of n and false\
    \ in other cases.\nx is a power of n if n**int=x\nFor example:\nis_power(1, 4)\
    \ => true\nis_power(2, 2) => true\nis_power(8, 2) => true\nis_power(3, 2) => false\n\
    is_power(3, 1) => false\nis_power(5, 3) => false\nHint: use is_simple_power to\
    \ solve this exercise.\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpsa74yfm7.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpsa74yfm7.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n==1\
    \ \n        then return true\n    else if n==0 \n        then return false\n \
    \   else if n==-1 \n        then return false\n    else if n==-2\n        then\
    \ return false\n    else if n==-3\n        then return false\n    else if n==-4\n\
    \        then return false\n    else if n==-5\n        then return false\n   \
    \ else if n==-6\n        then return false\n    else if n==-7\n        then return\
    \ false\n    else if n==-8\n        then return false\n    else if n==-9\n   \
    \     then return false\n    else if n==-10\n        then return false\n    else\
    \ if n==-11\n        then return false\n    else if n==-12\n        then return\
    \ false\n    else if n==-13\n        then return false\n    else if n==-14\n \
    \       then return false\n    else if n==-15\n        then return false\n   \
    \ else if n==-16\n        then return false\n    else if n==-17\n        then\
    \ return false\n    else if n==-18\n        then return false\n    else if n==-19\n\
    \        then return false\n    else if n==-20\n        then return false\n  \
    \  else if n==-21\n        then return false\n    else if n==-22\n        then\
    \ return false\n    else if n==-23\n        then return false\n    else if n==-24\n\
    \        then return false\n    else if n==-25\n        then return false\n  \
    \  else if n==-26\n        then return false\n    else if n==-27\n        then\
    \ return false\n    else if n==-28\n        then return false\n    else if n==-29\n\
    \        then return false\n    else if n==-30\n        then return false\n  \
    \  else if n==-31\n        then return false\n    else if n==-32\n        then\
    \ return false\n    else if n==-33\n        then return false\n    else if n==-34\n\
    \        then return false\n    else if n==-35\n        then return false\n  \
    \  else if n==-36\n        then return false\n    else if n==-37\n        then\
    \ return false\n    else if n==-38\n        then return false\n    else if n==-39\n\
    \        then return false\n    else if n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpssrcbte8.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpssrcbte8.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if is_simple_power(x,\
    \ n)\n        true\n    else\n        false\n    end\nend\n</cell>\n<text>\nExercise\
    \ 7\nWrite a function that returns true if a number x is a power of n and false\
    \ in other cases.\nx is a power of n if n**int=x\nFor example:\nis_power_of_two(2)\
    \ => true\nis_power_of_two(8) => true\nis_power_of_two(9) => false\nis_power_of_two(10)\
    \ => false\nis_power_of_two(11) => false\nis_power_of_two(12) => false\nis_power_of_two(13)\
    \ => false\nis_power_of_two(14) => false\nis_power_of_two(15) => false\nis_power_of_two(16)\
    \ => false\nis_power_of_two(17) => false\nis_power_of_two(18) => false\nis_power_of_two(19)\
    \ => false\nis_power_of_two(20) => false\nis_power_of_two(21) => false\nis_power_of_two(22)\
    \ => false\nis_power_of_two(23) => false\nis_power_of_two(24) => false\nis_power_of_two(25)\
    \ => false\nis_power_of_two(26) => false\nis_power_of_two(27) => false\nis_power_of_two(28)\
    \ => false\nis_power_of_two(29) => false\nis_power_of_two(30) => false\nis_power_of_two(31)\
    \ => false\nis_power_of_two(32) => false\nis_power_of_two(33) => false\nis_power_of_two(34)\
    \ => false\nis_power_of_two(35) => false\nis_power_of_two(36) => false\nis_power_of_two(37)\
    \ => false\nis_power_of_two(38) => false\nis_power_of_two(39) => false\nis_power_of_two(40)\
    \ => false\nis_power_of_two(41) => false\nis_power_of_two(42) => false\nis_power_of_two(43)\
    \ => false\nis_power_of_two(44) => false\nis_power_of_two(45) => false\nis_power_of_two(46)\
    \ => false\nis_power_of_two(47) => false\nis_power_of_two(48) => false\nis_power_of_two(49)\
    \ => false\nis_power_of_two(50) => false\nis_power_of_two(51) => false\nis_power_of_two(52)\
    \ => false\nis_power_of_two(53) => false\nis_power_of_two(54) => false\nis_power_of_two(55)\
    \ => false\nis_power_of_two(56) => false\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1b_alnbk.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1b_alnbk.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n==1\
    \ \n        then return true\n    else if n==0 \n        then return false\n \
    \   else if n==-1 \n        then return false\n    else if n==-2 \n        then\
    \ return false\n    else if n==-3 \n        then return false\n    else if n==-4\
    \ \n        then return false\n    else if n==-5 \n        then return false\n\
    \    else if n==-6 \n        then return false\n    else if n==-7 \n        then\
    \ return false\n    else if n==-8 \n        then return false\n    else if n==-9\
    \ \n        then return false\n    else if n==-10 \n        then return false\n\
    \    else if n==-11 \n        then return false\n    else if n==-12 \n       \
    \ then return false\n    else if n==-13 \n        then return false\n    else\
    \ if n==-14 \n        then return false\n    else if n==-15 \n        then return\
    \ false\n    else if n==-16 \n        then return false\n    else if n==-17 \n\
    \        then return false\n    else if n==-18 \n        then return false\n \
    \   else if n==-19 \n        then return false\n    else if n==-20 \n        then\
    \ return false\n    else if n==-21 \n        then return false\n    else if n==-22\
    \ \n        then return false\n    else if n==-23 \n        then return false\n\
    \    else if n==-24 \n        then return false\n    else if n==-25 \n       \
    \ then return false\n    else if n==-26 \n        then return false\n    else\
    \ if n==-27 \n        then return false\n    else if n==-28 \n        then return\
    \ false\n    else if n==-29 \n        then return false\n    else if n==-30 \n\
    \        then return false\n    else if n==-31 \n        then return false\n \
    \   else if n==-32 \n        then return false\n    else if n==-33 \n        then\
    \ return false\n    else if n==-34 \n        then return false\n    else if n==-35\
    \ \n        then return false\n    else if n==-36 \n        then return false\n\
    \    else if n==-37 \n        then return false\n    else if n==-38 \n\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmptz3mlzi0.jl:14\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmptz3mlzi0.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n==1\
    \ then return true\n    if n==0 then return false\n    if n==-1 then return false\n\
    \    if n==-2 then return false\n    if n==-3 then return false\n    if n==-4\
    \ then return false\n    if n==-5 then return false\n    if n==-6 then return\
    \ false\n    if n==-7 then return false\n    if n==-8 then return false\n    if\
    \ n==-9 then return false\n    if n==-10 then return false\n    if n==-11 then\
    \ return false\n    if n==-12 then return false\n    if n==-13 then return false\n\
    \    if n==-14 then return false\n    if n==-15 then return false\n    if n==-16\
    \ then return false\n    if n==-17 then return false\n    if n==-18 then return\
    \ false\n    if n==-19 then return false\n    if n==-20 then return false\n  \
    \  if n==-21 then return false\n    if n==-22 then return false\n    if n==-23\
    \ then return false\n    if n==-24 then return false\n    if n==-25 then return\
    \ false\n    if n==-26 then return false\n    if n==-27 then return false\n  \
    \  if n==-28 then return false\n    if n==-29 then return false\n    if n==-30\
    \ then return false\n    if n==-31 then return false\n    if n==-32 then return\
    \ false\n    if n==-33 then return false\n    if n==-34 then return false\n  \
    \  if n==-35 then return false\n    if n==-36 then return false\n    if n==-37\
    \ then return false\n    if n==-38 then return false\n    if n==-39 then return\
    \ false\n    if n==-40 then return false\n    if n==-41 then return false\n  \
    \  if n==-42 then return false\n    if n==-43 then return false\n    if n==-44\
    \ then return false\n    if n==-45 then return false\n    if n==-46 then return\
    \ false\n    if n==-47 then return false\n    if n==-48 then return false\n  \
    \  if n==-49 then return false\n    if n==-50 then return false\n    if n==-51\
    \ then return false\n    if n==-52 then return false\n    if n==-53 then return\
    \ false\n    if n==-54 then return false\n    if n==\nusing Test\n\n@testset begin\n\
    \ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpyn_2prl_.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpyn_2prl_.jl:13\n"
  exit_code: 1
  status: Exception
